

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Sep 01 10:38:43 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     	;# 
    30  0001                     	;# 
    31  0002                     	;# 
    32  0003                     	;# 
    33  0004                     	;# 
    34  0005                     	;# 
    35  0006                     	;# 
    36  0007                     	;# 
    37  0008                     	;# 
    38  0009                     	;# 
    39  000A                     	;# 
    40  000B                     	;# 
    41  000C                     	;# 
    42  000D                     	;# 
    43  000E                     	;# 
    44  000E                     	;# 
    45  000F                     	;# 
    46  0010                     	;# 
    47  0011                     	;# 
    48  0012                     	;# 
    49  0013                     	;# 
    50  0014                     	;# 
    51  0015                     	;# 
    52  0015                     	;# 
    53  0016                     	;# 
    54  0017                     	;# 
    55  0018                     	;# 
    56  0019                     	;# 
    57  001A                     	;# 
    58  001B                     	;# 
    59  001B                     	;# 
    60  001C                     	;# 
    61  001D                     	;# 
    62  001E                     	;# 
    63  001F                     	;# 
    64  0081                     	;# 
    65  0085                     	;# 
    66  0086                     	;# 
    67  0087                     	;# 
    68  0088                     	;# 
    69  0089                     	;# 
    70  008C                     	;# 
    71  008D                     	;# 
    72  008E                     	;# 
    73  0091                     	;# 
    74  0092                     	;# 
    75  0093                     	;# 
    76  0094                     	;# 
    77  0098                     	;# 
    78  0099                     	;# 
    79  009C                     	;# 
    80  009D                     	;# 
    81  009E                     	;# 
    82  009F                     	;# 
    83  010C                     	;# 
    84  010D                     	;# 
    85  010E                     	;# 
    86  010F                     	;# 
    87  018C                     	;# 
    88  018D                     	;# 
    89  0000                     	;# 
    90  0001                     	;# 
    91  0002                     	;# 
    92  0003                     	;# 
    93  0004                     	;# 
    94  0005                     	;# 
    95  0006                     	;# 
    96  0007                     	;# 
    97  0008                     	;# 
    98  0009                     	;# 
    99  000A                     	;# 
   100  000B                     	;# 
   101  000C                     	;# 
   102  000D                     	;# 
   103  000E                     	;# 
   104  000E                     	;# 
   105  000F                     	;# 
   106  0010                     	;# 
   107  0011                     	;# 
   108  0012                     	;# 
   109  0013                     	;# 
   110  0014                     	;# 
   111  0015                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001B                     	;# 
   119  001B                     	;# 
   120  001C                     	;# 
   121  001D                     	;# 
   122  001E                     	;# 
   123  001F                     	;# 
   124  0081                     	;# 
   125  0085                     	;# 
   126  0086                     	;# 
   127  0087                     	;# 
   128  0088                     	;# 
   129  0089                     	;# 
   130  008C                     	;# 
   131  008D                     	;# 
   132  008E                     	;# 
   133  0091                     	;# 
   134  0092                     	;# 
   135  0093                     	;# 
   136  0094                     	;# 
   137  0098                     	;# 
   138  0099                     	;# 
   139  009C                     	;# 
   140  009D                     	;# 
   141  009E                     	;# 
   142  009F                     	;# 
   143  010C                     	;# 
   144  010D                     	;# 
   145  010E                     	;# 
   146  010F                     	;# 
   147  018C                     	;# 
   148  018D                     	;# 
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  0007                     	;# 
   157  0008                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0088                     	;# 
   189  0089                     	;# 
   190  008C                     	;# 
   191  008D                     	;# 
   192  008E                     	;# 
   193  0091                     	;# 
   194  0092                     	;# 
   195  0093                     	;# 
   196  0094                     	;# 
   197  0098                     	;# 
   198  0099                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  009F                     	;# 
   203  010C                     	;# 
   204  010D                     	;# 
   205  010E                     	;# 
   206  010F                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  000E                     	;# 
   225  000F                     	;# 
   226  0010                     	;# 
   227  0011                     	;# 
   228  0012                     	;# 
   229  0013                     	;# 
   230  0014                     	;# 
   231  0015                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0017                     	;# 
   235  0018                     	;# 
   236  0019                     	;# 
   237  001A                     	;# 
   238  001B                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  001D                     	;# 
   242  001E                     	;# 
   243  001F                     	;# 
   244  0081                     	;# 
   245  0085                     	;# 
   246  0086                     	;# 
   247  0087                     	;# 
   248  0088                     	;# 
   249  0089                     	;# 
   250  008C                     	;# 
   251  008D                     	;# 
   252  008E                     	;# 
   253  0091                     	;# 
   254  0092                     	;# 
   255  0093                     	;# 
   256  0094                     	;# 
   257  0098                     	;# 
   258  0099                     	;# 
   259  009C                     	;# 
   260  009D                     	;# 
   261  009E                     	;# 
   262  009F                     	;# 
   263  010C                     	;# 
   264  010D                     	;# 
   265  010E                     	;# 
   266  010F                     	;# 
   267  018C                     	;# 
   268  018D                     	;# 
   269                           
   270                           	psect	idataBANK0
   271  0000'                    __pidataBANK0:	
   272                           
   273                           ;initializer for _adcClosest
   274  0000' 34E8               	retlw	232
   275  0001' 3403               	retlw	3
   276  0007                     _PORTC	set	7
   277  0008                     _PORTD	set	8
   278  0009                     _PORTE	set	9
   279  001A                     _RCREG	set	26
   280  0018                     _RCSTA	set	24
   281  0013                     _SSPBUF	set	19
   282  0014                     _SSPCON	set	20
   283  0001                     _TMR0	set	1
   284  0019                     _TXREG	set	25
   285  005F                     _GIE	set	95
   286  005E                     _PEIE	set	94
   287  0030                     _RB0	set	48
   288  0031                     _RB1	set	49
   289  003A                     _RC2	set	58
   290  0065                     _RCIF	set	101
   291  0048                     _RE0	set	72
   292  0049                     _RE1	set	73
   293  004A                     _RE2	set	74
   294  0063                     _SSPIF	set	99
   295  005D                     _TMR0IE	set	93
   296  005A                     _TMR0IF	set	90
   297  009F                     _ADCON1	set	159
   298  0081                     _OPTION_REG	set	129
   299  0099                     _SPBRG	set	153
   300  0094                     _SSPSTAT	set	148
   301  0086                     _TRISB	set	134
   302  0087                     _TRISC	set	135
   303  0088                     _TRISD	set	136
   304  0089                     _TRISE	set	137
   305  0098                     _TXSTA	set	152
   306  04C1                     _TRMT	set	1217
   307                           
   308                           ; #config settings
   309  0000                     
   310                           	psect	cinit
   311  0000'                    start_initialization:	
   312  0000'                    __initialization:	
   313                           
   314                           ; Initialize objects allocated to BANK0
   315  0000' 120A' 118A' 2000' 120A' 118A' 	fcall	__pidataBANK0	;fetch initializer
   316  0005' 0080'              	movwf	__pdataBANK0& (0+127)
   317  0006' 120A' 118A' 2000' 120A' 118A' 	fcall	__pidataBANK0+1	;fetch initializer
   318  000B' 0080'              	movwf	(__pdataBANK0+1)& (0+127)
   319                           
   320                           ; Clear objects allocated to BANK0
   321  000C' 1383               	bcf	3,7	;select IRP bank0
   322  000D' 3000'              	movlw	low __pbssBANK0
   323  000E' 0084               	movwf	4
   324  000F' 3000'              	movlw	low (__pbssBANK0+27)
   325  0010' 120A' 118A' 2000'  	fcall	clear_ram0
   326                           
   327                           ; Clear objects allocated to COMMON
   328  0013' 0180'              	clrf	__pbssCOMMON& (0+127)
   329  0014' 0180'              	clrf	(__pbssCOMMON+1)& (0+127)
   330                           
   331                           ; Clear objects allocated to BITCOMMON
   332  0015' 0180'              	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   333  0016'                    end_of_initialization:	
   334                           ;End of C runtime variable initialization code
   335                           
   336  0016'                    __end_of__initialization:	
   337  0016' 0183               	clrf	3
   338  0017' 120A' 118A' 2800'  	ljmp	_main	;jump to C main() function
   339                           
   340                           	psect	bitbssCOMMON
   341  0000'                    __pbitbssCOMMON:	
   342  0000'                    _FLAG_1000MS:	
   343  0000'                    	ds	1
   344                           
   345                           	psect	bssCOMMON
   346  0000'                    __pbssCOMMON:	
   347  0000'                    _currentStep:	
   348  0000'                    	ds	1
   349  0001'                    _negativeFlag:	
   350  0001'                    	ds	1
   351                           
   352                           	psect	bssBANK0
   353  0000'                    __pbssBANK0:	
   354  0000'                    _Distance:	
   355  0000'                    	ds	2
   356  0002'                    _adcRAW:	
   357  0002'                    	ds	2
   358  0004'                    _degrees:	
   359  0004'                    	ds	2
   360  0006'                    _distTrav:	
   361  0006'                    	ds	2
   362  0008'                    _loop:	
   363  0008'                    	ds	2
   364  000A'                    _lowByte:	
   365  000A'                    	ds	2
   366  000C'                    _stepClosest:	
   367  000C'                    	ds	2
   368  000E'                    _stepCountNeg:	
   369  000E'                    	ds	2
   370  0010'                    _time_count:	
   371  0010'                    	ds	2
   372  0012'                    _totalDistTrav:	
   373  0012'                    	ds	2
   374  0014'                    _PB7Counter:	
   375  0014'                    	ds	1
   376  0015'                    _PB8Counter:	
   377  0015'                    	ds	1
   378  0016'                    _controlByte:	
   379  0016'                    	ds	1
   380  0017'                    _rxbyte:	
   381  0017'                    	ds	1
   382  0018'                    _stepCount:	
   383  0018'                    	ds	1
   384  0019'                    _highByte:	
   385  0019'                    	ds	2
   386                           
   387                           	psect	dataBANK0
   388  0000'                    __pdataBANK0:	
   389  0000'                    _adcClosest:	
   390  0000'                    	ds	2
   391                           
   392                           	psect	clrtext
   393  0000'                    clear_ram0:	
   394                           ;	Called with FSR containing the base address, and
   395                           ;	W with the last address+1
   396                           
   397  0000' 0064               	clrwdt	;clear the watchdog before getting into this loop
   398  0001'                    clrloop0:	
   399  0001' 0180               	clrf	0	;clear RAM location pointed to by FSR
   400  0002' 0A84               	incf	4,f	;increment pointer
   401  0003' 0604               	xorwf	4,w	;XOR with final address
   402  0004' 1903               	btfsc	3,2	;have we reached the end yet?
   403  0005' 3400               	retlw	0	;all done for this memory range, return
   404  0006' 0604               	xorwf	4,w	;XOR again to restore value
   405  0007' 2800'              	goto	clrloop0	;do the next byte
   406                           
   407                           	psect	cstackCOMMON
   408  0000'                    __pcstackCOMMON:	
   409  0000'                    ?_setupSPI:	
   410  0000'                    ?_ser_init:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0000'                    ?_setupLCD:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0000'                    ?_spi_transfer:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0000'                    ?_ser_putch:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0000'                    ?__moveCW:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0000'                    ?__ADCMain:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0000'                    ?__moveCCW:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0000'                    ?_ser_getch:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0000'                    ?_lcdSetCursor:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0000'                    ?_isr:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0000'                    ?_main:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0000'                    ?_lcdWriteControl:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0000'                    ?_lcdWriteData:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0000'                    ?_setupADC:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0000'                    ?___lwmod:	
   453                           ; 2 bytes @ 0x0
   454                           
   455  0000'                    ___lwmod@divisor:	
   456                           ; 2 bytes @ 0x0
   457                           
   458                           
   459                           ; 2 bytes @ 0x0
   460  0000'                    	ds	2
   461  0002'                    ___lwmod@dividend:	
   462                           
   463                           ; 2 bytes @ 0x2
   464  0002'                    	ds	2
   465  0004'                    ??___lwmod:	
   466                           
   467                           ; 1 bytes @ 0x4
   468  0004'                    	ds	1
   469  0005'                    ___lwmod@counter:	
   470                           
   471                           ; 1 bytes @ 0x5
   472  0005'                    	ds	1
   473  0006'                    ??_isr:	
   474                           
   475                           ; 1 bytes @ 0x6
   476  0006'                    	ds	5
   477                           
   478                           	psect	cstackBANK0
   479  0000'                    __pcstackBANK0:	
   480  0000'                    ??_setupSPI:	
   481  0000'                    ??_ser_init:	
   482                           ; 1 bytes @ 0x0
   483                           
   484  0000'                    ??_setupADC:	
   485                           ; 1 bytes @ 0x0
   486                           
   487  0000'                    ??_spi_transfer:	
   488                           ; 1 bytes @ 0x0
   489                           
   490  0000'                    ??_ser_putch:	
   491                           ; 1 bytes @ 0x0
   492                           
   493  0000'                    ??__moveCW:	
   494                           ; 1 bytes @ 0x0
   495                           
   496  0000'                    ??__ADCMain:	
   497                           ; 1 bytes @ 0x0
   498                           
   499  0000'                    ??__moveCCW:	
   500                           ; 1 bytes @ 0x0
   501                           
   502  0000'                    ??_ser_getch:	
   503                           ; 1 bytes @ 0x0
   504                           
   505  0000'                    ??_lcdWriteControl:	
   506                           ; 1 bytes @ 0x0
   507                           
   508  0000'                    ??_lcdWriteData:	
   509                           ; 1 bytes @ 0x0
   510                           
   511  0000'                    ?___awdiv:	
   512                           ; 1 bytes @ 0x0
   513                           
   514  0000'                    ser_putch@c:	
   515                           ; 2 bytes @ 0x0
   516                           
   517  0000'                    ___awdiv@divisor:	
   518                           ; 1 bytes @ 0x0
   519                           
   520                           
   521                           ; 2 bytes @ 0x0
   522  0000'                    	ds	1
   523  0001'                    spi_transfer@temp:	
   524  0001'                    ser_getch@rxbyte:	
   525                           ; 1 bytes @ 0x1
   526                           
   527                           
   528                           ; 1 bytes @ 0x1
   529  0001'                    	ds	1
   530  0002'                    lcdWriteControl@databyte:	
   531  0002'                    lcdWriteData@databyte:	
   532                           ; 1 bytes @ 0x2
   533                           
   534  0002'                    spi_transfer@data:	
   535                           ; 1 bytes @ 0x2
   536                           
   537  0002'                    ___awdiv@dividend:	
   538                           ; 1 bytes @ 0x2
   539                           
   540                           
   541                           ; 2 bytes @ 0x2
   542  0002'                    	ds	1
   543  0003'                    ??_setupLCD:	
   544  0003'                    ??_lcdSetCursor:	
   545                           ; 1 bytes @ 0x3
   546                           
   547  0003'                    ?_lcdWriteToDigitBCD:	
   548                           ; 1 bytes @ 0x3
   549                           
   550  0003'                    lcdSetCursor@address:	
   551                           ; 1 bytes @ 0x3
   552                           
   553  0003'                    lcdWriteToDigitBCD@data:	
   554                           ; 1 bytes @ 0x3
   555                           
   556                           
   557                           ; 2 bytes @ 0x3
   558  0003'                    	ds	1
   559  0004'                    ??___awdiv:	
   560                           
   561                           ; 1 bytes @ 0x4
   562  0004'                    	ds	1
   563  0005'                    ??_lcdWriteToDigitBCD:	
   564  0005'                    ___awdiv@counter:	
   565                           ; 1 bytes @ 0x5
   566                           
   567  0005'                    lcdWriteToDigitBCD@TensDigit:	
   568                           ; 1 bytes @ 0x5
   569                           
   570                           
   571                           ; 2 bytes @ 0x5
   572  0005'                    	ds	1
   573  0006'                    ___awdiv@sign:	
   574                           
   575                           ; 1 bytes @ 0x6
   576  0006'                    	ds	1
   577  0007'                    lcdWriteToDigitBCD@HunsDigit:	
   578  0007'                    ___awdiv@quotient:	
   579                           ; 2 bytes @ 0x7
   580                           
   581                           
   582                           ; 2 bytes @ 0x7
   583  0007'                    	ds	2
   584  0009'                    lcdWriteToDigitBCD@ThouDigit:	
   585                           
   586                           ; 2 bytes @ 0x9
   587  0009'                    	ds	2
   588  000B'                    lcdWriteToDigitBCD@TenThouDigit:	
   589                           
   590                           ; 2 bytes @ 0xB
   591  000B'                    	ds	2
   592  000D'                    lcdWriteToDigitBCD@OnesDigit:	
   593                           
   594                           ; 2 bytes @ 0xD
   595  000D'                    	ds	2
   596  000F'                    ??_main:	
   597                           
   598                           ; 1 bytes @ 0xF
   599  000F'                    	ds	3
   600  0012'                    main@controlByte:	
   601                           
   602                           ; 1 bytes @ 0x12
   603  0012'                    	ds	1
   604                           
   605                           	psect	maintext
   606  0000'                    __pmaintext:	
   607 ;;
   608 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   609 ;;
   610 ;; *************** function _main *****************
   611 ;; Defined at:
   612 ;;		line 56 in file "main.c"
   613 ;; Parameters:    Size  Location     Type
   614 ;;		None
   615 ;; Auto vars:     Size  Location     Type
   616 ;;  controlByte     1   18[BANK0 ] unsigned char 
   617 ;; Return value:  Size  Location     Type
   618 ;;                  1    wreg      void 
   619 ;; Registers used:
   620 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
   621 ;; Tracked objects:
   622 ;;		On entry : B00/0
   623 ;;		On exit  : 0/0
   624 ;;		Unchanged: 0/0
   625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   626 ;;      Params:         0       0       0       0       0
   627 ;;      Locals:         0       1       0       0       0
   628 ;;      Temps:          0       3       0       0       0
   629 ;;      Totals:         0       4       0       0       0
   630 ;;Total ram usage:        4 bytes
   631 ;; Hardware stack levels required when called:    4
   632 ;; This function calls:
   633 ;;		__ADCMain
   634 ;;		___awdiv
   635 ;;		__moveCCW
   636 ;;		__moveCW
   637 ;;		_lcdSetCursor
   638 ;;		_lcdWriteToDigitBCD
   639 ;;		_ser_getch
   640 ;;		_ser_init
   641 ;;		_ser_putch
   642 ;;		_setupADC
   643 ;;		_setupLCD
   644 ;;		_setupSPI
   645 ;;		_spi_transfer
   646 ;; This function is called by:
   647 ;;		Startup code after reset
   648 ;; This function uses a non-reentrant model
   649 ;;
   650                           
   651                           
   652                           ;psect for function _main
   653  0000'                    _main:	
   654                           
   655                           ;main.c: 59: setupSPI();
   656                           
   657                           ;incstack = 0
   658                           ; Regs used in _main: [allreg]
   659  0000' 120A' 118A' 2000' 120A' 118A' 	fcall	_setupSPI
   660                           
   661                           ;main.c: 60: ser_init();
   662  0005' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_init
   663                           
   664                           ;main.c: 61: setupLCD();
   665  000A' 120A' 118A' 2000' 120A' 118A' 	fcall	_setupLCD
   666                           
   667                           ;main.c: 62: setupADC();
   668  000F' 120A' 118A' 2000' 120A' 118A' 	fcall	_setupADC
   669                           
   670                           ;main.c: 64: unsigned char controlByte = 0b00001101;
   671  0014' 300D               	movlw	13
   672  0015' 1283               	bcf	3,5	;RP0=0, select bank0
   673  0016' 1303               	bcf	3,6	;RP1=0, select bank0
   674  0017' 008F'              	movwf	??_main
   675  0018' 080F'              	movf	??_main,w
   676  0019' 0092'              	movwf	main@controlByte
   677                           
   678                           ;main.c: 65: spi_transfer(controlByte);
   679  001A' 0812'              	movf	main@controlByte,w
   680  001B' 120A' 118A' 2000' 120A' 118A' 	fcall	_spi_transfer
   681                           
   682                           ;main.c: 67: ser_putch(128);
   683  0020' 3080               	movlw	128
   684  0021' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   685                           
   686                           ;main.c: 68: ser_putch(132);
   687  0026' 3084               	movlw	132
   688  0027'                    L1:	
   689  0027' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   690  002C'                    l1225:	
   691                           ;main.c: 70: while(1){
   692                           
   693                           
   694                           ;main.c: 79: if (PB8Counter >= 10 && !RB0 == 0){
   695  002C' 300A               	movlw	10
   696  002D' 1283               	bcf	3,5	;RP0=0, select bank0
   697  002E' 1303               	bcf	3,6	;RP1=0, select bank0
   698  002F' 0215'              	subwf	_PB8Counter,w
   699  0030' 1803               	btfsc	3,0
   700  0031' 1C06               	btfss	6,0	;volatile
   701  0032' 2800'              	goto	l1257
   702                           
   703                           ;main.c: 80: for (loop = 0; loop < 400; loop++){
   704  0033' 0188'              	clrf	_loop
   705  0034' 0189'              	clrf	_loop+1
   706  0035' 0809'              	movf	_loop+1,w
   707  0036' 3A80               	xorlw	128
   708  0037' 00FF               	movwf	127
   709  0038' 3081               	movlw	129
   710  0039' 027F               	subwf	127,w
   711  003A' 1D03               	skipz
   712  003B' 2800'              	goto	u725
   713  003C' 3090               	movlw	144
   714  003D' 0208'              	subwf	_loop,w
   715  003E'                    u725:	
   716  003E' 1803               	btfsc	3,0
   717  003F' 2800'              	goto	l1247
   718  0040'                    l1235:	
   719                           
   720                           ;main.c: 81: _moveCW();
   721  0040' 120A' 118A' 2000' 120A' 118A' 	fcall	__moveCW
   722                           
   723                           ;main.c: 82: _ADCMain();
   724  0045' 120A' 118A' 2000' 120A' 118A' 	fcall	__ADCMain
   725                           
   726                           ;main.c: 83: if (adcRAW > adcClosest){
   727  004A' 1283               	bcf	3,5	;RP0=0, select bank0
   728  004B' 1303               	bcf	3,6	;RP1=0, select bank0
   729  004C' 0803'              	movf	_adcRAW+1,w	;volatile
   730  004D' 0201'              	subwf	_adcClosest+1,w
   731  004E' 1D03               	skipz
   732  004F' 2800'              	goto	u735
   733  0050' 0802'              	movf	_adcRAW,w	;volatile
   734  0051' 0200'              	subwf	_adcClosest,w
   735  0052'                    u735:	
   736  0052' 1803               	skipnc
   737  0053' 2800'              	goto	l1243
   738                           
   739                           ;main.c: 84: adcClosest = adcRAW;
   740  0054' 0803'              	movf	_adcRAW+1,w	;volatile
   741  0055' 0081'              	movwf	_adcClosest+1
   742  0056' 0802'              	movf	_adcRAW,w	;volatile
   743  0057' 0080'              	movwf	_adcClosest
   744                           
   745                           ;main.c: 85: stepClosest = stepCount;
   746  0058' 0818'              	movf	_stepCount,w
   747  0059' 008C'              	movwf	_stepClosest
   748  005A' 018D'              	clrf	_stepClosest+1
   749  005B' 1B8C'              	btfsc	_stepClosest,7
   750  005C' 038D'              	decf	_stepClosest+1,f
   751  005D'                    l1243:	
   752  005D' 3001               	movlw	1
   753  005E' 0788'              	addwf	_loop,f
   754  005F' 1803               	skipnc
   755  0060' 0A89'              	incf	_loop+1,f
   756  0061' 3000               	movlw	0
   757  0062' 0789'              	addwf	_loop+1,f
   758  0063' 0809'              	movf	_loop+1,w
   759  0064' 3A80               	xorlw	128
   760  0065' 00FF               	movwf	127
   761  0066' 3081               	movlw	129
   762  0067' 027F               	subwf	127,w
   763  0068' 1D03               	skipz
   764  0069' 2800'              	goto	u745
   765  006A' 3090               	movlw	144
   766  006B' 0208'              	subwf	_loop,w
   767  006C'                    u745:	
   768  006C' 1C03               	skipc
   769  006D' 2800'              	goto	l1235
   770  006E'                    l1247:	
   771                           
   772                           ;main.c: 86: }
   773                           ;main.c: 87: }
   774                           ;main.c: 88: loop = 0;
   775  006E' 1283               	bcf	3,5	;RP0=0, select bank0
   776  006F' 1303               	bcf	3,6	;RP1=0, select bank0
   777  0070' 0188'              	clrf	_loop
   778  0071' 0189'              	clrf	_loop+1
   779                           
   780                           ;main.c: 90: for (loop = stepCount; loop != stepClosest; loop++){
   781  0072' 0818'              	movf	_stepCount,w
   782  0073' 0088'              	movwf	_loop
   783  0074' 0189'              	clrf	_loop+1
   784  0075' 1B88'              	btfsc	_loop,7
   785  0076' 0389'              	decf	_loop+1,f
   786  0077'                    l1255:	
   787  0077' 080D'              	movf	_stepClosest+1,w
   788  0078' 0609'              	xorwf	_loop+1,w
   789  0079' 1D03               	skipz
   790  007A' 2800'              	goto	u755
   791  007B' 080C'              	movf	_stepClosest,w
   792  007C' 0608'              	xorwf	_loop,w
   793  007D'                    u755:	
   794  007D' 1903               	btfsc	3,2
   795  007E' 2800'              	goto	l1257
   796                           
   797                           ;main.c: 91: _moveCCW();
   798  007F' 120A' 118A' 2000' 120A' 118A' 	fcall	__moveCCW
   799  0084' 3001               	movlw	1
   800  0085' 1283               	bcf	3,5	;RP0=0, select bank0
   801  0086' 1303               	bcf	3,6	;RP1=0, select bank0
   802  0087' 0788'              	addwf	_loop,f
   803  0088' 1803               	skipnc
   804  0089' 0A89'              	incf	_loop+1,f
   805  008A' 3000               	movlw	0
   806  008B' 0789'              	addwf	_loop+1,f
   807  008C' 2800'              	goto	l1255
   808  008D'                    l1257:	
   809                           
   810                           ;main.c: 92: }
   811                           ;main.c: 93: }
   812                           ;main.c: 98: if (PB7Counter >= 10 && !RB1 == 0){
   813  008D' 300A               	movlw	10
   814  008E' 0214'              	subwf	_PB7Counter,w
   815  008F' 1803               	btfsc	3,0
   816  0090' 1C86               	btfss	6,1	;volatile
   817  0091' 2800'              	goto	l1225
   818                           
   819                           ;main.c: 99: totalDistTrav = 0;
   820  0092' 0192'              	clrf	_totalDistTrav
   821  0093' 0193'              	clrf	_totalDistTrav+1
   822                           
   823                           ;main.c: 104: ser_putch(137);
   824  0094' 3089               	movlw	137
   825  0095' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   826                           
   827                           ;main.c: 105: ser_putch(0x00);
   828  009A' 3000               	movlw	0
   829  009B' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   830                           
   831                           ;main.c: 106: ser_putch(0b11111010);
   832  00A0' 30FA               	movlw	250
   833  00A1' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   834                           
   835                           ;main.c: 107: ser_putch(0x7F);
   836  00A6' 307F               	movlw	127
   837  00A7' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   838                           
   839                           ;main.c: 108: ser_putch(0xFF);
   840  00AC' 30FF               	movlw	255
   841  00AD' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   842                           
   843                           ;main.c: 111: for (loop = 0; loop < 400; loop++){
   844  00B2' 1283               	bcf	3,5	;RP0=0, select bank0
   845  00B3' 1303               	bcf	3,6	;RP1=0, select bank0
   846  00B4' 0188'              	clrf	_loop
   847  00B5' 0189'              	clrf	_loop+1
   848  00B6' 0809'              	movf	_loop+1,w
   849  00B7' 3A80               	xorlw	128
   850  00B8' 00FF               	movwf	127
   851  00B9' 3081               	movlw	129
   852  00BA' 027F               	subwf	127,w
   853  00BB' 1D03               	skipz
   854  00BC' 2800'              	goto	u785
   855  00BD' 3090               	movlw	144
   856  00BE' 0208'              	subwf	_loop,w
   857  00BF'                    u785:	
   858  00BF' 1803               	btfsc	3,0
   859  00C0' 2800'              	goto	l1299
   860  00C1'                    l1279:	
   861                           
   862                           ;main.c: 112: ser_putch(142);
   863  00C1' 308E               	movlw	142
   864  00C2' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   865                           
   866                           ;main.c: 113: ser_putch(19);
   867  00C7' 3013               	movlw	19
   868  00C8' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   869                           
   870                           ;main.c: 115: ser_getch();
   871  00CD' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_getch
   872                           
   873                           ;main.c: 116: highByte = rxbyte;
   874  00D2' 1283               	bcf	3,5	;RP0=0, select bank0
   875  00D3' 1303               	bcf	3,6	;RP1=0, select bank0
   876  00D4' 0817'              	movf	_rxbyte,w
   877  00D5' 008F'              	movwf	??_main
   878  00D6' 0190'              	clrf	??_main+1
   879  00D7' 080F'              	movf	??_main,w
   880  00D8' 0099'              	movwf	_highByte
   881  00D9' 0810'              	movf	??_main+1,w
   882  00DA' 009A'              	movwf	_highByte+1
   883                           
   884                           ;main.c: 117: ser_getch();
   885  00DB' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_getch
   886                           
   887                           ;main.c: 118: lowByte = rxbyte;
   888  00E0' 1283               	bcf	3,5	;RP0=0, select bank0
   889  00E1' 1303               	bcf	3,6	;RP1=0, select bank0
   890  00E2' 0817'              	movf	_rxbyte,w
   891  00E3' 008F'              	movwf	??_main
   892  00E4' 0190'              	clrf	??_main+1
   893  00E5' 080F'              	movf	??_main,w
   894  00E6' 008A'              	movwf	_lowByte
   895  00E7' 0810'              	movf	??_main+1,w
   896  00E8' 008B'              	movwf	_lowByte+1
   897                           
   898                           ;main.c: 120: distTrav = (256*highByte + lowByte);
   899  00E9' 081A'              	movf	_highByte+1,w
   900  00EA' 0090'              	movwf	??_main+1
   901  00EB' 0819'              	movf	_highByte,w
   902  00EC' 008F'              	movwf	??_main
   903  00ED' 080F'              	movf	??_main,w
   904  00EE' 0090'              	movwf	??_main+1
   905  00EF' 018F'              	clrf	??_main
   906  00F0' 080A'              	movf	_lowByte,w
   907  00F1' 070F'              	addwf	??_main,w
   908  00F2' 0086'              	movwf	_distTrav
   909  00F3' 080B'              	movf	_lowByte+1,w
   910  00F4' 1803               	skipnc
   911  00F5' 0A0B'              	incf	_lowByte+1,w
   912  00F6' 0710'              	addwf	??_main+1,w
   913  00F7' 0087'              	movwf	_distTrav+1
   914                           
   915                           ;main.c: 121: totalDistTrav = ((totalDistTrav + distTrav)/10);
   916  00F8' 300A               	movlw	10
   917  00F9' 0080'              	movwf	___awdiv@divisor
   918  00FA' 3000               	movlw	0
   919  00FB' 0081'              	movwf	___awdiv@divisor+1
   920  00FC' 0806'              	movf	_distTrav,w
   921  00FD' 0712'              	addwf	_totalDistTrav,w
   922  00FE' 0082'              	movwf	___awdiv@dividend
   923  00FF' 0807'              	movf	_distTrav+1,w
   924  0100' 1803               	skipnc
   925  0101' 0A07'              	incf	_distTrav+1,w
   926  0102' 0713'              	addwf	_totalDistTrav+1,w
   927  0103' 0083'              	movwf	___awdiv@dividend+1
   928  0104' 120A' 118A' 2000' 120A' 118A' 	fcall	___awdiv
   929  0109' 1283               	bcf	3,5	;RP0=0, select bank0
   930  010A' 1303               	bcf	3,6	;RP1=0, select bank0
   931  010B' 0801'              	movf	?___awdiv+1,w
   932  010C' 0093'              	movwf	_totalDistTrav+1
   933  010D' 0800'              	movf	?___awdiv,w
   934  010E' 0092'              	movwf	_totalDistTrav
   935                           
   936                           ;main.c: 123: lcdSetCursor(0b11000000);
   937  010F' 30C0               	movlw	192
   938  0110' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdSetCursor
   939                           
   940                           ;main.c: 124: lcdWriteToDigitBCD(totalDistTrav);
   941  0115' 1283               	bcf	3,5	;RP0=0, select bank0
   942  0116' 1303               	bcf	3,6	;RP1=0, select bank0
   943  0117' 0813'              	movf	_totalDistTrav+1,w
   944  0118' 0084'              	movwf	lcdWriteToDigitBCD@data+1
   945  0119' 0812'              	movf	_totalDistTrav,w
   946  011A' 0083'              	movwf	lcdWriteToDigitBCD@data
   947  011B' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteToDigitBCD
   948                           
   949                           ;main.c: 126: _delay((unsigned long)((40)*(20000000/4000.0)));
   950  0120' 3002               	movlw	2
   951  0121' 1283               	bcf	3,5	;RP0=0, select bank0
   952  0122' 1303               	bcf	3,6	;RP1=0, select bank0
   953  0123' 0091'              	movwf	??_main+2
   954  0124' 3004               	movlw	4
   955  0125' 0090'              	movwf	??_main+1
   956  0126' 30BA               	movlw	186
   957  0127' 008F'              	movwf	??_main
   958  0128'                    u817:	
   959  0128' 0B8F'              	decfsz	??_main,f
   960  0129' 2800'              	goto	u817
   961  012A' 0B90'              	decfsz	??_main+1,f
   962  012B' 2800'              	goto	u817
   963  012C' 0B91'              	decfsz	??_main+2,f
   964  012D' 2800'              	goto	u817
   965  012E' 0000               	nop
   966  012F' 3001               	movlw	1
   967  0130' 1283               	bcf	3,5	;RP0=0, select bank0
   968  0131' 1303               	bcf	3,6	;RP1=0, select bank0
   969  0132' 0788'              	addwf	_loop,f
   970  0133' 1803               	skipnc
   971  0134' 0A89'              	incf	_loop+1,f
   972  0135' 3000               	movlw	0
   973  0136' 0789'              	addwf	_loop+1,f
   974  0137' 0809'              	movf	_loop+1,w
   975  0138' 3A80               	xorlw	128
   976  0139' 00FF               	movwf	127
   977  013A' 3081               	movlw	129
   978  013B' 027F               	subwf	127,w
   979  013C' 1D03               	skipz
   980  013D' 2800'              	goto	u795
   981  013E' 3090               	movlw	144
   982  013F' 0208'              	subwf	_loop,w
   983  0140'                    u795:	
   984  0140' 1C03               	skipc
   985  0141' 2800'              	goto	l1279
   986  0142'                    l1299:	
   987                           
   988                           ;main.c: 127: }
   989                           ;main.c: 129: ser_putch(137);
   990  0142' 3089               	movlw	137
   991  0143' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   992                           
   993                           ;main.c: 130: ser_putch(0x00);
   994  0148' 3000               	movlw	0
   995  0149' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   996                           
   997                           ;main.c: 131: ser_putch(0x00);
   998  014E' 3000               	movlw	0
   999  014F' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
  1000                           
  1001                           ;main.c: 132: ser_putch(0x7F);
  1002  0154' 307F               	movlw	127
  1003  0155' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
  1004                           
  1005                           ;main.c: 133: ser_putch(0xFF);
  1006  015A' 30FF               	movlw	255
  1007  015B' 2800'              	goto	L1
  1008  015C'                    __end_of_main:	
  1009                           
  1010                           	psect	text1
  1011  0000'                    __ptext1:	
  1012 ;; *************** function _spi_transfer *****************
  1013 ;; Defined at:
  1014 ;;		line 23 in file "SPI.c"
  1015 ;; Parameters:    Size  Location     Type
  1016 ;;  data            1    wreg     unsigned char 
  1017 ;; Auto vars:     Size  Location     Type
  1018 ;;  data            1    2[BANK0 ] unsigned char 
  1019 ;;  temp            1    1[BANK0 ] unsigned char 
  1020 ;; Return value:  Size  Location     Type
  1021 ;;                  1    wreg      unsigned char 
  1022 ;; Registers used:
  1023 ;;		wreg, status,2
  1024 ;; Tracked objects:
  1025 ;;		On entry : 0/0
  1026 ;;		On exit  : 0/0
  1027 ;;		Unchanged: 0/0
  1028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1029 ;;      Params:         0       0       0       0       0
  1030 ;;      Locals:         0       2       0       0       0
  1031 ;;      Temps:          0       1       0       0       0
  1032 ;;      Totals:         0       3       0       0       0
  1033 ;;Total ram usage:        3 bytes
  1034 ;; Hardware stack levels used:    1
  1035 ;; Hardware stack levels required when called:    2
  1036 ;; This function calls:
  1037 ;;		Nothing
  1038 ;; This function is called by:
  1039 ;;		_main
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           
  1044                           ;psect for function _spi_transfer
  1045  0000'                    _spi_transfer:	
  1046                           
  1047                           ;incstack = 0
  1048                           ; Regs used in _spi_transfer: [wreg+status,2]
  1049                           ;spi_transfer@data stored from wreg
  1050  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1051  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1052  0002' 0082'              	movwf	spi_transfer@data
  1053                           
  1054                           ;SPI.c: 24: unsigned char temp = 0;
  1055  0003' 0181'              	clrf	spi_transfer@temp
  1056                           
  1057                           ;SPI.c: 26: SSPIF = 0;
  1058  0004' 118C               	bcf	12,3	;volatile
  1059                           
  1060                           ;SPI.c: 27: SSPBUF = data;
  1061  0005' 0802'              	movf	spi_transfer@data,w
  1062  0006' 0093               	movwf	19	;volatile
  1063  0007'                    l185:	
  1064                           ;SPI.c: 29: while (SSPIF == 0);
  1065                           
  1066  0007' 1D8C               	btfss	12,3	;volatile
  1067  0008' 2800'              	goto	l185
  1068                           
  1069                           ;SPI.c: 30: temp = SSPBUF;
  1070  0009' 0813               	movf	19,w	;volatile
  1071  000A' 0080'              	movwf	??_spi_transfer
  1072  000B' 0800'              	movf	??_spi_transfer,w
  1073  000C' 0081'              	movwf	spi_transfer@temp
  1074                           
  1075                           ;SPI.c: 31: SSPIF = 0;
  1076  000D' 118C               	bcf	12,3	;volatile
  1077  000E' 0008               	return
  1078  000F'                    __end_of_spi_transfer:	
  1079                           ;SPI.c: 33: return temp;
  1080                           ;	Return value of _spi_transfer is never used
  1081                           
  1082                           
  1083                           	psect	text2
  1084  0000'                    __ptext2:	
  1085 ;; *************** function _setupSPI *****************
  1086 ;; Defined at:
  1087 ;;		line 4 in file "SPI.c"
  1088 ;; Parameters:    Size  Location     Type
  1089 ;;		None
  1090 ;; Auto vars:     Size  Location     Type
  1091 ;;		None
  1092 ;; Return value:  Size  Location     Type
  1093 ;;                  1    wreg      void 
  1094 ;; Registers used:
  1095 ;;		wreg, status,2
  1096 ;; Tracked objects:
  1097 ;;		On entry : 0/0
  1098 ;;		On exit  : 0/0
  1099 ;;		Unchanged: 0/0
  1100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1101 ;;      Params:         0       0       0       0       0
  1102 ;;      Locals:         0       0       0       0       0
  1103 ;;      Temps:          0       0       0       0       0
  1104 ;;      Totals:         0       0       0       0       0
  1105 ;;Total ram usage:        0 bytes
  1106 ;; Hardware stack levels used:    1
  1107 ;; Hardware stack levels required when called:    2
  1108 ;; This function calls:
  1109 ;;		Nothing
  1110 ;; This function is called by:
  1111 ;;		_main
  1112 ;; This function uses a non-reentrant model
  1113 ;;
  1114                           
  1115                           
  1116                           ;psect for function _setupSPI
  1117  0000'                    _setupSPI:	
  1118                           
  1119                           ;SPI.c: 6: TRISB = 0b00000000;
  1120                           
  1121                           ;incstack = 0
  1122                           ; Regs used in _setupSPI: [wreg+status,2]
  1123  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  1124  0001' 1303               	bcf	3,6	;RP1=0, select bank1
  1125  0002' 0186               	clrf	6	;volatile
  1126                           
  1127                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  1128  0003' 3040               	movlw	64
  1129  0004' 0094               	movwf	20	;volatile
  1130                           
  1131                           ;SPI.c: 9: SSPCON = 0b00100000;
  1132  0005' 3020               	movlw	32
  1133  0006' 1283               	bcf	3,5	;RP0=0, select bank0
  1134  0007' 1303               	bcf	3,6	;RP1=0, select bank0
  1135  0008' 0094               	movwf	20	;volatile
  1136                           
  1137                           ;SPI.c: 10: TRISC = 0b11010000;
  1138  0009' 30D0               	movlw	208
  1139  000A' 1683               	bsf	3,5	;RP0=1, select bank1
  1140  000B' 1303               	bcf	3,6	;RP1=0, select bank1
  1141  000C' 0087               	movwf	7	;volatile
  1142                           
  1143                           ;SPI.c: 11: PORTC = 0b00000011;
  1144  000D' 3003               	movlw	3
  1145  000E' 1283               	bcf	3,5	;RP0=0, select bank0
  1146  000F' 1303               	bcf	3,6	;RP1=0, select bank0
  1147  0010' 0087               	movwf	7	;volatile
  1148                           
  1149                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  1150  0011' 3004               	movlw	4
  1151  0012' 1683               	bsf	3,5	;RP0=1, select bank1
  1152  0013' 1303               	bcf	3,6	;RP1=0, select bank1
  1153  0014' 0081               	movwf	1	;volatile
  1154                           
  1155                           ;SPI.c: 16: TMR0IE = 1;
  1156  0015' 168B               	bsf	11,5	;volatile
  1157                           
  1158                           ;SPI.c: 19: (GIE = 1);
  1159  0016' 178B               	bsf	11,7	;volatile
  1160  0017' 0008               	return
  1161  0018'                    __end_of_setupSPI:	
  1162                           
  1163                           	psect	text3
  1164  0000'                    __ptext3:	
  1165 ;; *************** function _setupLCD *****************
  1166 ;; Defined at:
  1167 ;;		line 86 in file "LCD.c"
  1168 ;; Parameters:    Size  Location     Type
  1169 ;;		None
  1170 ;; Auto vars:     Size  Location     Type
  1171 ;;		None
  1172 ;; Return value:  Size  Location     Type
  1173 ;;                  1    wreg      void 
  1174 ;; Registers used:
  1175 ;;		wreg, status,2, status,0, pclath, cstack
  1176 ;; Tracked objects:
  1177 ;;		On entry : 0/0
  1178 ;;		On exit  : 0/0
  1179 ;;		Unchanged: 0/0
  1180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1181 ;;      Params:         0       0       0       0       0
  1182 ;;      Locals:         0       0       0       0       0
  1183 ;;      Temps:          0       0       0       0       0
  1184 ;;      Totals:         0       0       0       0       0
  1185 ;;Total ram usage:        0 bytes
  1186 ;; Hardware stack levels used:    1
  1187 ;; Hardware stack levels required when called:    3
  1188 ;; This function calls:
  1189 ;;		_lcdWriteControl
  1190 ;; This function is called by:
  1191 ;;		_main
  1192 ;; This function uses a non-reentrant model
  1193 ;;
  1194                           
  1195                           
  1196                           ;psect for function _setupLCD
  1197  0000'                    _setupLCD:	
  1198                           
  1199                           ;LCD.c: 88: ADCON1 = 0b00000010;
  1200                           
  1201                           ;incstack = 0
  1202                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  1203  0000' 3002               	movlw	2
  1204  0001' 1683               	bsf	3,5	;RP0=1, select bank1
  1205  0002' 1303               	bcf	3,6	;RP1=0, select bank1
  1206  0003' 009F               	movwf	31	;volatile
  1207                           
  1208                           ;LCD.c: 90: PORTD = 0;
  1209  0004' 1283               	bcf	3,5	;RP0=0, select bank0
  1210  0005' 1303               	bcf	3,6	;RP1=0, select bank0
  1211  0006' 0188               	clrf	8	;volatile
  1212                           
  1213                           ;LCD.c: 91: PORTE = 0;
  1214  0007' 0189               	clrf	9	;volatile
  1215                           
  1216                           ;LCD.c: 93: TRISD = 0b00000000;
  1217  0008' 1683               	bsf	3,5	;RP0=1, select bank1
  1218  0009' 1303               	bcf	3,6	;RP1=0, select bank1
  1219  000A' 0188               	clrf	8	;volatile
  1220                           
  1221                           ;LCD.c: 94: TRISE = 0b00000000;
  1222  000B' 0189               	clrf	9	;volatile
  1223                           
  1224                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  1225  000C' 3001               	movlw	1
  1226  000D' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteControl
  1227                           
  1228                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  1229  0012' 3038               	movlw	56
  1230  0013' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteControl
  1231                           
  1232                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  1233  0018' 300C               	movlw	12
  1234  0019' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteControl
  1235                           
  1236                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  1237  001E' 3006               	movlw	6
  1238  001F' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteControl
  1239                           
  1240                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  1241  0024' 3002               	movlw	2
  1242  0025' 120A' 118A' 2000'  	fcall	_lcdWriteControl
  1243  0028' 0008               	return
  1244  0029'                    __end_of_setupLCD:	
  1245                           
  1246                           	psect	text4
  1247  0000'                    __ptext4:	
  1248 ;; *************** function _ser_putch *****************
  1249 ;; Defined at:
  1250 ;;		line 28 in file "ser.c"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;  c               1    wreg     unsigned char 
  1253 ;; Auto vars:     Size  Location     Type
  1254 ;;  c               1    0[BANK0 ] unsigned char 
  1255 ;; Return value:  Size  Location     Type
  1256 ;;                  1    wreg      void 
  1257 ;; Registers used:
  1258 ;;		wreg
  1259 ;; Tracked objects:
  1260 ;;		On entry : 0/0
  1261 ;;		On exit  : 0/0
  1262 ;;		Unchanged: 0/0
  1263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1264 ;;      Params:         0       0       0       0       0
  1265 ;;      Locals:         0       1       0       0       0
  1266 ;;      Temps:          0       0       0       0       0
  1267 ;;      Totals:         0       1       0       0       0
  1268 ;;Total ram usage:        1 bytes
  1269 ;; Hardware stack levels used:    1
  1270 ;; Hardware stack levels required when called:    2
  1271 ;; This function calls:
  1272 ;;		Nothing
  1273 ;; This function is called by:
  1274 ;;		_main
  1275 ;; This function uses a non-reentrant model
  1276 ;;
  1277                           
  1278                           
  1279                           ;psect for function _ser_putch
  1280  0000'                    _ser_putch:	
  1281                           
  1282                           ;incstack = 0
  1283                           ; Regs used in _ser_putch: [wreg]
  1284                           ;ser_putch@c stored from wreg
  1285  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1286  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1287  0002' 0080'              	movwf	ser_putch@c
  1288  0003'                    l212:	
  1289                           ;ser.c: 29: while(!TRMT);
  1290                           
  1291  0003' 1683               	bsf	3,5	;RP0=1, select bank1
  1292  0004' 1303               	bcf	3,6	;RP1=0, select bank1
  1293  0005' 1C98               	btfss	24,1	;volatile
  1294  0006' 2800'              	goto	l212
  1295                           
  1296                           ;ser.c: 30: TXREG=c;
  1297  0007' 1283               	bcf	3,5	;RP0=0, select bank0
  1298  0008' 1303               	bcf	3,6	;RP1=0, select bank0
  1299  0009' 0800'              	movf	ser_putch@c,w
  1300  000A' 0099               	movwf	25	;volatile
  1301  000B' 0008               	return
  1302  000C'                    __end_of_ser_putch:	
  1303                           
  1304                           	psect	text5
  1305  0000'                    __ptext5:	
  1306 ;; *************** function _ser_init *****************
  1307 ;; Defined at:
  1308 ;;		line 4 in file "ser.c"
  1309 ;; Parameters:    Size  Location     Type
  1310 ;;		None
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;		None
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  1    wreg      void 
  1315 ;; Registers used:
  1316 ;;		wreg
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1322 ;;      Params:         0       0       0       0       0
  1323 ;;      Locals:         0       0       0       0       0
  1324 ;;      Temps:          0       0       0       0       0
  1325 ;;      Totals:         0       0       0       0       0
  1326 ;;Total ram usage:        0 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; Hardware stack levels required when called:    2
  1329 ;; This function calls:
  1330 ;;		Nothing
  1331 ;; This function is called by:
  1332 ;;		_main
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           
  1337                           ;psect for function _ser_init
  1338  0000'                    _ser_init:	
  1339                           
  1340                           ;ser.c: 6: TXSTA = 0b00100100;
  1341                           
  1342                           ;incstack = 0
  1343                           ; Regs used in _ser_init: [wreg]
  1344  0000' 3024               	movlw	36
  1345  0001' 1683               	bsf	3,5	;RP0=1, select bank1
  1346  0002' 1303               	bcf	3,6	;RP1=0, select bank1
  1347  0003' 0098               	movwf	24	;volatile
  1348                           
  1349                           ;ser.c: 7: RCSTA = 0b10011000;
  1350  0004' 3098               	movlw	152
  1351  0005' 1283               	bcf	3,5	;RP0=0, select bank0
  1352  0006' 1303               	bcf	3,6	;RP1=0, select bank0
  1353  0007' 0098               	movwf	24	;volatile
  1354                           
  1355                           ;ser.c: 22: SPBRG = 20;
  1356  0008' 3014               	movlw	20
  1357  0009' 1683               	bsf	3,5	;RP0=1, select bank1
  1358  000A' 1303               	bcf	3,6	;RP1=0, select bank1
  1359  000B' 0099               	movwf	25	;volatile
  1360                           
  1361                           ;ser.c: 24: PEIE = 1;
  1362  000C' 170B               	bsf	11,6	;volatile
  1363                           
  1364                           ;ser.c: 25: (GIE = 1);
  1365  000D' 178B               	bsf	11,7	;volatile
  1366  000E' 0008               	return
  1367  000F'                    __end_of_ser_init:	
  1368                           
  1369                           	psect	text6
  1370  0000'                    __ptext6:	
  1371 ;; *************** function _ser_getch *****************
  1372 ;; Defined at:
  1373 ;;		line 33 in file "ser.c"
  1374 ;; Parameters:    Size  Location     Type
  1375 ;;		None
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  1378 ;; Return value:  Size  Location     Type
  1379 ;;                  1    wreg      unsigned char 
  1380 ;; Registers used:
  1381 ;;		wreg
  1382 ;; Tracked objects:
  1383 ;;		On entry : 0/0
  1384 ;;		On exit  : 0/0
  1385 ;;		Unchanged: 0/0
  1386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1387 ;;      Params:         0       0       0       0       0
  1388 ;;      Locals:         0       1       0       0       0
  1389 ;;      Temps:          0       1       0       0       0
  1390 ;;      Totals:         0       2       0       0       0
  1391 ;;Total ram usage:        2 bytes
  1392 ;; Hardware stack levels used:    1
  1393 ;; Hardware stack levels required when called:    2
  1394 ;; This function calls:
  1395 ;;		Nothing
  1396 ;; This function is called by:
  1397 ;;		_main
  1398 ;; This function uses a non-reentrant model
  1399 ;;
  1400                           
  1401                           
  1402                           ;psect for function _ser_getch
  1403  0000'                    _ser_getch:	
  1404  0000'                    l218:	
  1405                           ;ser.c: 34: while(!RCIF);
  1406                           
  1407                           ;incstack = 0
  1408                           ; Regs used in _ser_getch: [wreg]
  1409                           
  1410  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1411  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1412  0002' 1E8C               	btfss	12,5	;volatile
  1413  0003' 2800'              	goto	l218
  1414                           
  1415                           ;ser.c: 35: unsigned char rxbyte = RCREG;
  1416  0004' 081A               	movf	26,w	;volatile
  1417  0005' 0080'              	movwf	??_ser_getch
  1418  0006' 0800'              	movf	??_ser_getch,w
  1419  0007' 0081'              	movwf	ser_getch@rxbyte
  1420  0008' 0008               	return
  1421  0009'                    __end_of_ser_getch:	
  1422                           ;ser.c: 36: return rxbyte;
  1423                           ;	Return value of _ser_getch is never used
  1424                           
  1425                           
  1426                           	psect	text7
  1427  0000'                    __ptext7:	
  1428 ;; *************** function _lcdWriteToDigitBCD *****************
  1429 ;; Defined at:
  1430 ;;		line 42 in file "LCD.c"
  1431 ;; Parameters:    Size  Location     Type
  1432 ;;  data            2    3[BANK0 ] unsigned int 
  1433 ;; Auto vars:     Size  Location     Type
  1434 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  1435 ;;  TenThouDigit    2   11[BANK0 ] unsigned int 
  1436 ;;  ThouDigit       2    9[BANK0 ] unsigned int 
  1437 ;;  HunsDigit       2    7[BANK0 ] unsigned int 
  1438 ;;  TensDigit       2    5[BANK0 ] unsigned int 
  1439 ;; Return value:  Size  Location     Type
  1440 ;;                  1    wreg      void 
  1441 ;; Registers used:
  1442 ;;		wreg, status,2, status,0, pclath, cstack
  1443 ;; Tracked objects:
  1444 ;;		On entry : 0/0
  1445 ;;		On exit  : 0/0
  1446 ;;		Unchanged: 0/0
  1447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1448 ;;      Params:         0       2       0       0       0
  1449 ;;      Locals:         0      10       0       0       0
  1450 ;;      Temps:          0       0       0       0       0
  1451 ;;      Totals:         0      12       0       0       0
  1452 ;;Total ram usage:       12 bytes
  1453 ;; Hardware stack levels used:    1
  1454 ;; Hardware stack levels required when called:    3
  1455 ;; This function calls:
  1456 ;;		_lcdWriteData
  1457 ;; This function is called by:
  1458 ;;		_main
  1459 ;; This function uses a non-reentrant model
  1460 ;;
  1461                           
  1462                           
  1463                           ;psect for function _lcdWriteToDigitBCD
  1464  0000'                    _lcdWriteToDigitBCD:	
  1465                           
  1466                           ;LCD.c: 43: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  1467                           ;LCD.c: 46: OnesDigit = data;
  1468                           
  1469                           ;incstack = 0
  1470                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  1471  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1472  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1473  0002' 0804'              	movf	lcdWriteToDigitBCD@data+1,w
  1474  0003' 008E'              	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1475  0004' 0803'              	movf	lcdWriteToDigitBCD@data,w
  1476  0005' 008D'              	movwf	lcdWriteToDigitBCD@OnesDigit
  1477                           
  1478                           ;LCD.c: 47: TensDigit = 0;
  1479  0006' 0185'              	clrf	lcdWriteToDigitBCD@TensDigit
  1480  0007' 0186'              	clrf	lcdWriteToDigitBCD@TensDigit+1
  1481                           
  1482                           ;LCD.c: 48: HunsDigit = 0;
  1483  0008' 0187'              	clrf	lcdWriteToDigitBCD@HunsDigit
  1484  0009' 0188'              	clrf	lcdWriteToDigitBCD@HunsDigit+1
  1485                           
  1486                           ;LCD.c: 49: ThouDigit = 0;
  1487  000A' 0189'              	clrf	lcdWriteToDigitBCD@ThouDigit
  1488  000B' 018A'              	clrf	lcdWriteToDigitBCD@ThouDigit+1
  1489                           
  1490                           ;LCD.c: 50: TenThouDigit = 0;
  1491  000C' 018B'              	clrf	lcdWriteToDigitBCD@TenThouDigit
  1492  000D' 018C'              	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  1493  000E'                    l1093:	
  1494                           ;LCD.c: 53: while (OnesDigit >= 10000){
  1495                           
  1496  000E' 3027               	movlw	39
  1497  000F' 020E'              	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1498  0010' 3010               	movlw	16
  1499  0011' 1903               	skipnz
  1500  0012' 020D'              	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1501  0013' 1C03               	btfss	3,0
  1502  0014' 2800'              	goto	l1099
  1503                           
  1504                           ;LCD.c: 54: OnesDigit = OnesDigit - 10000;
  1505  0015' 080D'              	movf	lcdWriteToDigitBCD@OnesDigit,w
  1506  0016' 3EF0               	addlw	240
  1507  0017' 008D'              	movwf	lcdWriteToDigitBCD@OnesDigit
  1508  0018' 080E'              	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1509  0019' 1803               	skipnc
  1510  001A' 3E01               	addlw	1
  1511  001B' 3ED8               	addlw	216
  1512  001C' 008E'              	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1513                           
  1514                           ;LCD.c: 55: TenThouDigit++;
  1515  001D' 3001               	movlw	1
  1516  001E' 078B'              	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  1517  001F' 1803               	skipnc
  1518  0020' 0A8C'              	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  1519  0021' 3000               	movlw	0
  1520  0022' 078C'              	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  1521  0023' 2800'              	goto	l1093
  1522  0024'                    l1095:	
  1523                           ;LCD.c: 56: }
  1524                           ;LCD.c: 58: while (OnesDigit >= 1000){
  1525                           
  1526                           
  1527                           ;LCD.c: 59: OnesDigit = OnesDigit - 1000;
  1528  0024' 080D'              	movf	lcdWriteToDigitBCD@OnesDigit,w
  1529  0025' 3E18               	addlw	24
  1530  0026' 008D'              	movwf	lcdWriteToDigitBCD@OnesDigit
  1531  0027' 080E'              	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1532  0028' 1803               	skipnc
  1533  0029' 3E01               	addlw	1
  1534  002A' 3EFC               	addlw	252
  1535  002B' 008E'              	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1536                           
  1537                           ;LCD.c: 60: ThouDigit++;
  1538  002C' 3001               	movlw	1
  1539  002D' 0789'              	addwf	lcdWriteToDigitBCD@ThouDigit,f
  1540  002E' 1803               	skipnc
  1541  002F' 0A8A'              	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  1542  0030' 3000               	movlw	0
  1543  0031' 078A'              	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  1544  0032'                    l1099:	
  1545  0032' 3003               	movlw	3
  1546  0033' 020E'              	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1547  0034' 30E8               	movlw	232
  1548  0035' 1903               	skipnz
  1549  0036' 020D'              	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1550  0037' 1C03               	btfss	3,0
  1551  0038' 2800'              	goto	l1105
  1552  0039' 2800'              	goto	l1095
  1553  003A'                    l1101:	
  1554                           ;LCD.c: 61: }
  1555                           ;LCD.c: 63: while (OnesDigit >= 100){
  1556                           
  1557                           
  1558                           ;LCD.c: 64: OnesDigit = OnesDigit - 100;
  1559  003A' 080D'              	movf	lcdWriteToDigitBCD@OnesDigit,w
  1560  003B' 3E9C               	addlw	156
  1561  003C' 008D'              	movwf	lcdWriteToDigitBCD@OnesDigit
  1562  003D' 080E'              	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1563  003E' 1803               	skipnc
  1564  003F' 3E01               	addlw	1
  1565  0040' 3EFF               	addlw	255
  1566  0041' 008E'              	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1567                           
  1568                           ;LCD.c: 65: HunsDigit++;
  1569  0042' 3001               	movlw	1
  1570  0043' 0787'              	addwf	lcdWriteToDigitBCD@HunsDigit,f
  1571  0044' 1803               	skipnc
  1572  0045' 0A88'              	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  1573  0046' 3000               	movlw	0
  1574  0047' 0788'              	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  1575  0048'                    l1105:	
  1576  0048' 3000               	movlw	0
  1577  0049' 020E'              	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1578  004A' 3064               	movlw	100
  1579  004B' 1903               	skipnz
  1580  004C' 020D'              	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1581  004D' 1C03               	btfss	3,0
  1582  004E' 2800'              	goto	l1111
  1583  004F' 2800'              	goto	l1101
  1584  0050'                    l1107:	
  1585                           ;LCD.c: 66: }
  1586                           ;LCD.c: 68: while (OnesDigit >= 10){
  1587                           
  1588                           
  1589                           ;LCD.c: 69: OnesDigit = OnesDigit - 10;
  1590  0050' 080D'              	movf	lcdWriteToDigitBCD@OnesDigit,w
  1591  0051' 3EF6               	addlw	246
  1592  0052' 008D'              	movwf	lcdWriteToDigitBCD@OnesDigit
  1593  0053' 080E'              	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1594  0054' 1803               	skipnc
  1595  0055' 3E01               	addlw	1
  1596  0056' 3EFF               	addlw	255
  1597  0057' 008E'              	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1598                           
  1599                           ;LCD.c: 70: TensDigit++;
  1600  0058' 3001               	movlw	1
  1601  0059' 0785'              	addwf	lcdWriteToDigitBCD@TensDigit,f
  1602  005A' 1803               	skipnc
  1603  005B' 0A86'              	incf	lcdWriteToDigitBCD@TensDigit+1,f
  1604  005C' 3000               	movlw	0
  1605  005D' 0786'              	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  1606  005E'                    l1111:	
  1607  005E' 3000               	movlw	0
  1608  005F' 020E'              	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1609  0060' 300A               	movlw	10
  1610  0061' 1903               	skipnz
  1611  0062' 020D'              	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1612  0063' 1803               	skipnc
  1613  0064' 2800'              	goto	l1107
  1614                           
  1615                           ;LCD.c: 71: }
  1616                           ;LCD.c: 73: if (TenThouDigit > 0)
  1617  0065' 080B'              	movf	lcdWriteToDigitBCD@TenThouDigit,w
  1618  0066' 040C'              	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  1619  0067' 1903               	btfsc	3,2
  1620  0068' 2800'              	goto	l1117
  1621                           
  1622                           ;LCD.c: 74: lcdWriteData((unsigned int)TenThouDigit + 48);
  1623  0069' 080B'              	movf	lcdWriteToDigitBCD@TenThouDigit,w
  1624  006A' 3E30               	addlw	48
  1625  006B' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteData
  1626  0070'                    l1117:	
  1627                           
  1628                           ;LCD.c: 76: if (ThouDigit > 0)
  1629  0070' 1283               	bcf	3,5	;RP0=0, select bank0
  1630  0071' 1303               	bcf	3,6	;RP1=0, select bank0
  1631  0072' 0809'              	movf	lcdWriteToDigitBCD@ThouDigit,w
  1632  0073' 040A'              	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  1633  0074' 1903               	btfsc	3,2
  1634  0075' 2800'              	goto	l155
  1635                           
  1636                           ;LCD.c: 77: lcdWriteData((unsigned int)ThouDigit + 48);
  1637  0076' 0809'              	movf	lcdWriteToDigitBCD@ThouDigit,w
  1638  0077' 3E30               	addlw	48
  1639  0078' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteData
  1640  007D'                    l155:	
  1641                           
  1642                           ;LCD.c: 79: lcdWriteData((unsigned int)HunsDigit + 48);
  1643  007D' 1283               	bcf	3,5	;RP0=0, select bank0
  1644  007E' 1303               	bcf	3,6	;RP1=0, select bank0
  1645  007F' 0807'              	movf	lcdWriteToDigitBCD@HunsDigit,w
  1646  0080' 3E30               	addlw	48
  1647  0081' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteData
  1648                           
  1649                           ;LCD.c: 80: lcdWriteData((unsigned int)TensDigit + 48);
  1650  0086' 1283               	bcf	3,5	;RP0=0, select bank0
  1651  0087' 1303               	bcf	3,6	;RP1=0, select bank0
  1652  0088' 0805'              	movf	lcdWriteToDigitBCD@TensDigit,w
  1653  0089' 3E30               	addlw	48
  1654  008A' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteData
  1655                           
  1656                           ;LCD.c: 81: lcdWriteData((unsigned int)OnesDigit + 48);
  1657  008F' 1283               	bcf	3,5	;RP0=0, select bank0
  1658  0090' 1303               	bcf	3,6	;RP1=0, select bank0
  1659  0091' 080D'              	movf	lcdWriteToDigitBCD@OnesDigit,w
  1660  0092' 3E30               	addlw	48
  1661  0093' 120A' 118A' 2000'  	fcall	_lcdWriteData
  1662  0096' 0008               	return
  1663  0097'                    __end_of_lcdWriteToDigitBCD:	
  1664                           
  1665                           	psect	text8
  1666  0000'                    __ptext8:	
  1667 ;; *************** function _lcdWriteData *****************
  1668 ;; Defined at:
  1669 ;;		line 20 in file "LCD.c"
  1670 ;; Parameters:    Size  Location     Type
  1671 ;;  databyte        1    wreg     unsigned char 
  1672 ;; Auto vars:     Size  Location     Type
  1673 ;;  databyte        1    2[BANK0 ] unsigned char 
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  1    wreg      void 
  1676 ;; Registers used:
  1677 ;;		wreg
  1678 ;; Tracked objects:
  1679 ;;		On entry : 0/0
  1680 ;;		On exit  : 0/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1683 ;;      Params:         0       0       0       0       0
  1684 ;;      Locals:         0       1       0       0       0
  1685 ;;      Temps:          0       2       0       0       0
  1686 ;;      Totals:         0       3       0       0       0
  1687 ;;Total ram usage:        3 bytes
  1688 ;; Hardware stack levels used:    1
  1689 ;; Hardware stack levels required when called:    2
  1690 ;; This function calls:
  1691 ;;		Nothing
  1692 ;; This function is called by:
  1693 ;;		_lcdWriteToDigitBCD
  1694 ;;		_lcdWriteString
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698                           
  1699                           ;psect for function _lcdWriteData
  1700  0000'                    _lcdWriteData:	
  1701                           
  1702                           ;incstack = 0
  1703                           ; Regs used in _lcdWriteData: [wreg]
  1704                           ;lcdWriteData@databyte stored from wreg
  1705  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1706  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1707  0002' 0082'              	movwf	lcdWriteData@databyte
  1708                           
  1709                           ;LCD.c: 21: RE2 = 0;
  1710  0003' 1109               	bcf	9,2	;volatile
  1711                           
  1712                           ;LCD.c: 22: RE1 = 0;
  1713  0004' 1089               	bcf	9,1	;volatile
  1714                           
  1715                           ;LCD.c: 23: RE0 = 1;
  1716  0005' 1409               	bsf	9,0	;volatile
  1717                           
  1718                           ;LCD.c: 24: PORTD = databyte;
  1719  0006' 0802'              	movf	lcdWriteData@databyte,w
  1720  0007' 0088               	movwf	8	;volatile
  1721                           
  1722                           ;LCD.c: 25: RE2 = 1;
  1723  0008' 1509               	bsf	9,2	;volatile
  1724                           
  1725                           ;LCD.c: 26: RE2 = 0;
  1726  0009' 1109               	bcf	9,2	;volatile
  1727                           
  1728                           ;LCD.c: 27: _delay((unsigned long)((1)*(20000000/4000.0)));
  1729  000A' 3007               	movlw	7
  1730  000B' 0081'              	movwf	??_lcdWriteData+1
  1731  000C' 307D               	movlw	125
  1732  000D' 0080'              	movwf	??_lcdWriteData
  1733  000E'                    u827:	
  1734  000E' 0B80'              	decfsz	??_lcdWriteData,f
  1735  000F' 2800'              	goto	u827
  1736  0010' 0B81'              	decfsz	??_lcdWriteData+1,f
  1737  0011' 2800'              	goto	u827
  1738  0012' 0008               	return
  1739  0013'                    __end_of_lcdWriteData:	
  1740                           
  1741                           	psect	text9
  1742  0000'                    __ptext9:	
  1743 ;; *************** function _lcdSetCursor *****************
  1744 ;; Defined at:
  1745 ;;		line 31 in file "LCD.c"
  1746 ;; Parameters:    Size  Location     Type
  1747 ;;  address         1    wreg     unsigned char 
  1748 ;; Auto vars:     Size  Location     Type
  1749 ;;  address         1    3[BANK0 ] unsigned char 
  1750 ;; Return value:  Size  Location     Type
  1751 ;;                  1    wreg      void 
  1752 ;; Registers used:
  1753 ;;		wreg, status,2, status,0, pclath, cstack
  1754 ;; Tracked objects:
  1755 ;;		On entry : 0/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1759 ;;      Params:         0       0       0       0       0
  1760 ;;      Locals:         0       1       0       0       0
  1761 ;;      Temps:          0       0       0       0       0
  1762 ;;      Totals:         0       1       0       0       0
  1763 ;;Total ram usage:        1 bytes
  1764 ;; Hardware stack levels used:    1
  1765 ;; Hardware stack levels required when called:    3
  1766 ;; This function calls:
  1767 ;;		_lcdWriteControl
  1768 ;; This function is called by:
  1769 ;;		_main
  1770 ;; This function uses a non-reentrant model
  1771 ;;
  1772                           
  1773                           
  1774                           ;psect for function _lcdSetCursor
  1775  0000'                    _lcdSetCursor:	
  1776                           
  1777                           ;incstack = 0
  1778                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  1779                           ;lcdSetCursor@address stored from wreg
  1780  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1781  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1782  0002' 0083'              	movwf	lcdSetCursor@address
  1783                           
  1784                           ;LCD.c: 32: address |= 0b10000000;
  1785  0003' 1783'              	bsf	lcdSetCursor@address,7
  1786                           
  1787                           ;LCD.c: 33: lcdWriteControl(address);
  1788  0004' 0803'              	movf	lcdSetCursor@address,w
  1789  0005' 120A' 118A' 2000'  	fcall	_lcdWriteControl
  1790  0008' 0008               	return
  1791  0009'                    __end_of_lcdSetCursor:	
  1792                           
  1793                           	psect	text10
  1794  0000'                    __ptext10:	
  1795 ;; *************** function _lcdWriteControl *****************
  1796 ;; Defined at:
  1797 ;;		line 9 in file "LCD.c"
  1798 ;; Parameters:    Size  Location     Type
  1799 ;;  databyte        1    wreg     unsigned char 
  1800 ;; Auto vars:     Size  Location     Type
  1801 ;;  databyte        1    2[BANK0 ] unsigned char 
  1802 ;; Return value:  Size  Location     Type
  1803 ;;                  1    wreg      void 
  1804 ;; Registers used:
  1805 ;;		wreg
  1806 ;; Tracked objects:
  1807 ;;		On entry : 0/0
  1808 ;;		On exit  : 0/0
  1809 ;;		Unchanged: 0/0
  1810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1811 ;;      Params:         0       0       0       0       0
  1812 ;;      Locals:         0       1       0       0       0
  1813 ;;      Temps:          0       2       0       0       0
  1814 ;;      Totals:         0       3       0       0       0
  1815 ;;Total ram usage:        3 bytes
  1816 ;; Hardware stack levels used:    1
  1817 ;; Hardware stack levels required when called:    2
  1818 ;; This function calls:
  1819 ;;		Nothing
  1820 ;; This function is called by:
  1821 ;;		_lcdSetCursor
  1822 ;;		_setupLCD
  1823 ;; This function uses a non-reentrant model
  1824 ;;
  1825                           
  1826                           
  1827                           ;psect for function _lcdWriteControl
  1828  0000'                    _lcdWriteControl:	
  1829                           
  1830                           ;incstack = 0
  1831                           ; Regs used in _lcdWriteControl: [wreg]
  1832                           ;lcdWriteControl@databyte stored from wreg
  1833  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1834  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1835  0002' 0082'              	movwf	lcdWriteControl@databyte
  1836                           
  1837                           ;LCD.c: 10: RE2 = 0;
  1838  0003' 1109               	bcf	9,2	;volatile
  1839                           
  1840                           ;LCD.c: 11: RE1 = 0;
  1841  0004' 1089               	bcf	9,1	;volatile
  1842                           
  1843                           ;LCD.c: 12: RE0 = 0;
  1844  0005' 1009               	bcf	9,0	;volatile
  1845                           
  1846                           ;LCD.c: 13: PORTD = databyte;
  1847  0006' 0802'              	movf	lcdWriteControl@databyte,w
  1848  0007' 0088               	movwf	8	;volatile
  1849                           
  1850                           ;LCD.c: 14: RE2 = 1;
  1851  0008' 1509               	bsf	9,2	;volatile
  1852                           
  1853                           ;LCD.c: 15: RE2 = 0;
  1854  0009' 1109               	bcf	9,2	;volatile
  1855                           
  1856                           ;LCD.c: 16: _delay((unsigned long)((2)*(20000000/4000.0)));
  1857  000A' 300D               	movlw	13
  1858  000B' 0081'              	movwf	??_lcdWriteControl+1
  1859  000C' 30FB               	movlw	251
  1860  000D' 0080'              	movwf	??_lcdWriteControl
  1861  000E'                    u837:	
  1862  000E' 0B80'              	decfsz	??_lcdWriteControl,f
  1863  000F' 2800'              	goto	u837
  1864  0010' 0B81'              	decfsz	??_lcdWriteControl+1,f
  1865  0011' 2800'              	goto	u837
  1866  0012' 2800'              	nop2
  1867  0013' 0008               	return
  1868  0014'                    __end_of_lcdWriteControl:	
  1869                           
  1870                           	psect	text11
  1871  0000'                    __ptext11:	
  1872 ;; *************** function ___awdiv *****************
  1873 ;; Defined at:
  1874 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  1875 ;; Parameters:    Size  Location     Type
  1876 ;;  divisor         2    0[BANK0 ] int 
  1877 ;;  dividend        2    2[BANK0 ] int 
  1878 ;; Auto vars:     Size  Location     Type
  1879 ;;  quotient        2    7[BANK0 ] int 
  1880 ;;  sign            1    6[BANK0 ] unsigned char 
  1881 ;;  counter         1    5[BANK0 ] unsigned char 
  1882 ;; Return value:  Size  Location     Type
  1883 ;;                  2    0[BANK0 ] int 
  1884 ;; Registers used:
  1885 ;;		wreg, status,2, status,0
  1886 ;; Tracked objects:
  1887 ;;		On entry : 0/0
  1888 ;;		On exit  : 0/0
  1889 ;;		Unchanged: 0/0
  1890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1891 ;;      Params:         0       4       0       0       0
  1892 ;;      Locals:         0       4       0       0       0
  1893 ;;      Temps:          0       1       0       0       0
  1894 ;;      Totals:         0       9       0       0       0
  1895 ;;Total ram usage:        9 bytes
  1896 ;; Hardware stack levels used:    1
  1897 ;; Hardware stack levels required when called:    2
  1898 ;; This function calls:
  1899 ;;		Nothing
  1900 ;; This function is called by:
  1901 ;;		_main
  1902 ;; This function uses a non-reentrant model
  1903 ;;
  1904                           
  1905                           
  1906                           ;psect for function ___awdiv
  1907  0000'                    ___awdiv:	
  1908                           
  1909                           ;incstack = 0
  1910                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1911  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1912  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1913  0002' 0186'              	clrf	___awdiv@sign
  1914  0003' 1F81'              	btfss	___awdiv@divisor+1,7
  1915  0004' 2800'              	goto	l1129
  1916  0005' 0980'              	comf	___awdiv@divisor,f
  1917  0006' 0981'              	comf	___awdiv@divisor+1,f
  1918  0007' 0A80'              	incf	___awdiv@divisor,f
  1919  0008' 1903               	skipnz
  1920  0009' 0A81'              	incf	___awdiv@divisor+1,f
  1921  000A' 0186'              	clrf	___awdiv@sign
  1922  000B' 0A86'              	incf	___awdiv@sign,f
  1923  000C'                    l1129:	
  1924  000C' 1F83'              	btfss	___awdiv@dividend+1,7
  1925  000D' 2800'              	goto	l1135
  1926  000E' 0982'              	comf	___awdiv@dividend,f
  1927  000F' 0983'              	comf	___awdiv@dividend+1,f
  1928  0010' 0A82'              	incf	___awdiv@dividend,f
  1929  0011' 1903               	skipnz
  1930  0012' 0A83'              	incf	___awdiv@dividend+1,f
  1931  0013' 3001               	movlw	1
  1932  0014' 0084'              	movwf	??___awdiv
  1933  0015' 0804'              	movf	??___awdiv,w
  1934  0016' 0686'              	xorwf	___awdiv@sign,f
  1935  0017'                    l1135:	
  1936  0017' 0187'              	clrf	___awdiv@quotient
  1937  0018' 0188'              	clrf	___awdiv@quotient+1
  1938  0019' 0800'              	movf	___awdiv@divisor,w
  1939  001A' 0401'              	iorwf	___awdiv@divisor+1,w
  1940  001B' 1903               	btfsc	3,2
  1941  001C' 2800'              	goto	l1157
  1942  001D' 0185'              	clrf	___awdiv@counter
  1943  001E' 0A85'              	incf	___awdiv@counter,f
  1944  001F'                    l1145:	
  1945  001F' 1B81'              	btfsc	___awdiv@divisor+1,7
  1946  0020' 2800'              	goto	l1147
  1947  0021' 3001               	movlw	1
  1948  0022'                    u535:	
  1949  0022' 1003               	clrc
  1950  0023' 0D80'              	rlf	___awdiv@divisor,f
  1951  0024' 0D81'              	rlf	___awdiv@divisor+1,f
  1952  0025' 3EFF               	addlw	-1
  1953  0026' 1D03               	skipz
  1954  0027' 2800'              	goto	u535
  1955  0028' 3001               	movlw	1
  1956  0029' 0084'              	movwf	??___awdiv
  1957  002A' 0804'              	movf	??___awdiv,w
  1958  002B' 0785'              	addwf	___awdiv@counter,f
  1959  002C' 2800'              	goto	l1145
  1960  002D'                    l1147:	
  1961  002D' 3001               	movlw	1
  1962  002E'                    u555:	
  1963  002E' 1003               	clrc
  1964  002F' 0D87'              	rlf	___awdiv@quotient,f
  1965  0030' 0D88'              	rlf	___awdiv@quotient+1,f
  1966  0031' 3EFF               	addlw	-1
  1967  0032' 1D03               	skipz
  1968  0033' 2800'              	goto	u555
  1969  0034' 0801'              	movf	___awdiv@divisor+1,w
  1970  0035' 0203'              	subwf	___awdiv@dividend+1,w
  1971  0036' 1D03               	skipz
  1972  0037' 2800'              	goto	u565
  1973  0038' 0800'              	movf	___awdiv@divisor,w
  1974  0039' 0202'              	subwf	___awdiv@dividend,w
  1975  003A'                    u565:	
  1976  003A' 1C03               	skipc
  1977  003B' 2800'              	goto	l1153
  1978  003C' 0800'              	movf	___awdiv@divisor,w
  1979  003D' 0282'              	subwf	___awdiv@dividend,f
  1980  003E' 0801'              	movf	___awdiv@divisor+1,w
  1981  003F' 1C03               	skipc
  1982  0040' 0383'              	decf	___awdiv@dividend+1,f
  1983  0041' 0283'              	subwf	___awdiv@dividend+1,f
  1984  0042' 1407'              	bsf	___awdiv@quotient,0
  1985  0043'                    l1153:	
  1986  0043' 3001               	movlw	1
  1987  0044'                    u575:	
  1988  0044' 1003               	clrc
  1989  0045' 0C81'              	rrf	___awdiv@divisor+1,f
  1990  0046' 0C80'              	rrf	___awdiv@divisor,f
  1991  0047' 3EFF               	addlw	-1
  1992  0048' 1D03               	skipz
  1993  0049' 2800'              	goto	u575
  1994  004A' 3001               	movlw	1
  1995  004B' 0285'              	subwf	___awdiv@counter,f
  1996  004C' 1D03               	btfss	3,2
  1997  004D' 2800'              	goto	l1147
  1998  004E'                    l1157:	
  1999  004E' 0806'              	movf	___awdiv@sign,w
  2000  004F' 1903               	btfsc	3,2
  2001  0050' 2800'              	goto	l1161
  2002  0051' 0987'              	comf	___awdiv@quotient,f
  2003  0052' 0988'              	comf	___awdiv@quotient+1,f
  2004  0053' 0A87'              	incf	___awdiv@quotient,f
  2005  0054' 1903               	skipnz
  2006  0055' 0A88'              	incf	___awdiv@quotient+1,f
  2007  0056'                    l1161:	
  2008  0056' 0808'              	movf	___awdiv@quotient+1,w
  2009  0057' 0081'              	movwf	?___awdiv+1
  2010  0058' 0807'              	movf	___awdiv@quotient,w
  2011  0059' 0080'              	movwf	?___awdiv
  2012  005A' 0008               	return
  2013  005B'                    __end_of___awdiv:	
  2014                           
  2015                           	psect	text12
  2016  0000'                    __ptext12:	
  2017 ;; *************** function _isr *****************
  2018 ;; Defined at:
  2019 ;;		line 30 in file "main.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;		None
  2022 ;; Auto vars:     Size  Location     Type
  2023 ;;		None
  2024 ;; Return value:  Size  Location     Type
  2025 ;;                  1    wreg      void 
  2026 ;; Registers used:
  2027 ;;		wreg, status,2, status,0, pclath, cstack
  2028 ;; Tracked objects:
  2029 ;;		On entry : 0/0
  2030 ;;		On exit  : 0/0
  2031 ;;		Unchanged: 0/0
  2032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2033 ;;      Params:         0       0       0       0       0
  2034 ;;      Locals:         0       0       0       0       0
  2035 ;;      Temps:          5       0       0       0       0
  2036 ;;      Totals:         5       0       0       0       0
  2037 ;;Total ram usage:        5 bytes
  2038 ;; Hardware stack levels used:    1
  2039 ;; Hardware stack levels required when called:    1
  2040 ;; This function calls:
  2041 ;;		___lwmod
  2042 ;; This function is called by:
  2043 ;;		Interrupt level 1
  2044 ;; This function uses a non-reentrant model
  2045 ;;
  2046                           
  2047                           
  2048                           ;psect for function _isr
  2049  0000'                    _isr:	
  2050                           
  2051                           ;main.c: 32: if(TMR0IF){
  2052  0000' 1D0B               	btfss	11,2	;volatile
  2053  0001' 2800'              	goto	i1l86
  2054                           
  2055                           ;main.c: 33: TMR0IF = 0;
  2056  0002' 110B               	bcf	11,2	;volatile
  2057                           
  2058                           ;main.c: 34: TMR0 = 100;
  2059  0003' 3064               	movlw	100
  2060  0004' 0081               	movwf	1	;volatile
  2061                           
  2062                           ;main.c: 37: if(time_count % 1 == 0) {
  2063  0005' 3001               	movlw	1
  2064  0006' 0790'              	addwf	_time_count,f	;volatile
  2065  0007' 1803               	skipnc
  2066  0008' 0A91'              	incf	_time_count+1,f	;volatile
  2067  0009' 3000               	movlw	0
  2068  000A' 0791'              	addwf	_time_count+1,f	;volatile
  2069                           
  2070                           ;main.c: 39: RC2 = 1; __nop(); RC2 = 0;;
  2071  000B' 1507               	bsf	7,2	;volatile
  2072  000C' 0000               	nop
  2073  000D' 1283               	bcf	3,5	;RP0=0, select bank0
  2074  000E' 1303               	bcf	3,6	;RP1=0, select bank0
  2075  000F' 1107               	bcf	7,2	;volatile
  2076                           
  2077                           ;main.c: 40: }
  2078                           ;main.c: 42: if(time_count % 1000 == 0){
  2079  0010' 30E8               	movlw	232
  2080  0011' 0080'              	movwf	___lwmod@divisor
  2081  0012' 3003               	movlw	3
  2082  0013' 0081'              	movwf	___lwmod@divisor+1
  2083  0014' 0811'              	movf	_time_count+1,w	;volatile
  2084  0015' 0083'              	movwf	___lwmod@dividend+1
  2085  0016' 0810'              	movf	_time_count,w	;volatile
  2086  0017' 0082'              	movwf	___lwmod@dividend
  2087  0018' 120A' 118A' 2000' 120A' 118A' 	fcall	___lwmod
  2088  001D' 0800'              	movf	?___lwmod,w
  2089  001E' 0401'              	iorwf	?___lwmod+1,w
  2090  001F' 1D03               	btfss	3,2
  2091  0020' 2800'              	goto	i1l1205
  2092                           
  2093                           ;main.c: 43: RB0 = !RB0;
  2094  0021' 3001               	movlw	1
  2095  0022' 1283               	bcf	3,5	;RP0=0, select bank0
  2096  0023' 1303               	bcf	3,6	;RP1=0, select bank0
  2097  0024' 0686               	xorwf	6,f
  2098                           
  2099                           ;main.c: 45: time_count = 0;
  2100  0025' 0190'              	clrf	_time_count	;volatile
  2101  0026' 0191'              	clrf	_time_count+1	;volatile
  2102  0027'                    i1l1205:	
  2103                           
  2104                           ;main.c: 46: }
  2105                           ;main.c: 47: if (!RB0 == 1)
  2106  0027' 1283               	bcf	3,5	;RP0=0, select bank0
  2107  0028' 1303               	bcf	3,6	;RP1=0, select bank0
  2108  0029' 1806               	btfsc	6,0	;volatile
  2109  002A' 2800'              	goto	i1l1209
  2110                           
  2111                           ;main.c: 48: PB8Counter++;
  2112  002B' 3001               	movlw	1
  2113  002C' 0086'              	movwf	??_isr
  2114  002D' 0806'              	movf	??_isr,w
  2115  002E' 0795'              	addwf	_PB8Counter,f
  2116  002F'                    i1l1209:	
  2117                           
  2118                           ;main.c: 49: if (!RB1 == 1)
  2119  002F' 1886               	btfsc	6,1	;volatile
  2120  0030' 2800'              	goto	i1l86
  2121                           
  2122                           ;main.c: 50: PB7Counter++;
  2123  0031' 3001               	movlw	1
  2124  0032' 0086'              	movwf	??_isr
  2125  0033' 0806'              	movf	??_isr,w
  2126  0034' 0794'              	addwf	_PB7Counter,f
  2127  0035'                    i1l86:	
  2128  0035' 080A'              	movf	??_isr+4,w
  2129  0036' 00FF               	movwf	127
  2130  0037' 0809'              	movf	??_isr+3,w
  2131  0038' 008A               	movwf	10
  2132  0039' 0808'              	movf	??_isr+2,w
  2133  003A' 0084               	movwf	4
  2134  003B' 0E00'              	swapf	(??_isr+1)^(0+-128),w
  2135  003C' 0083               	movwf	3
  2136  003D' 0EFE               	swapf	126,f
  2137  003E' 0E7E               	swapf	126,w
  2138  003F' 0009               	retfie
  2139  0040'                    __end_of_isr:	
  2140                           
  2141                           	psect	intentry
  2142  0000'                    __pintentry:	
  2143                           ;incstack = 0
  2144                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  2145                           
  2146  0000'                    interrupt_function:	
  2147  007E                     saved_w	set	btemp
  2148  0000' 00FE               	movwf	btemp
  2149  0001' 0E03               	swapf	3,w
  2150  0002' 0087'              	movwf	??_isr+1
  2151  0003' 0804               	movf	4,w
  2152  0004' 0088'              	movwf	??_isr+2
  2153  0005' 080A               	movf	10,w
  2154  0006' 0089'              	movwf	??_isr+3
  2155  0007' 1283               	bcf	3,5	;RP0=0, select bank0
  2156  0008' 1303               	bcf	3,6	;RP1=0, select bank0
  2157  0009' 087F               	movf	btemp+1,w
  2158  000A' 008A'              	movwf	??_isr+4
  2159  000B' 120A' 118A' 2800'  	ljmp	_isr
  2160                           
  2161                           	psect	text13
  2162  0000'                    __ptext13:	
  2163 ;; *************** function ___lwmod *****************
  2164 ;; Defined at:
  2165 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  2166 ;; Parameters:    Size  Location     Type
  2167 ;;  divisor         2    0[COMMON] unsigned int 
  2168 ;;  dividend        2    2[COMMON] unsigned int 
  2169 ;; Auto vars:     Size  Location     Type
  2170 ;;  counter         1    5[COMMON] unsigned char 
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  2    0[COMMON] unsigned int 
  2173 ;; Registers used:
  2174 ;;		wreg, status,2, status,0
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2180 ;;      Params:         4       0       0       0       0
  2181 ;;      Locals:         1       0       0       0       0
  2182 ;;      Temps:          1       0       0       0       0
  2183 ;;      Totals:         6       0       0       0       0
  2184 ;;Total ram usage:        6 bytes
  2185 ;; Hardware stack levels used:    1
  2186 ;; This function calls:
  2187 ;;		Nothing
  2188 ;; This function is called by:
  2189 ;;		_isr
  2190 ;; This function uses a non-reentrant model
  2191 ;;
  2192                           
  2193                           
  2194                           ;psect for function ___lwmod
  2195  0000'                    ___lwmod:	
  2196                           
  2197                           ;incstack = 0
  2198                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2199  0000' 0800'              	movf	___lwmod@divisor,w
  2200  0001' 0401'              	iorwf	___lwmod@divisor+1,w
  2201  0002' 1903               	btfsc	3,2
  2202  0003' 2800'              	goto	i1l1183
  2203  0004' 0185'              	clrf	___lwmod@counter
  2204  0005' 0A85'              	incf	___lwmod@counter,f
  2205  0006'                    i1l1173:	
  2206  0006' 1B81'              	btfsc	___lwmod@divisor+1,7
  2207  0007' 2800'              	goto	i1l1175
  2208  0008' 3001               	movlw	1
  2209  0009'                    u61_25:	
  2210  0009' 1003               	clrc
  2211  000A' 0D80'              	rlf	___lwmod@divisor,f
  2212  000B' 0D81'              	rlf	___lwmod@divisor+1,f
  2213  000C' 3EFF               	addlw	-1
  2214  000D' 1D03               	skipz
  2215  000E' 2800'              	goto	u61_25
  2216  000F' 3001               	movlw	1
  2217  0010' 0084'              	movwf	??___lwmod
  2218  0011' 0804'              	movf	??___lwmod,w
  2219  0012' 0785'              	addwf	___lwmod@counter,f
  2220  0013' 2800'              	goto	i1l1173
  2221  0014'                    i1l1175:	
  2222  0014' 0801'              	movf	___lwmod@divisor+1,w
  2223  0015' 0203'              	subwf	___lwmod@dividend+1,w
  2224  0016' 1D03               	skipz
  2225  0017' 2800'              	goto	u63_25
  2226  0018' 0800'              	movf	___lwmod@divisor,w
  2227  0019' 0202'              	subwf	___lwmod@dividend,w
  2228  001A'                    u63_25:	
  2229  001A' 1C03               	skipc
  2230  001B' 2800'              	goto	i1l1179
  2231  001C' 0800'              	movf	___lwmod@divisor,w
  2232  001D' 0282'              	subwf	___lwmod@dividend,f
  2233  001E' 0801'              	movf	___lwmod@divisor+1,w
  2234  001F' 1C03               	skipc
  2235  0020' 0383'              	decf	___lwmod@dividend+1,f
  2236  0021' 0283'              	subwf	___lwmod@dividend+1,f
  2237  0022'                    i1l1179:	
  2238  0022' 3001               	movlw	1
  2239  0023'                    u64_25:	
  2240  0023' 1003               	clrc
  2241  0024' 0C81'              	rrf	___lwmod@divisor+1,f
  2242  0025' 0C80'              	rrf	___lwmod@divisor,f
  2243  0026' 3EFF               	addlw	-1
  2244  0027' 1D03               	skipz
  2245  0028' 2800'              	goto	u64_25
  2246  0029' 3001               	movlw	1
  2247  002A' 0285'              	subwf	___lwmod@counter,f
  2248  002B' 1D03               	btfss	3,2
  2249  002C' 2800'              	goto	i1l1175
  2250  002D'                    i1l1183:	
  2251  002D' 0803'              	movf	___lwmod@dividend+1,w
  2252  002E' 0081'              	movwf	?___lwmod+1
  2253  002F' 0802'              	movf	___lwmod@dividend,w
  2254  0030' 0080'              	movwf	?___lwmod
  2255  0031' 0008               	return
  2256  0032'                    __end_of___lwmod:	
  2257  007E                     btemp	set	126	;btemp
  2258  007E                     wtemp	set	126
  2259  007E                     wtemp0	set	126
  2260  0080                     wtemp1	set	128
  2261  0082                     wtemp2	set	130
  2262  0084                     wtemp3	set	132
  2263  0086                     wtemp4	set	134
  2264  0088                     wtemp5	set	136
  2265  007F                     wtemp6	set	127
  2266  007E                     ttemp	set	126
  2267  007E                     ttemp0	set	126
  2268  0081                     ttemp1	set	129
  2269  0084                     ttemp2	set	132
  2270  0087                     ttemp3	set	135
  2271  007F                     ttemp4	set	127
  2272  007E                     ltemp	set	126
  2273  007E                     ltemp0	set	126
  2274  0082                     ltemp1	set	130
  2275  0086                     ltemp2	set	134
  2276  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         29
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     19      48
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->___lwmod

Critical Paths under _main in BANK0

    _main->_lcdWriteToDigitBCD
    _setupLCD->_lcdWriteControl
    _lcdWriteToDigitBCD->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     995
                                             15 BANK0      4     4      0
                           __ADCMain
                            ___awdiv
                           __moveCCW
                            __moveCW
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
                          _ser_getch
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      30
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      22
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ser_getch                                            2     2      0       7
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _lcdWriteToDigitBCD                                  12    10      2     440
                                              3 BANK0     12    10      2
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (2) _lcdWriteData                                         3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcdSetCursor                                         1     1      0      45
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) __moveCW                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) __moveCCW                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     406
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) __ADCMain                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  5     5      0     265
                                              6 COMMON     5     5      0
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   __ADCMain
   ___awdiv
   __moveCCW
   __moveCW
   _lcdSetCursor
     _lcdWriteControl
   _lcdWriteToDigitBCD
     _lcdWriteData
   _ser_getch
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)
   ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     13      30       5       60.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       E       1      100.0%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3E      12        0.0%
ABS                  0      0      3E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Sep 01 10:38:43 2016

                   __CFG_CP$OFF 0000                    ___awdiv@sign 0006                              fsr 0004  
                           l212 0003                             l218 0000                             l155 007D  
                           l185 0007                             _GIE 005F                             _RB0 0030  
                           _RB1 0031                             _RC2 003A                             _RE0 0048  
                           _RE1 0049                             _RE2 004A                    __CFG_CPD$OFF 0000  
                           u535 0022                             u555 002E                             u565 003A  
                           u725 003E                             u575 0044                             u735 0052  
                           u817 0128                             u745 006C                             u827 000E  
                           u755 007D                             u837 000E                             u785 00BF  
                           u795 0140                             _isr 0000                             fsr0 0004  
                           indf 0000                    __CFG_FOSC$HS 0000                  ??_lcdWriteData 0000  
                  __CFG_LVP$OFF 0000                            l1101 003A                            l1111 005E  
                          l1105 0048                            l1107 0050                            l1117 0070  
                          l1135 0017                            l1161 0056                            l1153 0043  
                          l1145 001F                            l1129 000C                            l1225 002C  
                          l1147 002D                            l1243 005D                            l1235 0040  
                          l1157 004E                            l1093 000E                            l1095 0024  
                          l1255 0077                            l1247 006E                            l1257 008D  
                          l1099 0032                            l1279 00C1                            l1299 0142  
                          ?_isr 0000                            _PEIE 005E                            _RCIF 0065  
                          i1l86 0035                            _TMR0 0001                            _TRMT 04C1  
                  __CFG_WRT$OFF 0000                            _main 0000                            _loop 0008  
                          btemp 007E                            ltemp 007E                            start 0000* 
                          ttemp 007E                            wtemp 007E                           ??_isr 0006  
                         ?_main 0000                 __end_of___awdiv 005B                   __CFG_WDTE$OFF 0000  
               ___awdiv@divisor 0000                 __end_of___lwmod 0032                   _totalDistTrav 0012  
               ___awdiv@counter 0005                           _RCREG 001A                           _RCSTA 0018  
                         _SPBRG 0099                           _PORTC 0007                           _PORTD 0008  
                         _PORTE 0009                           u61_25 0009                           u63_25 001A  
                         u64_25 0023                           _TRISB 0086                           _TRISC 0087  
                         _TRISD 0088                           _TRISE 0089                           _SSPIF 0063  
                         _TXREG 0019                           _TXSTA 0098      __end_of_lcdWriteToDigitBCD 0097  
                __pbitbssCOMMON 0000                  __CFG_BOREN$OFF 0000                           pclath 000A  
                         ltemp0 007E                           ltemp1 0082                           ltemp2 0086  
                         ltemp3 0080                           ttemp0 007E                           ttemp1 0081  
                         ttemp2 0084                           ttemp3 0087                           ttemp4 007F  
                         status 0003                           wtemp0 007E                           wtemp1 0080  
                         wtemp2 0082                           wtemp3 0084                           wtemp4 0086  
                         wtemp5 0088                           wtemp6 007F                 __initialization 0000  
                  __end_of_main 015C        __size_of_lcdWriteControl 0014                          ??_main 000F  
          __end_of_lcdSetCursor 0009                          _ADCON1 009F                ___awdiv@dividend 0002  
                        i1l1205 0027                          i1l1209 002F                          i1l1173 0006  
                        i1l1175 0014                          i1l1183 002D                          i1l1179 0022  
                        _TMR0IE 005D                          _TMR0IF 005A                          _SSPCON 0014  
                        _SSPBUF 0013                  __CFG_PWRTE$OFF 0000                          _adcRAW 0002  
                     ??___awdiv 0004            __end_of_lcdWriteData 0013                       ??___lwmod 0004  
              ___awdiv@quotient 0007                       ??__moveCW 0000                          _rxbyte 0017  
              __end_of_ser_init 000F                __end_of_setupLCD 0029                __end_of_setupSPI 0018  
                        saved_w 007E                      _adcClosest 0000         __end_of__initialization 0016  
                __pcstackCOMMON 0000                    __pidataBANK0 0000                       ?__ADCMain 0000  
             ??_lcdWriteControl 0000                      __pbssBANK0 0000             lcdSetCursor@address 0003  
                    __pmaintext 0000                      __pintentry 0000           __size_of_lcdSetCursor 0009  
                    ??__ADCMain 0000              __size_of_ser_getch 0009              __size_of_ser_putch 000C  
                     ?__moveCCW 0000                         _SSPSTAT 0094           __size_of_lcdWriteData 0013  
                  _lcdSetCursor 0000              _lcdWriteToDigitBCD 0000                       ?_ser_init 0000  
                     ?_setupADC 0000                       ?_setupLCD 0000                       ?_setupSPI 0000  
                       ___awdiv 0000                         ___lwmod 0000             ?_lcdWriteToDigitBCD 0003  
                       _degrees 0004                         __moveCW 0000*                        __ptext1 0000  
                       __ptext2 0000                         __ptext3 0000                         __ptext4 0000  
                       __ptext5 0000                         __ptext6 0000                         __ptext7 0000  
                       __ptext8 0000                         __ptext9 0000                    __size_of_isr 0040  
                       _lowByte 000A                      ??__moveCCW 0000                         clrloop0 0001  
                  _lcdWriteData 0000            end_of_initialization 0016            ??_lcdWriteToDigitBCD 0005  
             __end_of_ser_getch 0009               __end_of_ser_putch 000C                      ??_ser_init 0000  
                    ??_setupADC 0000                      ??_setupLCD 0003                      ??_setupSPI 0000  
                    _time_count 0010                   ?_spi_transfer 0000                 ser_getch@rxbyte 0001  
               _lcdWriteControl 0000             start_initialization 0000                     __end_of_isr 0040  
                ??_spi_transfer 0000                     __pdataBANK0 0000                    _negativeFlag 0001  
                   _FLAG_1000MS 0000                     __pbssCOMMON 0000                       ___latbits 0002  
                 __pcstackBANK0 0000         __end_of_lcdWriteControl 0014                        ?___awdiv 0000  
             __size_of_ser_init 000F                        ?___lwmod 0000               __size_of_setupLCD 0029  
             __size_of_setupSPI 0018                        ?__moveCW 0000                 main@controlByte 0012  
       lcdWriteControl@databyte 0002               interrupt_function 0000                      ser_putch@c 0000  
                     clear_ram0 0000                       _ser_getch 0000                       _ser_putch 0000  
                      __ADCMain 0000*                      _stepCount 0018            __end_of_spi_transfer 000F  
              spi_transfer@data 0002                spi_transfer@temp 0001                     _controlByte 0016  
                      _Distance 0000            lcdWriteData@databyte 0002     __size_of_lcdWriteToDigitBCD 0097  
                    ?_ser_getch 0000                ?_lcdWriteControl 0000                      ?_ser_putch 0000  
              __size_of___awdiv 005B                __size_of___lwmod 0032                     _currentStep 0000  
lcdWriteToDigitBCD@TenThouDigit 000B                        __moveCCW 0000*                       __ptext10 0000  
                      __ptext11 0000                        __ptext12 0000                        __ptext13 0000  
                      _highByte 0019                        _distTrav 0006                   __size_of_main 015C  
                      _ser_init 0000                        _setupADC 0000*                       _setupLCD 0000  
                      _setupSPI 0000                      _PB7Counter 0014     lcdWriteToDigitBCD@HunsDigit 0007  
                    _PB8Counter 0015     lcdWriteToDigitBCD@OnesDigit 000D     lcdWriteToDigitBCD@TensDigit 0005  
   lcdWriteToDigitBCD@ThouDigit 0009                        intlevel1 0000*               ___lwmod@dividend 0002  
                 ?_lcdSetCursor 0000                     ??_ser_getch 0000                     ??_ser_putch 0000  
         __size_of_spi_transfer 000F                      _OPTION_REG 0081                 ___lwmod@divisor 0000  
               ___lwmod@counter 0005                   ?_lcdWriteData 0000          lcdWriteToDigitBCD@data 0003  
                  _spi_transfer 0000                  ??_lcdSetCursor 0003                    _stepCountNeg 000E  
                   _stepClosest 000C  
