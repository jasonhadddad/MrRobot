

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Sep 05 14:48:15 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     	;# 
    40  0001                     	;# 
    41  0002                     	;# 
    42  0003                     	;# 
    43  0004                     	;# 
    44  0005                     	;# 
    45  0006                     	;# 
    46  0007                     	;# 
    47  0008                     	;# 
    48  0009                     	;# 
    49  000A                     	;# 
    50  000B                     	;# 
    51  000C                     	;# 
    52  000D                     	;# 
    53  000E                     	;# 
    54  000E                     	;# 
    55  000F                     	;# 
    56  0010                     	;# 
    57  0011                     	;# 
    58  0012                     	;# 
    59  0013                     	;# 
    60  0014                     	;# 
    61  0015                     	;# 
    62  0015                     	;# 
    63  0016                     	;# 
    64  0017                     	;# 
    65  0018                     	;# 
    66  0019                     	;# 
    67  001A                     	;# 
    68  001B                     	;# 
    69  001B                     	;# 
    70  001C                     	;# 
    71  001D                     	;# 
    72  001E                     	;# 
    73  001F                     	;# 
    74  0081                     	;# 
    75  0085                     	;# 
    76  0086                     	;# 
    77  0087                     	;# 
    78  0088                     	;# 
    79  0089                     	;# 
    80  008C                     	;# 
    81  008D                     	;# 
    82  008E                     	;# 
    83  0091                     	;# 
    84  0092                     	;# 
    85  0093                     	;# 
    86  0094                     	;# 
    87  0098                     	;# 
    88  0099                     	;# 
    89  009C                     	;# 
    90  009D                     	;# 
    91  009E                     	;# 
    92  009F                     	;# 
    93  010C                     	;# 
    94  010D                     	;# 
    95  010E                     	;# 
    96  010F                     	;# 
    97  018C                     	;# 
    98  018D                     	;# 
    99  0000                     	;# 
   100  0001                     	;# 
   101  0002                     	;# 
   102  0003                     	;# 
   103  0004                     	;# 
   104  0005                     	;# 
   105  0006                     	;# 
   106  0007                     	;# 
   107  0008                     	;# 
   108  0009                     	;# 
   109  000A                     	;# 
   110  000B                     	;# 
   111  000C                     	;# 
   112  000D                     	;# 
   113  000E                     	;# 
   114  000E                     	;# 
   115  000F                     	;# 
   116  0010                     	;# 
   117  0011                     	;# 
   118  0012                     	;# 
   119  0013                     	;# 
   120  0014                     	;# 
   121  0015                     	;# 
   122  0015                     	;# 
   123  0016                     	;# 
   124  0017                     	;# 
   125  0018                     	;# 
   126  0019                     	;# 
   127  001A                     	;# 
   128  001B                     	;# 
   129  001B                     	;# 
   130  001C                     	;# 
   131  001D                     	;# 
   132  001E                     	;# 
   133  001F                     	;# 
   134  0081                     	;# 
   135  0085                     	;# 
   136  0086                     	;# 
   137  0087                     	;# 
   138  0088                     	;# 
   139  0089                     	;# 
   140  008C                     	;# 
   141  008D                     	;# 
   142  008E                     	;# 
   143  0091                     	;# 
   144  0092                     	;# 
   145  0093                     	;# 
   146  0094                     	;# 
   147  0098                     	;# 
   148  0099                     	;# 
   149  009C                     	;# 
   150  009D                     	;# 
   151  009E                     	;# 
   152  009F                     	;# 
   153  010C                     	;# 
   154  010D                     	;# 
   155  010E                     	;# 
   156  010F                     	;# 
   157  018C                     	;# 
   158  018D                     	;# 
   159  0000                     	;# 
   160  0001                     	;# 
   161  0002                     	;# 
   162  0003                     	;# 
   163  0004                     	;# 
   164  0005                     	;# 
   165  0006                     	;# 
   166  0007                     	;# 
   167  0008                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  000E                     	;# 
   175  000F                     	;# 
   176  0010                     	;# 
   177  0011                     	;# 
   178  0012                     	;# 
   179  0013                     	;# 
   180  0014                     	;# 
   181  0015                     	;# 
   182  0015                     	;# 
   183  0016                     	;# 
   184  0017                     	;# 
   185  0018                     	;# 
   186  0019                     	;# 
   187  001A                     	;# 
   188  001B                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  001D                     	;# 
   192  001E                     	;# 
   193  001F                     	;# 
   194  0081                     	;# 
   195  0085                     	;# 
   196  0086                     	;# 
   197  0087                     	;# 
   198  0088                     	;# 
   199  0089                     	;# 
   200  008C                     	;# 
   201  008D                     	;# 
   202  008E                     	;# 
   203  0091                     	;# 
   204  0092                     	;# 
   205  0093                     	;# 
   206  0094                     	;# 
   207  0098                     	;# 
   208  0099                     	;# 
   209  009C                     	;# 
   210  009D                     	;# 
   211  009E                     	;# 
   212  009F                     	;# 
   213  010C                     	;# 
   214  010D                     	;# 
   215  010E                     	;# 
   216  010F                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  0000                     	;# 
   220  0001                     	;# 
   221  0002                     	;# 
   222  0003                     	;# 
   223  0004                     	;# 
   224  0005                     	;# 
   225  0006                     	;# 
   226  0007                     	;# 
   227  0008                     	;# 
   228  0009                     	;# 
   229  000A                     	;# 
   230  000B                     	;# 
   231  000C                     	;# 
   232  000D                     	;# 
   233  000E                     	;# 
   234  000E                     	;# 
   235  000F                     	;# 
   236  0010                     	;# 
   237  0011                     	;# 
   238  0012                     	;# 
   239  0013                     	;# 
   240  0014                     	;# 
   241  0015                     	;# 
   242  0015                     	;# 
   243  0016                     	;# 
   244  0017                     	;# 
   245  0018                     	;# 
   246  0019                     	;# 
   247  001A                     	;# 
   248  001B                     	;# 
   249  001B                     	;# 
   250  001C                     	;# 
   251  001D                     	;# 
   252  001E                     	;# 
   253  001F                     	;# 
   254  0081                     	;# 
   255  0085                     	;# 
   256  0086                     	;# 
   257  0087                     	;# 
   258  0088                     	;# 
   259  0089                     	;# 
   260  008C                     	;# 
   261  008D                     	;# 
   262  008E                     	;# 
   263  0091                     	;# 
   264  0092                     	;# 
   265  0093                     	;# 
   266  0094                     	;# 
   267  0098                     	;# 
   268  0099                     	;# 
   269  009C                     	;# 
   270  009D                     	;# 
   271  009E                     	;# 
   272  009F                     	;# 
   273  010C                     	;# 
   274  010D                     	;# 
   275  010E                     	;# 
   276  010F                     	;# 
   277  018C                     	;# 
   278  018D                     	;# 
   279  0000                     	;# 
   280  0001                     	;# 
   281  0002                     	;# 
   282  0003                     	;# 
   283  0004                     	;# 
   284  0005                     	;# 
   285  0006                     	;# 
   286  0007                     	;# 
   287  0008                     	;# 
   288  0009                     	;# 
   289  000A                     	;# 
   290  000B                     	;# 
   291  000C                     	;# 
   292  000D                     	;# 
   293  000E                     	;# 
   294  000E                     	;# 
   295  000F                     	;# 
   296  0010                     	;# 
   297  0011                     	;# 
   298  0012                     	;# 
   299  0013                     	;# 
   300  0014                     	;# 
   301  0015                     	;# 
   302  0015                     	;# 
   303  0016                     	;# 
   304  0017                     	;# 
   305  0018                     	;# 
   306  0019                     	;# 
   307  001A                     	;# 
   308  001B                     	;# 
   309  001B                     	;# 
   310  001C                     	;# 
   311  001D                     	;# 
   312  001E                     	;# 
   313  001F                     	;# 
   314  0081                     	;# 
   315  0085                     	;# 
   316  0086                     	;# 
   317  0087                     	;# 
   318  0088                     	;# 
   319  0089                     	;# 
   320  008C                     	;# 
   321  008D                     	;# 
   322  008E                     	;# 
   323  0091                     	;# 
   324  0092                     	;# 
   325  0093                     	;# 
   326  0094                     	;# 
   327  0098                     	;# 
   328  0099                     	;# 
   329  009C                     	;# 
   330  009D                     	;# 
   331  009E                     	;# 
   332  009F                     	;# 
   333  010C                     	;# 
   334  010D                     	;# 
   335  010E                     	;# 
   336  010F                     	;# 
   337  018C                     	;# 
   338  018D                     	;# 
   339  0000                     	;# 
   340  0001                     	;# 
   341  0002                     	;# 
   342  0003                     	;# 
   343  0004                     	;# 
   344  0005                     	;# 
   345  0006                     	;# 
   346  0007                     	;# 
   347  0008                     	;# 
   348  0009                     	;# 
   349  000A                     	;# 
   350  000B                     	;# 
   351  000C                     	;# 
   352  000D                     	;# 
   353  000E                     	;# 
   354  000E                     	;# 
   355  000F                     	;# 
   356  0010                     	;# 
   357  0011                     	;# 
   358  0012                     	;# 
   359  0013                     	;# 
   360  0014                     	;# 
   361  0015                     	;# 
   362  0015                     	;# 
   363  0016                     	;# 
   364  0017                     	;# 
   365  0018                     	;# 
   366  0019                     	;# 
   367  001A                     	;# 
   368  001B                     	;# 
   369  001B                     	;# 
   370  001C                     	;# 
   371  001D                     	;# 
   372  001E                     	;# 
   373  001F                     	;# 
   374  0081                     	;# 
   375  0085                     	;# 
   376  0086                     	;# 
   377  0087                     	;# 
   378  0088                     	;# 
   379  0089                     	;# 
   380  008C                     	;# 
   381  008D                     	;# 
   382  008E                     	;# 
   383  0091                     	;# 
   384  0092                     	;# 
   385  0093                     	;# 
   386  0094                     	;# 
   387  0098                     	;# 
   388  0099                     	;# 
   389  009C                     	;# 
   390  009D                     	;# 
   391  009E                     	;# 
   392  009F                     	;# 
   393  010C                     	;# 
   394  010D                     	;# 
   395  010E                     	;# 
   396  010F                     	;# 
   397  018C                     	;# 
   398  018D                     	;# 
   399                           
   400                           	psect	idataBANK0
   401  07FB                     __pidataBANK0:	
   402                           
   403                           ;initializer for _adcClosest
   404  07FB  34E8               	retlw	232
   405  07FC  3403               	retlw	3
   406  001F                     _ADCON0	set	31
   407  0005                     _PORTA	set	5
   408  0007                     _PORTC	set	7
   409  0008                     _PORTD	set	8
   410  0009                     _PORTE	set	9
   411  001A                     _RCREG	set	26
   412  0018                     _RCSTA	set	24
   413  0013                     _SSPBUF	set	19
   414  0014                     _SSPCON	set	20
   415  0001                     _TMR0	set	1
   416  0019                     _TXREG	set	25
   417  001E                     _ADRESH	set	30
   418  005F                     _GIE	set	95
   419  00FA                     _GO	set	250
   420  005E                     _PEIE	set	94
   421  0030                     _RB0	set	48
   422  0031                     _RB1	set	49
   423  0032                     _RB2	set	50
   424  0033                     _RB3	set	51
   425  0034                     _RB4	set	52
   426  003A                     _RC2	set	58
   427  0065                     _RCIF	set	101
   428  0048                     _RE0	set	72
   429  0049                     _RE1	set	73
   430  004A                     _RE2	set	74
   431  0063                     _SSPIF	set	99
   432  005D                     _TMR0IE	set	93
   433  005A                     _TMR0IF	set	90
   434  009F                     _ADCON1	set	159
   435  009E                     _ADRESL	set	158
   436  0081                     _OPTION_REG	set	129
   437  0099                     _SPBRG	set	153
   438  0094                     _SSPSTAT	set	148
   439  0085                     _TRISA	set	133
   440  0086                     _TRISB	set	134
   441  0087                     _TRISC	set	135
   442  0088                     _TRISD	set	136
   443  0089                     _TRISE	set	137
   444  0098                     _TXSTA	set	152
   445  04C1                     _TRMT	set	1217
   446                           
   447                           ; #config settings
   448  0000                     
   449                           	psect	cinit
   450  0015                     start_initialization:	
   451  0015                     __initialization:	
   452                           
   453                           ; Initialize objects allocated to BANK0
   454  0015  120A  118A  27FB  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   455  001A  00EA               	movwf	__pdataBANK0& (0+127)
   456  001B  120A  118A  27FC  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   457  0020  00EB               	movwf	(__pdataBANK0+1)& (0+127)
   458                           
   459                           ; Clear objects allocated to BANK0
   460  0021  1383               	bcf	3,7	;select IRP bank0
   461  0022  3020               	movlw	low __pbssBANK0
   462  0023  0084               	movwf	4
   463  0024  3047               	movlw	low (__pbssBANK0+39)
   464  0025  120A  158A  266C   	fcall	clear_ram0
   465                           
   466                           ; Clear objects allocated to COMMON
   467  0028  01FC               	clrf	__pbssCOMMON& (0+127)
   468  0029  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   469                           
   470                           ; Clear objects allocated to BITCOMMON
   471  002A  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   472  002B                     end_of_initialization:	
   473                           ;End of C runtime variable initialization code
   474                           
   475  002B                     __end_of__initialization:	
   476  002B  0183               	clrf	3
   477  002C  120A  118A  2B6D   	ljmp	_main	;jump to C main() function
   478                           
   479                           	psect	bitbssCOMMON
   480  03D8                     __pbitbssCOMMON:	
   481  03D8                     _FLAG_1000MS:	
   482  03D8                     	ds	1
   483  03D9                     _FLAG_PLAY:	
   484  03D9                     	ds	1
   485  03DA                     _driving:	
   486  03DA                     	ds	1
   487                           
   488                           	psect	bssCOMMON
   489  007C                     __pbssCOMMON:	
   490  007C                     _currentStep:	
   491  007C                     	ds	1
   492  007D                     _rxbyte:	
   493  007D                     	ds	1
   494                           
   495                           	psect	bssBANK0
   496  0020                     __pbssBANK0:	
   497  0020                     _Distance:	
   498  0020                     	ds	2
   499  0022                     _adcRAW:	
   500  0022                     	ds	2
   501  0024                     _current:	
   502  0024                     	ds	2
   503  0026                     _degrees:	
   504  0026                     	ds	2
   505  0028                     _distTrav:	
   506  0028                     	ds	2
   507  002A                     _loop:	
   508  002A                     	ds	2
   509  002C                     _lowByte:	
   510  002C                     	ds	2
   511  002E                     _radH:	
   512  002E                     	ds	2
   513  0030                     _radL:	
   514  0030                     	ds	2
   515  0032                     _speedH:	
   516  0032                     	ds	2
   517  0034                     _speedL:	
   518  0034                     	ds	2
   519  0036                     _stepClosest:	
   520  0036                     	ds	2
   521  0038                     _stepCountNeg:	
   522  0038                     	ds	2
   523  003A                     _time_count:	
   524  003A                     	ds	2
   525  003C                     _totalDistTrav:	
   526  003C                     	ds	2
   527  003E                     _PB6Counter:	
   528  003E                     	ds	1
   529  003F                     _PB7Counter:	
   530  003F                     	ds	1
   531  0040                     _PB8Counter:	
   532  0040                     	ds	1
   533  0041                     _controlByte:	
   534  0041                     	ds	1
   535  0042                     _count:	
   536  0042                     	ds	1
   537  0043                     _negativeFlag:	
   538  0043                     	ds	1
   539  0044                     _stepCount:	
   540  0044                     	ds	1
   541  0045                     _highByte:	
   542  0045                     	ds	2
   543                           
   544                           	psect	dataBANK0
   545  006A                     __pdataBANK0:	
   546  006A                     _adcClosest:	
   547  006A                     	ds	2
   548                           
   549                           	psect	clrtext
   550  0E6C                     clear_ram0:	
   551                           ;	Called with FSR containing the base address, and
   552                           ;	W with the last address+1
   553                           
   554  0E6C  0064               	clrwdt	;clear the watchdog before getting into this loop
   555  0E6D                     clrloop0:	
   556  0E6D  0180               	clrf	0	;clear RAM location pointed to by FSR
   557  0E6E  0A84               	incf	4,f	;increment pointer
   558  0E6F  0604               	xorwf	4,w	;XOR with final address
   559  0E70  1903               	btfsc	3,2	;have we reached the end yet?
   560  0E71  3400               	retlw	0	;all done for this memory range, return
   561  0E72  0604               	xorwf	4,w	;XOR again to restore value
   562  0E73  2E6D               	goto	clrloop0	;do the next byte
   563                           
   564                           	psect	cstackCOMMON
   565  0070                     __pcstackCOMMON:	
   566  0070                     ?_setupSPI:	
   567  0070                     ?_ser_init:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0070                     ?_setupLCD:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0070                     ?_setupADC:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0070                     ?_spi_transfer:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0070                     ?_ser_putch:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0070                     ?_moveCW:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0070                     ?_ADCMain:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0070                     ?_moveCCW:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0070                     ?_isr:	
   592                           ; 1 bytes @ 0x0
   593                           
   594  0070                     ?_main:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  0070                     ?_lcdWriteControl:	
   598                           ; 1 bytes @ 0x0
   599                           
   600  0070                     ?_lcdWriteData:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  0070                     ?_lcdSetCursor:	
   604                           ; 1 bytes @ 0x0
   605                           
   606  0070                     ?_getDistTrav:	
   607                           ; 1 bytes @ 0x0
   608                           
   609  0070                     ?_getADC:	
   610                           ; 2 bytes @ 0x0
   611                           
   612  0070                     ?___lwmod:	
   613                           ; 2 bytes @ 0x0
   614                           
   615  0070                     ___lwmod@divisor:	
   616                           ; 2 bytes @ 0x0
   617                           
   618                           
   619                           ; 2 bytes @ 0x0
   620  0070                     	ds	2
   621  0072                     ___lwmod@dividend:	
   622                           
   623                           ; 2 bytes @ 0x2
   624  0072                     	ds	2
   625  0074                     ??___lwmod:	
   626                           
   627                           ; 1 bytes @ 0x4
   628  0074                     	ds	1
   629  0075                     ___lwmod@counter:	
   630                           
   631                           ; 1 bytes @ 0x5
   632  0075                     	ds	1
   633  0076                     ??_isr:	
   634                           
   635                           ; 1 bytes @ 0x6
   636  0076                     	ds	5
   637                           
   638                           	psect	cstackBANK0
   639  0047                     __pcstackBANK0:	
   640  0047                     ??_setupSPI:	
   641  0047                     ??_ser_init:	
   642                           ; 1 bytes @ 0x0
   643                           
   644  0047                     ??_setupADC:	
   645                           ; 1 bytes @ 0x0
   646                           
   647  0047                     ??_spi_transfer:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  0047                     ??_ser_putch:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0047                     ??_moveCW:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0047                     ??_moveCCW:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0047                     ??_getADC:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0047                     ??_lcdWriteControl:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0047                     ??_lcdWriteData:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0047                     ?_ser_getch:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0047                     ?___wmul:	
   672                           ; 2 bytes @ 0x0
   673                           
   674  0047                     ___wmul@multiplier:	
   675                           ; 2 bytes @ 0x0
   676                           
   677                           
   678                           ; 2 bytes @ 0x0
   679  0047                     	ds	1
   680  0048                     spi_transfer@temp:	
   681                           
   682                           ; 1 bytes @ 0x1
   683  0048                     	ds	1
   684  0049                     ??_ser_getch:	
   685  0049                     lcdWriteControl@databyte:	
   686                           ; 1 bytes @ 0x2
   687                           
   688  0049                     lcdWriteData@databyte:	
   689                           ; 1 bytes @ 0x2
   690                           
   691  0049                     spi_transfer@data:	
   692                           ; 1 bytes @ 0x2
   693                           
   694  0049                     ___wmul@multiplicand:	
   695                           ; 1 bytes @ 0x2
   696                           
   697                           
   698                           ; 2 bytes @ 0x2
   699  0049                     	ds	1
   700  004A                     ??_setupLCD:	
   701  004A                     ?_lcdWriteToDigitBCD:	
   702                           ; 1 bytes @ 0x3
   703                           
   704  004A                     ??_lcdSetCursor:	
   705                           ; 1 bytes @ 0x3
   706                           
   707  004A                     lcdSetCursor@address:	
   708                           ; 1 bytes @ 0x3
   709                           
   710  004A                     ser_putch@c:	
   711                           ; 1 bytes @ 0x3
   712                           
   713  004A                     lcdWriteToDigitBCD@data:	
   714                           ; 1 bytes @ 0x3
   715                           
   716                           
   717                           ; 2 bytes @ 0x3
   718  004A                     	ds	1
   719  004B                     ?_Drive:	
   720  004B                     ??___wmul:	
   721                           ; 1 bytes @ 0x4
   722                           
   723  004B                     Drive@speedH:	
   724                           ; 1 bytes @ 0x4
   725                           
   726  004B                     ___wmul@product:	
   727                           ; 2 bytes @ 0x4
   728                           
   729                           
   730                           ; 2 bytes @ 0x4
   731  004B                     	ds	1
   732  004C                     ??_lcdWriteToDigitBCD:	
   733  004C                     lcdWriteToDigitBCD@TensDigit:	
   734                           ; 1 bytes @ 0x5
   735                           
   736  004C                     ser_getch@rxbyte:	
   737                           ; 2 bytes @ 0x5
   738                           
   739                           
   740                           ; 2 bytes @ 0x5
   741  004C                     	ds	1
   742  004D                     ?___lwdiv:	
   743  004D                     ?___aldiv:	
   744                           ; 2 bytes @ 0x6
   745                           
   746  004D                     Drive@speedL:	
   747                           ; 4 bytes @ 0x6
   748                           
   749  004D                     ___lwdiv@divisor:	
   750                           ; 2 bytes @ 0x6
   751                           
   752  004D                     ___aldiv@divisor:	
   753                           ; 2 bytes @ 0x6
   754                           
   755                           
   756                           ; 4 bytes @ 0x6
   757  004D                     	ds	1
   758  004E                     lcdWriteToDigitBCD@HunsDigit:	
   759                           
   760                           ; 2 bytes @ 0x7
   761  004E                     	ds	1
   762  004F                     Drive@radH:	
   763  004F                     ___lwdiv@dividend:	
   764                           ; 2 bytes @ 0x8
   765                           
   766                           
   767                           ; 2 bytes @ 0x8
   768  004F                     	ds	1
   769  0050                     lcdWriteToDigitBCD@ThouDigit:	
   770                           
   771                           ; 2 bytes @ 0x9
   772  0050                     	ds	1
   773  0051                     ??___lwdiv:	
   774  0051                     Drive@radL:	
   775                           ; 1 bytes @ 0xA
   776                           
   777  0051                     ___aldiv@dividend:	
   778                           ; 2 bytes @ 0xA
   779                           
   780                           
   781                           ; 4 bytes @ 0xA
   782  0051                     	ds	1
   783  0052                     lcdWriteToDigitBCD@TenThouDigit:	
   784  0052                     ___lwdiv@quotient:	
   785                           ; 2 bytes @ 0xB
   786                           
   787                           
   788                           ; 2 bytes @ 0xB
   789  0052                     	ds	1
   790  0053                     ??_Drive:	
   791                           
   792                           ; 1 bytes @ 0xC
   793  0053                     	ds	1
   794  0054                     ___lwdiv@counter:	
   795  0054                     lcdWriteToDigitBCD@OnesDigit:	
   796                           ; 1 bytes @ 0xD
   797                           
   798                           
   799                           ; 2 bytes @ 0xD
   800  0054                     	ds	1
   801  0055                     ??___aldiv:	
   802                           
   803                           ; 1 bytes @ 0xE
   804  0055                     	ds	1
   805  0056                     ??_getDistTrav:	
   806  0056                     ___aldiv@counter:	
   807                           ; 1 bytes @ 0xF
   808                           
   809                           
   810                           ; 1 bytes @ 0xF
   811  0056                     	ds	1
   812  0057                     ___aldiv@sign:	
   813                           
   814                           ; 1 bytes @ 0x10
   815  0057                     	ds	1
   816  0058                     ___aldiv@quotient:	
   817                           
   818                           ; 4 bytes @ 0x11
   819  0058                     	ds	4
   820  005C                     ?_adcConvertMM:	
   821  005C                     adcConvertMM@adcRAW:	
   822                           ; 2 bytes @ 0x15
   823                           
   824                           
   825                           ; 2 bytes @ 0x15
   826  005C                     	ds	2
   827  005E                     ??_adcConvertMM:	
   828                           
   829                           ; 1 bytes @ 0x17
   830  005E                     	ds	8
   831  0066                     ??_ADCMain:	
   832  0066                     ??_main:	
   833                           ; 1 bytes @ 0x1F
   834                           
   835                           
   836                           ; 1 bytes @ 0x1F
   837  0066                     	ds	3
   838  0069                     main@controlByte:	
   839                           
   840                           ; 1 bytes @ 0x22
   841  0069                     	ds	1
   842                           
   843                           	psect	maintext
   844  036D                     __pmaintext:	
   845 ;;
   846 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   847 ;;
   848 ;; *************** function _main *****************
   849 ;; Defined at:
   850 ;;		line 63 in file "main.c"
   851 ;; Parameters:    Size  Location     Type
   852 ;;		None
   853 ;; Auto vars:     Size  Location     Type
   854 ;;  controlByte     1   34[BANK0 ] unsigned char 
   855 ;; Return value:  Size  Location     Type
   856 ;;                  1    wreg      void 
   857 ;; Registers used:
   858 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   859 ;; Tracked objects:
   860 ;;		On entry : B00/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   864 ;;      Params:         0       0       0       0       0
   865 ;;      Locals:         0       1       0       0       0
   866 ;;      Temps:          0       3       0       0       0
   867 ;;      Totals:         0       4       0       0       0
   868 ;;Total ram usage:        4 bytes
   869 ;; Hardware stack levels required when called:    5
   870 ;; This function calls:
   871 ;;		_ADCMain
   872 ;;		_Drive
   873 ;;		_getDistTrav
   874 ;;		_lcdWriteToDigitBCD
   875 ;;		_moveCCW
   876 ;;		_moveCW
   877 ;;		_ser_init
   878 ;;		_ser_putch
   879 ;;		_setupADC
   880 ;;		_setupLCD
   881 ;;		_setupSPI
   882 ;;		_spi_transfer
   883 ;; This function is called by:
   884 ;;		Startup code after reset
   885 ;; This function uses a non-reentrant model
   886 ;;
   887                           
   888                           
   889                           ;psect for function _main
   890  036D                     _main:	
   891                           
   892                           ;main.c: 64: _delay((unsigned long)((5000)*(20000000/4000.0)));
   893                           
   894                           ;incstack = 0
   895                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   896  036D  307F               	movlw	127
   897  036E  1283               	bcf	3,5	;RP0=0, select bank0
   898  036F  1303               	bcf	3,6	;RP1=0, select bank0
   899  0370  00E8               	movwf	??_main+2
   900  0371  30D4               	movlw	212
   901  0372  00E7               	movwf	??_main+1
   902  0373  30AE               	movlw	174
   903  0374  00E6               	movwf	??_main
   904  0375                     u1777:	
   905  0375  0BE6               	decfsz	??_main,f
   906  0376  2B75               	goto	u1777
   907  0377  0BE7               	decfsz	??_main+1,f
   908  0378  2B75               	goto	u1777
   909  0379  0BE8               	decfsz	??_main+2,f
   910  037A  2B75               	goto	u1777
   911  037B  2B7C               	nop2
   912                           
   913                           ;main.c: 67: setupSPI();
   914  037C  120A  158A  26D8  120A  118A  	fcall	_setupSPI
   915                           
   916                           ;main.c: 68: ser_init();
   917  0381  120A  158A  267D  120A  118A  	fcall	_ser_init
   918                           
   919                           ;main.c: 69: setupLCD();
   920  0386  120A  118A  27D2  120A  118A  	fcall	_setupLCD
   921                           
   922                           ;main.c: 70: setupADC();
   923  038B  120A  158A  26C2  120A  118A  	fcall	_setupADC
   924                           
   925                           ;main.c: 72: TRISB = 0b00000001;
   926  0390  3001               	movlw	1
   927  0391  1683               	bsf	3,5	;RP0=1, select bank1
   928  0392  1303               	bcf	3,6	;RP1=0, select bank1
   929  0393  0086               	movwf	6	;volatile
   930                           
   931                           ;main.c: 74: unsigned char controlByte = 0b00001101;
   932  0394  300D               	movlw	13
   933  0395  1283               	bcf	3,5	;RP0=0, select bank0
   934  0396  1303               	bcf	3,6	;RP1=0, select bank0
   935  0397  00E6               	movwf	??_main
   936  0398  0866               	movf	??_main,w
   937  0399  00E9               	movwf	main@controlByte
   938                           
   939                           ;main.c: 75: spi_transfer(controlByte);
   940  039A  0869               	movf	main@controlByte,w
   941  039B  120A  158A  268C  120A  118A  	fcall	_spi_transfer
   942                           
   943                           ;main.c: 77: RB3 = 0;
   944  03A0  1283               	bcf	3,5	;RP0=0, select bank0
   945  03A1  1303               	bcf	3,6	;RP1=0, select bank0
   946  03A2  1186               	bcf	6,3	;volatile
   947                           
   948                           ;main.c: 78: _delay((unsigned long)((1000)*(20000000/4000.0)));
   949  03A3  301A               	movlw	26
   950  03A4  00E8               	movwf	??_main+2
   951  03A5  305E               	movlw	94
   952  03A6  00E7               	movwf	??_main+1
   953  03A7  3086               	movlw	134
   954  03A8  00E6               	movwf	??_main
   955  03A9                     u1787:	
   956  03A9  0BE6               	decfsz	??_main,f
   957  03AA  2BA9               	goto	u1787
   958  03AB  0BE7               	decfsz	??_main+1,f
   959  03AC  2BA9               	goto	u1787
   960  03AD  0BE8               	decfsz	??_main+2,f
   961  03AE  2BA9               	goto	u1787
   962  03AF  0000               	nop
   963                           
   964                           ;main.c: 79: ser_putch(128);
   965  03B0  3080               	movlw	128
   966  03B1  120A  158A  26F0  120A  118A  	fcall	_ser_putch
   967                           
   968                           ;main.c: 80: _delay((unsigned long)((1000)*(20000000/4000.0)));
   969  03B6  301A               	movlw	26
   970  03B7  1283               	bcf	3,5	;RP0=0, select bank0
   971  03B8  1303               	bcf	3,6	;RP1=0, select bank0
   972  03B9  00E8               	movwf	??_main+2
   973  03BA  305E               	movlw	94
   974  03BB  00E7               	movwf	??_main+1
   975  03BC  3086               	movlw	134
   976  03BD  00E6               	movwf	??_main
   977  03BE                     u1797:	
   978  03BE  0BE6               	decfsz	??_main,f
   979  03BF  2BBE               	goto	u1797
   980  03C0  0BE7               	decfsz	??_main+1,f
   981  03C1  2BBE               	goto	u1797
   982  03C2  0BE8               	decfsz	??_main+2,f
   983  03C3  2BBE               	goto	u1797
   984  03C4  0000               	nop
   985                           
   986                           ;main.c: 81: ser_putch(132);
   987  03C5  3084               	movlw	132
   988  03C6  120A  158A  26F0  120A  118A  	fcall	_ser_putch
   989                           
   990                           ;main.c: 82: _delay((unsigned long)((1000)*(20000000/4000.0)));
   991  03CB  301A               	movlw	26
   992  03CC  1283               	bcf	3,5	;RP0=0, select bank0
   993  03CD  1303               	bcf	3,6	;RP1=0, select bank0
   994  03CE  00E8               	movwf	??_main+2
   995  03CF  305E               	movlw	94
   996  03D0  00E7               	movwf	??_main+1
   997  03D1  3086               	movlw	134
   998  03D2  00E6               	movwf	??_main
   999  03D3                     u1807:	
  1000  03D3  0BE6               	decfsz	??_main,f
  1001  03D4  2BD3               	goto	u1807
  1002  03D5  0BE7               	decfsz	??_main+1,f
  1003  03D6  2BD3               	goto	u1807
  1004  03D7  0BE8               	decfsz	??_main+2,f
  1005  03D8  2BD3               	goto	u1807
  1006  03D9  0000               	nop
  1007                           
  1008                           ;main.c: 83: RB3 = 1;
  1009  03DA  1283               	bcf	3,5	;RP0=0, select bank0
  1010  03DB  1303               	bcf	3,6	;RP1=0, select bank0
  1011  03DC  1586               	bsf	6,3	;volatile
  1012                           
  1013                           ;main.c: 85: lcdWriteToDigitBCD(totalDistTrav);
  1014  03DD  083D               	movf	_totalDistTrav+1,w
  1015  03DE  00CB               	movwf	lcdWriteToDigitBCD@data+1
  1016  03DF  083C               	movf	_totalDistTrav,w
  1017  03E0  00CA               	movwf	lcdWriteToDigitBCD@data
  1018  03E1  120A  118A  2531  120A  118A  	fcall	_lcdWriteToDigitBCD
  1019  03E6                     l2002:	
  1020                           ;main.c: 93: while(1){
  1021                           
  1022                           
  1023                           ;main.c: 98: if (PB7Counter >= 10 && !RB1 == 0){
  1024  03E6  300A               	movlw	10
  1025  03E7  1283               	bcf	3,5	;RP0=0, select bank0
  1026  03E8  1303               	bcf	3,6	;RP1=0, select bank0
  1027  03E9  023F               	subwf	_PB7Counter,w
  1028  03EA  1803               	btfsc	3,0
  1029  03EB  1C86               	btfss	6,1	;volatile
  1030  03EC  2C45               	goto	l2032
  1031                           
  1032                           ;main.c: 99: for (loop = 0; loop < 400; loop++){
  1033  03ED  01AA               	clrf	_loop
  1034  03EE  01AB               	clrf	_loop+1
  1035  03EF  082B               	movf	_loop+1,w
  1036  03F0  3A80               	xorlw	128
  1037  03F1  00FF               	movwf	127
  1038  03F2  3081               	movlw	129
  1039  03F3  027F               	subwf	127,w
  1040  03F4  1D03               	skipz
  1041  03F5  2BF8               	goto	u1625
  1042  03F6  3090               	movlw	144
  1043  03F7  022A               	subwf	_loop,w
  1044  03F8                     u1625:	
  1045  03F8  1803               	btfsc	3,0
  1046  03F9  2C28               	goto	l2024
  1047  03FA                     l2012:	
  1048                           
  1049                           ;main.c: 100: moveCW();
  1050  03FA  120A  118A  26B4  120A  118A  	fcall	_moveCW
  1051                           
  1052                           ;main.c: 101: ADCMain();
  1053  03FF  120A  158A  2728  120A  118A  	fcall	_ADCMain
  1054                           
  1055                           ;main.c: 102: if (adcRAW > adcClosest){
  1056  0404  1283               	bcf	3,5	;RP0=0, select bank0
  1057  0405  1303               	bcf	3,6	;RP1=0, select bank0
  1058  0406  0823               	movf	_adcRAW+1,w	;volatile
  1059  0407  026B               	subwf	_adcClosest+1,w
  1060  0408  1D03               	skipz
  1061  0409  2C0C               	goto	u1635
  1062  040A  0822               	movf	_adcRAW,w	;volatile
  1063  040B  026A               	subwf	_adcClosest,w
  1064  040C                     u1635:	
  1065  040C  1803               	skipnc
  1066  040D  2C17               	goto	l2020
  1067                           
  1068                           ;main.c: 103: adcClosest = adcRAW;
  1069  040E  0823               	movf	_adcRAW+1,w	;volatile
  1070  040F  00EB               	movwf	_adcClosest+1
  1071  0410  0822               	movf	_adcRAW,w	;volatile
  1072  0411  00EA               	movwf	_adcClosest
  1073                           
  1074                           ;main.c: 104: stepClosest = stepCount;
  1075  0412  0844               	movf	_stepCount,w
  1076  0413  00B6               	movwf	_stepClosest
  1077  0414  01B7               	clrf	_stepClosest+1
  1078  0415  1BB6               	btfsc	_stepClosest,7
  1079  0416  03B7               	decf	_stepClosest+1,f
  1080  0417                     l2020:	
  1081  0417  3001               	movlw	1
  1082  0418  07AA               	addwf	_loop,f
  1083  0419  1803               	skipnc
  1084  041A  0AAB               	incf	_loop+1,f
  1085  041B  3000               	movlw	0
  1086  041C  07AB               	addwf	_loop+1,f
  1087  041D  082B               	movf	_loop+1,w
  1088  041E  3A80               	xorlw	128
  1089  041F  00FF               	movwf	127
  1090  0420  3081               	movlw	129
  1091  0421  027F               	subwf	127,w
  1092  0422  1D03               	skipz
  1093  0423  2C26               	goto	u1645
  1094  0424  3090               	movlw	144
  1095  0425  022A               	subwf	_loop,w
  1096  0426                     u1645:	
  1097  0426  1C03               	skipc
  1098  0427  2BFA               	goto	l2012
  1099  0428                     l2024:	
  1100                           
  1101                           ;main.c: 105: }
  1102                           ;main.c: 106: }
  1103                           ;main.c: 109: for (loop = stepCount; loop != stepClosest; loop++){
  1104  0428  1283               	bcf	3,5	;RP0=0, select bank0
  1105  0429  1303               	bcf	3,6	;RP1=0, select bank0
  1106  042A  0844               	movf	_stepCount,w
  1107  042B  00AA               	movwf	_loop
  1108  042C  01AB               	clrf	_loop+1
  1109  042D  1BAA               	btfsc	_loop,7
  1110  042E  03AB               	decf	_loop+1,f
  1111  042F                     l2030:	
  1112  042F  0837               	movf	_stepClosest+1,w
  1113  0430  062B               	xorwf	_loop+1,w
  1114  0431  1D03               	skipz
  1115  0432  2C35               	goto	u1655
  1116  0433  0836               	movf	_stepClosest,w
  1117  0434  062A               	xorwf	_loop,w
  1118  0435                     u1655:	
  1119  0435  1903               	btfsc	3,2
  1120  0436  2C45               	goto	l2032
  1121                           
  1122                           ;main.c: 110: moveCCW();
  1123  0437  120A  118A  26FF  120A  118A  	fcall	_moveCCW
  1124  043C  3001               	movlw	1
  1125  043D  1283               	bcf	3,5	;RP0=0, select bank0
  1126  043E  1303               	bcf	3,6	;RP1=0, select bank0
  1127  043F  07AA               	addwf	_loop,f
  1128  0440  1803               	skipnc
  1129  0441  0AAB               	incf	_loop+1,f
  1130  0442  3000               	movlw	0
  1131  0443  07AB               	addwf	_loop+1,f
  1132  0444  2C2F               	goto	l2030
  1133  0445                     l2032:	
  1134                           
  1135                           ;main.c: 111: }
  1136                           ;main.c: 112: }
  1137                           ;main.c: 118: if (PB6Counter >= 10 && !RB2 == 0){
  1138  0445  300A               	movlw	10
  1139  0446  023E               	subwf	_PB6Counter,w
  1140  0447  1803               	btfsc	3,0
  1141  0448  1D06               	btfss	6,2	;volatile
  1142  0449  2C94               	goto	l2050
  1143                           
  1144                           ;main.c: 119: Drive(1,200,0x7F,0xFF);
  1145  044A  3001               	movlw	1
  1146  044B  00CB               	movwf	Drive@speedH
  1147  044C  3000               	movlw	0
  1148  044D  00CC               	movwf	Drive@speedH+1
  1149  044E  30C8               	movlw	200
  1150  044F  00CD               	movwf	Drive@speedL
  1151  0450  3000               	movlw	0
  1152  0451  00CE               	movwf	Drive@speedL+1
  1153  0452  307F               	movlw	127
  1154  0453  00CF               	movwf	Drive@radH
  1155  0454  3000               	movlw	0
  1156  0455  00D0               	movwf	Drive@radH+1
  1157  0456  30FF               	movlw	255
  1158  0457  00D1               	movwf	Drive@radL
  1159  0458  3000               	movlw	0
  1160  0459  00D2               	movwf	Drive@radL+1
  1161  045A  120A  158A  276B  120A  118A  	fcall	_Drive
  1162  045F                     l2046:	
  1163                           ;main.c: 120: while (totalDistTrav <= 4000){
  1164                           
  1165  045F  1283               	bcf	3,5	;RP0=0, select bank0
  1166  0460  1303               	bcf	3,6	;RP1=0, select bank0
  1167  0461  083D               	movf	_totalDistTrav+1,w
  1168  0462  3A80               	xorlw	128
  1169  0463  00FF               	movwf	127
  1170  0464  308F               	movlw	143
  1171  0465  027F               	subwf	127,w
  1172  0466  1D03               	skipz
  1173  0467  2C6A               	goto	u1695
  1174  0468  30A1               	movlw	161
  1175  0469  023C               	subwf	_totalDistTrav,w
  1176  046A                     u1695:	
  1177  046A  1803               	btfsc	3,0
  1178  046B  2C7F               	goto	l2048
  1179                           
  1180                           ;main.c: 121: count++;
  1181  046C  3001               	movlw	1
  1182  046D  1283               	bcf	3,5	;RP0=0, select bank0
  1183  046E  1303               	bcf	3,6	;RP1=0, select bank0
  1184  046F  00E6               	movwf	??_main
  1185  0470  0866               	movf	??_main,w
  1186  0471  07C2               	addwf	_count,f
  1187                           
  1188                           ;main.c: 122: if(count >=20){
  1189  0472  3014               	movlw	20
  1190  0473  0242               	subwf	_count,w
  1191  0474  1C03               	skipc
  1192  0475  2C5F               	goto	l2046
  1193                           
  1194                           ;main.c: 123: getDistTrav();
  1195  0476  120A  118A  2657  120A  118A  	fcall	_getDistTrav
  1196                           
  1197                           ;main.c: 124: count = 0;
  1198  047B  1283               	bcf	3,5	;RP0=0, select bank0
  1199  047C  1303               	bcf	3,6	;RP1=0, select bank0
  1200  047D  01C2               	clrf	_count
  1201  047E  2C5F               	goto	l2046
  1202  047F                     l2048:	
  1203                           
  1204                           ;main.c: 125: }
  1205                           ;main.c: 127: }
  1206                           ;main.c: 128: Drive(0,0,0x7F,0xFF);
  1207  047F  3000               	movlw	0
  1208  0480  1283               	bcf	3,5	;RP0=0, select bank0
  1209  0481  1303               	bcf	3,6	;RP1=0, select bank0
  1210  0482  00CB               	movwf	Drive@speedH
  1211  0483  00CC               	movwf	Drive@speedH+1
  1212  0484  3000               	movlw	0
  1213  0485  00CD               	movwf	Drive@speedL
  1214  0486  00CE               	movwf	Drive@speedL+1
  1215  0487  307F               	movlw	127
  1216  0488  00CF               	movwf	Drive@radH
  1217  0489  3000               	movlw	0
  1218  048A  00D0               	movwf	Drive@radH+1
  1219  048B  30FF               	movlw	255
  1220  048C  00D1               	movwf	Drive@radL
  1221  048D  3000               	movlw	0
  1222  048E  00D2               	movwf	Drive@radL+1
  1223  048F  120A  158A  276B  120A  118A  	fcall	_Drive
  1224  0494                     l2050:	
  1225                           
  1226                           ;main.c: 129: }
  1227                           ;main.c: 132: if (PB8Counter >= 10 && !RB0 == 0){
  1228  0494  300A               	movlw	10
  1229  0495  1283               	bcf	3,5	;RP0=0, select bank0
  1230  0496  1303               	bcf	3,6	;RP1=0, select bank0
  1231  0497  0240               	subwf	_PB8Counter,w
  1232  0498  1803               	btfsc	3,0
  1233  0499  1C06               	btfss	6,0	;volatile
  1234  049A  2BE6               	goto	l2002
  1235                           
  1236                           ;main.c: 133: totalDistTrav = 0;
  1237  049B  01BC               	clrf	_totalDistTrav
  1238  049C  01BD               	clrf	_totalDistTrav+1
  1239                           
  1240                           ;main.c: 135: for (loop = 0; loop < 4; loop++){
  1241  049D  01AA               	clrf	_loop
  1242  049E  01AB               	clrf	_loop+1
  1243  049F  082B               	movf	_loop+1,w
  1244  04A0  3A80               	xorlw	128
  1245  04A1  00FF               	movwf	127
  1246  04A2  3080               	movlw	128
  1247  04A3  027F               	subwf	127,w
  1248  04A4  1D03               	skipz
  1249  04A5  2CA8               	goto	u1725
  1250  04A6  3004               	movlw	4
  1251  04A7  022A               	subwf	_loop,w
  1252  04A8                     u1725:	
  1253  04A8  1803               	btfsc	3,0
  1254  04A9  2D1B               	goto	l2082
  1255  04AA                     l2060:	
  1256                           
  1257                           ;main.c: 136: Drive(0,250,0xFF,0xFF);
  1258  04AA  3000               	movlw	0
  1259  04AB  1283               	bcf	3,5	;RP0=0, select bank0
  1260  04AC  1303               	bcf	3,6	;RP1=0, select bank0
  1261  04AD  00CB               	movwf	Drive@speedH
  1262  04AE  00CC               	movwf	Drive@speedH+1
  1263  04AF  30FA               	movlw	250
  1264  04B0  00CD               	movwf	Drive@speedL
  1265  04B1  3000               	movlw	0
  1266  04B2  00CE               	movwf	Drive@speedL+1
  1267  04B3  30FF               	movlw	255
  1268  04B4  00CF               	movwf	Drive@radH
  1269  04B5  3000               	movlw	0
  1270  04B6  00D0               	movwf	Drive@radH+1
  1271  04B7  30FF               	movlw	255
  1272  04B8  00D1               	movwf	Drive@radL
  1273  04B9  3000               	movlw	0
  1274  04BA  00D2               	movwf	Drive@radL+1
  1275  04BB  120A  158A  276B  120A  118A  	fcall	_Drive
  1276                           
  1277                           ;main.c: 137: _delay((unsigned long)((500)*(20000000/4000.0)));
  1278  04C0  300D               	movlw	13
  1279  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  1280  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  1281  04C3  00E8               	movwf	??_main+2
  1282  04C4  30AF               	movlw	175
  1283  04C5  00E7               	movwf	??_main+1
  1284  04C6  30C1               	movlw	193
  1285  04C7  00E6               	movwf	??_main
  1286  04C8                     u1817:	
  1287  04C8  0BE6               	decfsz	??_main,f
  1288  04C9  2CC8               	goto	u1817
  1289  04CA  0BE7               	decfsz	??_main+1,f
  1290  04CB  2CC8               	goto	u1817
  1291  04CC  0BE8               	decfsz	??_main+2,f
  1292  04CD  2CC8               	goto	u1817
  1293  04CE  0000               	nop
  1294                           
  1295                           ;main.c: 139: for (totalDistTrav = 0; totalDistTrav < 1000;){
  1296  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  1297  04D0  1303               	bcf	3,6	;RP1=0, select bank0
  1298  04D1  01BC               	clrf	_totalDistTrav
  1299  04D2  01BD               	clrf	_totalDistTrav+1
  1300  04D3  083D               	movf	_totalDistTrav+1,w
  1301  04D4  3A80               	xorlw	128
  1302  04D5  00FF               	movwf	127
  1303  04D6  3083               	movlw	131
  1304  04D7  027F               	subwf	127,w
  1305  04D8  1D03               	skipz
  1306  04D9  2CDC               	goto	u1735
  1307  04DA  30E8               	movlw	232
  1308  04DB  023C               	subwf	_totalDistTrav,w
  1309  04DC                     u1735:	
  1310  04DC  1803               	btfsc	3,0
  1311  04DD  2D06               	goto	l2076
  1312  04DE                     l2070:	
  1313                           
  1314                           ;main.c: 140: Drive(0,250,0x7F,0xFF);
  1315  04DE  3000               	movlw	0
  1316  04DF  1283               	bcf	3,5	;RP0=0, select bank0
  1317  04E0  1303               	bcf	3,6	;RP1=0, select bank0
  1318  04E1  00CB               	movwf	Drive@speedH
  1319  04E2  00CC               	movwf	Drive@speedH+1
  1320  04E3  30FA               	movlw	250
  1321  04E4  00CD               	movwf	Drive@speedL
  1322  04E5  3000               	movlw	0
  1323  04E6  00CE               	movwf	Drive@speedL+1
  1324  04E7  307F               	movlw	127
  1325  04E8  00CF               	movwf	Drive@radH
  1326  04E9  3000               	movlw	0
  1327  04EA  00D0               	movwf	Drive@radH+1
  1328  04EB  30FF               	movlw	255
  1329  04EC  00D1               	movwf	Drive@radL
  1330  04ED  3000               	movlw	0
  1331  04EE  00D2               	movwf	Drive@radL+1
  1332  04EF  120A  158A  276B  120A  118A  	fcall	_Drive
  1333                           
  1334                           ;main.c: 141: getDistTrav();
  1335  04F4  120A  118A  2657  120A  118A  	fcall	_getDistTrav
  1336  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  1337  04FA  1303               	bcf	3,6	;RP1=0, select bank0
  1338  04FB  083D               	movf	_totalDistTrav+1,w
  1339  04FC  3A80               	xorlw	128
  1340  04FD  00FF               	movwf	127
  1341  04FE  3083               	movlw	131
  1342  04FF  027F               	subwf	127,w
  1343  0500  1D03               	skipz
  1344  0501  2D04               	goto	u1745
  1345  0502  30E8               	movlw	232
  1346  0503  023C               	subwf	_totalDistTrav,w
  1347  0504                     u1745:	
  1348  0504  1C03               	skipc
  1349  0505  2CDE               	goto	l2070
  1350  0506                     l2076:	
  1351                           
  1352                           ;main.c: 142: }
  1353                           ;main.c: 143: totalDistTrav = 0;
  1354  0506  1283               	bcf	3,5	;RP0=0, select bank0
  1355  0507  1303               	bcf	3,6	;RP1=0, select bank0
  1356  0508  01BC               	clrf	_totalDistTrav
  1357  0509  01BD               	clrf	_totalDistTrav+1
  1358  050A  3001               	movlw	1
  1359  050B  07AA               	addwf	_loop,f
  1360  050C  1803               	skipnc
  1361  050D  0AAB               	incf	_loop+1,f
  1362  050E  3000               	movlw	0
  1363  050F  07AB               	addwf	_loop+1,f
  1364  0510  082B               	movf	_loop+1,w
  1365  0511  3A80               	xorlw	128
  1366  0512  00FF               	movwf	127
  1367  0513  3080               	movlw	128
  1368  0514  027F               	subwf	127,w
  1369  0515  1D03               	skipz
  1370  0516  2D19               	goto	u1755
  1371  0517  3004               	movlw	4
  1372  0518  022A               	subwf	_loop,w
  1373  0519                     u1755:	
  1374  0519  1C03               	skipc
  1375  051A  2CAA               	goto	l2060
  1376  051B                     l2082:	
  1377                           
  1378                           ;main.c: 144: }
  1379                           ;main.c: 146: Drive(0,0,0x7F,0xFF);
  1380  051B  3000               	movlw	0
  1381  051C  1283               	bcf	3,5	;RP0=0, select bank0
  1382  051D  1303               	bcf	3,6	;RP1=0, select bank0
  1383  051E  00CB               	movwf	Drive@speedH
  1384  051F  00CC               	movwf	Drive@speedH+1
  1385  0520  3000               	movlw	0
  1386  0521  00CD               	movwf	Drive@speedL
  1387  0522  00CE               	movwf	Drive@speedL+1
  1388  0523  307F               	movlw	127
  1389  0524  00CF               	movwf	Drive@radH
  1390  0525  3000               	movlw	0
  1391  0526  00D0               	movwf	Drive@radH+1
  1392  0527  30FF               	movlw	255
  1393  0528  00D1               	movwf	Drive@radL
  1394  0529  3000               	movlw	0
  1395  052A  00D2               	movwf	Drive@radL+1
  1396  052B  120A  158A  276B  120A  118A  	fcall	_Drive
  1397  0530  2BE6               	goto	l2002
  1398  0531                     __end_of_main:	
  1399                           
  1400                           	psect	text1
  1401  0E8C                     __ptext1:	
  1402 ;; *************** function _spi_transfer *****************
  1403 ;; Defined at:
  1404 ;;		line 23 in file "SPI.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;  data            1    wreg     unsigned char 
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;  data            1    2[BANK0 ] unsigned char 
  1409 ;;  temp            1    1[BANK0 ] unsigned char 
  1410 ;; Return value:  Size  Location     Type
  1411 ;;                  1    wreg      unsigned char 
  1412 ;; Registers used:
  1413 ;;		wreg, status,2
  1414 ;; Tracked objects:
  1415 ;;		On entry : 0/0
  1416 ;;		On exit  : 0/0
  1417 ;;		Unchanged: 0/0
  1418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1419 ;;      Params:         0       0       0       0       0
  1420 ;;      Locals:         0       2       0       0       0
  1421 ;;      Temps:          0       1       0       0       0
  1422 ;;      Totals:         0       3       0       0       0
  1423 ;;Total ram usage:        3 bytes
  1424 ;; Hardware stack levels used:    1
  1425 ;; Hardware stack levels required when called:    2
  1426 ;; This function calls:
  1427 ;;		Nothing
  1428 ;; This function is called by:
  1429 ;;		_main
  1430 ;; This function uses a non-reentrant model
  1431 ;;
  1432                           
  1433                           
  1434                           ;psect for function _spi_transfer
  1435  0E8C                     _spi_transfer:	
  1436                           
  1437                           ;incstack = 0
  1438                           ; Regs used in _spi_transfer: [wreg+status,2]
  1439                           ;spi_transfer@data stored from wreg
  1440  0E8C  1283               	bcf	3,5	;RP0=0, select bank0
  1441  0E8D  1303               	bcf	3,6	;RP1=0, select bank0
  1442  0E8E  00C9               	movwf	spi_transfer@data
  1443                           
  1444                           ;SPI.c: 24: unsigned char temp = 0;
  1445  0E8F  01C8               	clrf	spi_transfer@temp
  1446                           
  1447                           ;SPI.c: 26: SSPIF = 0;
  1448  0E90  118C               	bcf	12,3	;volatile
  1449                           
  1450                           ;SPI.c: 27: SSPBUF = data;
  1451  0E91  0849               	movf	spi_transfer@data,w
  1452  0E92  0093               	movwf	19	;volatile
  1453  0E93                     l247:	
  1454                           ;SPI.c: 29: while (SSPIF == 0);
  1455                           
  1456  0E93  1D8C               	btfss	12,3	;volatile
  1457  0E94  2E93               	goto	l247
  1458                           
  1459                           ;SPI.c: 30: temp = SSPBUF;
  1460  0E95  0813               	movf	19,w	;volatile
  1461  0E96  00C7               	movwf	??_spi_transfer
  1462  0E97  0847               	movf	??_spi_transfer,w
  1463  0E98  00C8               	movwf	spi_transfer@temp
  1464                           
  1465                           ;SPI.c: 31: SSPIF = 0;
  1466  0E99  118C               	bcf	12,3	;volatile
  1467  0E9A  0008               	return
  1468  0E9B                     __end_of_spi_transfer:	
  1469                           ;SPI.c: 33: return temp;
  1470                           ;	Return value of _spi_transfer is never used
  1471                           
  1472                           
  1473                           	psect	text2
  1474  0ED8                     __ptext2:	
  1475 ;; *************** function _setupSPI *****************
  1476 ;; Defined at:
  1477 ;;		line 4 in file "SPI.c"
  1478 ;; Parameters:    Size  Location     Type
  1479 ;;		None
  1480 ;; Auto vars:     Size  Location     Type
  1481 ;;		None
  1482 ;; Return value:  Size  Location     Type
  1483 ;;                  1    wreg      void 
  1484 ;; Registers used:
  1485 ;;		wreg, status,2
  1486 ;; Tracked objects:
  1487 ;;		On entry : 0/0
  1488 ;;		On exit  : 0/0
  1489 ;;		Unchanged: 0/0
  1490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1491 ;;      Params:         0       0       0       0       0
  1492 ;;      Locals:         0       0       0       0       0
  1493 ;;      Temps:          0       0       0       0       0
  1494 ;;      Totals:         0       0       0       0       0
  1495 ;;Total ram usage:        0 bytes
  1496 ;; Hardware stack levels used:    1
  1497 ;; Hardware stack levels required when called:    2
  1498 ;; This function calls:
  1499 ;;		Nothing
  1500 ;; This function is called by:
  1501 ;;		_main
  1502 ;; This function uses a non-reentrant model
  1503 ;;
  1504                           
  1505                           
  1506                           ;psect for function _setupSPI
  1507  0ED8                     _setupSPI:	
  1508                           
  1509                           ;SPI.c: 6: TRISB = 0b00000000;
  1510                           
  1511                           ;incstack = 0
  1512                           ; Regs used in _setupSPI: [wreg+status,2]
  1513  0ED8  1683               	bsf	3,5	;RP0=1, select bank1
  1514  0ED9  1303               	bcf	3,6	;RP1=0, select bank1
  1515  0EDA  0186               	clrf	6	;volatile
  1516                           
  1517                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  1518  0EDB  3040               	movlw	64
  1519  0EDC  0094               	movwf	20	;volatile
  1520                           
  1521                           ;SPI.c: 9: SSPCON = 0b00100000;
  1522  0EDD  3020               	movlw	32
  1523  0EDE  1283               	bcf	3,5	;RP0=0, select bank0
  1524  0EDF  1303               	bcf	3,6	;RP1=0, select bank0
  1525  0EE0  0094               	movwf	20	;volatile
  1526                           
  1527                           ;SPI.c: 10: TRISC = 0b11010000;
  1528  0EE1  30D0               	movlw	208
  1529  0EE2  1683               	bsf	3,5	;RP0=1, select bank1
  1530  0EE3  1303               	bcf	3,6	;RP1=0, select bank1
  1531  0EE4  0087               	movwf	7	;volatile
  1532                           
  1533                           ;SPI.c: 11: PORTC = 0b00000011;
  1534  0EE5  3003               	movlw	3
  1535  0EE6  1283               	bcf	3,5	;RP0=0, select bank0
  1536  0EE7  1303               	bcf	3,6	;RP1=0, select bank0
  1537  0EE8  0087               	movwf	7	;volatile
  1538                           
  1539                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  1540  0EE9  3004               	movlw	4
  1541  0EEA  1683               	bsf	3,5	;RP0=1, select bank1
  1542  0EEB  1303               	bcf	3,6	;RP1=0, select bank1
  1543  0EEC  0081               	movwf	1	;volatile
  1544                           
  1545                           ;SPI.c: 16: TMR0IE = 1;
  1546  0EED  168B               	bsf	11,5	;volatile
  1547                           
  1548                           ;SPI.c: 19: (GIE = 1);
  1549  0EEE  178B               	bsf	11,7	;volatile
  1550  0EEF  0008               	return
  1551  0EF0                     __end_of_setupSPI:	
  1552                           
  1553                           	psect	text3
  1554  07D2                     __ptext3:	
  1555 ;; *************** function _setupLCD *****************
  1556 ;; Defined at:
  1557 ;;		line 86 in file "LCD.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;		None
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;		None
  1562 ;; Return value:  Size  Location     Type
  1563 ;;                  1    wreg      void 
  1564 ;; Registers used:
  1565 ;;		wreg, status,2, status,0, pclath, cstack
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 0/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1571 ;;      Params:         0       0       0       0       0
  1572 ;;      Locals:         0       0       0       0       0
  1573 ;;      Temps:          0       0       0       0       0
  1574 ;;      Totals:         0       0       0       0       0
  1575 ;;Total ram usage:        0 bytes
  1576 ;; Hardware stack levels used:    1
  1577 ;; Hardware stack levels required when called:    3
  1578 ;; This function calls:
  1579 ;;		_lcdWriteControl
  1580 ;; This function is called by:
  1581 ;;		_main
  1582 ;; This function uses a non-reentrant model
  1583 ;;
  1584                           
  1585                           
  1586                           ;psect for function _setupLCD
  1587  07D2                     _setupLCD:	
  1588                           
  1589                           ;LCD.c: 88: ADCON1 = 0b00000010;
  1590                           
  1591                           ;incstack = 0
  1592                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  1593  07D2  3002               	movlw	2
  1594  07D3  1683               	bsf	3,5	;RP0=1, select bank1
  1595  07D4  1303               	bcf	3,6	;RP1=0, select bank1
  1596  07D5  009F               	movwf	31	;volatile
  1597                           
  1598                           ;LCD.c: 90: PORTD = 0;
  1599  07D6  1283               	bcf	3,5	;RP0=0, select bank0
  1600  07D7  1303               	bcf	3,6	;RP1=0, select bank0
  1601  07D8  0188               	clrf	8	;volatile
  1602                           
  1603                           ;LCD.c: 91: PORTE = 0;
  1604  07D9  0189               	clrf	9	;volatile
  1605                           
  1606                           ;LCD.c: 93: TRISD = 0b00000000;
  1607  07DA  1683               	bsf	3,5	;RP0=1, select bank1
  1608  07DB  1303               	bcf	3,6	;RP1=0, select bank1
  1609  07DC  0188               	clrf	8	;volatile
  1610                           
  1611                           ;LCD.c: 94: TRISE = 0b00000000;
  1612  07DD  0189               	clrf	9	;volatile
  1613                           
  1614                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  1615  07DE  3001               	movlw	1
  1616  07DF  120A  158A  26AE  120A  118A  	fcall	_lcdWriteControl
  1617                           
  1618                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  1619  07E4  3038               	movlw	56
  1620  07E5  120A  158A  26AE  120A  118A  	fcall	_lcdWriteControl
  1621                           
  1622                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  1623  07EA  300C               	movlw	12
  1624  07EB  120A  158A  26AE  120A  118A  	fcall	_lcdWriteControl
  1625                           
  1626                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  1627  07F0  3006               	movlw	6
  1628  07F1  120A  158A  26AE  120A  118A  	fcall	_lcdWriteControl
  1629                           
  1630                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  1631  07F6  3002               	movlw	2
  1632  07F7  120A  158A  26AE   	fcall	_lcdWriteControl
  1633  07FA  0008               	return
  1634  07FB                     __end_of_setupLCD:	
  1635                           
  1636                           	psect	text4
  1637  0EC2                     __ptext4:	
  1638 ;; *************** function _setupADC *****************
  1639 ;; Defined at:
  1640 ;;		line 8 in file "ADC.c"
  1641 ;; Parameters:    Size  Location     Type
  1642 ;;		None
  1643 ;; Auto vars:     Size  Location     Type
  1644 ;;		None
  1645 ;; Return value:  Size  Location     Type
  1646 ;;                  1    wreg      void 
  1647 ;; Registers used:
  1648 ;;		wreg, status,2
  1649 ;; Tracked objects:
  1650 ;;		On entry : 0/0
  1651 ;;		On exit  : 0/0
  1652 ;;		Unchanged: 0/0
  1653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1654 ;;      Params:         0       0       0       0       0
  1655 ;;      Locals:         0       0       0       0       0
  1656 ;;      Temps:          0       1       0       0       0
  1657 ;;      Totals:         0       1       0       0       0
  1658 ;;Total ram usage:        1 bytes
  1659 ;; Hardware stack levels used:    1
  1660 ;; Hardware stack levels required when called:    2
  1661 ;; This function calls:
  1662 ;;		Nothing
  1663 ;; This function is called by:
  1664 ;;		_main
  1665 ;; This function uses a non-reentrant model
  1666 ;;
  1667                           
  1668                           
  1669                           ;psect for function _setupADC
  1670  0EC2                     _setupADC:	
  1671                           
  1672                           ;ADC.c: 9: PORTA = 0;
  1673                           
  1674                           ;incstack = 0
  1675                           ; Regs used in _setupADC: [wreg+status,2]
  1676  0EC2  1283               	bcf	3,5	;RP0=0, select bank0
  1677  0EC3  1303               	bcf	3,6	;RP1=0, select bank0
  1678  0EC4  0185               	clrf	5	;volatile
  1679                           
  1680                           ;ADC.c: 10: TRISA = 0b11111111;
  1681  0EC5  30FF               	movlw	255
  1682  0EC6  1683               	bsf	3,5	;RP0=1, select bank1
  1683  0EC7  1303               	bcf	3,6	;RP1=0, select bank1
  1684  0EC8  0085               	movwf	5	;volatile
  1685                           
  1686                           ;ADC.c: 13: ADCON0 = 0b10001001;
  1687  0EC9  3089               	movlw	137
  1688  0ECA  1283               	bcf	3,5	;RP0=0, select bank0
  1689  0ECB  1303               	bcf	3,6	;RP1=0, select bank0
  1690  0ECC  009F               	movwf	31	;volatile
  1691                           
  1692                           ;ADC.c: 14: ADCON1 = 0b00000010;
  1693  0ECD  3002               	movlw	2
  1694  0ECE  1683               	bsf	3,5	;RP0=1, select bank1
  1695  0ECF  1303               	bcf	3,6	;RP1=0, select bank1
  1696  0ED0  009F               	movwf	31	;volatile
  1697                           
  1698                           ;ADC.c: 16: _delay((unsigned long)((50)*(20000000/4000000.0)));
  1699  0ED1  3053               	movlw	83
  1700  0ED2  1283               	bcf	3,5	;RP0=0, select bank0
  1701  0ED3  1303               	bcf	3,6	;RP1=0, select bank0
  1702  0ED4  00C7               	movwf	??_setupADC
  1703  0ED5                     u1827:	
  1704  0ED5  0BC7               	decfsz	??_setupADC,f
  1705  0ED6  2ED5               	goto	u1827
  1706  0ED7  0008               	return
  1707  0ED8                     __end_of_setupADC:	
  1708                           
  1709                           	psect	text5
  1710  0E7D                     __ptext5:	
  1711 ;; *************** function _ser_init *****************
  1712 ;; Defined at:
  1713 ;;		line 5 in file "ser.c"
  1714 ;; Parameters:    Size  Location     Type
  1715 ;;		None
  1716 ;; Auto vars:     Size  Location     Type
  1717 ;;		None
  1718 ;; Return value:  Size  Location     Type
  1719 ;;                  1    wreg      void 
  1720 ;; Registers used:
  1721 ;;		wreg
  1722 ;; Tracked objects:
  1723 ;;		On entry : 0/0
  1724 ;;		On exit  : 0/0
  1725 ;;		Unchanged: 0/0
  1726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1727 ;;      Params:         0       0       0       0       0
  1728 ;;      Locals:         0       0       0       0       0
  1729 ;;      Temps:          0       0       0       0       0
  1730 ;;      Totals:         0       0       0       0       0
  1731 ;;Total ram usage:        0 bytes
  1732 ;; Hardware stack levels used:    1
  1733 ;; Hardware stack levels required when called:    2
  1734 ;; This function calls:
  1735 ;;		Nothing
  1736 ;; This function is called by:
  1737 ;;		_main
  1738 ;; This function uses a non-reentrant model
  1739 ;;
  1740                           
  1741                           
  1742                           ;psect for function _ser_init
  1743  0E7D                     _ser_init:	
  1744                           
  1745                           ;ser.c: 7: TXSTA = 0b00100100;
  1746                           
  1747                           ;incstack = 0
  1748                           ; Regs used in _ser_init: [wreg]
  1749  0E7D  3024               	movlw	36
  1750  0E7E  1683               	bsf	3,5	;RP0=1, select bank1
  1751  0E7F  1303               	bcf	3,6	;RP1=0, select bank1
  1752  0E80  0098               	movwf	24	;volatile
  1753                           
  1754                           ;ser.c: 8: RCSTA = 0b10011000;
  1755  0E81  3098               	movlw	152
  1756  0E82  1283               	bcf	3,5	;RP0=0, select bank0
  1757  0E83  1303               	bcf	3,6	;RP1=0, select bank0
  1758  0E84  0098               	movwf	24	;volatile
  1759                           
  1760                           ;ser.c: 24: SPBRG = 20;
  1761  0E85  3014               	movlw	20
  1762  0E86  1683               	bsf	3,5	;RP0=1, select bank1
  1763  0E87  1303               	bcf	3,6	;RP1=0, select bank1
  1764  0E88  0099               	movwf	25	;volatile
  1765                           
  1766                           ;ser.c: 26: PEIE = 1;
  1767  0E89  170B               	bsf	11,6	;volatile
  1768                           
  1769                           ;ser.c: 27: (GIE = 1);
  1770  0E8A  178B               	bsf	11,7	;volatile
  1771  0E8B  0008               	return
  1772  0E8C                     __end_of_ser_init:	
  1773                           
  1774                           	psect	text6
  1775  06B4                     __ptext6:	
  1776 ;; *************** function _moveCW *****************
  1777 ;; Defined at:
  1778 ;;		line 5 in file "motor.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;		None
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;		None
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  1    wreg      void 
  1785 ;; Registers used:
  1786 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1792 ;;      Params:         0       0       0       0       0
  1793 ;;      Locals:         0       0       0       0       0
  1794 ;;      Temps:          0       2       0       0       0
  1795 ;;      Totals:         0       2       0       0       0
  1796 ;;Total ram usage:        2 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; Hardware stack levels required when called:    2
  1799 ;; This function calls:
  1800 ;;		Nothing
  1801 ;; This function is called by:
  1802 ;;		_main
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           
  1807                           ;psect for function _moveCW
  1808  06B4                     _moveCW:	
  1809                           
  1810                           ;motor.c: 8: if (stepCount == 0) negativeFlag = 1;
  1811                           
  1812                           ;incstack = 0
  1813                           ; Regs used in _moveCW: [wreg-fsr0h+status,2+status,0]
  1814  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  1815  06B5  1303               	bcf	3,6	;RP1=0, select bank0
  1816  06B6  0844               	movf	_stepCount,w
  1817  06B7  1D03               	btfss	3,2
  1818  06B8  2EBB               	goto	l1812
  1819  06B9  01C3               	clrf	_negativeFlag
  1820  06BA  0AC3               	incf	_negativeFlag,f
  1821  06BB                     l1812:	
  1822                           
  1823                           ;motor.c: 10: stepCount--;
  1824  06BB  30FF               	movlw	255
  1825  06BC  00C7               	movwf	??_moveCW
  1826  06BD  0847               	movf	??_moveCW,w
  1827  06BE  07C4               	addwf	_stepCount,f
  1828                           
  1829                           ;motor.c: 13: switch(currentStep){
  1830  06BF  2EDB               	goto	l1848
  1831  06C0                     l1814:	
  1832                           ;motor.c: 15: case 7: PORTC = 0b00011011;
  1833                           
  1834  06C0  301B               	movlw	27
  1835  06C1  2ECD               	goto	L1
  1836  06C2                     l1818:	
  1837                           ;motor.c: 19: case 6: PORTC = 0b00010111;
  1838                           
  1839                           ;motor.c: 17: break;
  1840                           
  1841                           ;motor.c: 16: currentStep--;
  1842                           
  1843  06C2  3017               	movlw	23
  1844  06C3  2ECD               	goto	L1
  1845  06C4                     l1822:	
  1846                           ;motor.c: 23: case 5: PORTC = 0b00110101;
  1847                           
  1848                           ;motor.c: 21: break;
  1849                           
  1850                           ;motor.c: 20: currentStep--;
  1851                           
  1852  06C4  3035               	movlw	53
  1853  06C5  2ECD               	goto	L1
  1854  06C6                     l1826:	
  1855                           ;motor.c: 27: case 4: PORTC = 0b00100111;
  1856                           
  1857                           ;motor.c: 25: break;
  1858                           
  1859                           ;motor.c: 24: currentStep--;
  1860                           
  1861  06C6  3027               	movlw	39
  1862  06C7  2ECD               	goto	L1
  1863  06C8                     l1830:	
  1864                           ;motor.c: 31: case 3: PORTC = 0b00101011;
  1865                           
  1866                           ;motor.c: 29: break;
  1867                           
  1868                           ;motor.c: 28: currentStep--;
  1869                           
  1870  06C8  302B               	movlw	43
  1871  06C9  2ECD               	goto	L1
  1872  06CA                     l1834:	
  1873                           ;motor.c: 35: case 2: PORTC = 0b00101110;
  1874                           
  1875                           ;motor.c: 33: break;
  1876                           
  1877                           ;motor.c: 32: currentStep--;
  1878                           
  1879  06CA  302E               	movlw	46
  1880  06CB  2ECD               	goto	L1
  1881  06CC                     l1838:	
  1882                           ;motor.c: 39: case 1: PORTC = 0b00111100;
  1883                           
  1884                           ;motor.c: 37: break;
  1885                           
  1886                           ;motor.c: 36: currentStep--;
  1887                           
  1888  06CC  303C               	movlw	60
  1889  06CD                     L1:	
  1890  06CD  0087               	movwf	7	;volatile
  1891                           
  1892                           ;motor.c: 40: currentStep--;
  1893  06CE  3001               	movlw	1
  1894  06CF  02FC               	subwf	_currentStep,f
  1895                           
  1896                           ;motor.c: 41: break;
  1897  06D0  2EF5               	goto	l1850
  1898  06D1                     l1842:	
  1899                           ;motor.c: 43: case 0: PORTC = 0b00011110;
  1900                           
  1901  06D1  301E               	movlw	30
  1902  06D2  0087               	movwf	7	;volatile
  1903                           
  1904                           ;motor.c: 44: currentStep = 7;
  1905  06D3  3007               	movlw	7
  1906  06D4  00C7               	movwf	??_moveCW
  1907  06D5  0847               	movf	??_moveCW,w
  1908  06D6  00FC               	movwf	_currentStep
  1909                           
  1910                           ;motor.c: 45: break;
  1911  06D7  2EF5               	goto	l1850
  1912  06D8                     l1844:	
  1913                           ;motor.c: 47: default: PORTC = 0b00111001;
  1914                           
  1915  06D8  3039               	movlw	57
  1916  06D9  0087               	movwf	7	;volatile
  1917                           
  1918                           ;motor.c: 49: }
  1919                           
  1920                           ;motor.c: 48: break;
  1921  06DA  2EF5               	goto	l1850
  1922  06DB                     l1848:	
  1923  06DB  087C               	movf	_currentStep,w
  1924                           
  1925                           ; Switch size 1, requested type "space"
  1926                           ; Number of cases is 8, Range of values is 0 to 7
  1927                           ; switch strategies available:
  1928                           ; Name         Instructions Cycles
  1929                           ; simple_byte           25    13 (average)
  1930                           ; direct_byte           32     8 (fixed)
  1931                           ; jumptable            260     6 (fixed)
  1932                           ;	Chosen strategy is simple_byte
  1933  06DC  3A00               	xorlw	0	; case 0
  1934  06DD  1903               	skipnz
  1935  06DE  2ED1               	goto	l1842
  1936  06DF  3A01               	xorlw	1	; case 1
  1937  06E0  1903               	skipnz
  1938  06E1  2ECC               	goto	l1838
  1939  06E2  3A03               	xorlw	3	; case 2
  1940  06E3  1903               	skipnz
  1941  06E4  2ECA               	goto	l1834
  1942  06E5  3A01               	xorlw	1	; case 3
  1943  06E6  1903               	skipnz
  1944  06E7  2EC8               	goto	l1830
  1945  06E8  3A07               	xorlw	7	; case 4
  1946  06E9  1903               	skipnz
  1947  06EA  2EC6               	goto	l1826
  1948  06EB  3A01               	xorlw	1	; case 5
  1949  06EC  1903               	skipnz
  1950  06ED  2EC4               	goto	l1822
  1951  06EE  3A03               	xorlw	3	; case 6
  1952  06EF  1903               	skipnz
  1953  06F0  2EC2               	goto	l1818
  1954  06F1  3A01               	xorlw	1	; case 7
  1955  06F2  1903               	skipnz
  1956  06F3  2EC0               	goto	l1814
  1957  06F4  2ED8               	goto	l1844
  1958  06F5                     l1850:	
  1959                           
  1960                           ;motor.c: 51: _delay((unsigned long)((3)*(20000000/4000.0)));
  1961  06F5  3014               	movlw	20
  1962  06F6  00C8               	movwf	??_moveCW+1
  1963  06F7  3079               	movlw	121
  1964  06F8  00C7               	movwf	??_moveCW
  1965  06F9                     u1837:	
  1966  06F9  0BC7               	decfsz	??_moveCW,f
  1967  06FA  2EF9               	goto	u1837
  1968  06FB  0BC8               	decfsz	??_moveCW+1,f
  1969  06FC  2EF9               	goto	u1837
  1970  06FD  2EFE               	nop2
  1971  06FE  0008               	return
  1972  06FF                     __end_of_moveCW:	
  1973                           
  1974                           	psect	text7
  1975  06FF                     __ptext7:	
  1976 ;; *************** function _moveCCW *****************
  1977 ;; Defined at:
  1978 ;;		line 55 in file "motor.c"
  1979 ;; Parameters:    Size  Location     Type
  1980 ;;		None
  1981 ;; Auto vars:     Size  Location     Type
  1982 ;;		None
  1983 ;; Return value:  Size  Location     Type
  1984 ;;                  1    wreg      void 
  1985 ;; Registers used:
  1986 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1992 ;;      Params:         0       0       0       0       0
  1993 ;;      Locals:         0       0       0       0       0
  1994 ;;      Temps:          0       2       0       0       0
  1995 ;;      Totals:         0       2       0       0       0
  1996 ;;Total ram usage:        2 bytes
  1997 ;; Hardware stack levels used:    1
  1998 ;; Hardware stack levels required when called:    2
  1999 ;; This function calls:
  2000 ;;		Nothing
  2001 ;; This function is called by:
  2002 ;;		_main
  2003 ;; This function uses a non-reentrant model
  2004 ;;
  2005                           
  2006                           
  2007                           ;psect for function _moveCCW
  2008  06FF                     _moveCCW:	
  2009                           
  2010                           ;motor.c: 57: if (stepCount == (-1)) negativeFlag = 0;
  2011                           
  2012                           ;incstack = 0
  2013                           ; Regs used in _moveCCW: [wreg-fsr0h+status,2+status,0]
  2014  06FF  1283               	bcf	3,5	;RP0=0, select bank0
  2015  0700  1303               	bcf	3,6	;RP1=0, select bank0
  2016  0701  0A44               	incf	_stepCount,w
  2017  0702  1903               	btfsc	3,2
  2018  0703  01C3               	clrf	_negativeFlag
  2019                           
  2020                           ;motor.c: 59: stepCount++;
  2021  0704  3001               	movlw	1
  2022  0705  00C7               	movwf	??_moveCCW
  2023  0706  0847               	movf	??_moveCCW,w
  2024  0707  07C4               	addwf	_stepCount,f
  2025                           
  2026                           ;motor.c: 62: switch(currentStep){
  2027  0708  2F23               	goto	l1902
  2028  0709                     l1866:	
  2029                           ;motor.c: 63: case 0: PORTC = 0b00101110;
  2030                           
  2031  0709  302E               	movlw	46
  2032  070A  2F16               	goto	L2
  2033  070B                     l1870:	
  2034                           ;motor.c: 67: case 1: PORTC = 0b00101011;
  2035                           
  2036                           ;motor.c: 65: break;
  2037                           
  2038                           ;motor.c: 64: currentStep++;
  2039                           
  2040  070B  302B               	movlw	43
  2041  070C  2F16               	goto	L2
  2042  070D                     l1874:	
  2043                           ;motor.c: 71: case 2: PORTC = 0b00100111;
  2044                           
  2045                           ;motor.c: 69: break;
  2046                           
  2047                           ;motor.c: 68: currentStep++;
  2048                           
  2049  070D  3027               	movlw	39
  2050  070E  2F16               	goto	L2
  2051  070F                     l1878:	
  2052                           ;motor.c: 75: case 3: PORTC = 0b00110101;
  2053                           
  2054                           ;motor.c: 73: break;
  2055                           
  2056                           ;motor.c: 72: currentStep++;
  2057                           
  2058  070F  3035               	movlw	53
  2059  0710  2F16               	goto	L2
  2060  0711                     l1882:	
  2061                           ;motor.c: 79: case 4: PORTC = 0b00010111;
  2062                           
  2063                           ;motor.c: 77: break;
  2064                           
  2065                           ;motor.c: 76: currentStep++;
  2066                           
  2067  0711  3017               	movlw	23
  2068  0712  2F16               	goto	L2
  2069  0713                     l1886:	
  2070                           ;motor.c: 83: case 5: PORTC = 0b00011011;
  2071                           
  2072                           ;motor.c: 81: break;
  2073                           
  2074                           ;motor.c: 80: currentStep++;
  2075                           
  2076  0713  301B               	movlw	27
  2077  0714  2F16               	goto	L2
  2078  0715                     l1890:	
  2079                           ;motor.c: 87: case 6: PORTC = 0b00011110;
  2080                           
  2081                           ;motor.c: 85: break;
  2082                           
  2083                           ;motor.c: 84: currentStep++;
  2084                           
  2085  0715  301E               	movlw	30
  2086  0716                     L2:	
  2087  0716  0087               	movwf	7	;volatile
  2088                           
  2089                           ;motor.c: 88: currentStep++;
  2090  0717  3001               	movlw	1
  2091  0718  00C7               	movwf	??_moveCCW
  2092  0719  0847               	movf	??_moveCCW,w
  2093  071A  07FC               	addwf	_currentStep,f
  2094                           
  2095                           ;motor.c: 89: break;
  2096  071B  2F3D               	goto	l1904
  2097  071C                     l1894:	
  2098                           ;motor.c: 91: case 7: PORTC = 0b00111100;
  2099                           
  2100  071C  303C               	movlw	60
  2101  071D  0087               	movwf	7	;volatile
  2102                           
  2103                           ;motor.c: 92: currentStep = 0;
  2104  071E  01FC               	clrf	_currentStep
  2105                           
  2106                           ;motor.c: 93: break;
  2107  071F  2F3D               	goto	l1904
  2108  0720                     l1898:	
  2109                           ;motor.c: 95: default: PORTC = 0b00111001;
  2110                           
  2111  0720  3039               	movlw	57
  2112  0721  0087               	movwf	7	;volatile
  2113                           
  2114                           ;motor.c: 97: }
  2115                           
  2116                           ;motor.c: 96: break;
  2117  0722  2F3D               	goto	l1904
  2118  0723                     l1902:	
  2119  0723  087C               	movf	_currentStep,w
  2120                           
  2121                           ; Switch size 1, requested type "space"
  2122                           ; Number of cases is 8, Range of values is 0 to 7
  2123                           ; switch strategies available:
  2124                           ; Name         Instructions Cycles
  2125                           ; simple_byte           25    13 (average)
  2126                           ; direct_byte           32     8 (fixed)
  2127                           ; jumptable            260     6 (fixed)
  2128                           ;	Chosen strategy is simple_byte
  2129  0724  3A00               	xorlw	0	; case 0
  2130  0725  1903               	skipnz
  2131  0726  2F09               	goto	l1866
  2132  0727  3A01               	xorlw	1	; case 1
  2133  0728  1903               	skipnz
  2134  0729  2F0B               	goto	l1870
  2135  072A  3A03               	xorlw	3	; case 2
  2136  072B  1903               	skipnz
  2137  072C  2F0D               	goto	l1874
  2138  072D  3A01               	xorlw	1	; case 3
  2139  072E  1903               	skipnz
  2140  072F  2F0F               	goto	l1878
  2141  0730  3A07               	xorlw	7	; case 4
  2142  0731  1903               	skipnz
  2143  0732  2F11               	goto	l1882
  2144  0733  3A01               	xorlw	1	; case 5
  2145  0734  1903               	skipnz
  2146  0735  2F13               	goto	l1886
  2147  0736  3A03               	xorlw	3	; case 6
  2148  0737  1903               	skipnz
  2149  0738  2F15               	goto	l1890
  2150  0739  3A01               	xorlw	1	; case 7
  2151  073A  1903               	skipnz
  2152  073B  2F1C               	goto	l1894
  2153  073C  2F20               	goto	l1898
  2154  073D                     l1904:	
  2155                           
  2156                           ;motor.c: 99: _delay((unsigned long)((3)*(20000000/4000.0)));
  2157  073D  3014               	movlw	20
  2158  073E  00C8               	movwf	??_moveCCW+1
  2159  073F  3079               	movlw	121
  2160  0740  00C7               	movwf	??_moveCCW
  2161  0741                     u1847:	
  2162  0741  0BC7               	decfsz	??_moveCCW,f
  2163  0742  2F41               	goto	u1847
  2164  0743  0BC8               	decfsz	??_moveCCW+1,f
  2165  0744  2F41               	goto	u1847
  2166  0745  2F46               	nop2
  2167  0746  0008               	return
  2168  0747                     __end_of_moveCCW:	
  2169                           
  2170                           	psect	text8
  2171  0657                     __ptext8:	
  2172 ;; *************** function _getDistTrav *****************
  2173 ;; Defined at:
  2174 ;;		line 56 in file "ser.c"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;		None
  2177 ;; Auto vars:     Size  Location     Type
  2178 ;;		None
  2179 ;; Return value:  Size  Location     Type
  2180 ;;                  2   46[None  ] int 
  2181 ;; Registers used:
  2182 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2183 ;; Tracked objects:
  2184 ;;		On entry : 0/0
  2185 ;;		On exit  : 0/0
  2186 ;;		Unchanged: 0/0
  2187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2188 ;;      Params:         0       0       0       0       0
  2189 ;;      Locals:         0       0       0       0       0
  2190 ;;      Temps:          0       2       0       0       0
  2191 ;;      Totals:         0       2       0       0       0
  2192 ;;Total ram usage:        2 bytes
  2193 ;; Hardware stack levels used:    1
  2194 ;; Hardware stack levels required when called:    4
  2195 ;; This function calls:
  2196 ;;		_lcdSetCursor
  2197 ;;		_lcdWriteToDigitBCD
  2198 ;;		_ser_getch
  2199 ;;		_ser_putch
  2200 ;; This function is called by:
  2201 ;;		_main
  2202 ;; This function uses a non-reentrant model
  2203 ;;
  2204                           
  2205                           
  2206                           ;psect for function _getDistTrav
  2207  0657                     _getDistTrav:	
  2208                           
  2209                           ;ser.c: 57: ser_putch(142);
  2210                           
  2211                           ;incstack = 0
  2212                           ; Regs used in _getDistTrav: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2213  0657  308E               	movlw	142
  2214  0658  120A  158A  26F0  120A  118A  	fcall	_ser_putch
  2215                           
  2216                           ;ser.c: 58: ser_putch(19);
  2217  065D  3013               	movlw	19
  2218  065E  120A  158A  26F0  120A  118A  	fcall	_ser_putch
  2219                           
  2220                           ;ser.c: 59: _delay((unsigned long)((10)*(20000000/4000.0)));
  2221  0663  3041               	movlw	65
  2222  0664  1283               	bcf	3,5	;RP0=0, select bank0
  2223  0665  1303               	bcf	3,6	;RP1=0, select bank0
  2224  0666  00D7               	movwf	??_getDistTrav+1
  2225  0667  30EE               	movlw	238
  2226  0668  00D6               	movwf	??_getDistTrav
  2227  0669                     u1857:	
  2228  0669  0BD6               	decfsz	??_getDistTrav,f
  2229  066A  2E69               	goto	u1857
  2230  066B  0BD7               	decfsz	??_getDistTrav+1,f
  2231  066C  2E69               	goto	u1857
  2232  066D  0000               	nop
  2233                           
  2234                           ;ser.c: 61: highByte = ser_getch();
  2235  066E  120A  158A  2709  120A  118A  	fcall	_ser_getch
  2236  0673  1283               	bcf	3,5	;RP0=0, select bank0
  2237  0674  1303               	bcf	3,6	;RP1=0, select bank0
  2238  0675  0848               	movf	?_ser_getch+1,w
  2239  0676  00C6               	movwf	_highByte+1
  2240  0677  0847               	movf	?_ser_getch,w
  2241  0678  00C5               	movwf	_highByte
  2242                           
  2243                           ;ser.c: 62: _delay((unsigned long)((10)*(20000000/4000.0)));
  2244  0679  3041               	movlw	65
  2245  067A  00D7               	movwf	??_getDistTrav+1
  2246  067B  30EE               	movlw	238
  2247  067C  00D6               	movwf	??_getDistTrav
  2248  067D                     u1867:	
  2249  067D  0BD6               	decfsz	??_getDistTrav,f
  2250  067E  2E7D               	goto	u1867
  2251  067F  0BD7               	decfsz	??_getDistTrav+1,f
  2252  0680  2E7D               	goto	u1867
  2253  0681  0000               	nop
  2254                           
  2255                           ;ser.c: 63: lowByte = ser_getch();
  2256  0682  120A  158A  2709  120A  118A  	fcall	_ser_getch
  2257  0687  1283               	bcf	3,5	;RP0=0, select bank0
  2258  0688  1303               	bcf	3,6	;RP1=0, select bank0
  2259  0689  0848               	movf	?_ser_getch+1,w
  2260  068A  00AD               	movwf	_lowByte+1
  2261  068B  0847               	movf	?_ser_getch,w
  2262  068C  00AC               	movwf	_lowByte
  2263                           
  2264                           ;ser.c: 65: distTrav = (256*highByte + lowByte);
  2265  068D  0846               	movf	_highByte+1,w
  2266  068E  00D7               	movwf	??_getDistTrav+1
  2267  068F  0845               	movf	_highByte,w
  2268  0690  00D6               	movwf	??_getDistTrav
  2269  0691  0856               	movf	??_getDistTrav,w
  2270  0692  00D7               	movwf	??_getDistTrav+1
  2271  0693  01D6               	clrf	??_getDistTrav
  2272  0694  082C               	movf	_lowByte,w
  2273  0695  0756               	addwf	??_getDistTrav,w
  2274  0696  00A8               	movwf	_distTrav
  2275  0697  082D               	movf	_lowByte+1,w
  2276  0698  1803               	skipnc
  2277  0699  0A2D               	incf	_lowByte+1,w
  2278  069A  0757               	addwf	??_getDistTrav+1,w
  2279  069B  00A9               	movwf	_distTrav+1
  2280                           
  2281                           ;ser.c: 66: totalDistTrav = ((totalDistTrav + distTrav));
  2282  069C  0828               	movf	_distTrav,w
  2283  069D  073C               	addwf	_totalDistTrav,w
  2284  069E  00BC               	movwf	_totalDistTrav
  2285  069F  0829               	movf	_distTrav+1,w
  2286  06A0  1803               	skipnc
  2287  06A1  0A29               	incf	_distTrav+1,w
  2288  06A2  073D               	addwf	_totalDistTrav+1,w
  2289  06A3  00BD               	movwf	_totalDistTrav+1
  2290                           
  2291                           ;ser.c: 69: lcdSetCursor(0b11000000);
  2292  06A4  30C0               	movlw	192
  2293  06A5  120A  158A  2674  120A  118A  	fcall	_lcdSetCursor
  2294                           
  2295                           ;ser.c: 70: lcdWriteToDigitBCD(totalDistTrav);
  2296  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  2297  06AB  1303               	bcf	3,6	;RP1=0, select bank0
  2298  06AC  083D               	movf	_totalDistTrav+1,w
  2299  06AD  00CB               	movwf	lcdWriteToDigitBCD@data+1
  2300  06AE  083C               	movf	_totalDistTrav,w
  2301  06AF  00CA               	movwf	lcdWriteToDigitBCD@data
  2302  06B0  120A  118A  2531   	fcall	_lcdWriteToDigitBCD
  2303  06B3  0008               	return
  2304  06B4                     __end_of_getDistTrav:	
  2305                           
  2306                           	psect	text9
  2307  0F09                     __ptext9:	
  2308 ;; *************** function _ser_getch *****************
  2309 ;; Defined at:
  2310 ;;		line 37 in file "ser.c"
  2311 ;; Parameters:    Size  Location     Type
  2312 ;;		None
  2313 ;; Auto vars:     Size  Location     Type
  2314 ;;  rxbyte          2    5[BANK0 ] int 
  2315 ;; Return value:  Size  Location     Type
  2316 ;;                  2    0[BANK0 ] int 
  2317 ;; Registers used:
  2318 ;;		wreg
  2319 ;; Tracked objects:
  2320 ;;		On entry : 0/0
  2321 ;;		On exit  : 0/0
  2322 ;;		Unchanged: 0/0
  2323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2324 ;;      Params:         0       2       0       0       0
  2325 ;;      Locals:         0       2       0       0       0
  2326 ;;      Temps:          0       3       0       0       0
  2327 ;;      Totals:         0       7       0       0       0
  2328 ;;Total ram usage:        7 bytes
  2329 ;; Hardware stack levels used:    1
  2330 ;; Hardware stack levels required when called:    2
  2331 ;; This function calls:
  2332 ;;		Nothing
  2333 ;; This function is called by:
  2334 ;;		_getDistTrav
  2335 ;; This function uses a non-reentrant model
  2336 ;;
  2337                           
  2338                           
  2339                           ;psect for function _ser_getch
  2340  0F09                     _ser_getch:	
  2341  0F09                     l312:	
  2342                           ;ser.c: 38: while(!RCIF);
  2343                           
  2344                           ;incstack = 0
  2345                           ; Regs used in _ser_getch: [wreg]
  2346                           
  2347  0F09  1283               	bcf	3,5	;RP0=0, select bank0
  2348  0F0A  1303               	bcf	3,6	;RP1=0, select bank0
  2349  0F0B  1E8C               	btfss	12,5	;volatile
  2350  0F0C  2F09               	goto	l312
  2351                           
  2352                           ;ser.c: 39: signed int rxbyte = RCREG;
  2353  0F0D  081A               	movf	26,w	;volatile
  2354  0F0E  00C9               	movwf	??_ser_getch
  2355  0F0F  01CA               	clrf	??_ser_getch+1
  2356  0F10  0849               	movf	??_ser_getch,w
  2357  0F11  00CC               	movwf	ser_getch@rxbyte
  2358  0F12  084A               	movf	??_ser_getch+1,w
  2359  0F13  00CD               	movwf	ser_getch@rxbyte+1
  2360                           
  2361                           ;ser.c: 40: _delay((unsigned long)((100)*(20000000/4000.0)));
  2362  0F14  3003               	movlw	3
  2363  0F15  00CB               	movwf	??_ser_getch+2
  2364  0F16  308A               	movlw	138
  2365  0F17  00CA               	movwf	??_ser_getch+1
  2366  0F18  3056               	movlw	86
  2367  0F19  00C9               	movwf	??_ser_getch
  2368  0F1A                     u1877:	
  2369  0F1A  0BC9               	decfsz	??_ser_getch,f
  2370  0F1B  2F1A               	goto	u1877
  2371  0F1C  0BCA               	decfsz	??_ser_getch+1,f
  2372  0F1D  2F1A               	goto	u1877
  2373  0F1E  0BCB               	decfsz	??_ser_getch+2,f
  2374  0F1F  2F1A               	goto	u1877
  2375  0F20  2F21               	nop2
  2376                           
  2377                           ;ser.c: 41: return rxbyte;
  2378  0F21  1283               	bcf	3,5	;RP0=0, select bank0
  2379  0F22  1303               	bcf	3,6	;RP1=0, select bank0
  2380  0F23  084D               	movf	ser_getch@rxbyte+1,w
  2381  0F24  00C8               	movwf	?_ser_getch+1
  2382  0F25  084C               	movf	ser_getch@rxbyte,w
  2383  0F26  00C7               	movwf	?_ser_getch
  2384  0F27  0008               	return
  2385  0F28                     __end_of_ser_getch:	
  2386                           
  2387                           	psect	text10
  2388  0F6B                     __ptext10:	
  2389 ;; *************** function _Drive *****************
  2390 ;; Defined at:
  2391 ;;		line 48 in file "ser.c"
  2392 ;; Parameters:    Size  Location     Type
  2393 ;;  speedH          2    4[BANK0 ] int 
  2394 ;;  speedL          2    6[BANK0 ] int 
  2395 ;;  radH            2    8[BANK0 ] int 
  2396 ;;  radL            2   10[BANK0 ] int 
  2397 ;; Auto vars:     Size  Location     Type
  2398 ;;		None
  2399 ;; Return value:  Size  Location     Type
  2400 ;;                  1    wreg      void 
  2401 ;; Registers used:
  2402 ;;		wreg, status,2, status,0, pclath, cstack
  2403 ;; Tracked objects:
  2404 ;;		On entry : 0/0
  2405 ;;		On exit  : 0/0
  2406 ;;		Unchanged: 0/0
  2407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2408 ;;      Params:         0       8       0       0       0
  2409 ;;      Locals:         0       0       0       0       0
  2410 ;;      Temps:          0       0       0       0       0
  2411 ;;      Totals:         0       8       0       0       0
  2412 ;;Total ram usage:        8 bytes
  2413 ;; Hardware stack levels used:    1
  2414 ;; Hardware stack levels required when called:    3
  2415 ;; This function calls:
  2416 ;;		_ser_putch
  2417 ;; This function is called by:
  2418 ;;		_main
  2419 ;; This function uses a non-reentrant model
  2420 ;;
  2421                           
  2422                           
  2423                           ;psect for function _Drive
  2424  0F6B                     _Drive:	
  2425                           
  2426                           ;ser.c: 49: ser_putch(137);
  2427                           
  2428                           ;incstack = 0
  2429                           ; Regs used in _Drive: [wreg+status,2+status,0+pclath+cstack]
  2430  0F6B  3089               	movlw	137
  2431  0F6C  120A  158A  26F0  120A  158A  	fcall	_ser_putch
  2432                           
  2433                           ;ser.c: 50: ser_putch(speedH);
  2434  0F71  1283               	bcf	3,5	;RP0=0, select bank0
  2435  0F72  1303               	bcf	3,6	;RP1=0, select bank0
  2436  0F73  084B               	movf	Drive@speedH,w
  2437  0F74  120A  158A  26F0  120A  158A  	fcall	_ser_putch
  2438                           
  2439                           ;ser.c: 51: ser_putch(speedL);
  2440  0F79  1283               	bcf	3,5	;RP0=0, select bank0
  2441  0F7A  1303               	bcf	3,6	;RP1=0, select bank0
  2442  0F7B  084D               	movf	Drive@speedL,w
  2443  0F7C  120A  158A  26F0  120A  158A  	fcall	_ser_putch
  2444                           
  2445                           ;ser.c: 52: ser_putch(radH);
  2446  0F81  1283               	bcf	3,5	;RP0=0, select bank0
  2447  0F82  1303               	bcf	3,6	;RP1=0, select bank0
  2448  0F83  084F               	movf	Drive@radH,w
  2449  0F84  120A  158A  26F0  120A  158A  	fcall	_ser_putch
  2450                           
  2451                           ;ser.c: 53: ser_putch(radL);
  2452  0F89  1283               	bcf	3,5	;RP0=0, select bank0
  2453  0F8A  1303               	bcf	3,6	;RP1=0, select bank0
  2454  0F8B  0851               	movf	Drive@radL,w
  2455  0F8C  120A  158A  26F0   	fcall	_ser_putch
  2456  0F8F  0008               	return
  2457  0F90                     __end_of_Drive:	
  2458                           
  2459                           	psect	text11
  2460  0EF0                     __ptext11:	
  2461 ;; *************** function _ser_putch *****************
  2462 ;; Defined at:
  2463 ;;		line 30 in file "ser.c"
  2464 ;; Parameters:    Size  Location     Type
  2465 ;;  c               1    wreg     unsigned char 
  2466 ;; Auto vars:     Size  Location     Type
  2467 ;;  c               1    3[BANK0 ] unsigned char 
  2468 ;; Return value:  Size  Location     Type
  2469 ;;                  1    wreg      void 
  2470 ;; Registers used:
  2471 ;;		wreg
  2472 ;; Tracked objects:
  2473 ;;		On entry : 0/0
  2474 ;;		On exit  : 0/0
  2475 ;;		Unchanged: 0/0
  2476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2477 ;;      Params:         0       0       0       0       0
  2478 ;;      Locals:         0       1       0       0       0
  2479 ;;      Temps:          0       3       0       0       0
  2480 ;;      Totals:         0       4       0       0       0
  2481 ;;Total ram usage:        4 bytes
  2482 ;; Hardware stack levels used:    1
  2483 ;; Hardware stack levels required when called:    2
  2484 ;; This function calls:
  2485 ;;		Nothing
  2486 ;; This function is called by:
  2487 ;;		_main
  2488 ;;		_Drive
  2489 ;;		_getDistTrav
  2490 ;; This function uses a non-reentrant model
  2491 ;;
  2492                           
  2493                           
  2494                           ;psect for function _ser_putch
  2495  0EF0                     _ser_putch:	
  2496                           
  2497                           ;incstack = 0
  2498                           ; Regs used in _ser_putch: [wreg]
  2499                           ;ser_putch@c stored from wreg
  2500  0EF0  1283               	bcf	3,5	;RP0=0, select bank0
  2501  0EF1  1303               	bcf	3,6	;RP1=0, select bank0
  2502  0EF2  00CA               	movwf	ser_putch@c
  2503  0EF3                     l306:	
  2504                           ;ser.c: 31: while(!TRMT);
  2505                           
  2506  0EF3  1683               	bsf	3,5	;RP0=1, select bank1
  2507  0EF4  1303               	bcf	3,6	;RP1=0, select bank1
  2508  0EF5  1C98               	btfss	24,1	;volatile
  2509  0EF6  2EF3               	goto	l306
  2510                           
  2511                           ;ser.c: 32: TXREG=c;
  2512  0EF7  1283               	bcf	3,5	;RP0=0, select bank0
  2513  0EF8  1303               	bcf	3,6	;RP1=0, select bank0
  2514  0EF9  084A               	movf	ser_putch@c,w
  2515  0EFA  0099               	movwf	25	;volatile
  2516                           
  2517                           ;ser.c: 33: _delay((unsigned long)((100)*(20000000/4000.0)));
  2518  0EFB  3003               	movlw	3
  2519  0EFC  00C9               	movwf	??_ser_putch+2
  2520  0EFD  308A               	movlw	138
  2521  0EFE  00C8               	movwf	??_ser_putch+1
  2522  0EFF  3056               	movlw	86
  2523  0F00  00C7               	movwf	??_ser_putch
  2524  0F01                     u1887:	
  2525  0F01  0BC7               	decfsz	??_ser_putch,f
  2526  0F02  2F01               	goto	u1887
  2527  0F03  0BC8               	decfsz	??_ser_putch+1,f
  2528  0F04  2F01               	goto	u1887
  2529  0F05  0BC9               	decfsz	??_ser_putch+2,f
  2530  0F06  2F01               	goto	u1887
  2531  0F07  2F08               	nop2
  2532  0F08  0008               	return
  2533  0F09                     __end_of_ser_putch:	
  2534                           
  2535                           	psect	text12
  2536  0F28                     __ptext12:	
  2537 ;; *************** function _ADCMain *****************
  2538 ;; Defined at:
  2539 ;;		line 19 in file "ADC.c"
  2540 ;; Parameters:    Size  Location     Type
  2541 ;;		None
  2542 ;; Auto vars:     Size  Location     Type
  2543 ;;		None
  2544 ;; Return value:  Size  Location     Type
  2545 ;;                  1    wreg      void 
  2546 ;; Registers used:
  2547 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2548 ;; Tracked objects:
  2549 ;;		On entry : 0/0
  2550 ;;		On exit  : 0/0
  2551 ;;		Unchanged: 0/0
  2552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2553 ;;      Params:         0       0       0       0       0
  2554 ;;      Locals:         0       0       0       0       0
  2555 ;;      Temps:          0       0       0       0       0
  2556 ;;      Totals:         0       0       0       0       0
  2557 ;;Total ram usage:        0 bytes
  2558 ;; Hardware stack levels used:    1
  2559 ;; Hardware stack levels required when called:    4
  2560 ;; This function calls:
  2561 ;;		_adcConvertMM
  2562 ;;		_getADC
  2563 ;;		_lcdSetCursor
  2564 ;;		_lcdWriteToDigitBCD
  2565 ;; This function is called by:
  2566 ;;		_main
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570                           
  2571                           ;psect for function _ADCMain
  2572  0F28                     _ADCMain:	
  2573                           
  2574                           ;ADC.c: 21: getADC();
  2575                           
  2576                           ;incstack = 0
  2577                           ; Regs used in _ADCMain: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2578  0F28  120A  118A  278D  120A  158A  	fcall	_getADC
  2579                           
  2580                           ;ADC.c: 22: lcdSetCursor(0b10000000);
  2581  0F2D  3080               	movlw	128
  2582  0F2E  120A  158A  2674  120A  158A  	fcall	_lcdSetCursor
  2583                           
  2584                           ;ADC.c: 23: lcdWriteToDigitBCD(adcRAW);
  2585  0F33  1283               	bcf	3,5	;RP0=0, select bank0
  2586  0F34  1303               	bcf	3,6	;RP1=0, select bank0
  2587  0F35  0823               	movf	_adcRAW+1,w	;volatile
  2588  0F36  00CB               	movwf	lcdWriteToDigitBCD@data+1
  2589  0F37  0822               	movf	_adcRAW,w	;volatile
  2590  0F38  00CA               	movwf	lcdWriteToDigitBCD@data
  2591  0F39  120A  118A  2531  120A  158A  	fcall	_lcdWriteToDigitBCD
  2592                           
  2593                           ;ADC.c: 25: adcConvertMM(adcRAW);
  2594  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
  2595  0F3F  1303               	bcf	3,6	;RP1=0, select bank0
  2596  0F40  0823               	movf	_adcRAW+1,w	;volatile
  2597  0F41  00DD               	movwf	adcConvertMM@adcRAW+1
  2598  0F42  0822               	movf	_adcRAW,w	;volatile
  2599  0F43  00DC               	movwf	adcConvertMM@adcRAW
  2600  0F44  120A  118A  202F   	fcall	_adcConvertMM
  2601  0F47  0008               	return
  2602  0F48                     __end_of_ADCMain:	
  2603                           
  2604                           	psect	text13
  2605  0531                     __ptext13:	
  2606 ;; *************** function _lcdWriteToDigitBCD *****************
  2607 ;; Defined at:
  2608 ;;		line 42 in file "LCD.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;  data            2    3[BANK0 ] unsigned int 
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  2613 ;;  TenThouDigit    2   11[BANK0 ] unsigned int 
  2614 ;;  ThouDigit       2    9[BANK0 ] unsigned int 
  2615 ;;  HunsDigit       2    7[BANK0 ] unsigned int 
  2616 ;;  TensDigit       2    5[BANK0 ] unsigned int 
  2617 ;; Return value:  Size  Location     Type
  2618 ;;                  1    wreg      void 
  2619 ;; Registers used:
  2620 ;;		wreg, status,2, status,0, pclath, cstack
  2621 ;; Tracked objects:
  2622 ;;		On entry : 0/0
  2623 ;;		On exit  : 0/0
  2624 ;;		Unchanged: 0/0
  2625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2626 ;;      Params:         0       2       0       0       0
  2627 ;;      Locals:         0      10       0       0       0
  2628 ;;      Temps:          0       0       0       0       0
  2629 ;;      Totals:         0      12       0       0       0
  2630 ;;Total ram usage:       12 bytes
  2631 ;; Hardware stack levels used:    1
  2632 ;; Hardware stack levels required when called:    3
  2633 ;; This function calls:
  2634 ;;		_lcdWriteData
  2635 ;; This function is called by:
  2636 ;;		_main
  2637 ;;		_getDistTrav
  2638 ;;		_ADCMain
  2639 ;; This function uses a non-reentrant model
  2640 ;;
  2641                           
  2642                           
  2643                           ;psect for function _lcdWriteToDigitBCD
  2644  0531                     _lcdWriteToDigitBCD:	
  2645                           
  2646                           ;LCD.c: 43: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  2647                           ;LCD.c: 46: OnesDigit = data;
  2648                           
  2649                           ;incstack = 0
  2650                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  2651  0531  1283               	bcf	3,5	;RP0=0, select bank0
  2652  0532  1303               	bcf	3,6	;RP1=0, select bank0
  2653  0533  084B               	movf	lcdWriteToDigitBCD@data+1,w
  2654  0534  00D5               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2655  0535  084A               	movf	lcdWriteToDigitBCD@data,w
  2656  0536  00D4               	movwf	lcdWriteToDigitBCD@OnesDigit
  2657                           
  2658                           ;LCD.c: 47: TensDigit = 0;
  2659  0537  01CC               	clrf	lcdWriteToDigitBCD@TensDigit
  2660  0538  01CD               	clrf	lcdWriteToDigitBCD@TensDigit+1
  2661                           
  2662                           ;LCD.c: 48: HunsDigit = 0;
  2663  0539  01CE               	clrf	lcdWriteToDigitBCD@HunsDigit
  2664  053A  01CF               	clrf	lcdWriteToDigitBCD@HunsDigit+1
  2665                           
  2666                           ;LCD.c: 49: ThouDigit = 0;
  2667  053B  01D0               	clrf	lcdWriteToDigitBCD@ThouDigit
  2668  053C  01D1               	clrf	lcdWriteToDigitBCD@ThouDigit+1
  2669                           
  2670                           ;LCD.c: 50: TenThouDigit = 0;
  2671  053D  01D2               	clrf	lcdWriteToDigitBCD@TenThouDigit
  2672  053E  01D3               	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  2673  053F                     l1618:	
  2674                           ;LCD.c: 53: while (OnesDigit >= 10000){
  2675                           
  2676  053F  3027               	movlw	39
  2677  0540  0255               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2678  0541  3010               	movlw	16
  2679  0542  1903               	skipnz
  2680  0543  0254               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2681  0544  1C03               	btfss	3,0
  2682  0545  2D63               	goto	l1624
  2683                           
  2684                           ;LCD.c: 54: OnesDigit = OnesDigit - 10000;
  2685  0546  0854               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2686  0547  3EF0               	addlw	240
  2687  0548  00D4               	movwf	lcdWriteToDigitBCD@OnesDigit
  2688  0549  0855               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2689  054A  1803               	skipnc
  2690  054B  3E01               	addlw	1
  2691  054C  3ED8               	addlw	216
  2692  054D  00D5               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2693                           
  2694                           ;LCD.c: 55: TenThouDigit++;
  2695  054E  3001               	movlw	1
  2696  054F  07D2               	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  2697  0550  1803               	skipnc
  2698  0551  0AD3               	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2699  0552  3000               	movlw	0
  2700  0553  07D3               	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2701  0554  2D3F               	goto	l1618
  2702  0555                     l1620:	
  2703                           ;LCD.c: 56: }
  2704                           ;LCD.c: 58: while (OnesDigit >= 1000){
  2705                           
  2706                           
  2707                           ;LCD.c: 59: OnesDigit = OnesDigit - 1000;
  2708  0555  0854               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2709  0556  3E18               	addlw	24
  2710  0557  00D4               	movwf	lcdWriteToDigitBCD@OnesDigit
  2711  0558  0855               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2712  0559  1803               	skipnc
  2713  055A  3E01               	addlw	1
  2714  055B  3EFC               	addlw	252
  2715  055C  00D5               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2716                           
  2717                           ;LCD.c: 60: ThouDigit++;
  2718  055D  3001               	movlw	1
  2719  055E  07D0               	addwf	lcdWriteToDigitBCD@ThouDigit,f
  2720  055F  1803               	skipnc
  2721  0560  0AD1               	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  2722  0561  3000               	movlw	0
  2723  0562  07D1               	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  2724  0563                     l1624:	
  2725  0563  3003               	movlw	3
  2726  0564  0255               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2727  0565  30E8               	movlw	232
  2728  0566  1903               	skipnz
  2729  0567  0254               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2730  0568  1C03               	btfss	3,0
  2731  0569  2D79               	goto	l1630
  2732  056A  2D55               	goto	l1620
  2733  056B                     l1626:	
  2734                           ;LCD.c: 61: }
  2735                           ;LCD.c: 63: while (OnesDigit >= 100){
  2736                           
  2737                           
  2738                           ;LCD.c: 64: OnesDigit = OnesDigit - 100;
  2739  056B  0854               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2740  056C  3E9C               	addlw	156
  2741  056D  00D4               	movwf	lcdWriteToDigitBCD@OnesDigit
  2742  056E  0855               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2743  056F  1803               	skipnc
  2744  0570  3E01               	addlw	1
  2745  0571  3EFF               	addlw	255
  2746  0572  00D5               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2747                           
  2748                           ;LCD.c: 65: HunsDigit++;
  2749  0573  3001               	movlw	1
  2750  0574  07CE               	addwf	lcdWriteToDigitBCD@HunsDigit,f
  2751  0575  1803               	skipnc
  2752  0576  0ACF               	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  2753  0577  3000               	movlw	0
  2754  0578  07CF               	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  2755  0579                     l1630:	
  2756  0579  3000               	movlw	0
  2757  057A  0255               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2758  057B  3064               	movlw	100
  2759  057C  1903               	skipnz
  2760  057D  0254               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2761  057E  1C03               	btfss	3,0
  2762  057F  2D8F               	goto	l1636
  2763  0580  2D6B               	goto	l1626
  2764  0581                     l1632:	
  2765                           ;LCD.c: 66: }
  2766                           ;LCD.c: 68: while (OnesDigit >= 10){
  2767                           
  2768                           
  2769                           ;LCD.c: 69: OnesDigit = OnesDigit - 10;
  2770  0581  0854               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2771  0582  3EF6               	addlw	246
  2772  0583  00D4               	movwf	lcdWriteToDigitBCD@OnesDigit
  2773  0584  0855               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2774  0585  1803               	skipnc
  2775  0586  3E01               	addlw	1
  2776  0587  3EFF               	addlw	255
  2777  0588  00D5               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2778                           
  2779                           ;LCD.c: 70: TensDigit++;
  2780  0589  3001               	movlw	1
  2781  058A  07CC               	addwf	lcdWriteToDigitBCD@TensDigit,f
  2782  058B  1803               	skipnc
  2783  058C  0ACD               	incf	lcdWriteToDigitBCD@TensDigit+1,f
  2784  058D  3000               	movlw	0
  2785  058E  07CD               	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  2786  058F                     l1636:	
  2787  058F  3000               	movlw	0
  2788  0590  0255               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2789  0591  300A               	movlw	10
  2790  0592  1903               	skipnz
  2791  0593  0254               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2792  0594  1803               	skipnc
  2793  0595  2D81               	goto	l1632
  2794                           
  2795                           ;LCD.c: 71: }
  2796                           ;LCD.c: 73: if (TenThouDigit > 0)
  2797  0596  0852               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  2798  0597  0453               	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  2799  0598  1903               	btfsc	3,2
  2800  0599  2DA1               	goto	l1642
  2801                           
  2802                           ;LCD.c: 74: lcdWriteData((unsigned int)TenThouDigit + 48);
  2803  059A  0852               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  2804  059B  3E30               	addlw	48
  2805  059C  120A  158A  269B  120A  118A  	fcall	_lcdWriteData
  2806  05A1                     l1642:	
  2807                           
  2808                           ;LCD.c: 76: if (ThouDigit > 0)
  2809  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  2810  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  2811  05A3  0850               	movf	lcdWriteToDigitBCD@ThouDigit,w
  2812  05A4  0451               	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  2813  05A5  1903               	btfsc	3,2
  2814  05A6  2DAE               	goto	l203
  2815                           
  2816                           ;LCD.c: 77: lcdWriteData((unsigned int)ThouDigit + 48);
  2817  05A7  0850               	movf	lcdWriteToDigitBCD@ThouDigit,w
  2818  05A8  3E30               	addlw	48
  2819  05A9  120A  158A  269B  120A  118A  	fcall	_lcdWriteData
  2820  05AE                     l203:	
  2821                           
  2822                           ;LCD.c: 79: lcdWriteData((unsigned int)HunsDigit + 48);
  2823  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  2824  05AF  1303               	bcf	3,6	;RP1=0, select bank0
  2825  05B0  084E               	movf	lcdWriteToDigitBCD@HunsDigit,w
  2826  05B1  3E30               	addlw	48
  2827  05B2  120A  158A  269B  120A  118A  	fcall	_lcdWriteData
  2828                           
  2829                           ;LCD.c: 80: lcdWriteData((unsigned int)TensDigit + 48);
  2830  05B7  1283               	bcf	3,5	;RP0=0, select bank0
  2831  05B8  1303               	bcf	3,6	;RP1=0, select bank0
  2832  05B9  084C               	movf	lcdWriteToDigitBCD@TensDigit,w
  2833  05BA  3E30               	addlw	48
  2834  05BB  120A  158A  269B  120A  118A  	fcall	_lcdWriteData
  2835                           
  2836                           ;LCD.c: 81: lcdWriteData((unsigned int)OnesDigit + 48);
  2837  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  2838  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  2839  05C2  0854               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2840  05C3  3E30               	addlw	48
  2841  05C4  120A  158A  269B   	fcall	_lcdWriteData
  2842  05C7  0008               	return
  2843  05C8                     __end_of_lcdWriteToDigitBCD:	
  2844                           
  2845                           	psect	text14
  2846  0E9B                     __ptext14:	
  2847 ;; *************** function _lcdWriteData *****************
  2848 ;; Defined at:
  2849 ;;		line 20 in file "LCD.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;  databyte        1    wreg     unsigned char 
  2852 ;; Auto vars:     Size  Location     Type
  2853 ;;  databyte        1    2[BANK0 ] unsigned char 
  2854 ;; Return value:  Size  Location     Type
  2855 ;;                  1    wreg      void 
  2856 ;; Registers used:
  2857 ;;		wreg
  2858 ;; Tracked objects:
  2859 ;;		On entry : 0/0
  2860 ;;		On exit  : 0/0
  2861 ;;		Unchanged: 0/0
  2862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2863 ;;      Params:         0       0       0       0       0
  2864 ;;      Locals:         0       1       0       0       0
  2865 ;;      Temps:          0       2       0       0       0
  2866 ;;      Totals:         0       3       0       0       0
  2867 ;;Total ram usage:        3 bytes
  2868 ;; Hardware stack levels used:    1
  2869 ;; Hardware stack levels required when called:    2
  2870 ;; This function calls:
  2871 ;;		Nothing
  2872 ;; This function is called by:
  2873 ;;		_lcdWriteToDigitBCD
  2874 ;;		_lcdWriteString
  2875 ;; This function uses a non-reentrant model
  2876 ;;
  2877                           
  2878                           
  2879                           ;psect for function _lcdWriteData
  2880  0E9B                     _lcdWriteData:	
  2881                           
  2882                           ;incstack = 0
  2883                           ; Regs used in _lcdWriteData: [wreg]
  2884                           ;lcdWriteData@databyte stored from wreg
  2885  0E9B  1283               	bcf	3,5	;RP0=0, select bank0
  2886  0E9C  1303               	bcf	3,6	;RP1=0, select bank0
  2887  0E9D  00C9               	movwf	lcdWriteData@databyte
  2888                           
  2889                           ;LCD.c: 21: RE2 = 0;
  2890  0E9E  1109               	bcf	9,2	;volatile
  2891                           
  2892                           ;LCD.c: 22: RE1 = 0;
  2893  0E9F  1089               	bcf	9,1	;volatile
  2894                           
  2895                           ;LCD.c: 23: RE0 = 1;
  2896  0EA0  1409               	bsf	9,0	;volatile
  2897                           
  2898                           ;LCD.c: 24: PORTD = databyte;
  2899  0EA1  0849               	movf	lcdWriteData@databyte,w
  2900  0EA2  0088               	movwf	8	;volatile
  2901                           
  2902                           ;LCD.c: 25: RE2 = 1;
  2903  0EA3  1509               	bsf	9,2	;volatile
  2904                           
  2905                           ;LCD.c: 26: RE2 = 0;
  2906  0EA4  1109               	bcf	9,2	;volatile
  2907                           
  2908                           ;LCD.c: 27: _delay((unsigned long)((1)*(20000000/4000.0)));
  2909  0EA5  3007               	movlw	7
  2910  0EA6  00C8               	movwf	??_lcdWriteData+1
  2911  0EA7  307D               	movlw	125
  2912  0EA8  00C7               	movwf	??_lcdWriteData
  2913  0EA9                     u1897:	
  2914  0EA9  0BC7               	decfsz	??_lcdWriteData,f
  2915  0EAA  2EA9               	goto	u1897
  2916  0EAB  0BC8               	decfsz	??_lcdWriteData+1,f
  2917  0EAC  2EA9               	goto	u1897
  2918  0EAD  0008               	return
  2919  0EAE                     __end_of_lcdWriteData:	
  2920                           
  2921                           	psect	text15
  2922  0E74                     __ptext15:	
  2923 ;; *************** function _lcdSetCursor *****************
  2924 ;; Defined at:
  2925 ;;		line 31 in file "LCD.c"
  2926 ;; Parameters:    Size  Location     Type
  2927 ;;  address         1    wreg     unsigned char 
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;  address         1    3[BANK0 ] unsigned char 
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  1    wreg      void 
  2932 ;; Registers used:
  2933 ;;		wreg, status,2, status,0, pclath, cstack
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2939 ;;      Params:         0       0       0       0       0
  2940 ;;      Locals:         0       1       0       0       0
  2941 ;;      Temps:          0       0       0       0       0
  2942 ;;      Totals:         0       1       0       0       0
  2943 ;;Total ram usage:        1 bytes
  2944 ;; Hardware stack levels used:    1
  2945 ;; Hardware stack levels required when called:    3
  2946 ;; This function calls:
  2947 ;;		_lcdWriteControl
  2948 ;; This function is called by:
  2949 ;;		_getDistTrav
  2950 ;;		_ADCMain
  2951 ;; This function uses a non-reentrant model
  2952 ;;
  2953                           
  2954                           
  2955                           ;psect for function _lcdSetCursor
  2956  0E74                     _lcdSetCursor:	
  2957                           
  2958                           ;incstack = 0
  2959                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  2960                           ;lcdSetCursor@address stored from wreg
  2961  0E74  1283               	bcf	3,5	;RP0=0, select bank0
  2962  0E75  1303               	bcf	3,6	;RP1=0, select bank0
  2963  0E76  00CA               	movwf	lcdSetCursor@address
  2964                           
  2965                           ;LCD.c: 32: address |= 0b10000000;
  2966  0E77  17CA               	bsf	lcdSetCursor@address,7
  2967                           
  2968                           ;LCD.c: 33: lcdWriteControl(address);
  2969  0E78  084A               	movf	lcdSetCursor@address,w
  2970  0E79  120A  158A  26AE   	fcall	_lcdWriteControl
  2971  0E7C  0008               	return
  2972  0E7D                     __end_of_lcdSetCursor:	
  2973                           
  2974                           	psect	text16
  2975  0EAE                     __ptext16:	
  2976 ;; *************** function _lcdWriteControl *****************
  2977 ;; Defined at:
  2978 ;;		line 9 in file "LCD.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;  databyte        1    wreg     unsigned char 
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;  databyte        1    2[BANK0 ] unsigned char 
  2983 ;; Return value:  Size  Location     Type
  2984 ;;                  1    wreg      void 
  2985 ;; Registers used:
  2986 ;;		wreg
  2987 ;; Tracked objects:
  2988 ;;		On entry : 0/0
  2989 ;;		On exit  : 0/0
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2992 ;;      Params:         0       0       0       0       0
  2993 ;;      Locals:         0       1       0       0       0
  2994 ;;      Temps:          0       2       0       0       0
  2995 ;;      Totals:         0       3       0       0       0
  2996 ;;Total ram usage:        3 bytes
  2997 ;; Hardware stack levels used:    1
  2998 ;; Hardware stack levels required when called:    2
  2999 ;; This function calls:
  3000 ;;		Nothing
  3001 ;; This function is called by:
  3002 ;;		_lcdSetCursor
  3003 ;;		_setupLCD
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007                           
  3008                           ;psect for function _lcdWriteControl
  3009  0EAE                     _lcdWriteControl:	
  3010                           
  3011                           ;incstack = 0
  3012                           ; Regs used in _lcdWriteControl: [wreg]
  3013                           ;lcdWriteControl@databyte stored from wreg
  3014  0EAE  1283               	bcf	3,5	;RP0=0, select bank0
  3015  0EAF  1303               	bcf	3,6	;RP1=0, select bank0
  3016  0EB0  00C9               	movwf	lcdWriteControl@databyte
  3017                           
  3018                           ;LCD.c: 10: RE2 = 0;
  3019  0EB1  1109               	bcf	9,2	;volatile
  3020                           
  3021                           ;LCD.c: 11: RE1 = 0;
  3022  0EB2  1089               	bcf	9,1	;volatile
  3023                           
  3024                           ;LCD.c: 12: RE0 = 0;
  3025  0EB3  1009               	bcf	9,0	;volatile
  3026                           
  3027                           ;LCD.c: 13: PORTD = databyte;
  3028  0EB4  0849               	movf	lcdWriteControl@databyte,w
  3029  0EB5  0088               	movwf	8	;volatile
  3030                           
  3031                           ;LCD.c: 14: RE2 = 1;
  3032  0EB6  1509               	bsf	9,2	;volatile
  3033                           
  3034                           ;LCD.c: 15: RE2 = 0;
  3035  0EB7  1109               	bcf	9,2	;volatile
  3036                           
  3037                           ;LCD.c: 16: _delay((unsigned long)((2)*(20000000/4000.0)));
  3038  0EB8  300D               	movlw	13
  3039  0EB9  00C8               	movwf	??_lcdWriteControl+1
  3040  0EBA  30FB               	movlw	251
  3041  0EBB  00C7               	movwf	??_lcdWriteControl
  3042  0EBC                     u1907:	
  3043  0EBC  0BC7               	decfsz	??_lcdWriteControl,f
  3044  0EBD  2EBC               	goto	u1907
  3045  0EBE  0BC8               	decfsz	??_lcdWriteControl+1,f
  3046  0EBF  2EBC               	goto	u1907
  3047  0EC0  2EC1               	nop2
  3048  0EC1  0008               	return
  3049  0EC2                     __end_of_lcdWriteControl:	
  3050                           
  3051                           	psect	text17
  3052  078D                     __ptext17:	
  3053 ;; *************** function _getADC *****************
  3054 ;; Defined at:
  3055 ;;		line 29 in file "ADC.c"
  3056 ;; Parameters:    Size  Location     Type
  3057 ;;		None
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;		None
  3060 ;; Return value:  Size  Location     Type
  3061 ;;                  2  387[None  ] unsigned int 
  3062 ;; Registers used:
  3063 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3064 ;; Tracked objects:
  3065 ;;		On entry : 0/0
  3066 ;;		On exit  : 0/0
  3067 ;;		Unchanged: 0/0
  3068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3069 ;;      Params:         0       0       0       0       0
  3070 ;;      Locals:         0       0       0       0       0
  3071 ;;      Temps:          0       2       0       0       0
  3072 ;;      Totals:         0       2       0       0       0
  3073 ;;Total ram usage:        2 bytes
  3074 ;; Hardware stack levels used:    1
  3075 ;; Hardware stack levels required when called:    2
  3076 ;; This function calls:
  3077 ;;		Nothing
  3078 ;; This function is called by:
  3079 ;;		_ADCMain
  3080 ;; This function uses a non-reentrant model
  3081 ;;
  3082                           
  3083                           
  3084                           ;psect for function _getADC
  3085  078D                     _getADC:	
  3086                           
  3087                           ;ADC.c: 31: ADRESH = 0;
  3088                           
  3089                           ;incstack = 0
  3090                           ; Regs used in _getADC: [wreg-fsr0h+status,2+status,0]
  3091  078D  1283               	bcf	3,5	;RP0=0, select bank0
  3092  078E  1303               	bcf	3,6	;RP1=0, select bank0
  3093  078F  019E               	clrf	30	;volatile
  3094                           
  3095                           ;ADC.c: 32: ADRESL = 0;
  3096  0790  1683               	bsf	3,5	;RP0=1, select bank1
  3097  0791  1303               	bcf	3,6	;RP1=0, select bank1
  3098  0792  019E               	clrf	30	;volatile
  3099                           
  3100                           ;ADC.c: 34: GO = 1;
  3101  0793  1283               	bcf	3,5	;RP0=0, select bank0
  3102  0794  1303               	bcf	3,6	;RP1=0, select bank0
  3103  0795  151F               	bsf	31,2	;volatile
  3104  0796                     l430:	
  3105                           ;ADC.c: 35: while(GO) continue;
  3106                           
  3107  0796  191F               	btfsc	31,2	;volatile
  3108  0797  2F96               	goto	l430
  3109                           
  3110                           ;ADC.c: 39: adcRAW = (4*ADRESH);
  3111  0798  081E               	movf	30,w	;volatile
  3112  0799  00C7               	movwf	??_getADC
  3113  079A  01C8               	clrf	??_getADC+1
  3114  079B  1003               	clrc
  3115  079C  0DC7               	rlf	??_getADC,f
  3116  079D  0DC8               	rlf	??_getADC+1,f
  3117  079E  1003               	clrc
  3118  079F  0DC7               	rlf	??_getADC,f
  3119  07A0  0DC8               	rlf	??_getADC+1,f
  3120  07A1  0847               	movf	??_getADC,w
  3121  07A2  00A2               	movwf	_adcRAW	;volatile
  3122  07A3  0848               	movf	??_getADC+1,w
  3123  07A4  00A3               	movwf	_adcRAW+1	;volatile
  3124                           
  3125                           ;ADC.c: 41: switch(ADRESL){
  3126  07A5  2FC4               	goto	l1668
  3127  07A6                     l1662:	
  3128                           ;ADC.c: 42: case 0b01000000: adcRAW = adcRAW + 1;
  3129                           
  3130  07A6  1283               	bcf	3,5	;RP0=0, select bank0
  3131  07A7  0822               	movf	_adcRAW,w	;volatile
  3132  07A8  3E01               	addlw	1
  3133  07A9  00A2               	movwf	_adcRAW	;volatile
  3134  07AA  0823               	movf	_adcRAW+1,w	;volatile
  3135  07AB  1803               	skipnc
  3136  07AC  3E01               	addlw	1
  3137  07AD  3E00               	addlw	0
  3138  07AE  00A3               	movwf	_adcRAW+1	;volatile
  3139                           
  3140                           ;ADC.c: 43: break;
  3141  07AF  0008               	return
  3142  07B0                     l1664:	
  3143                           ;ADC.c: 44: case 0b10000000: adcRAW = adcRAW + 2;
  3144                           
  3145  07B0  1283               	bcf	3,5	;RP0=0, select bank0
  3146  07B1  0822               	movf	_adcRAW,w	;volatile
  3147  07B2  3E02               	addlw	2
  3148  07B3  00A2               	movwf	_adcRAW	;volatile
  3149  07B4  0823               	movf	_adcRAW+1,w	;volatile
  3150  07B5  1803               	skipnc
  3151  07B6  3E01               	addlw	1
  3152  07B7  3E00               	addlw	0
  3153  07B8  00A3               	movwf	_adcRAW+1	;volatile
  3154                           
  3155                           ;ADC.c: 45: break;
  3156  07B9  0008               	return
  3157  07BA                     l1666:	
  3158                           ;ADC.c: 46: case 0b11000000: adcRAW = adcRAW + 3;
  3159                           
  3160  07BA  1283               	bcf	3,5	;RP0=0, select bank0
  3161  07BB  0822               	movf	_adcRAW,w	;volatile
  3162  07BC  3E03               	addlw	3
  3163  07BD  00A2               	movwf	_adcRAW	;volatile
  3164  07BE  0823               	movf	_adcRAW+1,w	;volatile
  3165  07BF  1803               	skipnc
  3166  07C0  3E01               	addlw	1
  3167  07C1  3E00               	addlw	0
  3168  07C2  00A3               	movwf	_adcRAW+1	;volatile
  3169                           
  3170                           ;ADC.c: 49: }
  3171                           
  3172                           ;ADC.c: 48: default: adcRAW = adcRAW;
  3173                           
  3174                           ;ADC.c: 47: break;
  3175  07C3  0008               	return
  3176  07C4                     l1668:	
  3177  07C4  1683               	bsf	3,5	;RP0=1, select bank1
  3178  07C5  1303               	bcf	3,6	;RP1=0, select bank1
  3179  07C6  081E               	movf	30,w	;volatile
  3180                           
  3181                           ; Switch size 1, requested type "space"
  3182                           ; Number of cases is 3, Range of values is 64 to 192
  3183                           ; switch strategies available:
  3184                           ; Name         Instructions Cycles
  3185                           ; simple_byte           10     6 (average)
  3186                           ; jumptable            263     9 (fixed)
  3187                           ;	Chosen strategy is simple_byte
  3188  07C7  3A40               	xorlw	64	; case 64
  3189  07C8  1903               	skipnz
  3190  07C9  2FA6               	goto	l1662
  3191  07CA  3AC0               	xorlw	192	; case 128
  3192  07CB  1903               	skipnz
  3193  07CC  2FB0               	goto	l1664
  3194  07CD  3A40               	xorlw	64	; case 192
  3195  07CE  1903               	skipnz
  3196  07CF  2FBA               	goto	l1666
  3197  07D0  2FD1               	goto	l439
  3198  07D1                     l439:	
  3199                           ;ADC.c: 51: return(adcRAW);
  3200                           ;	Return value of _getADC is never used
  3201                           
  3202  07D1  0008               	return
  3203  07D2                     __end_of_getADC:	
  3204                           
  3205                           	psect	text18
  3206  002F                     __ptext18:	
  3207 ;; *************** function _adcConvertMM *****************
  3208 ;; Defined at:
  3209 ;;		line 59 in file "ADC.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;  adcRAW          2   21[BANK0 ] unsigned int 
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;		None
  3214 ;; Return value:  Size  Location     Type
  3215 ;;                  2   21[BANK0 ] unsigned int 
  3216 ;; Registers used:
  3217 ;;		wreg, status,2, status,0, pclath, cstack
  3218 ;; Tracked objects:
  3219 ;;		On entry : 0/0
  3220 ;;		On exit  : 0/0
  3221 ;;		Unchanged: 0/0
  3222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3223 ;;      Params:         0       2       0       0       0
  3224 ;;      Locals:         0       0       0       0       0
  3225 ;;      Temps:          0       8       0       0       0
  3226 ;;      Totals:         0      10       0       0       0
  3227 ;;Total ram usage:       10 bytes
  3228 ;; Hardware stack levels used:    1
  3229 ;; Hardware stack levels required when called:    3
  3230 ;; This function calls:
  3231 ;;		___aldiv
  3232 ;;		___lwdiv
  3233 ;;		___wmul
  3234 ;; This function is called by:
  3235 ;;		_ADCMain
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           
  3240                           ;psect for function _adcConvertMM
  3241  002F                     _adcConvertMM:	
  3242                           
  3243                           ;ADC.c: 61: if (adcRAW < 517 && adcRAW >= 513)
  3244                           
  3245                           ;incstack = 0
  3246                           ; Regs used in _adcConvertMM: [wreg+status,2+status,0+pclath+cstack]
  3247  002F  3002               	movlw	2
  3248  0030  1283               	bcf	3,5	;RP0=0, select bank0
  3249  0031  1303               	bcf	3,6	;RP1=0, select bank0
  3250  0032  025D               	subwf	adcConvertMM@adcRAW+1,w
  3251  0033  3005               	movlw	5
  3252  0034  1903               	skipnz
  3253  0035  025C               	subwf	adcConvertMM@adcRAW,w
  3254  0036  1803               	skipnc
  3255  0037  2898               	goto	l1676
  3256  0038  3002               	movlw	2
  3257  0039  025D               	subwf	adcConvertMM@adcRAW+1,w
  3258  003A  3001               	movlw	1
  3259  003B  1903               	skipnz
  3260  003C  025C               	subwf	adcConvertMM@adcRAW,w
  3261  003D  1C03               	skipc
  3262  003E  2898               	goto	l1676
  3263                           
  3264                           ;ADC.c: 62: Distance = (((51700 - adcRAW*100)/4) + 100);
  3265  003F  3000               	movlw	0
  3266  0040  00D0               	movwf	___aldiv@divisor+3
  3267  0041  3000               	movlw	0
  3268  0042  00CF               	movwf	___aldiv@divisor+2
  3269  0043  3000               	movlw	0
  3270  0044  00CE               	movwf	___aldiv@divisor+1
  3271  0045  3004               	movlw	4
  3272  0046  00CD               	movwf	___aldiv@divisor
  3273  0047  30F4               	movlw	244
  3274  0048  00DE               	movwf	??_adcConvertMM
  3275  0049  30C9               	movlw	201
  3276  004A  00DF               	movwf	??_adcConvertMM+1
  3277  004B  3000               	movlw	0
  3278  004C  00E0               	movwf	??_adcConvertMM+2
  3279  004D  3000               	movlw	0
  3280  004E  00E1               	movwf	??_adcConvertMM+3
  3281  004F  085D               	movf	adcConvertMM@adcRAW+1,w
  3282  0050  00C8               	movwf	___wmul@multiplier+1
  3283  0051  085C               	movf	adcConvertMM@adcRAW,w
  3284  0052  00C7               	movwf	___wmul@multiplier
  3285  0053  3064               	movlw	100
  3286  0054  00C9               	movwf	___wmul@multiplicand
  3287  0055  3000               	movlw	0
  3288  0056  00CA               	movwf	___wmul@multiplicand+1
  3289  0057  120A  158A  2748  120A  118A  	fcall	___wmul
  3290  005C  1283               	bcf	3,5	;RP0=0, select bank0
  3291  005D  1303               	bcf	3,6	;RP1=0, select bank0
  3292  005E  0847               	movf	?___wmul,w
  3293  005F  00E2               	movwf	??_adcConvertMM+4
  3294  0060  0848               	movf	?___wmul+1,w
  3295  0061  00E3               	movwf	??_adcConvertMM+5
  3296  0062  01E4               	clrf	??_adcConvertMM+6
  3297  0063  01E5               	clrf	??_adcConvertMM+7
  3298  0064  09E2               	comf	??_adcConvertMM+4,f
  3299  0065  09E3               	comf	??_adcConvertMM+5,f
  3300  0066  09E4               	comf	??_adcConvertMM+6,f
  3301  0067  09E5               	comf	??_adcConvertMM+7,f
  3302  0068  0AE2               	incf	??_adcConvertMM+4,f
  3303  0069  1903               	skipnz
  3304  006A  0AE3               	incf	??_adcConvertMM+5,f
  3305  006B  1903               	skipnz
  3306  006C  0AE4               	incf	??_adcConvertMM+6,f
  3307  006D  1903               	skipnz
  3308  006E  0AE5               	incf	??_adcConvertMM+7,f
  3309  006F  0862               	movf	??_adcConvertMM+4,w
  3310  0070  07DE               	addwf	??_adcConvertMM,f
  3311  0071  0863               	movf	??_adcConvertMM+5,w
  3312  0072  1803               	skipnc
  3313  0073  0F63               	incfsz	??_adcConvertMM+5,w
  3314  0074  2876               	goto	u1210
  3315  0075  2877               	goto	u1211
  3316  0076                     u1210:	
  3317  0076  07DF               	addwf	??_adcConvertMM+1,f
  3318  0077                     u1211:	
  3319  0077  0864               	movf	??_adcConvertMM+6,w
  3320  0078  1803               	skipnc
  3321  0079  0F64               	incfsz	??_adcConvertMM+6,w
  3322  007A  287C               	goto	u1212
  3323  007B  287D               	goto	u1213
  3324  007C                     u1212:	
  3325  007C  07E0               	addwf	??_adcConvertMM+2,f
  3326  007D                     u1213:	
  3327  007D  0865               	movf	??_adcConvertMM+7,w
  3328  007E  1803               	skipnc
  3329  007F  0A65               	incf	??_adcConvertMM+7,w
  3330  0080  07E1               	addwf	??_adcConvertMM+3,f
  3331  0081  0861               	movf	??_adcConvertMM+3,w
  3332  0082  00D4               	movwf	___aldiv@dividend+3
  3333  0083  0860               	movf	??_adcConvertMM+2,w
  3334  0084  00D3               	movwf	___aldiv@dividend+2
  3335  0085  085F               	movf	??_adcConvertMM+1,w
  3336  0086  00D2               	movwf	___aldiv@dividend+1
  3337  0087  085E               	movf	??_adcConvertMM,w
  3338  0088  00D1               	movwf	___aldiv@dividend
  3339  0089  120A  118A  25C8  120A  118A  	fcall	___aldiv
  3340  008E  1283               	bcf	3,5	;RP0=0, select bank0
  3341  008F  1303               	bcf	3,6	;RP1=0, select bank0
  3342  0090  084D               	movf	?___aldiv,w
  3343  0091  3E64               	addlw	100
  3344  0092  00A0               	movwf	_Distance	;volatile
  3345  0093  084E               	movf	?___aldiv+1,w
  3346  0094  1803               	skipnc
  3347  0095  3E01               	addlw	1
  3348  0096  3E00               	addlw	0
  3349  0097  00A1               	movwf	_Distance+1	;volatile
  3350  0098                     l1676:	
  3351                           
  3352                           ;ADC.c: 64: if (adcRAW < 513 && adcRAW >= 393)
  3353  0098  3002               	movlw	2
  3354  0099  025D               	subwf	adcConvertMM@adcRAW+1,w
  3355  009A  3001               	movlw	1
  3356  009B  1903               	skipnz
  3357  009C  025C               	subwf	adcConvertMM@adcRAW,w
  3358  009D  1803               	skipnc
  3359  009E  28FF               	goto	l1682
  3360  009F  3001               	movlw	1
  3361  00A0  025D               	subwf	adcConvertMM@adcRAW+1,w
  3362  00A1  3089               	movlw	137
  3363  00A2  1903               	skipnz
  3364  00A3  025C               	subwf	adcConvertMM@adcRAW,w
  3365  00A4  1C03               	skipc
  3366  00A5  28FF               	goto	l1682
  3367                           
  3368                           ;ADC.c: 65: Distance = (((51300 - adcRAW*100)/120) + 200);
  3369  00A6  3000               	movlw	0
  3370  00A7  00D0               	movwf	___aldiv@divisor+3
  3371  00A8  3000               	movlw	0
  3372  00A9  00CF               	movwf	___aldiv@divisor+2
  3373  00AA  3000               	movlw	0
  3374  00AB  00CE               	movwf	___aldiv@divisor+1
  3375  00AC  3078               	movlw	120
  3376  00AD  00CD               	movwf	___aldiv@divisor
  3377  00AE  3064               	movlw	100
  3378  00AF  00DE               	movwf	??_adcConvertMM
  3379  00B0  30C8               	movlw	200
  3380  00B1  00DF               	movwf	??_adcConvertMM+1
  3381  00B2  3000               	movlw	0
  3382  00B3  00E0               	movwf	??_adcConvertMM+2
  3383  00B4  3000               	movlw	0
  3384  00B5  00E1               	movwf	??_adcConvertMM+3
  3385  00B6  085D               	movf	adcConvertMM@adcRAW+1,w
  3386  00B7  00C8               	movwf	___wmul@multiplier+1
  3387  00B8  085C               	movf	adcConvertMM@adcRAW,w
  3388  00B9  00C7               	movwf	___wmul@multiplier
  3389  00BA  3064               	movlw	100
  3390  00BB  00C9               	movwf	___wmul@multiplicand
  3391  00BC  3000               	movlw	0
  3392  00BD  00CA               	movwf	___wmul@multiplicand+1
  3393  00BE  120A  158A  2748  120A  118A  	fcall	___wmul
  3394  00C3  1283               	bcf	3,5	;RP0=0, select bank0
  3395  00C4  1303               	bcf	3,6	;RP1=0, select bank0
  3396  00C5  0847               	movf	?___wmul,w
  3397  00C6  00E2               	movwf	??_adcConvertMM+4
  3398  00C7  0848               	movf	?___wmul+1,w
  3399  00C8  00E3               	movwf	??_adcConvertMM+5
  3400  00C9  01E4               	clrf	??_adcConvertMM+6
  3401  00CA  01E5               	clrf	??_adcConvertMM+7
  3402  00CB  09E2               	comf	??_adcConvertMM+4,f
  3403  00CC  09E3               	comf	??_adcConvertMM+5,f
  3404  00CD  09E4               	comf	??_adcConvertMM+6,f
  3405  00CE  09E5               	comf	??_adcConvertMM+7,f
  3406  00CF  0AE2               	incf	??_adcConvertMM+4,f
  3407  00D0  1903               	skipnz
  3408  00D1  0AE3               	incf	??_adcConvertMM+5,f
  3409  00D2  1903               	skipnz
  3410  00D3  0AE4               	incf	??_adcConvertMM+6,f
  3411  00D4  1903               	skipnz
  3412  00D5  0AE5               	incf	??_adcConvertMM+7,f
  3413  00D6  0862               	movf	??_adcConvertMM+4,w
  3414  00D7  07DE               	addwf	??_adcConvertMM,f
  3415  00D8  0863               	movf	??_adcConvertMM+5,w
  3416  00D9  1803               	skipnc
  3417  00DA  0F63               	incfsz	??_adcConvertMM+5,w
  3418  00DB  28DD               	goto	u1240
  3419  00DC  28DE               	goto	u1241
  3420  00DD                     u1240:	
  3421  00DD  07DF               	addwf	??_adcConvertMM+1,f
  3422  00DE                     u1241:	
  3423  00DE  0864               	movf	??_adcConvertMM+6,w
  3424  00DF  1803               	skipnc
  3425  00E0  0F64               	incfsz	??_adcConvertMM+6,w
  3426  00E1  28E3               	goto	u1242
  3427  00E2  28E4               	goto	u1243
  3428  00E3                     u1242:	
  3429  00E3  07E0               	addwf	??_adcConvertMM+2,f
  3430  00E4                     u1243:	
  3431  00E4  0865               	movf	??_adcConvertMM+7,w
  3432  00E5  1803               	skipnc
  3433  00E6  0A65               	incf	??_adcConvertMM+7,w
  3434  00E7  07E1               	addwf	??_adcConvertMM+3,f
  3435  00E8  0861               	movf	??_adcConvertMM+3,w
  3436  00E9  00D4               	movwf	___aldiv@dividend+3
  3437  00EA  0860               	movf	??_adcConvertMM+2,w
  3438  00EB  00D3               	movwf	___aldiv@dividend+2
  3439  00EC  085F               	movf	??_adcConvertMM+1,w
  3440  00ED  00D2               	movwf	___aldiv@dividend+1
  3441  00EE  085E               	movf	??_adcConvertMM,w
  3442  00EF  00D1               	movwf	___aldiv@dividend
  3443  00F0  120A  118A  25C8  120A  118A  	fcall	___aldiv
  3444  00F5  1283               	bcf	3,5	;RP0=0, select bank0
  3445  00F6  1303               	bcf	3,6	;RP1=0, select bank0
  3446  00F7  084D               	movf	?___aldiv,w
  3447  00F8  3EC8               	addlw	200
  3448  00F9  00A0               	movwf	_Distance	;volatile
  3449  00FA  084E               	movf	?___aldiv+1,w
  3450  00FB  1803               	skipnc
  3451  00FC  3E01               	addlw	1
  3452  00FD  3E00               	addlw	0
  3453  00FE  00A1               	movwf	_Distance+1	;volatile
  3454  00FF                     l1682:	
  3455                           
  3456                           ;ADC.c: 67: if (adcRAW < 393 && adcRAW >= 298)
  3457  00FF  3001               	movlw	1
  3458  0100  025D               	subwf	adcConvertMM@adcRAW+1,w
  3459  0101  3089               	movlw	137
  3460  0102  1903               	skipnz
  3461  0103  025C               	subwf	adcConvertMM@adcRAW,w
  3462  0104  1803               	skipnc
  3463  0105  2966               	goto	l1688
  3464  0106  3001               	movlw	1
  3465  0107  025D               	subwf	adcConvertMM@adcRAW+1,w
  3466  0108  302A               	movlw	42
  3467  0109  1903               	skipnz
  3468  010A  025C               	subwf	adcConvertMM@adcRAW,w
  3469  010B  1C03               	skipc
  3470  010C  2966               	goto	l1688
  3471                           
  3472                           ;ADC.c: 68: Distance = (((39300 - adcRAW*100)/95) + 300);
  3473  010D  3000               	movlw	0
  3474  010E  00D0               	movwf	___aldiv@divisor+3
  3475  010F  3000               	movlw	0
  3476  0110  00CF               	movwf	___aldiv@divisor+2
  3477  0111  3000               	movlw	0
  3478  0112  00CE               	movwf	___aldiv@divisor+1
  3479  0113  305F               	movlw	95
  3480  0114  00CD               	movwf	___aldiv@divisor
  3481  0115  3084               	movlw	132
  3482  0116  00DE               	movwf	??_adcConvertMM
  3483  0117  3099               	movlw	153
  3484  0118  00DF               	movwf	??_adcConvertMM+1
  3485  0119  3000               	movlw	0
  3486  011A  00E0               	movwf	??_adcConvertMM+2
  3487  011B  3000               	movlw	0
  3488  011C  00E1               	movwf	??_adcConvertMM+3
  3489  011D  085D               	movf	adcConvertMM@adcRAW+1,w
  3490  011E  00C8               	movwf	___wmul@multiplier+1
  3491  011F  085C               	movf	adcConvertMM@adcRAW,w
  3492  0120  00C7               	movwf	___wmul@multiplier
  3493  0121  3064               	movlw	100
  3494  0122  00C9               	movwf	___wmul@multiplicand
  3495  0123  3000               	movlw	0
  3496  0124  00CA               	movwf	___wmul@multiplicand+1
  3497  0125  120A  158A  2748  120A  118A  	fcall	___wmul
  3498  012A  1283               	bcf	3,5	;RP0=0, select bank0
  3499  012B  1303               	bcf	3,6	;RP1=0, select bank0
  3500  012C  0847               	movf	?___wmul,w
  3501  012D  00E2               	movwf	??_adcConvertMM+4
  3502  012E  0848               	movf	?___wmul+1,w
  3503  012F  00E3               	movwf	??_adcConvertMM+5
  3504  0130  01E4               	clrf	??_adcConvertMM+6
  3505  0131  01E5               	clrf	??_adcConvertMM+7
  3506  0132  09E2               	comf	??_adcConvertMM+4,f
  3507  0133  09E3               	comf	??_adcConvertMM+5,f
  3508  0134  09E4               	comf	??_adcConvertMM+6,f
  3509  0135  09E5               	comf	??_adcConvertMM+7,f
  3510  0136  0AE2               	incf	??_adcConvertMM+4,f
  3511  0137  1903               	skipnz
  3512  0138  0AE3               	incf	??_adcConvertMM+5,f
  3513  0139  1903               	skipnz
  3514  013A  0AE4               	incf	??_adcConvertMM+6,f
  3515  013B  1903               	skipnz
  3516  013C  0AE5               	incf	??_adcConvertMM+7,f
  3517  013D  0862               	movf	??_adcConvertMM+4,w
  3518  013E  07DE               	addwf	??_adcConvertMM,f
  3519  013F  0863               	movf	??_adcConvertMM+5,w
  3520  0140  1803               	skipnc
  3521  0141  0F63               	incfsz	??_adcConvertMM+5,w
  3522  0142  2944               	goto	u1270
  3523  0143  2945               	goto	u1271
  3524  0144                     u1270:	
  3525  0144  07DF               	addwf	??_adcConvertMM+1,f
  3526  0145                     u1271:	
  3527  0145  0864               	movf	??_adcConvertMM+6,w
  3528  0146  1803               	skipnc
  3529  0147  0F64               	incfsz	??_adcConvertMM+6,w
  3530  0148  294A               	goto	u1272
  3531  0149  294B               	goto	u1273
  3532  014A                     u1272:	
  3533  014A  07E0               	addwf	??_adcConvertMM+2,f
  3534  014B                     u1273:	
  3535  014B  0865               	movf	??_adcConvertMM+7,w
  3536  014C  1803               	skipnc
  3537  014D  0A65               	incf	??_adcConvertMM+7,w
  3538  014E  07E1               	addwf	??_adcConvertMM+3,f
  3539  014F  0861               	movf	??_adcConvertMM+3,w
  3540  0150  00D4               	movwf	___aldiv@dividend+3
  3541  0151  0860               	movf	??_adcConvertMM+2,w
  3542  0152  00D3               	movwf	___aldiv@dividend+2
  3543  0153  085F               	movf	??_adcConvertMM+1,w
  3544  0154  00D2               	movwf	___aldiv@dividend+1
  3545  0155  085E               	movf	??_adcConvertMM,w
  3546  0156  00D1               	movwf	___aldiv@dividend
  3547  0157  120A  118A  25C8  120A  118A  	fcall	___aldiv
  3548  015C  1283               	bcf	3,5	;RP0=0, select bank0
  3549  015D  1303               	bcf	3,6	;RP1=0, select bank0
  3550  015E  084D               	movf	?___aldiv,w
  3551  015F  3E2C               	addlw	44
  3552  0160  00A0               	movwf	_Distance	;volatile
  3553  0161  084E               	movf	?___aldiv+1,w
  3554  0162  1803               	skipnc
  3555  0163  3E01               	addlw	1
  3556  0164  3E01               	addlw	1
  3557  0165  00A1               	movwf	_Distance+1	;volatile
  3558  0166                     l1688:	
  3559                           
  3560                           ;ADC.c: 70: if (adcRAW < 298 && adcRAW >= 236)
  3561  0166  3001               	movlw	1
  3562  0167  025D               	subwf	adcConvertMM@adcRAW+1,w
  3563  0168  302A               	movlw	42
  3564  0169  1903               	skipnz
  3565  016A  025C               	subwf	adcConvertMM@adcRAW,w
  3566  016B  1803               	skipnc
  3567  016C  29A5               	goto	l1694
  3568  016D  3000               	movlw	0
  3569  016E  025D               	subwf	adcConvertMM@adcRAW+1,w
  3570  016F  30EC               	movlw	236
  3571  0170  1903               	skipnz
  3572  0171  025C               	subwf	adcConvertMM@adcRAW,w
  3573  0172  1C03               	skipc
  3574  0173  29A5               	goto	l1694
  3575                           
  3576                           ;ADC.c: 71: Distance = (((29800 - adcRAW*100)/62) + 400);
  3577  0174  303E               	movlw	62
  3578  0175  00CD               	movwf	___lwdiv@divisor
  3579  0176  3000               	movlw	0
  3580  0177  00CE               	movwf	___lwdiv@divisor+1
  3581  0178  085D               	movf	adcConvertMM@adcRAW+1,w
  3582  0179  00C8               	movwf	___wmul@multiplier+1
  3583  017A  085C               	movf	adcConvertMM@adcRAW,w
  3584  017B  00C7               	movwf	___wmul@multiplier
  3585  017C  3064               	movlw	100
  3586  017D  00C9               	movwf	___wmul@multiplicand
  3587  017E  3000               	movlw	0
  3588  017F  00CA               	movwf	___wmul@multiplicand+1
  3589  0180  120A  158A  2748  120A  118A  	fcall	___wmul
  3590  0185  1283               	bcf	3,5	;RP0=0, select bank0
  3591  0186  1303               	bcf	3,6	;RP1=0, select bank0
  3592  0187  0947               	comf	?___wmul,w
  3593  0188  00DE               	movwf	??_adcConvertMM
  3594  0189  0948               	comf	?___wmul+1,w
  3595  018A  00DF               	movwf	??_adcConvertMM+1
  3596  018B  0ADE               	incf	??_adcConvertMM,f
  3597  018C  1903               	skipnz
  3598  018D  0ADF               	incf	??_adcConvertMM+1,f
  3599  018E  085E               	movf	??_adcConvertMM,w
  3600  018F  3E68               	addlw	104
  3601  0190  00CF               	movwf	___lwdiv@dividend
  3602  0191  085F               	movf	??_adcConvertMM+1,w
  3603  0192  1803               	skipnc
  3604  0193  3E01               	addlw	1
  3605  0194  3E74               	addlw	116
  3606  0195  00D0               	movwf	___lwdiv@dividend+1
  3607  0196  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  3608  019B  1283               	bcf	3,5	;RP0=0, select bank0
  3609  019C  1303               	bcf	3,6	;RP1=0, select bank0
  3610  019D  084D               	movf	?___lwdiv,w
  3611  019E  3E90               	addlw	144
  3612  019F  00A0               	movwf	_Distance	;volatile
  3613  01A0  084E               	movf	?___lwdiv+1,w
  3614  01A1  1803               	skipnc
  3615  01A2  3E01               	addlw	1
  3616  01A3  3E01               	addlw	1
  3617  01A4  00A1               	movwf	_Distance+1	;volatile
  3618  01A5                     l1694:	
  3619                           
  3620                           ;ADC.c: 73: if (adcRAW < 236 && adcRAW >= 194)
  3621  01A5  3000               	movlw	0
  3622  01A6  025D               	subwf	adcConvertMM@adcRAW+1,w
  3623  01A7  30EC               	movlw	236
  3624  01A8  1903               	skipnz
  3625  01A9  025C               	subwf	adcConvertMM@adcRAW,w
  3626  01AA  1803               	skipnc
  3627  01AB  29E4               	goto	l1700
  3628  01AC  3000               	movlw	0
  3629  01AD  025D               	subwf	adcConvertMM@adcRAW+1,w
  3630  01AE  30C2               	movlw	194
  3631  01AF  1903               	skipnz
  3632  01B0  025C               	subwf	adcConvertMM@adcRAW,w
  3633  01B1  1C03               	skipc
  3634  01B2  29E4               	goto	l1700
  3635                           
  3636                           ;ADC.c: 74: Distance = (((23600 - adcRAW*100)/42) + 500);
  3637  01B3  302A               	movlw	42
  3638  01B4  00CD               	movwf	___lwdiv@divisor
  3639  01B5  3000               	movlw	0
  3640  01B6  00CE               	movwf	___lwdiv@divisor+1
  3641  01B7  085D               	movf	adcConvertMM@adcRAW+1,w
  3642  01B8  00C8               	movwf	___wmul@multiplier+1
  3643  01B9  085C               	movf	adcConvertMM@adcRAW,w
  3644  01BA  00C7               	movwf	___wmul@multiplier
  3645  01BB  3064               	movlw	100
  3646  01BC  00C9               	movwf	___wmul@multiplicand
  3647  01BD  3000               	movlw	0
  3648  01BE  00CA               	movwf	___wmul@multiplicand+1
  3649  01BF  120A  158A  2748  120A  118A  	fcall	___wmul
  3650  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  3651  01C5  1303               	bcf	3,6	;RP1=0, select bank0
  3652  01C6  0947               	comf	?___wmul,w
  3653  01C7  00DE               	movwf	??_adcConvertMM
  3654  01C8  0948               	comf	?___wmul+1,w
  3655  01C9  00DF               	movwf	??_adcConvertMM+1
  3656  01CA  0ADE               	incf	??_adcConvertMM,f
  3657  01CB  1903               	skipnz
  3658  01CC  0ADF               	incf	??_adcConvertMM+1,f
  3659  01CD  085E               	movf	??_adcConvertMM,w
  3660  01CE  3E30               	addlw	48
  3661  01CF  00CF               	movwf	___lwdiv@dividend
  3662  01D0  085F               	movf	??_adcConvertMM+1,w
  3663  01D1  1803               	skipnc
  3664  01D2  3E01               	addlw	1
  3665  01D3  3E5C               	addlw	92
  3666  01D4  00D0               	movwf	___lwdiv@dividend+1
  3667  01D5  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  3668  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  3669  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  3670  01DC  084D               	movf	?___lwdiv,w
  3671  01DD  3EF4               	addlw	244
  3672  01DE  00A0               	movwf	_Distance	;volatile
  3673  01DF  084E               	movf	?___lwdiv+1,w
  3674  01E0  1803               	skipnc
  3675  01E1  3E01               	addlw	1
  3676  01E2  3E01               	addlw	1
  3677  01E3  00A1               	movwf	_Distance+1	;volatile
  3678  01E4                     l1700:	
  3679                           
  3680                           ;ADC.c: 76: if (adcRAW < 194 && adcRAW >= 168)
  3681  01E4  3000               	movlw	0
  3682  01E5  025D               	subwf	adcConvertMM@adcRAW+1,w
  3683  01E6  30C2               	movlw	194
  3684  01E7  1903               	skipnz
  3685  01E8  025C               	subwf	adcConvertMM@adcRAW,w
  3686  01E9  1803               	skipnc
  3687  01EA  2A23               	goto	l1706
  3688  01EB  3000               	movlw	0
  3689  01EC  025D               	subwf	adcConvertMM@adcRAW+1,w
  3690  01ED  30A8               	movlw	168
  3691  01EE  1903               	skipnz
  3692  01EF  025C               	subwf	adcConvertMM@adcRAW,w
  3693  01F0  1C03               	skipc
  3694  01F1  2A23               	goto	l1706
  3695                           
  3696                           ;ADC.c: 77: Distance = (((19400 - adcRAW*100)/26) + 600);
  3697  01F2  301A               	movlw	26
  3698  01F3  00CD               	movwf	___lwdiv@divisor
  3699  01F4  3000               	movlw	0
  3700  01F5  00CE               	movwf	___lwdiv@divisor+1
  3701  01F6  085D               	movf	adcConvertMM@adcRAW+1,w
  3702  01F7  00C8               	movwf	___wmul@multiplier+1
  3703  01F8  085C               	movf	adcConvertMM@adcRAW,w
  3704  01F9  00C7               	movwf	___wmul@multiplier
  3705  01FA  3064               	movlw	100
  3706  01FB  00C9               	movwf	___wmul@multiplicand
  3707  01FC  3000               	movlw	0
  3708  01FD  00CA               	movwf	___wmul@multiplicand+1
  3709  01FE  120A  158A  2748  120A  118A  	fcall	___wmul
  3710  0203  1283               	bcf	3,5	;RP0=0, select bank0
  3711  0204  1303               	bcf	3,6	;RP1=0, select bank0
  3712  0205  0947               	comf	?___wmul,w
  3713  0206  00DE               	movwf	??_adcConvertMM
  3714  0207  0948               	comf	?___wmul+1,w
  3715  0208  00DF               	movwf	??_adcConvertMM+1
  3716  0209  0ADE               	incf	??_adcConvertMM,f
  3717  020A  1903               	skipnz
  3718  020B  0ADF               	incf	??_adcConvertMM+1,f
  3719  020C  085E               	movf	??_adcConvertMM,w
  3720  020D  3EC8               	addlw	200
  3721  020E  00CF               	movwf	___lwdiv@dividend
  3722  020F  085F               	movf	??_adcConvertMM+1,w
  3723  0210  1803               	skipnc
  3724  0211  3E01               	addlw	1
  3725  0212  3E4B               	addlw	75
  3726  0213  00D0               	movwf	___lwdiv@dividend+1
  3727  0214  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  3728  0219  1283               	bcf	3,5	;RP0=0, select bank0
  3729  021A  1303               	bcf	3,6	;RP1=0, select bank0
  3730  021B  084D               	movf	?___lwdiv,w
  3731  021C  3E58               	addlw	88
  3732  021D  00A0               	movwf	_Distance	;volatile
  3733  021E  084E               	movf	?___lwdiv+1,w
  3734  021F  1803               	skipnc
  3735  0220  3E01               	addlw	1
  3736  0221  3E02               	addlw	2
  3737  0222  00A1               	movwf	_Distance+1	;volatile
  3738  0223                     l1706:	
  3739                           
  3740                           ;ADC.c: 79: if (adcRAW < 168 && adcRAW >= 144)
  3741  0223  3000               	movlw	0
  3742  0224  025D               	subwf	adcConvertMM@adcRAW+1,w
  3743  0225  30A8               	movlw	168
  3744  0226  1903               	skipnz
  3745  0227  025C               	subwf	adcConvertMM@adcRAW,w
  3746  0228  1803               	skipnc
  3747  0229  2A62               	goto	l1712
  3748  022A  3000               	movlw	0
  3749  022B  025D               	subwf	adcConvertMM@adcRAW+1,w
  3750  022C  3090               	movlw	144
  3751  022D  1903               	skipnz
  3752  022E  025C               	subwf	adcConvertMM@adcRAW,w
  3753  022F  1C03               	skipc
  3754  0230  2A62               	goto	l1712
  3755                           
  3756                           ;ADC.c: 80: Distance = (((16800 - adcRAW*100)/24) + 700);
  3757  0231  3018               	movlw	24
  3758  0232  00CD               	movwf	___lwdiv@divisor
  3759  0233  3000               	movlw	0
  3760  0234  00CE               	movwf	___lwdiv@divisor+1
  3761  0235  085D               	movf	adcConvertMM@adcRAW+1,w
  3762  0236  00C8               	movwf	___wmul@multiplier+1
  3763  0237  085C               	movf	adcConvertMM@adcRAW,w
  3764  0238  00C7               	movwf	___wmul@multiplier
  3765  0239  3064               	movlw	100
  3766  023A  00C9               	movwf	___wmul@multiplicand
  3767  023B  3000               	movlw	0
  3768  023C  00CA               	movwf	___wmul@multiplicand+1
  3769  023D  120A  158A  2748  120A  118A  	fcall	___wmul
  3770  0242  1283               	bcf	3,5	;RP0=0, select bank0
  3771  0243  1303               	bcf	3,6	;RP1=0, select bank0
  3772  0244  0947               	comf	?___wmul,w
  3773  0245  00DE               	movwf	??_adcConvertMM
  3774  0246  0948               	comf	?___wmul+1,w
  3775  0247  00DF               	movwf	??_adcConvertMM+1
  3776  0248  0ADE               	incf	??_adcConvertMM,f
  3777  0249  1903               	skipnz
  3778  024A  0ADF               	incf	??_adcConvertMM+1,f
  3779  024B  085E               	movf	??_adcConvertMM,w
  3780  024C  3EA0               	addlw	160
  3781  024D  00CF               	movwf	___lwdiv@dividend
  3782  024E  085F               	movf	??_adcConvertMM+1,w
  3783  024F  1803               	skipnc
  3784  0250  3E01               	addlw	1
  3785  0251  3E41               	addlw	65
  3786  0252  00D0               	movwf	___lwdiv@dividend+1
  3787  0253  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  3788  0258  1283               	bcf	3,5	;RP0=0, select bank0
  3789  0259  1303               	bcf	3,6	;RP1=0, select bank0
  3790  025A  084D               	movf	?___lwdiv,w
  3791  025B  3EBC               	addlw	188
  3792  025C  00A0               	movwf	_Distance	;volatile
  3793  025D  084E               	movf	?___lwdiv+1,w
  3794  025E  1803               	skipnc
  3795  025F  3E01               	addlw	1
  3796  0260  3E02               	addlw	2
  3797  0261  00A1               	movwf	_Distance+1	;volatile
  3798  0262                     l1712:	
  3799                           
  3800                           ;ADC.c: 82: if (adcRAW < 144 && adcRAW >= 129)
  3801  0262  3000               	movlw	0
  3802  0263  025D               	subwf	adcConvertMM@adcRAW+1,w
  3803  0264  3090               	movlw	144
  3804  0265  1903               	skipnz
  3805  0266  025C               	subwf	adcConvertMM@adcRAW,w
  3806  0267  1803               	skipnc
  3807  0268  2AA1               	goto	l1718
  3808  0269  3000               	movlw	0
  3809  026A  025D               	subwf	adcConvertMM@adcRAW+1,w
  3810  026B  3081               	movlw	129
  3811  026C  1903               	skipnz
  3812  026D  025C               	subwf	adcConvertMM@adcRAW,w
  3813  026E  1C03               	skipc
  3814  026F  2AA1               	goto	l1718
  3815                           
  3816                           ;ADC.c: 83: Distance = (((14400 - adcRAW*100)/15) + 800);
  3817  0270  300F               	movlw	15
  3818  0271  00CD               	movwf	___lwdiv@divisor
  3819  0272  3000               	movlw	0
  3820  0273  00CE               	movwf	___lwdiv@divisor+1
  3821  0274  085D               	movf	adcConvertMM@adcRAW+1,w
  3822  0275  00C8               	movwf	___wmul@multiplier+1
  3823  0276  085C               	movf	adcConvertMM@adcRAW,w
  3824  0277  00C7               	movwf	___wmul@multiplier
  3825  0278  3064               	movlw	100
  3826  0279  00C9               	movwf	___wmul@multiplicand
  3827  027A  3000               	movlw	0
  3828  027B  00CA               	movwf	___wmul@multiplicand+1
  3829  027C  120A  158A  2748  120A  118A  	fcall	___wmul
  3830  0281  1283               	bcf	3,5	;RP0=0, select bank0
  3831  0282  1303               	bcf	3,6	;RP1=0, select bank0
  3832  0283  0947               	comf	?___wmul,w
  3833  0284  00DE               	movwf	??_adcConvertMM
  3834  0285  0948               	comf	?___wmul+1,w
  3835  0286  00DF               	movwf	??_adcConvertMM+1
  3836  0287  0ADE               	incf	??_adcConvertMM,f
  3837  0288  1903               	skipnz
  3838  0289  0ADF               	incf	??_adcConvertMM+1,f
  3839  028A  085E               	movf	??_adcConvertMM,w
  3840  028B  3E40               	addlw	64
  3841  028C  00CF               	movwf	___lwdiv@dividend
  3842  028D  085F               	movf	??_adcConvertMM+1,w
  3843  028E  1803               	skipnc
  3844  028F  3E01               	addlw	1
  3845  0290  3E38               	addlw	56
  3846  0291  00D0               	movwf	___lwdiv@dividend+1
  3847  0292  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  3848  0297  1283               	bcf	3,5	;RP0=0, select bank0
  3849  0298  1303               	bcf	3,6	;RP1=0, select bank0
  3850  0299  084D               	movf	?___lwdiv,w
  3851  029A  3E20               	addlw	32
  3852  029B  00A0               	movwf	_Distance	;volatile
  3853  029C  084E               	movf	?___lwdiv+1,w
  3854  029D  1803               	skipnc
  3855  029E  3E01               	addlw	1
  3856  029F  3E03               	addlw	3
  3857  02A0  00A1               	movwf	_Distance+1	;volatile
  3858  02A1                     l1718:	
  3859                           
  3860                           ;ADC.c: 85: if (adcRAW < 129 && adcRAW >= 110)
  3861  02A1  3000               	movlw	0
  3862  02A2  025D               	subwf	adcConvertMM@adcRAW+1,w
  3863  02A3  3081               	movlw	129
  3864  02A4  1903               	skipnz
  3865  02A5  025C               	subwf	adcConvertMM@adcRAW,w
  3866  02A6  1803               	skipnc
  3867  02A7  2AE0               	goto	l1724
  3868  02A8  3000               	movlw	0
  3869  02A9  025D               	subwf	adcConvertMM@adcRAW+1,w
  3870  02AA  306E               	movlw	110
  3871  02AB  1903               	skipnz
  3872  02AC  025C               	subwf	adcConvertMM@adcRAW,w
  3873  02AD  1C03               	skipc
  3874  02AE  2AE0               	goto	l1724
  3875                           
  3876                           ;ADC.c: 86: Distance = (((12900 - adcRAW*100)/19) + 900 + 50);
  3877  02AF  3013               	movlw	19
  3878  02B0  00CD               	movwf	___lwdiv@divisor
  3879  02B1  3000               	movlw	0
  3880  02B2  00CE               	movwf	___lwdiv@divisor+1
  3881  02B3  085D               	movf	adcConvertMM@adcRAW+1,w
  3882  02B4  00C8               	movwf	___wmul@multiplier+1
  3883  02B5  085C               	movf	adcConvertMM@adcRAW,w
  3884  02B6  00C7               	movwf	___wmul@multiplier
  3885  02B7  3064               	movlw	100
  3886  02B8  00C9               	movwf	___wmul@multiplicand
  3887  02B9  3000               	movlw	0
  3888  02BA  00CA               	movwf	___wmul@multiplicand+1
  3889  02BB  120A  158A  2748  120A  118A  	fcall	___wmul
  3890  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  3891  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  3892  02C2  0947               	comf	?___wmul,w
  3893  02C3  00DE               	movwf	??_adcConvertMM
  3894  02C4  0948               	comf	?___wmul+1,w
  3895  02C5  00DF               	movwf	??_adcConvertMM+1
  3896  02C6  0ADE               	incf	??_adcConvertMM,f
  3897  02C7  1903               	skipnz
  3898  02C8  0ADF               	incf	??_adcConvertMM+1,f
  3899  02C9  085E               	movf	??_adcConvertMM,w
  3900  02CA  3E64               	addlw	100
  3901  02CB  00CF               	movwf	___lwdiv@dividend
  3902  02CC  085F               	movf	??_adcConvertMM+1,w
  3903  02CD  1803               	skipnc
  3904  02CE  3E01               	addlw	1
  3905  02CF  3E32               	addlw	50
  3906  02D0  00D0               	movwf	___lwdiv@dividend+1
  3907  02D1  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  3908  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  3909  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  3910  02D8  084D               	movf	?___lwdiv,w
  3911  02D9  3EB6               	addlw	182
  3912  02DA  00A0               	movwf	_Distance	;volatile
  3913  02DB  084E               	movf	?___lwdiv+1,w
  3914  02DC  1803               	skipnc
  3915  02DD  3E01               	addlw	1
  3916  02DE  3E03               	addlw	3
  3917  02DF  00A1               	movwf	_Distance+1	;volatile
  3918  02E0                     l1724:	
  3919                           
  3920                           ;ADC.c: 88: if (adcRAW < 110 && adcRAW >= 98)
  3921  02E0  3000               	movlw	0
  3922  02E1  025D               	subwf	adcConvertMM@adcRAW+1,w
  3923  02E2  306E               	movlw	110
  3924  02E3  1903               	skipnz
  3925  02E4  025C               	subwf	adcConvertMM@adcRAW,w
  3926  02E5  1803               	skipnc
  3927  02E6  2B1F               	goto	l1730
  3928  02E7  3000               	movlw	0
  3929  02E8  025D               	subwf	adcConvertMM@adcRAW+1,w
  3930  02E9  3062               	movlw	98
  3931  02EA  1903               	skipnz
  3932  02EB  025C               	subwf	adcConvertMM@adcRAW,w
  3933  02EC  1C03               	skipc
  3934  02ED  2B1F               	goto	l1730
  3935                           
  3936                           ;ADC.c: 89: Distance = (((11000 - adcRAW*100)/12) + 1000 + 100);
  3937  02EE  300C               	movlw	12
  3938  02EF  00CD               	movwf	___lwdiv@divisor
  3939  02F0  3000               	movlw	0
  3940  02F1  00CE               	movwf	___lwdiv@divisor+1
  3941  02F2  085D               	movf	adcConvertMM@adcRAW+1,w
  3942  02F3  00C8               	movwf	___wmul@multiplier+1
  3943  02F4  085C               	movf	adcConvertMM@adcRAW,w
  3944  02F5  00C7               	movwf	___wmul@multiplier
  3945  02F6  3064               	movlw	100
  3946  02F7  00C9               	movwf	___wmul@multiplicand
  3947  02F8  3000               	movlw	0
  3948  02F9  00CA               	movwf	___wmul@multiplicand+1
  3949  02FA  120A  158A  2748  120A  118A  	fcall	___wmul
  3950  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  3951  0300  1303               	bcf	3,6	;RP1=0, select bank0
  3952  0301  0947               	comf	?___wmul,w
  3953  0302  00DE               	movwf	??_adcConvertMM
  3954  0303  0948               	comf	?___wmul+1,w
  3955  0304  00DF               	movwf	??_adcConvertMM+1
  3956  0305  0ADE               	incf	??_adcConvertMM,f
  3957  0306  1903               	skipnz
  3958  0307  0ADF               	incf	??_adcConvertMM+1,f
  3959  0308  085E               	movf	??_adcConvertMM,w
  3960  0309  3EF8               	addlw	248
  3961  030A  00CF               	movwf	___lwdiv@dividend
  3962  030B  085F               	movf	??_adcConvertMM+1,w
  3963  030C  1803               	skipnc
  3964  030D  3E01               	addlw	1
  3965  030E  3E2A               	addlw	42
  3966  030F  00D0               	movwf	___lwdiv@dividend+1
  3967  0310  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  3968  0315  1283               	bcf	3,5	;RP0=0, select bank0
  3969  0316  1303               	bcf	3,6	;RP1=0, select bank0
  3970  0317  084D               	movf	?___lwdiv,w
  3971  0318  3E4C               	addlw	76
  3972  0319  00A0               	movwf	_Distance	;volatile
  3973  031A  084E               	movf	?___lwdiv+1,w
  3974  031B  1803               	skipnc
  3975  031C  3E01               	addlw	1
  3976  031D  3E04               	addlw	4
  3977  031E  00A1               	movwf	_Distance+1	;volatile
  3978  031F                     l1730:	
  3979                           
  3980                           ;ADC.c: 91: if (adcRAW < 98 && adcRAW >= 90)
  3981  031F  3000               	movlw	0
  3982  0320  025D               	subwf	adcConvertMM@adcRAW+1,w
  3983  0321  3062               	movlw	98
  3984  0322  1903               	skipnz
  3985  0323  025C               	subwf	adcConvertMM@adcRAW,w
  3986  0324  1803               	skipnc
  3987  0325  2B5C               	goto	l1736
  3988  0326  3000               	movlw	0
  3989  0327  025D               	subwf	adcConvertMM@adcRAW+1,w
  3990  0328  305A               	movlw	90
  3991  0329  1903               	skipnz
  3992  032A  025C               	subwf	adcConvertMM@adcRAW,w
  3993  032B  1C03               	skipc
  3994  032C  2B5C               	goto	l1736
  3995                           
  3996                           ;ADC.c: 92: Distance = (((9800 - adcRAW*100)/8) + 1100 + 150);
  3997  032D  085D               	movf	adcConvertMM@adcRAW+1,w
  3998  032E  00C8               	movwf	___wmul@multiplier+1
  3999  032F  085C               	movf	adcConvertMM@adcRAW,w
  4000  0330  00C7               	movwf	___wmul@multiplier
  4001  0331  3064               	movlw	100
  4002  0332  00C9               	movwf	___wmul@multiplicand
  4003  0333  3000               	movlw	0
  4004  0334  00CA               	movwf	___wmul@multiplicand+1
  4005  0335  120A  158A  2748  120A  118A  	fcall	___wmul
  4006  033A  1283               	bcf	3,5	;RP0=0, select bank0
  4007  033B  1303               	bcf	3,6	;RP1=0, select bank0
  4008  033C  0947               	comf	?___wmul,w
  4009  033D  00DE               	movwf	??_adcConvertMM
  4010  033E  0948               	comf	?___wmul+1,w
  4011  033F  00DF               	movwf	??_adcConvertMM+1
  4012  0340  0ADE               	incf	??_adcConvertMM,f
  4013  0341  1903               	skipnz
  4014  0342  0ADF               	incf	??_adcConvertMM+1,f
  4015  0343  085E               	movf	??_adcConvertMM,w
  4016  0344  3E48               	addlw	72
  4017  0345  00E0               	movwf	??_adcConvertMM+2
  4018  0346  085F               	movf	??_adcConvertMM+1,w
  4019  0347  1803               	skipnc
  4020  0348  3E01               	addlw	1
  4021  0349  3E26               	addlw	38
  4022  034A  00E1               	movwf	??_adcConvertMM+3
  4023  034B  1003               	clrc
  4024  034C  0CE1               	rrf	??_adcConvertMM+3,f
  4025  034D  0CE0               	rrf	??_adcConvertMM+2,f
  4026  034E  1003               	clrc
  4027  034F  0CE1               	rrf	??_adcConvertMM+3,f
  4028  0350  0CE0               	rrf	??_adcConvertMM+2,f
  4029  0351  1003               	clrc
  4030  0352  0CE1               	rrf	??_adcConvertMM+3,f
  4031  0353  0CE0               	rrf	??_adcConvertMM+2,f
  4032  0354  0860               	movf	??_adcConvertMM+2,w
  4033  0355  3EE2               	addlw	226
  4034  0356  00A0               	movwf	_Distance	;volatile
  4035  0357  0861               	movf	??_adcConvertMM+3,w
  4036  0358  1803               	skipnc
  4037  0359  3E01               	addlw	1
  4038  035A  3E04               	addlw	4
  4039  035B  00A1               	movwf	_Distance+1	;volatile
  4040  035C                     l1736:	
  4041                           
  4042                           ;ADC.c: 94: if(adcRAW < 90 || adcRAW >= 517)
  4043  035C  3000               	movlw	0
  4044  035D  025D               	subwf	adcConvertMM@adcRAW+1,w
  4045  035E  305A               	movlw	90
  4046  035F  1903               	skipnz
  4047  0360  025C               	subwf	adcConvertMM@adcRAW,w
  4048  0361  1C03               	skipc
  4049  0362  2B6A               	goto	l1740
  4050  0363  3002               	movlw	2
  4051  0364  025D               	subwf	adcConvertMM@adcRAW+1,w
  4052  0365  3005               	movlw	5
  4053  0366  1903               	skipnz
  4054  0367  025C               	subwf	adcConvertMM@adcRAW,w
  4055  0368  1C03               	skipc
  4056  0369  0008               	return
  4057  036A                     l1740:	
  4058                           
  4059                           ;ADC.c: 95: Distance = 0;
  4060  036A  01A0               	clrf	_Distance	;volatile
  4061  036B  01A1               	clrf	_Distance+1	;volatile
  4062  036C  0008               	return
  4063  036D                     __end_of_adcConvertMM:	
  4064                           ;ADC.c: 97: return(Distance);
  4065                           ;	Return value of _adcConvertMM is never used
  4066                           
  4067                           
  4068                           	psect	text19
  4069  0F48                     __ptext19:	
  4070 ;; *************** function ___wmul *****************
  4071 ;; Defined at:
  4072 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  4073 ;; Parameters:    Size  Location     Type
  4074 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4075 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;  product         2    4[BANK0 ] unsigned int 
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  2    0[BANK0 ] unsigned int 
  4080 ;; Registers used:
  4081 ;;		wreg, status,2, status,0
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4087 ;;      Params:         0       4       0       0       0
  4088 ;;      Locals:         0       2       0       0       0
  4089 ;;      Temps:          0       0       0       0       0
  4090 ;;      Totals:         0       6       0       0       0
  4091 ;;Total ram usage:        6 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:    2
  4094 ;; This function calls:
  4095 ;;		Nothing
  4096 ;; This function is called by:
  4097 ;;		_adcConvertMM
  4098 ;; This function uses a non-reentrant model
  4099 ;;
  4100                           
  4101                           
  4102                           ;psect for function ___wmul
  4103  0F48                     ___wmul:	
  4104                           
  4105                           ;incstack = 0
  4106                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4107  0F48  1283               	bcf	3,5	;RP0=0, select bank0
  4108  0F49  1303               	bcf	3,6	;RP1=0, select bank0
  4109  0F4A  01CB               	clrf	___wmul@product
  4110  0F4B  01CC               	clrf	___wmul@product+1
  4111  0F4C                     l1522:	
  4112  0F4C  1C47               	btfss	___wmul@multiplier,0
  4113  0F4D  2F54               	goto	l540
  4114  0F4E  0849               	movf	___wmul@multiplicand,w
  4115  0F4F  07CB               	addwf	___wmul@product,f
  4116  0F50  1803               	skipnc
  4117  0F51  0ACC               	incf	___wmul@product+1,f
  4118  0F52  084A               	movf	___wmul@multiplicand+1,w
  4119  0F53  07CC               	addwf	___wmul@product+1,f
  4120  0F54                     l540:	
  4121  0F54  3001               	movlw	1
  4122  0F55                     u905:	
  4123  0F55  1003               	clrc
  4124  0F56  0DC9               	rlf	___wmul@multiplicand,f
  4125  0F57  0DCA               	rlf	___wmul@multiplicand+1,f
  4126  0F58  3EFF               	addlw	-1
  4127  0F59  1D03               	skipz
  4128  0F5A  2F55               	goto	u905
  4129  0F5B  3001               	movlw	1
  4130  0F5C                     u915:	
  4131  0F5C  1003               	clrc
  4132  0F5D  0CC8               	rrf	___wmul@multiplier+1,f
  4133  0F5E  0CC7               	rrf	___wmul@multiplier,f
  4134  0F5F  3EFF               	addlw	-1
  4135  0F60  1D03               	skipz
  4136  0F61  2F5C               	goto	u915
  4137  0F62  0847               	movf	___wmul@multiplier,w
  4138  0F63  0448               	iorwf	___wmul@multiplier+1,w
  4139  0F64  1D03               	btfss	3,2
  4140  0F65  2F4C               	goto	l1522
  4141  0F66  084C               	movf	___wmul@product+1,w
  4142  0F67  00C8               	movwf	?___wmul+1
  4143  0F68  084B               	movf	___wmul@product,w
  4144  0F69  00C7               	movwf	?___wmul
  4145  0F6A  0008               	return
  4146  0F6B                     __end_of___wmul:	
  4147                           
  4148                           	psect	text20
  4149  0FC2                     __ptext20:	
  4150 ;; *************** function ___lwdiv *****************
  4151 ;; Defined at:
  4152 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  4153 ;; Parameters:    Size  Location     Type
  4154 ;;  divisor         2    6[BANK0 ] unsigned int 
  4155 ;;  dividend        2    8[BANK0 ] unsigned int 
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;  quotient        2   11[BANK0 ] unsigned int 
  4158 ;;  counter         1   13[BANK0 ] unsigned char 
  4159 ;; Return value:  Size  Location     Type
  4160 ;;                  2    6[BANK0 ] unsigned int 
  4161 ;; Registers used:
  4162 ;;		wreg, status,2, status,0
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4168 ;;      Params:         0       4       0       0       0
  4169 ;;      Locals:         0       3       0       0       0
  4170 ;;      Temps:          0       1       0       0       0
  4171 ;;      Totals:         0       8       0       0       0
  4172 ;;Total ram usage:        8 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; Hardware stack levels required when called:    2
  4175 ;; This function calls:
  4176 ;;		Nothing
  4177 ;; This function is called by:
  4178 ;;		_adcConvertMM
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182                           
  4183                           ;psect for function ___lwdiv
  4184  0FC2                     ___lwdiv:	
  4185                           
  4186                           ;incstack = 0
  4187                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4188  0FC2  1283               	bcf	3,5	;RP0=0, select bank0
  4189  0FC3  1303               	bcf	3,6	;RP1=0, select bank0
  4190  0FC4  01D2               	clrf	___lwdiv@quotient
  4191  0FC5  01D3               	clrf	___lwdiv@quotient+1
  4192  0FC6  084D               	movf	___lwdiv@divisor,w
  4193  0FC7  044E               	iorwf	___lwdiv@divisor+1,w
  4194  0FC8  1903               	btfsc	3,2
  4195  0FC9  2FFB               	goto	l1596
  4196  0FCA  01D4               	clrf	___lwdiv@counter
  4197  0FCB  0AD4               	incf	___lwdiv@counter,f
  4198  0FCC                     l1584:	
  4199  0FCC  1BCE               	btfsc	___lwdiv@divisor+1,7
  4200  0FCD  2FDA               	goto	l1586
  4201  0FCE  3001               	movlw	1
  4202  0FCF                     u1045:	
  4203  0FCF  1003               	clrc
  4204  0FD0  0DCD               	rlf	___lwdiv@divisor,f
  4205  0FD1  0DCE               	rlf	___lwdiv@divisor+1,f
  4206  0FD2  3EFF               	addlw	-1
  4207  0FD3  1D03               	skipz
  4208  0FD4  2FCF               	goto	u1045
  4209  0FD5  3001               	movlw	1
  4210  0FD6  00D1               	movwf	??___lwdiv
  4211  0FD7  0851               	movf	??___lwdiv,w
  4212  0FD8  07D4               	addwf	___lwdiv@counter,f
  4213  0FD9  2FCC               	goto	l1584
  4214  0FDA                     l1586:	
  4215  0FDA  3001               	movlw	1
  4216  0FDB                     u1065:	
  4217  0FDB  1003               	clrc
  4218  0FDC  0DD2               	rlf	___lwdiv@quotient,f
  4219  0FDD  0DD3               	rlf	___lwdiv@quotient+1,f
  4220  0FDE  3EFF               	addlw	-1
  4221  0FDF  1D03               	skipz
  4222  0FE0  2FDB               	goto	u1065
  4223  0FE1  084E               	movf	___lwdiv@divisor+1,w
  4224  0FE2  0250               	subwf	___lwdiv@dividend+1,w
  4225  0FE3  1D03               	skipz
  4226  0FE4  2FE7               	goto	u1075
  4227  0FE5  084D               	movf	___lwdiv@divisor,w
  4228  0FE6  024F               	subwf	___lwdiv@dividend,w
  4229  0FE7                     u1075:	
  4230  0FE7  1C03               	skipc
  4231  0FE8  2FF0               	goto	l1592
  4232  0FE9  084D               	movf	___lwdiv@divisor,w
  4233  0FEA  02CF               	subwf	___lwdiv@dividend,f
  4234  0FEB  084E               	movf	___lwdiv@divisor+1,w
  4235  0FEC  1C03               	skipc
  4236  0FED  03D0               	decf	___lwdiv@dividend+1,f
  4237  0FEE  02D0               	subwf	___lwdiv@dividend+1,f
  4238  0FEF  1452               	bsf	___lwdiv@quotient,0
  4239  0FF0                     l1592:	
  4240  0FF0  3001               	movlw	1
  4241  0FF1                     u1085:	
  4242  0FF1  1003               	clrc
  4243  0FF2  0CCE               	rrf	___lwdiv@divisor+1,f
  4244  0FF3  0CCD               	rrf	___lwdiv@divisor,f
  4245  0FF4  3EFF               	addlw	-1
  4246  0FF5  1D03               	skipz
  4247  0FF6  2FF1               	goto	u1085
  4248  0FF7  3001               	movlw	1
  4249  0FF8  02D4               	subwf	___lwdiv@counter,f
  4250  0FF9  1D03               	btfss	3,2
  4251  0FFA  2FDA               	goto	l1586
  4252  0FFB                     l1596:	
  4253  0FFB  0853               	movf	___lwdiv@quotient+1,w
  4254  0FFC  00CE               	movwf	?___lwdiv+1
  4255  0FFD  0852               	movf	___lwdiv@quotient,w
  4256  0FFE  00CD               	movwf	?___lwdiv
  4257  0FFF  0008               	return
  4258  1000                     __end_of___lwdiv:	
  4259                           
  4260                           	psect	text21
  4261  05C8                     __ptext21:	
  4262 ;; *************** function ___aldiv *****************
  4263 ;; Defined at:
  4264 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
  4265 ;; Parameters:    Size  Location     Type
  4266 ;;  divisor         4    6[BANK0 ] long 
  4267 ;;  dividend        4   10[BANK0 ] long 
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;  quotient        4   17[BANK0 ] long 
  4270 ;;  sign            1   16[BANK0 ] unsigned char 
  4271 ;;  counter         1   15[BANK0 ] unsigned char 
  4272 ;; Return value:  Size  Location     Type
  4273 ;;                  4    6[BANK0 ] long 
  4274 ;; Registers used:
  4275 ;;		wreg, status,2, status,0
  4276 ;; Tracked objects:
  4277 ;;		On entry : 0/0
  4278 ;;		On exit  : 0/0
  4279 ;;		Unchanged: 0/0
  4280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4281 ;;      Params:         0       8       0       0       0
  4282 ;;      Locals:         0       6       0       0       0
  4283 ;;      Temps:          0       1       0       0       0
  4284 ;;      Totals:         0      15       0       0       0
  4285 ;;Total ram usage:       15 bytes
  4286 ;; Hardware stack levels used:    1
  4287 ;; Hardware stack levels required when called:    2
  4288 ;; This function calls:
  4289 ;;		Nothing
  4290 ;; This function is called by:
  4291 ;;		_adcConvertMM
  4292 ;; This function uses a non-reentrant model
  4293 ;;
  4294                           
  4295                           
  4296                           ;psect for function ___aldiv
  4297  05C8                     ___aldiv:	
  4298                           
  4299                           ;incstack = 0
  4300                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4301  05C8  1283               	bcf	3,5	;RP0=0, select bank0
  4302  05C9  1303               	bcf	3,6	;RP1=0, select bank0
  4303  05CA  01D7               	clrf	___aldiv@sign
  4304  05CB  1FD0               	btfss	___aldiv@divisor+3,7
  4305  05CC  2DDA               	goto	l595
  4306  05CD  09CD               	comf	___aldiv@divisor,f
  4307  05CE  09CE               	comf	___aldiv@divisor+1,f
  4308  05CF  09CF               	comf	___aldiv@divisor+2,f
  4309  05D0  09D0               	comf	___aldiv@divisor+3,f
  4310  05D1  0ACD               	incf	___aldiv@divisor,f
  4311  05D2  1903               	skipnz
  4312  05D3  0ACE               	incf	___aldiv@divisor+1,f
  4313  05D4  1903               	skipnz
  4314  05D5  0ACF               	incf	___aldiv@divisor+2,f
  4315  05D6  1903               	skipnz
  4316  05D7  0AD0               	incf	___aldiv@divisor+3,f
  4317  05D8  01D7               	clrf	___aldiv@sign
  4318  05D9  0AD7               	incf	___aldiv@sign,f
  4319  05DA                     l595:	
  4320  05DA  1FD4               	btfss	___aldiv@dividend+3,7
  4321  05DB  2DEB               	goto	l1544
  4322  05DC  09D1               	comf	___aldiv@dividend,f
  4323  05DD  09D2               	comf	___aldiv@dividend+1,f
  4324  05DE  09D3               	comf	___aldiv@dividend+2,f
  4325  05DF  09D4               	comf	___aldiv@dividend+3,f
  4326  05E0  0AD1               	incf	___aldiv@dividend,f
  4327  05E1  1903               	skipnz
  4328  05E2  0AD2               	incf	___aldiv@dividend+1,f
  4329  05E3  1903               	skipnz
  4330  05E4  0AD3               	incf	___aldiv@dividend+2,f
  4331  05E5  1903               	skipnz
  4332  05E6  0AD4               	incf	___aldiv@dividend+3,f
  4333  05E7  3001               	movlw	1
  4334  05E8  00D5               	movwf	??___aldiv
  4335  05E9  0855               	movf	??___aldiv,w
  4336  05EA  06D7               	xorwf	___aldiv@sign,f
  4337  05EB                     l1544:	
  4338  05EB  3000               	movlw	0
  4339  05EC  00DB               	movwf	___aldiv@quotient+3
  4340  05ED  3000               	movlw	0
  4341  05EE  00DA               	movwf	___aldiv@quotient+2
  4342  05EF  3000               	movlw	0
  4343  05F0  00D9               	movwf	___aldiv@quotient+1
  4344  05F1  3000               	movlw	0
  4345  05F2  00D8               	movwf	___aldiv@quotient
  4346  05F3  0850               	movf	___aldiv@divisor+3,w
  4347  05F4  044F               	iorwf	___aldiv@divisor+2,w
  4348  05F5  044E               	iorwf	___aldiv@divisor+1,w
  4349  05F6  044D               	iorwf	___aldiv@divisor,w
  4350  05F7  1903               	skipnz
  4351  05F8  2E40               	goto	l1566
  4352  05F9  01D6               	clrf	___aldiv@counter
  4353  05FA  0AD6               	incf	___aldiv@counter,f
  4354  05FB                     l1552:	
  4355  05FB  1BD0               	btfsc	___aldiv@divisor+3,7
  4356  05FC  2E0B               	goto	l1554
  4357  05FD  3001               	movlw	1
  4358  05FE  00D5               	movwf	??___aldiv
  4359  05FF                     u965:	
  4360  05FF  1003               	clrc
  4361  0600  0DCD               	rlf	___aldiv@divisor,f
  4362  0601  0DCE               	rlf	___aldiv@divisor+1,f
  4363  0602  0DCF               	rlf	___aldiv@divisor+2,f
  4364  0603  0DD0               	rlf	___aldiv@divisor+3,f
  4365  0604  0BD5               	decfsz	??___aldiv,f
  4366  0605  2DFF               	goto	u965
  4367  0606  3001               	movlw	1
  4368  0607  00D5               	movwf	??___aldiv
  4369  0608  0855               	movf	??___aldiv,w
  4370  0609  07D6               	addwf	___aldiv@counter,f
  4371  060A  2DFB               	goto	l1552
  4372  060B                     l1554:	
  4373  060B  3001               	movlw	1
  4374  060C  00D5               	movwf	??___aldiv
  4375  060D                     u985:	
  4376  060D  1003               	clrc
  4377  060E  0DD8               	rlf	___aldiv@quotient,f
  4378  060F  0DD9               	rlf	___aldiv@quotient+1,f
  4379  0610  0DDA               	rlf	___aldiv@quotient+2,f
  4380  0611  0DDB               	rlf	___aldiv@quotient+3,f
  4381  0612  0BD5               	decfsz	??___aldiv,f
  4382  0613  2E0D               	goto	u985
  4383  0614  0850               	movf	___aldiv@divisor+3,w
  4384  0615  0254               	subwf	___aldiv@dividend+3,w
  4385  0616  1D03               	skipz
  4386  0617  2E22               	goto	u995
  4387  0618  084F               	movf	___aldiv@divisor+2,w
  4388  0619  0253               	subwf	___aldiv@dividend+2,w
  4389  061A  1D03               	skipz
  4390  061B  2E22               	goto	u995
  4391  061C  084E               	movf	___aldiv@divisor+1,w
  4392  061D  0252               	subwf	___aldiv@dividend+1,w
  4393  061E  1D03               	skipz
  4394  061F  2E22               	goto	u995
  4395  0620  084D               	movf	___aldiv@divisor,w
  4396  0621  0251               	subwf	___aldiv@dividend,w
  4397  0622                     u995:	
  4398  0622  1C03               	skipc
  4399  0623  2E33               	goto	l1562
  4400  0624  084D               	movf	___aldiv@divisor,w
  4401  0625  02D1               	subwf	___aldiv@dividend,f
  4402  0626  084E               	movf	___aldiv@divisor+1,w
  4403  0627  1C03               	skipc
  4404  0628  0F4E               	incfsz	___aldiv@divisor+1,w
  4405  0629  02D2               	subwf	___aldiv@dividend+1,f
  4406  062A  084F               	movf	___aldiv@divisor+2,w
  4407  062B  1C03               	skipc
  4408  062C  0F4F               	incfsz	___aldiv@divisor+2,w
  4409  062D  02D3               	subwf	___aldiv@dividend+2,f
  4410  062E  0850               	movf	___aldiv@divisor+3,w
  4411  062F  1C03               	skipc
  4412  0630  0F50               	incfsz	___aldiv@divisor+3,w
  4413  0631  02D4               	subwf	___aldiv@dividend+3,f
  4414  0632  1458               	bsf	___aldiv@quotient,0
  4415  0633                     l1562:	
  4416  0633  3001               	movlw	1
  4417  0634                     u1005:	
  4418  0634  1003               	clrc
  4419  0635  0CD0               	rrf	___aldiv@divisor+3,f
  4420  0636  0CCF               	rrf	___aldiv@divisor+2,f
  4421  0637  0CCE               	rrf	___aldiv@divisor+1,f
  4422  0638  0CCD               	rrf	___aldiv@divisor,f
  4423  0639  3EFF               	addlw	-1
  4424  063A  1D03               	skipz
  4425  063B  2E34               	goto	u1005
  4426  063C  3001               	movlw	1
  4427  063D  02D6               	subwf	___aldiv@counter,f
  4428  063E  1D03               	btfss	3,2
  4429  063F  2E0B               	goto	l1554
  4430  0640                     l1566:	
  4431  0640  0857               	movf	___aldiv@sign,w
  4432  0641  1903               	btfsc	3,2
  4433  0642  2E4E               	goto	l1570
  4434  0643  09D8               	comf	___aldiv@quotient,f
  4435  0644  09D9               	comf	___aldiv@quotient+1,f
  4436  0645  09DA               	comf	___aldiv@quotient+2,f
  4437  0646  09DB               	comf	___aldiv@quotient+3,f
  4438  0647  0AD8               	incf	___aldiv@quotient,f
  4439  0648  1903               	skipnz
  4440  0649  0AD9               	incf	___aldiv@quotient+1,f
  4441  064A  1903               	skipnz
  4442  064B  0ADA               	incf	___aldiv@quotient+2,f
  4443  064C  1903               	skipnz
  4444  064D  0ADB               	incf	___aldiv@quotient+3,f
  4445  064E                     l1570:	
  4446  064E  085B               	movf	___aldiv@quotient+3,w
  4447  064F  00D0               	movwf	?___aldiv+3
  4448  0650  085A               	movf	___aldiv@quotient+2,w
  4449  0651  00CF               	movwf	?___aldiv+2
  4450  0652  0859               	movf	___aldiv@quotient+1,w
  4451  0653  00CE               	movwf	?___aldiv+1
  4452  0654  0858               	movf	___aldiv@quotient,w
  4453  0655  00CD               	movwf	?___aldiv
  4454  0656  0008               	return
  4455  0657                     __end_of___aldiv:	
  4456                           
  4457                           	psect	text22
  4458  0747                     __ptext22:	
  4459 ;; *************** function _isr *****************
  4460 ;; Defined at:
  4461 ;;		line 31 in file "main.c"
  4462 ;; Parameters:    Size  Location     Type
  4463 ;;		None
  4464 ;; Auto vars:     Size  Location     Type
  4465 ;;		None
  4466 ;; Return value:  Size  Location     Type
  4467 ;;                  1    wreg      void 
  4468 ;; Registers used:
  4469 ;;		wreg, status,2, status,0, pclath, cstack
  4470 ;; Tracked objects:
  4471 ;;		On entry : 0/0
  4472 ;;		On exit  : 0/0
  4473 ;;		Unchanged: 0/0
  4474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4475 ;;      Params:         0       0       0       0       0
  4476 ;;      Locals:         0       0       0       0       0
  4477 ;;      Temps:          5       0       0       0       0
  4478 ;;      Totals:         5       0       0       0       0
  4479 ;;Total ram usage:        5 bytes
  4480 ;; Hardware stack levels used:    1
  4481 ;; Hardware stack levels required when called:    1
  4482 ;; This function calls:
  4483 ;;		___lwmod
  4484 ;; This function is called by:
  4485 ;;		Interrupt level 1
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489                           
  4490                           ;psect for function _isr
  4491  0747                     _isr:	
  4492                           
  4493                           ;main.c: 33: if(TMR0IF){
  4494  0747  1D0B               	btfss	11,2	;volatile
  4495  0748  2F82               	goto	i1l113
  4496                           
  4497                           ;main.c: 34: TMR0IF = 0;
  4498  0749  110B               	bcf	11,2	;volatile
  4499                           
  4500                           ;main.c: 35: TMR0 = 100;
  4501  074A  3064               	movlw	100
  4502  074B  0081               	movwf	1	;volatile
  4503                           
  4504                           ;main.c: 38: if(time_count % 1 == 0) {
  4505  074C  3001               	movlw	1
  4506  074D  07BA               	addwf	_time_count,f	;volatile
  4507  074E  1803               	skipnc
  4508  074F  0ABB               	incf	_time_count+1,f	;volatile
  4509  0750  3000               	movlw	0
  4510  0751  07BB               	addwf	_time_count+1,f	;volatile
  4511                           
  4512                           ;main.c: 40: RC2 = 1; __nop(); RC2 = 0;;
  4513  0752  1507               	bsf	7,2	;volatile
  4514  0753  0000               	nop
  4515  0754  1283               	bcf	3,5	;RP0=0, select bank0
  4516  0755  1303               	bcf	3,6	;RP1=0, select bank0
  4517  0756  1107               	bcf	7,2	;volatile
  4518                           
  4519                           ;main.c: 41: }
  4520                           ;main.c: 43: if(time_count % 1000 == 0){
  4521  0757  30E8               	movlw	232
  4522  0758  00F0               	movwf	___lwmod@divisor
  4523  0759  3003               	movlw	3
  4524  075A  00F1               	movwf	___lwmod@divisor+1
  4525  075B  083B               	movf	_time_count+1,w	;volatile
  4526  075C  00F3               	movwf	___lwmod@dividend+1
  4527  075D  083A               	movf	_time_count,w	;volatile
  4528  075E  00F2               	movwf	___lwmod@dividend
  4529  075F  120A  158A  2790  120A  118A  	fcall	___lwmod
  4530  0764  0870               	movf	?___lwmod,w
  4531  0765  0471               	iorwf	?___lwmod+1,w
  4532  0766  1D03               	btfss	3,2
  4533  0767  2F6E               	goto	i1l1966
  4534                           
  4535                           ;main.c: 44: RB4 = !RB4;
  4536  0768  3010               	movlw	16
  4537  0769  1283               	bcf	3,5	;RP0=0, select bank0
  4538  076A  1303               	bcf	3,6	;RP1=0, select bank0
  4539  076B  0686               	xorwf	6,f
  4540                           
  4541                           ;main.c: 46: time_count = 0;
  4542  076C  01BA               	clrf	_time_count	;volatile
  4543  076D  01BB               	clrf	_time_count+1	;volatile
  4544  076E                     i1l1966:	
  4545                           
  4546                           ;main.c: 47: }
  4547                           ;main.c: 48: if (!RB0 == 1)
  4548  076E  1283               	bcf	3,5	;RP0=0, select bank0
  4549  076F  1303               	bcf	3,6	;RP1=0, select bank0
  4550  0770  1806               	btfsc	6,0	;volatile
  4551  0771  2F76               	goto	i1l1970
  4552                           
  4553                           ;main.c: 49: PB8Counter++;
  4554  0772  3001               	movlw	1
  4555  0773  00F6               	movwf	??_isr
  4556  0774  0876               	movf	??_isr,w
  4557  0775  07C0               	addwf	_PB8Counter,f
  4558  0776                     i1l1970:	
  4559                           
  4560                           ;main.c: 50: if (!RB1 == 1)
  4561  0776  1886               	btfsc	6,1	;volatile
  4562  0777  2F7C               	goto	i1l1974
  4563                           
  4564                           ;main.c: 51: PB7Counter++;
  4565  0778  3001               	movlw	1
  4566  0779  00F6               	movwf	??_isr
  4567  077A  0876               	movf	??_isr,w
  4568  077B  07BF               	addwf	_PB7Counter,f
  4569  077C                     i1l1974:	
  4570                           
  4571                           ;main.c: 52: if (!RB2 == 1)
  4572  077C  1906               	btfsc	6,2	;volatile
  4573  077D  2F82               	goto	i1l113
  4574                           
  4575                           ;main.c: 53: PB6Counter++;
  4576  077E  3001               	movlw	1
  4577  077F  00F6               	movwf	??_isr
  4578  0780  0876               	movf	??_isr,w
  4579  0781  07BE               	addwf	_PB6Counter,f
  4580  0782                     i1l113:	
  4581  0782  087A               	movf	??_isr+4,w
  4582  0783  00FF               	movwf	127
  4583  0784  0879               	movf	??_isr+3,w
  4584  0785  008A               	movwf	10
  4585  0786  0878               	movf	??_isr+2,w
  4586  0787  0084               	movwf	4
  4587  0788  0E77               	swapf	(??_isr+1)^(0+-128),w
  4588  0789  0083               	movwf	3
  4589  078A  0EFE               	swapf	126,f
  4590  078B  0E7E               	swapf	126,w
  4591  078C  0009               	retfie
  4592  078D                     __end_of_isr:	
  4593                           
  4594                           	psect	intentry
  4595  0004                     __pintentry:	
  4596                           ;incstack = 0
  4597                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  4598                           
  4599  0004                     interrupt_function:	
  4600  007E                     saved_w	set	btemp
  4601  0004  00FE               	movwf	btemp
  4602  0005  0E03               	swapf	3,w
  4603  0006  00F7               	movwf	??_isr+1
  4604  0007  0804               	movf	4,w
  4605  0008  00F8               	movwf	??_isr+2
  4606  0009  080A               	movf	10,w
  4607  000A  00F9               	movwf	??_isr+3
  4608  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4609  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4610  000D  087F               	movf	btemp+1,w
  4611  000E  00FA               	movwf	??_isr+4
  4612  000F  120A  118A  2F47   	ljmp	_isr
  4613                           
  4614                           	psect	text23
  4615  0F90                     __ptext23:	
  4616 ;; *************** function ___lwmod *****************
  4617 ;; Defined at:
  4618 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;  divisor         2    0[COMMON] unsigned int 
  4621 ;;  dividend        2    2[COMMON] unsigned int 
  4622 ;; Auto vars:     Size  Location     Type
  4623 ;;  counter         1    5[COMMON] unsigned char 
  4624 ;; Return value:  Size  Location     Type
  4625 ;;                  2    0[COMMON] unsigned int 
  4626 ;; Registers used:
  4627 ;;		wreg, status,2, status,0
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4633 ;;      Params:         4       0       0       0       0
  4634 ;;      Locals:         1       0       0       0       0
  4635 ;;      Temps:          1       0       0       0       0
  4636 ;;      Totals:         6       0       0       0       0
  4637 ;;Total ram usage:        6 bytes
  4638 ;; Hardware stack levels used:    1
  4639 ;; This function calls:
  4640 ;;		Nothing
  4641 ;; This function is called by:
  4642 ;;		_isr
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           
  4647                           ;psect for function ___lwmod
  4648  0F90                     ___lwmod:	
  4649                           
  4650                           ;incstack = 0
  4651                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4652  0F90  0870               	movf	___lwmod@divisor,w
  4653  0F91  0471               	iorwf	___lwmod@divisor+1,w
  4654  0F92  1903               	btfsc	3,2
  4655  0F93  2FBD               	goto	i1l1944
  4656  0F94  01F5               	clrf	___lwmod@counter
  4657  0F95  0AF5               	incf	___lwmod@counter,f
  4658  0F96                     i1l1934:	
  4659  0F96  1BF1               	btfsc	___lwmod@divisor+1,7
  4660  0F97  2FA4               	goto	i1l1936
  4661  0F98  3001               	movlw	1
  4662  0F99                     u150_25:	
  4663  0F99  1003               	clrc
  4664  0F9A  0DF0               	rlf	___lwmod@divisor,f
  4665  0F9B  0DF1               	rlf	___lwmod@divisor+1,f
  4666  0F9C  3EFF               	addlw	-1
  4667  0F9D  1D03               	skipz
  4668  0F9E  2F99               	goto	u150_25
  4669  0F9F  3001               	movlw	1
  4670  0FA0  00F4               	movwf	??___lwmod
  4671  0FA1  0874               	movf	??___lwmod,w
  4672  0FA2  07F5               	addwf	___lwmod@counter,f
  4673  0FA3  2F96               	goto	i1l1934
  4674  0FA4                     i1l1936:	
  4675  0FA4  0871               	movf	___lwmod@divisor+1,w
  4676  0FA5  0273               	subwf	___lwmod@dividend+1,w
  4677  0FA6  1D03               	skipz
  4678  0FA7  2FAA               	goto	u152_25
  4679  0FA8  0870               	movf	___lwmod@divisor,w
  4680  0FA9  0272               	subwf	___lwmod@dividend,w
  4681  0FAA                     u152_25:	
  4682  0FAA  1C03               	skipc
  4683  0FAB  2FB2               	goto	i1l1940
  4684  0FAC  0870               	movf	___lwmod@divisor,w
  4685  0FAD  02F2               	subwf	___lwmod@dividend,f
  4686  0FAE  0871               	movf	___lwmod@divisor+1,w
  4687  0FAF  1C03               	skipc
  4688  0FB0  03F3               	decf	___lwmod@dividend+1,f
  4689  0FB1  02F3               	subwf	___lwmod@dividend+1,f
  4690  0FB2                     i1l1940:	
  4691  0FB2  3001               	movlw	1
  4692  0FB3                     u153_25:	
  4693  0FB3  1003               	clrc
  4694  0FB4  0CF1               	rrf	___lwmod@divisor+1,f
  4695  0FB5  0CF0               	rrf	___lwmod@divisor,f
  4696  0FB6  3EFF               	addlw	-1
  4697  0FB7  1D03               	skipz
  4698  0FB8  2FB3               	goto	u153_25
  4699  0FB9  3001               	movlw	1
  4700  0FBA  02F5               	subwf	___lwmod@counter,f
  4701  0FBB  1D03               	btfss	3,2
  4702  0FBC  2FA4               	goto	i1l1936
  4703  0FBD                     i1l1944:	
  4704  0FBD  0873               	movf	___lwmod@dividend+1,w
  4705  0FBE  00F1               	movwf	?___lwmod+1
  4706  0FBF  0872               	movf	___lwmod@dividend,w
  4707  0FC0  00F0               	movwf	?___lwmod
  4708  0FC1  0008               	return
  4709  0FC2                     __end_of___lwmod:	
  4710  007E                     btemp	set	126	;btemp
  4711  007E                     wtemp	set	126
  4712  007E                     wtemp0	set	126
  4713  0080                     wtemp1	set	128
  4714  0082                     wtemp2	set	130
  4715  0084                     wtemp3	set	132
  4716  0086                     wtemp4	set	134
  4717  0088                     wtemp5	set	136
  4718  007F                     wtemp6	set	127
  4719  007E                     ttemp	set	126
  4720  007E                     ttemp0	set	126
  4721  0081                     ttemp1	set	129
  4722  0084                     ttemp2	set	132
  4723  0087                     ttemp3	set	135
  4724  007F                     ttemp4	set	127
  4725  007E                     ltemp	set	126
  4726  007E                     ltemp0	set	126
  4727  0082                     ltemp1	set	130
  4728  0086                     ltemp2	set	134
  4729  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     35      76
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->___lwmod

Critical Paths under _main in BANK0

    _setupLCD->_lcdWriteControl
    _getDistTrav->_lcdWriteToDigitBCD
    _Drive->_ser_putch
    _ADCMain->_adcConvertMM
    _lcdWriteToDigitBCD->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl
    _adcConvertMM->___aldiv
    ___lwdiv->___wmul
    ___aldiv->___wmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    6643
                                             31 BANK0      4     4      0
                            _ADCMain
                              _Drive
                        _getDistTrav
                 _lcdWriteToDigitBCD
                            _moveCCW
                             _moveCW
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      30
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      22
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _moveCW                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _moveCCW                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _getDistTrav                                          2     2      0     636
                                             15 BANK0      2     2      0
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
                          _ser_getch
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _ser_getch                                            7     5      2      23
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (1) _Drive                                                8     0      8    1170
                                              4 BANK0      8     0      8
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            4     4      0      22
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _ADCMain                                              0     0      0    4194
                       _adcConvertMM
                             _getADC
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (1) _lcdWriteToDigitBCD                                  12    10      2     546
                                              3 BANK0     12    10      2
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (2) _lcdWriteData                                         3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _lcdSetCursor                                         1     1      0      45
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getADC                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _adcConvertMM                                        10     8      2    3603
                                             21 BANK0     10     8      2
                            ___aldiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1258
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     904
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     618
                                              6 BANK0     15     7      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  5     5      0     265
                                              6 COMMON     5     5      0
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCMain
     _adcConvertMM
       ___aldiv
         ___wmul (ARG)
       ___lwdiv
         ___wmul (ARG)
       ___wmul
     _getADC
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteToDigitBCD
       _lcdWriteData
   _Drive
     _ser_putch
   _getDistTrav
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteToDigitBCD
       _lcdWriteData
     _ser_getch
     _ser_putch
   _lcdWriteToDigitBCD
     _lcdWriteData
   _moveCCW
   _moveCW
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)
   ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     23      4C       5       95.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       E       1      100.0%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5A      12        0.0%
ABS                  0      0      5A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Sep 05 14:48:15 2016

                   __CFG_CP$OFF 0000                              _GO 00FA                              fsr 0004  
           ___wmul@multiplicand 0049                     Drive@speedH 004B                     Drive@speedL 004D  
                           l203 05AE                             l312 0F09                             l306 0EF3  
                           l430 0796                             l247 0E93                             l540 0F54  
                           l439 07D1                             l595 05DA                             _GIE 005F  
                           _RB0 0030                             _RB1 0031                             _RB2 0032  
                           _RB3 0033                             _RC2 003A                             _RB4 0034  
                           _RE0 0048                             _RE1 0049                             _RE2 004A  
                  __CFG_CPD$OFF 0000                             u905 0F55                             u915 0F5C  
                           u965 05FF                             u985 060D                             u995 0622  
                           _isr 0747                 __end_of_ADCMain 0F48                             fsr0 0004  
                           indf 0000                    __CFG_FOSC$HS 0000                  ??_lcdWriteData 0047  
                  __CFG_LVP$OFF 0000                            l2002 03E6                            l2020 0417  
                          l2012 03FA                            l2030 042F                            l2024 0428  
                          l2032 0445                            l2050 0494                            l2060 04AA  
                          l2070 04DE                            l2046 045F                            l2048 047F  
                          l1522 0F4C                            l2082 051B                            l1700 01E4  
                          l1620 0555                            l2076 0506                            l1630 0579  
                          l1552 05FB                            l1544 05EB                            l1712 0262  
                          l1632 0581                            l1624 0563                            l1570 064E  
                          l1562 0633                            l1554 060B                            l1730 031F  
                          l1706 0223                            l1642 05A1                            l1626 056B  
                          l1618 053F                            l1740 036A                            l1724 02E0  
                          l1636 058F                            l1812 06BB                            l1566 0640  
                          l1718 02A1                            l1662 07A6                            l1902 0723  
                          l1830 06C8                            l1822 06C4                            l1814 06C0  
                          l1592 0FF0                            l1584 0FCC                            l1736 035C  
                          l1664 07B0                            l1904 073D                            l1586 0FDA  
                          l1682 00FF                            l1666 07BA                            l1842 06D1  
                          l1834 06CA                            l1826 06C6                            l1818 06C2  
                          l1850 06F5                            l1596 0FFB                            l1676 0098  
                          l1668 07C4                            l1844 06D8                            l1694 01A5  
                          l1870 070B                            l1838 06CC                            l1688 0166  
                          l1848 06DB                            l1890 0715                            l1882 0711  
                          l1874 070D                            l1866 0709                            l1894 071C  
                          l1886 0713                            l1878 070F                            l1898 0720  
                          ?_isr 0070                            u1005 0634                            u1210 0076  
                          u1211 0077                            u1212 007C                            u1045 0FCF  
                          u1213 007D                            u1240 00DD                            u1065 0FDB  
                          u1241 00DE                            u1242 00E3                            u1075 0FE7  
                          u1243 00E4                            u1085 0FF1                            u1270 0144  
                          u1271 0145                            u1272 014A                            u1273 014B  
                          u1625 03F8                            u1635 040C                            u1725 04A8  
                          u1645 0426                            u1735 04DC                            u1655 0435  
                          u1807 03D3                            u1745 0504                            u1817 04C8  
                          u1907 0EBC                            u1827 0ED5                            u1755 0519  
                          u1837 06F9                            u1847 0741                            u1695 046A  
                          u1857 0669                            u1777 0375                            u1867 067D  
                          u1787 03A9                            _PEIE 005E                            u1877 0F1A  
                          u1797 03BE                            u1887 0F01                            u1897 0EA9  
                          _RCIF 0065                            _TMR0 0001                            _TRMT 04C1  
                  __CFG_WRT$OFF 0000                            _radH 002E                            _radL 0030  
                          _main 036D                            _loop 002A                            btemp 007E  
                          ltemp 007E                            start 0012                            ttemp 007E  
                          wtemp 007E                           ??_isr 0076                 __end_of___aldiv 0657  
                         ?_main 0070                   __CFG_WDTE$OFF 0000                 __end_of___lwdiv 1000  
                         i1l113 0782                 __end_of___lwmod 0FC2                   _totalDistTrav 003C  
                         _RCREG 001A                           _RCSTA 0018                           _SPBRG 0099  
                         _PORTA 0005                           _PORTC 0007                           _PORTD 0008  
                         _PORTE 0009                           _TRISA 0085                           _TRISB 0086  
                         _TRISC 0087                           _TRISD 0088                           _TRISE 0089  
                         _SSPIF 0063                           _TXREG 0019                           _TXSTA 0098  
                         _Drive 0F6B      __end_of_lcdWriteToDigitBCD 05C8                           _count 0042  
               __end_of_moveCCW 0747                  __pbitbssCOMMON 03D8                  __CFG_BOREN$OFF 0000  
                         pclath 000A                           ltemp0 007E                           ltemp1 0082  
                         ltemp2 0086                           ltemp3 0080                           ttemp0 007E  
                         ttemp1 0081                           ttemp2 0084                           ttemp3 0087  
                         ttemp4 007F                           status 0003                           wtemp0 007E  
                         wtemp1 0080                           wtemp2 0082                           wtemp3 0084  
                         wtemp4 0086                           wtemp5 0088                           wtemp6 007F  
               __initialization 0015                    __end_of_main 0531                       ??_ADCMain 0066  
      __size_of_lcdWriteControl 0014            __size_of_getDistTrav 005D                          ??_main 0066  
          __end_of_lcdSetCursor 0E7D                          ?_Drive 004B                          _ADCON0 001F  
                        _ADCON1 009F                          _ADRESH 001E                          _ADRESL 009E  
                        i1l1940 0FB2                          i1l1934 0F96                          i1l1936 0FA4  
                        i1l1944 0FBD                          i1l1970 0776                          i1l1974 077C  
                        i1l1966 076E                          u150_25 0F99                          u152_25 0FAA  
                        u153_25 0FB3                          _TMR0IE 005D                          _TMR0IF 005A  
                        _SSPCON 0014                          _SSPBUF 0013                  __CFG_PWRTE$OFF 0000  
                        _adcRAW 0022                       ??___aldiv 0055                          ___wmul 0F48  
                        _getADC 078D            __end_of_lcdWriteData 0EAE                       ??___lwdiv 0051  
                     ??___lwmod 0074                          _moveCW 06B4                          _speedH 0032  
                        _speedL 0034                          _rxbyte 007D                __end_of_ser_init 0E8C  
              __end_of_setupADC 0ED8                       ??_moveCCW 0047                __end_of_setupLCD 07FB  
              __end_of_setupSPI 0EF0                          saved_w 007E                      _adcClosest 006A  
       __end_of__initialization 002B                   __end_of_Drive 0F90                  __pcstackCOMMON 0070  
                  __pidataBANK0 07FB                         ??_Drive 0053               ??_lcdWriteControl 0047  
                    __pbssBANK0 0020             lcdSetCursor@address 004A                      __pmaintext 036D  
                       ?___wmul 0047                         ?_getADC 0070                      __pintentry 0004  
         __size_of_lcdSetCursor 0009                         _ADCMain 0F28                         ?_moveCW 0070  
            __size_of_ser_getch 001F              __size_of_ser_putch 0019                         _SSPSTAT 0094  
         __size_of_lcdWriteData 0013                    _lcdSetCursor 0E74              _lcdWriteToDigitBCD 0531  
                     ?_ser_init 0070                       ?_setupADC 0070                       ?_setupLCD 0070  
                     ?_setupSPI 0070                         ___aldiv 05C8                 __size_of___wmul 0023  
               __size_of_getADC 0045                         ___lwdiv 0FC2                         ___lwmod 0F90  
           ?_lcdWriteToDigitBCD 004A                       _FLAG_PLAY 03D9                         _degrees 0026  
               __size_of_moveCW 004B                         __ptext1 0E8C                         __ptext2 0ED8  
                       __ptext3 07D2                         __ptext4 0EC2                         __ptext5 0E7D  
                       __ptext6 06B4                         __ptext7 06FF                         __ptext8 0657  
                       __ptext9 0F09                         _driving 03DA                         _current 0024  
                  __size_of_isr 0046                         _lowByte 002C                         _moveCCW 06FF  
              ___aldiv@dividend 0051                         clrloop0 0E6D                    _lcdWriteData 0E9B  
          end_of_initialization 002B            ??_lcdWriteToDigitBCD 004C               __end_of_ser_getch 0F28  
             __end_of_ser_putch 0F09                      ??_ser_init 0047                      ??_setupADC 0047  
                    ??_setupLCD 004A                      ??_setupSPI 0047                ___aldiv@quotient 0058  
                 ??_getDistTrav 0056                      _time_count 003A              adcConvertMM@adcRAW 005C  
                     Drive@radH 004F                       Drive@radL 0051                   ?_spi_transfer 0070  
               ser_getch@rxbyte 004C                   ?_adcConvertMM 005C                 _lcdWriteControl 0EAE  
                __end_of___wmul 0F6B                  __end_of_getADC 07D2                  __end_of_moveCW 06FF  
           __end_of_getDistTrav 06B4             start_initialization 0015                     __end_of_isr 078D  
                ??_spi_transfer 0047                  ??_adcConvertMM 005E                        ??___wmul 004B  
                      ??_getADC 0047                     __pdataBANK0 006A                        ?_ADCMain 0070  
                      ??_moveCW 0047                    _negativeFlag 0043                     _FLAG_1000MS 03D8  
                   __pbssCOMMON 007C                       ___latbits 0002                   __pcstackBANK0 0047  
       __end_of_lcdWriteControl 0EC2                ___lwdiv@dividend 004F                        ?___aldiv 004D  
             __size_of_ser_init 000F                        ?___lwdiv 004D                        ?___lwmod 0070  
                   _getDistTrav 0657               __size_of_setupADC 0016               __size_of_setupLCD 0029  
             __size_of_setupSPI 0018                        ?_moveCCW 0070                  __size_of_Drive 0025  
              ___lwdiv@quotient 0052                 main@controlByte 0069         lcdWriteControl@databyte 0049  
               ___aldiv@divisor 004D               interrupt_function 0004                 ___aldiv@counter 0056  
                ___wmul@product 004B                      ser_putch@c 004A                       clear_ram0 0E6C  
                     _ser_getch 0F09                       _ser_putch 0EF0                       _stepCount 0044  
              __size_of_ADCMain 0020            __end_of_spi_transfer 0E9B               ___wmul@multiplier 0047  
              spi_transfer@data 0049                spi_transfer@temp 0048            __end_of_adcConvertMM 036D  
                   _controlByte 0041                        _Distance 0020            lcdWriteData@databyte 0049  
   __size_of_lcdWriteToDigitBCD 0097                      ?_ser_getch 0047                ?_lcdWriteControl 0070  
                    ?_ser_putch 0070                __size_of___aldiv 008F                __size_of___lwdiv 003E  
              __size_of___lwmod 0032                     _currentStep 007C  lcdWriteToDigitBCD@TenThouDigit 0052  
               ___lwdiv@divisor 004D                __size_of_moveCCW 0048                 ___lwdiv@counter 0054  
                      __ptext10 0F6B                        __ptext11 0EF0                        __ptext20 0FC2  
                      __ptext12 0F28                        __ptext21 05C8                        __ptext13 0531  
                      __ptext22 0747                        __ptext14 0E9B                        __ptext23 0F90  
                      __ptext15 0E74                        __ptext16 0EAE                        __ptext17 078D  
                      __ptext18 002F                        __ptext19 0F48                        _highByte 0045  
                      _distTrav 0028                   __size_of_main 01C4                        _ser_init 0E7D  
                    _PB6Counter 003E                        _setupADC 0EC2                        _setupLCD 07D2  
                      _setupSPI 0ED8                      _PB7Counter 003F     lcdWriteToDigitBCD@HunsDigit 004E  
                    _PB8Counter 0040     lcdWriteToDigitBCD@OnesDigit 0054     lcdWriteToDigitBCD@TensDigit 004C  
   lcdWriteToDigitBCD@ThouDigit 0050                        intlevel1 0000                ___lwmod@dividend 0072  
                 ?_lcdSetCursor 0070                     ??_ser_getch 0049                     ??_ser_putch 0047  
         __size_of_spi_transfer 000F                    ?_getDistTrav 0070           __size_of_adcConvertMM 033E  
                    _OPTION_REG 0081                 ___lwmod@divisor 0070                 ___lwmod@counter 0075  
                  ___aldiv@sign 0057                   ?_lcdWriteData 0070          lcdWriteToDigitBCD@data 004A  
                  _spi_transfer 0E8C                  ??_lcdSetCursor 004A                    _stepCountNeg 0038  
                   _stepClosest 0036                    _adcConvertMM 002F  
