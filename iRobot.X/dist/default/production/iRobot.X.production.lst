

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Wed Sep 07 17:08:16 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     	;# 
    42  0001                     	;# 
    43  0002                     	;# 
    44  0003                     	;# 
    45  0004                     	;# 
    46  0005                     	;# 
    47  0006                     	;# 
    48  0007                     	;# 
    49  0008                     	;# 
    50  0009                     	;# 
    51  000A                     	;# 
    52  000B                     	;# 
    53  000C                     	;# 
    54  000D                     	;# 
    55  000E                     	;# 
    56  000E                     	;# 
    57  000F                     	;# 
    58  0010                     	;# 
    59  0011                     	;# 
    60  0012                     	;# 
    61  0013                     	;# 
    62  0014                     	;# 
    63  0015                     	;# 
    64  0015                     	;# 
    65  0016                     	;# 
    66  0017                     	;# 
    67  0018                     	;# 
    68  0019                     	;# 
    69  001A                     	;# 
    70  001B                     	;# 
    71  001B                     	;# 
    72  001C                     	;# 
    73  001D                     	;# 
    74  001E                     	;# 
    75  001F                     	;# 
    76  0081                     	;# 
    77  0085                     	;# 
    78  0086                     	;# 
    79  0087                     	;# 
    80  0088                     	;# 
    81  0089                     	;# 
    82  008C                     	;# 
    83  008D                     	;# 
    84  008E                     	;# 
    85  0091                     	;# 
    86  0092                     	;# 
    87  0093                     	;# 
    88  0094                     	;# 
    89  0098                     	;# 
    90  0099                     	;# 
    91  009C                     	;# 
    92  009D                     	;# 
    93  009E                     	;# 
    94  009F                     	;# 
    95  010C                     	;# 
    96  010D                     	;# 
    97  010E                     	;# 
    98  010F                     	;# 
    99  018C                     	;# 
   100  018D                     	;# 
   101  0000                     	;# 
   102  0001                     	;# 
   103  0002                     	;# 
   104  0003                     	;# 
   105  0004                     	;# 
   106  0005                     	;# 
   107  0006                     	;# 
   108  0007                     	;# 
   109  0008                     	;# 
   110  0009                     	;# 
   111  000A                     	;# 
   112  000B                     	;# 
   113  000C                     	;# 
   114  000D                     	;# 
   115  000E                     	;# 
   116  000E                     	;# 
   117  000F                     	;# 
   118  0010                     	;# 
   119  0011                     	;# 
   120  0012                     	;# 
   121  0013                     	;# 
   122  0014                     	;# 
   123  0015                     	;# 
   124  0015                     	;# 
   125  0016                     	;# 
   126  0017                     	;# 
   127  0018                     	;# 
   128  0019                     	;# 
   129  001A                     	;# 
   130  001B                     	;# 
   131  001B                     	;# 
   132  001C                     	;# 
   133  001D                     	;# 
   134  001E                     	;# 
   135  001F                     	;# 
   136  0081                     	;# 
   137  0085                     	;# 
   138  0086                     	;# 
   139  0087                     	;# 
   140  0088                     	;# 
   141  0089                     	;# 
   142  008C                     	;# 
   143  008D                     	;# 
   144  008E                     	;# 
   145  0091                     	;# 
   146  0092                     	;# 
   147  0093                     	;# 
   148  0094                     	;# 
   149  0098                     	;# 
   150  0099                     	;# 
   151  009C                     	;# 
   152  009D                     	;# 
   153  009E                     	;# 
   154  009F                     	;# 
   155  010C                     	;# 
   156  010D                     	;# 
   157  010E                     	;# 
   158  010F                     	;# 
   159  018C                     	;# 
   160  018D                     	;# 
   161  0000                     	;# 
   162  0001                     	;# 
   163  0002                     	;# 
   164  0003                     	;# 
   165  0004                     	;# 
   166  0005                     	;# 
   167  0006                     	;# 
   168  0007                     	;# 
   169  0008                     	;# 
   170  0009                     	;# 
   171  000A                     	;# 
   172  000B                     	;# 
   173  000C                     	;# 
   174  000D                     	;# 
   175  000E                     	;# 
   176  000E                     	;# 
   177  000F                     	;# 
   178  0010                     	;# 
   179  0011                     	;# 
   180  0012                     	;# 
   181  0013                     	;# 
   182  0014                     	;# 
   183  0015                     	;# 
   184  0015                     	;# 
   185  0016                     	;# 
   186  0017                     	;# 
   187  0018                     	;# 
   188  0019                     	;# 
   189  001A                     	;# 
   190  001B                     	;# 
   191  001B                     	;# 
   192  001C                     	;# 
   193  001D                     	;# 
   194  001E                     	;# 
   195  001F                     	;# 
   196  0081                     	;# 
   197  0085                     	;# 
   198  0086                     	;# 
   199  0087                     	;# 
   200  0088                     	;# 
   201  0089                     	;# 
   202  008C                     	;# 
   203  008D                     	;# 
   204  008E                     	;# 
   205  0091                     	;# 
   206  0092                     	;# 
   207  0093                     	;# 
   208  0094                     	;# 
   209  0098                     	;# 
   210  0099                     	;# 
   211  009C                     	;# 
   212  009D                     	;# 
   213  009E                     	;# 
   214  009F                     	;# 
   215  010C                     	;# 
   216  010D                     	;# 
   217  010E                     	;# 
   218  010F                     	;# 
   219  018C                     	;# 
   220  018D                     	;# 
   221  0000                     	;# 
   222  0001                     	;# 
   223  0002                     	;# 
   224  0003                     	;# 
   225  0004                     	;# 
   226  0005                     	;# 
   227  0006                     	;# 
   228  0007                     	;# 
   229  0008                     	;# 
   230  0009                     	;# 
   231  000A                     	;# 
   232  000B                     	;# 
   233  000C                     	;# 
   234  000D                     	;# 
   235  000E                     	;# 
   236  000E                     	;# 
   237  000F                     	;# 
   238  0010                     	;# 
   239  0011                     	;# 
   240  0012                     	;# 
   241  0013                     	;# 
   242  0014                     	;# 
   243  0015                     	;# 
   244  0015                     	;# 
   245  0016                     	;# 
   246  0017                     	;# 
   247  0018                     	;# 
   248  0019                     	;# 
   249  001A                     	;# 
   250  001B                     	;# 
   251  001B                     	;# 
   252  001C                     	;# 
   253  001D                     	;# 
   254  001E                     	;# 
   255  001F                     	;# 
   256  0081                     	;# 
   257  0085                     	;# 
   258  0086                     	;# 
   259  0087                     	;# 
   260  0088                     	;# 
   261  0089                     	;# 
   262  008C                     	;# 
   263  008D                     	;# 
   264  008E                     	;# 
   265  0091                     	;# 
   266  0092                     	;# 
   267  0093                     	;# 
   268  0094                     	;# 
   269  0098                     	;# 
   270  0099                     	;# 
   271  009C                     	;# 
   272  009D                     	;# 
   273  009E                     	;# 
   274  009F                     	;# 
   275  010C                     	;# 
   276  010D                     	;# 
   277  010E                     	;# 
   278  010F                     	;# 
   279  018C                     	;# 
   280  018D                     	;# 
   281  0000                     	;# 
   282  0001                     	;# 
   283  0002                     	;# 
   284  0003                     	;# 
   285  0004                     	;# 
   286  0005                     	;# 
   287  0006                     	;# 
   288  0007                     	;# 
   289  0008                     	;# 
   290  0009                     	;# 
   291  000A                     	;# 
   292  000B                     	;# 
   293  000C                     	;# 
   294  000D                     	;# 
   295  000E                     	;# 
   296  000E                     	;# 
   297  000F                     	;# 
   298  0010                     	;# 
   299  0011                     	;# 
   300  0012                     	;# 
   301  0013                     	;# 
   302  0014                     	;# 
   303  0015                     	;# 
   304  0015                     	;# 
   305  0016                     	;# 
   306  0017                     	;# 
   307  0018                     	;# 
   308  0019                     	;# 
   309  001A                     	;# 
   310  001B                     	;# 
   311  001B                     	;# 
   312  001C                     	;# 
   313  001D                     	;# 
   314  001E                     	;# 
   315  001F                     	;# 
   316  0081                     	;# 
   317  0085                     	;# 
   318  0086                     	;# 
   319  0087                     	;# 
   320  0088                     	;# 
   321  0089                     	;# 
   322  008C                     	;# 
   323  008D                     	;# 
   324  008E                     	;# 
   325  0091                     	;# 
   326  0092                     	;# 
   327  0093                     	;# 
   328  0094                     	;# 
   329  0098                     	;# 
   330  0099                     	;# 
   331  009C                     	;# 
   332  009D                     	;# 
   333  009E                     	;# 
   334  009F                     	;# 
   335  010C                     	;# 
   336  010D                     	;# 
   337  010E                     	;# 
   338  010F                     	;# 
   339  018C                     	;# 
   340  018D                     	;# 
   341  0000                     	;# 
   342  0001                     	;# 
   343  0002                     	;# 
   344  0003                     	;# 
   345  0004                     	;# 
   346  0005                     	;# 
   347  0006                     	;# 
   348  0007                     	;# 
   349  0008                     	;# 
   350  0009                     	;# 
   351  000A                     	;# 
   352  000B                     	;# 
   353  000C                     	;# 
   354  000D                     	;# 
   355  000E                     	;# 
   356  000E                     	;# 
   357  000F                     	;# 
   358  0010                     	;# 
   359  0011                     	;# 
   360  0012                     	;# 
   361  0013                     	;# 
   362  0014                     	;# 
   363  0015                     	;# 
   364  0015                     	;# 
   365  0016                     	;# 
   366  0017                     	;# 
   367  0018                     	;# 
   368  0019                     	;# 
   369  001A                     	;# 
   370  001B                     	;# 
   371  001B                     	;# 
   372  001C                     	;# 
   373  001D                     	;# 
   374  001E                     	;# 
   375  001F                     	;# 
   376  0081                     	;# 
   377  0085                     	;# 
   378  0086                     	;# 
   379  0087                     	;# 
   380  0088                     	;# 
   381  0089                     	;# 
   382  008C                     	;# 
   383  008D                     	;# 
   384  008E                     	;# 
   385  0091                     	;# 
   386  0092                     	;# 
   387  0093                     	;# 
   388  0094                     	;# 
   389  0098                     	;# 
   390  0099                     	;# 
   391  009C                     	;# 
   392  009D                     	;# 
   393  009E                     	;# 
   394  009F                     	;# 
   395  010C                     	;# 
   396  010D                     	;# 
   397  010E                     	;# 
   398  010F                     	;# 
   399  018C                     	;# 
   400  018D                     	;# 
   401                           
   402                           	psect	idataBANK0
   403  0D9C                     __pidataBANK0:	
   404                           
   405                           ;initializer for _adcClosest
   406  0D9C  34E8               	retlw	232
   407  0D9D  3403               	retlw	3
   408  001F                     _ADCON0	set	31
   409  0005                     _PORTA	set	5
   410  0007                     _PORTC	set	7
   411  0008                     _PORTD	set	8
   412  0009                     _PORTE	set	9
   413  001A                     _RCREG	set	26
   414  0018                     _RCSTA	set	24
   415  0013                     _SSPBUF	set	19
   416  0014                     _SSPCON	set	20
   417  0001                     _TMR0	set	1
   418  0019                     _TXREG	set	25
   419  001E                     _ADRESH	set	30
   420  005F                     _GIE	set	95
   421  00FA                     _GO	set	250
   422  005E                     _PEIE	set	94
   423  0030                     _RB0	set	48
   424  0031                     _RB1	set	49
   425  0032                     _RB2	set	50
   426  0034                     _RB4	set	52
   427  003A                     _RC2	set	58
   428  0065                     _RCIF	set	101
   429  0048                     _RE0	set	72
   430  0049                     _RE1	set	73
   431  004A                     _RE2	set	74
   432  0063                     _SSPIF	set	99
   433  005D                     _TMR0IE	set	93
   434  005A                     _TMR0IF	set	90
   435  009F                     _ADCON1	set	159
   436  009E                     _ADRESL	set	158
   437  0081                     _OPTION_REG	set	129
   438  0099                     _SPBRG	set	153
   439  0094                     _SSPSTAT	set	148
   440  0085                     _TRISA	set	133
   441  0086                     _TRISB	set	134
   442  0087                     _TRISC	set	135
   443  0088                     _TRISD	set	136
   444  0089                     _TRISE	set	137
   445  0098                     _TXSTA	set	152
   446  04C1                     _TRMT	set	1217
   447                           
   448                           ; #config settings
   449  0000                     
   450                           	psect	cinit
   451  0015                     start_initialization:	
   452  0015                     __initialization:	
   453                           
   454                           ; Initialize objects allocated to BANK0
   455  0015  120A  158A  259C  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   456  001A  00ED               	movwf	__pdataBANK0& (0+127)
   457  001B  120A  158A  259D  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   458  0020  00EE               	movwf	(__pdataBANK0+1)& (0+127)
   459                           
   460                           ; Clear objects allocated to BANK0
   461  0021  1383               	bcf	3,7	;select IRP bank0
   462  0022  3020               	movlw	low __pbssBANK0
   463  0023  0084               	movwf	4
   464  0024  304A               	movlw	low (__pbssBANK0+42)
   465  0025  120A  158A  259E   	fcall	clear_ram0
   466                           
   467                           ; Clear objects allocated to BITBANK0
   468  0028  01EF               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   469  0029                     end_of_initialization:	
   470                           ;End of C runtime variable initialization code
   471                           
   472  0029                     __end_of__initialization:	
   473  0029  0183               	clrf	3
   474  002A  120A  118A  2B6B   	ljmp	_main	;jump to C main() function
   475                           
   476                           	psect	bitbssBANK0
   477  0378                     __pbitbssBANK0:	
   478  0378                     _FLAG_1000MS:	
   479  0378                     	ds	1
   480                           
   481                           	psect	bssBANK0
   482  0020                     __pbssBANK0:	
   483  0020                     _Distance:	
   484  0020                     	ds	2
   485  0022                     _adcRAW:	
   486  0022                     	ds	2
   487  0024                     _angleTurned:	
   488  0024                     	ds	2
   489  0026                     _degrees:	
   490  0026                     	ds	2
   491  0028                     _distTrav:	
   492  0028                     	ds	2
   493  002A                     _loop:	
   494  002A                     	ds	2
   495  002C                     _radH:	
   496  002C                     	ds	2
   497  002E                     _radL:	
   498  002E                     	ds	2
   499  0030                     _speedH:	
   500  0030                     	ds	2
   501  0032                     _speedL:	
   502  0032                     	ds	2
   503  0034                     _stepClosest:	
   504  0034                     	ds	2
   505  0036                     _stepCountNeg:	
   506  0036                     	ds	2
   507  0038                     _time_count:	
   508  0038                     	ds	2
   509  003A                     _totalDistTrav:	
   510  003A                     	ds	2
   511  003C                     _FLAG_AdvPlay:	
   512  003C                     	ds	1
   513  003D                     _FLAG_Advanced:	
   514  003D                     	ds	1
   515  003E                     _FLAG_Play:	
   516  003E                     	ds	1
   517  003F                     _PB6Counter:	
   518  003F                     	ds	1
   519  0040                     _PB7Counter:	
   520  0040                     	ds	1
   521  0041                     _PB8Counter:	
   522  0041                     	ds	1
   523  0042                     _controlByte:	
   524  0042                     	ds	1
   525  0043                     _count:	
   526  0043                     	ds	1
   527  0044                     _currentStep:	
   528  0044                     	ds	1
   529  0045                     _lowByte:	
   530  0045                     	ds	1
   531  0046                     _negativeFlag:	
   532  0046                     	ds	1
   533  0047                     _rxbyte:	
   534  0047                     	ds	1
   535  0048                     _stepCount:	
   536  0048                     	ds	1
   537  0049                     _highByte:	
   538  0049                     	ds	1
   539                           
   540                           	psect	dataBANK0
   541  006D                     __pdataBANK0:	
   542  006D                     _adcClosest:	
   543  006D                     	ds	2
   544                           
   545                           	psect	clrtext
   546  0D9E                     clear_ram0:	
   547                           ;	Called with FSR containing the base address, and
   548                           ;	W with the last address+1
   549                           
   550  0D9E  0064               	clrwdt	;clear the watchdog before getting into this loop
   551  0D9F                     clrloop0:	
   552  0D9F  0180               	clrf	0	;clear RAM location pointed to by FSR
   553  0DA0  0A84               	incf	4,f	;increment pointer
   554  0DA1  0604               	xorwf	4,w	;XOR with final address
   555  0DA2  1903               	btfsc	3,2	;have we reached the end yet?
   556  0DA3  3400               	retlw	0	;all done for this memory range, return
   557  0DA4  0604               	xorwf	4,w	;XOR again to restore value
   558  0DA5  2D9F               	goto	clrloop0	;do the next byte
   559                           
   560                           	psect	cstackCOMMON
   561  0070                     __pcstackCOMMON:	
   562  0070                     ?_setupSPI:	
   563  0070                     ?_ser_init:	
   564                           ; 1 bytes @ 0x0
   565                           
   566  0070                     ?_setupLCD:	
   567                           ; 1 bytes @ 0x0
   568                           
   569  0070                     ?_setupADC:	
   570                           ; 1 bytes @ 0x0
   571                           
   572  0070                     ?_spi_transfer:	
   573                           ; 1 bytes @ 0x0
   574                           
   575  0070                     ?_ser_putch:	
   576                           ; 1 bytes @ 0x0
   577                           
   578  0070                     ?_moveCW:	
   579                           ; 1 bytes @ 0x0
   580                           
   581  0070                     ?_ADCMain:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0070                     ?_moveCCW:	
   585                           ; 1 bytes @ 0x0
   586                           
   587  0070                     ?_lcdSetCursor:	
   588                           ; 1 bytes @ 0x0
   589                           
   590  0070                     ?_isr:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0070                     ?_main:	
   594                           ; 1 bytes @ 0x0
   595                           
   596  0070                     ?_lcdWriteControl:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0070                     ?_lcdWriteData:	
   600                           ; 1 bytes @ 0x0
   601                           
   602  0070                     ?_ser_getch:	
   603                           ; 1 bytes @ 0x0
   604                           
   605  0070                     ?i1_ser_putch:	
   606                           ; 1 bytes @ 0x0
   607                           
   608  0070                     ??i1_ser_putch:	
   609                           ; 1 bytes @ 0x0
   610                           
   611  0070                     ?i1_ser_getch:	
   612                           ; 1 bytes @ 0x0
   613                           
   614  0070                     ??i1_ser_getch:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  0070                     ?_getADC:	
   618                           ; 1 bytes @ 0x0
   619                           
   620  0070                     ?___lwmod:	
   621                           ; 2 bytes @ 0x0
   622                           
   623  0070                     i1ser_putch@c:	
   624                           ; 2 bytes @ 0x0
   625                           
   626  0070                     ___lwmod@divisor:	
   627                           ; 1 bytes @ 0x0
   628                           
   629                           
   630                           ; 2 bytes @ 0x0
   631  0070                     	ds	1
   632  0071                     i1ser_getch@rxbyte:	
   633                           
   634                           ; 1 bytes @ 0x1
   635  0071                     	ds	1
   636  0072                     ?i1_getSensorData:	
   637  0072                     i1getSensorData@bytes:	
   638                           ; 2 bytes @ 0x2
   639                           
   640  0072                     ___lwmod@dividend:	
   641                           ; 1 bytes @ 0x2
   642                           
   643                           
   644                           ; 2 bytes @ 0x2
   645  0072                     	ds	2
   646  0074                     ??___lwmod:	
   647  0074                     ??i1_getSensorData:	
   648                           ; 1 bytes @ 0x4
   649                           
   650                           
   651                           ; 1 bytes @ 0x4
   652  0074                     	ds	1
   653  0075                     ___lwmod@counter:	
   654                           
   655                           ; 1 bytes @ 0x5
   656  0075                     	ds	1
   657  0076                     i1getSensorData@packetID:	
   658                           
   659                           ; 1 bytes @ 0x6
   660  0076                     	ds	1
   661  0077                     i1getSensorData@sensor:	
   662                           
   663                           ; 2 bytes @ 0x7
   664  0077                     	ds	2
   665  0079                     ??_isr:	
   666                           
   667                           ; 1 bytes @ 0x9
   668  0079                     	ds	5
   669                           
   670                           	psect	cstackBANK0
   671  004A                     __pcstackBANK0:	
   672  004A                     ??_setupSPI:	
   673  004A                     ??_ser_init:	
   674                           ; 1 bytes @ 0x0
   675                           
   676  004A                     ??_setupADC:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  004A                     ??_spi_transfer:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  004A                     ??_ser_putch:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  004A                     ??_moveCW:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  004A                     ??_moveCCW:	
   689                           ; 1 bytes @ 0x0
   690                           
   691  004A                     ??_getADC:	
   692                           ; 1 bytes @ 0x0
   693                           
   694  004A                     ??_lcdWriteControl:	
   695                           ; 1 bytes @ 0x0
   696                           
   697  004A                     ??_lcdWriteData:	
   698                           ; 1 bytes @ 0x0
   699                           
   700  004A                     ??_ser_getch:	
   701                           ; 1 bytes @ 0x0
   702                           
   703  004A                     ?___wmul:	
   704                           ; 1 bytes @ 0x0
   705                           
   706  004A                     ser_putch@c:	
   707                           ; 2 bytes @ 0x0
   708                           
   709  004A                     ___wmul@multiplier:	
   710                           ; 1 bytes @ 0x0
   711                           
   712                           
   713                           ; 2 bytes @ 0x0
   714  004A                     	ds	1
   715  004B                     ?_Drive:	
   716  004B                     spi_transfer@temp:	
   717                           ; 1 bytes @ 0x1
   718                           
   719  004B                     ser_getch@rxbyte:	
   720                           ; 1 bytes @ 0x1
   721                           
   722  004B                     Drive@speedH:	
   723                           ; 1 bytes @ 0x1
   724                           
   725                           
   726                           ; 2 bytes @ 0x1
   727  004B                     	ds	1
   728  004C                     ?_getSensorData:	
   729  004C                     lcdWriteControl@databyte:	
   730                           ; 2 bytes @ 0x2
   731                           
   732  004C                     lcdWriteData@databyte:	
   733                           ; 1 bytes @ 0x2
   734                           
   735  004C                     spi_transfer@data:	
   736                           ; 1 bytes @ 0x2
   737                           
   738  004C                     getSensorData@bytes:	
   739                           ; 1 bytes @ 0x2
   740                           
   741  004C                     ___wmul@multiplicand:	
   742                           ; 1 bytes @ 0x2
   743                           
   744                           
   745                           ; 2 bytes @ 0x2
   746  004C                     	ds	1
   747  004D                     ??_setupLCD:	
   748  004D                     ?_lcdWriteToDigitBCD:	
   749                           ; 1 bytes @ 0x3
   750                           
   751  004D                     ??_lcdSetCursor:	
   752                           ; 1 bytes @ 0x3
   753                           
   754  004D                     lcdSetCursor@address:	
   755                           ; 1 bytes @ 0x3
   756                           
   757  004D                     lcdWriteToDigitBCD@data:	
   758                           ; 1 bytes @ 0x3
   759                           
   760  004D                     Drive@speedL:	
   761                           ; 2 bytes @ 0x3
   762                           
   763                           
   764                           ; 2 bytes @ 0x3
   765  004D                     	ds	1
   766  004E                     ??_getSensorData:	
   767  004E                     ??___wmul:	
   768                           ; 1 bytes @ 0x4
   769                           
   770  004E                     ___wmul@product:	
   771                           ; 1 bytes @ 0x4
   772                           
   773                           
   774                           ; 2 bytes @ 0x4
   775  004E                     	ds	1
   776  004F                     ??_lcdWriteToDigitBCD:	
   777  004F                     lcdWriteToDigitBCD@TensDigit:	
   778                           ; 1 bytes @ 0x5
   779                           
   780  004F                     Drive@radH:	
   781                           ; 2 bytes @ 0x5
   782                           
   783                           
   784                           ; 2 bytes @ 0x5
   785  004F                     	ds	1
   786  0050                     ?___lwdiv:	
   787  0050                     ?___aldiv:	
   788                           ; 2 bytes @ 0x6
   789                           
   790  0050                     getSensorData@sensor:	
   791                           ; 4 bytes @ 0x6
   792                           
   793  0050                     ___lwdiv@divisor:	
   794                           ; 2 bytes @ 0x6
   795                           
   796  0050                     ___aldiv@divisor:	
   797                           ; 2 bytes @ 0x6
   798                           
   799                           
   800                           ; 4 bytes @ 0x6
   801  0050                     	ds	1
   802  0051                     lcdWriteToDigitBCD@HunsDigit:	
   803  0051                     Drive@radL:	
   804                           ; 2 bytes @ 0x7
   805                           
   806                           
   807                           ; 2 bytes @ 0x7
   808  0051                     	ds	1
   809  0052                     getSensorData@packetID:	
   810  0052                     ___lwdiv@dividend:	
   811                           ; 1 bytes @ 0x8
   812                           
   813                           
   814                           ; 2 bytes @ 0x8
   815  0052                     	ds	1
   816  0053                     ??_Drive:	
   817  0053                     lcdWriteToDigitBCD@ThouDigit:	
   818                           ; 1 bytes @ 0x9
   819                           
   820                           
   821                           ; 2 bytes @ 0x9
   822  0053                     	ds	1
   823  0054                     ??___lwdiv:	
   824  0054                     ___aldiv@dividend:	
   825                           ; 1 bytes @ 0xA
   826                           
   827                           
   828                           ; 4 bytes @ 0xA
   829  0054                     	ds	1
   830  0055                     lcdWriteToDigitBCD@TenThouDigit:	
   831  0055                     ___lwdiv@quotient:	
   832                           ; 2 bytes @ 0xB
   833                           
   834                           
   835                           ; 2 bytes @ 0xB
   836  0055                     	ds	2
   837  0057                     ___lwdiv@counter:	
   838  0057                     lcdWriteToDigitBCD@OnesDigit:	
   839                           ; 1 bytes @ 0xD
   840                           
   841                           
   842                           ; 2 bytes @ 0xD
   843  0057                     	ds	1
   844  0058                     ??___aldiv:	
   845                           
   846                           ; 1 bytes @ 0xE
   847  0058                     	ds	1
   848  0059                     ___aldiv@counter:	
   849                           
   850                           ; 1 bytes @ 0xF
   851  0059                     	ds	1
   852  005A                     ___aldiv@sign:	
   853                           
   854                           ; 1 bytes @ 0x10
   855  005A                     	ds	1
   856  005B                     ___aldiv@quotient:	
   857                           
   858                           ; 4 bytes @ 0x11
   859  005B                     	ds	4
   860  005F                     ?_adcConvertMM:	
   861  005F                     adcConvertMM@adcRAW:	
   862                           ; 2 bytes @ 0x15
   863                           
   864                           
   865                           ; 2 bytes @ 0x15
   866  005F                     	ds	2
   867  0061                     ??_adcConvertMM:	
   868                           
   869                           ; 1 bytes @ 0x17
   870  0061                     	ds	8
   871  0069                     ??_ADCMain:	
   872  0069                     ??_main:	
   873                           ; 1 bytes @ 0x1F
   874                           
   875                           
   876                           ; 1 bytes @ 0x1F
   877  0069                     	ds	3
   878  006C                     main@controlByte:	
   879                           
   880                           ; 1 bytes @ 0x22
   881  006C                     	ds	1
   882                           
   883                           	psect	maintext
   884  036B                     __pmaintext:	
   885 ;;
   886 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   887 ;;
   888 ;; *************** function _main *****************
   889 ;; Defined at:
   890 ;;		line 72 in file "main.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;		None
   893 ;; Auto vars:     Size  Location     Type
   894 ;;  controlByte     1   34[BANK0 ] unsigned char 
   895 ;; Return value:  Size  Location     Type
   896 ;;                  1    wreg      void 
   897 ;; Registers used:
   898 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   899 ;; Tracked objects:
   900 ;;		On entry : B00/0
   901 ;;		On exit  : 0/0
   902 ;;		Unchanged: 0/0
   903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   904 ;;      Params:         0       0       0       0       0
   905 ;;      Locals:         0       1       0       0       0
   906 ;;      Temps:          0       3       0       0       0
   907 ;;      Totals:         0       4       0       0       0
   908 ;;Total ram usage:        4 bytes
   909 ;; Hardware stack levels required when called:    6
   910 ;; This function calls:
   911 ;;		_ADCMain
   912 ;;		_Drive
   913 ;;		_getSensorData
   914 ;;		_lcdSetCursor
   915 ;;		_lcdWriteToDigitBCD
   916 ;;		_moveCCW
   917 ;;		_moveCW
   918 ;;		_ser_init
   919 ;;		_ser_putch
   920 ;;		_setupADC
   921 ;;		_setupLCD
   922 ;;		_setupSPI
   923 ;;		_spi_transfer
   924 ;; This function is called by:
   925 ;;		Startup code after reset
   926 ;; This function uses a non-reentrant model
   927 ;;
   928                           
   929                           
   930                           ;psect for function _main
   931  036B                     _main:	
   932                           
   933                           ;main.c: 73: _delay((unsigned long)((5000)*(20000000/4000.0)));
   934                           
   935                           ;incstack = 0
   936                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   937  036B  307F               	movlw	127
   938  036C  1283               	bcf	3,5	;RP0=0, select bank0
   939  036D  1303               	bcf	3,6	;RP1=0, select bank0
   940  036E  00EB               	movwf	??_main+2
   941  036F  30D4               	movlw	212
   942  0370  00EA               	movwf	??_main+1
   943  0371  30AE               	movlw	174
   944  0372  00E9               	movwf	??_main
   945  0373                     u1937:	
   946  0373  0BE9               	decfsz	??_main,f
   947  0374  2B73               	goto	u1937
   948  0375  0BEA               	decfsz	??_main+1,f
   949  0376  2B73               	goto	u1937
   950  0377  0BEB               	decfsz	??_main+2,f
   951  0378  2B73               	goto	u1937
   952  0379  2B7A               	nop2
   953                           
   954                           ;main.c: 76: setupSPI();
   955  037A  120A  158A  262A  120A  118A  	fcall	_setupSPI
   956                           
   957                           ;main.c: 77: _delay((unsigned long)((5000)*(20000000/4000.0)));
   958  037F  307F               	movlw	127
   959  0380  1283               	bcf	3,5	;RP0=0, select bank0
   960  0381  1303               	bcf	3,6	;RP1=0, select bank0
   961  0382  00EB               	movwf	??_main+2
   962  0383  30D4               	movlw	212
   963  0384  00EA               	movwf	??_main+1
   964  0385  30AE               	movlw	174
   965  0386  00E9               	movwf	??_main
   966  0387                     u1947:	
   967  0387  0BE9               	decfsz	??_main,f
   968  0388  2B87               	goto	u1947
   969  0389  0BEA               	decfsz	??_main+1,f
   970  038A  2B87               	goto	u1947
   971  038B  0BEB               	decfsz	??_main+2,f
   972  038C  2B87               	goto	u1947
   973  038D  2B8E               	nop2
   974                           
   975                           ;main.c: 78: ser_init();
   976  038E  120A  158A  25CF  120A  118A  	fcall	_ser_init
   977                           
   978                           ;main.c: 79: _delay((unsigned long)((5000)*(20000000/4000.0)));
   979  0393  307F               	movlw	127
   980  0394  1283               	bcf	3,5	;RP0=0, select bank0
   981  0395  1303               	bcf	3,6	;RP1=0, select bank0
   982  0396  00EB               	movwf	??_main+2
   983  0397  30D4               	movlw	212
   984  0398  00EA               	movwf	??_main+1
   985  0399  30AE               	movlw	174
   986  039A  00E9               	movwf	??_main
   987  039B                     u1957:	
   988  039B  0BE9               	decfsz	??_main,f
   989  039C  2B9B               	goto	u1957
   990  039D  0BEA               	decfsz	??_main+1,f
   991  039E  2B9B               	goto	u1957
   992  039F  0BEB               	decfsz	??_main+2,f
   993  03A0  2B9B               	goto	u1957
   994  03A1  2BA2               	nop2
   995                           
   996                           ;main.c: 80: setupLCD();
   997  03A2  120A  158A  26AA  120A  118A  	fcall	_setupLCD
   998                           
   999                           ;main.c: 81: setupADC();
  1000  03A7  120A  158A  2614  120A  118A  	fcall	_setupADC
  1001                           
  1002                           ;main.c: 83: unsigned char controlByte = 0b00001101;
  1003  03AC  300D               	movlw	13
  1004  03AD  1283               	bcf	3,5	;RP0=0, select bank0
  1005  03AE  1303               	bcf	3,6	;RP1=0, select bank0
  1006  03AF  00E9               	movwf	??_main
  1007  03B0  0869               	movf	??_main,w
  1008  03B1  00EC               	movwf	main@controlByte
  1009                           
  1010                           ;main.c: 84: spi_transfer(controlByte);
  1011  03B2  086C               	movf	main@controlByte,w
  1012  03B3  120A  158A  25DE  120A  118A  	fcall	_spi_transfer
  1013                           
  1014                           ;main.c: 85: _delay((unsigned long)((3000)*(20000000/4000.0)));
  1015  03B8  304D               	movlw	77
  1016  03B9  1283               	bcf	3,5	;RP0=0, select bank0
  1017  03BA  1303               	bcf	3,6	;RP1=0, select bank0
  1018  03BB  00EB               	movwf	??_main+2
  1019  03BC  3019               	movlw	25
  1020  03BD  00EA               	movwf	??_main+1
  1021  03BE  309A               	movlw	154
  1022  03BF  00E9               	movwf	??_main
  1023  03C0                     u1967:	
  1024  03C0  0BE9               	decfsz	??_main,f
  1025  03C1  2BC0               	goto	u1967
  1026  03C2  0BEA               	decfsz	??_main+1,f
  1027  03C3  2BC0               	goto	u1967
  1028  03C4  0BEB               	decfsz	??_main+2,f
  1029  03C5  2BC0               	goto	u1967
  1030  03C6  2BC7               	nop2
  1031                           
  1032                           ;main.c: 86: ser_putch(128);
  1033  03C7  3080               	movlw	128
  1034  03C8  120A  158A  25C3  120A  118A  	fcall	_ser_putch
  1035                           
  1036                           ;main.c: 87: _delay((unsigned long)((3000)*(20000000/4000.0)));
  1037  03CD  304D               	movlw	77
  1038  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  1039  03CF  1303               	bcf	3,6	;RP1=0, select bank0
  1040  03D0  00EB               	movwf	??_main+2
  1041  03D1  3019               	movlw	25
  1042  03D2  00EA               	movwf	??_main+1
  1043  03D3  309A               	movlw	154
  1044  03D4  00E9               	movwf	??_main
  1045  03D5                     u1977:	
  1046  03D5  0BE9               	decfsz	??_main,f
  1047  03D6  2BD5               	goto	u1977
  1048  03D7  0BEA               	decfsz	??_main+1,f
  1049  03D8  2BD5               	goto	u1977
  1050  03D9  0BEB               	decfsz	??_main+2,f
  1051  03DA  2BD5               	goto	u1977
  1052  03DB  2BDC               	nop2
  1053                           
  1054                           ;main.c: 88: ser_putch(132);
  1055  03DC  3084               	movlw	132
  1056  03DD  120A  158A  25C3  120A  118A  	fcall	_ser_putch
  1057                           
  1058                           ;main.c: 89: _delay((unsigned long)((3000)*(20000000/4000.0)));
  1059  03E2  304D               	movlw	77
  1060  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  1061  03E4  1303               	bcf	3,6	;RP1=0, select bank0
  1062  03E5  00EB               	movwf	??_main+2
  1063  03E6  3019               	movlw	25
  1064  03E7  00EA               	movwf	??_main+1
  1065  03E8  309A               	movlw	154
  1066  03E9  00E9               	movwf	??_main
  1067  03EA                     u1987:	
  1068  03EA  0BE9               	decfsz	??_main,f
  1069  03EB  2BEA               	goto	u1987
  1070  03EC  0BEA               	decfsz	??_main+1,f
  1071  03ED  2BEA               	goto	u1987
  1072  03EE  0BEB               	decfsz	??_main+2,f
  1073  03EF  2BEA               	goto	u1987
  1074  03F0  2BF1               	nop2
  1075                           
  1076                           ;main.c: 90: lcdWriteToDigitBCD(totalDistTrav);
  1077  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  1078  03F2  1303               	bcf	3,6	;RP1=0, select bank0
  1079  03F3  083B               	movf	_totalDistTrav+1,w
  1080  03F4  00CE               	movwf	lcdWriteToDigitBCD@data+1
  1081  03F5  083A               	movf	_totalDistTrav,w
  1082  03F6  00CD               	movwf	lcdWriteToDigitBCD@data
  1083  03F7  120A  118A  25BD  120A  118A  	fcall	_lcdWriteToDigitBCD
  1084  03FC                     l2097:	
  1085                           ;main.c: 93: while(1){
  1086                           
  1087                           
  1088                           ;main.c: 98: if (PB8Counter >= 10 && !RB0 == 0){
  1089  03FC  300A               	movlw	10
  1090  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  1091  03FE  1303               	bcf	3,6	;RP1=0, select bank0
  1092  03FF  0241               	subwf	_PB8Counter,w
  1093  0400  1803               	btfsc	3,0
  1094  0401  1C06               	btfss	6,0	;volatile
  1095  0402  2C5E               	goto	l2129
  1096                           
  1097                           ;main.c: 99: adcClosest = 0;
  1098  0403  01ED               	clrf	_adcClosest
  1099  0404  01EE               	clrf	_adcClosest+1
  1100                           
  1101                           ;main.c: 100: for (loop = 0; loop < 400; loop++){
  1102  0405  01AA               	clrf	_loop
  1103  0406  01AB               	clrf	_loop+1
  1104  0407  082B               	movf	_loop+1,w
  1105  0408  3A80               	xorlw	128
  1106  0409  00FF               	movwf	127
  1107  040A  3081               	movlw	129
  1108  040B  027F               	subwf	127,w
  1109  040C  1D03               	skipz
  1110  040D  2C10               	goto	u1775
  1111  040E  3090               	movlw	144
  1112  040F  022A               	subwf	_loop,w
  1113  0410                     u1775:	
  1114  0410  1803               	btfsc	3,0
  1115  0411  2C40               	goto	l2119
  1116  0412                     l2107:	
  1117                           
  1118                           ;main.c: 101: moveCW();
  1119  0412  120A  118A  2763  120A  118A  	fcall	_moveCW
  1120                           
  1121                           ;main.c: 102: ADCMain();
  1122  0417  120A  158A  2642  120A  118A  	fcall	_ADCMain
  1123                           
  1124                           ;main.c: 103: if (adcRAW > adcClosest){
  1125  041C  1283               	bcf	3,5	;RP0=0, select bank0
  1126  041D  1303               	bcf	3,6	;RP1=0, select bank0
  1127  041E  0823               	movf	_adcRAW+1,w	;volatile
  1128  041F  026E               	subwf	_adcClosest+1,w
  1129  0420  1D03               	skipz
  1130  0421  2C24               	goto	u1785
  1131  0422  0822               	movf	_adcRAW,w	;volatile
  1132  0423  026D               	subwf	_adcClosest,w
  1133  0424                     u1785:	
  1134  0424  1803               	skipnc
  1135  0425  2C2F               	goto	l2115
  1136                           
  1137                           ;main.c: 104: adcClosest = adcRAW;
  1138  0426  0823               	movf	_adcRAW+1,w	;volatile
  1139  0427  00EE               	movwf	_adcClosest+1
  1140  0428  0822               	movf	_adcRAW,w	;volatile
  1141  0429  00ED               	movwf	_adcClosest
  1142                           
  1143                           ;main.c: 105: stepClosest = stepCount;
  1144  042A  0848               	movf	_stepCount,w
  1145  042B  00B4               	movwf	_stepClosest
  1146  042C  01B5               	clrf	_stepClosest+1
  1147  042D  1BB4               	btfsc	_stepClosest,7
  1148  042E  03B5               	decf	_stepClosest+1,f
  1149  042F                     l2115:	
  1150  042F  3001               	movlw	1
  1151  0430  07AA               	addwf	_loop,f
  1152  0431  1803               	skipnc
  1153  0432  0AAB               	incf	_loop+1,f
  1154  0433  3000               	movlw	0
  1155  0434  07AB               	addwf	_loop+1,f
  1156  0435  082B               	movf	_loop+1,w
  1157  0436  3A80               	xorlw	128
  1158  0437  00FF               	movwf	127
  1159  0438  3081               	movlw	129
  1160  0439  027F               	subwf	127,w
  1161  043A  1D03               	skipz
  1162  043B  2C3E               	goto	u1795
  1163  043C  3090               	movlw	144
  1164  043D  022A               	subwf	_loop,w
  1165  043E                     u1795:	
  1166  043E  1C03               	skipc
  1167  043F  2C12               	goto	l2107
  1168  0440                     l2119:	
  1169                           
  1170                           ;main.c: 106: }
  1171                           ;main.c: 107: }
  1172                           ;main.c: 109: for (loop = stepCount; loop != stepClosest; loop++){
  1173  0440  1283               	bcf	3,5	;RP0=0, select bank0
  1174  0441  1303               	bcf	3,6	;RP1=0, select bank0
  1175  0442  0848               	movf	_stepCount,w
  1176  0443  00AA               	movwf	_loop
  1177  0444  01AB               	clrf	_loop+1
  1178  0445  1BAA               	btfsc	_loop,7
  1179  0446  03AB               	decf	_loop+1,f
  1180  0447                     l2125:	
  1181  0447  0835               	movf	_stepClosest+1,w
  1182  0448  062B               	xorwf	_loop+1,w
  1183  0449  1D03               	skipz
  1184  044A  2C4D               	goto	u1805
  1185  044B  0834               	movf	_stepClosest,w
  1186  044C  062A               	xorwf	_loop,w
  1187  044D                     u1805:	
  1188  044D  1903               	btfsc	3,2
  1189  044E  2C5D               	goto	l2127
  1190                           
  1191                           ;main.c: 110: moveCCW();
  1192  044F  120A  118A  27AE  120A  118A  	fcall	_moveCCW
  1193  0454  3001               	movlw	1
  1194  0455  1283               	bcf	3,5	;RP0=0, select bank0
  1195  0456  1303               	bcf	3,6	;RP1=0, select bank0
  1196  0457  07AA               	addwf	_loop,f
  1197  0458  1803               	skipnc
  1198  0459  0AAB               	incf	_loop+1,f
  1199  045A  3000               	movlw	0
  1200  045B  07AB               	addwf	_loop+1,f
  1201  045C  2C47               	goto	l2125
  1202  045D                     l2127:	
  1203                           
  1204                           ;main.c: 111: }
  1205                           ;main.c: 112: PB8Counter = 0;
  1206  045D  01C1               	clrf	_PB8Counter
  1207  045E                     l2129:	
  1208                           
  1209                           ;main.c: 113: }
  1210                           ;main.c: 118: if (FLAG_Play >= 10 && getSensorData(18,1) == 0x00){
  1211  045E  300A               	movlw	10
  1212  045F  023E               	subwf	_FLAG_Play,w	;volatile
  1213  0460  1C03               	skipc
  1214  0461  2CD6               	goto	l2149
  1215  0462  01CC               	clrf	getSensorData@bytes
  1216  0463  0ACC               	incf	getSensorData@bytes,f
  1217  0464  3012               	movlw	18
  1218  0465  120A  158A  277D  120A  118A  	fcall	_getSensorData
  1219  046A  1283               	bcf	3,5	;RP0=0, select bank0
  1220  046B  1303               	bcf	3,6	;RP1=0, select bank0
  1221  046C  084C               	movf	?_getSensorData,w
  1222  046D  044D               	iorwf	?_getSensorData+1,w
  1223  046E  1D03               	btfss	3,2
  1224  046F  2CD6               	goto	l2149
  1225                           
  1226                           ;main.c: 119: Drive(1,144,0x7F,0xFF);
  1227  0470  3001               	movlw	1
  1228  0471  00CB               	movwf	Drive@speedH
  1229  0472  3000               	movlw	0
  1230  0473  00CC               	movwf	Drive@speedH+1
  1231  0474  3090               	movlw	144
  1232  0475  00CD               	movwf	Drive@speedL
  1233  0476  3000               	movlw	0
  1234  0477  00CE               	movwf	Drive@speedL+1
  1235  0478  307F               	movlw	127
  1236  0479  00CF               	movwf	Drive@radH
  1237  047A  3000               	movlw	0
  1238  047B  00D0               	movwf	Drive@radH+1
  1239  047C  30FF               	movlw	255
  1240  047D  00D1               	movwf	Drive@radL
  1241  047E  3000               	movlw	0
  1242  047F  00D2               	movwf	Drive@radL+1
  1243  0480  120A  158A  2685  120A  118A  	fcall	_Drive
  1244  0485                     l2143:	
  1245                           ;main.c: 120: while (totalDistTrav < 4000){
  1246                           
  1247  0485  1283               	bcf	3,5	;RP0=0, select bank0
  1248  0486  1303               	bcf	3,6	;RP1=0, select bank0
  1249  0487  083B               	movf	_totalDistTrav+1,w
  1250  0488  3A80               	xorlw	128
  1251  0489  00FF               	movwf	127
  1252  048A  308F               	movlw	143
  1253  048B  027F               	subwf	127,w
  1254  048C  1D03               	skipz
  1255  048D  2C90               	goto	u1835
  1256  048E  30A0               	movlw	160
  1257  048F  023A               	subwf	_totalDistTrav,w
  1258  0490                     u1835:	
  1259  0490  1803               	btfsc	3,0
  1260  0491  2CBE               	goto	l2145
  1261                           
  1262                           ;main.c: 121: distTrav = getSensorData(19,2);
  1263  0492  3002               	movlw	2
  1264  0493  1283               	bcf	3,5	;RP0=0, select bank0
  1265  0494  1303               	bcf	3,6	;RP1=0, select bank0
  1266  0495  00E9               	movwf	??_main
  1267  0496  0869               	movf	??_main,w
  1268  0497  00CC               	movwf	getSensorData@bytes
  1269  0498  3013               	movlw	19
  1270  0499  120A  158A  277D  120A  118A  	fcall	_getSensorData
  1271  049E  1283               	bcf	3,5	;RP0=0, select bank0
  1272  049F  1303               	bcf	3,6	;RP1=0, select bank0
  1273  04A0  084D               	movf	?_getSensorData+1,w
  1274  04A1  00A9               	movwf	_distTrav+1
  1275  04A2  084C               	movf	?_getSensorData,w
  1276  04A3  00A8               	movwf	_distTrav
  1277                           
  1278                           ;main.c: 122: totalDistTrav = (totalDistTrav + distTrav);
  1279  04A4  0828               	movf	_distTrav,w
  1280  04A5  073A               	addwf	_totalDistTrav,w
  1281  04A6  00BA               	movwf	_totalDistTrav
  1282  04A7  0829               	movf	_distTrav+1,w
  1283  04A8  1803               	skipnc
  1284  04A9  0A29               	incf	_distTrav+1,w
  1285  04AA  073B               	addwf	_totalDistTrav+1,w
  1286  04AB  00BB               	movwf	_totalDistTrav+1
  1287                           
  1288                           ;main.c: 124: lcdSetCursor(0x00);
  1289  04AC  3000               	movlw	0
  1290  04AD  120A  158A  25A6  120A  118A  	fcall	_lcdSetCursor
  1291                           
  1292                           ;main.c: 125: lcdWriteToDigitBCD(totalDistTrav);
  1293  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  1294  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  1295  04B4  083B               	movf	_totalDistTrav+1,w
  1296  04B5  00CE               	movwf	lcdWriteToDigitBCD@data+1
  1297  04B6  083A               	movf	_totalDistTrav,w
  1298  04B7  00CD               	movwf	lcdWriteToDigitBCD@data
  1299  04B8  120A  118A  25BD  120A  118A  	fcall	_lcdWriteToDigitBCD
  1300  04BD  2C85               	goto	l2143
  1301  04BE                     l2145:	
  1302                           
  1303                           ;main.c: 126: }
  1304                           ;main.c: 128: Drive(0,0,0x7F,0xFF);
  1305  04BE  3000               	movlw	0
  1306  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  1307  04C0  1303               	bcf	3,6	;RP1=0, select bank0
  1308  04C1  00CB               	movwf	Drive@speedH
  1309  04C2  00CC               	movwf	Drive@speedH+1
  1310  04C3  3000               	movlw	0
  1311  04C4  00CD               	movwf	Drive@speedL
  1312  04C5  00CE               	movwf	Drive@speedL+1
  1313  04C6  307F               	movlw	127
  1314  04C7  00CF               	movwf	Drive@radH
  1315  04C8  3000               	movlw	0
  1316  04C9  00D0               	movwf	Drive@radH+1
  1317  04CA  30FF               	movlw	255
  1318  04CB  00D1               	movwf	Drive@radL
  1319  04CC  3000               	movlw	0
  1320  04CD  00D2               	movwf	Drive@radL+1
  1321  04CE  120A  158A  2685  120A  118A  	fcall	_Drive
  1322                           
  1323                           ;main.c: 129: FLAG_Play = 0;
  1324  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  1325  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  1326  04D5  01BE               	clrf	_FLAG_Play	;volatile
  1327  04D6                     l2149:	
  1328                           
  1329                           ;main.c: 130: }
  1330                           ;main.c: 133: if (FLAG_Advanced >= 10 && getSensorData(18,1) == 0x00){
  1331  04D6  300A               	movlw	10
  1332  04D7  023D               	subwf	_FLAG_Advanced,w	;volatile
  1333  04D8  1C03               	skipc
  1334  04D9  2DA9               	goto	l2187
  1335  04DA  01CC               	clrf	getSensorData@bytes
  1336  04DB  0ACC               	incf	getSensorData@bytes,f
  1337  04DC  3012               	movlw	18
  1338  04DD  120A  158A  277D  120A  118A  	fcall	_getSensorData
  1339  04E2  1283               	bcf	3,5	;RP0=0, select bank0
  1340  04E3  1303               	bcf	3,6	;RP1=0, select bank0
  1341  04E4  084C               	movf	?_getSensorData,w
  1342  04E5  044D               	iorwf	?_getSensorData+1,w
  1343  04E6  1D03               	btfss	3,2
  1344  04E7  2DA9               	goto	l2187
  1345                           
  1346                           ;main.c: 134: totalDistTrav = 0;
  1347  04E8  01BA               	clrf	_totalDistTrav
  1348  04E9  01BB               	clrf	_totalDistTrav+1
  1349                           
  1350                           ;main.c: 136: for (loop = 0; loop < 4; loop++){
  1351  04EA  01AA               	clrf	_loop
  1352  04EB  01AB               	clrf	_loop+1
  1353  04EC  082B               	movf	_loop+1,w
  1354  04ED  3A80               	xorlw	128
  1355  04EE  00FF               	movwf	127
  1356  04EF  3080               	movlw	128
  1357  04F0  027F               	subwf	127,w
  1358  04F1  1D03               	skipz
  1359  04F2  2CF5               	goto	u1865
  1360  04F3  3004               	movlw	4
  1361  04F4  022A               	subwf	_loop,w
  1362  04F5                     u1865:	
  1363  04F5  1803               	btfsc	3,0
  1364  04F6  2D91               	goto	l2183
  1365  04F7                     l2159:	
  1366                           
  1367                           ;main.c: 139: Drive(0,250,0xFF,0xFF);
  1368  04F7  3000               	movlw	0
  1369  04F8  1283               	bcf	3,5	;RP0=0, select bank0
  1370  04F9  1303               	bcf	3,6	;RP1=0, select bank0
  1371  04FA  00CB               	movwf	Drive@speedH
  1372  04FB  00CC               	movwf	Drive@speedH+1
  1373  04FC  30FA               	movlw	250
  1374  04FD  00CD               	movwf	Drive@speedL
  1375  04FE  3000               	movlw	0
  1376  04FF  00CE               	movwf	Drive@speedL+1
  1377  0500  30FF               	movlw	255
  1378  0501  00CF               	movwf	Drive@radH
  1379  0502  3000               	movlw	0
  1380  0503  00D0               	movwf	Drive@radH+1
  1381  0504  30FF               	movlw	255
  1382  0505  00D1               	movwf	Drive@radL
  1383  0506  3000               	movlw	0
  1384  0507  00D2               	movwf	Drive@radL+1
  1385  0508  120A  158A  2685  120A  118A  	fcall	_Drive
  1386  050D                     l2163:	
  1387                           ;main.c: 140: while (angleTurned > -90){
  1388                           
  1389  050D  1283               	bcf	3,5	;RP0=0, select bank0
  1390  050E  1303               	bcf	3,6	;RP1=0, select bank0
  1391  050F  0825               	movf	_angleTurned+1,w
  1392  0510  3A80               	xorlw	128
  1393  0511  00FF               	movwf	127
  1394  0512  307F               	movlw	127
  1395  0513  027F               	subwf	127,w
  1396  0514  1D03               	skipz
  1397  0515  2D18               	goto	u1875
  1398  0516  30A7               	movlw	167
  1399  0517  0224               	subwf	_angleTurned,w
  1400  0518                     u1875:	
  1401  0518  1C03               	btfss	3,0
  1402  0519  2D2D               	goto	l2165
  1403                           
  1404                           ;main.c: 141: angleTurned = getSensorData(20,2);
  1405  051A  3002               	movlw	2
  1406  051B  1283               	bcf	3,5	;RP0=0, select bank0
  1407  051C  1303               	bcf	3,6	;RP1=0, select bank0
  1408  051D  00E9               	movwf	??_main
  1409  051E  0869               	movf	??_main,w
  1410  051F  00CC               	movwf	getSensorData@bytes
  1411  0520  3014               	movlw	20
  1412  0521  120A  158A  277D  120A  118A  	fcall	_getSensorData
  1413  0526  1283               	bcf	3,5	;RP0=0, select bank0
  1414  0527  1303               	bcf	3,6	;RP1=0, select bank0
  1415  0528  084D               	movf	?_getSensorData+1,w
  1416  0529  00A5               	movwf	_angleTurned+1
  1417  052A  084C               	movf	?_getSensorData,w
  1418  052B  00A4               	movwf	_angleTurned
  1419  052C  2D0D               	goto	l2163
  1420  052D                     l2165:	
  1421                           
  1422                           ;main.c: 142: }
  1423                           ;main.c: 145: Drive(0,250,0x7F,0xFF);
  1424  052D  3000               	movlw	0
  1425  052E  1283               	bcf	3,5	;RP0=0, select bank0
  1426  052F  1303               	bcf	3,6	;RP1=0, select bank0
  1427  0530  00CB               	movwf	Drive@speedH
  1428  0531  00CC               	movwf	Drive@speedH+1
  1429  0532  30FA               	movlw	250
  1430  0533  00CD               	movwf	Drive@speedL
  1431  0534  3000               	movlw	0
  1432  0535  00CE               	movwf	Drive@speedL+1
  1433  0536  307F               	movlw	127
  1434  0537  00CF               	movwf	Drive@radH
  1435  0538  3000               	movlw	0
  1436  0539  00D0               	movwf	Drive@radH+1
  1437  053A  30FF               	movlw	255
  1438  053B  00D1               	movwf	Drive@radL
  1439  053C  3000               	movlw	0
  1440  053D  00D2               	movwf	Drive@radL+1
  1441  053E  120A  158A  2685  120A  118A  	fcall	_Drive
  1442  0543                     l2175:	
  1443                           ;main.c: 146: while (totalDistTrav < 1000){
  1444                           
  1445  0543  1283               	bcf	3,5	;RP0=0, select bank0
  1446  0544  1303               	bcf	3,6	;RP1=0, select bank0
  1447  0545  083B               	movf	_totalDistTrav+1,w
  1448  0546  3A80               	xorlw	128
  1449  0547  00FF               	movwf	127
  1450  0548  3083               	movlw	131
  1451  0549  027F               	subwf	127,w
  1452  054A  1D03               	skipz
  1453  054B  2D4E               	goto	u1885
  1454  054C  30E8               	movlw	232
  1455  054D  023A               	subwf	_totalDistTrav,w
  1456  054E                     u1885:	
  1457  054E  1803               	btfsc	3,0
  1458  054F  2D7C               	goto	l2177
  1459                           
  1460                           ;main.c: 147: distTrav = getSensorData(19,2);
  1461  0550  3002               	movlw	2
  1462  0551  1283               	bcf	3,5	;RP0=0, select bank0
  1463  0552  1303               	bcf	3,6	;RP1=0, select bank0
  1464  0553  00E9               	movwf	??_main
  1465  0554  0869               	movf	??_main,w
  1466  0555  00CC               	movwf	getSensorData@bytes
  1467  0556  3013               	movlw	19
  1468  0557  120A  158A  277D  120A  118A  	fcall	_getSensorData
  1469  055C  1283               	bcf	3,5	;RP0=0, select bank0
  1470  055D  1303               	bcf	3,6	;RP1=0, select bank0
  1471  055E  084D               	movf	?_getSensorData+1,w
  1472  055F  00A9               	movwf	_distTrav+1
  1473  0560  084C               	movf	?_getSensorData,w
  1474  0561  00A8               	movwf	_distTrav
  1475                           
  1476                           ;main.c: 148: totalDistTrav = (totalDistTrav + distTrav);
  1477  0562  0828               	movf	_distTrav,w
  1478  0563  073A               	addwf	_totalDistTrav,w
  1479  0564  00BA               	movwf	_totalDistTrav
  1480  0565  0829               	movf	_distTrav+1,w
  1481  0566  1803               	skipnc
  1482  0567  0A29               	incf	_distTrav+1,w
  1483  0568  073B               	addwf	_totalDistTrav+1,w
  1484  0569  00BB               	movwf	_totalDistTrav+1
  1485                           
  1486                           ;main.c: 150: lcdSetCursor(0x00);
  1487  056A  3000               	movlw	0
  1488  056B  120A  158A  25A6  120A  118A  	fcall	_lcdSetCursor
  1489                           
  1490                           ;main.c: 151: lcdWriteToDigitBCD(totalDistTrav);
  1491  0570  1283               	bcf	3,5	;RP0=0, select bank0
  1492  0571  1303               	bcf	3,6	;RP1=0, select bank0
  1493  0572  083B               	movf	_totalDistTrav+1,w
  1494  0573  00CE               	movwf	lcdWriteToDigitBCD@data+1
  1495  0574  083A               	movf	_totalDistTrav,w
  1496  0575  00CD               	movwf	lcdWriteToDigitBCD@data
  1497  0576  120A  118A  25BD  120A  118A  	fcall	_lcdWriteToDigitBCD
  1498  057B  2D43               	goto	l2175
  1499  057C                     l2177:	
  1500                           
  1501                           ;main.c: 152: }
  1502                           ;main.c: 153: totalDistTrav = 0;
  1503  057C  1283               	bcf	3,5	;RP0=0, select bank0
  1504  057D  1303               	bcf	3,6	;RP1=0, select bank0
  1505  057E  01BA               	clrf	_totalDistTrav
  1506  057F  01BB               	clrf	_totalDistTrav+1
  1507  0580  3001               	movlw	1
  1508  0581  07AA               	addwf	_loop,f
  1509  0582  1803               	skipnc
  1510  0583  0AAB               	incf	_loop+1,f
  1511  0584  3000               	movlw	0
  1512  0585  07AB               	addwf	_loop+1,f
  1513  0586  082B               	movf	_loop+1,w
  1514  0587  3A80               	xorlw	128
  1515  0588  00FF               	movwf	127
  1516  0589  3080               	movlw	128
  1517  058A  027F               	subwf	127,w
  1518  058B  1D03               	skipz
  1519  058C  2D8F               	goto	u1895
  1520  058D  3004               	movlw	4
  1521  058E  022A               	subwf	_loop,w
  1522  058F                     u1895:	
  1523  058F  1C03               	skipc
  1524  0590  2CF7               	goto	l2159
  1525  0591                     l2183:	
  1526                           
  1527                           ;main.c: 154: }
  1528                           ;main.c: 156: Drive(0,0,0x7F,0xFF);
  1529  0591  3000               	movlw	0
  1530  0592  1283               	bcf	3,5	;RP0=0, select bank0
  1531  0593  1303               	bcf	3,6	;RP1=0, select bank0
  1532  0594  00CB               	movwf	Drive@speedH
  1533  0595  00CC               	movwf	Drive@speedH+1
  1534  0596  3000               	movlw	0
  1535  0597  00CD               	movwf	Drive@speedL
  1536  0598  00CE               	movwf	Drive@speedL+1
  1537  0599  307F               	movlw	127
  1538  059A  00CF               	movwf	Drive@radH
  1539  059B  3000               	movlw	0
  1540  059C  00D0               	movwf	Drive@radH+1
  1541  059D  30FF               	movlw	255
  1542  059E  00D1               	movwf	Drive@radL
  1543  059F  3000               	movlw	0
  1544  05A0  00D2               	movwf	Drive@radL+1
  1545  05A1  120A  158A  2685  120A  118A  	fcall	_Drive
  1546                           
  1547                           ;main.c: 157: FLAG_Advanced = 0;
  1548  05A6  1283               	bcf	3,5	;RP0=0, select bank0
  1549  05A7  1303               	bcf	3,6	;RP1=0, select bank0
  1550  05A8  01BD               	clrf	_FLAG_Advanced	;volatile
  1551  05A9                     l2187:	
  1552                           
  1553                           ;main.c: 158: }
  1554                           ;main.c: 161: if(FLAG_AdvPlay >= 10 && getSensorData(18,1) == 0x00){
  1555  05A9  300A               	movlw	10
  1556  05AA  023C               	subwf	_FLAG_AdvPlay,w	;volatile
  1557  05AB  1C03               	skipc
  1558  05AC  2BFC               	goto	l2097
  1559  05AD  01CC               	clrf	getSensorData@bytes
  1560  05AE  0ACC               	incf	getSensorData@bytes,f
  1561  05AF  3012               	movlw	18
  1562  05B0  120A  158A  277D  120A  118A  	fcall	_getSensorData
  1563  05B5  1283               	bcf	3,5	;RP0=0, select bank0
  1564  05B6  1303               	bcf	3,6	;RP1=0, select bank0
  1565  05B7  084C               	movf	?_getSensorData,w
  1566  05B8  044D               	iorwf	?_getSensorData+1,w
  1567  05B9  1D03               	btfss	3,2
  1568  05BA  2BFC               	goto	l2097
  1569                           
  1570                           ;main.c: 165: FLAG_AdvPlay = 0;
  1571  05BB  01BC               	clrf	_FLAG_AdvPlay	;volatile
  1572  05BC  2BFC               	goto	l2097
  1573  05BD                     __end_of_main:	
  1574                           
  1575                           	psect	text1
  1576  0DDE                     __ptext1:	
  1577 ;; *************** function _spi_transfer *****************
  1578 ;; Defined at:
  1579 ;;		line 23 in file "SPI.c"
  1580 ;; Parameters:    Size  Location     Type
  1581 ;;  data            1    wreg     unsigned char 
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;  data            1    2[BANK0 ] unsigned char 
  1584 ;;  temp            1    1[BANK0 ] unsigned char 
  1585 ;; Return value:  Size  Location     Type
  1586 ;;                  1    wreg      unsigned char 
  1587 ;; Registers used:
  1588 ;;		wreg, status,2
  1589 ;; Tracked objects:
  1590 ;;		On entry : 0/0
  1591 ;;		On exit  : 0/0
  1592 ;;		Unchanged: 0/0
  1593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1594 ;;      Params:         0       0       0       0       0
  1595 ;;      Locals:         0       2       0       0       0
  1596 ;;      Temps:          0       1       0       0       0
  1597 ;;      Totals:         0       3       0       0       0
  1598 ;;Total ram usage:        3 bytes
  1599 ;; Hardware stack levels used:    1
  1600 ;; Hardware stack levels required when called:    3
  1601 ;; This function calls:
  1602 ;;		Nothing
  1603 ;; This function is called by:
  1604 ;;		_main
  1605 ;; This function uses a non-reentrant model
  1606 ;;
  1607                           
  1608                           
  1609                           ;psect for function _spi_transfer
  1610  0DDE                     _spi_transfer:	
  1611                           
  1612                           ;incstack = 0
  1613                           ; Regs used in _spi_transfer: [wreg+status,2]
  1614                           ;spi_transfer@data stored from wreg
  1615  0DDE  1283               	bcf	3,5	;RP0=0, select bank0
  1616  0DDF  1303               	bcf	3,6	;RP1=0, select bank0
  1617  0DE0  00CC               	movwf	spi_transfer@data
  1618                           
  1619                           ;SPI.c: 24: unsigned char temp = 0;
  1620  0DE1  01CB               	clrf	spi_transfer@temp
  1621                           
  1622                           ;SPI.c: 26: SSPIF = 0;
  1623  0DE2  118C               	bcf	12,3	;volatile
  1624                           
  1625                           ;SPI.c: 27: SSPBUF = data;
  1626  0DE3  084C               	movf	spi_transfer@data,w
  1627  0DE4  0093               	movwf	19	;volatile
  1628  0DE5                     l258:	
  1629                           ;SPI.c: 29: while (SSPIF == 0);
  1630                           
  1631  0DE5  1D8C               	btfss	12,3	;volatile
  1632  0DE6  2DE5               	goto	l258
  1633                           
  1634                           ;SPI.c: 30: temp = SSPBUF;
  1635  0DE7  0813               	movf	19,w	;volatile
  1636  0DE8  00CA               	movwf	??_spi_transfer
  1637  0DE9  084A               	movf	??_spi_transfer,w
  1638  0DEA  00CB               	movwf	spi_transfer@temp
  1639                           
  1640                           ;SPI.c: 31: SSPIF = 0;
  1641  0DEB  118C               	bcf	12,3	;volatile
  1642  0DEC  0008               	return
  1643  0DED                     __end_of_spi_transfer:	
  1644                           ;SPI.c: 33: return temp;
  1645                           ;	Return value of _spi_transfer is never used
  1646                           
  1647                           
  1648                           	psect	text2
  1649  0E2A                     __ptext2:	
  1650 ;; *************** function _setupSPI *****************
  1651 ;; Defined at:
  1652 ;;		line 4 in file "SPI.c"
  1653 ;; Parameters:    Size  Location     Type
  1654 ;;		None
  1655 ;; Auto vars:     Size  Location     Type
  1656 ;;		None
  1657 ;; Return value:  Size  Location     Type
  1658 ;;                  1    wreg      void 
  1659 ;; Registers used:
  1660 ;;		wreg, status,2
  1661 ;; Tracked objects:
  1662 ;;		On entry : 0/0
  1663 ;;		On exit  : 0/0
  1664 ;;		Unchanged: 0/0
  1665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1666 ;;      Params:         0       0       0       0       0
  1667 ;;      Locals:         0       0       0       0       0
  1668 ;;      Temps:          0       0       0       0       0
  1669 ;;      Totals:         0       0       0       0       0
  1670 ;;Total ram usage:        0 bytes
  1671 ;; Hardware stack levels used:    1
  1672 ;; Hardware stack levels required when called:    3
  1673 ;; This function calls:
  1674 ;;		Nothing
  1675 ;; This function is called by:
  1676 ;;		_main
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           
  1681                           ;psect for function _setupSPI
  1682  0E2A                     _setupSPI:	
  1683                           
  1684                           ;SPI.c: 6: TRISB = 0b00000000;
  1685                           
  1686                           ;incstack = 0
  1687                           ; Regs used in _setupSPI: [wreg+status,2]
  1688  0E2A  1683               	bsf	3,5	;RP0=1, select bank1
  1689  0E2B  1303               	bcf	3,6	;RP1=0, select bank1
  1690  0E2C  0186               	clrf	6	;volatile
  1691                           
  1692                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  1693  0E2D  3040               	movlw	64
  1694  0E2E  0094               	movwf	20	;volatile
  1695                           
  1696                           ;SPI.c: 9: SSPCON = 0b00100000;
  1697  0E2F  3020               	movlw	32
  1698  0E30  1283               	bcf	3,5	;RP0=0, select bank0
  1699  0E31  1303               	bcf	3,6	;RP1=0, select bank0
  1700  0E32  0094               	movwf	20	;volatile
  1701                           
  1702                           ;SPI.c: 10: TRISC = 0b11010000;
  1703  0E33  30D0               	movlw	208
  1704  0E34  1683               	bsf	3,5	;RP0=1, select bank1
  1705  0E35  1303               	bcf	3,6	;RP1=0, select bank1
  1706  0E36  0087               	movwf	7	;volatile
  1707                           
  1708                           ;SPI.c: 11: PORTC = 0b00000011;
  1709  0E37  3003               	movlw	3
  1710  0E38  1283               	bcf	3,5	;RP0=0, select bank0
  1711  0E39  1303               	bcf	3,6	;RP1=0, select bank0
  1712  0E3A  0087               	movwf	7	;volatile
  1713                           
  1714                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  1715  0E3B  3004               	movlw	4
  1716  0E3C  1683               	bsf	3,5	;RP0=1, select bank1
  1717  0E3D  1303               	bcf	3,6	;RP1=0, select bank1
  1718  0E3E  0081               	movwf	1	;volatile
  1719                           
  1720                           ;SPI.c: 16: TMR0IE = 1;
  1721  0E3F  168B               	bsf	11,5	;volatile
  1722                           
  1723                           ;SPI.c: 19: (GIE = 1);
  1724  0E40  178B               	bsf	11,7	;volatile
  1725  0E41  0008               	return
  1726  0E42                     __end_of_setupSPI:	
  1727                           
  1728                           	psect	text3
  1729  0EAA                     __ptext3:	
  1730 ;; *************** function _setupLCD *****************
  1731 ;; Defined at:
  1732 ;;		line 86 in file "LCD.c"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;		None
  1735 ;; Auto vars:     Size  Location     Type
  1736 ;;		None
  1737 ;; Return value:  Size  Location     Type
  1738 ;;                  1    wreg      void 
  1739 ;; Registers used:
  1740 ;;		wreg, status,2, status,0, pclath, cstack
  1741 ;; Tracked objects:
  1742 ;;		On entry : 0/0
  1743 ;;		On exit  : 0/0
  1744 ;;		Unchanged: 0/0
  1745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1746 ;;      Params:         0       0       0       0       0
  1747 ;;      Locals:         0       0       0       0       0
  1748 ;;      Temps:          0       0       0       0       0
  1749 ;;      Totals:         0       0       0       0       0
  1750 ;;Total ram usage:        0 bytes
  1751 ;; Hardware stack levels used:    1
  1752 ;; Hardware stack levels required when called:    4
  1753 ;; This function calls:
  1754 ;;		_lcdWriteControl
  1755 ;; This function is called by:
  1756 ;;		_main
  1757 ;; This function uses a non-reentrant model
  1758 ;;
  1759                           
  1760                           
  1761                           ;psect for function _setupLCD
  1762  0EAA                     _setupLCD:	
  1763                           
  1764                           ;LCD.c: 88: ADCON1 = 0b00000010;
  1765                           
  1766                           ;incstack = 0
  1767                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  1768  0EAA  3002               	movlw	2
  1769  0EAB  1683               	bsf	3,5	;RP0=1, select bank1
  1770  0EAC  1303               	bcf	3,6	;RP1=0, select bank1
  1771  0EAD  009F               	movwf	31	;volatile
  1772                           
  1773                           ;LCD.c: 90: PORTD = 0;
  1774  0EAE  1283               	bcf	3,5	;RP0=0, select bank0
  1775  0EAF  1303               	bcf	3,6	;RP1=0, select bank0
  1776  0EB0  0188               	clrf	8	;volatile
  1777                           
  1778                           ;LCD.c: 91: PORTE = 0;
  1779  0EB1  0189               	clrf	9	;volatile
  1780                           
  1781                           ;LCD.c: 93: TRISD = 0b00000000;
  1782  0EB2  1683               	bsf	3,5	;RP0=1, select bank1
  1783  0EB3  1303               	bcf	3,6	;RP1=0, select bank1
  1784  0EB4  0188               	clrf	8	;volatile
  1785                           
  1786                           ;LCD.c: 94: TRISE = 0b00000000;
  1787  0EB5  0189               	clrf	9	;volatile
  1788                           
  1789                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  1790  0EB6  3001               	movlw	1
  1791  0EB7  120A  158A  2600  120A  158A  	fcall	_lcdWriteControl
  1792                           
  1793                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  1794  0EBC  3038               	movlw	56
  1795  0EBD  120A  158A  2600  120A  158A  	fcall	_lcdWriteControl
  1796                           
  1797                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  1798  0EC2  300C               	movlw	12
  1799  0EC3  120A  158A  2600  120A  158A  	fcall	_lcdWriteControl
  1800                           
  1801                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  1802  0EC8  3006               	movlw	6
  1803  0EC9  120A  158A  2600  120A  158A  	fcall	_lcdWriteControl
  1804                           
  1805                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  1806  0ECE  3002               	movlw	2
  1807  0ECF  120A  158A  2600   	fcall	_lcdWriteControl
  1808  0ED2  0008               	return
  1809  0ED3                     __end_of_setupLCD:	
  1810                           
  1811                           	psect	text4
  1812  0E14                     __ptext4:	
  1813 ;; *************** function _setupADC *****************
  1814 ;; Defined at:
  1815 ;;		line 8 in file "ADC.c"
  1816 ;; Parameters:    Size  Location     Type
  1817 ;;		None
  1818 ;; Auto vars:     Size  Location     Type
  1819 ;;		None
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  1    wreg      void 
  1822 ;; Registers used:
  1823 ;;		wreg, status,2
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1829 ;;      Params:         0       0       0       0       0
  1830 ;;      Locals:         0       0       0       0       0
  1831 ;;      Temps:          0       1       0       0       0
  1832 ;;      Totals:         0       1       0       0       0
  1833 ;;Total ram usage:        1 bytes
  1834 ;; Hardware stack levels used:    1
  1835 ;; Hardware stack levels required when called:    3
  1836 ;; This function calls:
  1837 ;;		Nothing
  1838 ;; This function is called by:
  1839 ;;		_main
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           
  1844                           ;psect for function _setupADC
  1845  0E14                     _setupADC:	
  1846                           
  1847                           ;ADC.c: 9: PORTA = 0;
  1848                           
  1849                           ;incstack = 0
  1850                           ; Regs used in _setupADC: [wreg+status,2]
  1851  0E14  1283               	bcf	3,5	;RP0=0, select bank0
  1852  0E15  1303               	bcf	3,6	;RP1=0, select bank0
  1853  0E16  0185               	clrf	5	;volatile
  1854                           
  1855                           ;ADC.c: 10: TRISA = 0b11111111;
  1856  0E17  30FF               	movlw	255
  1857  0E18  1683               	bsf	3,5	;RP0=1, select bank1
  1858  0E19  1303               	bcf	3,6	;RP1=0, select bank1
  1859  0E1A  0085               	movwf	5	;volatile
  1860                           
  1861                           ;ADC.c: 13: ADCON0 = 0b10001001;
  1862  0E1B  3089               	movlw	137
  1863  0E1C  1283               	bcf	3,5	;RP0=0, select bank0
  1864  0E1D  1303               	bcf	3,6	;RP1=0, select bank0
  1865  0E1E  009F               	movwf	31	;volatile
  1866                           
  1867                           ;ADC.c: 14: ADCON1 = 0b00000010;
  1868  0E1F  3002               	movlw	2
  1869  0E20  1683               	bsf	3,5	;RP0=1, select bank1
  1870  0E21  1303               	bcf	3,6	;RP1=0, select bank1
  1871  0E22  009F               	movwf	31	;volatile
  1872                           
  1873                           ;ADC.c: 16: _delay((unsigned long)((50)*(20000000/4000000.0)));
  1874  0E23  3053               	movlw	83
  1875  0E24  1283               	bcf	3,5	;RP0=0, select bank0
  1876  0E25  1303               	bcf	3,6	;RP1=0, select bank0
  1877  0E26  00CA               	movwf	??_setupADC
  1878  0E27                     u1997:	
  1879  0E27  0BCA               	decfsz	??_setupADC,f
  1880  0E28  2E27               	goto	u1997
  1881  0E29  0008               	return
  1882  0E2A                     __end_of_setupADC:	
  1883                           
  1884                           	psect	text5
  1885  0DCF                     __ptext5:	
  1886 ;; *************** function _ser_init *****************
  1887 ;; Defined at:
  1888 ;;		line 5 in file "ser.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;		None
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;		None
  1893 ;; Return value:  Size  Location     Type
  1894 ;;                  1    wreg      void 
  1895 ;; Registers used:
  1896 ;;		wreg
  1897 ;; Tracked objects:
  1898 ;;		On entry : 0/0
  1899 ;;		On exit  : 0/0
  1900 ;;		Unchanged: 0/0
  1901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1902 ;;      Params:         0       0       0       0       0
  1903 ;;      Locals:         0       0       0       0       0
  1904 ;;      Temps:          0       0       0       0       0
  1905 ;;      Totals:         0       0       0       0       0
  1906 ;;Total ram usage:        0 bytes
  1907 ;; Hardware stack levels used:    1
  1908 ;; Hardware stack levels required when called:    3
  1909 ;; This function calls:
  1910 ;;		Nothing
  1911 ;; This function is called by:
  1912 ;;		_main
  1913 ;; This function uses a non-reentrant model
  1914 ;;
  1915                           
  1916                           
  1917                           ;psect for function _ser_init
  1918  0DCF                     _ser_init:	
  1919                           
  1920                           ;ser.c: 7: TXSTA = 0b00100100;
  1921                           
  1922                           ;incstack = 0
  1923                           ; Regs used in _ser_init: [wreg]
  1924  0DCF  3024               	movlw	36
  1925  0DD0  1683               	bsf	3,5	;RP0=1, select bank1
  1926  0DD1  1303               	bcf	3,6	;RP1=0, select bank1
  1927  0DD2  0098               	movwf	24	;volatile
  1928                           
  1929                           ;ser.c: 8: RCSTA = 0b10011000;
  1930  0DD3  3098               	movlw	152
  1931  0DD4  1283               	bcf	3,5	;RP0=0, select bank0
  1932  0DD5  1303               	bcf	3,6	;RP1=0, select bank0
  1933  0DD6  0098               	movwf	24	;volatile
  1934                           
  1935                           ;ser.c: 24: SPBRG = 20;
  1936  0DD7  3014               	movlw	20
  1937  0DD8  1683               	bsf	3,5	;RP0=1, select bank1
  1938  0DD9  1303               	bcf	3,6	;RP1=0, select bank1
  1939  0DDA  0099               	movwf	25	;volatile
  1940                           
  1941                           ;ser.c: 26: PEIE = 1;
  1942  0DDB  170B               	bsf	11,6	;volatile
  1943                           
  1944                           ;ser.c: 27: (GIE = 1);
  1945  0DDC  178B               	bsf	11,7	;volatile
  1946  0DDD  0008               	return
  1947  0DDE                     __end_of_ser_init:	
  1948                           
  1949                           	psect	text6
  1950  0763                     __ptext6:	
  1951 ;; *************** function _moveCW *****************
  1952 ;; Defined at:
  1953 ;;		line 5 in file "motor.c"
  1954 ;; Parameters:    Size  Location     Type
  1955 ;;		None
  1956 ;; Auto vars:     Size  Location     Type
  1957 ;;		None
  1958 ;; Return value:  Size  Location     Type
  1959 ;;                  1    wreg      void 
  1960 ;; Registers used:
  1961 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1962 ;; Tracked objects:
  1963 ;;		On entry : 0/0
  1964 ;;		On exit  : 0/0
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1967 ;;      Params:         0       0       0       0       0
  1968 ;;      Locals:         0       0       0       0       0
  1969 ;;      Temps:          0       2       0       0       0
  1970 ;;      Totals:         0       2       0       0       0
  1971 ;;Total ram usage:        2 bytes
  1972 ;; Hardware stack levels used:    1
  1973 ;; Hardware stack levels required when called:    3
  1974 ;; This function calls:
  1975 ;;		Nothing
  1976 ;; This function is called by:
  1977 ;;		_main
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           
  1982                           ;psect for function _moveCW
  1983  0763                     _moveCW:	
  1984                           
  1985                           ;motor.c: 8: if (stepCount == 0) negativeFlag = 1;
  1986                           
  1987                           ;incstack = 0
  1988                           ; Regs used in _moveCW: [wreg-fsr0h+status,2+status,0]
  1989  0763  1283               	bcf	3,5	;RP0=0, select bank0
  1990  0764  1303               	bcf	3,6	;RP1=0, select bank0
  1991  0765  0848               	movf	_stepCount,w
  1992  0766  1D03               	btfss	3,2
  1993  0767  2F6A               	goto	l1899
  1994  0768  01C6               	clrf	_negativeFlag
  1995  0769  0AC6               	incf	_negativeFlag,f
  1996  076A                     l1899:	
  1997                           
  1998                           ;motor.c: 10: stepCount--;
  1999  076A  30FF               	movlw	255
  2000  076B  00CA               	movwf	??_moveCW
  2001  076C  084A               	movf	??_moveCW,w
  2002  076D  07C8               	addwf	_stepCount,f
  2003                           
  2004                           ;motor.c: 13: switch(currentStep){
  2005  076E  2F8A               	goto	l1935
  2006  076F                     l1901:	
  2007                           ;motor.c: 15: case 7: PORTC = 0b00011011;
  2008                           
  2009  076F  301B               	movlw	27
  2010  0770  2F7C               	goto	L1
  2011  0771                     l1905:	
  2012                           ;motor.c: 19: case 6: PORTC = 0b00010111;
  2013                           
  2014                           ;motor.c: 17: break;
  2015                           
  2016                           ;motor.c: 16: currentStep--;
  2017                           
  2018  0771  3017               	movlw	23
  2019  0772  2F7C               	goto	L1
  2020  0773                     l1909:	
  2021                           ;motor.c: 23: case 5: PORTC = 0b00110101;
  2022                           
  2023                           ;motor.c: 21: break;
  2024                           
  2025                           ;motor.c: 20: currentStep--;
  2026                           
  2027  0773  3035               	movlw	53
  2028  0774  2F7C               	goto	L1
  2029  0775                     l1913:	
  2030                           ;motor.c: 27: case 4: PORTC = 0b00100111;
  2031                           
  2032                           ;motor.c: 25: break;
  2033                           
  2034                           ;motor.c: 24: currentStep--;
  2035                           
  2036  0775  3027               	movlw	39
  2037  0776  2F7C               	goto	L1
  2038  0777                     l1917:	
  2039                           ;motor.c: 31: case 3: PORTC = 0b00101011;
  2040                           
  2041                           ;motor.c: 29: break;
  2042                           
  2043                           ;motor.c: 28: currentStep--;
  2044                           
  2045  0777  302B               	movlw	43
  2046  0778  2F7C               	goto	L1
  2047  0779                     l1921:	
  2048                           ;motor.c: 35: case 2: PORTC = 0b00101110;
  2049                           
  2050                           ;motor.c: 33: break;
  2051                           
  2052                           ;motor.c: 32: currentStep--;
  2053                           
  2054  0779  302E               	movlw	46
  2055  077A  2F7C               	goto	L1
  2056  077B                     l1925:	
  2057                           ;motor.c: 39: case 1: PORTC = 0b00111100;
  2058                           
  2059                           ;motor.c: 37: break;
  2060                           
  2061                           ;motor.c: 36: currentStep--;
  2062                           
  2063  077B  303C               	movlw	60
  2064  077C                     L1:	
  2065  077C  0087               	movwf	7	;volatile
  2066                           
  2067                           ;motor.c: 40: currentStep--;
  2068  077D  3001               	movlw	1
  2069  077E  02C4               	subwf	_currentStep,f
  2070                           
  2071                           ;motor.c: 41: break;
  2072  077F  2FA4               	goto	l1937
  2073  0780                     l1929:	
  2074                           ;motor.c: 43: case 0: PORTC = 0b00011110;
  2075                           
  2076  0780  301E               	movlw	30
  2077  0781  0087               	movwf	7	;volatile
  2078                           
  2079                           ;motor.c: 44: currentStep = 7;
  2080  0782  3007               	movlw	7
  2081  0783  00CA               	movwf	??_moveCW
  2082  0784  084A               	movf	??_moveCW,w
  2083  0785  00C4               	movwf	_currentStep
  2084                           
  2085                           ;motor.c: 45: break;
  2086  0786  2FA4               	goto	l1937
  2087  0787                     l1931:	
  2088                           ;motor.c: 47: default: PORTC = 0b00111001;
  2089                           
  2090  0787  3039               	movlw	57
  2091  0788  0087               	movwf	7	;volatile
  2092                           
  2093                           ;motor.c: 49: }
  2094                           
  2095                           ;motor.c: 48: break;
  2096  0789  2FA4               	goto	l1937
  2097  078A                     l1935:	
  2098  078A  0844               	movf	_currentStep,w
  2099                           
  2100                           ; Switch size 1, requested type "space"
  2101                           ; Number of cases is 8, Range of values is 0 to 7
  2102                           ; switch strategies available:
  2103                           ; Name         Instructions Cycles
  2104                           ; simple_byte           25    13 (average)
  2105                           ; direct_byte           32     8 (fixed)
  2106                           ; jumptable            260     6 (fixed)
  2107                           ;	Chosen strategy is simple_byte
  2108  078B  3A00               	xorlw	0	; case 0
  2109  078C  1903               	skipnz
  2110  078D  2F80               	goto	l1929
  2111  078E  3A01               	xorlw	1	; case 1
  2112  078F  1903               	skipnz
  2113  0790  2F7B               	goto	l1925
  2114  0791  3A03               	xorlw	3	; case 2
  2115  0792  1903               	skipnz
  2116  0793  2F79               	goto	l1921
  2117  0794  3A01               	xorlw	1	; case 3
  2118  0795  1903               	skipnz
  2119  0796  2F77               	goto	l1917
  2120  0797  3A07               	xorlw	7	; case 4
  2121  0798  1903               	skipnz
  2122  0799  2F75               	goto	l1913
  2123  079A  3A01               	xorlw	1	; case 5
  2124  079B  1903               	skipnz
  2125  079C  2F73               	goto	l1909
  2126  079D  3A03               	xorlw	3	; case 6
  2127  079E  1903               	skipnz
  2128  079F  2F71               	goto	l1905
  2129  07A0  3A01               	xorlw	1	; case 7
  2130  07A1  1903               	skipnz
  2131  07A2  2F6F               	goto	l1901
  2132  07A3  2F87               	goto	l1931
  2133  07A4                     l1937:	
  2134                           
  2135                           ;motor.c: 51: _delay((unsigned long)((3)*(20000000/4000.0)));
  2136  07A4  3014               	movlw	20
  2137  07A5  00CB               	movwf	??_moveCW+1
  2138  07A6  3079               	movlw	121
  2139  07A7  00CA               	movwf	??_moveCW
  2140  07A8                     u2007:	
  2141  07A8  0BCA               	decfsz	??_moveCW,f
  2142  07A9  2FA8               	goto	u2007
  2143  07AA  0BCB               	decfsz	??_moveCW+1,f
  2144  07AB  2FA8               	goto	u2007
  2145  07AC  2FAD               	nop2
  2146  07AD  0008               	return
  2147  07AE                     __end_of_moveCW:	
  2148                           
  2149                           	psect	text7
  2150  07AE                     __ptext7:	
  2151 ;; *************** function _moveCCW *****************
  2152 ;; Defined at:
  2153 ;;		line 55 in file "motor.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;		None
  2156 ;; Auto vars:     Size  Location     Type
  2157 ;;		None
  2158 ;; Return value:  Size  Location     Type
  2159 ;;                  1    wreg      void 
  2160 ;; Registers used:
  2161 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2162 ;; Tracked objects:
  2163 ;;		On entry : 0/0
  2164 ;;		On exit  : 0/0
  2165 ;;		Unchanged: 0/0
  2166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2167 ;;      Params:         0       0       0       0       0
  2168 ;;      Locals:         0       0       0       0       0
  2169 ;;      Temps:          0       2       0       0       0
  2170 ;;      Totals:         0       2       0       0       0
  2171 ;;Total ram usage:        2 bytes
  2172 ;; Hardware stack levels used:    1
  2173 ;; Hardware stack levels required when called:    3
  2174 ;; This function calls:
  2175 ;;		Nothing
  2176 ;; This function is called by:
  2177 ;;		_main
  2178 ;; This function uses a non-reentrant model
  2179 ;;
  2180                           
  2181                           
  2182                           ;psect for function _moveCCW
  2183  07AE                     _moveCCW:	
  2184                           
  2185                           ;motor.c: 57: if (stepCount == (-1)) negativeFlag = 0;
  2186                           
  2187                           ;incstack = 0
  2188                           ; Regs used in _moveCCW: [wreg-fsr0h+status,2+status,0]
  2189  07AE  1283               	bcf	3,5	;RP0=0, select bank0
  2190  07AF  1303               	bcf	3,6	;RP1=0, select bank0
  2191  07B0  0A48               	incf	_stepCount,w
  2192  07B1  1903               	btfsc	3,2
  2193  07B2  01C6               	clrf	_negativeFlag
  2194                           
  2195                           ;motor.c: 59: stepCount++;
  2196  07B3  3001               	movlw	1
  2197  07B4  00CA               	movwf	??_moveCCW
  2198  07B5  084A               	movf	??_moveCCW,w
  2199  07B6  07C8               	addwf	_stepCount,f
  2200                           
  2201                           ;motor.c: 62: switch(currentStep){
  2202  07B7  2FD2               	goto	l1989
  2203  07B8                     l1953:	
  2204                           ;motor.c: 63: case 0: PORTC = 0b00101110;
  2205                           
  2206  07B8  302E               	movlw	46
  2207  07B9  2FC5               	goto	L2
  2208  07BA                     l1957:	
  2209                           ;motor.c: 67: case 1: PORTC = 0b00101011;
  2210                           
  2211                           ;motor.c: 65: break;
  2212                           
  2213                           ;motor.c: 64: currentStep++;
  2214                           
  2215  07BA  302B               	movlw	43
  2216  07BB  2FC5               	goto	L2
  2217  07BC                     l1961:	
  2218                           ;motor.c: 71: case 2: PORTC = 0b00100111;
  2219                           
  2220                           ;motor.c: 69: break;
  2221                           
  2222                           ;motor.c: 68: currentStep++;
  2223                           
  2224  07BC  3027               	movlw	39
  2225  07BD  2FC5               	goto	L2
  2226  07BE                     l1965:	
  2227                           ;motor.c: 75: case 3: PORTC = 0b00110101;
  2228                           
  2229                           ;motor.c: 73: break;
  2230                           
  2231                           ;motor.c: 72: currentStep++;
  2232                           
  2233  07BE  3035               	movlw	53
  2234  07BF  2FC5               	goto	L2
  2235  07C0                     l1969:	
  2236                           ;motor.c: 79: case 4: PORTC = 0b00010111;
  2237                           
  2238                           ;motor.c: 77: break;
  2239                           
  2240                           ;motor.c: 76: currentStep++;
  2241                           
  2242  07C0  3017               	movlw	23
  2243  07C1  2FC5               	goto	L2
  2244  07C2                     l1973:	
  2245                           ;motor.c: 83: case 5: PORTC = 0b00011011;
  2246                           
  2247                           ;motor.c: 81: break;
  2248                           
  2249                           ;motor.c: 80: currentStep++;
  2250                           
  2251  07C2  301B               	movlw	27
  2252  07C3  2FC5               	goto	L2
  2253  07C4                     l1977:	
  2254                           ;motor.c: 87: case 6: PORTC = 0b00011110;
  2255                           
  2256                           ;motor.c: 85: break;
  2257                           
  2258                           ;motor.c: 84: currentStep++;
  2259                           
  2260  07C4  301E               	movlw	30
  2261  07C5                     L2:	
  2262  07C5  0087               	movwf	7	;volatile
  2263                           
  2264                           ;motor.c: 88: currentStep++;
  2265  07C6  3001               	movlw	1
  2266  07C7  00CA               	movwf	??_moveCCW
  2267  07C8  084A               	movf	??_moveCCW,w
  2268  07C9  07C4               	addwf	_currentStep,f
  2269                           
  2270                           ;motor.c: 89: break;
  2271  07CA  2FEC               	goto	l1991
  2272  07CB                     l1981:	
  2273                           ;motor.c: 91: case 7: PORTC = 0b00111100;
  2274                           
  2275  07CB  303C               	movlw	60
  2276  07CC  0087               	movwf	7	;volatile
  2277                           
  2278                           ;motor.c: 92: currentStep = 0;
  2279  07CD  01C4               	clrf	_currentStep
  2280                           
  2281                           ;motor.c: 93: break;
  2282  07CE  2FEC               	goto	l1991
  2283  07CF                     l1985:	
  2284                           ;motor.c: 95: default: PORTC = 0b00111001;
  2285                           
  2286  07CF  3039               	movlw	57
  2287  07D0  0087               	movwf	7	;volatile
  2288                           
  2289                           ;motor.c: 97: }
  2290                           
  2291                           ;motor.c: 96: break;
  2292  07D1  2FEC               	goto	l1991
  2293  07D2                     l1989:	
  2294  07D2  0844               	movf	_currentStep,w
  2295                           
  2296                           ; Switch size 1, requested type "space"
  2297                           ; Number of cases is 8, Range of values is 0 to 7
  2298                           ; switch strategies available:
  2299                           ; Name         Instructions Cycles
  2300                           ; simple_byte           25    13 (average)
  2301                           ; direct_byte           32     8 (fixed)
  2302                           ; jumptable            260     6 (fixed)
  2303                           ;	Chosen strategy is simple_byte
  2304  07D3  3A00               	xorlw	0	; case 0
  2305  07D4  1903               	skipnz
  2306  07D5  2FB8               	goto	l1953
  2307  07D6  3A01               	xorlw	1	; case 1
  2308  07D7  1903               	skipnz
  2309  07D8  2FBA               	goto	l1957
  2310  07D9  3A03               	xorlw	3	; case 2
  2311  07DA  1903               	skipnz
  2312  07DB  2FBC               	goto	l1961
  2313  07DC  3A01               	xorlw	1	; case 3
  2314  07DD  1903               	skipnz
  2315  07DE  2FBE               	goto	l1965
  2316  07DF  3A07               	xorlw	7	; case 4
  2317  07E0  1903               	skipnz
  2318  07E1  2FC0               	goto	l1969
  2319  07E2  3A01               	xorlw	1	; case 5
  2320  07E3  1903               	skipnz
  2321  07E4  2FC2               	goto	l1973
  2322  07E5  3A03               	xorlw	3	; case 6
  2323  07E6  1903               	skipnz
  2324  07E7  2FC4               	goto	l1977
  2325  07E8  3A01               	xorlw	1	; case 7
  2326  07E9  1903               	skipnz
  2327  07EA  2FCB               	goto	l1981
  2328  07EB  2FCF               	goto	l1985
  2329  07EC                     l1991:	
  2330                           
  2331                           ;motor.c: 99: _delay((unsigned long)((3)*(20000000/4000.0)));
  2332  07EC  3014               	movlw	20
  2333  07ED  00CB               	movwf	??_moveCCW+1
  2334  07EE  3079               	movlw	121
  2335  07EF  00CA               	movwf	??_moveCCW
  2336  07F0                     u2017:	
  2337  07F0  0BCA               	decfsz	??_moveCCW,f
  2338  07F1  2FF0               	goto	u2017
  2339  07F2  0BCB               	decfsz	??_moveCCW+1,f
  2340  07F3  2FF0               	goto	u2017
  2341  07F4  2FF5               	nop2
  2342  07F5  0008               	return
  2343  07F6                     __end_of_moveCCW:	
  2344                           
  2345                           	psect	text8
  2346  0F7D                     __ptext8:	
  2347 ;; *************** function _getSensorData *****************
  2348 ;; Defined at:
  2349 ;;		line 55 in file "ser.c"
  2350 ;; Parameters:    Size  Location     Type
  2351 ;;  packetID        1    wreg     unsigned char 
  2352 ;;  bytes           1    2[BANK0 ] unsigned char 
  2353 ;; Auto vars:     Size  Location     Type
  2354 ;;  packetID        1    8[BANK0 ] unsigned char 
  2355 ;;  sensor          2    6[BANK0 ] int 
  2356 ;; Return value:  Size  Location     Type
  2357 ;;                  2    2[BANK0 ] int 
  2358 ;; Registers used:
  2359 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2360 ;; Tracked objects:
  2361 ;;		On entry : 0/0
  2362 ;;		On exit  : 0/0
  2363 ;;		Unchanged: 0/0
  2364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2365 ;;      Params:         0       2       0       0       0
  2366 ;;      Locals:         0       3       0       0       0
  2367 ;;      Temps:          0       2       0       0       0
  2368 ;;      Totals:         0       7       0       0       0
  2369 ;;Total ram usage:        7 bytes
  2370 ;; Hardware stack levels used:    1
  2371 ;; Hardware stack levels required when called:    4
  2372 ;; This function calls:
  2373 ;;		_ser_getch
  2374 ;;		_ser_putch
  2375 ;; This function is called by:
  2376 ;;		_main
  2377 ;; This function uses a non-reentrant model
  2378 ;;
  2379                           
  2380                           
  2381                           ;psect for function _getSensorData
  2382  0F7D                     _getSensorData:	
  2383                           
  2384                           ;incstack = 0
  2385                           ; Regs used in _getSensorData: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2386                           ;getSensorData@packetID stored from wreg
  2387  0F7D  1283               	bcf	3,5	;RP0=0, select bank0
  2388  0F7E  1303               	bcf	3,6	;RP1=0, select bank0
  2389  0F7F  00D2               	movwf	getSensorData@packetID
  2390                           
  2391                           ;ser.c: 56: ser_putch(142);
  2392  0F80  308E               	movlw	142
  2393  0F81  120A  158A  25C3  120A  158A  	fcall	_ser_putch
  2394                           
  2395                           ;ser.c: 57: ser_putch(packetID);
  2396  0F86  1283               	bcf	3,5	;RP0=0, select bank0
  2397  0F87  1303               	bcf	3,6	;RP1=0, select bank0
  2398  0F88  0852               	movf	getSensorData@packetID,w
  2399  0F89  120A  158A  25C3  120A  158A  	fcall	_ser_putch
  2400                           
  2401                           ;ser.c: 59: if (bytes == 2)
  2402  0F8E  3002               	movlw	2
  2403  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  2404  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  2405  0F91  064C               	xorwf	getSensorData@bytes,w
  2406  0F92  1D03               	btfss	3,2
  2407  0F93  2F9F               	goto	l1821
  2408                           
  2409                           ;ser.c: 60: highByte = ser_getch();
  2410  0F94  120A  118A  27F6  120A  158A  	fcall	_ser_getch
  2411  0F99  1283               	bcf	3,5	;RP0=0, select bank0
  2412  0F9A  1303               	bcf	3,6	;RP1=0, select bank0
  2413  0F9B  00CE               	movwf	??_getSensorData
  2414  0F9C  084E               	movf	??_getSensorData,w
  2415  0F9D  00C9               	movwf	_highByte
  2416  0F9E  2FA0               	goto	l1823
  2417  0F9F                     l1821:	
  2418                           
  2419                           ;ser.c: 61: else
  2420                           ;ser.c: 62: highByte = 0;
  2421  0F9F  01C9               	clrf	_highByte
  2422  0FA0                     l1823:	
  2423                           
  2424                           ;ser.c: 64: lowByte = ser_getch();
  2425  0FA0  120A  118A  27F6   	fcall	_ser_getch
  2426  0FA3  1283               	bcf	3,5	;RP0=0, select bank0
  2427  0FA4  1303               	bcf	3,6	;RP1=0, select bank0
  2428  0FA5  00CE               	movwf	??_getSensorData
  2429  0FA6  084E               	movf	??_getSensorData,w
  2430  0FA7  00C5               	movwf	_lowByte
  2431                           
  2432                           ;ser.c: 66: signed int sensor = (256*highByte + lowByte);
  2433  0FA8  0849               	movf	_highByte,w
  2434  0FA9  00CE               	movwf	??_getSensorData
  2435  0FAA  01CF               	clrf	??_getSensorData+1
  2436  0FAB  084E               	movf	??_getSensorData,w
  2437  0FAC  00CF               	movwf	??_getSensorData+1
  2438  0FAD  01CE               	clrf	??_getSensorData
  2439  0FAE  0845               	movf	_lowByte,w
  2440  0FAF  074E               	addwf	??_getSensorData,w
  2441  0FB0  00D0               	movwf	getSensorData@sensor
  2442  0FB1  3000               	movlw	0
  2443  0FB2  1803               	skipnc
  2444  0FB3  3001               	movlw	1
  2445  0FB4  074F               	addwf	??_getSensorData+1,w
  2446  0FB5  00D1               	movwf	getSensorData@sensor+1
  2447                           
  2448                           ;ser.c: 68: return sensor;
  2449  0FB6  0851               	movf	getSensorData@sensor+1,w
  2450  0FB7  00CD               	movwf	?_getSensorData+1
  2451  0FB8  0850               	movf	getSensorData@sensor,w
  2452  0FB9  00CC               	movwf	?_getSensorData
  2453  0FBA  0008               	return
  2454  0FBB                     __end_of_getSensorData:	
  2455                           
  2456                           	psect	text9
  2457  07F6                     __ptext9:	
  2458 ;; *************** function _ser_getch *****************
  2459 ;; Defined at:
  2460 ;;		line 35 in file "ser.c"
  2461 ;; Parameters:    Size  Location     Type
  2462 ;;		None
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  2465 ;; Return value:  Size  Location     Type
  2466 ;;                  1    wreg      unsigned char 
  2467 ;; Registers used:
  2468 ;;		wreg
  2469 ;; Tracked objects:
  2470 ;;		On entry : 0/0
  2471 ;;		On exit  : 0/0
  2472 ;;		Unchanged: 0/0
  2473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2474 ;;      Params:         0       0       0       0       0
  2475 ;;      Locals:         0       1       0       0       0
  2476 ;;      Temps:          0       1       0       0       0
  2477 ;;      Totals:         0       2       0       0       0
  2478 ;;Total ram usage:        2 bytes
  2479 ;; Hardware stack levels used:    1
  2480 ;; Hardware stack levels required when called:    3
  2481 ;; This function calls:
  2482 ;;		Nothing
  2483 ;; This function is called by:
  2484 ;;		_getSensorData
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           
  2489                           ;psect for function _ser_getch
  2490  07F6                     _ser_getch:	
  2491  07F6                     l319:	
  2492                           ;ser.c: 36: while(!RCIF);
  2493                           
  2494                           ;incstack = 0
  2495                           ; Regs used in _ser_getch: [wreg]
  2496                           
  2497  07F6  1283               	bcf	3,5	;RP0=0, select bank0
  2498  07F7  1303               	bcf	3,6	;RP1=0, select bank0
  2499  07F8  1E8C               	btfss	12,5	;volatile
  2500  07F9  2FF6               	goto	l319
  2501                           
  2502                           ;ser.c: 37: unsigned char rxbyte = RCREG;
  2503  07FA  081A               	movf	26,w	;volatile
  2504  07FB  00CA               	movwf	??_ser_getch
  2505  07FC  084A               	movf	??_ser_getch,w
  2506  07FD  00CB               	movwf	ser_getch@rxbyte
  2507                           
  2508                           ;ser.c: 38: return rxbyte;
  2509  07FE  084B               	movf	ser_getch@rxbyte,w
  2510  07FF  0008               	return
  2511  0800                     __end_of_ser_getch:	
  2512                           
  2513                           	psect	text10
  2514  0E85                     __ptext10:	
  2515 ;; *************** function _Drive *****************
  2516 ;; Defined at:
  2517 ;;		line 45 in file "ser.c"
  2518 ;; Parameters:    Size  Location     Type
  2519 ;;  speedH          2    1[BANK0 ] int 
  2520 ;;  speedL          2    3[BANK0 ] int 
  2521 ;;  radH            2    5[BANK0 ] int 
  2522 ;;  radL            2    7[BANK0 ] int 
  2523 ;; Auto vars:     Size  Location     Type
  2524 ;;		None
  2525 ;; Return value:  Size  Location     Type
  2526 ;;                  1    wreg      void 
  2527 ;; Registers used:
  2528 ;;		wreg, status,2, status,0, pclath, cstack
  2529 ;; Tracked objects:
  2530 ;;		On entry : 0/0
  2531 ;;		On exit  : 0/0
  2532 ;;		Unchanged: 0/0
  2533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2534 ;;      Params:         0       8       0       0       0
  2535 ;;      Locals:         0       0       0       0       0
  2536 ;;      Temps:          0       0       0       0       0
  2537 ;;      Totals:         0       8       0       0       0
  2538 ;;Total ram usage:        8 bytes
  2539 ;; Hardware stack levels used:    1
  2540 ;; Hardware stack levels required when called:    4
  2541 ;; This function calls:
  2542 ;;		_ser_putch
  2543 ;; This function is called by:
  2544 ;;		_main
  2545 ;; This function uses a non-reentrant model
  2546 ;;
  2547                           
  2548                           
  2549                           ;psect for function _Drive
  2550  0E85                     _Drive:	
  2551                           
  2552                           ;ser.c: 46: ser_putch(137);
  2553                           
  2554                           ;incstack = 0
  2555                           ; Regs used in _Drive: [wreg+status,2+status,0+pclath+cstack]
  2556  0E85  3089               	movlw	137
  2557  0E86  120A  158A  25C3  120A  158A  	fcall	_ser_putch
  2558                           
  2559                           ;ser.c: 47: ser_putch(speedH);
  2560  0E8B  1283               	bcf	3,5	;RP0=0, select bank0
  2561  0E8C  1303               	bcf	3,6	;RP1=0, select bank0
  2562  0E8D  084B               	movf	Drive@speedH,w
  2563  0E8E  120A  158A  25C3  120A  158A  	fcall	_ser_putch
  2564                           
  2565                           ;ser.c: 48: ser_putch(speedL);
  2566  0E93  1283               	bcf	3,5	;RP0=0, select bank0
  2567  0E94  1303               	bcf	3,6	;RP1=0, select bank0
  2568  0E95  084D               	movf	Drive@speedL,w
  2569  0E96  120A  158A  25C3  120A  158A  	fcall	_ser_putch
  2570                           
  2571                           ;ser.c: 49: ser_putch(radH);
  2572  0E9B  1283               	bcf	3,5	;RP0=0, select bank0
  2573  0E9C  1303               	bcf	3,6	;RP1=0, select bank0
  2574  0E9D  084F               	movf	Drive@radH,w
  2575  0E9E  120A  158A  25C3  120A  158A  	fcall	_ser_putch
  2576                           
  2577                           ;ser.c: 50: ser_putch(radL);
  2578  0EA3  1283               	bcf	3,5	;RP0=0, select bank0
  2579  0EA4  1303               	bcf	3,6	;RP1=0, select bank0
  2580  0EA5  0851               	movf	Drive@radL,w
  2581  0EA6  120A  158A  25C3   	fcall	_ser_putch
  2582  0EA9  0008               	return
  2583  0EAA                     __end_of_Drive:	
  2584                           
  2585                           	psect	text11
  2586  0DC3                     __ptext11:	
  2587 ;; *************** function _ser_putch *****************
  2588 ;; Defined at:
  2589 ;;		line 30 in file "ser.c"
  2590 ;; Parameters:    Size  Location     Type
  2591 ;;  c               1    wreg     unsigned char 
  2592 ;; Auto vars:     Size  Location     Type
  2593 ;;  c               1    0[BANK0 ] unsigned char 
  2594 ;; Return value:  Size  Location     Type
  2595 ;;                  1    wreg      void 
  2596 ;; Registers used:
  2597 ;;		wreg
  2598 ;; Tracked objects:
  2599 ;;		On entry : 0/0
  2600 ;;		On exit  : 0/0
  2601 ;;		Unchanged: 0/0
  2602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2603 ;;      Params:         0       0       0       0       0
  2604 ;;      Locals:         0       1       0       0       0
  2605 ;;      Temps:          0       0       0       0       0
  2606 ;;      Totals:         0       1       0       0       0
  2607 ;;Total ram usage:        1 bytes
  2608 ;; Hardware stack levels used:    1
  2609 ;; Hardware stack levels required when called:    3
  2610 ;; This function calls:
  2611 ;;		Nothing
  2612 ;; This function is called by:
  2613 ;;		_main
  2614 ;;		_Drive
  2615 ;;		_getSensorData
  2616 ;; This function uses a non-reentrant model
  2617 ;;
  2618                           
  2619                           
  2620                           ;psect for function _ser_putch
  2621  0DC3                     _ser_putch:	
  2622                           
  2623                           ;incstack = 0
  2624                           ; Regs used in _ser_putch: [wreg]
  2625                           ;ser_putch@c stored from wreg
  2626  0DC3  1283               	bcf	3,5	;RP0=0, select bank0
  2627  0DC4  1303               	bcf	3,6	;RP1=0, select bank0
  2628  0DC5  00CA               	movwf	ser_putch@c
  2629  0DC6                     l313:	
  2630                           ;ser.c: 31: while(!TRMT);
  2631                           
  2632  0DC6  1683               	bsf	3,5	;RP0=1, select bank1
  2633  0DC7  1303               	bcf	3,6	;RP1=0, select bank1
  2634  0DC8  1C98               	btfss	24,1	;volatile
  2635  0DC9  2DC6               	goto	l313
  2636                           
  2637                           ;ser.c: 32: TXREG=c;
  2638  0DCA  1283               	bcf	3,5	;RP0=0, select bank0
  2639  0DCB  1303               	bcf	3,6	;RP1=0, select bank0
  2640  0DCC  084A               	movf	ser_putch@c,w
  2641  0DCD  0099               	movwf	25	;volatile
  2642  0DCE  0008               	return
  2643  0DCF                     __end_of_ser_putch:	
  2644                           
  2645                           	psect	text12
  2646  0E42                     __ptext12:	
  2647 ;; *************** function _ADCMain *****************
  2648 ;; Defined at:
  2649 ;;		line 19 in file "ADC.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;		None
  2652 ;; Auto vars:     Size  Location     Type
  2653 ;;		None
  2654 ;; Return value:  Size  Location     Type
  2655 ;;                  1    wreg      void 
  2656 ;; Registers used:
  2657 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2658 ;; Tracked objects:
  2659 ;;		On entry : 0/0
  2660 ;;		On exit  : 0/0
  2661 ;;		Unchanged: 0/0
  2662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2663 ;;      Params:         0       0       0       0       0
  2664 ;;      Locals:         0       0       0       0       0
  2665 ;;      Temps:          0       0       0       0       0
  2666 ;;      Totals:         0       0       0       0       0
  2667 ;;Total ram usage:        0 bytes
  2668 ;; Hardware stack levels used:    1
  2669 ;; Hardware stack levels required when called:    5
  2670 ;; This function calls:
  2671 ;;		_adcConvertMM
  2672 ;;		_getADC
  2673 ;;		_lcdSetCursor
  2674 ;;		_lcdWriteToDigitBCD
  2675 ;; This function is called by:
  2676 ;;		_main
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680                           
  2681                           ;psect for function _ADCMain
  2682  0E42                     _ADCMain:	
  2683                           
  2684                           ;ADC.c: 21: getADC();
  2685                           
  2686                           ;incstack = 0
  2687                           ; Regs used in _ADCMain: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2688  0E42  120A  158A  27BB  120A  158A  	fcall	_getADC
  2689                           
  2690                           ;ADC.c: 22: lcdSetCursor(0b10000000);
  2691  0E47  3080               	movlw	128
  2692  0E48  120A  158A  25A6  120A  158A  	fcall	_lcdSetCursor
  2693                           
  2694                           ;ADC.c: 23: lcdWriteToDigitBCD(adcRAW);
  2695  0E4D  1283               	bcf	3,5	;RP0=0, select bank0
  2696  0E4E  1303               	bcf	3,6	;RP1=0, select bank0
  2697  0E4F  0823               	movf	_adcRAW+1,w	;volatile
  2698  0E50  00CE               	movwf	lcdWriteToDigitBCD@data+1
  2699  0E51  0822               	movf	_adcRAW,w	;volatile
  2700  0E52  00CD               	movwf	lcdWriteToDigitBCD@data
  2701  0E53  120A  118A  25BD  120A  158A  	fcall	_lcdWriteToDigitBCD
  2702                           
  2703                           ;ADC.c: 25: adcConvertMM(adcRAW);
  2704  0E58  1283               	bcf	3,5	;RP0=0, select bank0
  2705  0E59  1303               	bcf	3,6	;RP1=0, select bank0
  2706  0E5A  0823               	movf	_adcRAW+1,w	;volatile
  2707  0E5B  00E0               	movwf	adcConvertMM@adcRAW+1
  2708  0E5C  0822               	movf	_adcRAW,w	;volatile
  2709  0E5D  00DF               	movwf	adcConvertMM@adcRAW
  2710  0E5E  120A  118A  202D   	fcall	_adcConvertMM
  2711  0E61  0008               	return
  2712  0E62                     __end_of_ADCMain:	
  2713                           
  2714                           	psect	text13
  2715  05BD                     __ptext13:	
  2716 ;; *************** function _lcdWriteToDigitBCD *****************
  2717 ;; Defined at:
  2718 ;;		line 42 in file "LCD.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;  data            2    3[BANK0 ] unsigned int 
  2721 ;; Auto vars:     Size  Location     Type
  2722 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  2723 ;;  TenThouDigit    2   11[BANK0 ] unsigned int 
  2724 ;;  ThouDigit       2    9[BANK0 ] unsigned int 
  2725 ;;  HunsDigit       2    7[BANK0 ] unsigned int 
  2726 ;;  TensDigit       2    5[BANK0 ] unsigned int 
  2727 ;; Return value:  Size  Location     Type
  2728 ;;                  1    wreg      void 
  2729 ;; Registers used:
  2730 ;;		wreg, status,2, status,0, pclath, cstack
  2731 ;; Tracked objects:
  2732 ;;		On entry : 0/0
  2733 ;;		On exit  : 0/0
  2734 ;;		Unchanged: 0/0
  2735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2736 ;;      Params:         0       2       0       0       0
  2737 ;;      Locals:         0      10       0       0       0
  2738 ;;      Temps:          0       0       0       0       0
  2739 ;;      Totals:         0      12       0       0       0
  2740 ;;Total ram usage:       12 bytes
  2741 ;; Hardware stack levels used:    1
  2742 ;; Hardware stack levels required when called:    4
  2743 ;; This function calls:
  2744 ;;		_lcdWriteData
  2745 ;; This function is called by:
  2746 ;;		_main
  2747 ;;		_ADCMain
  2748 ;; This function uses a non-reentrant model
  2749 ;;
  2750                           
  2751                           
  2752                           ;psect for function _lcdWriteToDigitBCD
  2753  05BD                     _lcdWriteToDigitBCD:	
  2754                           
  2755                           ;LCD.c: 43: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  2756                           ;LCD.c: 46: OnesDigit = data;
  2757                           
  2758                           ;incstack = 0
  2759                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  2760  05BD  1283               	bcf	3,5	;RP0=0, select bank0
  2761  05BE  1303               	bcf	3,6	;RP1=0, select bank0
  2762  05BF  084E               	movf	lcdWriteToDigitBCD@data+1,w
  2763  05C0  00D8               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2764  05C1  084D               	movf	lcdWriteToDigitBCD@data,w
  2765  05C2  00D7               	movwf	lcdWriteToDigitBCD@OnesDigit
  2766                           
  2767                           ;LCD.c: 47: TensDigit = 0;
  2768  05C3  01CF               	clrf	lcdWriteToDigitBCD@TensDigit
  2769  05C4  01D0               	clrf	lcdWriteToDigitBCD@TensDigit+1
  2770                           
  2771                           ;LCD.c: 48: HunsDigit = 0;
  2772  05C5  01D1               	clrf	lcdWriteToDigitBCD@HunsDigit
  2773  05C6  01D2               	clrf	lcdWriteToDigitBCD@HunsDigit+1
  2774                           
  2775                           ;LCD.c: 49: ThouDigit = 0;
  2776  05C7  01D3               	clrf	lcdWriteToDigitBCD@ThouDigit
  2777  05C8  01D4               	clrf	lcdWriteToDigitBCD@ThouDigit+1
  2778                           
  2779                           ;LCD.c: 50: TenThouDigit = 0;
  2780  05C9  01D5               	clrf	lcdWriteToDigitBCD@TenThouDigit
  2781  05CA  01D6               	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  2782  05CB                     l1679:	
  2783                           ;LCD.c: 53: while (OnesDigit >= 10000){
  2784                           
  2785  05CB  3027               	movlw	39
  2786  05CC  0258               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2787  05CD  3010               	movlw	16
  2788  05CE  1903               	skipnz
  2789  05CF  0257               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2790  05D0  1C03               	btfss	3,0
  2791  05D1  2DEF               	goto	l1685
  2792                           
  2793                           ;LCD.c: 54: OnesDigit = OnesDigit - 10000;
  2794  05D2  0857               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2795  05D3  3EF0               	addlw	240
  2796  05D4  00D7               	movwf	lcdWriteToDigitBCD@OnesDigit
  2797  05D5  0858               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2798  05D6  1803               	skipnc
  2799  05D7  3E01               	addlw	1
  2800  05D8  3ED8               	addlw	216
  2801  05D9  00D8               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2802                           
  2803                           ;LCD.c: 55: TenThouDigit++;
  2804  05DA  3001               	movlw	1
  2805  05DB  07D5               	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  2806  05DC  1803               	skipnc
  2807  05DD  0AD6               	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2808  05DE  3000               	movlw	0
  2809  05DF  07D6               	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2810  05E0  2DCB               	goto	l1679
  2811  05E1                     l1681:	
  2812                           ;LCD.c: 56: }
  2813                           ;LCD.c: 58: while (OnesDigit >= 1000){
  2814                           
  2815                           
  2816                           ;LCD.c: 59: OnesDigit = OnesDigit - 1000;
  2817  05E1  0857               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2818  05E2  3E18               	addlw	24
  2819  05E3  00D7               	movwf	lcdWriteToDigitBCD@OnesDigit
  2820  05E4  0858               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2821  05E5  1803               	skipnc
  2822  05E6  3E01               	addlw	1
  2823  05E7  3EFC               	addlw	252
  2824  05E8  00D8               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2825                           
  2826                           ;LCD.c: 60: ThouDigit++;
  2827  05E9  3001               	movlw	1
  2828  05EA  07D3               	addwf	lcdWriteToDigitBCD@ThouDigit,f
  2829  05EB  1803               	skipnc
  2830  05EC  0AD4               	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  2831  05ED  3000               	movlw	0
  2832  05EE  07D4               	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  2833  05EF                     l1685:	
  2834  05EF  3003               	movlw	3
  2835  05F0  0258               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2836  05F1  30E8               	movlw	232
  2837  05F2  1903               	skipnz
  2838  05F3  0257               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2839  05F4  1C03               	btfss	3,0
  2840  05F5  2E05               	goto	l1691
  2841  05F6  2DE1               	goto	l1681
  2842  05F7                     l1687:	
  2843                           ;LCD.c: 61: }
  2844                           ;LCD.c: 63: while (OnesDigit >= 100){
  2845                           
  2846                           
  2847                           ;LCD.c: 64: OnesDigit = OnesDigit - 100;
  2848  05F7  0857               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2849  05F8  3E9C               	addlw	156
  2850  05F9  00D7               	movwf	lcdWriteToDigitBCD@OnesDigit
  2851  05FA  0858               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2852  05FB  1803               	skipnc
  2853  05FC  3E01               	addlw	1
  2854  05FD  3EFF               	addlw	255
  2855  05FE  00D8               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2856                           
  2857                           ;LCD.c: 65: HunsDigit++;
  2858  05FF  3001               	movlw	1
  2859  0600  07D1               	addwf	lcdWriteToDigitBCD@HunsDigit,f
  2860  0601  1803               	skipnc
  2861  0602  0AD2               	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  2862  0603  3000               	movlw	0
  2863  0604  07D2               	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  2864  0605                     l1691:	
  2865  0605  3000               	movlw	0
  2866  0606  0258               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2867  0607  3064               	movlw	100
  2868  0608  1903               	skipnz
  2869  0609  0257               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2870  060A  1C03               	btfss	3,0
  2871  060B  2E1B               	goto	l1697
  2872  060C  2DF7               	goto	l1687
  2873  060D                     l1693:	
  2874                           ;LCD.c: 66: }
  2875                           ;LCD.c: 68: while (OnesDigit >= 10){
  2876                           
  2877                           
  2878                           ;LCD.c: 69: OnesDigit = OnesDigit - 10;
  2879  060D  0857               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2880  060E  3EF6               	addlw	246
  2881  060F  00D7               	movwf	lcdWriteToDigitBCD@OnesDigit
  2882  0610  0858               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2883  0611  1803               	skipnc
  2884  0612  3E01               	addlw	1
  2885  0613  3EFF               	addlw	255
  2886  0614  00D8               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2887                           
  2888                           ;LCD.c: 70: TensDigit++;
  2889  0615  3001               	movlw	1
  2890  0616  07CF               	addwf	lcdWriteToDigitBCD@TensDigit,f
  2891  0617  1803               	skipnc
  2892  0618  0AD0               	incf	lcdWriteToDigitBCD@TensDigit+1,f
  2893  0619  3000               	movlw	0
  2894  061A  07D0               	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  2895  061B                     l1697:	
  2896  061B  3000               	movlw	0
  2897  061C  0258               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2898  061D  300A               	movlw	10
  2899  061E  1903               	skipnz
  2900  061F  0257               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2901  0620  1803               	skipnc
  2902  0621  2E0D               	goto	l1693
  2903                           
  2904                           ;LCD.c: 71: }
  2905                           ;LCD.c: 73: if (TenThouDigit > 0)
  2906  0622  0855               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  2907  0623  0456               	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  2908  0624  1903               	btfsc	3,2
  2909  0625  2E2D               	goto	l1703
  2910                           
  2911                           ;LCD.c: 74: lcdWriteData((unsigned int)TenThouDigit + 48);
  2912  0626  0855               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  2913  0627  3E30               	addlw	48
  2914  0628  120A  158A  25ED  120A  118A  	fcall	_lcdWriteData
  2915  062D                     l1703:	
  2916                           
  2917                           ;LCD.c: 76: if (ThouDigit > 0)
  2918  062D  1283               	bcf	3,5	;RP0=0, select bank0
  2919  062E  1303               	bcf	3,6	;RP1=0, select bank0
  2920  062F  0853               	movf	lcdWriteToDigitBCD@ThouDigit,w
  2921  0630  0454               	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  2922  0631  1903               	btfsc	3,2
  2923  0632  2E3A               	goto	l212
  2924                           
  2925                           ;LCD.c: 77: lcdWriteData((unsigned int)ThouDigit + 48);
  2926  0633  0853               	movf	lcdWriteToDigitBCD@ThouDigit,w
  2927  0634  3E30               	addlw	48
  2928  0635  120A  158A  25ED  120A  118A  	fcall	_lcdWriteData
  2929  063A                     l212:	
  2930                           
  2931                           ;LCD.c: 79: lcdWriteData((unsigned int)HunsDigit + 48);
  2932  063A  1283               	bcf	3,5	;RP0=0, select bank0
  2933  063B  1303               	bcf	3,6	;RP1=0, select bank0
  2934  063C  0851               	movf	lcdWriteToDigitBCD@HunsDigit,w
  2935  063D  3E30               	addlw	48
  2936  063E  120A  158A  25ED  120A  118A  	fcall	_lcdWriteData
  2937                           
  2938                           ;LCD.c: 80: lcdWriteData((unsigned int)TensDigit + 48);
  2939  0643  1283               	bcf	3,5	;RP0=0, select bank0
  2940  0644  1303               	bcf	3,6	;RP1=0, select bank0
  2941  0645  084F               	movf	lcdWriteToDigitBCD@TensDigit,w
  2942  0646  3E30               	addlw	48
  2943  0647  120A  158A  25ED  120A  118A  	fcall	_lcdWriteData
  2944                           
  2945                           ;LCD.c: 81: lcdWriteData((unsigned int)OnesDigit + 48);
  2946  064C  1283               	bcf	3,5	;RP0=0, select bank0
  2947  064D  1303               	bcf	3,6	;RP1=0, select bank0
  2948  064E  0857               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2949  064F  3E30               	addlw	48
  2950  0650  120A  158A  25ED   	fcall	_lcdWriteData
  2951  0653  0008               	return
  2952  0654                     __end_of_lcdWriteToDigitBCD:	
  2953                           
  2954                           	psect	text14
  2955  0DED                     __ptext14:	
  2956 ;; *************** function _lcdWriteData *****************
  2957 ;; Defined at:
  2958 ;;		line 20 in file "LCD.c"
  2959 ;; Parameters:    Size  Location     Type
  2960 ;;  databyte        1    wreg     unsigned char 
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;  databyte        1    2[BANK0 ] unsigned char 
  2963 ;; Return value:  Size  Location     Type
  2964 ;;                  1    wreg      void 
  2965 ;; Registers used:
  2966 ;;		wreg
  2967 ;; Tracked objects:
  2968 ;;		On entry : 0/0
  2969 ;;		On exit  : 0/0
  2970 ;;		Unchanged: 0/0
  2971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2972 ;;      Params:         0       0       0       0       0
  2973 ;;      Locals:         0       1       0       0       0
  2974 ;;      Temps:          0       2       0       0       0
  2975 ;;      Totals:         0       3       0       0       0
  2976 ;;Total ram usage:        3 bytes
  2977 ;; Hardware stack levels used:    1
  2978 ;; Hardware stack levels required when called:    3
  2979 ;; This function calls:
  2980 ;;		Nothing
  2981 ;; This function is called by:
  2982 ;;		_lcdWriteToDigitBCD
  2983 ;;		_lcdWriteString
  2984 ;; This function uses a non-reentrant model
  2985 ;;
  2986                           
  2987                           
  2988                           ;psect for function _lcdWriteData
  2989  0DED                     _lcdWriteData:	
  2990                           
  2991                           ;incstack = 0
  2992                           ; Regs used in _lcdWriteData: [wreg]
  2993                           ;lcdWriteData@databyte stored from wreg
  2994  0DED  1283               	bcf	3,5	;RP0=0, select bank0
  2995  0DEE  1303               	bcf	3,6	;RP1=0, select bank0
  2996  0DEF  00CC               	movwf	lcdWriteData@databyte
  2997                           
  2998                           ;LCD.c: 21: RE2 = 0;
  2999  0DF0  1109               	bcf	9,2	;volatile
  3000                           
  3001                           ;LCD.c: 22: RE1 = 0;
  3002  0DF1  1089               	bcf	9,1	;volatile
  3003                           
  3004                           ;LCD.c: 23: RE0 = 1;
  3005  0DF2  1409               	bsf	9,0	;volatile
  3006                           
  3007                           ;LCD.c: 24: PORTD = databyte;
  3008  0DF3  084C               	movf	lcdWriteData@databyte,w
  3009  0DF4  0088               	movwf	8	;volatile
  3010                           
  3011                           ;LCD.c: 25: RE2 = 1;
  3012  0DF5  1509               	bsf	9,2	;volatile
  3013                           
  3014                           ;LCD.c: 26: RE2 = 0;
  3015  0DF6  1109               	bcf	9,2	;volatile
  3016                           
  3017                           ;LCD.c: 27: _delay((unsigned long)((1)*(20000000/4000.0)));
  3018  0DF7  3007               	movlw	7
  3019  0DF8  00CB               	movwf	??_lcdWriteData+1
  3020  0DF9  307D               	movlw	125
  3021  0DFA  00CA               	movwf	??_lcdWriteData
  3022  0DFB                     u2027:	
  3023  0DFB  0BCA               	decfsz	??_lcdWriteData,f
  3024  0DFC  2DFB               	goto	u2027
  3025  0DFD  0BCB               	decfsz	??_lcdWriteData+1,f
  3026  0DFE  2DFB               	goto	u2027
  3027  0DFF  0008               	return
  3028  0E00                     __end_of_lcdWriteData:	
  3029                           
  3030                           	psect	text15
  3031  0DA6                     __ptext15:	
  3032 ;; *************** function _lcdSetCursor *****************
  3033 ;; Defined at:
  3034 ;;		line 31 in file "LCD.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;  address         1    wreg     unsigned char 
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;  address         1    3[BANK0 ] unsigned char 
  3039 ;; Return value:  Size  Location     Type
  3040 ;;                  1    wreg      void 
  3041 ;; Registers used:
  3042 ;;		wreg, status,2, status,0, pclath, cstack
  3043 ;; Tracked objects:
  3044 ;;		On entry : 0/0
  3045 ;;		On exit  : 0/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3048 ;;      Params:         0       0       0       0       0
  3049 ;;      Locals:         0       1       0       0       0
  3050 ;;      Temps:          0       0       0       0       0
  3051 ;;      Totals:         0       1       0       0       0
  3052 ;;Total ram usage:        1 bytes
  3053 ;; Hardware stack levels used:    1
  3054 ;; Hardware stack levels required when called:    4
  3055 ;; This function calls:
  3056 ;;		_lcdWriteControl
  3057 ;; This function is called by:
  3058 ;;		_main
  3059 ;;		_ADCMain
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           
  3064                           ;psect for function _lcdSetCursor
  3065  0DA6                     _lcdSetCursor:	
  3066                           
  3067                           ;incstack = 0
  3068                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  3069                           ;lcdSetCursor@address stored from wreg
  3070  0DA6  1283               	bcf	3,5	;RP0=0, select bank0
  3071  0DA7  1303               	bcf	3,6	;RP1=0, select bank0
  3072  0DA8  00CD               	movwf	lcdSetCursor@address
  3073                           
  3074                           ;LCD.c: 32: address |= 0b10000000;
  3075  0DA9  17CD               	bsf	lcdSetCursor@address,7
  3076                           
  3077                           ;LCD.c: 33: lcdWriteControl(address);
  3078  0DAA  084D               	movf	lcdSetCursor@address,w
  3079  0DAB  120A  158A  2600   	fcall	_lcdWriteControl
  3080  0DAE  0008               	return
  3081  0DAF                     __end_of_lcdSetCursor:	
  3082                           
  3083                           	psect	text16
  3084  0E00                     __ptext16:	
  3085 ;; *************** function _lcdWriteControl *****************
  3086 ;; Defined at:
  3087 ;;		line 9 in file "LCD.c"
  3088 ;; Parameters:    Size  Location     Type
  3089 ;;  databyte        1    wreg     unsigned char 
  3090 ;; Auto vars:     Size  Location     Type
  3091 ;;  databyte        1    2[BANK0 ] unsigned char 
  3092 ;; Return value:  Size  Location     Type
  3093 ;;                  1    wreg      void 
  3094 ;; Registers used:
  3095 ;;		wreg
  3096 ;; Tracked objects:
  3097 ;;		On entry : 0/0
  3098 ;;		On exit  : 0/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3101 ;;      Params:         0       0       0       0       0
  3102 ;;      Locals:         0       1       0       0       0
  3103 ;;      Temps:          0       2       0       0       0
  3104 ;;      Totals:         0       3       0       0       0
  3105 ;;Total ram usage:        3 bytes
  3106 ;; Hardware stack levels used:    1
  3107 ;; Hardware stack levels required when called:    3
  3108 ;; This function calls:
  3109 ;;		Nothing
  3110 ;; This function is called by:
  3111 ;;		_lcdSetCursor
  3112 ;;		_setupLCD
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           
  3117                           ;psect for function _lcdWriteControl
  3118  0E00                     _lcdWriteControl:	
  3119                           
  3120                           ;incstack = 0
  3121                           ; Regs used in _lcdWriteControl: [wreg]
  3122                           ;lcdWriteControl@databyte stored from wreg
  3123  0E00  1283               	bcf	3,5	;RP0=0, select bank0
  3124  0E01  1303               	bcf	3,6	;RP1=0, select bank0
  3125  0E02  00CC               	movwf	lcdWriteControl@databyte
  3126                           
  3127                           ;LCD.c: 10: RE2 = 0;
  3128  0E03  1109               	bcf	9,2	;volatile
  3129                           
  3130                           ;LCD.c: 11: RE1 = 0;
  3131  0E04  1089               	bcf	9,1	;volatile
  3132                           
  3133                           ;LCD.c: 12: RE0 = 0;
  3134  0E05  1009               	bcf	9,0	;volatile
  3135                           
  3136                           ;LCD.c: 13: PORTD = databyte;
  3137  0E06  084C               	movf	lcdWriteControl@databyte,w
  3138  0E07  0088               	movwf	8	;volatile
  3139                           
  3140                           ;LCD.c: 14: RE2 = 1;
  3141  0E08  1509               	bsf	9,2	;volatile
  3142                           
  3143                           ;LCD.c: 15: RE2 = 0;
  3144  0E09  1109               	bcf	9,2	;volatile
  3145                           
  3146                           ;LCD.c: 16: _delay((unsigned long)((2)*(20000000/4000.0)));
  3147  0E0A  300D               	movlw	13
  3148  0E0B  00CB               	movwf	??_lcdWriteControl+1
  3149  0E0C  30FB               	movlw	251
  3150  0E0D  00CA               	movwf	??_lcdWriteControl
  3151  0E0E                     u2037:	
  3152  0E0E  0BCA               	decfsz	??_lcdWriteControl,f
  3153  0E0F  2E0E               	goto	u2037
  3154  0E10  0BCB               	decfsz	??_lcdWriteControl+1,f
  3155  0E11  2E0E               	goto	u2037
  3156  0E12  2E13               	nop2
  3157  0E13  0008               	return
  3158  0E14                     __end_of_lcdWriteControl:	
  3159                           
  3160                           	psect	text17
  3161  0FBB                     __ptext17:	
  3162 ;; *************** function _getADC *****************
  3163 ;; Defined at:
  3164 ;;		line 29 in file "ADC.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;		None
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;		None
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  2  398[None  ] unsigned int 
  3171 ;; Registers used:
  3172 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3178 ;;      Params:         0       0       0       0       0
  3179 ;;      Locals:         0       0       0       0       0
  3180 ;;      Temps:          0       2       0       0       0
  3181 ;;      Totals:         0       2       0       0       0
  3182 ;;Total ram usage:        2 bytes
  3183 ;; Hardware stack levels used:    1
  3184 ;; Hardware stack levels required when called:    3
  3185 ;; This function calls:
  3186 ;;		Nothing
  3187 ;; This function is called by:
  3188 ;;		_ADCMain
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           
  3193                           ;psect for function _getADC
  3194  0FBB                     _getADC:	
  3195                           
  3196                           ;ADC.c: 31: ADRESH = 0;
  3197                           
  3198                           ;incstack = 0
  3199                           ; Regs used in _getADC: [wreg-fsr0h+status,2+status,0]
  3200  0FBB  1283               	bcf	3,5	;RP0=0, select bank0
  3201  0FBC  1303               	bcf	3,6	;RP1=0, select bank0
  3202  0FBD  019E               	clrf	30	;volatile
  3203                           
  3204                           ;ADC.c: 32: ADRESL = 0;
  3205  0FBE  1683               	bsf	3,5	;RP0=1, select bank1
  3206  0FBF  1303               	bcf	3,6	;RP1=0, select bank1
  3207  0FC0  019E               	clrf	30	;volatile
  3208                           
  3209                           ;ADC.c: 34: GO = 1;
  3210  0FC1  1283               	bcf	3,5	;RP0=0, select bank0
  3211  0FC2  1303               	bcf	3,6	;RP1=0, select bank0
  3212  0FC3  151F               	bsf	31,2	;volatile
  3213  0FC4                     l443:	
  3214                           ;ADC.c: 35: while(GO) continue;
  3215                           
  3216  0FC4  191F               	btfsc	31,2	;volatile
  3217  0FC5  2FC4               	goto	l443
  3218                           
  3219                           ;ADC.c: 39: adcRAW = (4*ADRESH);
  3220  0FC6  081E               	movf	30,w	;volatile
  3221  0FC7  00CA               	movwf	??_getADC
  3222  0FC8  01CB               	clrf	??_getADC+1
  3223  0FC9  1003               	clrc
  3224  0FCA  0DCA               	rlf	??_getADC,f
  3225  0FCB  0DCB               	rlf	??_getADC+1,f
  3226  0FCC  1003               	clrc
  3227  0FCD  0DCA               	rlf	??_getADC,f
  3228  0FCE  0DCB               	rlf	??_getADC+1,f
  3229  0FCF  084A               	movf	??_getADC,w
  3230  0FD0  00A2               	movwf	_adcRAW	;volatile
  3231  0FD1  084B               	movf	??_getADC+1,w
  3232  0FD2  00A3               	movwf	_adcRAW+1	;volatile
  3233                           
  3234                           ;ADC.c: 41: switch(ADRESL){
  3235  0FD3  2FF2               	goto	l1729
  3236  0FD4                     l1723:	
  3237                           ;ADC.c: 42: case 0b01000000: adcRAW = adcRAW + 1;
  3238                           
  3239  0FD4  1283               	bcf	3,5	;RP0=0, select bank0
  3240  0FD5  0822               	movf	_adcRAW,w	;volatile
  3241  0FD6  3E01               	addlw	1
  3242  0FD7  00A2               	movwf	_adcRAW	;volatile
  3243  0FD8  0823               	movf	_adcRAW+1,w	;volatile
  3244  0FD9  1803               	skipnc
  3245  0FDA  3E01               	addlw	1
  3246  0FDB  3E00               	addlw	0
  3247  0FDC  00A3               	movwf	_adcRAW+1	;volatile
  3248                           
  3249                           ;ADC.c: 43: break;
  3250  0FDD  0008               	return
  3251  0FDE                     l1725:	
  3252                           ;ADC.c: 44: case 0b10000000: adcRAW = adcRAW + 2;
  3253                           
  3254  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  3255  0FDF  0822               	movf	_adcRAW,w	;volatile
  3256  0FE0  3E02               	addlw	2
  3257  0FE1  00A2               	movwf	_adcRAW	;volatile
  3258  0FE2  0823               	movf	_adcRAW+1,w	;volatile
  3259  0FE3  1803               	skipnc
  3260  0FE4  3E01               	addlw	1
  3261  0FE5  3E00               	addlw	0
  3262  0FE6  00A3               	movwf	_adcRAW+1	;volatile
  3263                           
  3264                           ;ADC.c: 45: break;
  3265  0FE7  0008               	return
  3266  0FE8                     l1727:	
  3267                           ;ADC.c: 46: case 0b11000000: adcRAW = adcRAW + 3;
  3268                           
  3269  0FE8  1283               	bcf	3,5	;RP0=0, select bank0
  3270  0FE9  0822               	movf	_adcRAW,w	;volatile
  3271  0FEA  3E03               	addlw	3
  3272  0FEB  00A2               	movwf	_adcRAW	;volatile
  3273  0FEC  0823               	movf	_adcRAW+1,w	;volatile
  3274  0FED  1803               	skipnc
  3275  0FEE  3E01               	addlw	1
  3276  0FEF  3E00               	addlw	0
  3277  0FF0  00A3               	movwf	_adcRAW+1	;volatile
  3278                           
  3279                           ;ADC.c: 49: }
  3280                           
  3281                           ;ADC.c: 48: default: adcRAW = adcRAW;
  3282                           
  3283                           ;ADC.c: 47: break;
  3284  0FF1  0008               	return
  3285  0FF2                     l1729:	
  3286  0FF2  1683               	bsf	3,5	;RP0=1, select bank1
  3287  0FF3  1303               	bcf	3,6	;RP1=0, select bank1
  3288  0FF4  081E               	movf	30,w	;volatile
  3289                           
  3290                           ; Switch size 1, requested type "space"
  3291                           ; Number of cases is 3, Range of values is 64 to 192
  3292                           ; switch strategies available:
  3293                           ; Name         Instructions Cycles
  3294                           ; simple_byte           10     6 (average)
  3295                           ; jumptable            263     9 (fixed)
  3296                           ;	Chosen strategy is simple_byte
  3297  0FF5  3A40               	xorlw	64	; case 64
  3298  0FF6  1903               	skipnz
  3299  0FF7  2FD4               	goto	l1723
  3300  0FF8  3AC0               	xorlw	192	; case 128
  3301  0FF9  1903               	skipnz
  3302  0FFA  2FDE               	goto	l1725
  3303  0FFB  3A40               	xorlw	64	; case 192
  3304  0FFC  1903               	skipnz
  3305  0FFD  2FE8               	goto	l1727
  3306  0FFE  2FFF               	goto	l452
  3307  0FFF                     l452:	
  3308                           ;ADC.c: 51: return(adcRAW);
  3309                           ;	Return value of _getADC is never used
  3310                           
  3311  0FFF  0008               	return
  3312  1000                     __end_of_getADC:	
  3313                           
  3314                           	psect	text18
  3315  002D                     __ptext18:	
  3316 ;; *************** function _adcConvertMM *****************
  3317 ;; Defined at:
  3318 ;;		line 59 in file "ADC.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  adcRAW          2   21[BANK0 ] unsigned int 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;		None
  3323 ;; Return value:  Size  Location     Type
  3324 ;;                  2   21[BANK0 ] unsigned int 
  3325 ;; Registers used:
  3326 ;;		wreg, status,2, status,0, pclath, cstack
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3332 ;;      Params:         0       2       0       0       0
  3333 ;;      Locals:         0       0       0       0       0
  3334 ;;      Temps:          0       8       0       0       0
  3335 ;;      Totals:         0      10       0       0       0
  3336 ;;Total ram usage:       10 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; Hardware stack levels required when called:    4
  3339 ;; This function calls:
  3340 ;;		___aldiv
  3341 ;;		___lwdiv
  3342 ;;		___wmul
  3343 ;; This function is called by:
  3344 ;;		_ADCMain
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           
  3349                           ;psect for function _adcConvertMM
  3350  002D                     _adcConvertMM:	
  3351                           
  3352                           ;ADC.c: 61: if (adcRAW < 517 && adcRAW >= 513)
  3353                           
  3354                           ;incstack = 0
  3355                           ; Regs used in _adcConvertMM: [wreg+status,2+status,0+pclath+cstack]
  3356  002D  3002               	movlw	2
  3357  002E  1283               	bcf	3,5	;RP0=0, select bank0
  3358  002F  1303               	bcf	3,6	;RP1=0, select bank0
  3359  0030  0260               	subwf	adcConvertMM@adcRAW+1,w
  3360  0031  3005               	movlw	5
  3361  0032  1903               	skipnz
  3362  0033  025F               	subwf	adcConvertMM@adcRAW,w
  3363  0034  1803               	skipnc
  3364  0035  2896               	goto	l1737
  3365  0036  3002               	movlw	2
  3366  0037  0260               	subwf	adcConvertMM@adcRAW+1,w
  3367  0038  3001               	movlw	1
  3368  0039  1903               	skipnz
  3369  003A  025F               	subwf	adcConvertMM@adcRAW,w
  3370  003B  1C03               	skipc
  3371  003C  2896               	goto	l1737
  3372                           
  3373                           ;ADC.c: 62: Distance = (((51700 - adcRAW*100)/4) + 100);
  3374  003D  3000               	movlw	0
  3375  003E  00D3               	movwf	___aldiv@divisor+3
  3376  003F  3000               	movlw	0
  3377  0040  00D2               	movwf	___aldiv@divisor+2
  3378  0041  3000               	movlw	0
  3379  0042  00D1               	movwf	___aldiv@divisor+1
  3380  0043  3004               	movlw	4
  3381  0044  00D0               	movwf	___aldiv@divisor
  3382  0045  30F4               	movlw	244
  3383  0046  00E1               	movwf	??_adcConvertMM
  3384  0047  30C9               	movlw	201
  3385  0048  00E2               	movwf	??_adcConvertMM+1
  3386  0049  3000               	movlw	0
  3387  004A  00E3               	movwf	??_adcConvertMM+2
  3388  004B  3000               	movlw	0
  3389  004C  00E4               	movwf	??_adcConvertMM+3
  3390  004D  0860               	movf	adcConvertMM@adcRAW+1,w
  3391  004E  00CB               	movwf	___wmul@multiplier+1
  3392  004F  085F               	movf	adcConvertMM@adcRAW,w
  3393  0050  00CA               	movwf	___wmul@multiplier
  3394  0051  3064               	movlw	100
  3395  0052  00CC               	movwf	___wmul@multiplicand
  3396  0053  3000               	movlw	0
  3397  0054  00CD               	movwf	___wmul@multiplicand+1
  3398  0055  120A  158A  2662  120A  118A  	fcall	___wmul
  3399  005A  1283               	bcf	3,5	;RP0=0, select bank0
  3400  005B  1303               	bcf	3,6	;RP1=0, select bank0
  3401  005C  084A               	movf	?___wmul,w
  3402  005D  00E5               	movwf	??_adcConvertMM+4
  3403  005E  084B               	movf	?___wmul+1,w
  3404  005F  00E6               	movwf	??_adcConvertMM+5
  3405  0060  01E7               	clrf	??_adcConvertMM+6
  3406  0061  01E8               	clrf	??_adcConvertMM+7
  3407  0062  09E5               	comf	??_adcConvertMM+4,f
  3408  0063  09E6               	comf	??_adcConvertMM+5,f
  3409  0064  09E7               	comf	??_adcConvertMM+6,f
  3410  0065  09E8               	comf	??_adcConvertMM+7,f
  3411  0066  0AE5               	incf	??_adcConvertMM+4,f
  3412  0067  1903               	skipnz
  3413  0068  0AE6               	incf	??_adcConvertMM+5,f
  3414  0069  1903               	skipnz
  3415  006A  0AE7               	incf	??_adcConvertMM+6,f
  3416  006B  1903               	skipnz
  3417  006C  0AE8               	incf	??_adcConvertMM+7,f
  3418  006D  0865               	movf	??_adcConvertMM+4,w
  3419  006E  07E1               	addwf	??_adcConvertMM,f
  3420  006F  0866               	movf	??_adcConvertMM+5,w
  3421  0070  1803               	skipnc
  3422  0071  0F66               	incfsz	??_adcConvertMM+5,w
  3423  0072  2874               	goto	u1290
  3424  0073  2875               	goto	u1291
  3425  0074                     u1290:	
  3426  0074  07E2               	addwf	??_adcConvertMM+1,f
  3427  0075                     u1291:	
  3428  0075  0867               	movf	??_adcConvertMM+6,w
  3429  0076  1803               	skipnc
  3430  0077  0F67               	incfsz	??_adcConvertMM+6,w
  3431  0078  287A               	goto	u1292
  3432  0079  287B               	goto	u1293
  3433  007A                     u1292:	
  3434  007A  07E3               	addwf	??_adcConvertMM+2,f
  3435  007B                     u1293:	
  3436  007B  0868               	movf	??_adcConvertMM+7,w
  3437  007C  1803               	skipnc
  3438  007D  0A68               	incf	??_adcConvertMM+7,w
  3439  007E  07E4               	addwf	??_adcConvertMM+3,f
  3440  007F  0864               	movf	??_adcConvertMM+3,w
  3441  0080  00D7               	movwf	___aldiv@dividend+3
  3442  0081  0863               	movf	??_adcConvertMM+2,w
  3443  0082  00D6               	movwf	___aldiv@dividend+2
  3444  0083  0862               	movf	??_adcConvertMM+1,w
  3445  0084  00D5               	movwf	___aldiv@dividend+1
  3446  0085  0861               	movf	??_adcConvertMM,w
  3447  0086  00D4               	movwf	___aldiv@dividend
  3448  0087  120A  118A  2654  120A  118A  	fcall	___aldiv
  3449  008C  1283               	bcf	3,5	;RP0=0, select bank0
  3450  008D  1303               	bcf	3,6	;RP1=0, select bank0
  3451  008E  0850               	movf	?___aldiv,w
  3452  008F  3E64               	addlw	100
  3453  0090  00A0               	movwf	_Distance	;volatile
  3454  0091  0851               	movf	?___aldiv+1,w
  3455  0092  1803               	skipnc
  3456  0093  3E01               	addlw	1
  3457  0094  3E00               	addlw	0
  3458  0095  00A1               	movwf	_Distance+1	;volatile
  3459  0096                     l1737:	
  3460                           
  3461                           ;ADC.c: 64: if (adcRAW < 513 && adcRAW >= 393)
  3462  0096  3002               	movlw	2
  3463  0097  0260               	subwf	adcConvertMM@adcRAW+1,w
  3464  0098  3001               	movlw	1
  3465  0099  1903               	skipnz
  3466  009A  025F               	subwf	adcConvertMM@adcRAW,w
  3467  009B  1803               	skipnc
  3468  009C  28FD               	goto	l1743
  3469  009D  3001               	movlw	1
  3470  009E  0260               	subwf	adcConvertMM@adcRAW+1,w
  3471  009F  3089               	movlw	137
  3472  00A0  1903               	skipnz
  3473  00A1  025F               	subwf	adcConvertMM@adcRAW,w
  3474  00A2  1C03               	skipc
  3475  00A3  28FD               	goto	l1743
  3476                           
  3477                           ;ADC.c: 65: Distance = (((51300 - adcRAW*100)/120) + 200);
  3478  00A4  3000               	movlw	0
  3479  00A5  00D3               	movwf	___aldiv@divisor+3
  3480  00A6  3000               	movlw	0
  3481  00A7  00D2               	movwf	___aldiv@divisor+2
  3482  00A8  3000               	movlw	0
  3483  00A9  00D1               	movwf	___aldiv@divisor+1
  3484  00AA  3078               	movlw	120
  3485  00AB  00D0               	movwf	___aldiv@divisor
  3486  00AC  3064               	movlw	100
  3487  00AD  00E1               	movwf	??_adcConvertMM
  3488  00AE  30C8               	movlw	200
  3489  00AF  00E2               	movwf	??_adcConvertMM+1
  3490  00B0  3000               	movlw	0
  3491  00B1  00E3               	movwf	??_adcConvertMM+2
  3492  00B2  3000               	movlw	0
  3493  00B3  00E4               	movwf	??_adcConvertMM+3
  3494  00B4  0860               	movf	adcConvertMM@adcRAW+1,w
  3495  00B5  00CB               	movwf	___wmul@multiplier+1
  3496  00B6  085F               	movf	adcConvertMM@adcRAW,w
  3497  00B7  00CA               	movwf	___wmul@multiplier
  3498  00B8  3064               	movlw	100
  3499  00B9  00CC               	movwf	___wmul@multiplicand
  3500  00BA  3000               	movlw	0
  3501  00BB  00CD               	movwf	___wmul@multiplicand+1
  3502  00BC  120A  158A  2662  120A  118A  	fcall	___wmul
  3503  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  3504  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  3505  00C3  084A               	movf	?___wmul,w
  3506  00C4  00E5               	movwf	??_adcConvertMM+4
  3507  00C5  084B               	movf	?___wmul+1,w
  3508  00C6  00E6               	movwf	??_adcConvertMM+5
  3509  00C7  01E7               	clrf	??_adcConvertMM+6
  3510  00C8  01E8               	clrf	??_adcConvertMM+7
  3511  00C9  09E5               	comf	??_adcConvertMM+4,f
  3512  00CA  09E6               	comf	??_adcConvertMM+5,f
  3513  00CB  09E7               	comf	??_adcConvertMM+6,f
  3514  00CC  09E8               	comf	??_adcConvertMM+7,f
  3515  00CD  0AE5               	incf	??_adcConvertMM+4,f
  3516  00CE  1903               	skipnz
  3517  00CF  0AE6               	incf	??_adcConvertMM+5,f
  3518  00D0  1903               	skipnz
  3519  00D1  0AE7               	incf	??_adcConvertMM+6,f
  3520  00D2  1903               	skipnz
  3521  00D3  0AE8               	incf	??_adcConvertMM+7,f
  3522  00D4  0865               	movf	??_adcConvertMM+4,w
  3523  00D5  07E1               	addwf	??_adcConvertMM,f
  3524  00D6  0866               	movf	??_adcConvertMM+5,w
  3525  00D7  1803               	skipnc
  3526  00D8  0F66               	incfsz	??_adcConvertMM+5,w
  3527  00D9  28DB               	goto	u1320
  3528  00DA  28DC               	goto	u1321
  3529  00DB                     u1320:	
  3530  00DB  07E2               	addwf	??_adcConvertMM+1,f
  3531  00DC                     u1321:	
  3532  00DC  0867               	movf	??_adcConvertMM+6,w
  3533  00DD  1803               	skipnc
  3534  00DE  0F67               	incfsz	??_adcConvertMM+6,w
  3535  00DF  28E1               	goto	u1322
  3536  00E0  28E2               	goto	u1323
  3537  00E1                     u1322:	
  3538  00E1  07E3               	addwf	??_adcConvertMM+2,f
  3539  00E2                     u1323:	
  3540  00E2  0868               	movf	??_adcConvertMM+7,w
  3541  00E3  1803               	skipnc
  3542  00E4  0A68               	incf	??_adcConvertMM+7,w
  3543  00E5  07E4               	addwf	??_adcConvertMM+3,f
  3544  00E6  0864               	movf	??_adcConvertMM+3,w
  3545  00E7  00D7               	movwf	___aldiv@dividend+3
  3546  00E8  0863               	movf	??_adcConvertMM+2,w
  3547  00E9  00D6               	movwf	___aldiv@dividend+2
  3548  00EA  0862               	movf	??_adcConvertMM+1,w
  3549  00EB  00D5               	movwf	___aldiv@dividend+1
  3550  00EC  0861               	movf	??_adcConvertMM,w
  3551  00ED  00D4               	movwf	___aldiv@dividend
  3552  00EE  120A  118A  2654  120A  118A  	fcall	___aldiv
  3553  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  3554  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  3555  00F5  0850               	movf	?___aldiv,w
  3556  00F6  3EC8               	addlw	200
  3557  00F7  00A0               	movwf	_Distance	;volatile
  3558  00F8  0851               	movf	?___aldiv+1,w
  3559  00F9  1803               	skipnc
  3560  00FA  3E01               	addlw	1
  3561  00FB  3E00               	addlw	0
  3562  00FC  00A1               	movwf	_Distance+1	;volatile
  3563  00FD                     l1743:	
  3564                           
  3565                           ;ADC.c: 67: if (adcRAW < 393 && adcRAW >= 298)
  3566  00FD  3001               	movlw	1
  3567  00FE  0260               	subwf	adcConvertMM@adcRAW+1,w
  3568  00FF  3089               	movlw	137
  3569  0100  1903               	skipnz
  3570  0101  025F               	subwf	adcConvertMM@adcRAW,w
  3571  0102  1803               	skipnc
  3572  0103  2964               	goto	l1749
  3573  0104  3001               	movlw	1
  3574  0105  0260               	subwf	adcConvertMM@adcRAW+1,w
  3575  0106  302A               	movlw	42
  3576  0107  1903               	skipnz
  3577  0108  025F               	subwf	adcConvertMM@adcRAW,w
  3578  0109  1C03               	skipc
  3579  010A  2964               	goto	l1749
  3580                           
  3581                           ;ADC.c: 68: Distance = (((39300 - adcRAW*100)/95) + 300);
  3582  010B  3000               	movlw	0
  3583  010C  00D3               	movwf	___aldiv@divisor+3
  3584  010D  3000               	movlw	0
  3585  010E  00D2               	movwf	___aldiv@divisor+2
  3586  010F  3000               	movlw	0
  3587  0110  00D1               	movwf	___aldiv@divisor+1
  3588  0111  305F               	movlw	95
  3589  0112  00D0               	movwf	___aldiv@divisor
  3590  0113  3084               	movlw	132
  3591  0114  00E1               	movwf	??_adcConvertMM
  3592  0115  3099               	movlw	153
  3593  0116  00E2               	movwf	??_adcConvertMM+1
  3594  0117  3000               	movlw	0
  3595  0118  00E3               	movwf	??_adcConvertMM+2
  3596  0119  3000               	movlw	0
  3597  011A  00E4               	movwf	??_adcConvertMM+3
  3598  011B  0860               	movf	adcConvertMM@adcRAW+1,w
  3599  011C  00CB               	movwf	___wmul@multiplier+1
  3600  011D  085F               	movf	adcConvertMM@adcRAW,w
  3601  011E  00CA               	movwf	___wmul@multiplier
  3602  011F  3064               	movlw	100
  3603  0120  00CC               	movwf	___wmul@multiplicand
  3604  0121  3000               	movlw	0
  3605  0122  00CD               	movwf	___wmul@multiplicand+1
  3606  0123  120A  158A  2662  120A  118A  	fcall	___wmul
  3607  0128  1283               	bcf	3,5	;RP0=0, select bank0
  3608  0129  1303               	bcf	3,6	;RP1=0, select bank0
  3609  012A  084A               	movf	?___wmul,w
  3610  012B  00E5               	movwf	??_adcConvertMM+4
  3611  012C  084B               	movf	?___wmul+1,w
  3612  012D  00E6               	movwf	??_adcConvertMM+5
  3613  012E  01E7               	clrf	??_adcConvertMM+6
  3614  012F  01E8               	clrf	??_adcConvertMM+7
  3615  0130  09E5               	comf	??_adcConvertMM+4,f
  3616  0131  09E6               	comf	??_adcConvertMM+5,f
  3617  0132  09E7               	comf	??_adcConvertMM+6,f
  3618  0133  09E8               	comf	??_adcConvertMM+7,f
  3619  0134  0AE5               	incf	??_adcConvertMM+4,f
  3620  0135  1903               	skipnz
  3621  0136  0AE6               	incf	??_adcConvertMM+5,f
  3622  0137  1903               	skipnz
  3623  0138  0AE7               	incf	??_adcConvertMM+6,f
  3624  0139  1903               	skipnz
  3625  013A  0AE8               	incf	??_adcConvertMM+7,f
  3626  013B  0865               	movf	??_adcConvertMM+4,w
  3627  013C  07E1               	addwf	??_adcConvertMM,f
  3628  013D  0866               	movf	??_adcConvertMM+5,w
  3629  013E  1803               	skipnc
  3630  013F  0F66               	incfsz	??_adcConvertMM+5,w
  3631  0140  2942               	goto	u1350
  3632  0141  2943               	goto	u1351
  3633  0142                     u1350:	
  3634  0142  07E2               	addwf	??_adcConvertMM+1,f
  3635  0143                     u1351:	
  3636  0143  0867               	movf	??_adcConvertMM+6,w
  3637  0144  1803               	skipnc
  3638  0145  0F67               	incfsz	??_adcConvertMM+6,w
  3639  0146  2948               	goto	u1352
  3640  0147  2949               	goto	u1353
  3641  0148                     u1352:	
  3642  0148  07E3               	addwf	??_adcConvertMM+2,f
  3643  0149                     u1353:	
  3644  0149  0868               	movf	??_adcConvertMM+7,w
  3645  014A  1803               	skipnc
  3646  014B  0A68               	incf	??_adcConvertMM+7,w
  3647  014C  07E4               	addwf	??_adcConvertMM+3,f
  3648  014D  0864               	movf	??_adcConvertMM+3,w
  3649  014E  00D7               	movwf	___aldiv@dividend+3
  3650  014F  0863               	movf	??_adcConvertMM+2,w
  3651  0150  00D6               	movwf	___aldiv@dividend+2
  3652  0151  0862               	movf	??_adcConvertMM+1,w
  3653  0152  00D5               	movwf	___aldiv@dividend+1
  3654  0153  0861               	movf	??_adcConvertMM,w
  3655  0154  00D4               	movwf	___aldiv@dividend
  3656  0155  120A  118A  2654  120A  118A  	fcall	___aldiv
  3657  015A  1283               	bcf	3,5	;RP0=0, select bank0
  3658  015B  1303               	bcf	3,6	;RP1=0, select bank0
  3659  015C  0850               	movf	?___aldiv,w
  3660  015D  3E2C               	addlw	44
  3661  015E  00A0               	movwf	_Distance	;volatile
  3662  015F  0851               	movf	?___aldiv+1,w
  3663  0160  1803               	skipnc
  3664  0161  3E01               	addlw	1
  3665  0162  3E01               	addlw	1
  3666  0163  00A1               	movwf	_Distance+1	;volatile
  3667  0164                     l1749:	
  3668                           
  3669                           ;ADC.c: 70: if (adcRAW < 298 && adcRAW >= 236)
  3670  0164  3001               	movlw	1
  3671  0165  0260               	subwf	adcConvertMM@adcRAW+1,w
  3672  0166  302A               	movlw	42
  3673  0167  1903               	skipnz
  3674  0168  025F               	subwf	adcConvertMM@adcRAW,w
  3675  0169  1803               	skipnc
  3676  016A  29A3               	goto	l1755
  3677  016B  3000               	movlw	0
  3678  016C  0260               	subwf	adcConvertMM@adcRAW+1,w
  3679  016D  30EC               	movlw	236
  3680  016E  1903               	skipnz
  3681  016F  025F               	subwf	adcConvertMM@adcRAW,w
  3682  0170  1C03               	skipc
  3683  0171  29A3               	goto	l1755
  3684                           
  3685                           ;ADC.c: 71: Distance = (((29800 - adcRAW*100)/62) + 400);
  3686  0172  303E               	movlw	62
  3687  0173  00D0               	movwf	___lwdiv@divisor
  3688  0174  3000               	movlw	0
  3689  0175  00D1               	movwf	___lwdiv@divisor+1
  3690  0176  0860               	movf	adcConvertMM@adcRAW+1,w
  3691  0177  00CB               	movwf	___wmul@multiplier+1
  3692  0178  085F               	movf	adcConvertMM@adcRAW,w
  3693  0179  00CA               	movwf	___wmul@multiplier
  3694  017A  3064               	movlw	100
  3695  017B  00CC               	movwf	___wmul@multiplicand
  3696  017C  3000               	movlw	0
  3697  017D  00CD               	movwf	___wmul@multiplicand+1
  3698  017E  120A  158A  2662  120A  118A  	fcall	___wmul
  3699  0183  1283               	bcf	3,5	;RP0=0, select bank0
  3700  0184  1303               	bcf	3,6	;RP1=0, select bank0
  3701  0185  094A               	comf	?___wmul,w
  3702  0186  00E1               	movwf	??_adcConvertMM
  3703  0187  094B               	comf	?___wmul+1,w
  3704  0188  00E2               	movwf	??_adcConvertMM+1
  3705  0189  0AE1               	incf	??_adcConvertMM,f
  3706  018A  1903               	skipnz
  3707  018B  0AE2               	incf	??_adcConvertMM+1,f
  3708  018C  0861               	movf	??_adcConvertMM,w
  3709  018D  3E68               	addlw	104
  3710  018E  00D2               	movwf	___lwdiv@dividend
  3711  018F  0862               	movf	??_adcConvertMM+1,w
  3712  0190  1803               	skipnc
  3713  0191  3E01               	addlw	1
  3714  0192  3E74               	addlw	116
  3715  0193  00D3               	movwf	___lwdiv@dividend+1
  3716  0194  120A  158A  273F  120A  118A  	fcall	___lwdiv
  3717  0199  1283               	bcf	3,5	;RP0=0, select bank0
  3718  019A  1303               	bcf	3,6	;RP1=0, select bank0
  3719  019B  0850               	movf	?___lwdiv,w
  3720  019C  3E90               	addlw	144
  3721  019D  00A0               	movwf	_Distance	;volatile
  3722  019E  0851               	movf	?___lwdiv+1,w
  3723  019F  1803               	skipnc
  3724  01A0  3E01               	addlw	1
  3725  01A1  3E01               	addlw	1
  3726  01A2  00A1               	movwf	_Distance+1	;volatile
  3727  01A3                     l1755:	
  3728                           
  3729                           ;ADC.c: 73: if (adcRAW < 236 && adcRAW >= 194)
  3730  01A3  3000               	movlw	0
  3731  01A4  0260               	subwf	adcConvertMM@adcRAW+1,w
  3732  01A5  30EC               	movlw	236
  3733  01A6  1903               	skipnz
  3734  01A7  025F               	subwf	adcConvertMM@adcRAW,w
  3735  01A8  1803               	skipnc
  3736  01A9  29E2               	goto	l1761
  3737  01AA  3000               	movlw	0
  3738  01AB  0260               	subwf	adcConvertMM@adcRAW+1,w
  3739  01AC  30C2               	movlw	194
  3740  01AD  1903               	skipnz
  3741  01AE  025F               	subwf	adcConvertMM@adcRAW,w
  3742  01AF  1C03               	skipc
  3743  01B0  29E2               	goto	l1761
  3744                           
  3745                           ;ADC.c: 74: Distance = (((23600 - adcRAW*100)/42) + 500);
  3746  01B1  302A               	movlw	42
  3747  01B2  00D0               	movwf	___lwdiv@divisor
  3748  01B3  3000               	movlw	0
  3749  01B4  00D1               	movwf	___lwdiv@divisor+1
  3750  01B5  0860               	movf	adcConvertMM@adcRAW+1,w
  3751  01B6  00CB               	movwf	___wmul@multiplier+1
  3752  01B7  085F               	movf	adcConvertMM@adcRAW,w
  3753  01B8  00CA               	movwf	___wmul@multiplier
  3754  01B9  3064               	movlw	100
  3755  01BA  00CC               	movwf	___wmul@multiplicand
  3756  01BB  3000               	movlw	0
  3757  01BC  00CD               	movwf	___wmul@multiplicand+1
  3758  01BD  120A  158A  2662  120A  118A  	fcall	___wmul
  3759  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  3760  01C3  1303               	bcf	3,6	;RP1=0, select bank0
  3761  01C4  094A               	comf	?___wmul,w
  3762  01C5  00E1               	movwf	??_adcConvertMM
  3763  01C6  094B               	comf	?___wmul+1,w
  3764  01C7  00E2               	movwf	??_adcConvertMM+1
  3765  01C8  0AE1               	incf	??_adcConvertMM,f
  3766  01C9  1903               	skipnz
  3767  01CA  0AE2               	incf	??_adcConvertMM+1,f
  3768  01CB  0861               	movf	??_adcConvertMM,w
  3769  01CC  3E30               	addlw	48
  3770  01CD  00D2               	movwf	___lwdiv@dividend
  3771  01CE  0862               	movf	??_adcConvertMM+1,w
  3772  01CF  1803               	skipnc
  3773  01D0  3E01               	addlw	1
  3774  01D1  3E5C               	addlw	92
  3775  01D2  00D3               	movwf	___lwdiv@dividend+1
  3776  01D3  120A  158A  273F  120A  118A  	fcall	___lwdiv
  3777  01D8  1283               	bcf	3,5	;RP0=0, select bank0
  3778  01D9  1303               	bcf	3,6	;RP1=0, select bank0
  3779  01DA  0850               	movf	?___lwdiv,w
  3780  01DB  3EF4               	addlw	244
  3781  01DC  00A0               	movwf	_Distance	;volatile
  3782  01DD  0851               	movf	?___lwdiv+1,w
  3783  01DE  1803               	skipnc
  3784  01DF  3E01               	addlw	1
  3785  01E0  3E01               	addlw	1
  3786  01E1  00A1               	movwf	_Distance+1	;volatile
  3787  01E2                     l1761:	
  3788                           
  3789                           ;ADC.c: 76: if (adcRAW < 194 && adcRAW >= 168)
  3790  01E2  3000               	movlw	0
  3791  01E3  0260               	subwf	adcConvertMM@adcRAW+1,w
  3792  01E4  30C2               	movlw	194
  3793  01E5  1903               	skipnz
  3794  01E6  025F               	subwf	adcConvertMM@adcRAW,w
  3795  01E7  1803               	skipnc
  3796  01E8  2A21               	goto	l1767
  3797  01E9  3000               	movlw	0
  3798  01EA  0260               	subwf	adcConvertMM@adcRAW+1,w
  3799  01EB  30A8               	movlw	168
  3800  01EC  1903               	skipnz
  3801  01ED  025F               	subwf	adcConvertMM@adcRAW,w
  3802  01EE  1C03               	skipc
  3803  01EF  2A21               	goto	l1767
  3804                           
  3805                           ;ADC.c: 77: Distance = (((19400 - adcRAW*100)/26) + 600);
  3806  01F0  301A               	movlw	26
  3807  01F1  00D0               	movwf	___lwdiv@divisor
  3808  01F2  3000               	movlw	0
  3809  01F3  00D1               	movwf	___lwdiv@divisor+1
  3810  01F4  0860               	movf	adcConvertMM@adcRAW+1,w
  3811  01F5  00CB               	movwf	___wmul@multiplier+1
  3812  01F6  085F               	movf	adcConvertMM@adcRAW,w
  3813  01F7  00CA               	movwf	___wmul@multiplier
  3814  01F8  3064               	movlw	100
  3815  01F9  00CC               	movwf	___wmul@multiplicand
  3816  01FA  3000               	movlw	0
  3817  01FB  00CD               	movwf	___wmul@multiplicand+1
  3818  01FC  120A  158A  2662  120A  118A  	fcall	___wmul
  3819  0201  1283               	bcf	3,5	;RP0=0, select bank0
  3820  0202  1303               	bcf	3,6	;RP1=0, select bank0
  3821  0203  094A               	comf	?___wmul,w
  3822  0204  00E1               	movwf	??_adcConvertMM
  3823  0205  094B               	comf	?___wmul+1,w
  3824  0206  00E2               	movwf	??_adcConvertMM+1
  3825  0207  0AE1               	incf	??_adcConvertMM,f
  3826  0208  1903               	skipnz
  3827  0209  0AE2               	incf	??_adcConvertMM+1,f
  3828  020A  0861               	movf	??_adcConvertMM,w
  3829  020B  3EC8               	addlw	200
  3830  020C  00D2               	movwf	___lwdiv@dividend
  3831  020D  0862               	movf	??_adcConvertMM+1,w
  3832  020E  1803               	skipnc
  3833  020F  3E01               	addlw	1
  3834  0210  3E4B               	addlw	75
  3835  0211  00D3               	movwf	___lwdiv@dividend+1
  3836  0212  120A  158A  273F  120A  118A  	fcall	___lwdiv
  3837  0217  1283               	bcf	3,5	;RP0=0, select bank0
  3838  0218  1303               	bcf	3,6	;RP1=0, select bank0
  3839  0219  0850               	movf	?___lwdiv,w
  3840  021A  3E58               	addlw	88
  3841  021B  00A0               	movwf	_Distance	;volatile
  3842  021C  0851               	movf	?___lwdiv+1,w
  3843  021D  1803               	skipnc
  3844  021E  3E01               	addlw	1
  3845  021F  3E02               	addlw	2
  3846  0220  00A1               	movwf	_Distance+1	;volatile
  3847  0221                     l1767:	
  3848                           
  3849                           ;ADC.c: 79: if (adcRAW < 168 && adcRAW >= 144)
  3850  0221  3000               	movlw	0
  3851  0222  0260               	subwf	adcConvertMM@adcRAW+1,w
  3852  0223  30A8               	movlw	168
  3853  0224  1903               	skipnz
  3854  0225  025F               	subwf	adcConvertMM@adcRAW,w
  3855  0226  1803               	skipnc
  3856  0227  2A60               	goto	l1773
  3857  0228  3000               	movlw	0
  3858  0229  0260               	subwf	adcConvertMM@adcRAW+1,w
  3859  022A  3090               	movlw	144
  3860  022B  1903               	skipnz
  3861  022C  025F               	subwf	adcConvertMM@adcRAW,w
  3862  022D  1C03               	skipc
  3863  022E  2A60               	goto	l1773
  3864                           
  3865                           ;ADC.c: 80: Distance = (((16800 - adcRAW*100)/24) + 700);
  3866  022F  3018               	movlw	24
  3867  0230  00D0               	movwf	___lwdiv@divisor
  3868  0231  3000               	movlw	0
  3869  0232  00D1               	movwf	___lwdiv@divisor+1
  3870  0233  0860               	movf	adcConvertMM@adcRAW+1,w
  3871  0234  00CB               	movwf	___wmul@multiplier+1
  3872  0235  085F               	movf	adcConvertMM@adcRAW,w
  3873  0236  00CA               	movwf	___wmul@multiplier
  3874  0237  3064               	movlw	100
  3875  0238  00CC               	movwf	___wmul@multiplicand
  3876  0239  3000               	movlw	0
  3877  023A  00CD               	movwf	___wmul@multiplicand+1
  3878  023B  120A  158A  2662  120A  118A  	fcall	___wmul
  3879  0240  1283               	bcf	3,5	;RP0=0, select bank0
  3880  0241  1303               	bcf	3,6	;RP1=0, select bank0
  3881  0242  094A               	comf	?___wmul,w
  3882  0243  00E1               	movwf	??_adcConvertMM
  3883  0244  094B               	comf	?___wmul+1,w
  3884  0245  00E2               	movwf	??_adcConvertMM+1
  3885  0246  0AE1               	incf	??_adcConvertMM,f
  3886  0247  1903               	skipnz
  3887  0248  0AE2               	incf	??_adcConvertMM+1,f
  3888  0249  0861               	movf	??_adcConvertMM,w
  3889  024A  3EA0               	addlw	160
  3890  024B  00D2               	movwf	___lwdiv@dividend
  3891  024C  0862               	movf	??_adcConvertMM+1,w
  3892  024D  1803               	skipnc
  3893  024E  3E01               	addlw	1
  3894  024F  3E41               	addlw	65
  3895  0250  00D3               	movwf	___lwdiv@dividend+1
  3896  0251  120A  158A  273F  120A  118A  	fcall	___lwdiv
  3897  0256  1283               	bcf	3,5	;RP0=0, select bank0
  3898  0257  1303               	bcf	3,6	;RP1=0, select bank0
  3899  0258  0850               	movf	?___lwdiv,w
  3900  0259  3EBC               	addlw	188
  3901  025A  00A0               	movwf	_Distance	;volatile
  3902  025B  0851               	movf	?___lwdiv+1,w
  3903  025C  1803               	skipnc
  3904  025D  3E01               	addlw	1
  3905  025E  3E02               	addlw	2
  3906  025F  00A1               	movwf	_Distance+1	;volatile
  3907  0260                     l1773:	
  3908                           
  3909                           ;ADC.c: 82: if (adcRAW < 144 && adcRAW >= 129)
  3910  0260  3000               	movlw	0
  3911  0261  0260               	subwf	adcConvertMM@adcRAW+1,w
  3912  0262  3090               	movlw	144
  3913  0263  1903               	skipnz
  3914  0264  025F               	subwf	adcConvertMM@adcRAW,w
  3915  0265  1803               	skipnc
  3916  0266  2A9F               	goto	l1779
  3917  0267  3000               	movlw	0
  3918  0268  0260               	subwf	adcConvertMM@adcRAW+1,w
  3919  0269  3081               	movlw	129
  3920  026A  1903               	skipnz
  3921  026B  025F               	subwf	adcConvertMM@adcRAW,w
  3922  026C  1C03               	skipc
  3923  026D  2A9F               	goto	l1779
  3924                           
  3925                           ;ADC.c: 83: Distance = (((14400 - adcRAW*100)/15) + 800);
  3926  026E  300F               	movlw	15
  3927  026F  00D0               	movwf	___lwdiv@divisor
  3928  0270  3000               	movlw	0
  3929  0271  00D1               	movwf	___lwdiv@divisor+1
  3930  0272  0860               	movf	adcConvertMM@adcRAW+1,w
  3931  0273  00CB               	movwf	___wmul@multiplier+1
  3932  0274  085F               	movf	adcConvertMM@adcRAW,w
  3933  0275  00CA               	movwf	___wmul@multiplier
  3934  0276  3064               	movlw	100
  3935  0277  00CC               	movwf	___wmul@multiplicand
  3936  0278  3000               	movlw	0
  3937  0279  00CD               	movwf	___wmul@multiplicand+1
  3938  027A  120A  158A  2662  120A  118A  	fcall	___wmul
  3939  027F  1283               	bcf	3,5	;RP0=0, select bank0
  3940  0280  1303               	bcf	3,6	;RP1=0, select bank0
  3941  0281  094A               	comf	?___wmul,w
  3942  0282  00E1               	movwf	??_adcConvertMM
  3943  0283  094B               	comf	?___wmul+1,w
  3944  0284  00E2               	movwf	??_adcConvertMM+1
  3945  0285  0AE1               	incf	??_adcConvertMM,f
  3946  0286  1903               	skipnz
  3947  0287  0AE2               	incf	??_adcConvertMM+1,f
  3948  0288  0861               	movf	??_adcConvertMM,w
  3949  0289  3E40               	addlw	64
  3950  028A  00D2               	movwf	___lwdiv@dividend
  3951  028B  0862               	movf	??_adcConvertMM+1,w
  3952  028C  1803               	skipnc
  3953  028D  3E01               	addlw	1
  3954  028E  3E38               	addlw	56
  3955  028F  00D3               	movwf	___lwdiv@dividend+1
  3956  0290  120A  158A  273F  120A  118A  	fcall	___lwdiv
  3957  0295  1283               	bcf	3,5	;RP0=0, select bank0
  3958  0296  1303               	bcf	3,6	;RP1=0, select bank0
  3959  0297  0850               	movf	?___lwdiv,w
  3960  0298  3E20               	addlw	32
  3961  0299  00A0               	movwf	_Distance	;volatile
  3962  029A  0851               	movf	?___lwdiv+1,w
  3963  029B  1803               	skipnc
  3964  029C  3E01               	addlw	1
  3965  029D  3E03               	addlw	3
  3966  029E  00A1               	movwf	_Distance+1	;volatile
  3967  029F                     l1779:	
  3968                           
  3969                           ;ADC.c: 85: if (adcRAW < 129 && adcRAW >= 110)
  3970  029F  3000               	movlw	0
  3971  02A0  0260               	subwf	adcConvertMM@adcRAW+1,w
  3972  02A1  3081               	movlw	129
  3973  02A2  1903               	skipnz
  3974  02A3  025F               	subwf	adcConvertMM@adcRAW,w
  3975  02A4  1803               	skipnc
  3976  02A5  2ADE               	goto	l1785
  3977  02A6  3000               	movlw	0
  3978  02A7  0260               	subwf	adcConvertMM@adcRAW+1,w
  3979  02A8  306E               	movlw	110
  3980  02A9  1903               	skipnz
  3981  02AA  025F               	subwf	adcConvertMM@adcRAW,w
  3982  02AB  1C03               	skipc
  3983  02AC  2ADE               	goto	l1785
  3984                           
  3985                           ;ADC.c: 86: Distance = (((12900 - adcRAW*100)/19) + 900 + 50);
  3986  02AD  3013               	movlw	19
  3987  02AE  00D0               	movwf	___lwdiv@divisor
  3988  02AF  3000               	movlw	0
  3989  02B0  00D1               	movwf	___lwdiv@divisor+1
  3990  02B1  0860               	movf	adcConvertMM@adcRAW+1,w
  3991  02B2  00CB               	movwf	___wmul@multiplier+1
  3992  02B3  085F               	movf	adcConvertMM@adcRAW,w
  3993  02B4  00CA               	movwf	___wmul@multiplier
  3994  02B5  3064               	movlw	100
  3995  02B6  00CC               	movwf	___wmul@multiplicand
  3996  02B7  3000               	movlw	0
  3997  02B8  00CD               	movwf	___wmul@multiplicand+1
  3998  02B9  120A  158A  2662  120A  118A  	fcall	___wmul
  3999  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  4000  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  4001  02C0  094A               	comf	?___wmul,w
  4002  02C1  00E1               	movwf	??_adcConvertMM
  4003  02C2  094B               	comf	?___wmul+1,w
  4004  02C3  00E2               	movwf	??_adcConvertMM+1
  4005  02C4  0AE1               	incf	??_adcConvertMM,f
  4006  02C5  1903               	skipnz
  4007  02C6  0AE2               	incf	??_adcConvertMM+1,f
  4008  02C7  0861               	movf	??_adcConvertMM,w
  4009  02C8  3E64               	addlw	100
  4010  02C9  00D2               	movwf	___lwdiv@dividend
  4011  02CA  0862               	movf	??_adcConvertMM+1,w
  4012  02CB  1803               	skipnc
  4013  02CC  3E01               	addlw	1
  4014  02CD  3E32               	addlw	50
  4015  02CE  00D3               	movwf	___lwdiv@dividend+1
  4016  02CF  120A  158A  273F  120A  118A  	fcall	___lwdiv
  4017  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  4018  02D5  1303               	bcf	3,6	;RP1=0, select bank0
  4019  02D6  0850               	movf	?___lwdiv,w
  4020  02D7  3EB6               	addlw	182
  4021  02D8  00A0               	movwf	_Distance	;volatile
  4022  02D9  0851               	movf	?___lwdiv+1,w
  4023  02DA  1803               	skipnc
  4024  02DB  3E01               	addlw	1
  4025  02DC  3E03               	addlw	3
  4026  02DD  00A1               	movwf	_Distance+1	;volatile
  4027  02DE                     l1785:	
  4028                           
  4029                           ;ADC.c: 88: if (adcRAW < 110 && adcRAW >= 98)
  4030  02DE  3000               	movlw	0
  4031  02DF  0260               	subwf	adcConvertMM@adcRAW+1,w
  4032  02E0  306E               	movlw	110
  4033  02E1  1903               	skipnz
  4034  02E2  025F               	subwf	adcConvertMM@adcRAW,w
  4035  02E3  1803               	skipnc
  4036  02E4  2B1D               	goto	l1791
  4037  02E5  3000               	movlw	0
  4038  02E6  0260               	subwf	adcConvertMM@adcRAW+1,w
  4039  02E7  3062               	movlw	98
  4040  02E8  1903               	skipnz
  4041  02E9  025F               	subwf	adcConvertMM@adcRAW,w
  4042  02EA  1C03               	skipc
  4043  02EB  2B1D               	goto	l1791
  4044                           
  4045                           ;ADC.c: 89: Distance = (((11000 - adcRAW*100)/12) + 1000 + 100);
  4046  02EC  300C               	movlw	12
  4047  02ED  00D0               	movwf	___lwdiv@divisor
  4048  02EE  3000               	movlw	0
  4049  02EF  00D1               	movwf	___lwdiv@divisor+1
  4050  02F0  0860               	movf	adcConvertMM@adcRAW+1,w
  4051  02F1  00CB               	movwf	___wmul@multiplier+1
  4052  02F2  085F               	movf	adcConvertMM@adcRAW,w
  4053  02F3  00CA               	movwf	___wmul@multiplier
  4054  02F4  3064               	movlw	100
  4055  02F5  00CC               	movwf	___wmul@multiplicand
  4056  02F6  3000               	movlw	0
  4057  02F7  00CD               	movwf	___wmul@multiplicand+1
  4058  02F8  120A  158A  2662  120A  118A  	fcall	___wmul
  4059  02FD  1283               	bcf	3,5	;RP0=0, select bank0
  4060  02FE  1303               	bcf	3,6	;RP1=0, select bank0
  4061  02FF  094A               	comf	?___wmul,w
  4062  0300  00E1               	movwf	??_adcConvertMM
  4063  0301  094B               	comf	?___wmul+1,w
  4064  0302  00E2               	movwf	??_adcConvertMM+1
  4065  0303  0AE1               	incf	??_adcConvertMM,f
  4066  0304  1903               	skipnz
  4067  0305  0AE2               	incf	??_adcConvertMM+1,f
  4068  0306  0861               	movf	??_adcConvertMM,w
  4069  0307  3EF8               	addlw	248
  4070  0308  00D2               	movwf	___lwdiv@dividend
  4071  0309  0862               	movf	??_adcConvertMM+1,w
  4072  030A  1803               	skipnc
  4073  030B  3E01               	addlw	1
  4074  030C  3E2A               	addlw	42
  4075  030D  00D3               	movwf	___lwdiv@dividend+1
  4076  030E  120A  158A  273F  120A  118A  	fcall	___lwdiv
  4077  0313  1283               	bcf	3,5	;RP0=0, select bank0
  4078  0314  1303               	bcf	3,6	;RP1=0, select bank0
  4079  0315  0850               	movf	?___lwdiv,w
  4080  0316  3E4C               	addlw	76
  4081  0317  00A0               	movwf	_Distance	;volatile
  4082  0318  0851               	movf	?___lwdiv+1,w
  4083  0319  1803               	skipnc
  4084  031A  3E01               	addlw	1
  4085  031B  3E04               	addlw	4
  4086  031C  00A1               	movwf	_Distance+1	;volatile
  4087  031D                     l1791:	
  4088                           
  4089                           ;ADC.c: 91: if (adcRAW < 98 && adcRAW >= 90)
  4090  031D  3000               	movlw	0
  4091  031E  0260               	subwf	adcConvertMM@adcRAW+1,w
  4092  031F  3062               	movlw	98
  4093  0320  1903               	skipnz
  4094  0321  025F               	subwf	adcConvertMM@adcRAW,w
  4095  0322  1803               	skipnc
  4096  0323  2B5A               	goto	l1797
  4097  0324  3000               	movlw	0
  4098  0325  0260               	subwf	adcConvertMM@adcRAW+1,w
  4099  0326  305A               	movlw	90
  4100  0327  1903               	skipnz
  4101  0328  025F               	subwf	adcConvertMM@adcRAW,w
  4102  0329  1C03               	skipc
  4103  032A  2B5A               	goto	l1797
  4104                           
  4105                           ;ADC.c: 92: Distance = (((9800 - adcRAW*100)/8) + 1100 + 150);
  4106  032B  0860               	movf	adcConvertMM@adcRAW+1,w
  4107  032C  00CB               	movwf	___wmul@multiplier+1
  4108  032D  085F               	movf	adcConvertMM@adcRAW,w
  4109  032E  00CA               	movwf	___wmul@multiplier
  4110  032F  3064               	movlw	100
  4111  0330  00CC               	movwf	___wmul@multiplicand
  4112  0331  3000               	movlw	0
  4113  0332  00CD               	movwf	___wmul@multiplicand+1
  4114  0333  120A  158A  2662  120A  118A  	fcall	___wmul
  4115  0338  1283               	bcf	3,5	;RP0=0, select bank0
  4116  0339  1303               	bcf	3,6	;RP1=0, select bank0
  4117  033A  094A               	comf	?___wmul,w
  4118  033B  00E1               	movwf	??_adcConvertMM
  4119  033C  094B               	comf	?___wmul+1,w
  4120  033D  00E2               	movwf	??_adcConvertMM+1
  4121  033E  0AE1               	incf	??_adcConvertMM,f
  4122  033F  1903               	skipnz
  4123  0340  0AE2               	incf	??_adcConvertMM+1,f
  4124  0341  0861               	movf	??_adcConvertMM,w
  4125  0342  3E48               	addlw	72
  4126  0343  00E3               	movwf	??_adcConvertMM+2
  4127  0344  0862               	movf	??_adcConvertMM+1,w
  4128  0345  1803               	skipnc
  4129  0346  3E01               	addlw	1
  4130  0347  3E26               	addlw	38
  4131  0348  00E4               	movwf	??_adcConvertMM+3
  4132  0349  1003               	clrc
  4133  034A  0CE4               	rrf	??_adcConvertMM+3,f
  4134  034B  0CE3               	rrf	??_adcConvertMM+2,f
  4135  034C  1003               	clrc
  4136  034D  0CE4               	rrf	??_adcConvertMM+3,f
  4137  034E  0CE3               	rrf	??_adcConvertMM+2,f
  4138  034F  1003               	clrc
  4139  0350  0CE4               	rrf	??_adcConvertMM+3,f
  4140  0351  0CE3               	rrf	??_adcConvertMM+2,f
  4141  0352  0863               	movf	??_adcConvertMM+2,w
  4142  0353  3EE2               	addlw	226
  4143  0354  00A0               	movwf	_Distance	;volatile
  4144  0355  0864               	movf	??_adcConvertMM+3,w
  4145  0356  1803               	skipnc
  4146  0357  3E01               	addlw	1
  4147  0358  3E04               	addlw	4
  4148  0359  00A1               	movwf	_Distance+1	;volatile
  4149  035A                     l1797:	
  4150                           
  4151                           ;ADC.c: 94: if(adcRAW < 90 || adcRAW >= 517)
  4152  035A  3000               	movlw	0
  4153  035B  0260               	subwf	adcConvertMM@adcRAW+1,w
  4154  035C  305A               	movlw	90
  4155  035D  1903               	skipnz
  4156  035E  025F               	subwf	adcConvertMM@adcRAW,w
  4157  035F  1C03               	skipc
  4158  0360  2B68               	goto	l1801
  4159  0361  3002               	movlw	2
  4160  0362  0260               	subwf	adcConvertMM@adcRAW+1,w
  4161  0363  3005               	movlw	5
  4162  0364  1903               	skipnz
  4163  0365  025F               	subwf	adcConvertMM@adcRAW,w
  4164  0366  1C03               	skipc
  4165  0367  0008               	return
  4166  0368                     l1801:	
  4167                           
  4168                           ;ADC.c: 95: Distance = 0;
  4169  0368  01A0               	clrf	_Distance	;volatile
  4170  0369  01A1               	clrf	_Distance+1	;volatile
  4171  036A  0008               	return
  4172  036B                     __end_of_adcConvertMM:	
  4173                           ;ADC.c: 97: return(Distance);
  4174                           ;	Return value of _adcConvertMM is never used
  4175                           
  4176                           
  4177                           	psect	text19
  4178  0E62                     __ptext19:	
  4179 ;; *************** function ___wmul *****************
  4180 ;; Defined at:
  4181 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  4182 ;; Parameters:    Size  Location     Type
  4183 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4184 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;  product         2    4[BANK0 ] unsigned int 
  4187 ;; Return value:  Size  Location     Type
  4188 ;;                  2    0[BANK0 ] unsigned int 
  4189 ;; Registers used:
  4190 ;;		wreg, status,2, status,0
  4191 ;; Tracked objects:
  4192 ;;		On entry : 0/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4196 ;;      Params:         0       4       0       0       0
  4197 ;;      Locals:         0       2       0       0       0
  4198 ;;      Temps:          0       0       0       0       0
  4199 ;;      Totals:         0       6       0       0       0
  4200 ;;Total ram usage:        6 bytes
  4201 ;; Hardware stack levels used:    1
  4202 ;; Hardware stack levels required when called:    3
  4203 ;; This function calls:
  4204 ;;		Nothing
  4205 ;; This function is called by:
  4206 ;;		_adcConvertMM
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           
  4211                           ;psect for function ___wmul
  4212  0E62                     ___wmul:	
  4213                           
  4214                           ;incstack = 0
  4215                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4216  0E62  1283               	bcf	3,5	;RP0=0, select bank0
  4217  0E63  1303               	bcf	3,6	;RP1=0, select bank0
  4218  0E64  01CE               	clrf	___wmul@product
  4219  0E65  01CF               	clrf	___wmul@product+1
  4220  0E66                     l1583:	
  4221  0E66  1C4A               	btfss	___wmul@multiplier,0
  4222  0E67  2E6E               	goto	l553
  4223  0E68  084C               	movf	___wmul@multiplicand,w
  4224  0E69  07CE               	addwf	___wmul@product,f
  4225  0E6A  1803               	skipnc
  4226  0E6B  0ACF               	incf	___wmul@product+1,f
  4227  0E6C  084D               	movf	___wmul@multiplicand+1,w
  4228  0E6D  07CF               	addwf	___wmul@product+1,f
  4229  0E6E                     l553:	
  4230  0E6E  3001               	movlw	1
  4231  0E6F                     u985:	
  4232  0E6F  1003               	clrc
  4233  0E70  0DCC               	rlf	___wmul@multiplicand,f
  4234  0E71  0DCD               	rlf	___wmul@multiplicand+1,f
  4235  0E72  3EFF               	addlw	-1
  4236  0E73  1D03               	skipz
  4237  0E74  2E6F               	goto	u985
  4238  0E75  3001               	movlw	1
  4239  0E76                     u995:	
  4240  0E76  1003               	clrc
  4241  0E77  0CCB               	rrf	___wmul@multiplier+1,f
  4242  0E78  0CCA               	rrf	___wmul@multiplier,f
  4243  0E79  3EFF               	addlw	-1
  4244  0E7A  1D03               	skipz
  4245  0E7B  2E76               	goto	u995
  4246  0E7C  084A               	movf	___wmul@multiplier,w
  4247  0E7D  044B               	iorwf	___wmul@multiplier+1,w
  4248  0E7E  1D03               	btfss	3,2
  4249  0E7F  2E66               	goto	l1583
  4250  0E80  084F               	movf	___wmul@product+1,w
  4251  0E81  00CB               	movwf	?___wmul+1
  4252  0E82  084E               	movf	___wmul@product,w
  4253  0E83  00CA               	movwf	?___wmul
  4254  0E84  0008               	return
  4255  0E85                     __end_of___wmul:	
  4256                           
  4257                           	psect	text20
  4258  0F3F                     __ptext20:	
  4259 ;; *************** function ___lwdiv *****************
  4260 ;; Defined at:
  4261 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  4262 ;; Parameters:    Size  Location     Type
  4263 ;;  divisor         2    6[BANK0 ] unsigned int 
  4264 ;;  dividend        2    8[BANK0 ] unsigned int 
  4265 ;; Auto vars:     Size  Location     Type
  4266 ;;  quotient        2   11[BANK0 ] unsigned int 
  4267 ;;  counter         1   13[BANK0 ] unsigned char 
  4268 ;; Return value:  Size  Location     Type
  4269 ;;                  2    6[BANK0 ] unsigned int 
  4270 ;; Registers used:
  4271 ;;		wreg, status,2, status,0
  4272 ;; Tracked objects:
  4273 ;;		On entry : 0/0
  4274 ;;		On exit  : 0/0
  4275 ;;		Unchanged: 0/0
  4276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4277 ;;      Params:         0       4       0       0       0
  4278 ;;      Locals:         0       3       0       0       0
  4279 ;;      Temps:          0       1       0       0       0
  4280 ;;      Totals:         0       8       0       0       0
  4281 ;;Total ram usage:        8 bytes
  4282 ;; Hardware stack levels used:    1
  4283 ;; Hardware stack levels required when called:    3
  4284 ;; This function calls:
  4285 ;;		Nothing
  4286 ;; This function is called by:
  4287 ;;		_adcConvertMM
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           
  4292                           ;psect for function ___lwdiv
  4293  0F3F                     ___lwdiv:	
  4294                           
  4295                           ;incstack = 0
  4296                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4297  0F3F  1283               	bcf	3,5	;RP0=0, select bank0
  4298  0F40  1303               	bcf	3,6	;RP1=0, select bank0
  4299  0F41  01D5               	clrf	___lwdiv@quotient
  4300  0F42  01D6               	clrf	___lwdiv@quotient+1
  4301  0F43  0850               	movf	___lwdiv@divisor,w
  4302  0F44  0451               	iorwf	___lwdiv@divisor+1,w
  4303  0F45  1903               	btfsc	3,2
  4304  0F46  2F78               	goto	l1657
  4305  0F47  01D7               	clrf	___lwdiv@counter
  4306  0F48  0AD7               	incf	___lwdiv@counter,f
  4307  0F49                     l1645:	
  4308  0F49  1BD1               	btfsc	___lwdiv@divisor+1,7
  4309  0F4A  2F57               	goto	l1647
  4310  0F4B  3001               	movlw	1
  4311  0F4C                     u1125:	
  4312  0F4C  1003               	clrc
  4313  0F4D  0DD0               	rlf	___lwdiv@divisor,f
  4314  0F4E  0DD1               	rlf	___lwdiv@divisor+1,f
  4315  0F4F  3EFF               	addlw	-1
  4316  0F50  1D03               	skipz
  4317  0F51  2F4C               	goto	u1125
  4318  0F52  3001               	movlw	1
  4319  0F53  00D4               	movwf	??___lwdiv
  4320  0F54  0854               	movf	??___lwdiv,w
  4321  0F55  07D7               	addwf	___lwdiv@counter,f
  4322  0F56  2F49               	goto	l1645
  4323  0F57                     l1647:	
  4324  0F57  3001               	movlw	1
  4325  0F58                     u1145:	
  4326  0F58  1003               	clrc
  4327  0F59  0DD5               	rlf	___lwdiv@quotient,f
  4328  0F5A  0DD6               	rlf	___lwdiv@quotient+1,f
  4329  0F5B  3EFF               	addlw	-1
  4330  0F5C  1D03               	skipz
  4331  0F5D  2F58               	goto	u1145
  4332  0F5E  0851               	movf	___lwdiv@divisor+1,w
  4333  0F5F  0253               	subwf	___lwdiv@dividend+1,w
  4334  0F60  1D03               	skipz
  4335  0F61  2F64               	goto	u1155
  4336  0F62  0850               	movf	___lwdiv@divisor,w
  4337  0F63  0252               	subwf	___lwdiv@dividend,w
  4338  0F64                     u1155:	
  4339  0F64  1C03               	skipc
  4340  0F65  2F6D               	goto	l1653
  4341  0F66  0850               	movf	___lwdiv@divisor,w
  4342  0F67  02D2               	subwf	___lwdiv@dividend,f
  4343  0F68  0851               	movf	___lwdiv@divisor+1,w
  4344  0F69  1C03               	skipc
  4345  0F6A  03D3               	decf	___lwdiv@dividend+1,f
  4346  0F6B  02D3               	subwf	___lwdiv@dividend+1,f
  4347  0F6C  1455               	bsf	___lwdiv@quotient,0
  4348  0F6D                     l1653:	
  4349  0F6D  3001               	movlw	1
  4350  0F6E                     u1165:	
  4351  0F6E  1003               	clrc
  4352  0F6F  0CD1               	rrf	___lwdiv@divisor+1,f
  4353  0F70  0CD0               	rrf	___lwdiv@divisor,f
  4354  0F71  3EFF               	addlw	-1
  4355  0F72  1D03               	skipz
  4356  0F73  2F6E               	goto	u1165
  4357  0F74  3001               	movlw	1
  4358  0F75  02D7               	subwf	___lwdiv@counter,f
  4359  0F76  1D03               	btfss	3,2
  4360  0F77  2F57               	goto	l1647
  4361  0F78                     l1657:	
  4362  0F78  0856               	movf	___lwdiv@quotient+1,w
  4363  0F79  00D1               	movwf	?___lwdiv+1
  4364  0F7A  0855               	movf	___lwdiv@quotient,w
  4365  0F7B  00D0               	movwf	?___lwdiv
  4366  0F7C  0008               	return
  4367  0F7D                     __end_of___lwdiv:	
  4368                           
  4369                           	psect	text21
  4370  0654                     __ptext21:	
  4371 ;; *************** function ___aldiv *****************
  4372 ;; Defined at:
  4373 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
  4374 ;; Parameters:    Size  Location     Type
  4375 ;;  divisor         4    6[BANK0 ] long 
  4376 ;;  dividend        4   10[BANK0 ] long 
  4377 ;; Auto vars:     Size  Location     Type
  4378 ;;  quotient        4   17[BANK0 ] long 
  4379 ;;  sign            1   16[BANK0 ] unsigned char 
  4380 ;;  counter         1   15[BANK0 ] unsigned char 
  4381 ;; Return value:  Size  Location     Type
  4382 ;;                  4    6[BANK0 ] long 
  4383 ;; Registers used:
  4384 ;;		wreg, status,2, status,0
  4385 ;; Tracked objects:
  4386 ;;		On entry : 0/0
  4387 ;;		On exit  : 0/0
  4388 ;;		Unchanged: 0/0
  4389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4390 ;;      Params:         0       8       0       0       0
  4391 ;;      Locals:         0       6       0       0       0
  4392 ;;      Temps:          0       1       0       0       0
  4393 ;;      Totals:         0      15       0       0       0
  4394 ;;Total ram usage:       15 bytes
  4395 ;; Hardware stack levels used:    1
  4396 ;; Hardware stack levels required when called:    3
  4397 ;; This function calls:
  4398 ;;		Nothing
  4399 ;; This function is called by:
  4400 ;;		_adcConvertMM
  4401 ;; This function uses a non-reentrant model
  4402 ;;
  4403                           
  4404                           
  4405                           ;psect for function ___aldiv
  4406  0654                     ___aldiv:	
  4407                           
  4408                           ;incstack = 0
  4409                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4410  0654  1283               	bcf	3,5	;RP0=0, select bank0
  4411  0655  1303               	bcf	3,6	;RP1=0, select bank0
  4412  0656  01DA               	clrf	___aldiv@sign
  4413  0657  1FD3               	btfss	___aldiv@divisor+3,7
  4414  0658  2E66               	goto	l608
  4415  0659  09D0               	comf	___aldiv@divisor,f
  4416  065A  09D1               	comf	___aldiv@divisor+1,f
  4417  065B  09D2               	comf	___aldiv@divisor+2,f
  4418  065C  09D3               	comf	___aldiv@divisor+3,f
  4419  065D  0AD0               	incf	___aldiv@divisor,f
  4420  065E  1903               	skipnz
  4421  065F  0AD1               	incf	___aldiv@divisor+1,f
  4422  0660  1903               	skipnz
  4423  0661  0AD2               	incf	___aldiv@divisor+2,f
  4424  0662  1903               	skipnz
  4425  0663  0AD3               	incf	___aldiv@divisor+3,f
  4426  0664  01DA               	clrf	___aldiv@sign
  4427  0665  0ADA               	incf	___aldiv@sign,f
  4428  0666                     l608:	
  4429  0666  1FD7               	btfss	___aldiv@dividend+3,7
  4430  0667  2E77               	goto	l1605
  4431  0668  09D4               	comf	___aldiv@dividend,f
  4432  0669  09D5               	comf	___aldiv@dividend+1,f
  4433  066A  09D6               	comf	___aldiv@dividend+2,f
  4434  066B  09D7               	comf	___aldiv@dividend+3,f
  4435  066C  0AD4               	incf	___aldiv@dividend,f
  4436  066D  1903               	skipnz
  4437  066E  0AD5               	incf	___aldiv@dividend+1,f
  4438  066F  1903               	skipnz
  4439  0670  0AD6               	incf	___aldiv@dividend+2,f
  4440  0671  1903               	skipnz
  4441  0672  0AD7               	incf	___aldiv@dividend+3,f
  4442  0673  3001               	movlw	1
  4443  0674  00D8               	movwf	??___aldiv
  4444  0675  0858               	movf	??___aldiv,w
  4445  0676  06DA               	xorwf	___aldiv@sign,f
  4446  0677                     l1605:	
  4447  0677  3000               	movlw	0
  4448  0678  00DE               	movwf	___aldiv@quotient+3
  4449  0679  3000               	movlw	0
  4450  067A  00DD               	movwf	___aldiv@quotient+2
  4451  067B  3000               	movlw	0
  4452  067C  00DC               	movwf	___aldiv@quotient+1
  4453  067D  3000               	movlw	0
  4454  067E  00DB               	movwf	___aldiv@quotient
  4455  067F  0853               	movf	___aldiv@divisor+3,w
  4456  0680  0452               	iorwf	___aldiv@divisor+2,w
  4457  0681  0451               	iorwf	___aldiv@divisor+1,w
  4458  0682  0450               	iorwf	___aldiv@divisor,w
  4459  0683  1903               	skipnz
  4460  0684  2ECC               	goto	l1627
  4461  0685  01D9               	clrf	___aldiv@counter
  4462  0686  0AD9               	incf	___aldiv@counter,f
  4463  0687                     l1613:	
  4464  0687  1BD3               	btfsc	___aldiv@divisor+3,7
  4465  0688  2E97               	goto	l1615
  4466  0689  3001               	movlw	1
  4467  068A  00D8               	movwf	??___aldiv
  4468  068B                     u1045:	
  4469  068B  1003               	clrc
  4470  068C  0DD0               	rlf	___aldiv@divisor,f
  4471  068D  0DD1               	rlf	___aldiv@divisor+1,f
  4472  068E  0DD2               	rlf	___aldiv@divisor+2,f
  4473  068F  0DD3               	rlf	___aldiv@divisor+3,f
  4474  0690  0BD8               	decfsz	??___aldiv,f
  4475  0691  2E8B               	goto	u1045
  4476  0692  3001               	movlw	1
  4477  0693  00D8               	movwf	??___aldiv
  4478  0694  0858               	movf	??___aldiv,w
  4479  0695  07D9               	addwf	___aldiv@counter,f
  4480  0696  2E87               	goto	l1613
  4481  0697                     l1615:	
  4482  0697  3001               	movlw	1
  4483  0698  00D8               	movwf	??___aldiv
  4484  0699                     u1065:	
  4485  0699  1003               	clrc
  4486  069A  0DDB               	rlf	___aldiv@quotient,f
  4487  069B  0DDC               	rlf	___aldiv@quotient+1,f
  4488  069C  0DDD               	rlf	___aldiv@quotient+2,f
  4489  069D  0DDE               	rlf	___aldiv@quotient+3,f
  4490  069E  0BD8               	decfsz	??___aldiv,f
  4491  069F  2E99               	goto	u1065
  4492  06A0  0853               	movf	___aldiv@divisor+3,w
  4493  06A1  0257               	subwf	___aldiv@dividend+3,w
  4494  06A2  1D03               	skipz
  4495  06A3  2EAE               	goto	u1075
  4496  06A4  0852               	movf	___aldiv@divisor+2,w
  4497  06A5  0256               	subwf	___aldiv@dividend+2,w
  4498  06A6  1D03               	skipz
  4499  06A7  2EAE               	goto	u1075
  4500  06A8  0851               	movf	___aldiv@divisor+1,w
  4501  06A9  0255               	subwf	___aldiv@dividend+1,w
  4502  06AA  1D03               	skipz
  4503  06AB  2EAE               	goto	u1075
  4504  06AC  0850               	movf	___aldiv@divisor,w
  4505  06AD  0254               	subwf	___aldiv@dividend,w
  4506  06AE                     u1075:	
  4507  06AE  1C03               	skipc
  4508  06AF  2EBF               	goto	l1623
  4509  06B0  0850               	movf	___aldiv@divisor,w
  4510  06B1  02D4               	subwf	___aldiv@dividend,f
  4511  06B2  0851               	movf	___aldiv@divisor+1,w
  4512  06B3  1C03               	skipc
  4513  06B4  0F51               	incfsz	___aldiv@divisor+1,w
  4514  06B5  02D5               	subwf	___aldiv@dividend+1,f
  4515  06B6  0852               	movf	___aldiv@divisor+2,w
  4516  06B7  1C03               	skipc
  4517  06B8  0F52               	incfsz	___aldiv@divisor+2,w
  4518  06B9  02D6               	subwf	___aldiv@dividend+2,f
  4519  06BA  0853               	movf	___aldiv@divisor+3,w
  4520  06BB  1C03               	skipc
  4521  06BC  0F53               	incfsz	___aldiv@divisor+3,w
  4522  06BD  02D7               	subwf	___aldiv@dividend+3,f
  4523  06BE  145B               	bsf	___aldiv@quotient,0
  4524  06BF                     l1623:	
  4525  06BF  3001               	movlw	1
  4526  06C0                     u1085:	
  4527  06C0  1003               	clrc
  4528  06C1  0CD3               	rrf	___aldiv@divisor+3,f
  4529  06C2  0CD2               	rrf	___aldiv@divisor+2,f
  4530  06C3  0CD1               	rrf	___aldiv@divisor+1,f
  4531  06C4  0CD0               	rrf	___aldiv@divisor,f
  4532  06C5  3EFF               	addlw	-1
  4533  06C6  1D03               	skipz
  4534  06C7  2EC0               	goto	u1085
  4535  06C8  3001               	movlw	1
  4536  06C9  02D9               	subwf	___aldiv@counter,f
  4537  06CA  1D03               	btfss	3,2
  4538  06CB  2E97               	goto	l1615
  4539  06CC                     l1627:	
  4540  06CC  085A               	movf	___aldiv@sign,w
  4541  06CD  1903               	btfsc	3,2
  4542  06CE  2EDA               	goto	l1631
  4543  06CF  09DB               	comf	___aldiv@quotient,f
  4544  06D0  09DC               	comf	___aldiv@quotient+1,f
  4545  06D1  09DD               	comf	___aldiv@quotient+2,f
  4546  06D2  09DE               	comf	___aldiv@quotient+3,f
  4547  06D3  0ADB               	incf	___aldiv@quotient,f
  4548  06D4  1903               	skipnz
  4549  06D5  0ADC               	incf	___aldiv@quotient+1,f
  4550  06D6  1903               	skipnz
  4551  06D7  0ADD               	incf	___aldiv@quotient+2,f
  4552  06D8  1903               	skipnz
  4553  06D9  0ADE               	incf	___aldiv@quotient+3,f
  4554  06DA                     l1631:	
  4555  06DA  085E               	movf	___aldiv@quotient+3,w
  4556  06DB  00D3               	movwf	?___aldiv+3
  4557  06DC  085D               	movf	___aldiv@quotient+2,w
  4558  06DD  00D2               	movwf	?___aldiv+2
  4559  06DE  085C               	movf	___aldiv@quotient+1,w
  4560  06DF  00D1               	movwf	?___aldiv+1
  4561  06E0  085B               	movf	___aldiv@quotient,w
  4562  06E1  00D0               	movwf	?___aldiv
  4563  06E2  0008               	return
  4564  06E3                     __end_of___aldiv:	
  4565                           
  4566                           	psect	text22
  4567  06E3                     __ptext22:	
  4568 ;; *************** function _isr *****************
  4569 ;; Defined at:
  4570 ;;		line 29 in file "main.c"
  4571 ;; Parameters:    Size  Location     Type
  4572 ;;		None
  4573 ;; Auto vars:     Size  Location     Type
  4574 ;;		None
  4575 ;; Return value:  Size  Location     Type
  4576 ;;                  1    wreg      void 
  4577 ;; Registers used:
  4578 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4579 ;; Tracked objects:
  4580 ;;		On entry : 0/0
  4581 ;;		On exit  : 0/0
  4582 ;;		Unchanged: 0/0
  4583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4584 ;;      Params:         0       0       0       0       0
  4585 ;;      Locals:         0       0       0       0       0
  4586 ;;      Temps:          5       0       0       0       0
  4587 ;;      Totals:         5       0       0       0       0
  4588 ;;Total ram usage:        5 bytes
  4589 ;; Hardware stack levels used:    1
  4590 ;; Hardware stack levels required when called:    2
  4591 ;; This function calls:
  4592 ;;		___lwmod
  4593 ;;		i1_getSensorData
  4594 ;; This function is called by:
  4595 ;;		Interrupt level 1
  4596 ;; This function uses a non-reentrant model
  4597 ;;
  4598                           
  4599                           
  4600                           ;psect for function _isr
  4601  06E3                     _isr:	
  4602                           
  4603                           ;main.c: 31: if(TMR0IF){
  4604  06E3  1D0B               	btfss	11,2	;volatile
  4605  06E4  2F56               	goto	i1l116
  4606                           
  4607                           ;main.c: 32: TMR0IF = 0;
  4608  06E5  110B               	bcf	11,2	;volatile
  4609                           
  4610                           ;main.c: 33: TMR0 = 100;
  4611  06E6  3064               	movlw	100
  4612  06E7  0081               	movwf	1	;volatile
  4613                           
  4614                           ;main.c: 36: if(time_count % 1 == 0) {
  4615  06E8  3001               	movlw	1
  4616  06E9  07B8               	addwf	_time_count,f	;volatile
  4617  06EA  1803               	skipnc
  4618  06EB  0AB9               	incf	_time_count+1,f	;volatile
  4619  06EC  3000               	movlw	0
  4620  06ED  07B9               	addwf	_time_count+1,f	;volatile
  4621                           
  4622                           ;main.c: 38: RC2 = 1; __nop(); RC2 = 0;;
  4623  06EE  1507               	bsf	7,2	;volatile
  4624  06EF  0000               	nop
  4625  06F0  1283               	bcf	3,5	;RP0=0, select bank0
  4626  06F1  1303               	bcf	3,6	;RP1=0, select bank0
  4627  06F2  1107               	bcf	7,2	;volatile
  4628                           
  4629                           ;main.c: 39: }
  4630                           ;main.c: 41: if(time_count % 1000 == 0){
  4631  06F3  30E8               	movlw	232
  4632  06F4  00F0               	movwf	___lwmod@divisor
  4633  06F5  3003               	movlw	3
  4634  06F6  00F1               	movwf	___lwmod@divisor+1
  4635  06F7  0839               	movf	_time_count+1,w	;volatile
  4636  06F8  00F3               	movwf	___lwmod@dividend+1
  4637  06F9  0838               	movf	_time_count,w	;volatile
  4638  06FA  00F2               	movwf	___lwmod@dividend
  4639  06FB  120A  158A  26D3  120A  118A  	fcall	___lwmod
  4640  0700  0870               	movf	?___lwmod,w
  4641  0701  0471               	iorwf	?___lwmod+1,w
  4642  0702  1D03               	btfss	3,2
  4643  0703  2F0A               	goto	i1l2051
  4644                           
  4645                           ;main.c: 42: RB4 = !RB4;
  4646  0704  3010               	movlw	16
  4647  0705  1283               	bcf	3,5	;RP0=0, select bank0
  4648  0706  1303               	bcf	3,6	;RP1=0, select bank0
  4649  0707  0686               	xorwf	6,f
  4650                           
  4651                           ;main.c: 44: time_count = 0;
  4652  0708  01B8               	clrf	_time_count	;volatile
  4653  0709  01B9               	clrf	_time_count+1	;volatile
  4654  070A                     i1l2051:	
  4655                           
  4656                           ;main.c: 45: }
  4657                           ;main.c: 47: if (!RB0 == 1)
  4658  070A  1283               	bcf	3,5	;RP0=0, select bank0
  4659  070B  1303               	bcf	3,6	;RP1=0, select bank0
  4660  070C  1806               	btfsc	6,0	;volatile
  4661  070D  2F12               	goto	i1l2055
  4662                           
  4663                           ;main.c: 48: PB8Counter++;
  4664  070E  3001               	movlw	1
  4665  070F  00F9               	movwf	??_isr
  4666  0710  0879               	movf	??_isr,w
  4667  0711  07C1               	addwf	_PB8Counter,f
  4668  0712                     i1l2055:	
  4669                           
  4670                           ;main.c: 49: if (!RB1 == 1)
  4671  0712  1886               	btfsc	6,1	;volatile
  4672  0713  2F18               	goto	i1l2059
  4673                           
  4674                           ;main.c: 50: PB7Counter++;
  4675  0714  3001               	movlw	1
  4676  0715  00F9               	movwf	??_isr
  4677  0716  0879               	movf	??_isr,w
  4678  0717  07C0               	addwf	_PB7Counter,f
  4679  0718                     i1l2059:	
  4680                           
  4681                           ;main.c: 51: if (!RB2 == 1)
  4682  0718  1906               	btfsc	6,2	;volatile
  4683  0719  2F1E               	goto	i1l2063
  4684                           
  4685                           ;main.c: 52: PB6Counter++;
  4686  071A  3001               	movlw	1
  4687  071B  00F9               	movwf	??_isr
  4688  071C  0879               	movf	??_isr,w
  4689  071D  07BF               	addwf	_PB6Counter,f
  4690  071E                     i1l2063:	
  4691                           
  4692                           ;main.c: 55: if(getSensorData(18,1) == 0b00000001)
  4693  071E  01F2               	clrf	i1getSensorData@bytes
  4694  071F  0AF2               	incf	i1getSensorData@bytes,f
  4695  0720  3012               	movlw	18
  4696  0721  120A  158A  2705  120A  118A  	fcall	i1_getSensorData
  4697  0726  0372               	decf	?i1_getSensorData,w
  4698  0727  0473               	iorwf	?i1_getSensorData+1,w
  4699  0728  1D03               	btfss	3,2
  4700  0729  2F30               	goto	i1l2067
  4701                           
  4702                           ;main.c: 56: FLAG_Play++;
  4703  072A  3001               	movlw	1
  4704  072B  00F9               	movwf	??_isr
  4705  072C  0879               	movf	??_isr,w
  4706  072D  1283               	bcf	3,5	;RP0=0, select bank0
  4707  072E  1303               	bcf	3,6	;RP1=0, select bank0
  4708  072F  07BE               	addwf	_FLAG_Play,f	;volatile
  4709  0730                     i1l2067:	
  4710                           
  4711                           ;main.c: 58: if(getSensorData(18,1) == 0b00000100)
  4712  0730  01F2               	clrf	i1getSensorData@bytes
  4713  0731  0AF2               	incf	i1getSensorData@bytes,f
  4714  0732  3012               	movlw	18
  4715  0733  120A  158A  2705  120A  118A  	fcall	i1_getSensorData
  4716  0738  3004               	movlw	4
  4717  0739  0672               	xorwf	?i1_getSensorData,w
  4718  073A  0473               	iorwf	?i1_getSensorData+1,w
  4719  073B  1D03               	btfss	3,2
  4720  073C  2F43               	goto	i1l2071
  4721                           
  4722                           ;main.c: 59: FLAG_Advanced++;
  4723  073D  3001               	movlw	1
  4724  073E  00F9               	movwf	??_isr
  4725  073F  0879               	movf	??_isr,w
  4726  0740  1283               	bcf	3,5	;RP0=0, select bank0
  4727  0741  1303               	bcf	3,6	;RP1=0, select bank0
  4728  0742  07BD               	addwf	_FLAG_Advanced,f	;volatile
  4729  0743                     i1l2071:	
  4730                           
  4731                           ;main.c: 61: if(getSensorData(18,1) == 0b00000101)
  4732  0743  01F2               	clrf	i1getSensorData@bytes
  4733  0744  0AF2               	incf	i1getSensorData@bytes,f
  4734  0745  3012               	movlw	18
  4735  0746  120A  158A  2705  120A  118A  	fcall	i1_getSensorData
  4736  074B  3005               	movlw	5
  4737  074C  0672               	xorwf	?i1_getSensorData,w
  4738  074D  0473               	iorwf	?i1_getSensorData+1,w
  4739  074E  1D03               	btfss	3,2
  4740  074F  2F56               	goto	i1l116
  4741                           
  4742                           ;main.c: 62: FLAG_AdvPlay++;
  4743  0750  3001               	movlw	1
  4744  0751  00F9               	movwf	??_isr
  4745  0752  0879               	movf	??_isr,w
  4746  0753  1283               	bcf	3,5	;RP0=0, select bank0
  4747  0754  1303               	bcf	3,6	;RP1=0, select bank0
  4748  0755  07BC               	addwf	_FLAG_AdvPlay,f	;volatile
  4749  0756                     i1l116:	
  4750  0756  087D               	movf	??_isr+4,w
  4751  0757  1283               	bcf	3,5	;RP0=0, select bank0
  4752  0758  1303               	bcf	3,6	;RP1=0, select bank0
  4753  0759  00FF               	movwf	127
  4754  075A  087C               	movf	??_isr+3,w
  4755  075B  008A               	movwf	10
  4756  075C  087B               	movf	??_isr+2,w
  4757  075D  0084               	movwf	4
  4758  075E  0E7A               	swapf	(??_isr+1)^(0+-128),w
  4759  075F  0083               	movwf	3
  4760  0760  0EFE               	swapf	126,f
  4761  0761  0E7E               	swapf	126,w
  4762  0762  0009               	retfie
  4763  0763                     __end_of_isr:	
  4764                           
  4765                           	psect	intentry
  4766  0004                     __pintentry:	
  4767                           ;incstack = 0
  4768                           ; Regs used in _isr: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4769                           
  4770  0004                     interrupt_function:	
  4771  007E                     saved_w	set	btemp
  4772  0004  00FE               	movwf	btemp
  4773  0005  0E03               	swapf	3,w
  4774  0006  00FA               	movwf	??_isr+1
  4775  0007  0804               	movf	4,w
  4776  0008  00FB               	movwf	??_isr+2
  4777  0009  080A               	movf	10,w
  4778  000A  00FC               	movwf	??_isr+3
  4779  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4780  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4781  000D  087F               	movf	btemp+1,w
  4782  000E  00FD               	movwf	??_isr+4
  4783  000F  120A  118A  2EE3   	ljmp	_isr
  4784                           
  4785                           	psect	text23
  4786  0F05                     __ptext23:	
  4787 ;; *************** function i1_getSensorData *****************
  4788 ;; Defined at:
  4789 ;;		line 55 in file "ser.c"
  4790 ;; Parameters:    Size  Location     Type
  4791 ;;  packetID        1    wreg     unsigned char 
  4792 ;;  bytes           1    2[COMMON] unsigned char 
  4793 ;; Auto vars:     Size  Location     Type
  4794 ;;  packetID        1    6[COMMON] unsigned char 
  4795 ;;  getSensorDat    2    7[COMMON] int 
  4796 ;; Return value:  Size  Location     Type
  4797 ;;                  2    2[COMMON] int 
  4798 ;; Registers used:
  4799 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4800 ;; Tracked objects:
  4801 ;;		On entry : 0/0
  4802 ;;		On exit  : 0/0
  4803 ;;		Unchanged: 0/0
  4804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4805 ;;      Params:         2       0       0       0       0
  4806 ;;      Locals:         3       0       0       0       0
  4807 ;;      Temps:          2       0       0       0       0
  4808 ;;      Totals:         7       0       0       0       0
  4809 ;;Total ram usage:        7 bytes
  4810 ;; Hardware stack levels used:    1
  4811 ;; Hardware stack levels required when called:    1
  4812 ;; This function calls:
  4813 ;;		i1_ser_getch
  4814 ;;		i1_ser_putch
  4815 ;; This function is called by:
  4816 ;;		_isr
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           
  4821                           ;psect for function i1_getSensorData
  4822  0F05                     i1_getSensorData:	
  4823                           
  4824                           ;incstack = 0
  4825                           ; Regs used in i1_getSensorData: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4826                           ;i1getSensorData@packetID stored from wreg
  4827  0F05  00F6               	movwf	i1getSensorData@packetID
  4828                           
  4829                           ;ser.c: 56: ser_putch(142);
  4830  0F06  308E               	movlw	142
  4831  0F07  120A  158A  25B9  120A  158A  	fcall	i1_ser_putch
  4832                           
  4833                           ;ser.c: 57: ser_putch(packetID);
  4834  0F0C  0876               	movf	i1getSensorData@packetID,w
  4835  0F0D  120A  158A  25B9  120A  158A  	fcall	i1_ser_putch
  4836                           
  4837                           ;ser.c: 59: if (bytes == 2)
  4838  0F12  3002               	movlw	2
  4839  0F13  0672               	xorwf	i1getSensorData@bytes,w
  4840  0F14  1D03               	btfss	3,2
  4841  0F15  2F21               	goto	i1l2023
  4842                           
  4843                           ;ser.c: 60: highByte = ser_getch();
  4844  0F16  120A  158A  25AF  120A  158A  	fcall	i1_ser_getch
  4845  0F1B  00F4               	movwf	??i1_getSensorData
  4846  0F1C  0874               	movf	??i1_getSensorData,w
  4847  0F1D  1283               	bcf	3,5	;RP0=0, select bank0
  4848  0F1E  1303               	bcf	3,6	;RP1=0, select bank0
  4849  0F1F  00C9               	movwf	_highByte
  4850  0F20  2F24               	goto	i1l2025
  4851  0F21                     i1l2023:	
  4852                           
  4853                           ;ser.c: 61: else
  4854                           ;ser.c: 62: highByte = 0;
  4855  0F21  1283               	bcf	3,5	;RP0=0, select bank0
  4856  0F22  1303               	bcf	3,6	;RP1=0, select bank0
  4857  0F23  01C9               	clrf	_highByte
  4858  0F24                     i1l2025:	
  4859                           
  4860                           ;ser.c: 64: lowByte = ser_getch();
  4861  0F24  120A  158A  25AF   	fcall	i1_ser_getch
  4862  0F27  00F4               	movwf	??i1_getSensorData
  4863  0F28  0874               	movf	??i1_getSensorData,w
  4864  0F29  1283               	bcf	3,5	;RP0=0, select bank0
  4865  0F2A  1303               	bcf	3,6	;RP1=0, select bank0
  4866  0F2B  00C5               	movwf	_lowByte
  4867                           
  4868                           ;ser.c: 66: signed int sensor = (256*highByte + lowByte);
  4869  0F2C  0849               	movf	_highByte,w
  4870  0F2D  00F4               	movwf	??i1_getSensorData
  4871  0F2E  01F5               	clrf	??i1_getSensorData+1
  4872  0F2F  0874               	movf	??i1_getSensorData,w
  4873  0F30  00F5               	movwf	??i1_getSensorData+1
  4874  0F31  01F4               	clrf	??i1_getSensorData
  4875  0F32  0845               	movf	_lowByte,w
  4876  0F33  0774               	addwf	??i1_getSensorData,w
  4877  0F34  00F7               	movwf	i1getSensorData@sensor
  4878  0F35  3000               	movlw	0
  4879  0F36  1803               	skipnc
  4880  0F37  3001               	movlw	1
  4881  0F38  0775               	addwf	??i1_getSensorData+1,w
  4882  0F39  00F8               	movwf	i1getSensorData@sensor+1
  4883                           
  4884                           ;ser.c: 68: return sensor;
  4885  0F3A  0878               	movf	i1getSensorData@sensor+1,w
  4886  0F3B  00F3               	movwf	?i1_getSensorData+1
  4887  0F3C  0877               	movf	i1getSensorData@sensor,w
  4888  0F3D  00F2               	movwf	?i1_getSensorData
  4889  0F3E  0008               	return
  4890  0F3F                     __end_ofi1_getSensorData:	
  4891                           
  4892                           	psect	text24
  4893  0DB9                     __ptext24:	
  4894 ;; *************** function i1_ser_putch *****************
  4895 ;; Defined at:
  4896 ;;		line 30 in file "ser.c"
  4897 ;; Parameters:    Size  Location     Type
  4898 ;;  c               1    wreg     unsigned char 
  4899 ;; Auto vars:     Size  Location     Type
  4900 ;;  c               1    0[COMMON] unsigned char 
  4901 ;; Return value:  Size  Location     Type
  4902 ;;                  1    wreg      void 
  4903 ;; Registers used:
  4904 ;;		wreg
  4905 ;; Tracked objects:
  4906 ;;		On entry : 0/0
  4907 ;;		On exit  : 0/0
  4908 ;;		Unchanged: 0/0
  4909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4910 ;;      Params:         0       0       0       0       0
  4911 ;;      Locals:         1       0       0       0       0
  4912 ;;      Temps:          0       0       0       0       0
  4913 ;;      Totals:         1       0       0       0       0
  4914 ;;Total ram usage:        1 bytes
  4915 ;; Hardware stack levels used:    1
  4916 ;; This function calls:
  4917 ;;		Nothing
  4918 ;; This function is called by:
  4919 ;;		i1_getSensorData
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           
  4924                           ;psect for function i1_ser_putch
  4925  0DB9                     i1_ser_putch:	
  4926                           
  4927                           ;incstack = 0
  4928                           ; Regs used in i1_ser_putch: [wreg]
  4929                           ;i1ser_putch@c stored from wreg
  4930  0DB9  00F0               	movwf	i1ser_putch@c
  4931  0DBA                     i1l313:	
  4932                           ;ser.c: 31: while(!TRMT);
  4933                           
  4934  0DBA  1683               	bsf	3,5	;RP0=1, select bank1
  4935  0DBB  1303               	bcf	3,6	;RP1=0, select bank1
  4936  0DBC  1C98               	btfss	24,1	;volatile
  4937  0DBD  2DBA               	goto	i1l313
  4938                           
  4939                           ;ser.c: 32: TXREG=c;
  4940  0DBE  0870               	movf	i1ser_putch@c,w
  4941  0DBF  1283               	bcf	3,5	;RP0=0, select bank0
  4942  0DC0  1303               	bcf	3,6	;RP1=0, select bank0
  4943  0DC1  0099               	movwf	25	;volatile
  4944  0DC2  0008               	return
  4945  0DC3                     __end_ofi1_ser_putch:	
  4946                           
  4947                           	psect	text25
  4948  0DAF                     __ptext25:	
  4949 ;; *************** function i1_ser_getch *****************
  4950 ;; Defined at:
  4951 ;;		line 35 in file "ser.c"
  4952 ;; Parameters:    Size  Location     Type
  4953 ;;		None
  4954 ;; Auto vars:     Size  Location     Type
  4955 ;;  ser_getch       1    1[COMMON] unsigned char 
  4956 ;; Return value:  Size  Location     Type
  4957 ;;                  1    wreg      unsigned char 
  4958 ;; Registers used:
  4959 ;;		wreg
  4960 ;; Tracked objects:
  4961 ;;		On entry : 0/0
  4962 ;;		On exit  : 0/0
  4963 ;;		Unchanged: 0/0
  4964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4965 ;;      Params:         0       0       0       0       0
  4966 ;;      Locals:         1       0       0       0       0
  4967 ;;      Temps:          1       0       0       0       0
  4968 ;;      Totals:         2       0       0       0       0
  4969 ;;Total ram usage:        2 bytes
  4970 ;; Hardware stack levels used:    1
  4971 ;; This function calls:
  4972 ;;		Nothing
  4973 ;; This function is called by:
  4974 ;;		i1_getSensorData
  4975 ;; This function uses a non-reentrant model
  4976 ;;
  4977                           
  4978                           
  4979                           ;psect for function i1_ser_getch
  4980  0DAF                     i1_ser_getch:	
  4981  0DAF                     i1l319:	
  4982                           ;ser.c: 36: while(!RCIF);
  4983                           
  4984                           ;incstack = 0
  4985                           ; Regs used in i1_ser_getch: [wreg]
  4986                           
  4987  0DAF  1283               	bcf	3,5	;RP0=0, select bank0
  4988  0DB0  1303               	bcf	3,6	;RP1=0, select bank0
  4989  0DB1  1E8C               	btfss	12,5	;volatile
  4990  0DB2  2DAF               	goto	i1l319
  4991                           
  4992                           ;ser.c: 37: unsigned char rxbyte = RCREG;
  4993  0DB3  081A               	movf	26,w	;volatile
  4994  0DB4  00F0               	movwf	??i1_ser_getch
  4995  0DB5  0870               	movf	??i1_ser_getch,w
  4996  0DB6  00F1               	movwf	i1ser_getch@rxbyte
  4997                           
  4998                           ;ser.c: 38: return rxbyte;
  4999  0DB7  0871               	movf	i1ser_getch@rxbyte,w
  5000  0DB8  0008               	return
  5001  0DB9                     __end_ofi1_ser_getch:	
  5002                           
  5003                           	psect	text26
  5004  0ED3                     __ptext26:	
  5005 ;; *************** function ___lwmod *****************
  5006 ;; Defined at:
  5007 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  5008 ;; Parameters:    Size  Location     Type
  5009 ;;  divisor         2    0[COMMON] unsigned int 
  5010 ;;  dividend        2    2[COMMON] unsigned int 
  5011 ;; Auto vars:     Size  Location     Type
  5012 ;;  counter         1    5[COMMON] unsigned char 
  5013 ;; Return value:  Size  Location     Type
  5014 ;;                  2    0[COMMON] unsigned int 
  5015 ;; Registers used:
  5016 ;;		wreg, status,2, status,0
  5017 ;; Tracked objects:
  5018 ;;		On entry : 0/0
  5019 ;;		On exit  : 0/0
  5020 ;;		Unchanged: 0/0
  5021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5022 ;;      Params:         4       0       0       0       0
  5023 ;;      Locals:         1       0       0       0       0
  5024 ;;      Temps:          1       0       0       0       0
  5025 ;;      Totals:         6       0       0       0       0
  5026 ;;Total ram usage:        6 bytes
  5027 ;; Hardware stack levels used:    1
  5028 ;; This function calls:
  5029 ;;		Nothing
  5030 ;; This function is called by:
  5031 ;;		_isr
  5032 ;; This function uses a non-reentrant model
  5033 ;;
  5034                           
  5035                           
  5036                           ;psect for function ___lwmod
  5037  0ED3                     ___lwmod:	
  5038                           
  5039                           ;incstack = 0
  5040                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5041  0ED3  0870               	movf	___lwmod@divisor,w
  5042  0ED4  0471               	iorwf	___lwmod@divisor+1,w
  5043  0ED5  1903               	btfsc	3,2
  5044  0ED6  2F00               	goto	i1l2013
  5045  0ED7  01F5               	clrf	___lwmod@counter
  5046  0ED8  0AF5               	incf	___lwmod@counter,f
  5047  0ED9                     i1l2003:	
  5048  0ED9  1BF1               	btfsc	___lwmod@divisor+1,7
  5049  0EDA  2EE7               	goto	i1l2005
  5050  0EDB  3001               	movlw	1
  5051  0EDC                     u161_25:	
  5052  0EDC  1003               	clrc
  5053  0EDD  0DF0               	rlf	___lwmod@divisor,f
  5054  0EDE  0DF1               	rlf	___lwmod@divisor+1,f
  5055  0EDF  3EFF               	addlw	-1
  5056  0EE0  1D03               	skipz
  5057  0EE1  2EDC               	goto	u161_25
  5058  0EE2  3001               	movlw	1
  5059  0EE3  00F4               	movwf	??___lwmod
  5060  0EE4  0874               	movf	??___lwmod,w
  5061  0EE5  07F5               	addwf	___lwmod@counter,f
  5062  0EE6  2ED9               	goto	i1l2003
  5063  0EE7                     i1l2005:	
  5064  0EE7  0871               	movf	___lwmod@divisor+1,w
  5065  0EE8  0273               	subwf	___lwmod@dividend+1,w
  5066  0EE9  1D03               	skipz
  5067  0EEA  2EED               	goto	u163_25
  5068  0EEB  0870               	movf	___lwmod@divisor,w
  5069  0EEC  0272               	subwf	___lwmod@dividend,w
  5070  0EED                     u163_25:	
  5071  0EED  1C03               	skipc
  5072  0EEE  2EF5               	goto	i1l2009
  5073  0EEF  0870               	movf	___lwmod@divisor,w
  5074  0EF0  02F2               	subwf	___lwmod@dividend,f
  5075  0EF1  0871               	movf	___lwmod@divisor+1,w
  5076  0EF2  1C03               	skipc
  5077  0EF3  03F3               	decf	___lwmod@dividend+1,f
  5078  0EF4  02F3               	subwf	___lwmod@dividend+1,f
  5079  0EF5                     i1l2009:	
  5080  0EF5  3001               	movlw	1
  5081  0EF6                     u164_25:	
  5082  0EF6  1003               	clrc
  5083  0EF7  0CF1               	rrf	___lwmod@divisor+1,f
  5084  0EF8  0CF0               	rrf	___lwmod@divisor,f
  5085  0EF9  3EFF               	addlw	-1
  5086  0EFA  1D03               	skipz
  5087  0EFB  2EF6               	goto	u164_25
  5088  0EFC  3001               	movlw	1
  5089  0EFD  02F5               	subwf	___lwmod@counter,f
  5090  0EFE  1D03               	btfss	3,2
  5091  0EFF  2EE7               	goto	i1l2005
  5092  0F00                     i1l2013:	
  5093  0F00  0873               	movf	___lwmod@dividend+1,w
  5094  0F01  00F1               	movwf	?___lwmod+1
  5095  0F02  0872               	movf	___lwmod@dividend,w
  5096  0F03  00F0               	movwf	?___lwmod
  5097  0F04  0008               	return
  5098  0F05                     __end_of___lwmod:	
  5099  007E                     btemp	set	126	;btemp
  5100  007E                     wtemp	set	126
  5101  007E                     wtemp0	set	126
  5102  0080                     wtemp1	set	128
  5103  0082                     wtemp2	set	130
  5104  0084                     wtemp3	set	132
  5105  0086                     wtemp4	set	134
  5106  0088                     wtemp5	set	136
  5107  007F                     wtemp6	set	127
  5108  007E                     ttemp	set	126
  5109  007E                     ttemp0	set	126
  5110  0081                     ttemp1	set	129
  5111  0084                     ttemp2	set	132
  5112  0087                     ttemp3	set	135
  5113  007F                     ttemp4	set	127
  5114  007E                     ltemp	set	126
  5115  007E                     ltemp0	set	126
  5116  0082                     ltemp1	set	130
  5117  0086                     ltemp2	set	134
  5118  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     35      80
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_getSensorData
    i1_getSensorData->i1_ser_getch

Critical Paths under _main in BANK0

    _setupLCD->_lcdWriteControl
    _getSensorData->_ser_getch
    _Drive->_ser_putch
    _ADCMain->_adcConvertMM
    _lcdWriteToDigitBCD->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl
    _adcConvertMM->___aldiv
    ___lwdiv->___wmul
    ___aldiv->___wmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    6669
                                             31 BANK0      4     4      0
                            _ADCMain
                              _Drive
                      _getSensorData
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
                            _moveCCW
                             _moveCW
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      30
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      22
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _moveCW                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _moveCCW                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _getSensorData                                        7     5      2     511
                                              2 BANK0      7     5      2
                          _ser_getch
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _ser_getch                                            2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Drive                                                8     0      8    1170
                                              1 BANK0      8     0      8
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCMain                                              0     0      0    4247
                       _adcConvertMM
                             _getADC
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (1) _lcdWriteToDigitBCD                                  12    10      2     599
                                              3 BANK0     12    10      2
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (2) _lcdWriteData                                         3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcdSetCursor                                         1     1      0      45
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getADC                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _adcConvertMM                                        10     8      2    3603
                                             21 BANK0     10     8      2
                            ___aldiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1258
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     904
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     618
                                              6 BANK0     15     7      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  5     5      0     455
                                              9 COMMON     5     5      0
                            ___lwmod
                    i1_getSensorData
 ---------------------------------------------------------------------------------
 (5) i1_getSensorData                                      7     5      2     190
                                              2 COMMON     7     5      2
                        i1_ser_getch
                        i1_ser_putch
 ---------------------------------------------------------------------------------
 (6) i1_ser_putch                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) i1_ser_getch                                          2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCMain
     _adcConvertMM
       ___aldiv
         ___wmul (ARG)
       ___lwdiv
         ___wmul (ARG)
       ___wmul
     _getADC
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteToDigitBCD
       _lcdWriteData
   _Drive
     _ser_putch
   _getSensorData
     _ser_getch
     _ser_putch
   _lcdSetCursor
     _lcdWriteControl
   _lcdWriteToDigitBCD
     _lcdWriteData
   _moveCCW
   _moveCW
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)
   ___lwmod
   i1_getSensorData
     i1_ser_getch
     i1_ser_putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     23      50       5      100.0%
BITBANK0            50      0       1       4        1.3%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5E      12        0.0%
ABS                  0      0      5E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Sep 07 17:08:16 2016

               ??_getSensorData 004E                     __CFG_CP$OFF 0000                              _GO 00FA  
                            fsr 0004             ___wmul@multiplicand 004C                     Drive@speedH 004B  
                   Drive@speedL 004D                             l212 063A                             l313 0DC6  
                           l319 07F6                             l258 0DE5                             l443 0FC4  
                           l452 0FFF                             l608 0666                             l553 0E6E  
                           _GIE 005F                             _RB0 0030                             _RB1 0031  
                           _RB2 0032                             _RC2 003A                             _RB4 0034  
                           _RE0 0048                             _RE1 0049                             _RE2 004A  
                  __CFG_CPD$OFF 0000                             u985 0E6F                             u995 0E76  
                           _isr 06E3                 __end_of_ADCMain 0E62                             fsr0 0004  
                           indf 0000                    __CFG_FOSC$HS 0000                  ??_lcdWriteData 004A  
                  __CFG_LVP$OFF 0000                            l2115 042F                            l2107 0412  
                          l2125 0447                            l2143 0485                            l2127 045D  
                          l2119 0440                            l2145 04BE                            l2129 045E  
                          l2163 050D                            l1613 0687                            l1605 0677  
                          l2165 052D                            l2149 04D6                            l1631 06DA  
                          l1623 06BF                            l1615 0697                            l1703 062D  
                          l2175 0543                            l2183 0591                            l2159 04F7  
                          l1801 0368                            l2177 057C                            l2097 03FC  
                          l1627 06CC                            l1723 0FD4                            l2187 05A9  
                          l1653 0F6D                            l1645 0F49                            l1725 0FDE  
                          l1821 0F9F                            l1901 076F                            l1647 0F57  
                          l1583 0E66                            l1743 00FD                            l1727 0FE8  
                          l1823 0FA0                            l1657 0F78                            l1761 01E2  
                          l1737 0096                            l1729 0FF2                            l1681 05E1  
                          l1921 0779                            l1913 0775                            l1905 0771  
                          l1755 01A3                            l1691 0605                            l1931 0787  
                          l1773 0260                            l1749 0164                            l1693 060D  
                          l1685 05EF                            l1925 077B                            l1917 0777  
                          l1909 0773                            l1791 031D                            l1767 0221  
                          l1687 05F7                            l1679 05CB                            l1935 078A  
                          l1785 02DE                            l1697 061B                            l1961 07BC  
                          l1953 07B8                            l1929 0780                            l1937 07A4  
                          l1779 029F                            l1797 035A                            l1981 07CB  
                          l1973 07C2                            l1965 07BE                            l1957 07BA  
                          l1991 07EC                            l1985 07CF                            l1977 07C4  
                          l1969 07C0                            l1899 076A                            l1989 07D2  
                          ?_isr 0070                            u1045 068B                            u1125 0F4C  
                          u2007 07A8                            u1320 00DB                            u1065 0699  
                          u1145 0F58                            u1321 00DC                            u2017 07F0  
                          u1322 00E1                            u1075 06AE                            u1155 0F64  
                          u1323 00E2                            u2027 0DFB                            u1085 06C0  
                          u1165 0F6E                            u2037 0E0E                            u1350 0142  
                          u1351 0143                            u1352 0148                            u1353 0149  
                          u1290 0074                            u1291 0075                            u1292 007A  
                          u1293 007B                            u1805 044D                            u1835 0490  
                          u1775 0410                            u1865 04F5                            u1785 0424  
                          u1937 0373                            u1875 0518                            u1795 043E  
                          u1947 0387                            _PEIE 005E                            u1885 054E  
                          u1957 039B                            u1895 058F                            u1967 03C0  
                          u1977 03D5                            u1987 03EA                            _RCIF 0065  
                          u1997 0E27                            _TMR0 0001                            _TRMT 04C1  
                  __CFG_WRT$OFF 0000                            _radH 002C                            _radL 002E  
                          _main 036B                            _loop 002A                            btemp 007E  
                          ltemp 007E                            start 0012                            ttemp 007E  
                          wtemp 007E                           ??_isr 0079         __end_ofi1_getSensorData 0F3F  
               __end_of___aldiv 06E3                           ?_main 0070                   __CFG_WDTE$OFF 0000  
               __end_of___lwdiv 0F7D                           i1l116 0756                           i1l313 0DBA  
                         i1l319 0DAF                 __end_of___lwmod 0F05                   _totalDistTrav 003A  
                         _RCREG 001A                           _RCSTA 0018                           _SPBRG 0099  
                         _PORTA 0005                           _PORTC 0007                           _PORTD 0008  
                         _PORTE 0009                           _TRISA 0085                           _TRISB 0086  
                         _TRISC 0087                           _TRISD 0088                           _TRISE 0089  
                         _SSPIF 0063                           _TXREG 0019                           _TXSTA 0098  
                         _Drive 0E85      __end_of_lcdWriteToDigitBCD 0654                           _count 0043  
               __end_of_moveCCW 07F6                  __CFG_BOREN$OFF 0000                           pclath 000A  
                   i1_ser_getch 0DAF                           ltemp0 007E                           ltemp1 0082  
                         ltemp2 0086                           ltemp3 0080               i1ser_getch@rxbyte 0071  
                         ttemp0 007E                           ttemp1 0081                           ttemp2 0084  
                         ttemp3 0087                           ttemp4 007F                     i1_ser_putch 0DB9  
                         status 0003                           wtemp0 007E                           wtemp1 0080  
                         wtemp2 0082                           wtemp3 0084                           wtemp4 0086  
                         wtemp5 0088                           wtemp6 007F                 __initialization 0015  
                  __end_of_main 05BD                       ??_ADCMain 0069        __size_of_lcdWriteControl 0014  
                        ??_main 0069            __end_of_lcdSetCursor 0DAF                          ?_Drive 004B  
                        _ADCON0 001F                          _ADCON1 009F                          _ADRESH 001E  
                        _ADRESL 009E                          i1l2003 0ED9                          i1l2005 0EE7  
                        i1l2013 0F00                          i1l2023 0F21                          i1l2009 0EF5  
                        i1l2025 0F24                          i1l2051 070A                          i1l2071 0743  
                        i1l2063 071E                          i1l2055 0712                          i1l2067 0730  
                        i1l2059 0718                          u161_25 0EDC                          u163_25 0EED  
                        u164_25 0EF6                          _TMR0IE 005D                          _TMR0IF 005A  
                        _SSPCON 0014                          _SSPBUF 0013                  __CFG_PWRTE$OFF 0000  
                        _adcRAW 0022                       ??___aldiv 0058                          ___wmul 0E62  
                        _getADC 0FBB            __end_of_lcdWriteData 0E00                       ??___lwdiv 0054  
                     ??___lwmod 0074                          _moveCW 0763                          _speedH 0030  
                        _speedL 0032                ?i1_getSensorData 0072                          _rxbyte 0047  
              __end_of_ser_init 0DDE                __end_of_setupADC 0E2A                       ??_moveCCW 004A  
              __end_of_setupLCD 0ED3                __end_of_setupSPI 0E42                          saved_w 007E  
                    _adcClosest 006D         __end_of__initialization 0029                   __end_of_Drive 0EAA  
                __pcstackCOMMON 0070                    __pidataBANK0 0D9C                         ??_Drive 0053  
             ??_lcdWriteControl 004A                      __pbssBANK0 0020                    _FLAG_AdvPlay 003C  
           lcdSetCursor@address 004D                      __pmaintext 036B                         ?___wmul 004A  
                       ?_getADC 0070                      __pintentry 0004           __size_of_lcdSetCursor 0009  
                       _ADCMain 0E42           __end_of_getSensorData 0FBB                         ?_moveCW 0070  
            __size_of_ser_getch 000A              __size_of_ser_putch 000C                         _SSPSTAT 0094  
                  ?i1_ser_getch 0070                    ?i1_ser_putch 0070           __size_of_lcdWriteData 0013  
                  _lcdSetCursor 0DA6              _lcdWriteToDigitBCD 05BD                       ?_ser_init 0070  
         i1getSensorData@sensor 0077                       ?_setupADC 0070                       ?_setupLCD 0070  
                     ?_setupSPI 0070                         ___aldiv 0654                 __size_of___wmul 0023  
               __size_of_getADC 0045                         ___lwdiv 0F3F                         ___lwmod 0ED3  
           ?_lcdWriteToDigitBCD 004D                         _degrees 0026                       _FLAG_Play 003E  
               __size_of_moveCW 004B                         __ptext1 0DDE                         __ptext2 0E2A  
                       __ptext3 0EAA                         __ptext4 0E14                         __ptext5 0DCF  
                       __ptext6 0763                         __ptext7 07AE                         __ptext8 0F7D  
                       __ptext9 07F6                    __size_of_isr 0080                         _lowByte 0045  
                       _moveCCW 07AE                ___aldiv@dividend 0054                         clrloop0 0D9F  
                  _lcdWriteData 0DED            end_of_initialization 0029            ??_lcdWriteToDigitBCD 004F  
             __end_of_ser_getch 0800               __end_of_ser_putch 0DCF                      ??_ser_init 004A  
                    ??_setupADC 004A                      ??_setupLCD 004D                      ??_setupSPI 004A  
              ___aldiv@quotient 005B                      _time_count 0038                    i1ser_putch@c 0070  
            adcConvertMM@adcRAW 005F                       Drive@radH 004F                       Drive@radL 0051  
                 ?_spi_transfer 0070                 ser_getch@rxbyte 004B                   ?_adcConvertMM 005F  
               _lcdWriteControl 0E00                  __end_of___wmul 0E85                  __end_of_getADC 1000  
                 __pbitbssBANK0 0378                  __end_of_moveCW 07AE             start_initialization 0015  
                   __end_of_isr 0763        __size_ofi1_getSensorData 003A                  ??_spi_transfer 004A  
       i1getSensorData@packetID 0076            __size_ofi1_ser_getch 000A                  ??_adcConvertMM 0061  
          __size_ofi1_ser_putch 000A                        ??___wmul 004E                        ??_getADC 004A  
                   __pdataBANK0 006D                        ?_ADCMain 0070                        ??_moveCW 004A  
                  _negativeFlag 0046                     _FLAG_1000MS 0378                       ___latbits 0002  
                 __pcstackBANK0 004A                   _FLAG_Advanced 003D         __end_of_lcdWriteControl 0E14  
              ___lwdiv@dividend 0052                     _angleTurned 0024                        ?___aldiv 0050  
             __size_of_ser_init 000F                        ?___lwdiv 0050                        ?___lwmod 0070  
             __size_of_setupADC 0016               __size_of_setupLCD 0029               __size_of_setupSPI 0018  
                      ?_moveCCW 0070            i1getSensorData@bytes 0072                  __size_of_Drive 0025  
              ___lwdiv@quotient 0055                 main@controlByte 006C         lcdWriteControl@databyte 004C  
               ___aldiv@divisor 0050               interrupt_function 0004                 ___aldiv@counter 0059  
        __size_of_getSensorData 003E                  ___wmul@product 004E                      ser_putch@c 004A  
             ??i1_getSensorData 0074           getSensorData@packetID 0052                       clear_ram0 0D9E  
                     _ser_getch 07F6                       _ser_putch 0DC3                       _stepCount 0048  
              __size_of_ADCMain 0020            __end_of_spi_transfer 0DED               ___wmul@multiplier 004A  
              spi_transfer@data 004C                spi_transfer@temp 004B            __end_of_adcConvertMM 036B  
                   _controlByte 0042                        _Distance 0020            lcdWriteData@databyte 004C  
   __size_of_lcdWriteToDigitBCD 0097                      ?_ser_getch 0070                ?_lcdWriteControl 0070  
                    ?_ser_putch 0070                __size_of___aldiv 008F                __size_of___lwdiv 003E  
              __size_of___lwmod 0032                   _getSensorData 0F7D                     _currentStep 0044  
lcdWriteToDigitBCD@TenThouDigit 0055                 ___lwdiv@divisor 0050                __size_of_moveCCW 0048  
               ___lwdiv@counter 0057                        __ptext10 0E85                        __ptext11 0DC3  
                      __ptext20 0F3F                        __ptext12 0E42                        __ptext21 0654  
                      __ptext13 05BD                        __ptext22 06E3                        __ptext14 0DED  
                      __ptext23 0F05                        __ptext15 0DA6                        __ptext24 0DB9  
                      __ptext16 0E00                        __ptext25 0DAF                        __ptext17 0FBB  
                      __ptext26 0ED3                        __ptext18 002D                        __ptext19 0E62  
                      _highByte 0049                        _distTrav 0028                   __size_of_main 0252  
                      _ser_init 0DCF                      _PB6Counter 003F                        _setupADC 0E14  
                      _setupLCD 0EAA                        _setupSPI 0E2A                      _PB7Counter 0040  
   lcdWriteToDigitBCD@HunsDigit 0051                      _PB8Counter 0041     lcdWriteToDigitBCD@OnesDigit 0057  
                ?_getSensorData 004C     lcdWriteToDigitBCD@TensDigit 004F     lcdWriteToDigitBCD@ThouDigit 0053  
                 ??i1_ser_getch 0070                        intlevel1 0000                   ??i1_ser_putch 0070  
              ___lwmod@dividend 0072                   ?_lcdSetCursor 0070                     ??_ser_getch 004A  
                   ??_ser_putch 004A             getSensorData@sensor 0050           __size_of_spi_transfer 000F  
         __size_of_adcConvertMM 033E                      _OPTION_REG 0081                 ___lwmod@divisor 0070  
               ___lwmod@counter 0075                 i1_getSensorData 0F05                    ___aldiv@sign 005A  
            getSensorData@bytes 004C                   ?_lcdWriteData 0070          lcdWriteToDigitBCD@data 004D  
                  _spi_transfer 0DDE                  ??_lcdSetCursor 004D                    _stepCountNeg 0036  
                   _stepClosest 0034             __end_ofi1_ser_getch 0DB9                    _adcConvertMM 002D  
           __end_ofi1_ser_putch 0DC3  
