

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Sep 08 17:56:48 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     	;# 
    41  0001                     	;# 
    42  0002                     	;# 
    43  0003                     	;# 
    44  0004                     	;# 
    45  0005                     	;# 
    46  0006                     	;# 
    47  0007                     	;# 
    48  0008                     	;# 
    49  0009                     	;# 
    50  000A                     	;# 
    51  000B                     	;# 
    52  000C                     	;# 
    53  000D                     	;# 
    54  000E                     	;# 
    55  000E                     	;# 
    56  000F                     	;# 
    57  0010                     	;# 
    58  0011                     	;# 
    59  0012                     	;# 
    60  0013                     	;# 
    61  0014                     	;# 
    62  0015                     	;# 
    63  0015                     	;# 
    64  0016                     	;# 
    65  0017                     	;# 
    66  0018                     	;# 
    67  0019                     	;# 
    68  001A                     	;# 
    69  001B                     	;# 
    70  001B                     	;# 
    71  001C                     	;# 
    72  001D                     	;# 
    73  001E                     	;# 
    74  001F                     	;# 
    75  0081                     	;# 
    76  0085                     	;# 
    77  0086                     	;# 
    78  0087                     	;# 
    79  0088                     	;# 
    80  0089                     	;# 
    81  008C                     	;# 
    82  008D                     	;# 
    83  008E                     	;# 
    84  0091                     	;# 
    85  0092                     	;# 
    86  0093                     	;# 
    87  0094                     	;# 
    88  0098                     	;# 
    89  0099                     	;# 
    90  009C                     	;# 
    91  009D                     	;# 
    92  009E                     	;# 
    93  009F                     	;# 
    94  010C                     	;# 
    95  010D                     	;# 
    96  010E                     	;# 
    97  010F                     	;# 
    98  018C                     	;# 
    99  018D                     	;# 
   100  0000                     	;# 
   101  0001                     	;# 
   102  0002                     	;# 
   103  0003                     	;# 
   104  0004                     	;# 
   105  0005                     	;# 
   106  0006                     	;# 
   107  0007                     	;# 
   108  0008                     	;# 
   109  0009                     	;# 
   110  000A                     	;# 
   111  000B                     	;# 
   112  000C                     	;# 
   113  000D                     	;# 
   114  000E                     	;# 
   115  000E                     	;# 
   116  000F                     	;# 
   117  0010                     	;# 
   118  0011                     	;# 
   119  0012                     	;# 
   120  0013                     	;# 
   121  0014                     	;# 
   122  0015                     	;# 
   123  0015                     	;# 
   124  0016                     	;# 
   125  0017                     	;# 
   126  0018                     	;# 
   127  0019                     	;# 
   128  001A                     	;# 
   129  001B                     	;# 
   130  001B                     	;# 
   131  001C                     	;# 
   132  001D                     	;# 
   133  001E                     	;# 
   134  001F                     	;# 
   135  0081                     	;# 
   136  0085                     	;# 
   137  0086                     	;# 
   138  0087                     	;# 
   139  0088                     	;# 
   140  0089                     	;# 
   141  008C                     	;# 
   142  008D                     	;# 
   143  008E                     	;# 
   144  0091                     	;# 
   145  0092                     	;# 
   146  0093                     	;# 
   147  0094                     	;# 
   148  0098                     	;# 
   149  0099                     	;# 
   150  009C                     	;# 
   151  009D                     	;# 
   152  009E                     	;# 
   153  009F                     	;# 
   154  010C                     	;# 
   155  010D                     	;# 
   156  010E                     	;# 
   157  010F                     	;# 
   158  018C                     	;# 
   159  018D                     	;# 
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0006                     	;# 
   167  0007                     	;# 
   168  0008                     	;# 
   169  0009                     	;# 
   170  000A                     	;# 
   171  000B                     	;# 
   172  000C                     	;# 
   173  000D                     	;# 
   174  000E                     	;# 
   175  000E                     	;# 
   176  000F                     	;# 
   177  0010                     	;# 
   178  0011                     	;# 
   179  0012                     	;# 
   180  0013                     	;# 
   181  0014                     	;# 
   182  0015                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0017                     	;# 
   186  0018                     	;# 
   187  0019                     	;# 
   188  001A                     	;# 
   189  001B                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  001D                     	;# 
   193  001E                     	;# 
   194  001F                     	;# 
   195  0081                     	;# 
   196  0085                     	;# 
   197  0086                     	;# 
   198  0087                     	;# 
   199  0088                     	;# 
   200  0089                     	;# 
   201  008C                     	;# 
   202  008D                     	;# 
   203  008E                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0093                     	;# 
   207  0094                     	;# 
   208  0098                     	;# 
   209  0099                     	;# 
   210  009C                     	;# 
   211  009D                     	;# 
   212  009E                     	;# 
   213  009F                     	;# 
   214  010C                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  010F                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220  0000                     	;# 
   221  0001                     	;# 
   222  0002                     	;# 
   223  0003                     	;# 
   224  0004                     	;# 
   225  0005                     	;# 
   226  0006                     	;# 
   227  0007                     	;# 
   228  0008                     	;# 
   229  0009                     	;# 
   230  000A                     	;# 
   231  000B                     	;# 
   232  000C                     	;# 
   233  000D                     	;# 
   234  000E                     	;# 
   235  000E                     	;# 
   236  000F                     	;# 
   237  0010                     	;# 
   238  0011                     	;# 
   239  0012                     	;# 
   240  0013                     	;# 
   241  0014                     	;# 
   242  0015                     	;# 
   243  0015                     	;# 
   244  0016                     	;# 
   245  0017                     	;# 
   246  0018                     	;# 
   247  0019                     	;# 
   248  001A                     	;# 
   249  001B                     	;# 
   250  001B                     	;# 
   251  001C                     	;# 
   252  001D                     	;# 
   253  001E                     	;# 
   254  001F                     	;# 
   255  0081                     	;# 
   256  0085                     	;# 
   257  0086                     	;# 
   258  0087                     	;# 
   259  0088                     	;# 
   260  0089                     	;# 
   261  008C                     	;# 
   262  008D                     	;# 
   263  008E                     	;# 
   264  0091                     	;# 
   265  0092                     	;# 
   266  0093                     	;# 
   267  0094                     	;# 
   268  0098                     	;# 
   269  0099                     	;# 
   270  009C                     	;# 
   271  009D                     	;# 
   272  009E                     	;# 
   273  009F                     	;# 
   274  010C                     	;# 
   275  010D                     	;# 
   276  010E                     	;# 
   277  010F                     	;# 
   278  018C                     	;# 
   279  018D                     	;# 
   280  0000                     	;# 
   281  0001                     	;# 
   282  0002                     	;# 
   283  0003                     	;# 
   284  0004                     	;# 
   285  0005                     	;# 
   286  0006                     	;# 
   287  0007                     	;# 
   288  0008                     	;# 
   289  0009                     	;# 
   290  000A                     	;# 
   291  000B                     	;# 
   292  000C                     	;# 
   293  000D                     	;# 
   294  000E                     	;# 
   295  000E                     	;# 
   296  000F                     	;# 
   297  0010                     	;# 
   298  0011                     	;# 
   299  0012                     	;# 
   300  0013                     	;# 
   301  0014                     	;# 
   302  0015                     	;# 
   303  0015                     	;# 
   304  0016                     	;# 
   305  0017                     	;# 
   306  0018                     	;# 
   307  0019                     	;# 
   308  001A                     	;# 
   309  001B                     	;# 
   310  001B                     	;# 
   311  001C                     	;# 
   312  001D                     	;# 
   313  001E                     	;# 
   314  001F                     	;# 
   315  0081                     	;# 
   316  0085                     	;# 
   317  0086                     	;# 
   318  0087                     	;# 
   319  0088                     	;# 
   320  0089                     	;# 
   321  008C                     	;# 
   322  008D                     	;# 
   323  008E                     	;# 
   324  0091                     	;# 
   325  0092                     	;# 
   326  0093                     	;# 
   327  0094                     	;# 
   328  0098                     	;# 
   329  0099                     	;# 
   330  009C                     	;# 
   331  009D                     	;# 
   332  009E                     	;# 
   333  009F                     	;# 
   334  010C                     	;# 
   335  010D                     	;# 
   336  010E                     	;# 
   337  010F                     	;# 
   338  018C                     	;# 
   339  018D                     	;# 
   340  0000                     	;# 
   341  0001                     	;# 
   342  0002                     	;# 
   343  0003                     	;# 
   344  0004                     	;# 
   345  0005                     	;# 
   346  0006                     	;# 
   347  0007                     	;# 
   348  0008                     	;# 
   349  0009                     	;# 
   350  000A                     	;# 
   351  000B                     	;# 
   352  000C                     	;# 
   353  000D                     	;# 
   354  000E                     	;# 
   355  000E                     	;# 
   356  000F                     	;# 
   357  0010                     	;# 
   358  0011                     	;# 
   359  0012                     	;# 
   360  0013                     	;# 
   361  0014                     	;# 
   362  0015                     	;# 
   363  0015                     	;# 
   364  0016                     	;# 
   365  0017                     	;# 
   366  0018                     	;# 
   367  0019                     	;# 
   368  001A                     	;# 
   369  001B                     	;# 
   370  001B                     	;# 
   371  001C                     	;# 
   372  001D                     	;# 
   373  001E                     	;# 
   374  001F                     	;# 
   375  0081                     	;# 
   376  0085                     	;# 
   377  0086                     	;# 
   378  0087                     	;# 
   379  0088                     	;# 
   380  0089                     	;# 
   381  008C                     	;# 
   382  008D                     	;# 
   383  008E                     	;# 
   384  0091                     	;# 
   385  0092                     	;# 
   386  0093                     	;# 
   387  0094                     	;# 
   388  0098                     	;# 
   389  0099                     	;# 
   390  009C                     	;# 
   391  009D                     	;# 
   392  009E                     	;# 
   393  009F                     	;# 
   394  010C                     	;# 
   395  010D                     	;# 
   396  010E                     	;# 
   397  010F                     	;# 
   398  018C                     	;# 
   399  018D                     	;# 
   400                           
   401                           	psect	idataBANK0
   402  0E47                     __pidataBANK0:	
   403                           
   404                           ;initializer for _adcClosest
   405  0E47  34E8               	retlw	232
   406  0E48  3403               	retlw	3
   407  001F                     _ADCON0	set	31
   408  0005                     _PORTA	set	5
   409  0007                     _PORTC	set	7
   410  0008                     _PORTD	set	8
   411  0009                     _PORTE	set	9
   412  001A                     _RCREG	set	26
   413  0018                     _RCSTA	set	24
   414  0013                     _SSPBUF	set	19
   415  0014                     _SSPCON	set	20
   416  0001                     _TMR0	set	1
   417  0019                     _TXREG	set	25
   418  001E                     _ADRESH	set	30
   419  005F                     _GIE	set	95
   420  00FA                     _GO	set	250
   421  005E                     _PEIE	set	94
   422  0030                     _RB0	set	48
   423  0031                     _RB1	set	49
   424  0032                     _RB2	set	50
   425  0034                     _RB4	set	52
   426  003A                     _RC2	set	58
   427  0065                     _RCIF	set	101
   428  0048                     _RE0	set	72
   429  0049                     _RE1	set	73
   430  004A                     _RE2	set	74
   431  0063                     _SSPIF	set	99
   432  005D                     _TMR0IE	set	93
   433  005A                     _TMR0IF	set	90
   434  009F                     _ADCON1	set	159
   435  009E                     _ADRESL	set	158
   436  0081                     _OPTION_REG	set	129
   437  0099                     _SPBRG	set	153
   438  0094                     _SSPSTAT	set	148
   439  0085                     _TRISA	set	133
   440  0086                     _TRISB	set	134
   441  0087                     _TRISC	set	135
   442  0088                     _TRISD	set	136
   443  0089                     _TRISE	set	137
   444  0098                     _TXSTA	set	152
   445  04C1                     _TRMT	set	1217
   446                           
   447                           ; #config settings
   448  0000                     
   449                           	psect	cinit
   450  0015                     start_initialization:	
   451  0015                     __initialization:	
   452                           
   453                           ; Initialize objects allocated to BANK0
   454  0015  120A  158A  2647  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   455  001A  00E8               	movwf	__pdataBANK0& (0+127)
   456  001B  120A  158A  2648  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   457  0020  00E9               	movwf	(__pdataBANK0+1)& (0+127)
   458                           
   459                           ; Clear objects allocated to BANK0
   460  0021  1383               	bcf	3,7	;select IRP bank0
   461  0022  3020               	movlw	low __pbssBANK0
   462  0023  0084               	movwf	4
   463  0024  3045               	movlw	low (__pbssBANK0+37)
   464  0025  120A  158A  2649   	fcall	clear_ram0
   465                           
   466                           ; Clear objects allocated to COMMON
   467  0028  01FB               	clrf	__pbssCOMMON& (0+127)
   468  0029  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   469                           
   470                           ; Clear objects allocated to BITCOMMON
   471  002A  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   472  002B                     end_of_initialization:	
   473                           ;End of C runtime variable initialization code
   474                           
   475  002B                     __end_of__initialization:	
   476  002B  0183               	clrf	3
   477  002C  120A  118A  2B6D   	ljmp	_main	;jump to C main() function
   478                           
   479                           	psect	bitbssCOMMON
   480  03E8                     __pbitbssCOMMON:	
   481  03E8                     _FLAG_1000MS:	
   482  03E8                     	ds	1
   483                           
   484                           	psect	bssCOMMON
   485  007B                     __pbssCOMMON:	
   486  007B                     _currentStep:	
   487  007B                     	ds	1
   488  007C                     _rxbyte:	
   489  007C                     	ds	1
   490                           
   491                           	psect	bssBANK0
   492  0020                     __pbssBANK0:	
   493  0020                     _Distance:	
   494  0020                     	ds	2
   495  0022                     _adcRAW:	
   496  0022                     	ds	2
   497  0024                     _angleTurned:	
   498  0024                     	ds	2
   499  0026                     _degrees:	
   500  0026                     	ds	2
   501  0028                     _distTrav:	
   502  0028                     	ds	2
   503  002A                     _loop:	
   504  002A                     	ds	2
   505  002C                     _stepClosest:	
   506  002C                     	ds	2
   507  002E                     _stepCountNeg:	
   508  002E                     	ds	2
   509  0030                     _time_count:	
   510  0030                     	ds	2
   511  0032                     _totalDistTrav:	
   512  0032                     	ds	2
   513  0034                     _LeftSpeedH:	
   514  0034                     	ds	1
   515  0035                     _LeftSpeedL:	
   516  0035                     	ds	1
   517  0036                     _PB6Counter:	
   518  0036                     	ds	1
   519  0037                     _PB7Counter:	
   520  0037                     	ds	1
   521  0038                     _PB8Counter:	
   522  0038                     	ds	1
   523  0039                     _RightSpeedH:	
   524  0039                     	ds	1
   525  003A                     _RightSpeedL:	
   526  003A                     	ds	1
   527  003B                     _controlByte:	
   528  003B                     	ds	1
   529  003C                     _count:	
   530  003C                     	ds	1
   531  003D                     _lowByte:	
   532  003D                     	ds	1
   533  003E                     _negativeFlag:	
   534  003E                     	ds	1
   535  003F                     _radH:	
   536  003F                     	ds	1
   537  0040                     _radL:	
   538  0040                     	ds	1
   539  0041                     _speedH:	
   540  0041                     	ds	1
   541  0042                     _speedL:	
   542  0042                     	ds	1
   543  0043                     _stepCount:	
   544  0043                     	ds	1
   545  0044                     _highByte:	
   546  0044                     	ds	1
   547                           
   548                           	psect	dataBANK0
   549  0068                     __pdataBANK0:	
   550  0068                     _adcClosest:	
   551  0068                     	ds	2
   552                           
   553                           	psect	clrtext
   554  0E49                     clear_ram0:	
   555                           ;	Called with FSR containing the base address, and
   556                           ;	W with the last address+1
   557                           
   558  0E49  0064               	clrwdt	;clear the watchdog before getting into this loop
   559  0E4A                     clrloop0:	
   560  0E4A  0180               	clrf	0	;clear RAM location pointed to by FSR
   561  0E4B  0A84               	incf	4,f	;increment pointer
   562  0E4C  0604               	xorwf	4,w	;XOR with final address
   563  0E4D  1903               	btfsc	3,2	;have we reached the end yet?
   564  0E4E  3400               	retlw	0	;all done for this memory range, return
   565  0E4F  0604               	xorwf	4,w	;XOR again to restore value
   566  0E50  2E4A               	goto	clrloop0	;do the next byte
   567                           
   568                           	psect	cstackCOMMON
   569  0070                     __pcstackCOMMON:	
   570  0070                     ?_setupSPI:	
   571  0070                     ?_ser_init:	
   572                           ; 1 bytes @ 0x0
   573                           
   574  0070                     ?_setupLCD:	
   575                           ; 1 bytes @ 0x0
   576                           
   577  0070                     ?_setupADC:	
   578                           ; 1 bytes @ 0x0
   579                           
   580  0070                     ?_spi_transfer:	
   581                           ; 1 bytes @ 0x0
   582                           
   583  0070                     ?_ser_putch:	
   584                           ; 1 bytes @ 0x0
   585                           
   586  0070                     ?_moveCW:	
   587                           ; 1 bytes @ 0x0
   588                           
   589  0070                     ?_ADCMain:	
   590                           ; 1 bytes @ 0x0
   591                           
   592  0070                     ?_moveCCW:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  0070                     ?_lcdSetCursor:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0070                     ?_isr:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0070                     ?_main:	
   602                           ; 1 bytes @ 0x0
   603                           
   604  0070                     ?_lcdWriteControl:	
   605                           ; 1 bytes @ 0x0
   606                           
   607  0070                     ?_lcdWriteData:	
   608                           ; 1 bytes @ 0x0
   609                           
   610  0070                     ?_ser_getch:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0070                     ?_getADC:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0070                     ?___lwmod:	
   617                           ; 2 bytes @ 0x0
   618                           
   619  0070                     ___lwmod@divisor:	
   620                           ; 2 bytes @ 0x0
   621                           
   622                           
   623                           ; 2 bytes @ 0x0
   624  0070                     	ds	2
   625  0072                     ___lwmod@dividend:	
   626                           
   627                           ; 2 bytes @ 0x2
   628  0072                     	ds	2
   629  0074                     ??___lwmod:	
   630                           
   631                           ; 1 bytes @ 0x4
   632  0074                     	ds	1
   633  0075                     ___lwmod@counter:	
   634                           
   635                           ; 1 bytes @ 0x5
   636  0075                     	ds	1
   637  0076                     ??_isr:	
   638                           
   639                           ; 1 bytes @ 0x6
   640  0076                     	ds	5
   641                           
   642                           	psect	cstackBANK0
   643  0045                     __pcstackBANK0:	
   644  0045                     ??_setupSPI:	
   645  0045                     ??_ser_init:	
   646                           ; 1 bytes @ 0x0
   647                           
   648  0045                     ??_setupADC:	
   649                           ; 1 bytes @ 0x0
   650                           
   651  0045                     ??_spi_transfer:	
   652                           ; 1 bytes @ 0x0
   653                           
   654  0045                     ??_ser_putch:	
   655                           ; 1 bytes @ 0x0
   656                           
   657  0045                     ??_moveCW:	
   658                           ; 1 bytes @ 0x0
   659                           
   660  0045                     ??_moveCCW:	
   661                           ; 1 bytes @ 0x0
   662                           
   663  0045                     ??_getADC:	
   664                           ; 1 bytes @ 0x0
   665                           
   666  0045                     ??_lcdWriteControl:	
   667                           ; 1 bytes @ 0x0
   668                           
   669  0045                     ??_lcdWriteData:	
   670                           ; 1 bytes @ 0x0
   671                           
   672  0045                     ??_ser_getch:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0045                     ?___wmul:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0045                     ser_putch@c:	
   679                           ; 2 bytes @ 0x0
   680                           
   681  0045                     ___wmul@multiplier:	
   682                           ; 1 bytes @ 0x0
   683                           
   684                           
   685                           ; 2 bytes @ 0x0
   686  0045                     	ds	1
   687  0046                     ?_DriveDirect:	
   688  0046                     ?_Drive:	
   689                           ; 1 bytes @ 0x1
   690                           
   691  0046                     spi_transfer@temp:	
   692                           ; 1 bytes @ 0x1
   693                           
   694  0046                     ser_getch@rxbyte:	
   695                           ; 1 bytes @ 0x1
   696                           
   697  0046                     Drive@speedL:	
   698                           ; 1 bytes @ 0x1
   699                           
   700  0046                     DriveDirect@RightSpeedL:	
   701                           ; 1 bytes @ 0x1
   702                           
   703                           
   704                           ; 1 bytes @ 0x1
   705  0046                     	ds	1
   706  0047                     ?_getSensorData:	
   707  0047                     lcdWriteControl@databyte:	
   708                           ; 2 bytes @ 0x2
   709                           
   710  0047                     lcdWriteData@databyte:	
   711                           ; 1 bytes @ 0x2
   712                           
   713  0047                     spi_transfer@data:	
   714                           ; 1 bytes @ 0x2
   715                           
   716  0047                     Drive@radH:	
   717                           ; 1 bytes @ 0x2
   718                           
   719  0047                     DriveDirect@LeftSpeedH:	
   720                           ; 1 bytes @ 0x2
   721                           
   722  0047                     getSensorData@bytes:	
   723                           ; 1 bytes @ 0x2
   724                           
   725  0047                     ___wmul@multiplicand:	
   726                           ; 1 bytes @ 0x2
   727                           
   728                           
   729                           ; 2 bytes @ 0x2
   730  0047                     	ds	1
   731  0048                     ??_setupLCD:	
   732  0048                     ?_lcdWriteToDigitBCD:	
   733                           ; 1 bytes @ 0x3
   734                           
   735  0048                     ??_lcdSetCursor:	
   736                           ; 1 bytes @ 0x3
   737                           
   738  0048                     lcdSetCursor@address:	
   739                           ; 1 bytes @ 0x3
   740                           
   741  0048                     Drive@radL:	
   742                           ; 1 bytes @ 0x3
   743                           
   744  0048                     DriveDirect@LeftSpeedL:	
   745                           ; 1 bytes @ 0x3
   746                           
   747  0048                     lcdWriteToDigitBCD@data:	
   748                           ; 1 bytes @ 0x3
   749                           
   750                           
   751                           ; 2 bytes @ 0x3
   752  0048                     	ds	1
   753  0049                     ??_getSensorData:	
   754  0049                     ??_DriveDirect:	
   755                           ; 1 bytes @ 0x4
   756                           
   757  0049                     ??_Drive:	
   758                           ; 1 bytes @ 0x4
   759                           
   760  0049                     ??___wmul:	
   761                           ; 1 bytes @ 0x4
   762                           
   763  0049                     Drive@speedH:	
   764                           ; 1 bytes @ 0x4
   765                           
   766  0049                     DriveDirect@RightSpeedH:	
   767                           ; 1 bytes @ 0x4
   768                           
   769  0049                     ___wmul@product:	
   770                           ; 1 bytes @ 0x4
   771                           
   772                           
   773                           ; 2 bytes @ 0x4
   774  0049                     	ds	1
   775  004A                     ??_lcdWriteToDigitBCD:	
   776  004A                     lcdWriteToDigitBCD@TensDigit:	
   777                           ; 1 bytes @ 0x5
   778                           
   779                           
   780                           ; 2 bytes @ 0x5
   781  004A                     	ds	1
   782  004B                     ?___lwdiv:	
   783  004B                     ?___aldiv:	
   784                           ; 2 bytes @ 0x6
   785                           
   786  004B                     getSensorData@sensor:	
   787                           ; 4 bytes @ 0x6
   788                           
   789  004B                     ___lwdiv@divisor:	
   790                           ; 2 bytes @ 0x6
   791                           
   792  004B                     ___aldiv@divisor:	
   793                           ; 2 bytes @ 0x6
   794                           
   795                           
   796                           ; 4 bytes @ 0x6
   797  004B                     	ds	1
   798  004C                     lcdWriteToDigitBCD@HunsDigit:	
   799                           
   800                           ; 2 bytes @ 0x7
   801  004C                     	ds	1
   802  004D                     getSensorData@packetID:	
   803  004D                     ___lwdiv@dividend:	
   804                           ; 1 bytes @ 0x8
   805                           
   806                           
   807                           ; 2 bytes @ 0x8
   808  004D                     	ds	1
   809  004E                     lcdWriteToDigitBCD@ThouDigit:	
   810                           
   811                           ; 2 bytes @ 0x9
   812  004E                     	ds	1
   813  004F                     ??___lwdiv:	
   814  004F                     ___aldiv@dividend:	
   815                           ; 1 bytes @ 0xA
   816                           
   817                           
   818                           ; 4 bytes @ 0xA
   819  004F                     	ds	1
   820  0050                     lcdWriteToDigitBCD@TenThouDigit:	
   821  0050                     ___lwdiv@quotient:	
   822                           ; 2 bytes @ 0xB
   823                           
   824                           
   825                           ; 2 bytes @ 0xB
   826  0050                     	ds	2
   827  0052                     ___lwdiv@counter:	
   828  0052                     lcdWriteToDigitBCD@OnesDigit:	
   829                           ; 1 bytes @ 0xD
   830                           
   831                           
   832                           ; 2 bytes @ 0xD
   833  0052                     	ds	1
   834  0053                     ??___aldiv:	
   835                           
   836                           ; 1 bytes @ 0xE
   837  0053                     	ds	1
   838  0054                     ___aldiv@counter:	
   839                           
   840                           ; 1 bytes @ 0xF
   841  0054                     	ds	1
   842  0055                     ___aldiv@sign:	
   843                           
   844                           ; 1 bytes @ 0x10
   845  0055                     	ds	1
   846  0056                     ___aldiv@quotient:	
   847                           
   848                           ; 4 bytes @ 0x11
   849  0056                     	ds	4
   850  005A                     ?_adcConvertMM:	
   851  005A                     adcConvertMM@adcRAW:	
   852                           ; 2 bytes @ 0x15
   853                           
   854                           
   855                           ; 2 bytes @ 0x15
   856  005A                     	ds	2
   857  005C                     ??_adcConvertMM:	
   858                           
   859                           ; 1 bytes @ 0x17
   860  005C                     	ds	8
   861  0064                     ??_ADCMain:	
   862  0064                     ??_main:	
   863                           ; 1 bytes @ 0x1F
   864                           
   865                           
   866                           ; 1 bytes @ 0x1F
   867  0064                     	ds	3
   868  0067                     main@controlByte:	
   869                           
   870                           ; 1 bytes @ 0x22
   871  0067                     	ds	1
   872                           
   873                           	psect	maintext
   874  036D                     __pmaintext:	
   875 ;;
   876 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   877 ;;
   878 ;; *************** function _main *****************
   879 ;; Defined at:
   880 ;;		line 69 in file "main.c"
   881 ;; Parameters:    Size  Location     Type
   882 ;;		None
   883 ;; Auto vars:     Size  Location     Type
   884 ;;  controlByte     1   34[BANK0 ] unsigned char 
   885 ;; Return value:  Size  Location     Type
   886 ;;                  1    wreg      void 
   887 ;; Registers used:
   888 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   889 ;; Tracked objects:
   890 ;;		On entry : B00/0
   891 ;;		On exit  : 0/0
   892 ;;		Unchanged: 0/0
   893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   894 ;;      Params:         0       0       0       0       0
   895 ;;      Locals:         0       1       0       0       0
   896 ;;      Temps:          0       3       0       0       0
   897 ;;      Totals:         0       4       0       0       0
   898 ;;Total ram usage:        4 bytes
   899 ;; Hardware stack levels required when called:    5
   900 ;; This function calls:
   901 ;;		_ADCMain
   902 ;;		_Drive
   903 ;;		_DriveDirect
   904 ;;		_getSensorData
   905 ;;		_lcdSetCursor
   906 ;;		_lcdWriteToDigitBCD
   907 ;;		_moveCCW
   908 ;;		_moveCW
   909 ;;		_ser_init
   910 ;;		_ser_putch
   911 ;;		_setupADC
   912 ;;		_setupLCD
   913 ;;		_setupSPI
   914 ;;		_spi_transfer
   915 ;; This function is called by:
   916 ;;		Startup code after reset
   917 ;; This function uses a non-reentrant model
   918 ;;
   919                           
   920                           
   921                           ;psect for function _main
   922  036D                     _main:	
   923                           
   924                           ;main.c: 70: _delay((unsigned long)((5000)*(20000000/4000.0)));
   925                           
   926                           ;incstack = 0
   927                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   928  036D  307F               	movlw	127
   929  036E  1283               	bcf	3,5	;RP0=0, select bank0
   930  036F  1303               	bcf	3,6	;RP1=0, select bank0
   931  0370  00E6               	movwf	??_main+2
   932  0371  30D4               	movlw	212
   933  0372  00E5               	movwf	??_main+1
   934  0373  30AE               	movlw	174
   935  0374  00E4               	movwf	??_main
   936  0375                     u1737:	
   937  0375  0BE4               	decfsz	??_main,f
   938  0376  2B75               	goto	u1737
   939  0377  0BE5               	decfsz	??_main+1,f
   940  0378  2B75               	goto	u1737
   941  0379  0BE6               	decfsz	??_main+2,f
   942  037A  2B75               	goto	u1737
   943  037B  2B7C               	nop2
   944                           
   945                           ;main.c: 73: setupSPI();
   946  037C  120A  158A  26BC  120A  118A  	fcall	_setupSPI
   947                           
   948                           ;main.c: 74: ser_init();
   949  0381  120A  158A  2670  120A  118A  	fcall	_ser_init
   950                           
   951                           ;main.c: 75: setupLCD();
   952  0386  120A  158A  2767  120A  118A  	fcall	_setupLCD
   953                           
   954                           ;main.c: 76: setupADC();
   955  038B  120A  158A  26A6  120A  118A  	fcall	_setupADC
   956                           
   957                           ;main.c: 78: unsigned char controlByte = 0b00001101;
   958  0390  300D               	movlw	13
   959  0391  1283               	bcf	3,5	;RP0=0, select bank0
   960  0392  1303               	bcf	3,6	;RP1=0, select bank0
   961  0393  00E4               	movwf	??_main
   962  0394  0864               	movf	??_main,w
   963  0395  00E7               	movwf	main@controlByte
   964                           
   965                           ;main.c: 79: spi_transfer(controlByte);
   966  0396  0867               	movf	main@controlByte,w
   967  0397  120A  118A  27F1  120A  118A  	fcall	_spi_transfer
   968                           
   969                           ;main.c: 81: _delay((unsigned long)((1000)*(20000000/4000.0)));
   970  039C  301A               	movlw	26
   971  039D  1283               	bcf	3,5	;RP0=0, select bank0
   972  039E  1303               	bcf	3,6	;RP1=0, select bank0
   973  039F  00E6               	movwf	??_main+2
   974  03A0  305E               	movlw	94
   975  03A1  00E5               	movwf	??_main+1
   976  03A2  3086               	movlw	134
   977  03A3  00E4               	movwf	??_main
   978  03A4                     u1747:	
   979  03A4  0BE4               	decfsz	??_main,f
   980  03A5  2BA4               	goto	u1747
   981  03A6  0BE5               	decfsz	??_main+1,f
   982  03A7  2BA4               	goto	u1747
   983  03A8  0BE6               	decfsz	??_main+2,f
   984  03A9  2BA4               	goto	u1747
   985  03AA  0000               	nop
   986                           
   987                           ;main.c: 82: ser_putch(128);
   988  03AB  3080               	movlw	128
   989  03AC  120A  158A  2664  120A  118A  	fcall	_ser_putch
   990                           
   991                           ;main.c: 83: _delay((unsigned long)((1000)*(20000000/4000.0)));
   992  03B1  301A               	movlw	26
   993  03B2  1283               	bcf	3,5	;RP0=0, select bank0
   994  03B3  1303               	bcf	3,6	;RP1=0, select bank0
   995  03B4  00E6               	movwf	??_main+2
   996  03B5  305E               	movlw	94
   997  03B6  00E5               	movwf	??_main+1
   998  03B7  3086               	movlw	134
   999  03B8  00E4               	movwf	??_main
  1000  03B9                     u1757:	
  1001  03B9  0BE4               	decfsz	??_main,f
  1002  03BA  2BB9               	goto	u1757
  1003  03BB  0BE5               	decfsz	??_main+1,f
  1004  03BC  2BB9               	goto	u1757
  1005  03BD  0BE6               	decfsz	??_main+2,f
  1006  03BE  2BB9               	goto	u1757
  1007  03BF  0000               	nop
  1008                           
  1009                           ;main.c: 84: ser_putch(132);
  1010  03C0  3084               	movlw	132
  1011  03C1  120A  158A  2664  120A  118A  	fcall	_ser_putch
  1012                           
  1013                           ;main.c: 85: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1014  03C6  301A               	movlw	26
  1015  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  1016  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  1017  03C9  00E6               	movwf	??_main+2
  1018  03CA  305E               	movlw	94
  1019  03CB  00E5               	movwf	??_main+1
  1020  03CC  3086               	movlw	134
  1021  03CD  00E4               	movwf	??_main
  1022  03CE                     u1767:	
  1023  03CE  0BE4               	decfsz	??_main,f
  1024  03CF  2BCE               	goto	u1767
  1025  03D0  0BE5               	decfsz	??_main+1,f
  1026  03D1  2BCE               	goto	u1767
  1027  03D2  0BE6               	decfsz	??_main+2,f
  1028  03D3  2BCE               	goto	u1767
  1029  03D4  0000               	nop
  1030                           
  1031                           ;main.c: 86: lcdWriteToDigitBCD(totalDistTrav);
  1032  03D5  1283               	bcf	3,5	;RP0=0, select bank0
  1033  03D6  1303               	bcf	3,6	;RP1=0, select bank0
  1034  03D7  0833               	movf	_totalDistTrav+1,w
  1035  03D8  00C9               	movwf	lcdWriteToDigitBCD@data+1
  1036  03D9  0832               	movf	_totalDistTrav,w
  1037  03DA  00C8               	movwf	lcdWriteToDigitBCD@data
  1038  03DB  120A  118A  256F  120A  118A  	fcall	_lcdWriteToDigitBCD
  1039  03E0                     l2021:	
  1040                           ;main.c: 89: while(1){
  1041                           
  1042                           
  1043                           ;main.c: 94: if (PB8Counter >= 10 && !RB0 == 0){
  1044  03E0  300A               	movlw	10
  1045  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  1046  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  1047  03E3  0238               	subwf	_PB8Counter,w
  1048  03E4  1803               	btfsc	3,0
  1049  03E5  1C06               	btfss	6,0	;volatile
  1050  03E6  2C42               	goto	l2053
  1051                           
  1052                           ;main.c: 95: adcClosest = 0;
  1053  03E7  01E8               	clrf	_adcClosest
  1054  03E8  01E9               	clrf	_adcClosest+1
  1055                           
  1056                           ;main.c: 96: for (loop = 0; loop < 400; loop++){
  1057  03E9  01AA               	clrf	_loop
  1058  03EA  01AB               	clrf	_loop+1
  1059  03EB  082B               	movf	_loop+1,w
  1060  03EC  3A80               	xorlw	128
  1061  03ED  00FF               	movwf	127
  1062  03EE  3081               	movlw	129
  1063  03EF  027F               	subwf	127,w
  1064  03F0  1D03               	skipz
  1065  03F1  2BF4               	goto	u1615
  1066  03F2  3090               	movlw	144
  1067  03F3  022A               	subwf	_loop,w
  1068  03F4                     u1615:	
  1069  03F4  1803               	btfsc	3,0
  1070  03F5  2C24               	goto	l2043
  1071  03F6                     l2031:	
  1072                           
  1073                           ;main.c: 97: moveCW();
  1074  03F6  120A  118A  2695  120A  118A  	fcall	_moveCW
  1075                           
  1076                           ;main.c: 98: ADCMain();
  1077  03FB  120A  158A  26D4  120A  118A  	fcall	_ADCMain
  1078                           
  1079                           ;main.c: 99: if (adcRAW > adcClosest){
  1080  0400  1283               	bcf	3,5	;RP0=0, select bank0
  1081  0401  1303               	bcf	3,6	;RP1=0, select bank0
  1082  0402  0823               	movf	_adcRAW+1,w	;volatile
  1083  0403  0269               	subwf	_adcClosest+1,w
  1084  0404  1D03               	skipz
  1085  0405  2C08               	goto	u1625
  1086  0406  0822               	movf	_adcRAW,w	;volatile
  1087  0407  0268               	subwf	_adcClosest,w
  1088  0408                     u1625:	
  1089  0408  1803               	skipnc
  1090  0409  2C13               	goto	l2039
  1091                           
  1092                           ;main.c: 100: adcClosest = adcRAW;
  1093  040A  0823               	movf	_adcRAW+1,w	;volatile
  1094  040B  00E9               	movwf	_adcClosest+1
  1095  040C  0822               	movf	_adcRAW,w	;volatile
  1096  040D  00E8               	movwf	_adcClosest
  1097                           
  1098                           ;main.c: 101: stepClosest = stepCount;
  1099  040E  0843               	movf	_stepCount,w
  1100  040F  00AC               	movwf	_stepClosest
  1101  0410  01AD               	clrf	_stepClosest+1
  1102  0411  1BAC               	btfsc	_stepClosest,7
  1103  0412  03AD               	decf	_stepClosest+1,f
  1104  0413                     l2039:	
  1105  0413  3001               	movlw	1
  1106  0414  07AA               	addwf	_loop,f
  1107  0415  1803               	skipnc
  1108  0416  0AAB               	incf	_loop+1,f
  1109  0417  3000               	movlw	0
  1110  0418  07AB               	addwf	_loop+1,f
  1111  0419  082B               	movf	_loop+1,w
  1112  041A  3A80               	xorlw	128
  1113  041B  00FF               	movwf	127
  1114  041C  3081               	movlw	129
  1115  041D  027F               	subwf	127,w
  1116  041E  1D03               	skipz
  1117  041F  2C22               	goto	u1635
  1118  0420  3090               	movlw	144
  1119  0421  022A               	subwf	_loop,w
  1120  0422                     u1635:	
  1121  0422  1C03               	skipc
  1122  0423  2BF6               	goto	l2031
  1123  0424                     l2043:	
  1124                           
  1125                           ;main.c: 102: }
  1126                           ;main.c: 103: }
  1127                           ;main.c: 105: for (loop = stepCount; loop != stepClosest; loop++){
  1128  0424  1283               	bcf	3,5	;RP0=0, select bank0
  1129  0425  1303               	bcf	3,6	;RP1=0, select bank0
  1130  0426  0843               	movf	_stepCount,w
  1131  0427  00AA               	movwf	_loop
  1132  0428  01AB               	clrf	_loop+1
  1133  0429  1BAA               	btfsc	_loop,7
  1134  042A  03AB               	decf	_loop+1,f
  1135  042B                     l2049:	
  1136  042B  082D               	movf	_stepClosest+1,w
  1137  042C  062B               	xorwf	_loop+1,w
  1138  042D  1D03               	skipz
  1139  042E  2C31               	goto	u1645
  1140  042F  082C               	movf	_stepClosest,w
  1141  0430  062A               	xorwf	_loop,w
  1142  0431                     u1645:	
  1143  0431  1903               	btfsc	3,2
  1144  0432  2C41               	goto	l2051
  1145                           
  1146                           ;main.c: 106: moveCCW();
  1147  0433  120A  118A  26E0  120A  118A  	fcall	_moveCCW
  1148  0438  3001               	movlw	1
  1149  0439  1283               	bcf	3,5	;RP0=0, select bank0
  1150  043A  1303               	bcf	3,6	;RP1=0, select bank0
  1151  043B  07AA               	addwf	_loop,f
  1152  043C  1803               	skipnc
  1153  043D  0AAB               	incf	_loop+1,f
  1154  043E  3000               	movlw	0
  1155  043F  07AB               	addwf	_loop+1,f
  1156  0440  2C2B               	goto	l2049
  1157  0441                     l2051:	
  1158                           
  1159                           ;main.c: 107: }
  1160                           ;main.c: 108: PB8Counter = 0;
  1161  0441  01B8               	clrf	_PB8Counter
  1162  0442                     l2053:	
  1163                           
  1164                           ;main.c: 109: }
  1165                           ;main.c: 114: if (getSensorData(18,1) == 0b00000001){
  1166  0442  01C7               	clrf	getSensorData@bytes
  1167  0443  0AC7               	incf	getSensorData@bytes,f
  1168  0444  3012               	movlw	18
  1169  0445  120A  118A  27B3  120A  118A  	fcall	_getSensorData
  1170  044A  1283               	bcf	3,5	;RP0=0, select bank0
  1171  044B  1303               	bcf	3,6	;RP1=0, select bank0
  1172  044C  0347               	decf	?_getSensorData,w
  1173  044D  0448               	iorwf	?_getSensorData+1,w
  1174  044E  1D03               	btfss	3,2
  1175  044F  2CA3               	goto	l2069
  1176                           
  1177                           ;main.c: 115: DriveDirect(0,250,0,250);
  1178  0450  30FA               	movlw	250
  1179  0451  00E4               	movwf	??_main
  1180  0452  0864               	movf	??_main,w
  1181  0453  00C6               	movwf	DriveDirect@RightSpeedL
  1182  0454  01C7               	clrf	DriveDirect@LeftSpeedH
  1183  0455  30FA               	movlw	250
  1184  0456  00E5               	movwf	??_main+1
  1185  0457  0865               	movf	??_main+1,w
  1186  0458  00C8               	movwf	DriveDirect@LeftSpeedL
  1187  0459  3000               	movlw	0
  1188  045A  120A  158A  273F  120A  118A  	fcall	_DriveDirect
  1189  045F                     l2065:	
  1190                           ;main.c: 116: while (totalDistTrav < 4000){
  1191                           
  1192  045F  1283               	bcf	3,5	;RP0=0, select bank0
  1193  0460  1303               	bcf	3,6	;RP1=0, select bank0
  1194  0461  0833               	movf	_totalDistTrav+1,w
  1195  0462  3A80               	xorlw	128
  1196  0463  00FF               	movwf	127
  1197  0464  308F               	movlw	143
  1198  0465  027F               	subwf	127,w
  1199  0466  1D03               	skipz
  1200  0467  2C6A               	goto	u1665
  1201  0468  30A0               	movlw	160
  1202  0469  0232               	subwf	_totalDistTrav,w
  1203  046A                     u1665:	
  1204  046A  1803               	btfsc	3,0
  1205  046B  2C98               	goto	l2067
  1206                           
  1207                           ;main.c: 117: distTrav = getSensorData(19,2);
  1208  046C  3002               	movlw	2
  1209  046D  1283               	bcf	3,5	;RP0=0, select bank0
  1210  046E  1303               	bcf	3,6	;RP1=0, select bank0
  1211  046F  00E4               	movwf	??_main
  1212  0470  0864               	movf	??_main,w
  1213  0471  00C7               	movwf	getSensorData@bytes
  1214  0472  3013               	movlw	19
  1215  0473  120A  118A  27B3  120A  118A  	fcall	_getSensorData
  1216  0478  1283               	bcf	3,5	;RP0=0, select bank0
  1217  0479  1303               	bcf	3,6	;RP1=0, select bank0
  1218  047A  0848               	movf	?_getSensorData+1,w
  1219  047B  00A9               	movwf	_distTrav+1
  1220  047C  0847               	movf	?_getSensorData,w
  1221  047D  00A8               	movwf	_distTrav
  1222                           
  1223                           ;main.c: 118: totalDistTrav = (totalDistTrav + distTrav);
  1224  047E  0828               	movf	_distTrav,w
  1225  047F  0732               	addwf	_totalDistTrav,w
  1226  0480  00B2               	movwf	_totalDistTrav
  1227  0481  0829               	movf	_distTrav+1,w
  1228  0482  1803               	skipnc
  1229  0483  0A29               	incf	_distTrav+1,w
  1230  0484  0733               	addwf	_totalDistTrav+1,w
  1231  0485  00B3               	movwf	_totalDistTrav+1
  1232                           
  1233                           ;main.c: 120: lcdSetCursor(0x00);
  1234  0486  3000               	movlw	0
  1235  0487  120A  158A  2651  120A  118A  	fcall	_lcdSetCursor
  1236                           
  1237                           ;main.c: 121: lcdWriteToDigitBCD(totalDistTrav);
  1238  048C  1283               	bcf	3,5	;RP0=0, select bank0
  1239  048D  1303               	bcf	3,6	;RP1=0, select bank0
  1240  048E  0833               	movf	_totalDistTrav+1,w
  1241  048F  00C9               	movwf	lcdWriteToDigitBCD@data+1
  1242  0490  0832               	movf	_totalDistTrav,w
  1243  0491  00C8               	movwf	lcdWriteToDigitBCD@data
  1244  0492  120A  118A  256F  120A  118A  	fcall	_lcdWriteToDigitBCD
  1245  0497  2C5F               	goto	l2065
  1246  0498                     l2067:	
  1247                           
  1248                           ;main.c: 122: }
  1249                           ;main.c: 124: DriveDirect(0,0,0,0);
  1250  0498  1283               	bcf	3,5	;RP0=0, select bank0
  1251  0499  1303               	bcf	3,6	;RP1=0, select bank0
  1252  049A  01C6               	clrf	DriveDirect@RightSpeedL
  1253  049B  01C7               	clrf	DriveDirect@LeftSpeedH
  1254  049C  01C8               	clrf	DriveDirect@LeftSpeedL
  1255  049D  3000               	movlw	0
  1256  049E  120A  158A  273F  120A  118A  	fcall	_DriveDirect
  1257  04A3                     l2069:	
  1258                           
  1259                           ;main.c: 126: }
  1260                           ;main.c: 129: if (getSensorData(18,1) == 0b00000100){
  1261  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  1262  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  1263  04A5  01C7               	clrf	getSensorData@bytes
  1264  04A6  0AC7               	incf	getSensorData@bytes,f
  1265  04A7  3012               	movlw	18
  1266  04A8  120A  118A  27B3  120A  118A  	fcall	_getSensorData
  1267  04AD  3004               	movlw	4
  1268  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  1269  04AF  1303               	bcf	3,6	;RP1=0, select bank0
  1270  04B0  0647               	xorwf	?_getSensorData,w
  1271  04B1  0448               	iorwf	?_getSensorData+1,w
  1272  04B2  1D03               	btfss	3,2
  1273  04B3  2D64               	goto	l2103
  1274                           
  1275                           ;main.c: 130: totalDistTrav = 0;
  1276  04B4  01B2               	clrf	_totalDistTrav
  1277  04B5  01B3               	clrf	_totalDistTrav+1
  1278                           
  1279                           ;main.c: 132: for (loop = 0; loop < 4; loop++){
  1280  04B6  01AA               	clrf	_loop
  1281  04B7  01AB               	clrf	_loop+1
  1282  04B8  082B               	movf	_loop+1,w
  1283  04B9  3A80               	xorlw	128
  1284  04BA  00FF               	movwf	127
  1285  04BB  3080               	movlw	128
  1286  04BC  027F               	subwf	127,w
  1287  04BD  1D03               	skipz
  1288  04BE  2CC1               	goto	u1685
  1289  04BF  3004               	movlw	4
  1290  04C0  022A               	subwf	_loop,w
  1291  04C1                     u1685:	
  1292  04C1  1803               	btfsc	3,0
  1293  04C2  2D59               	goto	l2101
  1294  04C3                     l2077:	
  1295                           
  1296                           ;main.c: 135: Drive(0,250,0xFF,0xFF);
  1297  04C3  30FA               	movlw	250
  1298  04C4  1283               	bcf	3,5	;RP0=0, select bank0
  1299  04C5  1303               	bcf	3,6	;RP1=0, select bank0
  1300  04C6  00E4               	movwf	??_main
  1301  04C7  0864               	movf	??_main,w
  1302  04C8  00C6               	movwf	Drive@speedL
  1303  04C9  30FF               	movlw	255
  1304  04CA  00E5               	movwf	??_main+1
  1305  04CB  0865               	movf	??_main+1,w
  1306  04CC  00C7               	movwf	Drive@radH
  1307  04CD  30FF               	movlw	255
  1308  04CE  00E6               	movwf	??_main+2
  1309  04CF  0866               	movf	??_main+2,w
  1310  04D0  00C8               	movwf	Drive@radL
  1311  04D1  3000               	movlw	0
  1312  04D2  120A  158A  2717  120A  118A  	fcall	_Drive
  1313  04D7                     l2081:	
  1314                           ;main.c: 136: while (angleTurned > -90){
  1315                           
  1316  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  1317  04D8  1303               	bcf	3,6	;RP1=0, select bank0
  1318  04D9  0825               	movf	_angleTurned+1,w
  1319  04DA  3A80               	xorlw	128
  1320  04DB  00FF               	movwf	127
  1321  04DC  307F               	movlw	127
  1322  04DD  027F               	subwf	127,w
  1323  04DE  1D03               	skipz
  1324  04DF  2CE2               	goto	u1695
  1325  04E0  30A7               	movlw	167
  1326  04E1  0224               	subwf	_angleTurned,w
  1327  04E2                     u1695:	
  1328  04E2  1C03               	btfss	3,0
  1329  04E3  2CF7               	goto	l2083
  1330                           
  1331                           ;main.c: 137: angleTurned = getSensorData(20,2);
  1332  04E4  3002               	movlw	2
  1333  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  1334  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  1335  04E7  00E4               	movwf	??_main
  1336  04E8  0864               	movf	??_main,w
  1337  04E9  00C7               	movwf	getSensorData@bytes
  1338  04EA  3014               	movlw	20
  1339  04EB  120A  118A  27B3  120A  118A  	fcall	_getSensorData
  1340  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  1341  04F1  1303               	bcf	3,6	;RP1=0, select bank0
  1342  04F2  0848               	movf	?_getSensorData+1,w
  1343  04F3  00A5               	movwf	_angleTurned+1
  1344  04F4  0847               	movf	?_getSensorData,w
  1345  04F5  00A4               	movwf	_angleTurned
  1346  04F6  2CD7               	goto	l2081
  1347  04F7                     l2083:	
  1348                           
  1349                           ;main.c: 138: }
  1350                           ;main.c: 141: Drive(0,250,0x7F,0xFF);
  1351  04F7  30FA               	movlw	250
  1352  04F8  1283               	bcf	3,5	;RP0=0, select bank0
  1353  04F9  1303               	bcf	3,6	;RP1=0, select bank0
  1354  04FA  00E4               	movwf	??_main
  1355  04FB  0864               	movf	??_main,w
  1356  04FC  00C6               	movwf	Drive@speedL
  1357  04FD  307F               	movlw	127
  1358  04FE  00E5               	movwf	??_main+1
  1359  04FF  0865               	movf	??_main+1,w
  1360  0500  00C7               	movwf	Drive@radH
  1361  0501  30FF               	movlw	255
  1362  0502  00E6               	movwf	??_main+2
  1363  0503  0866               	movf	??_main+2,w
  1364  0504  00C8               	movwf	Drive@radL
  1365  0505  3000               	movlw	0
  1366  0506  120A  158A  2717  120A  118A  	fcall	_Drive
  1367  050B                     l2093:	
  1368                           ;main.c: 142: while (totalDistTrav < 1000){
  1369                           
  1370  050B  1283               	bcf	3,5	;RP0=0, select bank0
  1371  050C  1303               	bcf	3,6	;RP1=0, select bank0
  1372  050D  0833               	movf	_totalDistTrav+1,w
  1373  050E  3A80               	xorlw	128
  1374  050F  00FF               	movwf	127
  1375  0510  3083               	movlw	131
  1376  0511  027F               	subwf	127,w
  1377  0512  1D03               	skipz
  1378  0513  2D16               	goto	u1705
  1379  0514  30E8               	movlw	232
  1380  0515  0232               	subwf	_totalDistTrav,w
  1381  0516                     u1705:	
  1382  0516  1803               	btfsc	3,0
  1383  0517  2D44               	goto	l2095
  1384                           
  1385                           ;main.c: 143: distTrav = getSensorData(19,2);
  1386  0518  3002               	movlw	2
  1387  0519  1283               	bcf	3,5	;RP0=0, select bank0
  1388  051A  1303               	bcf	3,6	;RP1=0, select bank0
  1389  051B  00E4               	movwf	??_main
  1390  051C  0864               	movf	??_main,w
  1391  051D  00C7               	movwf	getSensorData@bytes
  1392  051E  3013               	movlw	19
  1393  051F  120A  118A  27B3  120A  118A  	fcall	_getSensorData
  1394  0524  1283               	bcf	3,5	;RP0=0, select bank0
  1395  0525  1303               	bcf	3,6	;RP1=0, select bank0
  1396  0526  0848               	movf	?_getSensorData+1,w
  1397  0527  00A9               	movwf	_distTrav+1
  1398  0528  0847               	movf	?_getSensorData,w
  1399  0529  00A8               	movwf	_distTrav
  1400                           
  1401                           ;main.c: 144: totalDistTrav = (totalDistTrav + distTrav);
  1402  052A  0828               	movf	_distTrav,w
  1403  052B  0732               	addwf	_totalDistTrav,w
  1404  052C  00B2               	movwf	_totalDistTrav
  1405  052D  0829               	movf	_distTrav+1,w
  1406  052E  1803               	skipnc
  1407  052F  0A29               	incf	_distTrav+1,w
  1408  0530  0733               	addwf	_totalDistTrav+1,w
  1409  0531  00B3               	movwf	_totalDistTrav+1
  1410                           
  1411                           ;main.c: 146: lcdSetCursor(0x00);
  1412  0532  3000               	movlw	0
  1413  0533  120A  158A  2651  120A  118A  	fcall	_lcdSetCursor
  1414                           
  1415                           ;main.c: 147: lcdWriteToDigitBCD(totalDistTrav);
  1416  0538  1283               	bcf	3,5	;RP0=0, select bank0
  1417  0539  1303               	bcf	3,6	;RP1=0, select bank0
  1418  053A  0833               	movf	_totalDistTrav+1,w
  1419  053B  00C9               	movwf	lcdWriteToDigitBCD@data+1
  1420  053C  0832               	movf	_totalDistTrav,w
  1421  053D  00C8               	movwf	lcdWriteToDigitBCD@data
  1422  053E  120A  118A  256F  120A  118A  	fcall	_lcdWriteToDigitBCD
  1423  0543  2D0B               	goto	l2093
  1424  0544                     l2095:	
  1425                           
  1426                           ;main.c: 148: }
  1427                           ;main.c: 149: totalDistTrav = 0;
  1428  0544  1283               	bcf	3,5	;RP0=0, select bank0
  1429  0545  1303               	bcf	3,6	;RP1=0, select bank0
  1430  0546  01B2               	clrf	_totalDistTrav
  1431  0547  01B3               	clrf	_totalDistTrav+1
  1432  0548  3001               	movlw	1
  1433  0549  07AA               	addwf	_loop,f
  1434  054A  1803               	skipnc
  1435  054B  0AAB               	incf	_loop+1,f
  1436  054C  3000               	movlw	0
  1437  054D  07AB               	addwf	_loop+1,f
  1438  054E  082B               	movf	_loop+1,w
  1439  054F  3A80               	xorlw	128
  1440  0550  00FF               	movwf	127
  1441  0551  3080               	movlw	128
  1442  0552  027F               	subwf	127,w
  1443  0553  1D03               	skipz
  1444  0554  2D57               	goto	u1715
  1445  0555  3004               	movlw	4
  1446  0556  022A               	subwf	_loop,w
  1447  0557                     u1715:	
  1448  0557  1C03               	skipc
  1449  0558  2CC3               	goto	l2077
  1450  0559                     l2101:	
  1451                           
  1452                           ;main.c: 150: }
  1453                           ;main.c: 152: DriveDirect(0,0,0,0);
  1454  0559  1283               	bcf	3,5	;RP0=0, select bank0
  1455  055A  1303               	bcf	3,6	;RP1=0, select bank0
  1456  055B  01C6               	clrf	DriveDirect@RightSpeedL
  1457  055C  01C7               	clrf	DriveDirect@LeftSpeedH
  1458  055D  01C8               	clrf	DriveDirect@LeftSpeedL
  1459  055E  3000               	movlw	0
  1460  055F  120A  158A  273F  120A  118A  	fcall	_DriveDirect
  1461  0564                     l2103:	
  1462                           
  1463                           ;main.c: 154: }
  1464                           ;main.c: 157: if(getSensorData(18,1) == 0b00000101){
  1465  0564  1283               	bcf	3,5	;RP0=0, select bank0
  1466  0565  1303               	bcf	3,6	;RP1=0, select bank0
  1467  0566  01C7               	clrf	getSensorData@bytes
  1468  0567  0AC7               	incf	getSensorData@bytes,f
  1469  0568  3012               	movlw	18
  1470  0569  120A  118A  27B3  120A  118A  	fcall	_getSensorData
  1471  056E  2BE0               	goto	l2021
  1472  056F                     __end_of_main:	
  1473                           
  1474                           	psect	text1
  1475  07F1                     __ptext1:	
  1476 ;; *************** function _spi_transfer *****************
  1477 ;; Defined at:
  1478 ;;		line 23 in file "SPI.c"
  1479 ;; Parameters:    Size  Location     Type
  1480 ;;  data            1    wreg     unsigned char 
  1481 ;; Auto vars:     Size  Location     Type
  1482 ;;  data            1    2[BANK0 ] unsigned char 
  1483 ;;  temp            1    1[BANK0 ] unsigned char 
  1484 ;; Return value:  Size  Location     Type
  1485 ;;                  1    wreg      unsigned char 
  1486 ;; Registers used:
  1487 ;;		wreg, status,2
  1488 ;; Tracked objects:
  1489 ;;		On entry : 0/0
  1490 ;;		On exit  : 0/0
  1491 ;;		Unchanged: 0/0
  1492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1493 ;;      Params:         0       0       0       0       0
  1494 ;;      Locals:         0       2       0       0       0
  1495 ;;      Temps:          0       1       0       0       0
  1496 ;;      Totals:         0       3       0       0       0
  1497 ;;Total ram usage:        3 bytes
  1498 ;; Hardware stack levels used:    1
  1499 ;; Hardware stack levels required when called:    2
  1500 ;; This function calls:
  1501 ;;		Nothing
  1502 ;; This function is called by:
  1503 ;;		_main
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           
  1508                           ;psect for function _spi_transfer
  1509  07F1                     _spi_transfer:	
  1510                           
  1511                           ;incstack = 0
  1512                           ; Regs used in _spi_transfer: [wreg+status,2]
  1513                           ;spi_transfer@data stored from wreg
  1514  07F1  1283               	bcf	3,5	;RP0=0, select bank0
  1515  07F2  1303               	bcf	3,6	;RP1=0, select bank0
  1516  07F3  00C7               	movwf	spi_transfer@data
  1517                           
  1518                           ;SPI.c: 24: unsigned char temp = 0;
  1519  07F4  01C6               	clrf	spi_transfer@temp
  1520                           
  1521                           ;SPI.c: 26: SSPIF = 0;
  1522  07F5  118C               	bcf	12,3	;volatile
  1523                           
  1524                           ;SPI.c: 27: SSPBUF = data;
  1525  07F6  0847               	movf	spi_transfer@data,w
  1526  07F7  0093               	movwf	19	;volatile
  1527  07F8                     l259:	
  1528                           ;SPI.c: 29: while (SSPIF == 0);
  1529                           
  1530  07F8  1D8C               	btfss	12,3	;volatile
  1531  07F9  2FF8               	goto	l259
  1532                           
  1533                           ;SPI.c: 30: temp = SSPBUF;
  1534  07FA  0813               	movf	19,w	;volatile
  1535  07FB  00C5               	movwf	??_spi_transfer
  1536  07FC  0845               	movf	??_spi_transfer,w
  1537  07FD  00C6               	movwf	spi_transfer@temp
  1538                           
  1539                           ;SPI.c: 31: SSPIF = 0;
  1540  07FE  118C               	bcf	12,3	;volatile
  1541  07FF  0008               	return
  1542  0800                     __end_of_spi_transfer:	
  1543                           ;SPI.c: 33: return temp;
  1544                           ;	Return value of _spi_transfer is never used
  1545                           
  1546                           
  1547                           	psect	text2
  1548  0EBC                     __ptext2:	
  1549 ;; *************** function _setupSPI *****************
  1550 ;; Defined at:
  1551 ;;		line 4 in file "SPI.c"
  1552 ;; Parameters:    Size  Location     Type
  1553 ;;		None
  1554 ;; Auto vars:     Size  Location     Type
  1555 ;;		None
  1556 ;; Return value:  Size  Location     Type
  1557 ;;                  1    wreg      void 
  1558 ;; Registers used:
  1559 ;;		wreg, status,2
  1560 ;; Tracked objects:
  1561 ;;		On entry : 0/0
  1562 ;;		On exit  : 0/0
  1563 ;;		Unchanged: 0/0
  1564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1565 ;;      Params:         0       0       0       0       0
  1566 ;;      Locals:         0       0       0       0       0
  1567 ;;      Temps:          0       0       0       0       0
  1568 ;;      Totals:         0       0       0       0       0
  1569 ;;Total ram usage:        0 bytes
  1570 ;; Hardware stack levels used:    1
  1571 ;; Hardware stack levels required when called:    2
  1572 ;; This function calls:
  1573 ;;		Nothing
  1574 ;; This function is called by:
  1575 ;;		_main
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579                           
  1580                           ;psect for function _setupSPI
  1581  0EBC                     _setupSPI:	
  1582                           
  1583                           ;SPI.c: 6: TRISB = 0b00000000;
  1584                           
  1585                           ;incstack = 0
  1586                           ; Regs used in _setupSPI: [wreg+status,2]
  1587  0EBC  1683               	bsf	3,5	;RP0=1, select bank1
  1588  0EBD  1303               	bcf	3,6	;RP1=0, select bank1
  1589  0EBE  0186               	clrf	6	;volatile
  1590                           
  1591                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  1592  0EBF  3040               	movlw	64
  1593  0EC0  0094               	movwf	20	;volatile
  1594                           
  1595                           ;SPI.c: 9: SSPCON = 0b00100000;
  1596  0EC1  3020               	movlw	32
  1597  0EC2  1283               	bcf	3,5	;RP0=0, select bank0
  1598  0EC3  1303               	bcf	3,6	;RP1=0, select bank0
  1599  0EC4  0094               	movwf	20	;volatile
  1600                           
  1601                           ;SPI.c: 10: TRISC = 0b11010000;
  1602  0EC5  30D0               	movlw	208
  1603  0EC6  1683               	bsf	3,5	;RP0=1, select bank1
  1604  0EC7  1303               	bcf	3,6	;RP1=0, select bank1
  1605  0EC8  0087               	movwf	7	;volatile
  1606                           
  1607                           ;SPI.c: 11: PORTC = 0b00000011;
  1608  0EC9  3003               	movlw	3
  1609  0ECA  1283               	bcf	3,5	;RP0=0, select bank0
  1610  0ECB  1303               	bcf	3,6	;RP1=0, select bank0
  1611  0ECC  0087               	movwf	7	;volatile
  1612                           
  1613                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  1614  0ECD  3004               	movlw	4
  1615  0ECE  1683               	bsf	3,5	;RP0=1, select bank1
  1616  0ECF  1303               	bcf	3,6	;RP1=0, select bank1
  1617  0ED0  0081               	movwf	1	;volatile
  1618                           
  1619                           ;SPI.c: 16: TMR0IE = 1;
  1620  0ED1  168B               	bsf	11,5	;volatile
  1621                           
  1622                           ;SPI.c: 19: (GIE = 1);
  1623  0ED2  178B               	bsf	11,7	;volatile
  1624  0ED3  0008               	return
  1625  0ED4                     __end_of_setupSPI:	
  1626                           
  1627                           	psect	text3
  1628  0F67                     __ptext3:	
  1629 ;; *************** function _setupLCD *****************
  1630 ;; Defined at:
  1631 ;;		line 86 in file "LCD.c"
  1632 ;; Parameters:    Size  Location     Type
  1633 ;;		None
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;		None
  1636 ;; Return value:  Size  Location     Type
  1637 ;;                  1    wreg      void 
  1638 ;; Registers used:
  1639 ;;		wreg, status,2, status,0, pclath, cstack
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1645 ;;      Params:         0       0       0       0       0
  1646 ;;      Locals:         0       0       0       0       0
  1647 ;;      Temps:          0       0       0       0       0
  1648 ;;      Totals:         0       0       0       0       0
  1649 ;;Total ram usage:        0 bytes
  1650 ;; Hardware stack levels used:    1
  1651 ;; Hardware stack levels required when called:    3
  1652 ;; This function calls:
  1653 ;;		_lcdWriteControl
  1654 ;; This function is called by:
  1655 ;;		_main
  1656 ;; This function uses a non-reentrant model
  1657 ;;
  1658                           
  1659                           
  1660                           ;psect for function _setupLCD
  1661  0F67                     _setupLCD:	
  1662                           
  1663                           ;LCD.c: 88: ADCON1 = 0b00000010;
  1664                           
  1665                           ;incstack = 0
  1666                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  1667  0F67  3002               	movlw	2
  1668  0F68  1683               	bsf	3,5	;RP0=1, select bank1
  1669  0F69  1303               	bcf	3,6	;RP1=0, select bank1
  1670  0F6A  009F               	movwf	31	;volatile
  1671                           
  1672                           ;LCD.c: 90: PORTD = 0;
  1673  0F6B  1283               	bcf	3,5	;RP0=0, select bank0
  1674  0F6C  1303               	bcf	3,6	;RP1=0, select bank0
  1675  0F6D  0188               	clrf	8	;volatile
  1676                           
  1677                           ;LCD.c: 91: PORTE = 0;
  1678  0F6E  0189               	clrf	9	;volatile
  1679                           
  1680                           ;LCD.c: 93: TRISD = 0b00000000;
  1681  0F6F  1683               	bsf	3,5	;RP0=1, select bank1
  1682  0F70  1303               	bcf	3,6	;RP1=0, select bank1
  1683  0F71  0188               	clrf	8	;volatile
  1684                           
  1685                           ;LCD.c: 94: TRISE = 0b00000000;
  1686  0F72  0189               	clrf	9	;volatile
  1687                           
  1688                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  1689  0F73  3001               	movlw	1
  1690  0F74  120A  158A  2692  120A  158A  	fcall	_lcdWriteControl
  1691                           
  1692                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  1693  0F79  3038               	movlw	56
  1694  0F7A  120A  158A  2692  120A  158A  	fcall	_lcdWriteControl
  1695                           
  1696                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  1697  0F7F  300C               	movlw	12
  1698  0F80  120A  158A  2692  120A  158A  	fcall	_lcdWriteControl
  1699                           
  1700                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  1701  0F85  3006               	movlw	6
  1702  0F86  120A  158A  2692  120A  158A  	fcall	_lcdWriteControl
  1703                           
  1704                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  1705  0F8B  3002               	movlw	2
  1706  0F8C  120A  158A  2692   	fcall	_lcdWriteControl
  1707  0F8F  0008               	return
  1708  0F90                     __end_of_setupLCD:	
  1709                           
  1710                           	psect	text4
  1711  0EA6                     __ptext4:	
  1712 ;; *************** function _setupADC *****************
  1713 ;; Defined at:
  1714 ;;		line 8 in file "ADC.c"
  1715 ;; Parameters:    Size  Location     Type
  1716 ;;		None
  1717 ;; Auto vars:     Size  Location     Type
  1718 ;;		None
  1719 ;; Return value:  Size  Location     Type
  1720 ;;                  1    wreg      void 
  1721 ;; Registers used:
  1722 ;;		wreg, status,2
  1723 ;; Tracked objects:
  1724 ;;		On entry : 0/0
  1725 ;;		On exit  : 0/0
  1726 ;;		Unchanged: 0/0
  1727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1728 ;;      Params:         0       0       0       0       0
  1729 ;;      Locals:         0       0       0       0       0
  1730 ;;      Temps:          0       1       0       0       0
  1731 ;;      Totals:         0       1       0       0       0
  1732 ;;Total ram usage:        1 bytes
  1733 ;; Hardware stack levels used:    1
  1734 ;; Hardware stack levels required when called:    2
  1735 ;; This function calls:
  1736 ;;		Nothing
  1737 ;; This function is called by:
  1738 ;;		_main
  1739 ;; This function uses a non-reentrant model
  1740 ;;
  1741                           
  1742                           
  1743                           ;psect for function _setupADC
  1744  0EA6                     _setupADC:	
  1745                           
  1746                           ;ADC.c: 9: PORTA = 0;
  1747                           
  1748                           ;incstack = 0
  1749                           ; Regs used in _setupADC: [wreg+status,2]
  1750  0EA6  1283               	bcf	3,5	;RP0=0, select bank0
  1751  0EA7  1303               	bcf	3,6	;RP1=0, select bank0
  1752  0EA8  0185               	clrf	5	;volatile
  1753                           
  1754                           ;ADC.c: 10: TRISA = 0b11111111;
  1755  0EA9  30FF               	movlw	255
  1756  0EAA  1683               	bsf	3,5	;RP0=1, select bank1
  1757  0EAB  1303               	bcf	3,6	;RP1=0, select bank1
  1758  0EAC  0085               	movwf	5	;volatile
  1759                           
  1760                           ;ADC.c: 13: ADCON0 = 0b10001001;
  1761  0EAD  3089               	movlw	137
  1762  0EAE  1283               	bcf	3,5	;RP0=0, select bank0
  1763  0EAF  1303               	bcf	3,6	;RP1=0, select bank0
  1764  0EB0  009F               	movwf	31	;volatile
  1765                           
  1766                           ;ADC.c: 14: ADCON1 = 0b00000010;
  1767  0EB1  3002               	movlw	2
  1768  0EB2  1683               	bsf	3,5	;RP0=1, select bank1
  1769  0EB3  1303               	bcf	3,6	;RP1=0, select bank1
  1770  0EB4  009F               	movwf	31	;volatile
  1771                           
  1772                           ;ADC.c: 16: _delay((unsigned long)((50)*(20000000/4000000.0)));
  1773  0EB5  3053               	movlw	83
  1774  0EB6  1283               	bcf	3,5	;RP0=0, select bank0
  1775  0EB7  1303               	bcf	3,6	;RP1=0, select bank0
  1776  0EB8  00C5               	movwf	??_setupADC
  1777  0EB9                     u1777:	
  1778  0EB9  0BC5               	decfsz	??_setupADC,f
  1779  0EBA  2EB9               	goto	u1777
  1780  0EBB  0008               	return
  1781  0EBC                     __end_of_setupADC:	
  1782                           
  1783                           	psect	text5
  1784  0E70                     __ptext5:	
  1785 ;; *************** function _ser_init *****************
  1786 ;; Defined at:
  1787 ;;		line 5 in file "ser.c"
  1788 ;; Parameters:    Size  Location     Type
  1789 ;;		None
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;		None
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  1    wreg      void 
  1794 ;; Registers used:
  1795 ;;		wreg
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1801 ;;      Params:         0       0       0       0       0
  1802 ;;      Locals:         0       0       0       0       0
  1803 ;;      Temps:          0       0       0       0       0
  1804 ;;      Totals:         0       0       0       0       0
  1805 ;;Total ram usage:        0 bytes
  1806 ;; Hardware stack levels used:    1
  1807 ;; Hardware stack levels required when called:    2
  1808 ;; This function calls:
  1809 ;;		Nothing
  1810 ;; This function is called by:
  1811 ;;		_main
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           
  1816                           ;psect for function _ser_init
  1817  0E70                     _ser_init:	
  1818                           
  1819                           ;ser.c: 7: TXSTA = 0b00100100;
  1820                           
  1821                           ;incstack = 0
  1822                           ; Regs used in _ser_init: [wreg]
  1823  0E70  3024               	movlw	36
  1824  0E71  1683               	bsf	3,5	;RP0=1, select bank1
  1825  0E72  1303               	bcf	3,6	;RP1=0, select bank1
  1826  0E73  0098               	movwf	24	;volatile
  1827                           
  1828                           ;ser.c: 8: RCSTA = 0b10011000;
  1829  0E74  3098               	movlw	152
  1830  0E75  1283               	bcf	3,5	;RP0=0, select bank0
  1831  0E76  1303               	bcf	3,6	;RP1=0, select bank0
  1832  0E77  0098               	movwf	24	;volatile
  1833                           
  1834                           ;ser.c: 24: SPBRG = 20;
  1835  0E78  3014               	movlw	20
  1836  0E79  1683               	bsf	3,5	;RP0=1, select bank1
  1837  0E7A  1303               	bcf	3,6	;RP1=0, select bank1
  1838  0E7B  0099               	movwf	25	;volatile
  1839                           
  1840                           ;ser.c: 26: PEIE = 1;
  1841  0E7C  170B               	bsf	11,6	;volatile
  1842                           
  1843                           ;ser.c: 27: (GIE = 1);
  1844  0E7D  178B               	bsf	11,7	;volatile
  1845  0E7E  0008               	return
  1846  0E7F                     __end_of_ser_init:	
  1847                           
  1848                           	psect	text6
  1849  0695                     __ptext6:	
  1850 ;; *************** function _moveCW *****************
  1851 ;; Defined at:
  1852 ;;		line 5 in file "motor.c"
  1853 ;; Parameters:    Size  Location     Type
  1854 ;;		None
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;		None
  1857 ;; Return value:  Size  Location     Type
  1858 ;;                  1    wreg      void 
  1859 ;; Registers used:
  1860 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1861 ;; Tracked objects:
  1862 ;;		On entry : 0/0
  1863 ;;		On exit  : 0/0
  1864 ;;		Unchanged: 0/0
  1865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1866 ;;      Params:         0       0       0       0       0
  1867 ;;      Locals:         0       0       0       0       0
  1868 ;;      Temps:          0       2       0       0       0
  1869 ;;      Totals:         0       2       0       0       0
  1870 ;;Total ram usage:        2 bytes
  1871 ;; Hardware stack levels used:    1
  1872 ;; Hardware stack levels required when called:    2
  1873 ;; This function calls:
  1874 ;;		Nothing
  1875 ;; This function is called by:
  1876 ;;		_main
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           
  1881                           ;psect for function _moveCW
  1882  0695                     _moveCW:	
  1883                           
  1884                           ;motor.c: 8: if (stepCount == 0) negativeFlag = 1;
  1885                           
  1886                           ;incstack = 0
  1887                           ; Regs used in _moveCW: [wreg-fsr0h+status,2+status,0]
  1888  0695  1283               	bcf	3,5	;RP0=0, select bank0
  1889  0696  1303               	bcf	3,6	;RP1=0, select bank0
  1890  0697  0843               	movf	_stepCount,w
  1891  0698  1D03               	btfss	3,2
  1892  0699  2E9C               	goto	l1835
  1893  069A  01BE               	clrf	_negativeFlag
  1894  069B  0ABE               	incf	_negativeFlag,f
  1895  069C                     l1835:	
  1896                           
  1897                           ;motor.c: 10: stepCount--;
  1898  069C  30FF               	movlw	255
  1899  069D  00C5               	movwf	??_moveCW
  1900  069E  0845               	movf	??_moveCW,w
  1901  069F  07C3               	addwf	_stepCount,f
  1902                           
  1903                           ;motor.c: 13: switch(currentStep){
  1904  06A0  2EBC               	goto	l1871
  1905  06A1                     l1837:	
  1906                           ;motor.c: 15: case 7: PORTC = 0b00011011;
  1907                           
  1908  06A1  301B               	movlw	27
  1909  06A2  2EAE               	goto	L1
  1910  06A3                     l1841:	
  1911                           ;motor.c: 19: case 6: PORTC = 0b00010111;
  1912                           
  1913                           ;motor.c: 17: break;
  1914                           
  1915                           ;motor.c: 16: currentStep--;
  1916                           
  1917  06A3  3017               	movlw	23
  1918  06A4  2EAE               	goto	L1
  1919  06A5                     l1845:	
  1920                           ;motor.c: 23: case 5: PORTC = 0b00110101;
  1921                           
  1922                           ;motor.c: 21: break;
  1923                           
  1924                           ;motor.c: 20: currentStep--;
  1925                           
  1926  06A5  3035               	movlw	53
  1927  06A6  2EAE               	goto	L1
  1928  06A7                     l1849:	
  1929                           ;motor.c: 27: case 4: PORTC = 0b00100111;
  1930                           
  1931                           ;motor.c: 25: break;
  1932                           
  1933                           ;motor.c: 24: currentStep--;
  1934                           
  1935  06A7  3027               	movlw	39
  1936  06A8  2EAE               	goto	L1
  1937  06A9                     l1853:	
  1938                           ;motor.c: 31: case 3: PORTC = 0b00101011;
  1939                           
  1940                           ;motor.c: 29: break;
  1941                           
  1942                           ;motor.c: 28: currentStep--;
  1943                           
  1944  06A9  302B               	movlw	43
  1945  06AA  2EAE               	goto	L1
  1946  06AB                     l1857:	
  1947                           ;motor.c: 35: case 2: PORTC = 0b00101110;
  1948                           
  1949                           ;motor.c: 33: break;
  1950                           
  1951                           ;motor.c: 32: currentStep--;
  1952                           
  1953  06AB  302E               	movlw	46
  1954  06AC  2EAE               	goto	L1
  1955  06AD                     l1861:	
  1956                           ;motor.c: 39: case 1: PORTC = 0b00111100;
  1957                           
  1958                           ;motor.c: 37: break;
  1959                           
  1960                           ;motor.c: 36: currentStep--;
  1961                           
  1962  06AD  303C               	movlw	60
  1963  06AE                     L1:	
  1964  06AE  0087               	movwf	7	;volatile
  1965                           
  1966                           ;motor.c: 40: currentStep--;
  1967  06AF  3001               	movlw	1
  1968  06B0  02FB               	subwf	_currentStep,f
  1969                           
  1970                           ;motor.c: 41: break;
  1971  06B1  2ED6               	goto	l1873
  1972  06B2                     l1865:	
  1973                           ;motor.c: 43: case 0: PORTC = 0b00011110;
  1974                           
  1975  06B2  301E               	movlw	30
  1976  06B3  0087               	movwf	7	;volatile
  1977                           
  1978                           ;motor.c: 44: currentStep = 7;
  1979  06B4  3007               	movlw	7
  1980  06B5  00C5               	movwf	??_moveCW
  1981  06B6  0845               	movf	??_moveCW,w
  1982  06B7  00FB               	movwf	_currentStep
  1983                           
  1984                           ;motor.c: 45: break;
  1985  06B8  2ED6               	goto	l1873
  1986  06B9                     l1867:	
  1987                           ;motor.c: 47: default: PORTC = 0b00111001;
  1988                           
  1989  06B9  3039               	movlw	57
  1990  06BA  0087               	movwf	7	;volatile
  1991                           
  1992                           ;motor.c: 49: }
  1993                           
  1994                           ;motor.c: 48: break;
  1995  06BB  2ED6               	goto	l1873
  1996  06BC                     l1871:	
  1997  06BC  087B               	movf	_currentStep,w
  1998                           
  1999                           ; Switch size 1, requested type "space"
  2000                           ; Number of cases is 8, Range of values is 0 to 7
  2001                           ; switch strategies available:
  2002                           ; Name         Instructions Cycles
  2003                           ; simple_byte           25    13 (average)
  2004                           ; direct_byte           32     8 (fixed)
  2005                           ; jumptable            260     6 (fixed)
  2006                           ;	Chosen strategy is simple_byte
  2007  06BD  3A00               	xorlw	0	; case 0
  2008  06BE  1903               	skipnz
  2009  06BF  2EB2               	goto	l1865
  2010  06C0  3A01               	xorlw	1	; case 1
  2011  06C1  1903               	skipnz
  2012  06C2  2EAD               	goto	l1861
  2013  06C3  3A03               	xorlw	3	; case 2
  2014  06C4  1903               	skipnz
  2015  06C5  2EAB               	goto	l1857
  2016  06C6  3A01               	xorlw	1	; case 3
  2017  06C7  1903               	skipnz
  2018  06C8  2EA9               	goto	l1853
  2019  06C9  3A07               	xorlw	7	; case 4
  2020  06CA  1903               	skipnz
  2021  06CB  2EA7               	goto	l1849
  2022  06CC  3A01               	xorlw	1	; case 5
  2023  06CD  1903               	skipnz
  2024  06CE  2EA5               	goto	l1845
  2025  06CF  3A03               	xorlw	3	; case 6
  2026  06D0  1903               	skipnz
  2027  06D1  2EA3               	goto	l1841
  2028  06D2  3A01               	xorlw	1	; case 7
  2029  06D3  1903               	skipnz
  2030  06D4  2EA1               	goto	l1837
  2031  06D5  2EB9               	goto	l1867
  2032  06D6                     l1873:	
  2033                           
  2034                           ;motor.c: 51: _delay((unsigned long)((3)*(20000000/4000.0)));
  2035  06D6  3014               	movlw	20
  2036  06D7  00C6               	movwf	??_moveCW+1
  2037  06D8  3079               	movlw	121
  2038  06D9  00C5               	movwf	??_moveCW
  2039  06DA                     u1787:	
  2040  06DA  0BC5               	decfsz	??_moveCW,f
  2041  06DB  2EDA               	goto	u1787
  2042  06DC  0BC6               	decfsz	??_moveCW+1,f
  2043  06DD  2EDA               	goto	u1787
  2044  06DE  2EDF               	nop2
  2045  06DF  0008               	return
  2046  06E0                     __end_of_moveCW:	
  2047                           
  2048                           	psect	text7
  2049  06E0                     __ptext7:	
  2050 ;; *************** function _moveCCW *****************
  2051 ;; Defined at:
  2052 ;;		line 55 in file "motor.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;		None
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;		None
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  1    wreg      void 
  2059 ;; Registers used:
  2060 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2066 ;;      Params:         0       0       0       0       0
  2067 ;;      Locals:         0       0       0       0       0
  2068 ;;      Temps:          0       2       0       0       0
  2069 ;;      Totals:         0       2       0       0       0
  2070 ;;Total ram usage:        2 bytes
  2071 ;; Hardware stack levels used:    1
  2072 ;; Hardware stack levels required when called:    2
  2073 ;; This function calls:
  2074 ;;		Nothing
  2075 ;; This function is called by:
  2076 ;;		_main
  2077 ;; This function uses a non-reentrant model
  2078 ;;
  2079                           
  2080                           
  2081                           ;psect for function _moveCCW
  2082  06E0                     _moveCCW:	
  2083                           
  2084                           ;motor.c: 57: if (stepCount == (-1)) negativeFlag = 0;
  2085                           
  2086                           ;incstack = 0
  2087                           ; Regs used in _moveCCW: [wreg-fsr0h+status,2+status,0]
  2088  06E0  1283               	bcf	3,5	;RP0=0, select bank0
  2089  06E1  1303               	bcf	3,6	;RP1=0, select bank0
  2090  06E2  0A43               	incf	_stepCount,w
  2091  06E3  1903               	btfsc	3,2
  2092  06E4  01BE               	clrf	_negativeFlag
  2093                           
  2094                           ;motor.c: 59: stepCount++;
  2095  06E5  3001               	movlw	1
  2096  06E6  00C5               	movwf	??_moveCCW
  2097  06E7  0845               	movf	??_moveCCW,w
  2098  06E8  07C3               	addwf	_stepCount,f
  2099                           
  2100                           ;motor.c: 62: switch(currentStep){
  2101  06E9  2F04               	goto	l1925
  2102  06EA                     l1889:	
  2103                           ;motor.c: 63: case 0: PORTC = 0b00101110;
  2104                           
  2105  06EA  302E               	movlw	46
  2106  06EB  2EF7               	goto	L2
  2107  06EC                     l1893:	
  2108                           ;motor.c: 67: case 1: PORTC = 0b00101011;
  2109                           
  2110                           ;motor.c: 65: break;
  2111                           
  2112                           ;motor.c: 64: currentStep++;
  2113                           
  2114  06EC  302B               	movlw	43
  2115  06ED  2EF7               	goto	L2
  2116  06EE                     l1897:	
  2117                           ;motor.c: 71: case 2: PORTC = 0b00100111;
  2118                           
  2119                           ;motor.c: 69: break;
  2120                           
  2121                           ;motor.c: 68: currentStep++;
  2122                           
  2123  06EE  3027               	movlw	39
  2124  06EF  2EF7               	goto	L2
  2125  06F0                     l1901:	
  2126                           ;motor.c: 75: case 3: PORTC = 0b00110101;
  2127                           
  2128                           ;motor.c: 73: break;
  2129                           
  2130                           ;motor.c: 72: currentStep++;
  2131                           
  2132  06F0  3035               	movlw	53
  2133  06F1  2EF7               	goto	L2
  2134  06F2                     l1905:	
  2135                           ;motor.c: 79: case 4: PORTC = 0b00010111;
  2136                           
  2137                           ;motor.c: 77: break;
  2138                           
  2139                           ;motor.c: 76: currentStep++;
  2140                           
  2141  06F2  3017               	movlw	23
  2142  06F3  2EF7               	goto	L2
  2143  06F4                     l1909:	
  2144                           ;motor.c: 83: case 5: PORTC = 0b00011011;
  2145                           
  2146                           ;motor.c: 81: break;
  2147                           
  2148                           ;motor.c: 80: currentStep++;
  2149                           
  2150  06F4  301B               	movlw	27
  2151  06F5  2EF7               	goto	L2
  2152  06F6                     l1913:	
  2153                           ;motor.c: 87: case 6: PORTC = 0b00011110;
  2154                           
  2155                           ;motor.c: 85: break;
  2156                           
  2157                           ;motor.c: 84: currentStep++;
  2158                           
  2159  06F6  301E               	movlw	30
  2160  06F7                     L2:	
  2161  06F7  0087               	movwf	7	;volatile
  2162                           
  2163                           ;motor.c: 88: currentStep++;
  2164  06F8  3001               	movlw	1
  2165  06F9  00C5               	movwf	??_moveCCW
  2166  06FA  0845               	movf	??_moveCCW,w
  2167  06FB  07FB               	addwf	_currentStep,f
  2168                           
  2169                           ;motor.c: 89: break;
  2170  06FC  2F1E               	goto	l1927
  2171  06FD                     l1917:	
  2172                           ;motor.c: 91: case 7: PORTC = 0b00111100;
  2173                           
  2174  06FD  303C               	movlw	60
  2175  06FE  0087               	movwf	7	;volatile
  2176                           
  2177                           ;motor.c: 92: currentStep = 0;
  2178  06FF  01FB               	clrf	_currentStep
  2179                           
  2180                           ;motor.c: 93: break;
  2181  0700  2F1E               	goto	l1927
  2182  0701                     l1921:	
  2183                           ;motor.c: 95: default: PORTC = 0b00111001;
  2184                           
  2185  0701  3039               	movlw	57
  2186  0702  0087               	movwf	7	;volatile
  2187                           
  2188                           ;motor.c: 97: }
  2189                           
  2190                           ;motor.c: 96: break;
  2191  0703  2F1E               	goto	l1927
  2192  0704                     l1925:	
  2193  0704  087B               	movf	_currentStep,w
  2194                           
  2195                           ; Switch size 1, requested type "space"
  2196                           ; Number of cases is 8, Range of values is 0 to 7
  2197                           ; switch strategies available:
  2198                           ; Name         Instructions Cycles
  2199                           ; simple_byte           25    13 (average)
  2200                           ; direct_byte           32     8 (fixed)
  2201                           ; jumptable            260     6 (fixed)
  2202                           ;	Chosen strategy is simple_byte
  2203  0705  3A00               	xorlw	0	; case 0
  2204  0706  1903               	skipnz
  2205  0707  2EEA               	goto	l1889
  2206  0708  3A01               	xorlw	1	; case 1
  2207  0709  1903               	skipnz
  2208  070A  2EEC               	goto	l1893
  2209  070B  3A03               	xorlw	3	; case 2
  2210  070C  1903               	skipnz
  2211  070D  2EEE               	goto	l1897
  2212  070E  3A01               	xorlw	1	; case 3
  2213  070F  1903               	skipnz
  2214  0710  2EF0               	goto	l1901
  2215  0711  3A07               	xorlw	7	; case 4
  2216  0712  1903               	skipnz
  2217  0713  2EF2               	goto	l1905
  2218  0714  3A01               	xorlw	1	; case 5
  2219  0715  1903               	skipnz
  2220  0716  2EF4               	goto	l1909
  2221  0717  3A03               	xorlw	3	; case 6
  2222  0718  1903               	skipnz
  2223  0719  2EF6               	goto	l1913
  2224  071A  3A01               	xorlw	1	; case 7
  2225  071B  1903               	skipnz
  2226  071C  2EFD               	goto	l1917
  2227  071D  2F01               	goto	l1921
  2228  071E                     l1927:	
  2229                           
  2230                           ;motor.c: 99: _delay((unsigned long)((3)*(20000000/4000.0)));
  2231  071E  3014               	movlw	20
  2232  071F  00C6               	movwf	??_moveCCW+1
  2233  0720  3079               	movlw	121
  2234  0721  00C5               	movwf	??_moveCCW
  2235  0722                     u1797:	
  2236  0722  0BC5               	decfsz	??_moveCCW,f
  2237  0723  2F22               	goto	u1797
  2238  0724  0BC6               	decfsz	??_moveCCW+1,f
  2239  0725  2F22               	goto	u1797
  2240  0726  2F27               	nop2
  2241  0727  0008               	return
  2242  0728                     __end_of_moveCCW:	
  2243                           
  2244                           	psect	text8
  2245  07B3                     __ptext8:	
  2246 ;; *************** function _getSensorData *****************
  2247 ;; Defined at:
  2248 ;;		line 62 in file "ser.c"
  2249 ;; Parameters:    Size  Location     Type
  2250 ;;  packetID        1    wreg     unsigned char 
  2251 ;;  bytes           1    2[BANK0 ] unsigned char 
  2252 ;; Auto vars:     Size  Location     Type
  2253 ;;  packetID        1    8[BANK0 ] unsigned char 
  2254 ;;  sensor          2    6[BANK0 ] int 
  2255 ;; Return value:  Size  Location     Type
  2256 ;;                  2    2[BANK0 ] int 
  2257 ;; Registers used:
  2258 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2259 ;; Tracked objects:
  2260 ;;		On entry : 0/0
  2261 ;;		On exit  : 0/0
  2262 ;;		Unchanged: 0/0
  2263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2264 ;;      Params:         0       2       0       0       0
  2265 ;;      Locals:         0       3       0       0       0
  2266 ;;      Temps:          0       2       0       0       0
  2267 ;;      Totals:         0       7       0       0       0
  2268 ;;Total ram usage:        7 bytes
  2269 ;; Hardware stack levels used:    1
  2270 ;; Hardware stack levels required when called:    3
  2271 ;; This function calls:
  2272 ;;		_ser_getch
  2273 ;;		_ser_putch
  2274 ;; This function is called by:
  2275 ;;		_main
  2276 ;; This function uses a non-reentrant model
  2277 ;;
  2278                           
  2279                           
  2280                           ;psect for function _getSensorData
  2281  07B3                     _getSensorData:	
  2282                           
  2283                           ;incstack = 0
  2284                           ; Regs used in _getSensorData: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2285                           ;getSensorData@packetID stored from wreg
  2286  07B3  1283               	bcf	3,5	;RP0=0, select bank0
  2287  07B4  1303               	bcf	3,6	;RP1=0, select bank0
  2288  07B5  00CD               	movwf	getSensorData@packetID
  2289                           
  2290                           ;ser.c: 63: ser_putch(142);
  2291  07B6  308E               	movlw	142
  2292  07B7  120A  158A  2664  120A  118A  	fcall	_ser_putch
  2293                           
  2294                           ;ser.c: 64: ser_putch(packetID);
  2295  07BC  1283               	bcf	3,5	;RP0=0, select bank0
  2296  07BD  1303               	bcf	3,6	;RP1=0, select bank0
  2297  07BE  084D               	movf	getSensorData@packetID,w
  2298  07BF  120A  158A  2664  120A  118A  	fcall	_ser_putch
  2299                           
  2300                           ;ser.c: 66: if (bytes == 2)
  2301  07C4  3002               	movlw	2
  2302  07C5  1283               	bcf	3,5	;RP0=0, select bank0
  2303  07C6  1303               	bcf	3,6	;RP1=0, select bank0
  2304  07C7  0647               	xorwf	getSensorData@bytes,w
  2305  07C8  1D03               	btfss	3,2
  2306  07C9  2FD5               	goto	l1935
  2307                           
  2308                           ;ser.c: 67: highByte = ser_getch();
  2309  07CA  120A  158A  265A  120A  118A  	fcall	_ser_getch
  2310  07CF  1283               	bcf	3,5	;RP0=0, select bank0
  2311  07D0  1303               	bcf	3,6	;RP1=0, select bank0
  2312  07D1  00C9               	movwf	??_getSensorData
  2313  07D2  0849               	movf	??_getSensorData,w
  2314  07D3  00C4               	movwf	_highByte
  2315  07D4  2FD6               	goto	l1937
  2316  07D5                     l1935:	
  2317                           
  2318                           ;ser.c: 68: else
  2319                           ;ser.c: 69: highByte = 0;
  2320  07D5  01C4               	clrf	_highByte
  2321  07D6                     l1937:	
  2322                           
  2323                           ;ser.c: 71: lowByte = ser_getch();
  2324  07D6  120A  158A  265A   	fcall	_ser_getch
  2325  07D9  1283               	bcf	3,5	;RP0=0, select bank0
  2326  07DA  1303               	bcf	3,6	;RP1=0, select bank0
  2327  07DB  00C9               	movwf	??_getSensorData
  2328  07DC  0849               	movf	??_getSensorData,w
  2329  07DD  00BD               	movwf	_lowByte
  2330                           
  2331                           ;ser.c: 73: signed int sensor = (256*highByte + lowByte);
  2332  07DE  0844               	movf	_highByte,w
  2333  07DF  00C9               	movwf	??_getSensorData
  2334  07E0  01CA               	clrf	??_getSensorData+1
  2335  07E1  0849               	movf	??_getSensorData,w
  2336  07E2  00CA               	movwf	??_getSensorData+1
  2337  07E3  01C9               	clrf	??_getSensorData
  2338  07E4  083D               	movf	_lowByte,w
  2339  07E5  0749               	addwf	??_getSensorData,w
  2340  07E6  00CB               	movwf	getSensorData@sensor
  2341  07E7  3000               	movlw	0
  2342  07E8  1803               	skipnc
  2343  07E9  3001               	movlw	1
  2344  07EA  074A               	addwf	??_getSensorData+1,w
  2345  07EB  00CC               	movwf	getSensorData@sensor+1
  2346                           
  2347                           ;ser.c: 75: return sensor;
  2348  07EC  084C               	movf	getSensorData@sensor+1,w
  2349  07ED  00C8               	movwf	?_getSensorData+1
  2350  07EE  084B               	movf	getSensorData@sensor,w
  2351  07EF  00C7               	movwf	?_getSensorData
  2352  07F0  0008               	return
  2353  07F1                     __end_of_getSensorData:	
  2354                           
  2355                           	psect	text9
  2356  0E5A                     __ptext9:	
  2357 ;; *************** function _ser_getch *****************
  2358 ;; Defined at:
  2359 ;;		line 35 in file "ser.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;		None
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  1    wreg      unsigned char 
  2366 ;; Registers used:
  2367 ;;		wreg
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2373 ;;      Params:         0       0       0       0       0
  2374 ;;      Locals:         0       1       0       0       0
  2375 ;;      Temps:          0       1       0       0       0
  2376 ;;      Totals:         0       2       0       0       0
  2377 ;;Total ram usage:        2 bytes
  2378 ;; Hardware stack levels used:    1
  2379 ;; Hardware stack levels required when called:    2
  2380 ;; This function calls:
  2381 ;;		Nothing
  2382 ;; This function is called by:
  2383 ;;		_getSensorData
  2384 ;; This function uses a non-reentrant model
  2385 ;;
  2386                           
  2387                           
  2388                           ;psect for function _ser_getch
  2389  0E5A                     _ser_getch:	
  2390  0E5A                     l328:	
  2391                           ;ser.c: 36: while(!RCIF);
  2392                           
  2393                           ;incstack = 0
  2394                           ; Regs used in _ser_getch: [wreg]
  2395                           
  2396  0E5A  1283               	bcf	3,5	;RP0=0, select bank0
  2397  0E5B  1303               	bcf	3,6	;RP1=0, select bank0
  2398  0E5C  1E8C               	btfss	12,5	;volatile
  2399  0E5D  2E5A               	goto	l328
  2400                           
  2401                           ;ser.c: 37: unsigned char rxbyte = RCREG;
  2402  0E5E  081A               	movf	26,w	;volatile
  2403  0E5F  00C5               	movwf	??_ser_getch
  2404  0E60  0845               	movf	??_ser_getch,w
  2405  0E61  00C6               	movwf	ser_getch@rxbyte
  2406                           
  2407                           ;ser.c: 38: return rxbyte;
  2408  0E62  0846               	movf	ser_getch@rxbyte,w
  2409  0E63  0008               	return
  2410  0E64                     __end_of_ser_getch:	
  2411                           
  2412                           	psect	text10
  2413  0F3F                     __ptext10:	
  2414 ;; *************** function _DriveDirect *****************
  2415 ;; Defined at:
  2416 ;;		line 53 in file "ser.c"
  2417 ;; Parameters:    Size  Location     Type
  2418 ;;  RightSpeedH     1    wreg     unsigned char 
  2419 ;;  RightSpeedL     1    1[BANK0 ] unsigned char 
  2420 ;;  LeftSpeedH      1    2[BANK0 ] unsigned char 
  2421 ;;  LeftSpeedL      1    3[BANK0 ] unsigned char 
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;  RightSpeedH     1    4[BANK0 ] unsigned char 
  2424 ;; Return value:  Size  Location     Type
  2425 ;;                  1    wreg      void 
  2426 ;; Registers used:
  2427 ;;		wreg, status,2, status,0, pclath, cstack
  2428 ;; Tracked objects:
  2429 ;;		On entry : 0/0
  2430 ;;		On exit  : 0/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2433 ;;      Params:         0       3       0       0       0
  2434 ;;      Locals:         0       1       0       0       0
  2435 ;;      Temps:          0       0       0       0       0
  2436 ;;      Totals:         0       4       0       0       0
  2437 ;;Total ram usage:        4 bytes
  2438 ;; Hardware stack levels used:    1
  2439 ;; Hardware stack levels required when called:    3
  2440 ;; This function calls:
  2441 ;;		_ser_putch
  2442 ;; This function is called by:
  2443 ;;		_main
  2444 ;; This function uses a non-reentrant model
  2445 ;;
  2446                           
  2447                           
  2448                           ;psect for function _DriveDirect
  2449  0F3F                     _DriveDirect:	
  2450                           
  2451                           ;incstack = 0
  2452                           ; Regs used in _DriveDirect: [wreg+status,2+status,0+pclath+cstack]
  2453                           ;DriveDirect@RightSpeedH stored from wreg
  2454  0F3F  1283               	bcf	3,5	;RP0=0, select bank0
  2455  0F40  1303               	bcf	3,6	;RP1=0, select bank0
  2456  0F41  00C9               	movwf	DriveDirect@RightSpeedH
  2457                           
  2458                           ;ser.c: 54: ser_putch(145);
  2459  0F42  3091               	movlw	145
  2460  0F43  120A  158A  2664  120A  158A  	fcall	_ser_putch
  2461                           
  2462                           ;ser.c: 55: ser_putch(RightSpeedH);
  2463  0F48  1283               	bcf	3,5	;RP0=0, select bank0
  2464  0F49  1303               	bcf	3,6	;RP1=0, select bank0
  2465  0F4A  0849               	movf	DriveDirect@RightSpeedH,w
  2466  0F4B  120A  158A  2664  120A  158A  	fcall	_ser_putch
  2467                           
  2468                           ;ser.c: 56: ser_putch(RightSpeedL);
  2469  0F50  1283               	bcf	3,5	;RP0=0, select bank0
  2470  0F51  1303               	bcf	3,6	;RP1=0, select bank0
  2471  0F52  0846               	movf	DriveDirect@RightSpeedL,w
  2472  0F53  120A  158A  2664  120A  158A  	fcall	_ser_putch
  2473                           
  2474                           ;ser.c: 57: ser_putch(LeftSpeedH);
  2475  0F58  1283               	bcf	3,5	;RP0=0, select bank0
  2476  0F59  1303               	bcf	3,6	;RP1=0, select bank0
  2477  0F5A  0847               	movf	DriveDirect@LeftSpeedH,w
  2478  0F5B  120A  158A  2664  120A  158A  	fcall	_ser_putch
  2479                           
  2480                           ;ser.c: 58: ser_putch(LeftSpeedL);
  2481  0F60  1283               	bcf	3,5	;RP0=0, select bank0
  2482  0F61  1303               	bcf	3,6	;RP1=0, select bank0
  2483  0F62  0848               	movf	DriveDirect@LeftSpeedL,w
  2484  0F63  120A  158A  2664   	fcall	_ser_putch
  2485  0F66  0008               	return
  2486  0F67                     __end_of_DriveDirect:	
  2487                           
  2488                           	psect	text11
  2489  0F17                     __ptext11:	
  2490 ;; *************** function _Drive *****************
  2491 ;; Defined at:
  2492 ;;		line 45 in file "ser.c"
  2493 ;; Parameters:    Size  Location     Type
  2494 ;;  speedH          1    wreg     unsigned char 
  2495 ;;  speedL          1    1[BANK0 ] unsigned char 
  2496 ;;  radH            1    2[BANK0 ] unsigned char 
  2497 ;;  radL            1    3[BANK0 ] unsigned char 
  2498 ;; Auto vars:     Size  Location     Type
  2499 ;;  speedH          1    4[BANK0 ] unsigned char 
  2500 ;; Return value:  Size  Location     Type
  2501 ;;                  1    wreg      void 
  2502 ;; Registers used:
  2503 ;;		wreg, status,2, status,0, pclath, cstack
  2504 ;; Tracked objects:
  2505 ;;		On entry : 0/0
  2506 ;;		On exit  : 0/0
  2507 ;;		Unchanged: 0/0
  2508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2509 ;;      Params:         0       3       0       0       0
  2510 ;;      Locals:         0       1       0       0       0
  2511 ;;      Temps:          0       0       0       0       0
  2512 ;;      Totals:         0       4       0       0       0
  2513 ;;Total ram usage:        4 bytes
  2514 ;; Hardware stack levels used:    1
  2515 ;; Hardware stack levels required when called:    3
  2516 ;; This function calls:
  2517 ;;		_ser_putch
  2518 ;; This function is called by:
  2519 ;;		_main
  2520 ;; This function uses a non-reentrant model
  2521 ;;
  2522                           
  2523                           
  2524                           ;psect for function _Drive
  2525  0F17                     _Drive:	
  2526                           
  2527                           ;incstack = 0
  2528                           ; Regs used in _Drive: [wreg+status,2+status,0+pclath+cstack]
  2529                           ;Drive@speedH stored from wreg
  2530  0F17  1283               	bcf	3,5	;RP0=0, select bank0
  2531  0F18  1303               	bcf	3,6	;RP1=0, select bank0
  2532  0F19  00C9               	movwf	Drive@speedH
  2533                           
  2534                           ;ser.c: 46: ser_putch(137);
  2535  0F1A  3089               	movlw	137
  2536  0F1B  120A  158A  2664  120A  158A  	fcall	_ser_putch
  2537                           
  2538                           ;ser.c: 47: ser_putch(speedH);
  2539  0F20  1283               	bcf	3,5	;RP0=0, select bank0
  2540  0F21  1303               	bcf	3,6	;RP1=0, select bank0
  2541  0F22  0849               	movf	Drive@speedH,w
  2542  0F23  120A  158A  2664  120A  158A  	fcall	_ser_putch
  2543                           
  2544                           ;ser.c: 48: ser_putch(speedL);
  2545  0F28  1283               	bcf	3,5	;RP0=0, select bank0
  2546  0F29  1303               	bcf	3,6	;RP1=0, select bank0
  2547  0F2A  0846               	movf	Drive@speedL,w
  2548  0F2B  120A  158A  2664  120A  158A  	fcall	_ser_putch
  2549                           
  2550                           ;ser.c: 49: ser_putch(radH);
  2551  0F30  1283               	bcf	3,5	;RP0=0, select bank0
  2552  0F31  1303               	bcf	3,6	;RP1=0, select bank0
  2553  0F32  0847               	movf	Drive@radH,w
  2554  0F33  120A  158A  2664  120A  158A  	fcall	_ser_putch
  2555                           
  2556                           ;ser.c: 50: ser_putch(radL);
  2557  0F38  1283               	bcf	3,5	;RP0=0, select bank0
  2558  0F39  1303               	bcf	3,6	;RP1=0, select bank0
  2559  0F3A  0848               	movf	Drive@radL,w
  2560  0F3B  120A  158A  2664   	fcall	_ser_putch
  2561  0F3E  0008               	return
  2562  0F3F                     __end_of_Drive:	
  2563                           
  2564                           	psect	text12
  2565  0E64                     __ptext12:	
  2566 ;; *************** function _ser_putch *****************
  2567 ;; Defined at:
  2568 ;;		line 30 in file "ser.c"
  2569 ;; Parameters:    Size  Location     Type
  2570 ;;  c               1    wreg     unsigned char 
  2571 ;; Auto vars:     Size  Location     Type
  2572 ;;  c               1    0[BANK0 ] unsigned char 
  2573 ;; Return value:  Size  Location     Type
  2574 ;;                  1    wreg      void 
  2575 ;; Registers used:
  2576 ;;		wreg
  2577 ;; Tracked objects:
  2578 ;;		On entry : 0/0
  2579 ;;		On exit  : 0/0
  2580 ;;		Unchanged: 0/0
  2581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2582 ;;      Params:         0       0       0       0       0
  2583 ;;      Locals:         0       1       0       0       0
  2584 ;;      Temps:          0       0       0       0       0
  2585 ;;      Totals:         0       1       0       0       0
  2586 ;;Total ram usage:        1 bytes
  2587 ;; Hardware stack levels used:    1
  2588 ;; Hardware stack levels required when called:    2
  2589 ;; This function calls:
  2590 ;;		Nothing
  2591 ;; This function is called by:
  2592 ;;		_main
  2593 ;;		_Drive
  2594 ;;		_DriveDirect
  2595 ;;		_getSensorData
  2596 ;; This function uses a non-reentrant model
  2597 ;;
  2598                           
  2599                           
  2600                           ;psect for function _ser_putch
  2601  0E64                     _ser_putch:	
  2602                           
  2603                           ;incstack = 0
  2604                           ; Regs used in _ser_putch: [wreg]
  2605                           ;ser_putch@c stored from wreg
  2606  0E64  1283               	bcf	3,5	;RP0=0, select bank0
  2607  0E65  1303               	bcf	3,6	;RP1=0, select bank0
  2608  0E66  00C5               	movwf	ser_putch@c
  2609  0E67                     l322:	
  2610                           ;ser.c: 31: while(!TRMT);
  2611                           
  2612  0E67  1683               	bsf	3,5	;RP0=1, select bank1
  2613  0E68  1303               	bcf	3,6	;RP1=0, select bank1
  2614  0E69  1C98               	btfss	24,1	;volatile
  2615  0E6A  2E67               	goto	l322
  2616                           
  2617                           ;ser.c: 32: TXREG=c;
  2618  0E6B  1283               	bcf	3,5	;RP0=0, select bank0
  2619  0E6C  1303               	bcf	3,6	;RP1=0, select bank0
  2620  0E6D  0845               	movf	ser_putch@c,w
  2621  0E6E  0099               	movwf	25	;volatile
  2622  0E6F  0008               	return
  2623  0E70                     __end_of_ser_putch:	
  2624                           
  2625                           	psect	text13
  2626  0ED4                     __ptext13:	
  2627 ;; *************** function _ADCMain *****************
  2628 ;; Defined at:
  2629 ;;		line 19 in file "ADC.c"
  2630 ;; Parameters:    Size  Location     Type
  2631 ;;		None
  2632 ;; Auto vars:     Size  Location     Type
  2633 ;;		None
  2634 ;; Return value:  Size  Location     Type
  2635 ;;                  1    wreg      void 
  2636 ;; Registers used:
  2637 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2643 ;;      Params:         0       0       0       0       0
  2644 ;;      Locals:         0       0       0       0       0
  2645 ;;      Temps:          0       0       0       0       0
  2646 ;;      Totals:         0       0       0       0       0
  2647 ;;Total ram usage:        0 bytes
  2648 ;; Hardware stack levels used:    1
  2649 ;; Hardware stack levels required when called:    4
  2650 ;; This function calls:
  2651 ;;		_adcConvertMM
  2652 ;;		_getADC
  2653 ;;		_lcdSetCursor
  2654 ;;		_lcdWriteToDigitBCD
  2655 ;; This function is called by:
  2656 ;;		_main
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           
  2661                           ;psect for function _ADCMain
  2662  0ED4                     _ADCMain:	
  2663                           
  2664                           ;ADC.c: 21: getADC();
  2665                           
  2666                           ;incstack = 0
  2667                           ; Regs used in _ADCMain: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2668  0ED4  120A  118A  276E  120A  158A  	fcall	_getADC
  2669                           
  2670                           ;ADC.c: 22: lcdSetCursor(0b10000000);
  2671  0ED9  3080               	movlw	128
  2672  0EDA  120A  158A  2651  120A  158A  	fcall	_lcdSetCursor
  2673                           
  2674                           ;ADC.c: 23: lcdWriteToDigitBCD(adcRAW);
  2675  0EDF  1283               	bcf	3,5	;RP0=0, select bank0
  2676  0EE0  1303               	bcf	3,6	;RP1=0, select bank0
  2677  0EE1  0823               	movf	_adcRAW+1,w	;volatile
  2678  0EE2  00C9               	movwf	lcdWriteToDigitBCD@data+1
  2679  0EE3  0822               	movf	_adcRAW,w	;volatile
  2680  0EE4  00C8               	movwf	lcdWriteToDigitBCD@data
  2681  0EE5  120A  118A  256F  120A  158A  	fcall	_lcdWriteToDigitBCD
  2682                           
  2683                           ;ADC.c: 25: adcConvertMM(adcRAW);
  2684  0EEA  1283               	bcf	3,5	;RP0=0, select bank0
  2685  0EEB  1303               	bcf	3,6	;RP1=0, select bank0
  2686  0EEC  0823               	movf	_adcRAW+1,w	;volatile
  2687  0EED  00DB               	movwf	adcConvertMM@adcRAW+1
  2688  0EEE  0822               	movf	_adcRAW,w	;volatile
  2689  0EEF  00DA               	movwf	adcConvertMM@adcRAW
  2690  0EF0  120A  118A  202F   	fcall	_adcConvertMM
  2691  0EF3  0008               	return
  2692  0EF4                     __end_of_ADCMain:	
  2693                           
  2694                           	psect	text14
  2695  056F                     __ptext14:	
  2696 ;; *************** function _lcdWriteToDigitBCD *****************
  2697 ;; Defined at:
  2698 ;;		line 42 in file "LCD.c"
  2699 ;; Parameters:    Size  Location     Type
  2700 ;;  data            2    3[BANK0 ] unsigned int 
  2701 ;; Auto vars:     Size  Location     Type
  2702 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  2703 ;;  TenThouDigit    2   11[BANK0 ] unsigned int 
  2704 ;;  ThouDigit       2    9[BANK0 ] unsigned int 
  2705 ;;  HunsDigit       2    7[BANK0 ] unsigned int 
  2706 ;;  TensDigit       2    5[BANK0 ] unsigned int 
  2707 ;; Return value:  Size  Location     Type
  2708 ;;                  1    wreg      void 
  2709 ;; Registers used:
  2710 ;;		wreg, status,2, status,0, pclath, cstack
  2711 ;; Tracked objects:
  2712 ;;		On entry : 0/0
  2713 ;;		On exit  : 0/0
  2714 ;;		Unchanged: 0/0
  2715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2716 ;;      Params:         0       2       0       0       0
  2717 ;;      Locals:         0      10       0       0       0
  2718 ;;      Temps:          0       0       0       0       0
  2719 ;;      Totals:         0      12       0       0       0
  2720 ;;Total ram usage:       12 bytes
  2721 ;; Hardware stack levels used:    1
  2722 ;; Hardware stack levels required when called:    3
  2723 ;; This function calls:
  2724 ;;		_lcdWriteData
  2725 ;; This function is called by:
  2726 ;;		_main
  2727 ;;		_ADCMain
  2728 ;; This function uses a non-reentrant model
  2729 ;;
  2730                           
  2731                           
  2732                           ;psect for function _lcdWriteToDigitBCD
  2733  056F                     _lcdWriteToDigitBCD:	
  2734                           
  2735                           ;LCD.c: 43: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  2736                           ;LCD.c: 46: OnesDigit = data;
  2737                           
  2738                           ;incstack = 0
  2739                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  2740  056F  1283               	bcf	3,5	;RP0=0, select bank0
  2741  0570  1303               	bcf	3,6	;RP1=0, select bank0
  2742  0571  0849               	movf	lcdWriteToDigitBCD@data+1,w
  2743  0572  00D3               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2744  0573  0848               	movf	lcdWriteToDigitBCD@data,w
  2745  0574  00D2               	movwf	lcdWriteToDigitBCD@OnesDigit
  2746                           
  2747                           ;LCD.c: 47: TensDigit = 0;
  2748  0575  01CA               	clrf	lcdWriteToDigitBCD@TensDigit
  2749  0576  01CB               	clrf	lcdWriteToDigitBCD@TensDigit+1
  2750                           
  2751                           ;LCD.c: 48: HunsDigit = 0;
  2752  0577  01CC               	clrf	lcdWriteToDigitBCD@HunsDigit
  2753  0578  01CD               	clrf	lcdWriteToDigitBCD@HunsDigit+1
  2754                           
  2755                           ;LCD.c: 49: ThouDigit = 0;
  2756  0579  01CE               	clrf	lcdWriteToDigitBCD@ThouDigit
  2757  057A  01CF               	clrf	lcdWriteToDigitBCD@ThouDigit+1
  2758                           
  2759                           ;LCD.c: 50: TenThouDigit = 0;
  2760  057B  01D0               	clrf	lcdWriteToDigitBCD@TenThouDigit
  2761  057C  01D1               	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  2762  057D                     l1641:	
  2763                           ;LCD.c: 53: while (OnesDigit >= 10000){
  2764                           
  2765  057D  3027               	movlw	39
  2766  057E  0253               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2767  057F  3010               	movlw	16
  2768  0580  1903               	skipnz
  2769  0581  0252               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2770  0582  1C03               	btfss	3,0
  2771  0583  2DA1               	goto	l1647
  2772                           
  2773                           ;LCD.c: 54: OnesDigit = OnesDigit - 10000;
  2774  0584  0852               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2775  0585  3EF0               	addlw	240
  2776  0586  00D2               	movwf	lcdWriteToDigitBCD@OnesDigit
  2777  0587  0853               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2778  0588  1803               	skipnc
  2779  0589  3E01               	addlw	1
  2780  058A  3ED8               	addlw	216
  2781  058B  00D3               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2782                           
  2783                           ;LCD.c: 55: TenThouDigit++;
  2784  058C  3001               	movlw	1
  2785  058D  07D0               	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  2786  058E  1803               	skipnc
  2787  058F  0AD1               	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2788  0590  3000               	movlw	0
  2789  0591  07D1               	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2790  0592  2D7D               	goto	l1641
  2791  0593                     l1643:	
  2792                           ;LCD.c: 56: }
  2793                           ;LCD.c: 58: while (OnesDigit >= 1000){
  2794                           
  2795                           
  2796                           ;LCD.c: 59: OnesDigit = OnesDigit - 1000;
  2797  0593  0852               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2798  0594  3E18               	addlw	24
  2799  0595  00D2               	movwf	lcdWriteToDigitBCD@OnesDigit
  2800  0596  0853               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2801  0597  1803               	skipnc
  2802  0598  3E01               	addlw	1
  2803  0599  3EFC               	addlw	252
  2804  059A  00D3               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2805                           
  2806                           ;LCD.c: 60: ThouDigit++;
  2807  059B  3001               	movlw	1
  2808  059C  07CE               	addwf	lcdWriteToDigitBCD@ThouDigit,f
  2809  059D  1803               	skipnc
  2810  059E  0ACF               	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  2811  059F  3000               	movlw	0
  2812  05A0  07CF               	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  2813  05A1                     l1647:	
  2814  05A1  3003               	movlw	3
  2815  05A2  0253               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2816  05A3  30E8               	movlw	232
  2817  05A4  1903               	skipnz
  2818  05A5  0252               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2819  05A6  1C03               	btfss	3,0
  2820  05A7  2DB7               	goto	l1653
  2821  05A8  2D93               	goto	l1643
  2822  05A9                     l1649:	
  2823                           ;LCD.c: 61: }
  2824                           ;LCD.c: 63: while (OnesDigit >= 100){
  2825                           
  2826                           
  2827                           ;LCD.c: 64: OnesDigit = OnesDigit - 100;
  2828  05A9  0852               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2829  05AA  3E9C               	addlw	156
  2830  05AB  00D2               	movwf	lcdWriteToDigitBCD@OnesDigit
  2831  05AC  0853               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2832  05AD  1803               	skipnc
  2833  05AE  3E01               	addlw	1
  2834  05AF  3EFF               	addlw	255
  2835  05B0  00D3               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2836                           
  2837                           ;LCD.c: 65: HunsDigit++;
  2838  05B1  3001               	movlw	1
  2839  05B2  07CC               	addwf	lcdWriteToDigitBCD@HunsDigit,f
  2840  05B3  1803               	skipnc
  2841  05B4  0ACD               	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  2842  05B5  3000               	movlw	0
  2843  05B6  07CD               	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  2844  05B7                     l1653:	
  2845  05B7  3000               	movlw	0
  2846  05B8  0253               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2847  05B9  3064               	movlw	100
  2848  05BA  1903               	skipnz
  2849  05BB  0252               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2850  05BC  1C03               	btfss	3,0
  2851  05BD  2DCD               	goto	l1659
  2852  05BE  2DA9               	goto	l1649
  2853  05BF                     l1655:	
  2854                           ;LCD.c: 66: }
  2855                           ;LCD.c: 68: while (OnesDigit >= 10){
  2856                           
  2857                           
  2858                           ;LCD.c: 69: OnesDigit = OnesDigit - 10;
  2859  05BF  0852               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2860  05C0  3EF6               	addlw	246
  2861  05C1  00D2               	movwf	lcdWriteToDigitBCD@OnesDigit
  2862  05C2  0853               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2863  05C3  1803               	skipnc
  2864  05C4  3E01               	addlw	1
  2865  05C5  3EFF               	addlw	255
  2866  05C6  00D3               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2867                           
  2868                           ;LCD.c: 70: TensDigit++;
  2869  05C7  3001               	movlw	1
  2870  05C8  07CA               	addwf	lcdWriteToDigitBCD@TensDigit,f
  2871  05C9  1803               	skipnc
  2872  05CA  0ACB               	incf	lcdWriteToDigitBCD@TensDigit+1,f
  2873  05CB  3000               	movlw	0
  2874  05CC  07CB               	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  2875  05CD                     l1659:	
  2876  05CD  3000               	movlw	0
  2877  05CE  0253               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2878  05CF  300A               	movlw	10
  2879  05D0  1903               	skipnz
  2880  05D1  0252               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2881  05D2  1803               	skipnc
  2882  05D3  2DBF               	goto	l1655
  2883                           
  2884                           ;LCD.c: 71: }
  2885                           ;LCD.c: 73: if (TenThouDigit > 0)
  2886  05D4  0850               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  2887  05D5  0451               	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  2888  05D6  1903               	btfsc	3,2
  2889  05D7  2DDF               	goto	l1665
  2890                           
  2891                           ;LCD.c: 74: lcdWriteData((unsigned int)TenThouDigit + 48);
  2892  05D8  0850               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  2893  05D9  3E30               	addlw	48
  2894  05DA  120A  158A  267F  120A  118A  	fcall	_lcdWriteData
  2895  05DF                     l1665:	
  2896                           
  2897                           ;LCD.c: 76: if (ThouDigit > 0)
  2898  05DF  1283               	bcf	3,5	;RP0=0, select bank0
  2899  05E0  1303               	bcf	3,6	;RP1=0, select bank0
  2900  05E1  084E               	movf	lcdWriteToDigitBCD@ThouDigit,w
  2901  05E2  044F               	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  2902  05E3  1903               	btfsc	3,2
  2903  05E4  2DEC               	goto	l213
  2904                           
  2905                           ;LCD.c: 77: lcdWriteData((unsigned int)ThouDigit + 48);
  2906  05E5  084E               	movf	lcdWriteToDigitBCD@ThouDigit,w
  2907  05E6  3E30               	addlw	48
  2908  05E7  120A  158A  267F  120A  118A  	fcall	_lcdWriteData
  2909  05EC                     l213:	
  2910                           
  2911                           ;LCD.c: 79: lcdWriteData((unsigned int)HunsDigit + 48);
  2912  05EC  1283               	bcf	3,5	;RP0=0, select bank0
  2913  05ED  1303               	bcf	3,6	;RP1=0, select bank0
  2914  05EE  084C               	movf	lcdWriteToDigitBCD@HunsDigit,w
  2915  05EF  3E30               	addlw	48
  2916  05F0  120A  158A  267F  120A  118A  	fcall	_lcdWriteData
  2917                           
  2918                           ;LCD.c: 80: lcdWriteData((unsigned int)TensDigit + 48);
  2919  05F5  1283               	bcf	3,5	;RP0=0, select bank0
  2920  05F6  1303               	bcf	3,6	;RP1=0, select bank0
  2921  05F7  084A               	movf	lcdWriteToDigitBCD@TensDigit,w
  2922  05F8  3E30               	addlw	48
  2923  05F9  120A  158A  267F  120A  118A  	fcall	_lcdWriteData
  2924                           
  2925                           ;LCD.c: 81: lcdWriteData((unsigned int)OnesDigit + 48);
  2926  05FE  1283               	bcf	3,5	;RP0=0, select bank0
  2927  05FF  1303               	bcf	3,6	;RP1=0, select bank0
  2928  0600  0852               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2929  0601  3E30               	addlw	48
  2930  0602  120A  158A  267F   	fcall	_lcdWriteData
  2931  0605  0008               	return
  2932  0606                     __end_of_lcdWriteToDigitBCD:	
  2933                           
  2934                           	psect	text15
  2935  0E7F                     __ptext15:	
  2936 ;; *************** function _lcdWriteData *****************
  2937 ;; Defined at:
  2938 ;;		line 20 in file "LCD.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;  databyte        1    wreg     unsigned char 
  2941 ;; Auto vars:     Size  Location     Type
  2942 ;;  databyte        1    2[BANK0 ] unsigned char 
  2943 ;; Return value:  Size  Location     Type
  2944 ;;                  1    wreg      void 
  2945 ;; Registers used:
  2946 ;;		wreg
  2947 ;; Tracked objects:
  2948 ;;		On entry : 0/0
  2949 ;;		On exit  : 0/0
  2950 ;;		Unchanged: 0/0
  2951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2952 ;;      Params:         0       0       0       0       0
  2953 ;;      Locals:         0       1       0       0       0
  2954 ;;      Temps:          0       2       0       0       0
  2955 ;;      Totals:         0       3       0       0       0
  2956 ;;Total ram usage:        3 bytes
  2957 ;; Hardware stack levels used:    1
  2958 ;; Hardware stack levels required when called:    2
  2959 ;; This function calls:
  2960 ;;		Nothing
  2961 ;; This function is called by:
  2962 ;;		_lcdWriteToDigitBCD
  2963 ;;		_lcdWriteString
  2964 ;; This function uses a non-reentrant model
  2965 ;;
  2966                           
  2967                           
  2968                           ;psect for function _lcdWriteData
  2969  0E7F                     _lcdWriteData:	
  2970                           
  2971                           ;incstack = 0
  2972                           ; Regs used in _lcdWriteData: [wreg]
  2973                           ;lcdWriteData@databyte stored from wreg
  2974  0E7F  1283               	bcf	3,5	;RP0=0, select bank0
  2975  0E80  1303               	bcf	3,6	;RP1=0, select bank0
  2976  0E81  00C7               	movwf	lcdWriteData@databyte
  2977                           
  2978                           ;LCD.c: 21: RE2 = 0;
  2979  0E82  1109               	bcf	9,2	;volatile
  2980                           
  2981                           ;LCD.c: 22: RE1 = 0;
  2982  0E83  1089               	bcf	9,1	;volatile
  2983                           
  2984                           ;LCD.c: 23: RE0 = 1;
  2985  0E84  1409               	bsf	9,0	;volatile
  2986                           
  2987                           ;LCD.c: 24: PORTD = databyte;
  2988  0E85  0847               	movf	lcdWriteData@databyte,w
  2989  0E86  0088               	movwf	8	;volatile
  2990                           
  2991                           ;LCD.c: 25: RE2 = 1;
  2992  0E87  1509               	bsf	9,2	;volatile
  2993                           
  2994                           ;LCD.c: 26: RE2 = 0;
  2995  0E88  1109               	bcf	9,2	;volatile
  2996                           
  2997                           ;LCD.c: 27: _delay((unsigned long)((1)*(20000000/4000.0)));
  2998  0E89  3007               	movlw	7
  2999  0E8A  00C6               	movwf	??_lcdWriteData+1
  3000  0E8B  307D               	movlw	125
  3001  0E8C  00C5               	movwf	??_lcdWriteData
  3002  0E8D                     u1807:	
  3003  0E8D  0BC5               	decfsz	??_lcdWriteData,f
  3004  0E8E  2E8D               	goto	u1807
  3005  0E8F  0BC6               	decfsz	??_lcdWriteData+1,f
  3006  0E90  2E8D               	goto	u1807
  3007  0E91  0008               	return
  3008  0E92                     __end_of_lcdWriteData:	
  3009                           
  3010                           	psect	text16
  3011  0E51                     __ptext16:	
  3012 ;; *************** function _lcdSetCursor *****************
  3013 ;; Defined at:
  3014 ;;		line 31 in file "LCD.c"
  3015 ;; Parameters:    Size  Location     Type
  3016 ;;  address         1    wreg     unsigned char 
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;  address         1    3[BANK0 ] unsigned char 
  3019 ;; Return value:  Size  Location     Type
  3020 ;;                  1    wreg      void 
  3021 ;; Registers used:
  3022 ;;		wreg, status,2, status,0, pclath, cstack
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3028 ;;      Params:         0       0       0       0       0
  3029 ;;      Locals:         0       1       0       0       0
  3030 ;;      Temps:          0       0       0       0       0
  3031 ;;      Totals:         0       1       0       0       0
  3032 ;;Total ram usage:        1 bytes
  3033 ;; Hardware stack levels used:    1
  3034 ;; Hardware stack levels required when called:    3
  3035 ;; This function calls:
  3036 ;;		_lcdWriteControl
  3037 ;; This function is called by:
  3038 ;;		_main
  3039 ;;		_ADCMain
  3040 ;; This function uses a non-reentrant model
  3041 ;;
  3042                           
  3043                           
  3044                           ;psect for function _lcdSetCursor
  3045  0E51                     _lcdSetCursor:	
  3046                           
  3047                           ;incstack = 0
  3048                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  3049                           ;lcdSetCursor@address stored from wreg
  3050  0E51  1283               	bcf	3,5	;RP0=0, select bank0
  3051  0E52  1303               	bcf	3,6	;RP1=0, select bank0
  3052  0E53  00C8               	movwf	lcdSetCursor@address
  3053                           
  3054                           ;LCD.c: 32: address |= 0b10000000;
  3055  0E54  17C8               	bsf	lcdSetCursor@address,7
  3056                           
  3057                           ;LCD.c: 33: lcdWriteControl(address);
  3058  0E55  0848               	movf	lcdSetCursor@address,w
  3059  0E56  120A  158A  2692   	fcall	_lcdWriteControl
  3060  0E59  0008               	return
  3061  0E5A                     __end_of_lcdSetCursor:	
  3062                           
  3063                           	psect	text17
  3064  0E92                     __ptext17:	
  3065 ;; *************** function _lcdWriteControl *****************
  3066 ;; Defined at:
  3067 ;;		line 9 in file "LCD.c"
  3068 ;; Parameters:    Size  Location     Type
  3069 ;;  databyte        1    wreg     unsigned char 
  3070 ;; Auto vars:     Size  Location     Type
  3071 ;;  databyte        1    2[BANK0 ] unsigned char 
  3072 ;; Return value:  Size  Location     Type
  3073 ;;                  1    wreg      void 
  3074 ;; Registers used:
  3075 ;;		wreg
  3076 ;; Tracked objects:
  3077 ;;		On entry : 0/0
  3078 ;;		On exit  : 0/0
  3079 ;;		Unchanged: 0/0
  3080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3081 ;;      Params:         0       0       0       0       0
  3082 ;;      Locals:         0       1       0       0       0
  3083 ;;      Temps:          0       2       0       0       0
  3084 ;;      Totals:         0       3       0       0       0
  3085 ;;Total ram usage:        3 bytes
  3086 ;; Hardware stack levels used:    1
  3087 ;; Hardware stack levels required when called:    2
  3088 ;; This function calls:
  3089 ;;		Nothing
  3090 ;; This function is called by:
  3091 ;;		_lcdSetCursor
  3092 ;;		_setupLCD
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096                           
  3097                           ;psect for function _lcdWriteControl
  3098  0E92                     _lcdWriteControl:	
  3099                           
  3100                           ;incstack = 0
  3101                           ; Regs used in _lcdWriteControl: [wreg]
  3102                           ;lcdWriteControl@databyte stored from wreg
  3103  0E92  1283               	bcf	3,5	;RP0=0, select bank0
  3104  0E93  1303               	bcf	3,6	;RP1=0, select bank0
  3105  0E94  00C7               	movwf	lcdWriteControl@databyte
  3106                           
  3107                           ;LCD.c: 10: RE2 = 0;
  3108  0E95  1109               	bcf	9,2	;volatile
  3109                           
  3110                           ;LCD.c: 11: RE1 = 0;
  3111  0E96  1089               	bcf	9,1	;volatile
  3112                           
  3113                           ;LCD.c: 12: RE0 = 0;
  3114  0E97  1009               	bcf	9,0	;volatile
  3115                           
  3116                           ;LCD.c: 13: PORTD = databyte;
  3117  0E98  0847               	movf	lcdWriteControl@databyte,w
  3118  0E99  0088               	movwf	8	;volatile
  3119                           
  3120                           ;LCD.c: 14: RE2 = 1;
  3121  0E9A  1509               	bsf	9,2	;volatile
  3122                           
  3123                           ;LCD.c: 15: RE2 = 0;
  3124  0E9B  1109               	bcf	9,2	;volatile
  3125                           
  3126                           ;LCD.c: 16: _delay((unsigned long)((2)*(20000000/4000.0)));
  3127  0E9C  300D               	movlw	13
  3128  0E9D  00C6               	movwf	??_lcdWriteControl+1
  3129  0E9E  30FB               	movlw	251
  3130  0E9F  00C5               	movwf	??_lcdWriteControl
  3131  0EA0                     u1817:	
  3132  0EA0  0BC5               	decfsz	??_lcdWriteControl,f
  3133  0EA1  2EA0               	goto	u1817
  3134  0EA2  0BC6               	decfsz	??_lcdWriteControl+1,f
  3135  0EA3  2EA0               	goto	u1817
  3136  0EA4  2EA5               	nop2
  3137  0EA5  0008               	return
  3138  0EA6                     __end_of_lcdWriteControl:	
  3139                           
  3140                           	psect	text18
  3141  076E                     __ptext18:	
  3142 ;; *************** function _getADC *****************
  3143 ;; Defined at:
  3144 ;;		line 29 in file "ADC.c"
  3145 ;; Parameters:    Size  Location     Type
  3146 ;;		None
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;		None
  3149 ;; Return value:  Size  Location     Type
  3150 ;;                  2  410[None  ] unsigned int 
  3151 ;; Registers used:
  3152 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3153 ;; Tracked objects:
  3154 ;;		On entry : 0/0
  3155 ;;		On exit  : 0/0
  3156 ;;		Unchanged: 0/0
  3157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3158 ;;      Params:         0       0       0       0       0
  3159 ;;      Locals:         0       0       0       0       0
  3160 ;;      Temps:          0       2       0       0       0
  3161 ;;      Totals:         0       2       0       0       0
  3162 ;;Total ram usage:        2 bytes
  3163 ;; Hardware stack levels used:    1
  3164 ;; Hardware stack levels required when called:    2
  3165 ;; This function calls:
  3166 ;;		Nothing
  3167 ;; This function is called by:
  3168 ;;		_ADCMain
  3169 ;; This function uses a non-reentrant model
  3170 ;;
  3171                           
  3172                           
  3173                           ;psect for function _getADC
  3174  076E                     _getADC:	
  3175                           
  3176                           ;ADC.c: 31: ADRESH = 0;
  3177                           
  3178                           ;incstack = 0
  3179                           ; Regs used in _getADC: [wreg-fsr0h+status,2+status,0]
  3180  076E  1283               	bcf	3,5	;RP0=0, select bank0
  3181  076F  1303               	bcf	3,6	;RP1=0, select bank0
  3182  0770  019E               	clrf	30	;volatile
  3183                           
  3184                           ;ADC.c: 32: ADRESL = 0;
  3185  0771  1683               	bsf	3,5	;RP0=1, select bank1
  3186  0772  1303               	bcf	3,6	;RP1=0, select bank1
  3187  0773  019E               	clrf	30	;volatile
  3188                           
  3189                           ;ADC.c: 34: GO = 1;
  3190  0774  1283               	bcf	3,5	;RP0=0, select bank0
  3191  0775  1303               	bcf	3,6	;RP1=0, select bank0
  3192  0776  151F               	bsf	31,2	;volatile
  3193  0777                     l455:	
  3194                           ;ADC.c: 35: while(GO) continue;
  3195                           
  3196  0777  191F               	btfsc	31,2	;volatile
  3197  0778  2F77               	goto	l455
  3198                           
  3199                           ;ADC.c: 39: adcRAW = (4*ADRESH);
  3200  0779  081E               	movf	30,w	;volatile
  3201  077A  00C5               	movwf	??_getADC
  3202  077B  01C6               	clrf	??_getADC+1
  3203  077C  1003               	clrc
  3204  077D  0DC5               	rlf	??_getADC,f
  3205  077E  0DC6               	rlf	??_getADC+1,f
  3206  077F  1003               	clrc
  3207  0780  0DC5               	rlf	??_getADC,f
  3208  0781  0DC6               	rlf	??_getADC+1,f
  3209  0782  0845               	movf	??_getADC,w
  3210  0783  00A2               	movwf	_adcRAW	;volatile
  3211  0784  0846               	movf	??_getADC+1,w
  3212  0785  00A3               	movwf	_adcRAW+1	;volatile
  3213                           
  3214                           ;ADC.c: 41: switch(ADRESL){
  3215  0786  2FA5               	goto	l1691
  3216  0787                     l1685:	
  3217                           ;ADC.c: 42: case 0b01000000: adcRAW = adcRAW + 1;
  3218                           
  3219  0787  1283               	bcf	3,5	;RP0=0, select bank0
  3220  0788  0822               	movf	_adcRAW,w	;volatile
  3221  0789  3E01               	addlw	1
  3222  078A  00A2               	movwf	_adcRAW	;volatile
  3223  078B  0823               	movf	_adcRAW+1,w	;volatile
  3224  078C  1803               	skipnc
  3225  078D  3E01               	addlw	1
  3226  078E  3E00               	addlw	0
  3227  078F  00A3               	movwf	_adcRAW+1	;volatile
  3228                           
  3229                           ;ADC.c: 43: break;
  3230  0790  0008               	return
  3231  0791                     l1687:	
  3232                           ;ADC.c: 44: case 0b10000000: adcRAW = adcRAW + 2;
  3233                           
  3234  0791  1283               	bcf	3,5	;RP0=0, select bank0
  3235  0792  0822               	movf	_adcRAW,w	;volatile
  3236  0793  3E02               	addlw	2
  3237  0794  00A2               	movwf	_adcRAW	;volatile
  3238  0795  0823               	movf	_adcRAW+1,w	;volatile
  3239  0796  1803               	skipnc
  3240  0797  3E01               	addlw	1
  3241  0798  3E00               	addlw	0
  3242  0799  00A3               	movwf	_adcRAW+1	;volatile
  3243                           
  3244                           ;ADC.c: 45: break;
  3245  079A  0008               	return
  3246  079B                     l1689:	
  3247                           ;ADC.c: 46: case 0b11000000: adcRAW = adcRAW + 3;
  3248                           
  3249  079B  1283               	bcf	3,5	;RP0=0, select bank0
  3250  079C  0822               	movf	_adcRAW,w	;volatile
  3251  079D  3E03               	addlw	3
  3252  079E  00A2               	movwf	_adcRAW	;volatile
  3253  079F  0823               	movf	_adcRAW+1,w	;volatile
  3254  07A0  1803               	skipnc
  3255  07A1  3E01               	addlw	1
  3256  07A2  3E00               	addlw	0
  3257  07A3  00A3               	movwf	_adcRAW+1	;volatile
  3258                           
  3259                           ;ADC.c: 49: }
  3260                           
  3261                           ;ADC.c: 48: default: adcRAW = adcRAW;
  3262                           
  3263                           ;ADC.c: 47: break;
  3264  07A4  0008               	return
  3265  07A5                     l1691:	
  3266  07A5  1683               	bsf	3,5	;RP0=1, select bank1
  3267  07A6  1303               	bcf	3,6	;RP1=0, select bank1
  3268  07A7  081E               	movf	30,w	;volatile
  3269                           
  3270                           ; Switch size 1, requested type "space"
  3271                           ; Number of cases is 3, Range of values is 64 to 192
  3272                           ; switch strategies available:
  3273                           ; Name         Instructions Cycles
  3274                           ; simple_byte           10     6 (average)
  3275                           ; jumptable            263     9 (fixed)
  3276                           ;	Chosen strategy is simple_byte
  3277  07A8  3A40               	xorlw	64	; case 64
  3278  07A9  1903               	skipnz
  3279  07AA  2F87               	goto	l1685
  3280  07AB  3AC0               	xorlw	192	; case 128
  3281  07AC  1903               	skipnz
  3282  07AD  2F91               	goto	l1687
  3283  07AE  3A40               	xorlw	64	; case 192
  3284  07AF  1903               	skipnz
  3285  07B0  2F9B               	goto	l1689
  3286  07B1  2FB2               	goto	l464
  3287  07B2                     l464:	
  3288                           ;ADC.c: 51: return(adcRAW);
  3289                           ;	Return value of _getADC is never used
  3290                           
  3291  07B2  0008               	return
  3292  07B3                     __end_of_getADC:	
  3293                           
  3294                           	psect	text19
  3295  002F                     __ptext19:	
  3296 ;; *************** function _adcConvertMM *****************
  3297 ;; Defined at:
  3298 ;;		line 59 in file "ADC.c"
  3299 ;; Parameters:    Size  Location     Type
  3300 ;;  adcRAW          2   21[BANK0 ] unsigned int 
  3301 ;; Auto vars:     Size  Location     Type
  3302 ;;		None
  3303 ;; Return value:  Size  Location     Type
  3304 ;;                  2   21[BANK0 ] unsigned int 
  3305 ;; Registers used:
  3306 ;;		wreg, status,2, status,0, pclath, cstack
  3307 ;; Tracked objects:
  3308 ;;		On entry : 0/0
  3309 ;;		On exit  : 0/0
  3310 ;;		Unchanged: 0/0
  3311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3312 ;;      Params:         0       2       0       0       0
  3313 ;;      Locals:         0       0       0       0       0
  3314 ;;      Temps:          0       8       0       0       0
  3315 ;;      Totals:         0      10       0       0       0
  3316 ;;Total ram usage:       10 bytes
  3317 ;; Hardware stack levels used:    1
  3318 ;; Hardware stack levels required when called:    3
  3319 ;; This function calls:
  3320 ;;		___aldiv
  3321 ;;		___lwdiv
  3322 ;;		___wmul
  3323 ;; This function is called by:
  3324 ;;		_ADCMain
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           
  3329                           ;psect for function _adcConvertMM
  3330  002F                     _adcConvertMM:	
  3331                           
  3332                           ;ADC.c: 61: if (adcRAW < 517 && adcRAW >= 513)
  3333                           
  3334                           ;incstack = 0
  3335                           ; Regs used in _adcConvertMM: [wreg+status,2+status,0+pclath+cstack]
  3336  002F  3002               	movlw	2
  3337  0030  1283               	bcf	3,5	;RP0=0, select bank0
  3338  0031  1303               	bcf	3,6	;RP1=0, select bank0
  3339  0032  025B               	subwf	adcConvertMM@adcRAW+1,w
  3340  0033  3005               	movlw	5
  3341  0034  1903               	skipnz
  3342  0035  025A               	subwf	adcConvertMM@adcRAW,w
  3343  0036  1803               	skipnc
  3344  0037  2898               	goto	l1699
  3345  0038  3002               	movlw	2
  3346  0039  025B               	subwf	adcConvertMM@adcRAW+1,w
  3347  003A  3001               	movlw	1
  3348  003B  1903               	skipnz
  3349  003C  025A               	subwf	adcConvertMM@adcRAW,w
  3350  003D  1C03               	skipc
  3351  003E  2898               	goto	l1699
  3352                           
  3353                           ;ADC.c: 62: Distance = (((51700 - adcRAW*100)/4) + 100);
  3354  003F  3000               	movlw	0
  3355  0040  00CE               	movwf	___aldiv@divisor+3
  3356  0041  3000               	movlw	0
  3357  0042  00CD               	movwf	___aldiv@divisor+2
  3358  0043  3000               	movlw	0
  3359  0044  00CC               	movwf	___aldiv@divisor+1
  3360  0045  3004               	movlw	4
  3361  0046  00CB               	movwf	___aldiv@divisor
  3362  0047  30F4               	movlw	244
  3363  0048  00DC               	movwf	??_adcConvertMM
  3364  0049  30C9               	movlw	201
  3365  004A  00DD               	movwf	??_adcConvertMM+1
  3366  004B  3000               	movlw	0
  3367  004C  00DE               	movwf	??_adcConvertMM+2
  3368  004D  3000               	movlw	0
  3369  004E  00DF               	movwf	??_adcConvertMM+3
  3370  004F  085B               	movf	adcConvertMM@adcRAW+1,w
  3371  0050  00C6               	movwf	___wmul@multiplier+1
  3372  0051  085A               	movf	adcConvertMM@adcRAW,w
  3373  0052  00C5               	movwf	___wmul@multiplier
  3374  0053  3064               	movlw	100
  3375  0054  00C7               	movwf	___wmul@multiplicand
  3376  0055  3000               	movlw	0
  3377  0056  00C8               	movwf	___wmul@multiplicand+1
  3378  0057  120A  158A  26F4  120A  118A  	fcall	___wmul
  3379  005C  1283               	bcf	3,5	;RP0=0, select bank0
  3380  005D  1303               	bcf	3,6	;RP1=0, select bank0
  3381  005E  0845               	movf	?___wmul,w
  3382  005F  00E0               	movwf	??_adcConvertMM+4
  3383  0060  0846               	movf	?___wmul+1,w
  3384  0061  00E1               	movwf	??_adcConvertMM+5
  3385  0062  01E2               	clrf	??_adcConvertMM+6
  3386  0063  01E3               	clrf	??_adcConvertMM+7
  3387  0064  09E0               	comf	??_adcConvertMM+4,f
  3388  0065  09E1               	comf	??_adcConvertMM+5,f
  3389  0066  09E2               	comf	??_adcConvertMM+6,f
  3390  0067  09E3               	comf	??_adcConvertMM+7,f
  3391  0068  0AE0               	incf	??_adcConvertMM+4,f
  3392  0069  1903               	skipnz
  3393  006A  0AE1               	incf	??_adcConvertMM+5,f
  3394  006B  1903               	skipnz
  3395  006C  0AE2               	incf	??_adcConvertMM+6,f
  3396  006D  1903               	skipnz
  3397  006E  0AE3               	incf	??_adcConvertMM+7,f
  3398  006F  0860               	movf	??_adcConvertMM+4,w
  3399  0070  07DC               	addwf	??_adcConvertMM,f
  3400  0071  0861               	movf	??_adcConvertMM+5,w
  3401  0072  1803               	skipnc
  3402  0073  0F61               	incfsz	??_adcConvertMM+5,w
  3403  0074  2876               	goto	u1190
  3404  0075  2877               	goto	u1191
  3405  0076                     u1190:	
  3406  0076  07DD               	addwf	??_adcConvertMM+1,f
  3407  0077                     u1191:	
  3408  0077  0862               	movf	??_adcConvertMM+6,w
  3409  0078  1803               	skipnc
  3410  0079  0F62               	incfsz	??_adcConvertMM+6,w
  3411  007A  287C               	goto	u1192
  3412  007B  287D               	goto	u1193
  3413  007C                     u1192:	
  3414  007C  07DE               	addwf	??_adcConvertMM+2,f
  3415  007D                     u1193:	
  3416  007D  0863               	movf	??_adcConvertMM+7,w
  3417  007E  1803               	skipnc
  3418  007F  0A63               	incf	??_adcConvertMM+7,w
  3419  0080  07DF               	addwf	??_adcConvertMM+3,f
  3420  0081  085F               	movf	??_adcConvertMM+3,w
  3421  0082  00D2               	movwf	___aldiv@dividend+3
  3422  0083  085E               	movf	??_adcConvertMM+2,w
  3423  0084  00D1               	movwf	___aldiv@dividend+2
  3424  0085  085D               	movf	??_adcConvertMM+1,w
  3425  0086  00D0               	movwf	___aldiv@dividend+1
  3426  0087  085C               	movf	??_adcConvertMM,w
  3427  0088  00CF               	movwf	___aldiv@dividend
  3428  0089  120A  118A  2606  120A  118A  	fcall	___aldiv
  3429  008E  1283               	bcf	3,5	;RP0=0, select bank0
  3430  008F  1303               	bcf	3,6	;RP1=0, select bank0
  3431  0090  084B               	movf	?___aldiv,w
  3432  0091  3E64               	addlw	100
  3433  0092  00A0               	movwf	_Distance	;volatile
  3434  0093  084C               	movf	?___aldiv+1,w
  3435  0094  1803               	skipnc
  3436  0095  3E01               	addlw	1
  3437  0096  3E00               	addlw	0
  3438  0097  00A1               	movwf	_Distance+1	;volatile
  3439  0098                     l1699:	
  3440                           
  3441                           ;ADC.c: 64: if (adcRAW < 513 && adcRAW >= 393)
  3442  0098  3002               	movlw	2
  3443  0099  025B               	subwf	adcConvertMM@adcRAW+1,w
  3444  009A  3001               	movlw	1
  3445  009B  1903               	skipnz
  3446  009C  025A               	subwf	adcConvertMM@adcRAW,w
  3447  009D  1803               	skipnc
  3448  009E  28FF               	goto	l1705
  3449  009F  3001               	movlw	1
  3450  00A0  025B               	subwf	adcConvertMM@adcRAW+1,w
  3451  00A1  3089               	movlw	137
  3452  00A2  1903               	skipnz
  3453  00A3  025A               	subwf	adcConvertMM@adcRAW,w
  3454  00A4  1C03               	skipc
  3455  00A5  28FF               	goto	l1705
  3456                           
  3457                           ;ADC.c: 65: Distance = (((51300 - adcRAW*100)/120) + 200);
  3458  00A6  3000               	movlw	0
  3459  00A7  00CE               	movwf	___aldiv@divisor+3
  3460  00A8  3000               	movlw	0
  3461  00A9  00CD               	movwf	___aldiv@divisor+2
  3462  00AA  3000               	movlw	0
  3463  00AB  00CC               	movwf	___aldiv@divisor+1
  3464  00AC  3078               	movlw	120
  3465  00AD  00CB               	movwf	___aldiv@divisor
  3466  00AE  3064               	movlw	100
  3467  00AF  00DC               	movwf	??_adcConvertMM
  3468  00B0  30C8               	movlw	200
  3469  00B1  00DD               	movwf	??_adcConvertMM+1
  3470  00B2  3000               	movlw	0
  3471  00B3  00DE               	movwf	??_adcConvertMM+2
  3472  00B4  3000               	movlw	0
  3473  00B5  00DF               	movwf	??_adcConvertMM+3
  3474  00B6  085B               	movf	adcConvertMM@adcRAW+1,w
  3475  00B7  00C6               	movwf	___wmul@multiplier+1
  3476  00B8  085A               	movf	adcConvertMM@adcRAW,w
  3477  00B9  00C5               	movwf	___wmul@multiplier
  3478  00BA  3064               	movlw	100
  3479  00BB  00C7               	movwf	___wmul@multiplicand
  3480  00BC  3000               	movlw	0
  3481  00BD  00C8               	movwf	___wmul@multiplicand+1
  3482  00BE  120A  158A  26F4  120A  118A  	fcall	___wmul
  3483  00C3  1283               	bcf	3,5	;RP0=0, select bank0
  3484  00C4  1303               	bcf	3,6	;RP1=0, select bank0
  3485  00C5  0845               	movf	?___wmul,w
  3486  00C6  00E0               	movwf	??_adcConvertMM+4
  3487  00C7  0846               	movf	?___wmul+1,w
  3488  00C8  00E1               	movwf	??_adcConvertMM+5
  3489  00C9  01E2               	clrf	??_adcConvertMM+6
  3490  00CA  01E3               	clrf	??_adcConvertMM+7
  3491  00CB  09E0               	comf	??_adcConvertMM+4,f
  3492  00CC  09E1               	comf	??_adcConvertMM+5,f
  3493  00CD  09E2               	comf	??_adcConvertMM+6,f
  3494  00CE  09E3               	comf	??_adcConvertMM+7,f
  3495  00CF  0AE0               	incf	??_adcConvertMM+4,f
  3496  00D0  1903               	skipnz
  3497  00D1  0AE1               	incf	??_adcConvertMM+5,f
  3498  00D2  1903               	skipnz
  3499  00D3  0AE2               	incf	??_adcConvertMM+6,f
  3500  00D4  1903               	skipnz
  3501  00D5  0AE3               	incf	??_adcConvertMM+7,f
  3502  00D6  0860               	movf	??_adcConvertMM+4,w
  3503  00D7  07DC               	addwf	??_adcConvertMM,f
  3504  00D8  0861               	movf	??_adcConvertMM+5,w
  3505  00D9  1803               	skipnc
  3506  00DA  0F61               	incfsz	??_adcConvertMM+5,w
  3507  00DB  28DD               	goto	u1220
  3508  00DC  28DE               	goto	u1221
  3509  00DD                     u1220:	
  3510  00DD  07DD               	addwf	??_adcConvertMM+1,f
  3511  00DE                     u1221:	
  3512  00DE  0862               	movf	??_adcConvertMM+6,w
  3513  00DF  1803               	skipnc
  3514  00E0  0F62               	incfsz	??_adcConvertMM+6,w
  3515  00E1  28E3               	goto	u1222
  3516  00E2  28E4               	goto	u1223
  3517  00E3                     u1222:	
  3518  00E3  07DE               	addwf	??_adcConvertMM+2,f
  3519  00E4                     u1223:	
  3520  00E4  0863               	movf	??_adcConvertMM+7,w
  3521  00E5  1803               	skipnc
  3522  00E6  0A63               	incf	??_adcConvertMM+7,w
  3523  00E7  07DF               	addwf	??_adcConvertMM+3,f
  3524  00E8  085F               	movf	??_adcConvertMM+3,w
  3525  00E9  00D2               	movwf	___aldiv@dividend+3
  3526  00EA  085E               	movf	??_adcConvertMM+2,w
  3527  00EB  00D1               	movwf	___aldiv@dividend+2
  3528  00EC  085D               	movf	??_adcConvertMM+1,w
  3529  00ED  00D0               	movwf	___aldiv@dividend+1
  3530  00EE  085C               	movf	??_adcConvertMM,w
  3531  00EF  00CF               	movwf	___aldiv@dividend
  3532  00F0  120A  118A  2606  120A  118A  	fcall	___aldiv
  3533  00F5  1283               	bcf	3,5	;RP0=0, select bank0
  3534  00F6  1303               	bcf	3,6	;RP1=0, select bank0
  3535  00F7  084B               	movf	?___aldiv,w
  3536  00F8  3EC8               	addlw	200
  3537  00F9  00A0               	movwf	_Distance	;volatile
  3538  00FA  084C               	movf	?___aldiv+1,w
  3539  00FB  1803               	skipnc
  3540  00FC  3E01               	addlw	1
  3541  00FD  3E00               	addlw	0
  3542  00FE  00A1               	movwf	_Distance+1	;volatile
  3543  00FF                     l1705:	
  3544                           
  3545                           ;ADC.c: 67: if (adcRAW < 393 && adcRAW >= 298)
  3546  00FF  3001               	movlw	1
  3547  0100  025B               	subwf	adcConvertMM@adcRAW+1,w
  3548  0101  3089               	movlw	137
  3549  0102  1903               	skipnz
  3550  0103  025A               	subwf	adcConvertMM@adcRAW,w
  3551  0104  1803               	skipnc
  3552  0105  2966               	goto	l1711
  3553  0106  3001               	movlw	1
  3554  0107  025B               	subwf	adcConvertMM@adcRAW+1,w
  3555  0108  302A               	movlw	42
  3556  0109  1903               	skipnz
  3557  010A  025A               	subwf	adcConvertMM@adcRAW,w
  3558  010B  1C03               	skipc
  3559  010C  2966               	goto	l1711
  3560                           
  3561                           ;ADC.c: 68: Distance = (((39300 - adcRAW*100)/95) + 300);
  3562  010D  3000               	movlw	0
  3563  010E  00CE               	movwf	___aldiv@divisor+3
  3564  010F  3000               	movlw	0
  3565  0110  00CD               	movwf	___aldiv@divisor+2
  3566  0111  3000               	movlw	0
  3567  0112  00CC               	movwf	___aldiv@divisor+1
  3568  0113  305F               	movlw	95
  3569  0114  00CB               	movwf	___aldiv@divisor
  3570  0115  3084               	movlw	132
  3571  0116  00DC               	movwf	??_adcConvertMM
  3572  0117  3099               	movlw	153
  3573  0118  00DD               	movwf	??_adcConvertMM+1
  3574  0119  3000               	movlw	0
  3575  011A  00DE               	movwf	??_adcConvertMM+2
  3576  011B  3000               	movlw	0
  3577  011C  00DF               	movwf	??_adcConvertMM+3
  3578  011D  085B               	movf	adcConvertMM@adcRAW+1,w
  3579  011E  00C6               	movwf	___wmul@multiplier+1
  3580  011F  085A               	movf	adcConvertMM@adcRAW,w
  3581  0120  00C5               	movwf	___wmul@multiplier
  3582  0121  3064               	movlw	100
  3583  0122  00C7               	movwf	___wmul@multiplicand
  3584  0123  3000               	movlw	0
  3585  0124  00C8               	movwf	___wmul@multiplicand+1
  3586  0125  120A  158A  26F4  120A  118A  	fcall	___wmul
  3587  012A  1283               	bcf	3,5	;RP0=0, select bank0
  3588  012B  1303               	bcf	3,6	;RP1=0, select bank0
  3589  012C  0845               	movf	?___wmul,w
  3590  012D  00E0               	movwf	??_adcConvertMM+4
  3591  012E  0846               	movf	?___wmul+1,w
  3592  012F  00E1               	movwf	??_adcConvertMM+5
  3593  0130  01E2               	clrf	??_adcConvertMM+6
  3594  0131  01E3               	clrf	??_adcConvertMM+7
  3595  0132  09E0               	comf	??_adcConvertMM+4,f
  3596  0133  09E1               	comf	??_adcConvertMM+5,f
  3597  0134  09E2               	comf	??_adcConvertMM+6,f
  3598  0135  09E3               	comf	??_adcConvertMM+7,f
  3599  0136  0AE0               	incf	??_adcConvertMM+4,f
  3600  0137  1903               	skipnz
  3601  0138  0AE1               	incf	??_adcConvertMM+5,f
  3602  0139  1903               	skipnz
  3603  013A  0AE2               	incf	??_adcConvertMM+6,f
  3604  013B  1903               	skipnz
  3605  013C  0AE3               	incf	??_adcConvertMM+7,f
  3606  013D  0860               	movf	??_adcConvertMM+4,w
  3607  013E  07DC               	addwf	??_adcConvertMM,f
  3608  013F  0861               	movf	??_adcConvertMM+5,w
  3609  0140  1803               	skipnc
  3610  0141  0F61               	incfsz	??_adcConvertMM+5,w
  3611  0142  2944               	goto	u1250
  3612  0143  2945               	goto	u1251
  3613  0144                     u1250:	
  3614  0144  07DD               	addwf	??_adcConvertMM+1,f
  3615  0145                     u1251:	
  3616  0145  0862               	movf	??_adcConvertMM+6,w
  3617  0146  1803               	skipnc
  3618  0147  0F62               	incfsz	??_adcConvertMM+6,w
  3619  0148  294A               	goto	u1252
  3620  0149  294B               	goto	u1253
  3621  014A                     u1252:	
  3622  014A  07DE               	addwf	??_adcConvertMM+2,f
  3623  014B                     u1253:	
  3624  014B  0863               	movf	??_adcConvertMM+7,w
  3625  014C  1803               	skipnc
  3626  014D  0A63               	incf	??_adcConvertMM+7,w
  3627  014E  07DF               	addwf	??_adcConvertMM+3,f
  3628  014F  085F               	movf	??_adcConvertMM+3,w
  3629  0150  00D2               	movwf	___aldiv@dividend+3
  3630  0151  085E               	movf	??_adcConvertMM+2,w
  3631  0152  00D1               	movwf	___aldiv@dividend+2
  3632  0153  085D               	movf	??_adcConvertMM+1,w
  3633  0154  00D0               	movwf	___aldiv@dividend+1
  3634  0155  085C               	movf	??_adcConvertMM,w
  3635  0156  00CF               	movwf	___aldiv@dividend
  3636  0157  120A  118A  2606  120A  118A  	fcall	___aldiv
  3637  015C  1283               	bcf	3,5	;RP0=0, select bank0
  3638  015D  1303               	bcf	3,6	;RP1=0, select bank0
  3639  015E  084B               	movf	?___aldiv,w
  3640  015F  3E2C               	addlw	44
  3641  0160  00A0               	movwf	_Distance	;volatile
  3642  0161  084C               	movf	?___aldiv+1,w
  3643  0162  1803               	skipnc
  3644  0163  3E01               	addlw	1
  3645  0164  3E01               	addlw	1
  3646  0165  00A1               	movwf	_Distance+1	;volatile
  3647  0166                     l1711:	
  3648                           
  3649                           ;ADC.c: 70: if (adcRAW < 298 && adcRAW >= 236)
  3650  0166  3001               	movlw	1
  3651  0167  025B               	subwf	adcConvertMM@adcRAW+1,w
  3652  0168  302A               	movlw	42
  3653  0169  1903               	skipnz
  3654  016A  025A               	subwf	adcConvertMM@adcRAW,w
  3655  016B  1803               	skipnc
  3656  016C  29A5               	goto	l1717
  3657  016D  3000               	movlw	0
  3658  016E  025B               	subwf	adcConvertMM@adcRAW+1,w
  3659  016F  30EC               	movlw	236
  3660  0170  1903               	skipnz
  3661  0171  025A               	subwf	adcConvertMM@adcRAW,w
  3662  0172  1C03               	skipc
  3663  0173  29A5               	goto	l1717
  3664                           
  3665                           ;ADC.c: 71: Distance = (((29800 - adcRAW*100)/62) + 400);
  3666  0174  303E               	movlw	62
  3667  0175  00CB               	movwf	___lwdiv@divisor
  3668  0176  3000               	movlw	0
  3669  0177  00CC               	movwf	___lwdiv@divisor+1
  3670  0178  085B               	movf	adcConvertMM@adcRAW+1,w
  3671  0179  00C6               	movwf	___wmul@multiplier+1
  3672  017A  085A               	movf	adcConvertMM@adcRAW,w
  3673  017B  00C5               	movwf	___wmul@multiplier
  3674  017C  3064               	movlw	100
  3675  017D  00C7               	movwf	___wmul@multiplicand
  3676  017E  3000               	movlw	0
  3677  017F  00C8               	movwf	___wmul@multiplicand+1
  3678  0180  120A  158A  26F4  120A  118A  	fcall	___wmul
  3679  0185  1283               	bcf	3,5	;RP0=0, select bank0
  3680  0186  1303               	bcf	3,6	;RP1=0, select bank0
  3681  0187  0945               	comf	?___wmul,w
  3682  0188  00DC               	movwf	??_adcConvertMM
  3683  0189  0946               	comf	?___wmul+1,w
  3684  018A  00DD               	movwf	??_adcConvertMM+1
  3685  018B  0ADC               	incf	??_adcConvertMM,f
  3686  018C  1903               	skipnz
  3687  018D  0ADD               	incf	??_adcConvertMM+1,f
  3688  018E  085C               	movf	??_adcConvertMM,w
  3689  018F  3E68               	addlw	104
  3690  0190  00CD               	movwf	___lwdiv@dividend
  3691  0191  085D               	movf	??_adcConvertMM+1,w
  3692  0192  1803               	skipnc
  3693  0193  3E01               	addlw	1
  3694  0194  3E74               	addlw	116
  3695  0195  00CE               	movwf	___lwdiv@dividend+1
  3696  0196  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  3697  019B  1283               	bcf	3,5	;RP0=0, select bank0
  3698  019C  1303               	bcf	3,6	;RP1=0, select bank0
  3699  019D  084B               	movf	?___lwdiv,w
  3700  019E  3E90               	addlw	144
  3701  019F  00A0               	movwf	_Distance	;volatile
  3702  01A0  084C               	movf	?___lwdiv+1,w
  3703  01A1  1803               	skipnc
  3704  01A2  3E01               	addlw	1
  3705  01A3  3E01               	addlw	1
  3706  01A4  00A1               	movwf	_Distance+1	;volatile
  3707  01A5                     l1717:	
  3708                           
  3709                           ;ADC.c: 73: if (adcRAW < 236 && adcRAW >= 194)
  3710  01A5  3000               	movlw	0
  3711  01A6  025B               	subwf	adcConvertMM@adcRAW+1,w
  3712  01A7  30EC               	movlw	236
  3713  01A8  1903               	skipnz
  3714  01A9  025A               	subwf	adcConvertMM@adcRAW,w
  3715  01AA  1803               	skipnc
  3716  01AB  29E4               	goto	l1723
  3717  01AC  3000               	movlw	0
  3718  01AD  025B               	subwf	adcConvertMM@adcRAW+1,w
  3719  01AE  30C2               	movlw	194
  3720  01AF  1903               	skipnz
  3721  01B0  025A               	subwf	adcConvertMM@adcRAW,w
  3722  01B1  1C03               	skipc
  3723  01B2  29E4               	goto	l1723
  3724                           
  3725                           ;ADC.c: 74: Distance = (((23600 - adcRAW*100)/42) + 500);
  3726  01B3  302A               	movlw	42
  3727  01B4  00CB               	movwf	___lwdiv@divisor
  3728  01B5  3000               	movlw	0
  3729  01B6  00CC               	movwf	___lwdiv@divisor+1
  3730  01B7  085B               	movf	adcConvertMM@adcRAW+1,w
  3731  01B8  00C6               	movwf	___wmul@multiplier+1
  3732  01B9  085A               	movf	adcConvertMM@adcRAW,w
  3733  01BA  00C5               	movwf	___wmul@multiplier
  3734  01BB  3064               	movlw	100
  3735  01BC  00C7               	movwf	___wmul@multiplicand
  3736  01BD  3000               	movlw	0
  3737  01BE  00C8               	movwf	___wmul@multiplicand+1
  3738  01BF  120A  158A  26F4  120A  118A  	fcall	___wmul
  3739  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  3740  01C5  1303               	bcf	3,6	;RP1=0, select bank0
  3741  01C6  0945               	comf	?___wmul,w
  3742  01C7  00DC               	movwf	??_adcConvertMM
  3743  01C8  0946               	comf	?___wmul+1,w
  3744  01C9  00DD               	movwf	??_adcConvertMM+1
  3745  01CA  0ADC               	incf	??_adcConvertMM,f
  3746  01CB  1903               	skipnz
  3747  01CC  0ADD               	incf	??_adcConvertMM+1,f
  3748  01CD  085C               	movf	??_adcConvertMM,w
  3749  01CE  3E30               	addlw	48
  3750  01CF  00CD               	movwf	___lwdiv@dividend
  3751  01D0  085D               	movf	??_adcConvertMM+1,w
  3752  01D1  1803               	skipnc
  3753  01D2  3E01               	addlw	1
  3754  01D3  3E5C               	addlw	92
  3755  01D4  00CE               	movwf	___lwdiv@dividend+1
  3756  01D5  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  3757  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  3758  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  3759  01DC  084B               	movf	?___lwdiv,w
  3760  01DD  3EF4               	addlw	244
  3761  01DE  00A0               	movwf	_Distance	;volatile
  3762  01DF  084C               	movf	?___lwdiv+1,w
  3763  01E0  1803               	skipnc
  3764  01E1  3E01               	addlw	1
  3765  01E2  3E01               	addlw	1
  3766  01E3  00A1               	movwf	_Distance+1	;volatile
  3767  01E4                     l1723:	
  3768                           
  3769                           ;ADC.c: 76: if (adcRAW < 194 && adcRAW >= 168)
  3770  01E4  3000               	movlw	0
  3771  01E5  025B               	subwf	adcConvertMM@adcRAW+1,w
  3772  01E6  30C2               	movlw	194
  3773  01E7  1903               	skipnz
  3774  01E8  025A               	subwf	adcConvertMM@adcRAW,w
  3775  01E9  1803               	skipnc
  3776  01EA  2A23               	goto	l1729
  3777  01EB  3000               	movlw	0
  3778  01EC  025B               	subwf	adcConvertMM@adcRAW+1,w
  3779  01ED  30A8               	movlw	168
  3780  01EE  1903               	skipnz
  3781  01EF  025A               	subwf	adcConvertMM@adcRAW,w
  3782  01F0  1C03               	skipc
  3783  01F1  2A23               	goto	l1729
  3784                           
  3785                           ;ADC.c: 77: Distance = (((19400 - adcRAW*100)/26) + 600);
  3786  01F2  301A               	movlw	26
  3787  01F3  00CB               	movwf	___lwdiv@divisor
  3788  01F4  3000               	movlw	0
  3789  01F5  00CC               	movwf	___lwdiv@divisor+1
  3790  01F6  085B               	movf	adcConvertMM@adcRAW+1,w
  3791  01F7  00C6               	movwf	___wmul@multiplier+1
  3792  01F8  085A               	movf	adcConvertMM@adcRAW,w
  3793  01F9  00C5               	movwf	___wmul@multiplier
  3794  01FA  3064               	movlw	100
  3795  01FB  00C7               	movwf	___wmul@multiplicand
  3796  01FC  3000               	movlw	0
  3797  01FD  00C8               	movwf	___wmul@multiplicand+1
  3798  01FE  120A  158A  26F4  120A  118A  	fcall	___wmul
  3799  0203  1283               	bcf	3,5	;RP0=0, select bank0
  3800  0204  1303               	bcf	3,6	;RP1=0, select bank0
  3801  0205  0945               	comf	?___wmul,w
  3802  0206  00DC               	movwf	??_adcConvertMM
  3803  0207  0946               	comf	?___wmul+1,w
  3804  0208  00DD               	movwf	??_adcConvertMM+1
  3805  0209  0ADC               	incf	??_adcConvertMM,f
  3806  020A  1903               	skipnz
  3807  020B  0ADD               	incf	??_adcConvertMM+1,f
  3808  020C  085C               	movf	??_adcConvertMM,w
  3809  020D  3EC8               	addlw	200
  3810  020E  00CD               	movwf	___lwdiv@dividend
  3811  020F  085D               	movf	??_adcConvertMM+1,w
  3812  0210  1803               	skipnc
  3813  0211  3E01               	addlw	1
  3814  0212  3E4B               	addlw	75
  3815  0213  00CE               	movwf	___lwdiv@dividend+1
  3816  0214  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  3817  0219  1283               	bcf	3,5	;RP0=0, select bank0
  3818  021A  1303               	bcf	3,6	;RP1=0, select bank0
  3819  021B  084B               	movf	?___lwdiv,w
  3820  021C  3E58               	addlw	88
  3821  021D  00A0               	movwf	_Distance	;volatile
  3822  021E  084C               	movf	?___lwdiv+1,w
  3823  021F  1803               	skipnc
  3824  0220  3E01               	addlw	1
  3825  0221  3E02               	addlw	2
  3826  0222  00A1               	movwf	_Distance+1	;volatile
  3827  0223                     l1729:	
  3828                           
  3829                           ;ADC.c: 79: if (adcRAW < 168 && adcRAW >= 144)
  3830  0223  3000               	movlw	0
  3831  0224  025B               	subwf	adcConvertMM@adcRAW+1,w
  3832  0225  30A8               	movlw	168
  3833  0226  1903               	skipnz
  3834  0227  025A               	subwf	adcConvertMM@adcRAW,w
  3835  0228  1803               	skipnc
  3836  0229  2A62               	goto	l1735
  3837  022A  3000               	movlw	0
  3838  022B  025B               	subwf	adcConvertMM@adcRAW+1,w
  3839  022C  3090               	movlw	144
  3840  022D  1903               	skipnz
  3841  022E  025A               	subwf	adcConvertMM@adcRAW,w
  3842  022F  1C03               	skipc
  3843  0230  2A62               	goto	l1735
  3844                           
  3845                           ;ADC.c: 80: Distance = (((16800 - adcRAW*100)/24) + 700);
  3846  0231  3018               	movlw	24
  3847  0232  00CB               	movwf	___lwdiv@divisor
  3848  0233  3000               	movlw	0
  3849  0234  00CC               	movwf	___lwdiv@divisor+1
  3850  0235  085B               	movf	adcConvertMM@adcRAW+1,w
  3851  0236  00C6               	movwf	___wmul@multiplier+1
  3852  0237  085A               	movf	adcConvertMM@adcRAW,w
  3853  0238  00C5               	movwf	___wmul@multiplier
  3854  0239  3064               	movlw	100
  3855  023A  00C7               	movwf	___wmul@multiplicand
  3856  023B  3000               	movlw	0
  3857  023C  00C8               	movwf	___wmul@multiplicand+1
  3858  023D  120A  158A  26F4  120A  118A  	fcall	___wmul
  3859  0242  1283               	bcf	3,5	;RP0=0, select bank0
  3860  0243  1303               	bcf	3,6	;RP1=0, select bank0
  3861  0244  0945               	comf	?___wmul,w
  3862  0245  00DC               	movwf	??_adcConvertMM
  3863  0246  0946               	comf	?___wmul+1,w
  3864  0247  00DD               	movwf	??_adcConvertMM+1
  3865  0248  0ADC               	incf	??_adcConvertMM,f
  3866  0249  1903               	skipnz
  3867  024A  0ADD               	incf	??_adcConvertMM+1,f
  3868  024B  085C               	movf	??_adcConvertMM,w
  3869  024C  3EA0               	addlw	160
  3870  024D  00CD               	movwf	___lwdiv@dividend
  3871  024E  085D               	movf	??_adcConvertMM+1,w
  3872  024F  1803               	skipnc
  3873  0250  3E01               	addlw	1
  3874  0251  3E41               	addlw	65
  3875  0252  00CE               	movwf	___lwdiv@dividend+1
  3876  0253  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  3877  0258  1283               	bcf	3,5	;RP0=0, select bank0
  3878  0259  1303               	bcf	3,6	;RP1=0, select bank0
  3879  025A  084B               	movf	?___lwdiv,w
  3880  025B  3EBC               	addlw	188
  3881  025C  00A0               	movwf	_Distance	;volatile
  3882  025D  084C               	movf	?___lwdiv+1,w
  3883  025E  1803               	skipnc
  3884  025F  3E01               	addlw	1
  3885  0260  3E02               	addlw	2
  3886  0261  00A1               	movwf	_Distance+1	;volatile
  3887  0262                     l1735:	
  3888                           
  3889                           ;ADC.c: 82: if (adcRAW < 144 && adcRAW >= 129)
  3890  0262  3000               	movlw	0
  3891  0263  025B               	subwf	adcConvertMM@adcRAW+1,w
  3892  0264  3090               	movlw	144
  3893  0265  1903               	skipnz
  3894  0266  025A               	subwf	adcConvertMM@adcRAW,w
  3895  0267  1803               	skipnc
  3896  0268  2AA1               	goto	l1741
  3897  0269  3000               	movlw	0
  3898  026A  025B               	subwf	adcConvertMM@adcRAW+1,w
  3899  026B  3081               	movlw	129
  3900  026C  1903               	skipnz
  3901  026D  025A               	subwf	adcConvertMM@adcRAW,w
  3902  026E  1C03               	skipc
  3903  026F  2AA1               	goto	l1741
  3904                           
  3905                           ;ADC.c: 83: Distance = (((14400 - adcRAW*100)/15) + 800);
  3906  0270  300F               	movlw	15
  3907  0271  00CB               	movwf	___lwdiv@divisor
  3908  0272  3000               	movlw	0
  3909  0273  00CC               	movwf	___lwdiv@divisor+1
  3910  0274  085B               	movf	adcConvertMM@adcRAW+1,w
  3911  0275  00C6               	movwf	___wmul@multiplier+1
  3912  0276  085A               	movf	adcConvertMM@adcRAW,w
  3913  0277  00C5               	movwf	___wmul@multiplier
  3914  0278  3064               	movlw	100
  3915  0279  00C7               	movwf	___wmul@multiplicand
  3916  027A  3000               	movlw	0
  3917  027B  00C8               	movwf	___wmul@multiplicand+1
  3918  027C  120A  158A  26F4  120A  118A  	fcall	___wmul
  3919  0281  1283               	bcf	3,5	;RP0=0, select bank0
  3920  0282  1303               	bcf	3,6	;RP1=0, select bank0
  3921  0283  0945               	comf	?___wmul,w
  3922  0284  00DC               	movwf	??_adcConvertMM
  3923  0285  0946               	comf	?___wmul+1,w
  3924  0286  00DD               	movwf	??_adcConvertMM+1
  3925  0287  0ADC               	incf	??_adcConvertMM,f
  3926  0288  1903               	skipnz
  3927  0289  0ADD               	incf	??_adcConvertMM+1,f
  3928  028A  085C               	movf	??_adcConvertMM,w
  3929  028B  3E40               	addlw	64
  3930  028C  00CD               	movwf	___lwdiv@dividend
  3931  028D  085D               	movf	??_adcConvertMM+1,w
  3932  028E  1803               	skipnc
  3933  028F  3E01               	addlw	1
  3934  0290  3E38               	addlw	56
  3935  0291  00CE               	movwf	___lwdiv@dividend+1
  3936  0292  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  3937  0297  1283               	bcf	3,5	;RP0=0, select bank0
  3938  0298  1303               	bcf	3,6	;RP1=0, select bank0
  3939  0299  084B               	movf	?___lwdiv,w
  3940  029A  3E20               	addlw	32
  3941  029B  00A0               	movwf	_Distance	;volatile
  3942  029C  084C               	movf	?___lwdiv+1,w
  3943  029D  1803               	skipnc
  3944  029E  3E01               	addlw	1
  3945  029F  3E03               	addlw	3
  3946  02A0  00A1               	movwf	_Distance+1	;volatile
  3947  02A1                     l1741:	
  3948                           
  3949                           ;ADC.c: 85: if (adcRAW < 129 && adcRAW >= 110)
  3950  02A1  3000               	movlw	0
  3951  02A2  025B               	subwf	adcConvertMM@adcRAW+1,w
  3952  02A3  3081               	movlw	129
  3953  02A4  1903               	skipnz
  3954  02A5  025A               	subwf	adcConvertMM@adcRAW,w
  3955  02A6  1803               	skipnc
  3956  02A7  2AE0               	goto	l1747
  3957  02A8  3000               	movlw	0
  3958  02A9  025B               	subwf	adcConvertMM@adcRAW+1,w
  3959  02AA  306E               	movlw	110
  3960  02AB  1903               	skipnz
  3961  02AC  025A               	subwf	adcConvertMM@adcRAW,w
  3962  02AD  1C03               	skipc
  3963  02AE  2AE0               	goto	l1747
  3964                           
  3965                           ;ADC.c: 86: Distance = (((12900 - adcRAW*100)/19) + 900 + 50);
  3966  02AF  3013               	movlw	19
  3967  02B0  00CB               	movwf	___lwdiv@divisor
  3968  02B1  3000               	movlw	0
  3969  02B2  00CC               	movwf	___lwdiv@divisor+1
  3970  02B3  085B               	movf	adcConvertMM@adcRAW+1,w
  3971  02B4  00C6               	movwf	___wmul@multiplier+1
  3972  02B5  085A               	movf	adcConvertMM@adcRAW,w
  3973  02B6  00C5               	movwf	___wmul@multiplier
  3974  02B7  3064               	movlw	100
  3975  02B8  00C7               	movwf	___wmul@multiplicand
  3976  02B9  3000               	movlw	0
  3977  02BA  00C8               	movwf	___wmul@multiplicand+1
  3978  02BB  120A  158A  26F4  120A  118A  	fcall	___wmul
  3979  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  3980  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  3981  02C2  0945               	comf	?___wmul,w
  3982  02C3  00DC               	movwf	??_adcConvertMM
  3983  02C4  0946               	comf	?___wmul+1,w
  3984  02C5  00DD               	movwf	??_adcConvertMM+1
  3985  02C6  0ADC               	incf	??_adcConvertMM,f
  3986  02C7  1903               	skipnz
  3987  02C8  0ADD               	incf	??_adcConvertMM+1,f
  3988  02C9  085C               	movf	??_adcConvertMM,w
  3989  02CA  3E64               	addlw	100
  3990  02CB  00CD               	movwf	___lwdiv@dividend
  3991  02CC  085D               	movf	??_adcConvertMM+1,w
  3992  02CD  1803               	skipnc
  3993  02CE  3E01               	addlw	1
  3994  02CF  3E32               	addlw	50
  3995  02D0  00CE               	movwf	___lwdiv@dividend+1
  3996  02D1  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  3997  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  3998  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  3999  02D8  084B               	movf	?___lwdiv,w
  4000  02D9  3EB6               	addlw	182
  4001  02DA  00A0               	movwf	_Distance	;volatile
  4002  02DB  084C               	movf	?___lwdiv+1,w
  4003  02DC  1803               	skipnc
  4004  02DD  3E01               	addlw	1
  4005  02DE  3E03               	addlw	3
  4006  02DF  00A1               	movwf	_Distance+1	;volatile
  4007  02E0                     l1747:	
  4008                           
  4009                           ;ADC.c: 88: if (adcRAW < 110 && adcRAW >= 98)
  4010  02E0  3000               	movlw	0
  4011  02E1  025B               	subwf	adcConvertMM@adcRAW+1,w
  4012  02E2  306E               	movlw	110
  4013  02E3  1903               	skipnz
  4014  02E4  025A               	subwf	adcConvertMM@adcRAW,w
  4015  02E5  1803               	skipnc
  4016  02E6  2B1F               	goto	l1753
  4017  02E7  3000               	movlw	0
  4018  02E8  025B               	subwf	adcConvertMM@adcRAW+1,w
  4019  02E9  3062               	movlw	98
  4020  02EA  1903               	skipnz
  4021  02EB  025A               	subwf	adcConvertMM@adcRAW,w
  4022  02EC  1C03               	skipc
  4023  02ED  2B1F               	goto	l1753
  4024                           
  4025                           ;ADC.c: 89: Distance = (((11000 - adcRAW*100)/12) + 1000 + 100);
  4026  02EE  300C               	movlw	12
  4027  02EF  00CB               	movwf	___lwdiv@divisor
  4028  02F0  3000               	movlw	0
  4029  02F1  00CC               	movwf	___lwdiv@divisor+1
  4030  02F2  085B               	movf	adcConvertMM@adcRAW+1,w
  4031  02F3  00C6               	movwf	___wmul@multiplier+1
  4032  02F4  085A               	movf	adcConvertMM@adcRAW,w
  4033  02F5  00C5               	movwf	___wmul@multiplier
  4034  02F6  3064               	movlw	100
  4035  02F7  00C7               	movwf	___wmul@multiplicand
  4036  02F8  3000               	movlw	0
  4037  02F9  00C8               	movwf	___wmul@multiplicand+1
  4038  02FA  120A  158A  26F4  120A  118A  	fcall	___wmul
  4039  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  4040  0300  1303               	bcf	3,6	;RP1=0, select bank0
  4041  0301  0945               	comf	?___wmul,w
  4042  0302  00DC               	movwf	??_adcConvertMM
  4043  0303  0946               	comf	?___wmul+1,w
  4044  0304  00DD               	movwf	??_adcConvertMM+1
  4045  0305  0ADC               	incf	??_adcConvertMM,f
  4046  0306  1903               	skipnz
  4047  0307  0ADD               	incf	??_adcConvertMM+1,f
  4048  0308  085C               	movf	??_adcConvertMM,w
  4049  0309  3EF8               	addlw	248
  4050  030A  00CD               	movwf	___lwdiv@dividend
  4051  030B  085D               	movf	??_adcConvertMM+1,w
  4052  030C  1803               	skipnc
  4053  030D  3E01               	addlw	1
  4054  030E  3E2A               	addlw	42
  4055  030F  00CE               	movwf	___lwdiv@dividend+1
  4056  0310  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  4057  0315  1283               	bcf	3,5	;RP0=0, select bank0
  4058  0316  1303               	bcf	3,6	;RP1=0, select bank0
  4059  0317  084B               	movf	?___lwdiv,w
  4060  0318  3E4C               	addlw	76
  4061  0319  00A0               	movwf	_Distance	;volatile
  4062  031A  084C               	movf	?___lwdiv+1,w
  4063  031B  1803               	skipnc
  4064  031C  3E01               	addlw	1
  4065  031D  3E04               	addlw	4
  4066  031E  00A1               	movwf	_Distance+1	;volatile
  4067  031F                     l1753:	
  4068                           
  4069                           ;ADC.c: 91: if (adcRAW < 98 && adcRAW >= 90)
  4070  031F  3000               	movlw	0
  4071  0320  025B               	subwf	adcConvertMM@adcRAW+1,w
  4072  0321  3062               	movlw	98
  4073  0322  1903               	skipnz
  4074  0323  025A               	subwf	adcConvertMM@adcRAW,w
  4075  0324  1803               	skipnc
  4076  0325  2B5C               	goto	l1759
  4077  0326  3000               	movlw	0
  4078  0327  025B               	subwf	adcConvertMM@adcRAW+1,w
  4079  0328  305A               	movlw	90
  4080  0329  1903               	skipnz
  4081  032A  025A               	subwf	adcConvertMM@adcRAW,w
  4082  032B  1C03               	skipc
  4083  032C  2B5C               	goto	l1759
  4084                           
  4085                           ;ADC.c: 92: Distance = (((9800 - adcRAW*100)/8) + 1100 + 150);
  4086  032D  085B               	movf	adcConvertMM@adcRAW+1,w
  4087  032E  00C6               	movwf	___wmul@multiplier+1
  4088  032F  085A               	movf	adcConvertMM@adcRAW,w
  4089  0330  00C5               	movwf	___wmul@multiplier
  4090  0331  3064               	movlw	100
  4091  0332  00C7               	movwf	___wmul@multiplicand
  4092  0333  3000               	movlw	0
  4093  0334  00C8               	movwf	___wmul@multiplicand+1
  4094  0335  120A  158A  26F4  120A  118A  	fcall	___wmul
  4095  033A  1283               	bcf	3,5	;RP0=0, select bank0
  4096  033B  1303               	bcf	3,6	;RP1=0, select bank0
  4097  033C  0945               	comf	?___wmul,w
  4098  033D  00DC               	movwf	??_adcConvertMM
  4099  033E  0946               	comf	?___wmul+1,w
  4100  033F  00DD               	movwf	??_adcConvertMM+1
  4101  0340  0ADC               	incf	??_adcConvertMM,f
  4102  0341  1903               	skipnz
  4103  0342  0ADD               	incf	??_adcConvertMM+1,f
  4104  0343  085C               	movf	??_adcConvertMM,w
  4105  0344  3E48               	addlw	72
  4106  0345  00DE               	movwf	??_adcConvertMM+2
  4107  0346  085D               	movf	??_adcConvertMM+1,w
  4108  0347  1803               	skipnc
  4109  0348  3E01               	addlw	1
  4110  0349  3E26               	addlw	38
  4111  034A  00DF               	movwf	??_adcConvertMM+3
  4112  034B  1003               	clrc
  4113  034C  0CDF               	rrf	??_adcConvertMM+3,f
  4114  034D  0CDE               	rrf	??_adcConvertMM+2,f
  4115  034E  1003               	clrc
  4116  034F  0CDF               	rrf	??_adcConvertMM+3,f
  4117  0350  0CDE               	rrf	??_adcConvertMM+2,f
  4118  0351  1003               	clrc
  4119  0352  0CDF               	rrf	??_adcConvertMM+3,f
  4120  0353  0CDE               	rrf	??_adcConvertMM+2,f
  4121  0354  085E               	movf	??_adcConvertMM+2,w
  4122  0355  3EE2               	addlw	226
  4123  0356  00A0               	movwf	_Distance	;volatile
  4124  0357  085F               	movf	??_adcConvertMM+3,w
  4125  0358  1803               	skipnc
  4126  0359  3E01               	addlw	1
  4127  035A  3E04               	addlw	4
  4128  035B  00A1               	movwf	_Distance+1	;volatile
  4129  035C                     l1759:	
  4130                           
  4131                           ;ADC.c: 94: if(adcRAW < 90 || adcRAW >= 517)
  4132  035C  3000               	movlw	0
  4133  035D  025B               	subwf	adcConvertMM@adcRAW+1,w
  4134  035E  305A               	movlw	90
  4135  035F  1903               	skipnz
  4136  0360  025A               	subwf	adcConvertMM@adcRAW,w
  4137  0361  1C03               	skipc
  4138  0362  2B6A               	goto	l1763
  4139  0363  3002               	movlw	2
  4140  0364  025B               	subwf	adcConvertMM@adcRAW+1,w
  4141  0365  3005               	movlw	5
  4142  0366  1903               	skipnz
  4143  0367  025A               	subwf	adcConvertMM@adcRAW,w
  4144  0368  1C03               	skipc
  4145  0369  0008               	return
  4146  036A                     l1763:	
  4147                           
  4148                           ;ADC.c: 95: Distance = 0;
  4149  036A  01A0               	clrf	_Distance	;volatile
  4150  036B  01A1               	clrf	_Distance+1	;volatile
  4151  036C  0008               	return
  4152  036D                     __end_of_adcConvertMM:	
  4153                           ;ADC.c: 97: return(Distance);
  4154                           ;	Return value of _adcConvertMM is never used
  4155                           
  4156                           
  4157                           	psect	text20
  4158  0EF4                     __ptext20:	
  4159 ;; *************** function ___wmul *****************
  4160 ;; Defined at:
  4161 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  4162 ;; Parameters:    Size  Location     Type
  4163 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4164 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4165 ;; Auto vars:     Size  Location     Type
  4166 ;;  product         2    4[BANK0 ] unsigned int 
  4167 ;; Return value:  Size  Location     Type
  4168 ;;                  2    0[BANK0 ] unsigned int 
  4169 ;; Registers used:
  4170 ;;		wreg, status,2, status,0
  4171 ;; Tracked objects:
  4172 ;;		On entry : 0/0
  4173 ;;		On exit  : 0/0
  4174 ;;		Unchanged: 0/0
  4175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4176 ;;      Params:         0       4       0       0       0
  4177 ;;      Locals:         0       2       0       0       0
  4178 ;;      Temps:          0       0       0       0       0
  4179 ;;      Totals:         0       6       0       0       0
  4180 ;;Total ram usage:        6 bytes
  4181 ;; Hardware stack levels used:    1
  4182 ;; Hardware stack levels required when called:    2
  4183 ;; This function calls:
  4184 ;;		Nothing
  4185 ;; This function is called by:
  4186 ;;		_adcConvertMM
  4187 ;; This function uses a non-reentrant model
  4188 ;;
  4189                           
  4190                           
  4191                           ;psect for function ___wmul
  4192  0EF4                     ___wmul:	
  4193                           
  4194                           ;incstack = 0
  4195                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4196  0EF4  1283               	bcf	3,5	;RP0=0, select bank0
  4197  0EF5  1303               	bcf	3,6	;RP1=0, select bank0
  4198  0EF6  01C9               	clrf	___wmul@product
  4199  0EF7  01CA               	clrf	___wmul@product+1
  4200  0EF8                     l1545:	
  4201  0EF8  1C45               	btfss	___wmul@multiplier,0
  4202  0EF9  2F00               	goto	l565
  4203  0EFA  0847               	movf	___wmul@multiplicand,w
  4204  0EFB  07C9               	addwf	___wmul@product,f
  4205  0EFC  1803               	skipnc
  4206  0EFD  0ACA               	incf	___wmul@product+1,f
  4207  0EFE  0848               	movf	___wmul@multiplicand+1,w
  4208  0EFF  07CA               	addwf	___wmul@product+1,f
  4209  0F00                     l565:	
  4210  0F00  3001               	movlw	1
  4211  0F01                     u885:	
  4212  0F01  1003               	clrc
  4213  0F02  0DC7               	rlf	___wmul@multiplicand,f
  4214  0F03  0DC8               	rlf	___wmul@multiplicand+1,f
  4215  0F04  3EFF               	addlw	-1
  4216  0F05  1D03               	skipz
  4217  0F06  2F01               	goto	u885
  4218  0F07  3001               	movlw	1
  4219  0F08                     u895:	
  4220  0F08  1003               	clrc
  4221  0F09  0CC6               	rrf	___wmul@multiplier+1,f
  4222  0F0A  0CC5               	rrf	___wmul@multiplier,f
  4223  0F0B  3EFF               	addlw	-1
  4224  0F0C  1D03               	skipz
  4225  0F0D  2F08               	goto	u895
  4226  0F0E  0845               	movf	___wmul@multiplier,w
  4227  0F0F  0446               	iorwf	___wmul@multiplier+1,w
  4228  0F10  1D03               	btfss	3,2
  4229  0F11  2EF8               	goto	l1545
  4230  0F12  084A               	movf	___wmul@product+1,w
  4231  0F13  00C6               	movwf	?___wmul+1
  4232  0F14  0849               	movf	___wmul@product,w
  4233  0F15  00C5               	movwf	?___wmul
  4234  0F16  0008               	return
  4235  0F17                     __end_of___wmul:	
  4236                           
  4237                           	psect	text21
  4238  0FC2                     __ptext21:	
  4239 ;; *************** function ___lwdiv *****************
  4240 ;; Defined at:
  4241 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  4242 ;; Parameters:    Size  Location     Type
  4243 ;;  divisor         2    6[BANK0 ] unsigned int 
  4244 ;;  dividend        2    8[BANK0 ] unsigned int 
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;  quotient        2   11[BANK0 ] unsigned int 
  4247 ;;  counter         1   13[BANK0 ] unsigned char 
  4248 ;; Return value:  Size  Location     Type
  4249 ;;                  2    6[BANK0 ] unsigned int 
  4250 ;; Registers used:
  4251 ;;		wreg, status,2, status,0
  4252 ;; Tracked objects:
  4253 ;;		On entry : 0/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4257 ;;      Params:         0       4       0       0       0
  4258 ;;      Locals:         0       3       0       0       0
  4259 ;;      Temps:          0       1       0       0       0
  4260 ;;      Totals:         0       8       0       0       0
  4261 ;;Total ram usage:        8 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; Hardware stack levels required when called:    2
  4264 ;; This function calls:
  4265 ;;		Nothing
  4266 ;; This function is called by:
  4267 ;;		_adcConvertMM
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           
  4272                           ;psect for function ___lwdiv
  4273  0FC2                     ___lwdiv:	
  4274                           
  4275                           ;incstack = 0
  4276                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4277  0FC2  1283               	bcf	3,5	;RP0=0, select bank0
  4278  0FC3  1303               	bcf	3,6	;RP1=0, select bank0
  4279  0FC4  01D0               	clrf	___lwdiv@quotient
  4280  0FC5  01D1               	clrf	___lwdiv@quotient+1
  4281  0FC6  084B               	movf	___lwdiv@divisor,w
  4282  0FC7  044C               	iorwf	___lwdiv@divisor+1,w
  4283  0FC8  1903               	btfsc	3,2
  4284  0FC9  2FFB               	goto	l1619
  4285  0FCA  01D2               	clrf	___lwdiv@counter
  4286  0FCB  0AD2               	incf	___lwdiv@counter,f
  4287  0FCC                     l1607:	
  4288  0FCC  1BCC               	btfsc	___lwdiv@divisor+1,7
  4289  0FCD  2FDA               	goto	l1609
  4290  0FCE  3001               	movlw	1
  4291  0FCF                     u1025:	
  4292  0FCF  1003               	clrc
  4293  0FD0  0DCB               	rlf	___lwdiv@divisor,f
  4294  0FD1  0DCC               	rlf	___lwdiv@divisor+1,f
  4295  0FD2  3EFF               	addlw	-1
  4296  0FD3  1D03               	skipz
  4297  0FD4  2FCF               	goto	u1025
  4298  0FD5  3001               	movlw	1
  4299  0FD6  00CF               	movwf	??___lwdiv
  4300  0FD7  084F               	movf	??___lwdiv,w
  4301  0FD8  07D2               	addwf	___lwdiv@counter,f
  4302  0FD9  2FCC               	goto	l1607
  4303  0FDA                     l1609:	
  4304  0FDA  3001               	movlw	1
  4305  0FDB                     u1045:	
  4306  0FDB  1003               	clrc
  4307  0FDC  0DD0               	rlf	___lwdiv@quotient,f
  4308  0FDD  0DD1               	rlf	___lwdiv@quotient+1,f
  4309  0FDE  3EFF               	addlw	-1
  4310  0FDF  1D03               	skipz
  4311  0FE0  2FDB               	goto	u1045
  4312  0FE1  084C               	movf	___lwdiv@divisor+1,w
  4313  0FE2  024E               	subwf	___lwdiv@dividend+1,w
  4314  0FE3  1D03               	skipz
  4315  0FE4  2FE7               	goto	u1055
  4316  0FE5  084B               	movf	___lwdiv@divisor,w
  4317  0FE6  024D               	subwf	___lwdiv@dividend,w
  4318  0FE7                     u1055:	
  4319  0FE7  1C03               	skipc
  4320  0FE8  2FF0               	goto	l1615
  4321  0FE9  084B               	movf	___lwdiv@divisor,w
  4322  0FEA  02CD               	subwf	___lwdiv@dividend,f
  4323  0FEB  084C               	movf	___lwdiv@divisor+1,w
  4324  0FEC  1C03               	skipc
  4325  0FED  03CE               	decf	___lwdiv@dividend+1,f
  4326  0FEE  02CE               	subwf	___lwdiv@dividend+1,f
  4327  0FEF  1450               	bsf	___lwdiv@quotient,0
  4328  0FF0                     l1615:	
  4329  0FF0  3001               	movlw	1
  4330  0FF1                     u1065:	
  4331  0FF1  1003               	clrc
  4332  0FF2  0CCC               	rrf	___lwdiv@divisor+1,f
  4333  0FF3  0CCB               	rrf	___lwdiv@divisor,f
  4334  0FF4  3EFF               	addlw	-1
  4335  0FF5  1D03               	skipz
  4336  0FF6  2FF1               	goto	u1065
  4337  0FF7  3001               	movlw	1
  4338  0FF8  02D2               	subwf	___lwdiv@counter,f
  4339  0FF9  1D03               	btfss	3,2
  4340  0FFA  2FDA               	goto	l1609
  4341  0FFB                     l1619:	
  4342  0FFB  0851               	movf	___lwdiv@quotient+1,w
  4343  0FFC  00CC               	movwf	?___lwdiv+1
  4344  0FFD  0850               	movf	___lwdiv@quotient,w
  4345  0FFE  00CB               	movwf	?___lwdiv
  4346  0FFF  0008               	return
  4347  1000                     __end_of___lwdiv:	
  4348                           
  4349                           	psect	text22
  4350  0606                     __ptext22:	
  4351 ;; *************** function ___aldiv *****************
  4352 ;; Defined at:
  4353 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;  divisor         4    6[BANK0 ] long 
  4356 ;;  dividend        4   10[BANK0 ] long 
  4357 ;; Auto vars:     Size  Location     Type
  4358 ;;  quotient        4   17[BANK0 ] long 
  4359 ;;  sign            1   16[BANK0 ] unsigned char 
  4360 ;;  counter         1   15[BANK0 ] unsigned char 
  4361 ;; Return value:  Size  Location     Type
  4362 ;;                  4    6[BANK0 ] long 
  4363 ;; Registers used:
  4364 ;;		wreg, status,2, status,0
  4365 ;; Tracked objects:
  4366 ;;		On entry : 0/0
  4367 ;;		On exit  : 0/0
  4368 ;;		Unchanged: 0/0
  4369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4370 ;;      Params:         0       8       0       0       0
  4371 ;;      Locals:         0       6       0       0       0
  4372 ;;      Temps:          0       1       0       0       0
  4373 ;;      Totals:         0      15       0       0       0
  4374 ;;Total ram usage:       15 bytes
  4375 ;; Hardware stack levels used:    1
  4376 ;; Hardware stack levels required when called:    2
  4377 ;; This function calls:
  4378 ;;		Nothing
  4379 ;; This function is called by:
  4380 ;;		_adcConvertMM
  4381 ;; This function uses a non-reentrant model
  4382 ;;
  4383                           
  4384                           
  4385                           ;psect for function ___aldiv
  4386  0606                     ___aldiv:	
  4387                           
  4388                           ;incstack = 0
  4389                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4390  0606  1283               	bcf	3,5	;RP0=0, select bank0
  4391  0607  1303               	bcf	3,6	;RP1=0, select bank0
  4392  0608  01D5               	clrf	___aldiv@sign
  4393  0609  1FCE               	btfss	___aldiv@divisor+3,7
  4394  060A  2E18               	goto	l620
  4395  060B  09CB               	comf	___aldiv@divisor,f
  4396  060C  09CC               	comf	___aldiv@divisor+1,f
  4397  060D  09CD               	comf	___aldiv@divisor+2,f
  4398  060E  09CE               	comf	___aldiv@divisor+3,f
  4399  060F  0ACB               	incf	___aldiv@divisor,f
  4400  0610  1903               	skipnz
  4401  0611  0ACC               	incf	___aldiv@divisor+1,f
  4402  0612  1903               	skipnz
  4403  0613  0ACD               	incf	___aldiv@divisor+2,f
  4404  0614  1903               	skipnz
  4405  0615  0ACE               	incf	___aldiv@divisor+3,f
  4406  0616  01D5               	clrf	___aldiv@sign
  4407  0617  0AD5               	incf	___aldiv@sign,f
  4408  0618                     l620:	
  4409  0618  1FD2               	btfss	___aldiv@dividend+3,7
  4410  0619  2E29               	goto	l1567
  4411  061A  09CF               	comf	___aldiv@dividend,f
  4412  061B  09D0               	comf	___aldiv@dividend+1,f
  4413  061C  09D1               	comf	___aldiv@dividend+2,f
  4414  061D  09D2               	comf	___aldiv@dividend+3,f
  4415  061E  0ACF               	incf	___aldiv@dividend,f
  4416  061F  1903               	skipnz
  4417  0620  0AD0               	incf	___aldiv@dividend+1,f
  4418  0621  1903               	skipnz
  4419  0622  0AD1               	incf	___aldiv@dividend+2,f
  4420  0623  1903               	skipnz
  4421  0624  0AD2               	incf	___aldiv@dividend+3,f
  4422  0625  3001               	movlw	1
  4423  0626  00D3               	movwf	??___aldiv
  4424  0627  0853               	movf	??___aldiv,w
  4425  0628  06D5               	xorwf	___aldiv@sign,f
  4426  0629                     l1567:	
  4427  0629  3000               	movlw	0
  4428  062A  00D9               	movwf	___aldiv@quotient+3
  4429  062B  3000               	movlw	0
  4430  062C  00D8               	movwf	___aldiv@quotient+2
  4431  062D  3000               	movlw	0
  4432  062E  00D7               	movwf	___aldiv@quotient+1
  4433  062F  3000               	movlw	0
  4434  0630  00D6               	movwf	___aldiv@quotient
  4435  0631  084E               	movf	___aldiv@divisor+3,w
  4436  0632  044D               	iorwf	___aldiv@divisor+2,w
  4437  0633  044C               	iorwf	___aldiv@divisor+1,w
  4438  0634  044B               	iorwf	___aldiv@divisor,w
  4439  0635  1903               	skipnz
  4440  0636  2E7E               	goto	l1589
  4441  0637  01D4               	clrf	___aldiv@counter
  4442  0638  0AD4               	incf	___aldiv@counter,f
  4443  0639                     l1575:	
  4444  0639  1BCE               	btfsc	___aldiv@divisor+3,7
  4445  063A  2E49               	goto	l1577
  4446  063B  3001               	movlw	1
  4447  063C  00D3               	movwf	??___aldiv
  4448  063D                     u945:	
  4449  063D  1003               	clrc
  4450  063E  0DCB               	rlf	___aldiv@divisor,f
  4451  063F  0DCC               	rlf	___aldiv@divisor+1,f
  4452  0640  0DCD               	rlf	___aldiv@divisor+2,f
  4453  0641  0DCE               	rlf	___aldiv@divisor+3,f
  4454  0642  0BD3               	decfsz	??___aldiv,f
  4455  0643  2E3D               	goto	u945
  4456  0644  3001               	movlw	1
  4457  0645  00D3               	movwf	??___aldiv
  4458  0646  0853               	movf	??___aldiv,w
  4459  0647  07D4               	addwf	___aldiv@counter,f
  4460  0648  2E39               	goto	l1575
  4461  0649                     l1577:	
  4462  0649  3001               	movlw	1
  4463  064A  00D3               	movwf	??___aldiv
  4464  064B                     u965:	
  4465  064B  1003               	clrc
  4466  064C  0DD6               	rlf	___aldiv@quotient,f
  4467  064D  0DD7               	rlf	___aldiv@quotient+1,f
  4468  064E  0DD8               	rlf	___aldiv@quotient+2,f
  4469  064F  0DD9               	rlf	___aldiv@quotient+3,f
  4470  0650  0BD3               	decfsz	??___aldiv,f
  4471  0651  2E4B               	goto	u965
  4472  0652  084E               	movf	___aldiv@divisor+3,w
  4473  0653  0252               	subwf	___aldiv@dividend+3,w
  4474  0654  1D03               	skipz
  4475  0655  2E60               	goto	u975
  4476  0656  084D               	movf	___aldiv@divisor+2,w
  4477  0657  0251               	subwf	___aldiv@dividend+2,w
  4478  0658  1D03               	skipz
  4479  0659  2E60               	goto	u975
  4480  065A  084C               	movf	___aldiv@divisor+1,w
  4481  065B  0250               	subwf	___aldiv@dividend+1,w
  4482  065C  1D03               	skipz
  4483  065D  2E60               	goto	u975
  4484  065E  084B               	movf	___aldiv@divisor,w
  4485  065F  024F               	subwf	___aldiv@dividend,w
  4486  0660                     u975:	
  4487  0660  1C03               	skipc
  4488  0661  2E71               	goto	l1585
  4489  0662  084B               	movf	___aldiv@divisor,w
  4490  0663  02CF               	subwf	___aldiv@dividend,f
  4491  0664  084C               	movf	___aldiv@divisor+1,w
  4492  0665  1C03               	skipc
  4493  0666  0F4C               	incfsz	___aldiv@divisor+1,w
  4494  0667  02D0               	subwf	___aldiv@dividend+1,f
  4495  0668  084D               	movf	___aldiv@divisor+2,w
  4496  0669  1C03               	skipc
  4497  066A  0F4D               	incfsz	___aldiv@divisor+2,w
  4498  066B  02D1               	subwf	___aldiv@dividend+2,f
  4499  066C  084E               	movf	___aldiv@divisor+3,w
  4500  066D  1C03               	skipc
  4501  066E  0F4E               	incfsz	___aldiv@divisor+3,w
  4502  066F  02D2               	subwf	___aldiv@dividend+3,f
  4503  0670  1456               	bsf	___aldiv@quotient,0
  4504  0671                     l1585:	
  4505  0671  3001               	movlw	1
  4506  0672                     u985:	
  4507  0672  1003               	clrc
  4508  0673  0CCE               	rrf	___aldiv@divisor+3,f
  4509  0674  0CCD               	rrf	___aldiv@divisor+2,f
  4510  0675  0CCC               	rrf	___aldiv@divisor+1,f
  4511  0676  0CCB               	rrf	___aldiv@divisor,f
  4512  0677  3EFF               	addlw	-1
  4513  0678  1D03               	skipz
  4514  0679  2E72               	goto	u985
  4515  067A  3001               	movlw	1
  4516  067B  02D4               	subwf	___aldiv@counter,f
  4517  067C  1D03               	btfss	3,2
  4518  067D  2E49               	goto	l1577
  4519  067E                     l1589:	
  4520  067E  0855               	movf	___aldiv@sign,w
  4521  067F  1903               	btfsc	3,2
  4522  0680  2E8C               	goto	l1593
  4523  0681  09D6               	comf	___aldiv@quotient,f
  4524  0682  09D7               	comf	___aldiv@quotient+1,f
  4525  0683  09D8               	comf	___aldiv@quotient+2,f
  4526  0684  09D9               	comf	___aldiv@quotient+3,f
  4527  0685  0AD6               	incf	___aldiv@quotient,f
  4528  0686  1903               	skipnz
  4529  0687  0AD7               	incf	___aldiv@quotient+1,f
  4530  0688  1903               	skipnz
  4531  0689  0AD8               	incf	___aldiv@quotient+2,f
  4532  068A  1903               	skipnz
  4533  068B  0AD9               	incf	___aldiv@quotient+3,f
  4534  068C                     l1593:	
  4535  068C  0859               	movf	___aldiv@quotient+3,w
  4536  068D  00CE               	movwf	?___aldiv+3
  4537  068E  0858               	movf	___aldiv@quotient+2,w
  4538  068F  00CD               	movwf	?___aldiv+2
  4539  0690  0857               	movf	___aldiv@quotient+1,w
  4540  0691  00CC               	movwf	?___aldiv+1
  4541  0692  0856               	movf	___aldiv@quotient,w
  4542  0693  00CB               	movwf	?___aldiv
  4543  0694  0008               	return
  4544  0695                     __end_of___aldiv:	
  4545                           
  4546                           	psect	text23
  4547  0728                     __ptext23:	
  4548 ;; *************** function _isr *****************
  4549 ;; Defined at:
  4550 ;;		line 26 in file "main.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;		None
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;		None
  4555 ;; Return value:  Size  Location     Type
  4556 ;;                  1    wreg      void 
  4557 ;; Registers used:
  4558 ;;		wreg, status,2, status,0, pclath, cstack
  4559 ;; Tracked objects:
  4560 ;;		On entry : 0/0
  4561 ;;		On exit  : 0/0
  4562 ;;		Unchanged: 0/0
  4563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4564 ;;      Params:         0       0       0       0       0
  4565 ;;      Locals:         0       0       0       0       0
  4566 ;;      Temps:          5       0       0       0       0
  4567 ;;      Totals:         5       0       0       0       0
  4568 ;;Total ram usage:        5 bytes
  4569 ;; Hardware stack levels used:    1
  4570 ;; Hardware stack levels required when called:    1
  4571 ;; This function calls:
  4572 ;;		___lwmod
  4573 ;; This function is called by:
  4574 ;;		Interrupt level 1
  4575 ;; This function uses a non-reentrant model
  4576 ;;
  4577                           
  4578                           
  4579                           ;psect for function _isr
  4580  0728                     _isr:	
  4581                           
  4582                           ;main.c: 28: if(TMR0IF){
  4583  0728  1D0B               	btfss	11,2	;volatile
  4584  0729  2F63               	goto	i1l117
  4585                           
  4586                           ;main.c: 29: TMR0IF = 0;
  4587  072A  110B               	bcf	11,2	;volatile
  4588                           
  4589                           ;main.c: 30: TMR0 = 100;
  4590  072B  3064               	movlw	100
  4591  072C  0081               	movwf	1	;volatile
  4592                           
  4593                           ;main.c: 33: if(time_count % 1 == 0) {
  4594  072D  3001               	movlw	1
  4595  072E  07B0               	addwf	_time_count,f	;volatile
  4596  072F  1803               	skipnc
  4597  0730  0AB1               	incf	_time_count+1,f	;volatile
  4598  0731  3000               	movlw	0
  4599  0732  07B1               	addwf	_time_count+1,f	;volatile
  4600                           
  4601                           ;main.c: 35: RC2 = 1; __nop(); RC2 = 0;;
  4602  0733  1507               	bsf	7,2	;volatile
  4603  0734  0000               	nop
  4604  0735  1283               	bcf	3,5	;RP0=0, select bank0
  4605  0736  1303               	bcf	3,6	;RP1=0, select bank0
  4606  0737  1107               	bcf	7,2	;volatile
  4607                           
  4608                           ;main.c: 36: }
  4609                           ;main.c: 38: if(time_count % 1000 == 0){
  4610  0738  30E8               	movlw	232
  4611  0739  00F0               	movwf	___lwmod@divisor
  4612  073A  3003               	movlw	3
  4613  073B  00F1               	movwf	___lwmod@divisor+1
  4614  073C  0831               	movf	_time_count+1,w	;volatile
  4615  073D  00F3               	movwf	___lwmod@dividend+1
  4616  073E  0830               	movf	_time_count,w	;volatile
  4617  073F  00F2               	movwf	___lwmod@dividend
  4618  0740  120A  158A  2790  120A  118A  	fcall	___lwmod
  4619  0745  0870               	movf	?___lwmod,w
  4620  0746  0471               	iorwf	?___lwmod+1,w
  4621  0747  1D03               	btfss	3,2
  4622  0748  2F4F               	goto	i1l1989
  4623                           
  4624                           ;main.c: 39: RB4 = !RB4;
  4625  0749  3010               	movlw	16
  4626  074A  1283               	bcf	3,5	;RP0=0, select bank0
  4627  074B  1303               	bcf	3,6	;RP1=0, select bank0
  4628  074C  0686               	xorwf	6,f
  4629                           
  4630                           ;main.c: 41: time_count = 0;
  4631  074D  01B0               	clrf	_time_count	;volatile
  4632  074E  01B1               	clrf	_time_count+1	;volatile
  4633  074F                     i1l1989:	
  4634                           
  4635                           ;main.c: 42: }
  4636                           ;main.c: 44: if (!RB0 == 1)
  4637  074F  1283               	bcf	3,5	;RP0=0, select bank0
  4638  0750  1303               	bcf	3,6	;RP1=0, select bank0
  4639  0751  1806               	btfsc	6,0	;volatile
  4640  0752  2F57               	goto	i1l1993
  4641                           
  4642                           ;main.c: 45: PB8Counter++;
  4643  0753  3001               	movlw	1
  4644  0754  00F6               	movwf	??_isr
  4645  0755  0876               	movf	??_isr,w
  4646  0756  07B8               	addwf	_PB8Counter,f
  4647  0757                     i1l1993:	
  4648                           
  4649                           ;main.c: 46: if (!RB1 == 1)
  4650  0757  1886               	btfsc	6,1	;volatile
  4651  0758  2F5D               	goto	i1l1997
  4652                           
  4653                           ;main.c: 47: PB7Counter++;
  4654  0759  3001               	movlw	1
  4655  075A  00F6               	movwf	??_isr
  4656  075B  0876               	movf	??_isr,w
  4657  075C  07B7               	addwf	_PB7Counter,f
  4658  075D                     i1l1997:	
  4659                           
  4660                           ;main.c: 48: if (!RB2 == 1)
  4661  075D  1906               	btfsc	6,2	;volatile
  4662  075E  2F63               	goto	i1l117
  4663                           
  4664                           ;main.c: 49: PB6Counter++;
  4665  075F  3001               	movlw	1
  4666  0760  00F6               	movwf	??_isr
  4667  0761  0876               	movf	??_isr,w
  4668  0762  07B6               	addwf	_PB6Counter,f
  4669  0763                     i1l117:	
  4670  0763  087A               	movf	??_isr+4,w
  4671  0764  00FF               	movwf	127
  4672  0765  0879               	movf	??_isr+3,w
  4673  0766  008A               	movwf	10
  4674  0767  0878               	movf	??_isr+2,w
  4675  0768  0084               	movwf	4
  4676  0769  0E77               	swapf	(??_isr+1)^(0+-128),w
  4677  076A  0083               	movwf	3
  4678  076B  0EFE               	swapf	126,f
  4679  076C  0E7E               	swapf	126,w
  4680  076D  0009               	retfie
  4681  076E                     __end_of_isr:	
  4682                           
  4683                           	psect	intentry
  4684  0004                     __pintentry:	
  4685                           ;incstack = 0
  4686                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  4687                           
  4688  0004                     interrupt_function:	
  4689  007E                     saved_w	set	btemp
  4690  0004  00FE               	movwf	btemp
  4691  0005  0E03               	swapf	3,w
  4692  0006  00F7               	movwf	??_isr+1
  4693  0007  0804               	movf	4,w
  4694  0008  00F8               	movwf	??_isr+2
  4695  0009  080A               	movf	10,w
  4696  000A  00F9               	movwf	??_isr+3
  4697  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4698  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4699  000D  087F               	movf	btemp+1,w
  4700  000E  00FA               	movwf	??_isr+4
  4701  000F  120A  118A  2F28   	ljmp	_isr
  4702                           
  4703                           	psect	text24
  4704  0F90                     __ptext24:	
  4705 ;; *************** function ___lwmod *****************
  4706 ;; Defined at:
  4707 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;  divisor         2    0[COMMON] unsigned int 
  4710 ;;  dividend        2    2[COMMON] unsigned int 
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  counter         1    5[COMMON] unsigned char 
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  2    0[COMMON] unsigned int 
  4715 ;; Registers used:
  4716 ;;		wreg, status,2, status,0
  4717 ;; Tracked objects:
  4718 ;;		On entry : 0/0
  4719 ;;		On exit  : 0/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4722 ;;      Params:         4       0       0       0       0
  4723 ;;      Locals:         1       0       0       0       0
  4724 ;;      Temps:          1       0       0       0       0
  4725 ;;      Totals:         6       0       0       0       0
  4726 ;;Total ram usage:        6 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; This function calls:
  4729 ;;		Nothing
  4730 ;; This function is called by:
  4731 ;;		_isr
  4732 ;; This function uses a non-reentrant model
  4733 ;;
  4734                           
  4735                           
  4736                           ;psect for function ___lwmod
  4737  0F90                     ___lwmod:	
  4738                           
  4739                           ;incstack = 0
  4740                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4741  0F90  0870               	movf	___lwmod@divisor,w
  4742  0F91  0471               	iorwf	___lwmod@divisor+1,w
  4743  0F92  1903               	btfsc	3,2
  4744  0F93  2FBD               	goto	i1l1967
  4745  0F94  01F5               	clrf	___lwmod@counter
  4746  0F95  0AF5               	incf	___lwmod@counter,f
  4747  0F96                     i1l1957:	
  4748  0F96  1BF1               	btfsc	___lwmod@divisor+1,7
  4749  0F97  2FA4               	goto	i1l1959
  4750  0F98  3001               	movlw	1
  4751  0F99                     u149_25:	
  4752  0F99  1003               	clrc
  4753  0F9A  0DF0               	rlf	___lwmod@divisor,f
  4754  0F9B  0DF1               	rlf	___lwmod@divisor+1,f
  4755  0F9C  3EFF               	addlw	-1
  4756  0F9D  1D03               	skipz
  4757  0F9E  2F99               	goto	u149_25
  4758  0F9F  3001               	movlw	1
  4759  0FA0  00F4               	movwf	??___lwmod
  4760  0FA1  0874               	movf	??___lwmod,w
  4761  0FA2  07F5               	addwf	___lwmod@counter,f
  4762  0FA3  2F96               	goto	i1l1957
  4763  0FA4                     i1l1959:	
  4764  0FA4  0871               	movf	___lwmod@divisor+1,w
  4765  0FA5  0273               	subwf	___lwmod@dividend+1,w
  4766  0FA6  1D03               	skipz
  4767  0FA7  2FAA               	goto	u151_25
  4768  0FA8  0870               	movf	___lwmod@divisor,w
  4769  0FA9  0272               	subwf	___lwmod@dividend,w
  4770  0FAA                     u151_25:	
  4771  0FAA  1C03               	skipc
  4772  0FAB  2FB2               	goto	i1l1963
  4773  0FAC  0870               	movf	___lwmod@divisor,w
  4774  0FAD  02F2               	subwf	___lwmod@dividend,f
  4775  0FAE  0871               	movf	___lwmod@divisor+1,w
  4776  0FAF  1C03               	skipc
  4777  0FB0  03F3               	decf	___lwmod@dividend+1,f
  4778  0FB1  02F3               	subwf	___lwmod@dividend+1,f
  4779  0FB2                     i1l1963:	
  4780  0FB2  3001               	movlw	1
  4781  0FB3                     u152_25:	
  4782  0FB3  1003               	clrc
  4783  0FB4  0CF1               	rrf	___lwmod@divisor+1,f
  4784  0FB5  0CF0               	rrf	___lwmod@divisor,f
  4785  0FB6  3EFF               	addlw	-1
  4786  0FB7  1D03               	skipz
  4787  0FB8  2FB3               	goto	u152_25
  4788  0FB9  3001               	movlw	1
  4789  0FBA  02F5               	subwf	___lwmod@counter,f
  4790  0FBB  1D03               	btfss	3,2
  4791  0FBC  2FA4               	goto	i1l1959
  4792  0FBD                     i1l1967:	
  4793  0FBD  0873               	movf	___lwmod@dividend+1,w
  4794  0FBE  00F1               	movwf	?___lwmod+1
  4795  0FBF  0872               	movf	___lwmod@dividend,w
  4796  0FC0  00F0               	movwf	?___lwmod
  4797  0FC1  0008               	return
  4798  0FC2                     __end_of___lwmod:	
  4799  007E                     btemp	set	126	;btemp
  4800  007E                     wtemp	set	126
  4801  007E                     wtemp0	set	126
  4802  0080                     wtemp1	set	128
  4803  0082                     wtemp2	set	130
  4804  0084                     wtemp3	set	132
  4805  0086                     wtemp4	set	134
  4806  0088                     wtemp5	set	136
  4807  007F                     wtemp6	set	127
  4808  007E                     ttemp	set	126
  4809  007E                     ttemp0	set	126
  4810  0081                     ttemp1	set	129
  4811  0084                     ttemp2	set	132
  4812  0087                     ttemp3	set	135
  4813  007F                     ttemp4	set	127
  4814  007E                     ltemp	set	126
  4815  007E                     ltemp0	set	126
  4816  0082                     ltemp1	set	130
  4817  0086                     ltemp2	set	134
  4818  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     35      74
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->___lwmod

Critical Paths under _main in BANK0

    _setupLCD->_lcdWriteControl
    _getSensorData->_ser_getch
    _DriveDirect->_ser_putch
    _Drive->_ser_putch
    _ADCMain->_adcConvertMM
    _lcdWriteToDigitBCD->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl
    _adcConvertMM->___aldiv
    ___lwdiv->___wmul
    ___aldiv->___wmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    6433
                                             31 BANK0      4     4      0
                            _ADCMain
                              _Drive
                        _DriveDirect
                      _getSensorData
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
                            _moveCCW
                             _moveCW
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      30
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      22
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _moveCW                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _moveCCW                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _getSensorData                                        7     5      2     430
                                              2 BANK0      7     5      2
                          _ser_getch
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _ser_getch                                            2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DriveDirect                                          4     1      3     587
                                              1 BANK0      4     1      3
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _Drive                                                4     1      3     428
                                              1 BANK0      4     1      3
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCMain                                              0     0      0    4247
                       _adcConvertMM
                             _getADC
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (1) _lcdWriteToDigitBCD                                  12    10      2     599
                                              3 BANK0     12    10      2
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (2) _lcdWriteData                                         3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcdSetCursor                                         1     1      0      45
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getADC                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _adcConvertMM                                        10     8      2    3603
                                             21 BANK0     10     8      2
                            ___aldiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1258
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     904
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     618
                                              6 BANK0     15     7      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  5     5      0     265
                                              6 COMMON     5     5      0
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCMain
     _adcConvertMM
       ___aldiv
         ___wmul (ARG)
       ___lwdiv
         ___wmul (ARG)
       ___wmul
     _getADC
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteToDigitBCD
       _lcdWriteData
   _Drive
     _ser_putch
   _DriveDirect
     _ser_putch
   _getSensorData
     _ser_getch
     _ser_putch
   _lcdSetCursor
     _lcdWriteControl
   _lcdWriteToDigitBCD
     _lcdWriteData
   _moveCCW
   _moveCW
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)
   ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     23      4A       5       92.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       E       1      100.0%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      58      12        0.0%
ABS                  0      0      58       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Sep 08 17:56:48 2016

               ??_getSensorData 0049                     __CFG_CP$OFF 0000                              _GO 00FA  
                            fsr 0004             ___wmul@multiplicand 0047                     Drive@speedH 0049  
                   Drive@speedL 0046                             l213 05EC                             l322 0E67  
                           l328 0E5A                             l259 07F8                             l620 0618  
                           l455 0777                             l464 07B2                             l565 0F00  
                           _GIE 005F                             _RB0 0030                             _RB1 0031  
                           _RB2 0032                   ??_DriveDirect 0049                             _RC2 003A  
                           _RB4 0034                             _RE0 0048                             _RE1 0049  
                           _RE2 004A                    __CFG_CPD$OFF 0000                             u945 063D  
                           u965 064B                             u885 0F01                             u975 0660  
                           u895 0F08                             u985 0672                             _isr 0728  
               __end_of_ADCMain 0EF4                             fsr0 0004                             indf 0000  
                  __CFG_FOSC$HS 0000                  ??_lcdWriteData 0045                    __CFG_LVP$OFF 0000  
                          l2101 0559                            l2021 03E0                            l2103 0564  
                          l2031 03F6                            l2051 0441                            l2043 0424  
                          l2053 0442                            l2039 0413                            l2081 04D7  
                          l2065 045F                            l2049 042B                            l2083 04F7  
                          l2067 0498                            l2093 050B                            l2077 04C3  
                          l2069 04A3                            l1615 0FF0                            l1607 0FCC  
                          l1711 0166                            l2095 0544                            l1609 0FDA  
                          l1545 0EF8                            l1705 00FF                            l1641 057D  
                          l1619 0FFB                            l1723 01E4                            l1643 0593  
                          l1741 02A1                            l1717 01A5                            l1653 05B7  
                          l1901 06F0                            l1575 0639                            l1567 0629  
                          l1735 0262                            l1655 05BF                            l1647 05A1  
                          l1593 068C                            l1585 0671                            l1577 0649  
                          l1753 031F                            l1729 0223                            l1665 05DF  
                          l1649 05A9                            l1921 0701                            l1913 06F6  
                          l1905 06F2                            l1841 06A3                            l1763 036A  
                          l1747 02E0                            l1691 07A5                            l1659 05CD  
                          l1835 069C                            l1589 067E                            l1685 0787  
                          l1917 06FD                            l1909 06F4                            l1925 0704  
                          l1861 06AD                            l1853 06A9                            l1845 06A5  
                          l1837 06A1                            l1759 035C                            l1687 0791  
                          l1935 07D5                            l1927 071E                            l1871 06BC  
                          l1689 079B                            l1937 07D6                            l1865 06B2  
                          l1857 06AB                            l1849 06A7                            l1873 06D6  
                          l1699 0098                            l1867 06B9                            l1893 06EC  
                          l1897 06EE                            l1889 06EA                            ?_isr 0070  
                          u1025 0FCF                            u1220 00DD                            u1045 0FDB  
                          u1221 00DE                            u1222 00E3                            u1055 0FE7  
                          u1223 00E4                            u1065 0FF1                            u1250 0144  
                          u1251 0145                            u1252 014A                            u1253 014B  
                          u1190 0076                            u1191 0077                            u1192 007C  
                          u1193 007D                            u1615 03F4                            u1705 0516  
                          u1625 0408                            u1715 0557                            u1635 0422  
                          u1645 0431                            u1807 0E8D                            u1817 0EA0  
                          u1665 046A                            u1737 0375                            u1747 03A4  
                          u1685 04C1                            u1757 03B9                            u1695 04E2  
                          u1767 03CE                            u1777 0EB9                            u1787 06DA  
                          _PEIE 005E                            u1797 0722                            _RCIF 0065  
                          _TMR0 0001                            _TRMT 04C1                    __CFG_WRT$OFF 0000  
                          _radH 003F                            _radL 0040                            _main 036D  
                          _loop 002A                            btemp 007E                            ltemp 007E  
                          start 0012                            ttemp 007E                            wtemp 007E  
                         ??_isr 0076                 __end_of___aldiv 0695                           ?_main 0070  
                 __CFG_WDTE$OFF 0000                 __end_of___lwdiv 1000                           i1l117 0763  
               __end_of___lwmod 0FC2                   _totalDistTrav 0032                           _RCREG 001A  
                         _RCSTA 0018                           _SPBRG 0099                           _PORTA 0005  
                         _PORTC 0007                           _PORTD 0008                           _PORTE 0009  
                         _TRISA 0085                           _TRISB 0086                           _TRISC 0087  
                         _TRISD 0088                           _TRISE 0089                           _SSPIF 0063  
                         _TXREG 0019                           _TXSTA 0098                           _Drive 0F17  
    __end_of_lcdWriteToDigitBCD 0606                           _count 003C             __end_of_DriveDirect 0F67  
               __end_of_moveCCW 0728                  __pbitbssCOMMON 03E8                  __CFG_BOREN$OFF 0000  
                         pclath 000A                           ltemp0 007E                           ltemp1 0082  
                         ltemp2 0086                           ltemp3 0080                      _LeftSpeedH 0034  
                    _LeftSpeedL 0035                           ttemp0 007E                           ttemp1 0081  
                         ttemp2 0084                           ttemp3 0087                           ttemp4 007F  
                         status 0003                           wtemp0 007E                           wtemp1 0080  
                         wtemp2 0082                           wtemp3 0084                           wtemp4 0086  
                         wtemp5 0088                           wtemp6 007F          DriveDirect@RightSpeedH 0049  
        DriveDirect@RightSpeedL 0046                 __initialization 0015                    __end_of_main 056F  
                     ??_ADCMain 0064        __size_of_lcdWriteControl 0014                          ??_main 0064  
          __end_of_lcdSetCursor 0E5A                          ?_Drive 0046                          _ADCON0 001F  
                        _ADCON1 009F                          _ADRESH 001E                          _ADRESL 009E  
                        i1l1963 0FB2                          i1l1957 0F96                          i1l1959 0FA4  
                        i1l1967 0FBD                          i1l1993 0757                          i1l1997 075D  
                        i1l1989 074F                          u151_25 0FAA                          u152_25 0FB3  
                        u149_25 0F99                          _TMR0IE 005D                          _TMR0IF 005A  
                        _SSPCON 0014                          _SSPBUF 0013                  __CFG_PWRTE$OFF 0000  
                        _adcRAW 0022                       ??___aldiv 0053                          ___wmul 0EF4  
                        _getADC 076E            __end_of_lcdWriteData 0E92                       ??___lwdiv 004F  
                     ??___lwmod 0074                          _moveCW 0695                          _speedH 0041  
                        _speedL 0042                          _rxbyte 007C                     _DriveDirect 0F3F  
              __end_of_ser_init 0E7F                __end_of_setupADC 0EBC                       ??_moveCCW 0045  
              __end_of_setupLCD 0F90                __end_of_setupSPI 0ED4                          saved_w 007E  
                    _adcClosest 0068         __end_of__initialization 002B                   __end_of_Drive 0F3F  
                __pcstackCOMMON 0070                    __pidataBANK0 0E47                         ??_Drive 0049  
             ??_lcdWriteControl 0045                      __pbssBANK0 0020             lcdSetCursor@address 0048  
                    __pmaintext 036D                         ?___wmul 0045                         ?_getADC 0070  
                    __pintentry 0004           __size_of_lcdSetCursor 0009                         _ADCMain 0ED4  
         __end_of_getSensorData 07F1                         ?_moveCW 0070              __size_of_ser_getch 000A  
            __size_of_ser_putch 000C                     _RightSpeedH 0039                     _RightSpeedL 003A  
                       _SSPSTAT 0094           __size_of_lcdWriteData 0013                    _lcdSetCursor 0E51  
            _lcdWriteToDigitBCD 056F                       ?_ser_init 0070                       ?_setupADC 0070  
                     ?_setupLCD 0070                       ?_setupSPI 0070                         ___aldiv 0606  
               __size_of___wmul 0023                 __size_of_getADC 0045                         ___lwdiv 0FC2  
                       ___lwmod 0F90             ?_lcdWriteToDigitBCD 0048                         _degrees 0026  
               __size_of_moveCW 004B                         __ptext1 07F1                         __ptext2 0EBC  
                       __ptext3 0F67                         __ptext4 0EA6                         __ptext5 0E70  
                       __ptext6 0695                         __ptext7 06E0                         __ptext8 07B3  
                       __ptext9 0E5A                    __size_of_isr 0046                         _lowByte 003D  
                       _moveCCW 06E0                ___aldiv@dividend 004F                         clrloop0 0E4A  
                  _lcdWriteData 0E7F            end_of_initialization 002B            ??_lcdWriteToDigitBCD 004A  
             __end_of_ser_getch 0E64               __end_of_ser_putch 0E70                      ??_ser_init 0045  
                    ??_setupADC 0045                      ??_setupLCD 0048                      ??_setupSPI 0045  
              ___aldiv@quotient 0056                      _time_count 0030                    ?_DriveDirect 0046  
            adcConvertMM@adcRAW 005A                       Drive@radH 0047                       Drive@radL 0048  
                 ?_spi_transfer 0070                 ser_getch@rxbyte 0046                   ?_adcConvertMM 005A  
               _lcdWriteControl 0E92                  __end_of___wmul 0F17                  __end_of_getADC 07B3  
                __end_of_moveCW 06E0             start_initialization 0015                     __end_of_isr 076E  
                ??_spi_transfer 0045                  ??_adcConvertMM 005C                        ??___wmul 0049  
                      ??_getADC 0045                     __pdataBANK0 0068                        ?_ADCMain 0070  
                      ??_moveCW 0045                    _negativeFlag 003E                     _FLAG_1000MS 03E8  
                   __pbssCOMMON 007B                       ___latbits 0002                   __pcstackBANK0 0045  
       __end_of_lcdWriteControl 0EA6                ___lwdiv@dividend 004D                     _angleTurned 0024  
                      ?___aldiv 004B               __size_of_ser_init 000F                        ?___lwdiv 004B  
                      ?___lwmod 0070               __size_of_setupADC 0016               __size_of_setupLCD 0029  
             __size_of_setupSPI 0018                        ?_moveCCW 0070                  __size_of_Drive 0028  
          __size_of_DriveDirect 0028                ___lwdiv@quotient 0050                 main@controlByte 0067  
       lcdWriteControl@databyte 0047                 ___aldiv@divisor 004B               interrupt_function 0004  
               ___aldiv@counter 0054          __size_of_getSensorData 003E                  ___wmul@product 0049  
                    ser_putch@c 0045           getSensorData@packetID 004D                       clear_ram0 0E49  
                     _ser_getch 0E5A                       _ser_putch 0E64                       _stepCount 0043  
              __size_of_ADCMain 0020            __end_of_spi_transfer 0800               ___wmul@multiplier 0045  
              spi_transfer@data 0047                spi_transfer@temp 0046            __end_of_adcConvertMM 036D  
                   _controlByte 003B                        _Distance 0020            lcdWriteData@databyte 0047  
   __size_of_lcdWriteToDigitBCD 0097                      ?_ser_getch 0070                ?_lcdWriteControl 0070  
                    ?_ser_putch 0070                __size_of___aldiv 008F                __size_of___lwdiv 003E  
              __size_of___lwmod 0032                   _getSensorData 07B3                     _currentStep 007B  
lcdWriteToDigitBCD@TenThouDigit 0050                 ___lwdiv@divisor 004B                __size_of_moveCCW 0048  
               ___lwdiv@counter 0052                        __ptext10 0F3F                        __ptext11 0F17  
                      __ptext20 0EF4                        __ptext12 0E64                        __ptext21 0FC2  
                      __ptext13 0ED4                        __ptext22 0606                        __ptext14 056F  
                      __ptext23 0728                        __ptext15 0E7F                        __ptext24 0F90  
                      __ptext16 0E51                        __ptext17 0E92                        __ptext18 076E  
                      __ptext19 002F                        _highByte 0044                        _distTrav 0028  
                 __size_of_main 0202                        _ser_init 0E70                      _PB6Counter 0036  
                      _setupADC 0EA6                        _setupLCD 0F67                        _setupSPI 0EBC  
                    _PB7Counter 0037     lcdWriteToDigitBCD@HunsDigit 004C                      _PB8Counter 0038  
   lcdWriteToDigitBCD@OnesDigit 0052                  ?_getSensorData 0047     lcdWriteToDigitBCD@TensDigit 004A  
   lcdWriteToDigitBCD@ThouDigit 004E                        intlevel1 0000                ___lwmod@dividend 0072  
                 ?_lcdSetCursor 0070                     ??_ser_getch 0045                     ??_ser_putch 0045  
           getSensorData@sensor 004B           __size_of_spi_transfer 000F           __size_of_adcConvertMM 033E  
                    _OPTION_REG 0081                 ___lwmod@divisor 0070                 ___lwmod@counter 0075  
                  ___aldiv@sign 0055              getSensorData@bytes 0047                   ?_lcdWriteData 0070  
        lcdWriteToDigitBCD@data 0048                    _spi_transfer 07F1                  ??_lcdSetCursor 0048  
                  _stepCountNeg 002E                     _stepClosest 002C           DriveDirect@LeftSpeedH 0047  
         DriveDirect@LeftSpeedL 0048                    _adcConvertMM 002F  
