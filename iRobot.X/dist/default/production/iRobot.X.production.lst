

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Sep 12 14:46:04 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     	;# 
    41  0001                     	;# 
    42  0002                     	;# 
    43  0003                     	;# 
    44  0004                     	;# 
    45  0005                     	;# 
    46  0006                     	;# 
    47  0007                     	;# 
    48  0008                     	;# 
    49  0009                     	;# 
    50  000A                     	;# 
    51  000B                     	;# 
    52  000C                     	;# 
    53  000D                     	;# 
    54  000E                     	;# 
    55  000E                     	;# 
    56  000F                     	;# 
    57  0010                     	;# 
    58  0011                     	;# 
    59  0012                     	;# 
    60  0013                     	;# 
    61  0014                     	;# 
    62  0015                     	;# 
    63  0015                     	;# 
    64  0016                     	;# 
    65  0017                     	;# 
    66  0018                     	;# 
    67  0019                     	;# 
    68  001A                     	;# 
    69  001B                     	;# 
    70  001B                     	;# 
    71  001C                     	;# 
    72  001D                     	;# 
    73  001E                     	;# 
    74  001F                     	;# 
    75  0081                     	;# 
    76  0085                     	;# 
    77  0086                     	;# 
    78  0087                     	;# 
    79  0088                     	;# 
    80  0089                     	;# 
    81  008C                     	;# 
    82  008D                     	;# 
    83  008E                     	;# 
    84  0091                     	;# 
    85  0092                     	;# 
    86  0093                     	;# 
    87  0094                     	;# 
    88  0098                     	;# 
    89  0099                     	;# 
    90  009C                     	;# 
    91  009D                     	;# 
    92  009E                     	;# 
    93  009F                     	;# 
    94  010C                     	;# 
    95  010D                     	;# 
    96  010E                     	;# 
    97  010F                     	;# 
    98  018C                     	;# 
    99  018D                     	;# 
   100  0000                     	;# 
   101  0001                     	;# 
   102  0002                     	;# 
   103  0003                     	;# 
   104  0004                     	;# 
   105  0005                     	;# 
   106  0006                     	;# 
   107  0007                     	;# 
   108  0008                     	;# 
   109  0009                     	;# 
   110  000A                     	;# 
   111  000B                     	;# 
   112  000C                     	;# 
   113  000D                     	;# 
   114  000E                     	;# 
   115  000E                     	;# 
   116  000F                     	;# 
   117  0010                     	;# 
   118  0011                     	;# 
   119  0012                     	;# 
   120  0013                     	;# 
   121  0014                     	;# 
   122  0015                     	;# 
   123  0015                     	;# 
   124  0016                     	;# 
   125  0017                     	;# 
   126  0018                     	;# 
   127  0019                     	;# 
   128  001A                     	;# 
   129  001B                     	;# 
   130  001B                     	;# 
   131  001C                     	;# 
   132  001D                     	;# 
   133  001E                     	;# 
   134  001F                     	;# 
   135  0081                     	;# 
   136  0085                     	;# 
   137  0086                     	;# 
   138  0087                     	;# 
   139  0088                     	;# 
   140  0089                     	;# 
   141  008C                     	;# 
   142  008D                     	;# 
   143  008E                     	;# 
   144  0091                     	;# 
   145  0092                     	;# 
   146  0093                     	;# 
   147  0094                     	;# 
   148  0098                     	;# 
   149  0099                     	;# 
   150  009C                     	;# 
   151  009D                     	;# 
   152  009E                     	;# 
   153  009F                     	;# 
   154  010C                     	;# 
   155  010D                     	;# 
   156  010E                     	;# 
   157  010F                     	;# 
   158  018C                     	;# 
   159  018D                     	;# 
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0006                     	;# 
   167  0007                     	;# 
   168  0008                     	;# 
   169  0009                     	;# 
   170  000A                     	;# 
   171  000B                     	;# 
   172  000C                     	;# 
   173  000D                     	;# 
   174  000E                     	;# 
   175  000E                     	;# 
   176  000F                     	;# 
   177  0010                     	;# 
   178  0011                     	;# 
   179  0012                     	;# 
   180  0013                     	;# 
   181  0014                     	;# 
   182  0015                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0017                     	;# 
   186  0018                     	;# 
   187  0019                     	;# 
   188  001A                     	;# 
   189  001B                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  001D                     	;# 
   193  001E                     	;# 
   194  001F                     	;# 
   195  0081                     	;# 
   196  0085                     	;# 
   197  0086                     	;# 
   198  0087                     	;# 
   199  0088                     	;# 
   200  0089                     	;# 
   201  008C                     	;# 
   202  008D                     	;# 
   203  008E                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0093                     	;# 
   207  0094                     	;# 
   208  0098                     	;# 
   209  0099                     	;# 
   210  009C                     	;# 
   211  009D                     	;# 
   212  009E                     	;# 
   213  009F                     	;# 
   214  010C                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  010F                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220  0000                     	;# 
   221  0001                     	;# 
   222  0002                     	;# 
   223  0003                     	;# 
   224  0004                     	;# 
   225  0005                     	;# 
   226  0006                     	;# 
   227  0007                     	;# 
   228  0008                     	;# 
   229  0009                     	;# 
   230  000A                     	;# 
   231  000B                     	;# 
   232  000C                     	;# 
   233  000D                     	;# 
   234  000E                     	;# 
   235  000E                     	;# 
   236  000F                     	;# 
   237  0010                     	;# 
   238  0011                     	;# 
   239  0012                     	;# 
   240  0013                     	;# 
   241  0014                     	;# 
   242  0015                     	;# 
   243  0015                     	;# 
   244  0016                     	;# 
   245  0017                     	;# 
   246  0018                     	;# 
   247  0019                     	;# 
   248  001A                     	;# 
   249  001B                     	;# 
   250  001B                     	;# 
   251  001C                     	;# 
   252  001D                     	;# 
   253  001E                     	;# 
   254  001F                     	;# 
   255  0081                     	;# 
   256  0085                     	;# 
   257  0086                     	;# 
   258  0087                     	;# 
   259  0088                     	;# 
   260  0089                     	;# 
   261  008C                     	;# 
   262  008D                     	;# 
   263  008E                     	;# 
   264  0091                     	;# 
   265  0092                     	;# 
   266  0093                     	;# 
   267  0094                     	;# 
   268  0098                     	;# 
   269  0099                     	;# 
   270  009C                     	;# 
   271  009D                     	;# 
   272  009E                     	;# 
   273  009F                     	;# 
   274  010C                     	;# 
   275  010D                     	;# 
   276  010E                     	;# 
   277  010F                     	;# 
   278  018C                     	;# 
   279  018D                     	;# 
   280  0000                     	;# 
   281  0001                     	;# 
   282  0002                     	;# 
   283  0003                     	;# 
   284  0004                     	;# 
   285  0005                     	;# 
   286  0006                     	;# 
   287  0007                     	;# 
   288  0008                     	;# 
   289  0009                     	;# 
   290  000A                     	;# 
   291  000B                     	;# 
   292  000C                     	;# 
   293  000D                     	;# 
   294  000E                     	;# 
   295  000E                     	;# 
   296  000F                     	;# 
   297  0010                     	;# 
   298  0011                     	;# 
   299  0012                     	;# 
   300  0013                     	;# 
   301  0014                     	;# 
   302  0015                     	;# 
   303  0015                     	;# 
   304  0016                     	;# 
   305  0017                     	;# 
   306  0018                     	;# 
   307  0019                     	;# 
   308  001A                     	;# 
   309  001B                     	;# 
   310  001B                     	;# 
   311  001C                     	;# 
   312  001D                     	;# 
   313  001E                     	;# 
   314  001F                     	;# 
   315  0081                     	;# 
   316  0085                     	;# 
   317  0086                     	;# 
   318  0087                     	;# 
   319  0088                     	;# 
   320  0089                     	;# 
   321  008C                     	;# 
   322  008D                     	;# 
   323  008E                     	;# 
   324  0091                     	;# 
   325  0092                     	;# 
   326  0093                     	;# 
   327  0094                     	;# 
   328  0098                     	;# 
   329  0099                     	;# 
   330  009C                     	;# 
   331  009D                     	;# 
   332  009E                     	;# 
   333  009F                     	;# 
   334  010C                     	;# 
   335  010D                     	;# 
   336  010E                     	;# 
   337  010F                     	;# 
   338  018C                     	;# 
   339  018D                     	;# 
   340  0000                     	;# 
   341  0001                     	;# 
   342  0002                     	;# 
   343  0003                     	;# 
   344  0004                     	;# 
   345  0005                     	;# 
   346  0006                     	;# 
   347  0007                     	;# 
   348  0008                     	;# 
   349  0009                     	;# 
   350  000A                     	;# 
   351  000B                     	;# 
   352  000C                     	;# 
   353  000D                     	;# 
   354  000E                     	;# 
   355  000E                     	;# 
   356  000F                     	;# 
   357  0010                     	;# 
   358  0011                     	;# 
   359  0012                     	;# 
   360  0013                     	;# 
   361  0014                     	;# 
   362  0015                     	;# 
   363  0015                     	;# 
   364  0016                     	;# 
   365  0017                     	;# 
   366  0018                     	;# 
   367  0019                     	;# 
   368  001A                     	;# 
   369  001B                     	;# 
   370  001B                     	;# 
   371  001C                     	;# 
   372  001D                     	;# 
   373  001E                     	;# 
   374  001F                     	;# 
   375  0081                     	;# 
   376  0085                     	;# 
   377  0086                     	;# 
   378  0087                     	;# 
   379  0088                     	;# 
   380  0089                     	;# 
   381  008C                     	;# 
   382  008D                     	;# 
   383  008E                     	;# 
   384  0091                     	;# 
   385  0092                     	;# 
   386  0093                     	;# 
   387  0094                     	;# 
   388  0098                     	;# 
   389  0099                     	;# 
   390  009C                     	;# 
   391  009D                     	;# 
   392  009E                     	;# 
   393  009F                     	;# 
   394  010C                     	;# 
   395  010D                     	;# 
   396  010E                     	;# 
   397  010F                     	;# 
   398  018C                     	;# 
   399  018D                     	;# 
   400                           
   401                           	psect	idataBANK0
   402  0DD3                     __pidataBANK0:	
   403                           
   404                           ;initializer for _adcClosest
   405  0DD3  34E8               	retlw	232
   406  0DD4  3403               	retlw	3
   407  001F                     _ADCON0	set	31
   408  0005                     _PORTA	set	5
   409  0007                     _PORTC	set	7
   410  0008                     _PORTD	set	8
   411  0009                     _PORTE	set	9
   412  001A                     _RCREG	set	26
   413  0018                     _RCSTA	set	24
   414  0013                     _SSPBUF	set	19
   415  0014                     _SSPCON	set	20
   416  0001                     _TMR0	set	1
   417  0019                     _TXREG	set	25
   418  001E                     _ADRESH	set	30
   419  005F                     _GIE	set	95
   420  00FA                     _GO	set	250
   421  005E                     _PEIE	set	94
   422  0030                     _RB0	set	48
   423  0031                     _RB1	set	49
   424  0032                     _RB2	set	50
   425  0034                     _RB4	set	52
   426  003A                     _RC2	set	58
   427  0065                     _RCIF	set	101
   428  0048                     _RE0	set	72
   429  0049                     _RE1	set	73
   430  004A                     _RE2	set	74
   431  0063                     _SSPIF	set	99
   432  005D                     _TMR0IE	set	93
   433  005A                     _TMR0IF	set	90
   434  009F                     _ADCON1	set	159
   435  009E                     _ADRESL	set	158
   436  0081                     _OPTION_REG	set	129
   437  0099                     _SPBRG	set	153
   438  0094                     _SSPSTAT	set	148
   439  0085                     _TRISA	set	133
   440  0086                     _TRISB	set	134
   441  0087                     _TRISC	set	135
   442  0088                     _TRISD	set	136
   443  0089                     _TRISE	set	137
   444  0098                     _TXSTA	set	152
   445  04C1                     _TRMT	set	1217
   446                           
   447                           ; #config settings
   448  0000                     
   449                           	psect	cinit
   450  0015                     start_initialization:	
   451  0015                     __initialization:	
   452                           
   453                           ; Initialize objects allocated to BANK0
   454  0015  120A  158A  25D3  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   455  001A  00EC               	movwf	__pdataBANK0& (0+127)
   456  001B  120A  158A  25D4  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   457  0020  00ED               	movwf	(__pdataBANK0+1)& (0+127)
   458                           
   459                           ; Clear objects allocated to BANK0
   460  0021  1383               	bcf	3,7	;select IRP bank0
   461  0022  3020               	movlw	low __pbssBANK0
   462  0023  0084               	movwf	4
   463  0024  3049               	movlw	low (__pbssBANK0+41)
   464  0025  120A  158A  25D5   	fcall	clear_ram0
   465                           
   466                           ; Clear objects allocated to COMMON
   467  0028  01FB               	clrf	__pbssCOMMON& (0+127)
   468  0029  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   469                           
   470                           ; Clear objects allocated to BITCOMMON
   471  002A  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   472  002B                     end_of_initialization:	
   473                           ;End of C runtime variable initialization code
   474                           
   475  002B                     __end_of__initialization:	
   476  002B  0183               	clrf	3
   477  002C  120A  118A  2B6D   	ljmp	_main	;jump to C main() function
   478                           
   479                           	psect	bitbssCOMMON
   480  03E8                     __pbitbssCOMMON:	
   481  03E8                     _FLAG_1000MS:	
   482  03E8                     	ds	1
   483                           
   484                           	psect	bssCOMMON
   485  007B                     __pbssCOMMON:	
   486  007B                     _currentStep:	
   487  007B                     	ds	1
   488  007C                     _rxbyte:	
   489  007C                     	ds	1
   490                           
   491                           	psect	bssBANK0
   492  0020                     __pbssBANK0:	
   493  0020                     _Distance:	
   494  0020                     	ds	2
   495  0022                     _VelocityLeft:	
   496  0022                     	ds	2
   497  0024                     _VelocityRight:	
   498  0024                     	ds	2
   499  0026                     _adcRAW:	
   500  0026                     	ds	2
   501  0028                     _angleTurned:	
   502  0028                     	ds	2
   503  002A                     _degrees:	
   504  002A                     	ds	2
   505  002C                     _distTrav:	
   506  002C                     	ds	2
   507  002E                     _loop:	
   508  002E                     	ds	2
   509  0030                     _stepClosest:	
   510  0030                     	ds	2
   511  0032                     _stepCountNeg:	
   512  0032                     	ds	2
   513  0034                     _time_count:	
   514  0034                     	ds	2
   515  0036                     _totalDistTrav:	
   516  0036                     	ds	2
   517  0038                     _LeftSpeedH:	
   518  0038                     	ds	1
   519  0039                     _LeftSpeedL:	
   520  0039                     	ds	1
   521  003A                     _PB6Counter:	
   522  003A                     	ds	1
   523  003B                     _PB7Counter:	
   524  003B                     	ds	1
   525  003C                     _PB8Counter:	
   526  003C                     	ds	1
   527  003D                     _RightSpeedH:	
   528  003D                     	ds	1
   529  003E                     _RightSpeedL:	
   530  003E                     	ds	1
   531  003F                     _controlByte:	
   532  003F                     	ds	1
   533  0040                     _count:	
   534  0040                     	ds	1
   535  0041                     _lowByte:	
   536  0041                     	ds	1
   537  0042                     _negativeFlag:	
   538  0042                     	ds	1
   539  0043                     _radH:	
   540  0043                     	ds	1
   541  0044                     _radL:	
   542  0044                     	ds	1
   543  0045                     _speedH:	
   544  0045                     	ds	1
   545  0046                     _speedL:	
   546  0046                     	ds	1
   547  0047                     _stepCount:	
   548  0047                     	ds	1
   549  0048                     _highByte:	
   550  0048                     	ds	1
   551                           
   552                           	psect	dataBANK0
   553  006C                     __pdataBANK0:	
   554  006C                     _adcClosest:	
   555  006C                     	ds	2
   556                           
   557                           	psect	clrtext
   558  0DD5                     clear_ram0:	
   559                           ;	Called with FSR containing the base address, and
   560                           ;	W with the last address+1
   561                           
   562  0DD5  0064               	clrwdt	;clear the watchdog before getting into this loop
   563  0DD6                     clrloop0:	
   564  0DD6  0180               	clrf	0	;clear RAM location pointed to by FSR
   565  0DD7  0A84               	incf	4,f	;increment pointer
   566  0DD8  0604               	xorwf	4,w	;XOR with final address
   567  0DD9  1903               	btfsc	3,2	;have we reached the end yet?
   568  0DDA  3400               	retlw	0	;all done for this memory range, return
   569  0DDB  0604               	xorwf	4,w	;XOR again to restore value
   570  0DDC  2DD6               	goto	clrloop0	;do the next byte
   571                           
   572                           	psect	cstackCOMMON
   573  0070                     __pcstackCOMMON:	
   574  0070                     ?_setupSPI:	
   575  0070                     ?_ser_init:	
   576                           ; 1 bytes @ 0x0
   577                           
   578  0070                     ?_setupLCD:	
   579                           ; 1 bytes @ 0x0
   580                           
   581  0070                     ?_setupADC:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0070                     ?_spi_transfer:	
   585                           ; 1 bytes @ 0x0
   586                           
   587  0070                     ?_ser_putch:	
   588                           ; 1 bytes @ 0x0
   589                           
   590  0070                     ?_moveCCW:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0070                     ?_moveCW:	
   594                           ; 1 bytes @ 0x0
   595                           
   596  0070                     ?_ADCMain:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0070                     ?_lcdSetCursor:	
   600                           ; 1 bytes @ 0x0
   601                           
   602  0070                     ?_isr:	
   603                           ; 1 bytes @ 0x0
   604                           
   605  0070                     ?_main:	
   606                           ; 1 bytes @ 0x0
   607                           
   608  0070                     ?_lcdWriteControl:	
   609                           ; 1 bytes @ 0x0
   610                           
   611  0070                     ?_lcdWriteData:	
   612                           ; 1 bytes @ 0x0
   613                           
   614  0070                     ?_ser_getch:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  0070                     ?_getADC:	
   618                           ; 1 bytes @ 0x0
   619                           
   620  0070                     ?___lwmod:	
   621                           ; 2 bytes @ 0x0
   622                           
   623  0070                     ___lwmod@divisor:	
   624                           ; 2 bytes @ 0x0
   625                           
   626                           
   627                           ; 2 bytes @ 0x0
   628  0070                     	ds	2
   629  0072                     ___lwmod@dividend:	
   630                           
   631                           ; 2 bytes @ 0x2
   632  0072                     	ds	2
   633  0074                     ??___lwmod:	
   634                           
   635                           ; 1 bytes @ 0x4
   636  0074                     	ds	1
   637  0075                     ___lwmod@counter:	
   638                           
   639                           ; 1 bytes @ 0x5
   640  0075                     	ds	1
   641  0076                     ??_isr:	
   642                           
   643                           ; 1 bytes @ 0x6
   644  0076                     	ds	5
   645                           
   646                           	psect	cstackBANK0
   647  0049                     __pcstackBANK0:	
   648  0049                     ??_setupSPI:	
   649  0049                     ??_ser_init:	
   650                           ; 1 bytes @ 0x0
   651                           
   652  0049                     ??_setupADC:	
   653                           ; 1 bytes @ 0x0
   654                           
   655  0049                     ??_spi_transfer:	
   656                           ; 1 bytes @ 0x0
   657                           
   658  0049                     ??_ser_putch:	
   659                           ; 1 bytes @ 0x0
   660                           
   661  0049                     ??_moveCCW:	
   662                           ; 1 bytes @ 0x0
   663                           
   664  0049                     ??_moveCW:	
   665                           ; 1 bytes @ 0x0
   666                           
   667  0049                     ??_getADC:	
   668                           ; 1 bytes @ 0x0
   669                           
   670  0049                     ??_lcdWriteControl:	
   671                           ; 1 bytes @ 0x0
   672                           
   673  0049                     ??_lcdWriteData:	
   674                           ; 1 bytes @ 0x0
   675                           
   676  0049                     ??_ser_getch:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  0049                     ?___wmul:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  0049                     ser_putch@c:	
   683                           ; 2 bytes @ 0x0
   684                           
   685  0049                     ___wmul@multiplier:	
   686                           ; 1 bytes @ 0x0
   687                           
   688                           
   689                           ; 2 bytes @ 0x0
   690  0049                     	ds	1
   691  004A                     ?_DriveDirect:	
   692  004A                     ?_Drive:	
   693                           ; 1 bytes @ 0x1
   694                           
   695  004A                     spi_transfer@temp:	
   696                           ; 1 bytes @ 0x1
   697                           
   698  004A                     ser_getch@rxbyte:	
   699                           ; 1 bytes @ 0x1
   700                           
   701  004A                     Drive@speedL:	
   702                           ; 1 bytes @ 0x1
   703                           
   704  004A                     DriveDirect@VelocityRight:	
   705                           ; 1 bytes @ 0x1
   706                           
   707                           
   708                           ; 2 bytes @ 0x1
   709  004A                     	ds	1
   710  004B                     ?_getSensorData:	
   711  004B                     lcdWriteControl@databyte:	
   712                           ; 2 bytes @ 0x2
   713                           
   714  004B                     lcdWriteData@databyte:	
   715                           ; 1 bytes @ 0x2
   716                           
   717  004B                     spi_transfer@data:	
   718                           ; 1 bytes @ 0x2
   719                           
   720  004B                     Drive@radH:	
   721                           ; 1 bytes @ 0x2
   722                           
   723  004B                     getSensorData@bytes:	
   724                           ; 1 bytes @ 0x2
   725                           
   726  004B                     ___wmul@multiplicand:	
   727                           ; 1 bytes @ 0x2
   728                           
   729                           
   730                           ; 2 bytes @ 0x2
   731  004B                     	ds	1
   732  004C                     ??_setupLCD:	
   733  004C                     ?_lcdWriteToDigitBCD:	
   734                           ; 1 bytes @ 0x3
   735                           
   736  004C                     ??_lcdSetCursor:	
   737                           ; 1 bytes @ 0x3
   738                           
   739  004C                     lcdSetCursor@address:	
   740                           ; 1 bytes @ 0x3
   741                           
   742  004C                     Drive@radL:	
   743                           ; 1 bytes @ 0x3
   744                           
   745  004C                     lcdWriteToDigitBCD@data:	
   746                           ; 1 bytes @ 0x3
   747                           
   748  004C                     DriveDirect@VelocityLeft:	
   749                           ; 2 bytes @ 0x3
   750                           
   751                           
   752                           ; 2 bytes @ 0x3
   753  004C                     	ds	1
   754  004D                     ??_getSensorData:	
   755  004D                     ??_Drive:	
   756                           ; 1 bytes @ 0x4
   757                           
   758  004D                     ??___wmul:	
   759                           ; 1 bytes @ 0x4
   760                           
   761  004D                     Drive@speedH:	
   762                           ; 1 bytes @ 0x4
   763                           
   764  004D                     ___wmul@product:	
   765                           ; 1 bytes @ 0x4
   766                           
   767                           
   768                           ; 2 bytes @ 0x4
   769  004D                     	ds	1
   770  004E                     ??_lcdWriteToDigitBCD:	
   771  004E                     ??_DriveDirect:	
   772                           ; 1 bytes @ 0x5
   773                           
   774  004E                     lcdWriteToDigitBCD@TensDigit:	
   775                           ; 1 bytes @ 0x5
   776                           
   777                           
   778                           ; 2 bytes @ 0x5
   779  004E                     	ds	1
   780  004F                     ?___lwdiv:	
   781  004F                     ?___aldiv:	
   782                           ; 2 bytes @ 0x6
   783                           
   784  004F                     DriveDirect@data:	
   785                           ; 4 bytes @ 0x6
   786                           
   787  004F                     getSensorData@sensor:	
   788                           ; 2 bytes @ 0x6
   789                           
   790  004F                     ___lwdiv@divisor:	
   791                           ; 2 bytes @ 0x6
   792                           
   793  004F                     ___aldiv@divisor:	
   794                           ; 2 bytes @ 0x6
   795                           
   796                           
   797                           ; 4 bytes @ 0x6
   798  004F                     	ds	1
   799  0050                     lcdWriteToDigitBCD@HunsDigit:	
   800                           
   801                           ; 2 bytes @ 0x7
   802  0050                     	ds	1
   803  0051                     getSensorData@packetID:	
   804  0051                     DriveDirect@data_244:	
   805                           ; 1 bytes @ 0x8
   806                           
   807  0051                     ___lwdiv@dividend:	
   808                           ; 2 bytes @ 0x8
   809                           
   810                           
   811                           ; 2 bytes @ 0x8
   812  0051                     	ds	1
   813  0052                     lcdWriteToDigitBCD@ThouDigit:	
   814                           
   815                           ; 2 bytes @ 0x9
   816  0052                     	ds	1
   817  0053                     ??___lwdiv:	
   818  0053                     ___aldiv@dividend:	
   819                           ; 1 bytes @ 0xA
   820                           
   821                           
   822                           ; 4 bytes @ 0xA
   823  0053                     	ds	1
   824  0054                     lcdWriteToDigitBCD@TenThouDigit:	
   825  0054                     ___lwdiv@quotient:	
   826                           ; 2 bytes @ 0xB
   827                           
   828                           
   829                           ; 2 bytes @ 0xB
   830  0054                     	ds	2
   831  0056                     ___lwdiv@counter:	
   832  0056                     lcdWriteToDigitBCD@OnesDigit:	
   833                           ; 1 bytes @ 0xD
   834                           
   835                           
   836                           ; 2 bytes @ 0xD
   837  0056                     	ds	1
   838  0057                     ??___aldiv:	
   839                           
   840                           ; 1 bytes @ 0xE
   841  0057                     	ds	1
   842  0058                     ___aldiv@counter:	
   843                           
   844                           ; 1 bytes @ 0xF
   845  0058                     	ds	1
   846  0059                     ___aldiv@sign:	
   847                           
   848                           ; 1 bytes @ 0x10
   849  0059                     	ds	1
   850  005A                     ___aldiv@quotient:	
   851                           
   852                           ; 4 bytes @ 0x11
   853  005A                     	ds	4
   854  005E                     ?_adcConvertMM:	
   855  005E                     adcConvertMM@adcRAW:	
   856                           ; 2 bytes @ 0x15
   857                           
   858                           
   859                           ; 2 bytes @ 0x15
   860  005E                     	ds	2
   861  0060                     ??_adcConvertMM:	
   862                           
   863                           ; 1 bytes @ 0x17
   864  0060                     	ds	8
   865  0068                     ??_ADCMain:	
   866  0068                     ??_main:	
   867                           ; 1 bytes @ 0x1F
   868                           
   869                           
   870                           ; 1 bytes @ 0x1F
   871  0068                     	ds	3
   872  006B                     main@controlByte:	
   873                           
   874                           ; 1 bytes @ 0x22
   875  006B                     	ds	1
   876                           
   877                           	psect	maintext
   878  036D                     __pmaintext:	
   879 ;;
   880 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   881 ;;
   882 ;; *************** function _main *****************
   883 ;; Defined at:
   884 ;;		line 69 in file "main.c"
   885 ;; Parameters:    Size  Location     Type
   886 ;;		None
   887 ;; Auto vars:     Size  Location     Type
   888 ;;  controlByte     1   34[BANK0 ] unsigned char 
   889 ;; Return value:  Size  Location     Type
   890 ;;                  1    wreg      void 
   891 ;; Registers used:
   892 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   893 ;; Tracked objects:
   894 ;;		On entry : B00/0
   895 ;;		On exit  : 0/0
   896 ;;		Unchanged: 0/0
   897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   898 ;;      Params:         0       0       0       0       0
   899 ;;      Locals:         0       1       0       0       0
   900 ;;      Temps:          0       3       0       0       0
   901 ;;      Totals:         0       4       0       0       0
   902 ;;Total ram usage:        4 bytes
   903 ;; Hardware stack levels required when called:    5
   904 ;; This function calls:
   905 ;;		_ADCMain
   906 ;;		_Drive
   907 ;;		_DriveDirect
   908 ;;		_getSensorData
   909 ;;		_lcdSetCursor
   910 ;;		_lcdWriteToDigitBCD
   911 ;;		_moveCCW
   912 ;;		_moveCW
   913 ;;		_ser_init
   914 ;;		_ser_putch
   915 ;;		_setupADC
   916 ;;		_setupLCD
   917 ;;		_setupSPI
   918 ;;		_spi_transfer
   919 ;; This function is called by:
   920 ;;		Startup code after reset
   921 ;; This function uses a non-reentrant model
   922 ;;
   923                           
   924                           
   925                           ;psect for function _main
   926  036D                     _main:	
   927                           
   928                           ;main.c: 70: _delay((unsigned long)((5000)*(20000000/4000.0)));
   929                           
   930                           ;incstack = 0
   931                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   932  036D  307F               	movlw	127
   933  036E  1283               	bcf	3,5	;RP0=0, select bank0
   934  036F  1303               	bcf	3,6	;RP1=0, select bank0
   935  0370  00EA               	movwf	??_main+2
   936  0371  30D4               	movlw	212
   937  0372  00E9               	movwf	??_main+1
   938  0373  30AE               	movlw	174
   939  0374  00E8               	movwf	??_main
   940  0375                     u1877:	
   941  0375  0BE8               	decfsz	??_main,f
   942  0376  2B75               	goto	u1877
   943  0377  0BE9               	decfsz	??_main+1,f
   944  0378  2B75               	goto	u1877
   945  0379  0BEA               	decfsz	??_main+2,f
   946  037A  2B75               	goto	u1877
   947  037B  2B7C               	nop2
   948                           
   949                           ;main.c: 73: setupSPI();
   950  037C  120A  158A  264D  120A  118A  	fcall	_setupSPI
   951                           
   952                           ;main.c: 74: ser_init();
   953  0381  120A  158A  25F2  120A  118A  	fcall	_ser_init
   954                           
   955                           ;main.c: 75: setupLCD();
   956  0386  120A  158A  26D0  120A  118A  	fcall	_setupLCD
   957                           
   958                           ;main.c: 76: setupADC();
   959  038B  120A  158A  2637  120A  118A  	fcall	_setupADC
   960                           
   961                           ;main.c: 78: unsigned char controlByte = 0b00001101;
   962  0390  300D               	movlw	13
   963  0391  1283               	bcf	3,5	;RP0=0, select bank0
   964  0392  1303               	bcf	3,6	;RP1=0, select bank0
   965  0393  00E8               	movwf	??_main
   966  0394  0868               	movf	??_main,w
   967  0395  00EB               	movwf	main@controlByte
   968                           
   969                           ;main.c: 79: spi_transfer(controlByte);
   970  0396  086B               	movf	main@controlByte,w
   971  0397  120A  158A  2601  120A  118A  	fcall	_spi_transfer
   972                           
   973                           ;main.c: 81: _delay((unsigned long)((1000)*(20000000/4000.0)));
   974  039C  301A               	movlw	26
   975  039D  1283               	bcf	3,5	;RP0=0, select bank0
   976  039E  1303               	bcf	3,6	;RP1=0, select bank0
   977  039F  00EA               	movwf	??_main+2
   978  03A0  305E               	movlw	94
   979  03A1  00E9               	movwf	??_main+1
   980  03A2  3086               	movlw	134
   981  03A3  00E8               	movwf	??_main
   982  03A4                     u1887:	
   983  03A4  0BE8               	decfsz	??_main,f
   984  03A5  2BA4               	goto	u1887
   985  03A6  0BE9               	decfsz	??_main+1,f
   986  03A7  2BA4               	goto	u1887
   987  03A8  0BEA               	decfsz	??_main+2,f
   988  03A9  2BA4               	goto	u1887
   989  03AA  0000               	nop
   990                           
   991                           ;main.c: 82: ser_putch(128);
   992  03AB  3080               	movlw	128
   993  03AC  120A  158A  25E6  120A  118A  	fcall	_ser_putch
   994                           
   995                           ;main.c: 83: _delay((unsigned long)((1000)*(20000000/4000.0)));
   996  03B1  301A               	movlw	26
   997  03B2  1283               	bcf	3,5	;RP0=0, select bank0
   998  03B3  1303               	bcf	3,6	;RP1=0, select bank0
   999  03B4  00EA               	movwf	??_main+2
  1000  03B5  305E               	movlw	94
  1001  03B6  00E9               	movwf	??_main+1
  1002  03B7  3086               	movlw	134
  1003  03B8  00E8               	movwf	??_main
  1004  03B9                     u1897:	
  1005  03B9  0BE8               	decfsz	??_main,f
  1006  03BA  2BB9               	goto	u1897
  1007  03BB  0BE9               	decfsz	??_main+1,f
  1008  03BC  2BB9               	goto	u1897
  1009  03BD  0BEA               	decfsz	??_main+2,f
  1010  03BE  2BB9               	goto	u1897
  1011  03BF  0000               	nop
  1012                           
  1013                           ;main.c: 84: ser_putch(132);
  1014  03C0  3084               	movlw	132
  1015  03C1  120A  158A  25E6  120A  118A  	fcall	_ser_putch
  1016                           
  1017                           ;main.c: 85: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1018  03C6  301A               	movlw	26
  1019  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  1020  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  1021  03C9  00EA               	movwf	??_main+2
  1022  03CA  305E               	movlw	94
  1023  03CB  00E9               	movwf	??_main+1
  1024  03CC  3086               	movlw	134
  1025  03CD  00E8               	movwf	??_main
  1026  03CE                     u1907:	
  1027  03CE  0BE8               	decfsz	??_main,f
  1028  03CF  2BCE               	goto	u1907
  1029  03D0  0BE9               	decfsz	??_main+1,f
  1030  03D1  2BCE               	goto	u1907
  1031  03D2  0BEA               	decfsz	??_main+2,f
  1032  03D3  2BCE               	goto	u1907
  1033  03D4  0000               	nop
  1034                           
  1035                           ;main.c: 86: lcdWriteToDigitBCD(totalDistTrav);
  1036  03D5  1283               	bcf	3,5	;RP0=0, select bank0
  1037  03D6  1303               	bcf	3,6	;RP1=0, select bank0
  1038  03D7  0837               	movf	_totalDistTrav+1,w
  1039  03D8  00CD               	movwf	lcdWriteToDigitBCD@data+1
  1040  03D9  0836               	movf	_totalDistTrav,w
  1041  03DA  00CC               	movwf	lcdWriteToDigitBCD@data
  1042  03DB  120A  118A  257E  120A  118A  	fcall	_lcdWriteToDigitBCD
  1043  03E0                     l2126:	
  1044                           ;main.c: 89: while(1){
  1045                           
  1046                           
  1047                           ;main.c: 94: if (PB8Counter >= 10 && !RB0 == 0){
  1048  03E0  300A               	movlw	10
  1049  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  1050  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  1051  03E3  023C               	subwf	_PB8Counter,w
  1052  03E4  1C03               	skipc
  1053  03E5  2C4D               	goto	l2164
  1054  03E6  1806               	btfsc	6,0	;volatile
  1055  03E7  2BEE               	goto	l2134
  1056  03E8  2C4D               	goto	l2164
  1057  03E9                     l2132:	
  1058                           ;main.c: 96: while (stepCount < 0){
  1059                           
  1060                           
  1061                           ;main.c: 97: moveCCW();
  1062  03E9  120A  118A  277C  120A  118A  	fcall	_moveCCW
  1063  03EE                     l2134:	
  1064  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  1065  03EF  1303               	bcf	3,6	;RP1=0, select bank0
  1066  03F0  1BC7               	btfsc	_stepCount,7
  1067  03F1  2BE9               	goto	l2132
  1068                           
  1069                           ;main.c: 98: }
  1070                           ;main.c: 101: adcClosest = 0;
  1071  03F2  01EC               	clrf	_adcClosest
  1072  03F3  01ED               	clrf	_adcClosest+1
  1073                           
  1074                           ;main.c: 102: for (loop = 0; loop < 400; loop++){
  1075  03F4  01AE               	clrf	_loop
  1076  03F5  01AF               	clrf	_loop+1
  1077  03F6  082F               	movf	_loop+1,w
  1078  03F7  3A80               	xorlw	128
  1079  03F8  00FF               	movwf	127
  1080  03F9  3081               	movlw	129
  1081  03FA  027F               	subwf	127,w
  1082  03FB  1D03               	skipz
  1083  03FC  2BFF               	goto	u1755
  1084  03FD  3090               	movlw	144
  1085  03FE  022E               	subwf	_loop,w
  1086  03FF                     u1755:	
  1087  03FF  1803               	btfsc	3,0
  1088  0400  2C2F               	goto	l2154
  1089  0401                     l2142:	
  1090                           
  1091                           ;main.c: 103: moveCW();
  1092  0401  120A  118A  2731  120A  118A  	fcall	_moveCW
  1093                           
  1094                           ;main.c: 104: ADCMain();
  1095  0406  120A  158A  2665  120A  118A  	fcall	_ADCMain
  1096                           
  1097                           ;main.c: 105: if (adcRAW > adcClosest){
  1098  040B  1283               	bcf	3,5	;RP0=0, select bank0
  1099  040C  1303               	bcf	3,6	;RP1=0, select bank0
  1100  040D  0827               	movf	_adcRAW+1,w	;volatile
  1101  040E  026D               	subwf	_adcClosest+1,w
  1102  040F  1D03               	skipz
  1103  0410  2C13               	goto	u1765
  1104  0411  0826               	movf	_adcRAW,w	;volatile
  1105  0412  026C               	subwf	_adcClosest,w
  1106  0413                     u1765:	
  1107  0413  1803               	skipnc
  1108  0414  2C1E               	goto	l2150
  1109                           
  1110                           ;main.c: 106: adcClosest = adcRAW;
  1111  0415  0827               	movf	_adcRAW+1,w	;volatile
  1112  0416  00ED               	movwf	_adcClosest+1
  1113  0417  0826               	movf	_adcRAW,w	;volatile
  1114  0418  00EC               	movwf	_adcClosest
  1115                           
  1116                           ;main.c: 107: stepClosest = stepCount;
  1117  0419  0847               	movf	_stepCount,w
  1118  041A  00B0               	movwf	_stepClosest
  1119  041B  01B1               	clrf	_stepClosest+1
  1120  041C  1BB0               	btfsc	_stepClosest,7
  1121  041D  03B1               	decf	_stepClosest+1,f
  1122  041E                     l2150:	
  1123  041E  3001               	movlw	1
  1124  041F  07AE               	addwf	_loop,f
  1125  0420  1803               	skipnc
  1126  0421  0AAF               	incf	_loop+1,f
  1127  0422  3000               	movlw	0
  1128  0423  07AF               	addwf	_loop+1,f
  1129  0424  082F               	movf	_loop+1,w
  1130  0425  3A80               	xorlw	128
  1131  0426  00FF               	movwf	127
  1132  0427  3081               	movlw	129
  1133  0428  027F               	subwf	127,w
  1134  0429  1D03               	skipz
  1135  042A  2C2D               	goto	u1775
  1136  042B  3090               	movlw	144
  1137  042C  022E               	subwf	_loop,w
  1138  042D                     u1775:	
  1139  042D  1C03               	skipc
  1140  042E  2C01               	goto	l2142
  1141  042F                     l2154:	
  1142                           
  1143                           ;main.c: 108: }
  1144                           ;main.c: 109: }
  1145                           ;main.c: 111: for (loop = stepCount; loop != stepClosest; loop++){
  1146  042F  1283               	bcf	3,5	;RP0=0, select bank0
  1147  0430  1303               	bcf	3,6	;RP1=0, select bank0
  1148  0431  0847               	movf	_stepCount,w
  1149  0432  00AE               	movwf	_loop
  1150  0433  01AF               	clrf	_loop+1
  1151  0434  1BAE               	btfsc	_loop,7
  1152  0435  03AF               	decf	_loop+1,f
  1153  0436                     l2160:	
  1154  0436  0831               	movf	_stepClosest+1,w
  1155  0437  062F               	xorwf	_loop+1,w
  1156  0438  1D03               	skipz
  1157  0439  2C3C               	goto	u1785
  1158  043A  0830               	movf	_stepClosest,w
  1159  043B  062E               	xorwf	_loop,w
  1160  043C                     u1785:	
  1161  043C  1903               	btfsc	3,2
  1162  043D  2C4C               	goto	l2162
  1163                           
  1164                           ;main.c: 112: moveCCW();
  1165  043E  120A  118A  277C  120A  118A  	fcall	_moveCCW
  1166  0443  3001               	movlw	1
  1167  0444  1283               	bcf	3,5	;RP0=0, select bank0
  1168  0445  1303               	bcf	3,6	;RP1=0, select bank0
  1169  0446  07AE               	addwf	_loop,f
  1170  0447  1803               	skipnc
  1171  0448  0AAF               	incf	_loop+1,f
  1172  0449  3000               	movlw	0
  1173  044A  07AF               	addwf	_loop+1,f
  1174  044B  2C36               	goto	l2160
  1175  044C                     l2162:	
  1176                           
  1177                           ;main.c: 113: }
  1178                           ;main.c: 114: PB8Counter = 0;
  1179  044C  01BC               	clrf	_PB8Counter
  1180  044D                     l2164:	
  1181                           
  1182                           ;main.c: 115: }
  1183                           ;main.c: 120: if (getSensorData(18,1) == 0b00000001){
  1184  044D  01CB               	clrf	getSensorData@bytes
  1185  044E  0ACB               	incf	getSensorData@bytes,f
  1186  044F  3012               	movlw	18
  1187  0450  120A  158A  2737  120A  118A  	fcall	_getSensorData
  1188  0455  1283               	bcf	3,5	;RP0=0, select bank0
  1189  0456  1303               	bcf	3,6	;RP1=0, select bank0
  1190  0457  034B               	decf	?_getSensorData,w
  1191  0458  044C               	iorwf	?_getSensorData+1,w
  1192  0459  1D03               	btfss	3,2
  1193  045A  2CB0               	goto	l135
  1194                           
  1195                           ;main.c: 121: totalDistTrav = 0;
  1196  045B  01B6               	clrf	_totalDistTrav
  1197  045C  01B7               	clrf	_totalDistTrav+1
  1198                           
  1199                           ;main.c: 122: DriveDirect(200,200);
  1200  045D  30C8               	movlw	200
  1201  045E  00CA               	movwf	DriveDirect@VelocityRight
  1202  045F  3000               	movlw	0
  1203  0460  00CB               	movwf	DriveDirect@VelocityRight+1
  1204  0461  30C8               	movlw	200
  1205  0462  00CC               	movwf	DriveDirect@VelocityLeft
  1206  0463  3000               	movlw	0
  1207  0464  00CD               	movwf	DriveDirect@VelocityLeft+1
  1208  0465  120A  118A  26A4  120A  118A  	fcall	_DriveDirect
  1209  046A                     l2178:	
  1210                           ;main.c: 123: while (totalDistTrav < 3000){
  1211                           
  1212  046A  1283               	bcf	3,5	;RP0=0, select bank0
  1213  046B  1303               	bcf	3,6	;RP1=0, select bank0
  1214  046C  0837               	movf	_totalDistTrav+1,w
  1215  046D  3A80               	xorlw	128
  1216  046E  00FF               	movwf	127
  1217  046F  308B               	movlw	139
  1218  0470  027F               	subwf	127,w
  1219  0471  1D03               	skipz
  1220  0472  2C75               	goto	u1805
  1221  0473  30B8               	movlw	184
  1222  0474  0236               	subwf	_totalDistTrav,w
  1223  0475                     u1805:	
  1224  0475  1803               	btfsc	3,0
  1225  0476  2CA3               	goto	l2180
  1226                           
  1227                           ;main.c: 124: distTrav = getSensorData(19,2);
  1228  0477  3002               	movlw	2
  1229  0478  1283               	bcf	3,5	;RP0=0, select bank0
  1230  0479  1303               	bcf	3,6	;RP1=0, select bank0
  1231  047A  00E8               	movwf	??_main
  1232  047B  0868               	movf	??_main,w
  1233  047C  00CB               	movwf	getSensorData@bytes
  1234  047D  3013               	movlw	19
  1235  047E  120A  158A  2737  120A  118A  	fcall	_getSensorData
  1236  0483  1283               	bcf	3,5	;RP0=0, select bank0
  1237  0484  1303               	bcf	3,6	;RP1=0, select bank0
  1238  0485  084C               	movf	?_getSensorData+1,w
  1239  0486  00AD               	movwf	_distTrav+1
  1240  0487  084B               	movf	?_getSensorData,w
  1241  0488  00AC               	movwf	_distTrav
  1242                           
  1243                           ;main.c: 125: totalDistTrav = (totalDistTrav + distTrav);
  1244  0489  082C               	movf	_distTrav,w
  1245  048A  0736               	addwf	_totalDistTrav,w
  1246  048B  00B6               	movwf	_totalDistTrav
  1247  048C  082D               	movf	_distTrav+1,w
  1248  048D  1803               	skipnc
  1249  048E  0A2D               	incf	_distTrav+1,w
  1250  048F  0737               	addwf	_totalDistTrav+1,w
  1251  0490  00B7               	movwf	_totalDistTrav+1
  1252                           
  1253                           ;main.c: 127: lcdSetCursor(0x00);
  1254  0491  3000               	movlw	0
  1255  0492  120A  158A  25DD  120A  118A  	fcall	_lcdSetCursor
  1256                           
  1257                           ;main.c: 128: lcdWriteToDigitBCD(totalDistTrav);
  1258  0497  1283               	bcf	3,5	;RP0=0, select bank0
  1259  0498  1303               	bcf	3,6	;RP1=0, select bank0
  1260  0499  0837               	movf	_totalDistTrav+1,w
  1261  049A  00CD               	movwf	lcdWriteToDigitBCD@data+1
  1262  049B  0836               	movf	_totalDistTrav,w
  1263  049C  00CC               	movwf	lcdWriteToDigitBCD@data
  1264  049D  120A  118A  257E  120A  118A  	fcall	_lcdWriteToDigitBCD
  1265  04A2  2C6A               	goto	l2178
  1266  04A3                     l2180:	
  1267                           
  1268                           ;main.c: 129: }
  1269                           ;main.c: 131: DriveDirect(0,0);
  1270  04A3  3000               	movlw	0
  1271  04A4  1283               	bcf	3,5	;RP0=0, select bank0
  1272  04A5  1303               	bcf	3,6	;RP1=0, select bank0
  1273  04A6  00CA               	movwf	DriveDirect@VelocityRight
  1274  04A7  00CB               	movwf	DriveDirect@VelocityRight+1
  1275  04A8  3000               	movlw	0
  1276  04A9  00CC               	movwf	DriveDirect@VelocityLeft
  1277  04AA  00CD               	movwf	DriveDirect@VelocityLeft+1
  1278  04AB  120A  118A  26A4  120A  118A  	fcall	_DriveDirect
  1279  04B0                     l135:	
  1280                           
  1281                           ;main.c: 133: }
  1282                           ;main.c: 136: if (getSensorData(18,1) == 0b00000100){
  1283  04B0  1283               	bcf	3,5	;RP0=0, select bank0
  1284  04B1  1303               	bcf	3,6	;RP1=0, select bank0
  1285  04B2  01CB               	clrf	getSensorData@bytes
  1286  04B3  0ACB               	incf	getSensorData@bytes,f
  1287  04B4  3012               	movlw	18
  1288  04B5  120A  158A  2737  120A  118A  	fcall	_getSensorData
  1289  04BA  3004               	movlw	4
  1290  04BB  1283               	bcf	3,5	;RP0=0, select bank0
  1291  04BC  1303               	bcf	3,6	;RP1=0, select bank0
  1292  04BD  064B               	xorwf	?_getSensorData,w
  1293  04BE  044C               	iorwf	?_getSensorData+1,w
  1294  04BF  1D03               	btfss	3,2
  1295  04C0  2D73               	goto	l139
  1296                           
  1297                           ;main.c: 137: totalDistTrav = 0;
  1298  04C1  01B6               	clrf	_totalDistTrav
  1299  04C2  01B7               	clrf	_totalDistTrav+1
  1300                           
  1301                           ;main.c: 139: for (loop = 0; loop < 4; loop++){
  1302  04C3  01AE               	clrf	_loop
  1303  04C4  01AF               	clrf	_loop+1
  1304  04C5  082F               	movf	_loop+1,w
  1305  04C6  3A80               	xorlw	128
  1306  04C7  00FF               	movwf	127
  1307  04C8  3080               	movlw	128
  1308  04C9  027F               	subwf	127,w
  1309  04CA  1D03               	skipz
  1310  04CB  2CCE               	goto	u1825
  1311  04CC  3004               	movlw	4
  1312  04CD  022E               	subwf	_loop,w
  1313  04CE                     u1825:	
  1314  04CE  1803               	btfsc	3,0
  1315  04CF  2D66               	goto	l2212
  1316  04D0                     l2188:	
  1317                           
  1318                           ;main.c: 142: Drive(0,250,0xFF,0xFF);
  1319  04D0  30FA               	movlw	250
  1320  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  1321  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  1322  04D3  00E8               	movwf	??_main
  1323  04D4  0868               	movf	??_main,w
  1324  04D5  00CA               	movwf	Drive@speedL
  1325  04D6  30FF               	movlw	255
  1326  04D7  00E9               	movwf	??_main+1
  1327  04D8  0869               	movf	??_main+1,w
  1328  04D9  00CB               	movwf	Drive@radH
  1329  04DA  30FF               	movlw	255
  1330  04DB  00EA               	movwf	??_main+2
  1331  04DC  086A               	movf	??_main+2,w
  1332  04DD  00CC               	movwf	Drive@radL
  1333  04DE  3000               	movlw	0
  1334  04DF  120A  158A  26A8  120A  118A  	fcall	_Drive
  1335  04E4                     l2192:	
  1336                           ;main.c: 143: while (angleTurned > -90){
  1337                           
  1338  04E4  1283               	bcf	3,5	;RP0=0, select bank0
  1339  04E5  1303               	bcf	3,6	;RP1=0, select bank0
  1340  04E6  0829               	movf	_angleTurned+1,w
  1341  04E7  3A80               	xorlw	128
  1342  04E8  00FF               	movwf	127
  1343  04E9  307F               	movlw	127
  1344  04EA  027F               	subwf	127,w
  1345  04EB  1D03               	skipz
  1346  04EC  2CEF               	goto	u1835
  1347  04ED  30A7               	movlw	167
  1348  04EE  0228               	subwf	_angleTurned,w
  1349  04EF                     u1835:	
  1350  04EF  1C03               	btfss	3,0
  1351  04F0  2D04               	goto	l2194
  1352                           
  1353                           ;main.c: 144: angleTurned = getSensorData(20,2);
  1354  04F1  3002               	movlw	2
  1355  04F2  1283               	bcf	3,5	;RP0=0, select bank0
  1356  04F3  1303               	bcf	3,6	;RP1=0, select bank0
  1357  04F4  00E8               	movwf	??_main
  1358  04F5  0868               	movf	??_main,w
  1359  04F6  00CB               	movwf	getSensorData@bytes
  1360  04F7  3014               	movlw	20
  1361  04F8  120A  158A  2737  120A  118A  	fcall	_getSensorData
  1362  04FD  1283               	bcf	3,5	;RP0=0, select bank0
  1363  04FE  1303               	bcf	3,6	;RP1=0, select bank0
  1364  04FF  084C               	movf	?_getSensorData+1,w
  1365  0500  00A9               	movwf	_angleTurned+1
  1366  0501  084B               	movf	?_getSensorData,w
  1367  0502  00A8               	movwf	_angleTurned
  1368  0503  2CE4               	goto	l2192
  1369  0504                     l2194:	
  1370                           
  1371                           ;main.c: 145: }
  1372                           ;main.c: 148: Drive(0,250,0x7F,0xFF);
  1373  0504  30FA               	movlw	250
  1374  0505  1283               	bcf	3,5	;RP0=0, select bank0
  1375  0506  1303               	bcf	3,6	;RP1=0, select bank0
  1376  0507  00E8               	movwf	??_main
  1377  0508  0868               	movf	??_main,w
  1378  0509  00CA               	movwf	Drive@speedL
  1379  050A  307F               	movlw	127
  1380  050B  00E9               	movwf	??_main+1
  1381  050C  0869               	movf	??_main+1,w
  1382  050D  00CB               	movwf	Drive@radH
  1383  050E  30FF               	movlw	255
  1384  050F  00EA               	movwf	??_main+2
  1385  0510  086A               	movf	??_main+2,w
  1386  0511  00CC               	movwf	Drive@radL
  1387  0512  3000               	movlw	0
  1388  0513  120A  158A  26A8  120A  118A  	fcall	_Drive
  1389  0518                     l2204:	
  1390                           ;main.c: 149: while (totalDistTrav < 1000){
  1391                           
  1392  0518  1283               	bcf	3,5	;RP0=0, select bank0
  1393  0519  1303               	bcf	3,6	;RP1=0, select bank0
  1394  051A  0837               	movf	_totalDistTrav+1,w
  1395  051B  3A80               	xorlw	128
  1396  051C  00FF               	movwf	127
  1397  051D  3083               	movlw	131
  1398  051E  027F               	subwf	127,w
  1399  051F  1D03               	skipz
  1400  0520  2D23               	goto	u1845
  1401  0521  30E8               	movlw	232
  1402  0522  0236               	subwf	_totalDistTrav,w
  1403  0523                     u1845:	
  1404  0523  1803               	btfsc	3,0
  1405  0524  2D51               	goto	l2206
  1406                           
  1407                           ;main.c: 150: distTrav = getSensorData(19,2);
  1408  0525  3002               	movlw	2
  1409  0526  1283               	bcf	3,5	;RP0=0, select bank0
  1410  0527  1303               	bcf	3,6	;RP1=0, select bank0
  1411  0528  00E8               	movwf	??_main
  1412  0529  0868               	movf	??_main,w
  1413  052A  00CB               	movwf	getSensorData@bytes
  1414  052B  3013               	movlw	19
  1415  052C  120A  158A  2737  120A  118A  	fcall	_getSensorData
  1416  0531  1283               	bcf	3,5	;RP0=0, select bank0
  1417  0532  1303               	bcf	3,6	;RP1=0, select bank0
  1418  0533  084C               	movf	?_getSensorData+1,w
  1419  0534  00AD               	movwf	_distTrav+1
  1420  0535  084B               	movf	?_getSensorData,w
  1421  0536  00AC               	movwf	_distTrav
  1422                           
  1423                           ;main.c: 151: totalDistTrav = (totalDistTrav + distTrav);
  1424  0537  082C               	movf	_distTrav,w
  1425  0538  0736               	addwf	_totalDistTrav,w
  1426  0539  00B6               	movwf	_totalDistTrav
  1427  053A  082D               	movf	_distTrav+1,w
  1428  053B  1803               	skipnc
  1429  053C  0A2D               	incf	_distTrav+1,w
  1430  053D  0737               	addwf	_totalDistTrav+1,w
  1431  053E  00B7               	movwf	_totalDistTrav+1
  1432                           
  1433                           ;main.c: 153: lcdSetCursor(0x00);
  1434  053F  3000               	movlw	0
  1435  0540  120A  158A  25DD  120A  118A  	fcall	_lcdSetCursor
  1436                           
  1437                           ;main.c: 154: lcdWriteToDigitBCD(totalDistTrav);
  1438  0545  1283               	bcf	3,5	;RP0=0, select bank0
  1439  0546  1303               	bcf	3,6	;RP1=0, select bank0
  1440  0547  0837               	movf	_totalDistTrav+1,w
  1441  0548  00CD               	movwf	lcdWriteToDigitBCD@data+1
  1442  0549  0836               	movf	_totalDistTrav,w
  1443  054A  00CC               	movwf	lcdWriteToDigitBCD@data
  1444  054B  120A  118A  257E  120A  118A  	fcall	_lcdWriteToDigitBCD
  1445  0550  2D18               	goto	l2204
  1446  0551                     l2206:	
  1447                           
  1448                           ;main.c: 155: }
  1449                           ;main.c: 156: totalDistTrav = 0;
  1450  0551  1283               	bcf	3,5	;RP0=0, select bank0
  1451  0552  1303               	bcf	3,6	;RP1=0, select bank0
  1452  0553  01B6               	clrf	_totalDistTrav
  1453  0554  01B7               	clrf	_totalDistTrav+1
  1454  0555  3001               	movlw	1
  1455  0556  07AE               	addwf	_loop,f
  1456  0557  1803               	skipnc
  1457  0558  0AAF               	incf	_loop+1,f
  1458  0559  3000               	movlw	0
  1459  055A  07AF               	addwf	_loop+1,f
  1460  055B  082F               	movf	_loop+1,w
  1461  055C  3A80               	xorlw	128
  1462  055D  00FF               	movwf	127
  1463  055E  3080               	movlw	128
  1464  055F  027F               	subwf	127,w
  1465  0560  1D03               	skipz
  1466  0561  2D64               	goto	u1855
  1467  0562  3004               	movlw	4
  1468  0563  022E               	subwf	_loop,w
  1469  0564                     u1855:	
  1470  0564  1C03               	skipc
  1471  0565  2CD0               	goto	l2188
  1472  0566                     l2212:	
  1473                           
  1474                           ;main.c: 157: }
  1475                           ;main.c: 159: DriveDirect(0,0);
  1476  0566  3000               	movlw	0
  1477  0567  1283               	bcf	3,5	;RP0=0, select bank0
  1478  0568  1303               	bcf	3,6	;RP1=0, select bank0
  1479  0569  00CA               	movwf	DriveDirect@VelocityRight
  1480  056A  00CB               	movwf	DriveDirect@VelocityRight+1
  1481  056B  3000               	movlw	0
  1482  056C  00CC               	movwf	DriveDirect@VelocityLeft
  1483  056D  00CD               	movwf	DriveDirect@VelocityLeft+1
  1484  056E  120A  118A  26A4  120A  118A  	fcall	_DriveDirect
  1485  0573                     l139:	
  1486                           
  1487                           ;main.c: 161: }
  1488                           ;main.c: 164: if(getSensorData(18,1) == 0b00000101){
  1489  0573  1283               	bcf	3,5	;RP0=0, select bank0
  1490  0574  1303               	bcf	3,6	;RP1=0, select bank0
  1491  0575  01CB               	clrf	getSensorData@bytes
  1492  0576  0ACB               	incf	getSensorData@bytes,f
  1493  0577  3012               	movlw	18
  1494  0578  120A  158A  2737  120A  118A  	fcall	_getSensorData
  1495  057D  2BE0               	goto	l2126
  1496  057E                     __end_of_main:	
  1497                           
  1498                           	psect	text1
  1499  0E01                     __ptext1:	
  1500 ;; *************** function _spi_transfer *****************
  1501 ;; Defined at:
  1502 ;;		line 23 in file "SPI.c"
  1503 ;; Parameters:    Size  Location     Type
  1504 ;;  data            1    wreg     unsigned char 
  1505 ;; Auto vars:     Size  Location     Type
  1506 ;;  data            1    2[BANK0 ] unsigned char 
  1507 ;;  temp            1    1[BANK0 ] unsigned char 
  1508 ;; Return value:  Size  Location     Type
  1509 ;;                  1    wreg      unsigned char 
  1510 ;; Registers used:
  1511 ;;		wreg, status,2
  1512 ;; Tracked objects:
  1513 ;;		On entry : 0/0
  1514 ;;		On exit  : 0/0
  1515 ;;		Unchanged: 0/0
  1516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1517 ;;      Params:         0       0       0       0       0
  1518 ;;      Locals:         0       2       0       0       0
  1519 ;;      Temps:          0       1       0       0       0
  1520 ;;      Totals:         0       3       0       0       0
  1521 ;;Total ram usage:        3 bytes
  1522 ;; Hardware stack levels used:    1
  1523 ;; Hardware stack levels required when called:    2
  1524 ;; This function calls:
  1525 ;;		Nothing
  1526 ;; This function is called by:
  1527 ;;		_main
  1528 ;; This function uses a non-reentrant model
  1529 ;;
  1530                           
  1531                           
  1532                           ;psect for function _spi_transfer
  1533  0E01                     _spi_transfer:	
  1534                           
  1535                           ;incstack = 0
  1536                           ; Regs used in _spi_transfer: [wreg+status,2]
  1537                           ;spi_transfer@data stored from wreg
  1538  0E01  1283               	bcf	3,5	;RP0=0, select bank0
  1539  0E02  1303               	bcf	3,6	;RP1=0, select bank0
  1540  0E03  00CB               	movwf	spi_transfer@data
  1541                           
  1542                           ;SPI.c: 24: unsigned char temp = 0;
  1543  0E04  01CA               	clrf	spi_transfer@temp
  1544                           
  1545                           ;SPI.c: 26: SSPIF = 0;
  1546  0E05  118C               	bcf	12,3	;volatile
  1547                           
  1548                           ;SPI.c: 27: SSPBUF = data;
  1549  0E06  084B               	movf	spi_transfer@data,w
  1550  0E07  0093               	movwf	19	;volatile
  1551  0E08                     l266:	
  1552                           ;SPI.c: 29: while (SSPIF == 0);
  1553                           
  1554  0E08  1D8C               	btfss	12,3	;volatile
  1555  0E09  2E08               	goto	l266
  1556                           
  1557                           ;SPI.c: 30: temp = SSPBUF;
  1558  0E0A  0813               	movf	19,w	;volatile
  1559  0E0B  00C9               	movwf	??_spi_transfer
  1560  0E0C  0849               	movf	??_spi_transfer,w
  1561  0E0D  00CA               	movwf	spi_transfer@temp
  1562                           
  1563                           ;SPI.c: 31: SSPIF = 0;
  1564  0E0E  118C               	bcf	12,3	;volatile
  1565  0E0F  0008               	return
  1566  0E10                     __end_of_spi_transfer:	
  1567                           ;SPI.c: 33: return temp;
  1568                           ;	Return value of _spi_transfer is never used
  1569                           
  1570                           
  1571                           	psect	text2
  1572  0E4D                     __ptext2:	
  1573 ;; *************** function _setupSPI *****************
  1574 ;; Defined at:
  1575 ;;		line 4 in file "SPI.c"
  1576 ;; Parameters:    Size  Location     Type
  1577 ;;		None
  1578 ;; Auto vars:     Size  Location     Type
  1579 ;;		None
  1580 ;; Return value:  Size  Location     Type
  1581 ;;                  1    wreg      void 
  1582 ;; Registers used:
  1583 ;;		wreg, status,2
  1584 ;; Tracked objects:
  1585 ;;		On entry : 0/0
  1586 ;;		On exit  : 0/0
  1587 ;;		Unchanged: 0/0
  1588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1589 ;;      Params:         0       0       0       0       0
  1590 ;;      Locals:         0       0       0       0       0
  1591 ;;      Temps:          0       0       0       0       0
  1592 ;;      Totals:         0       0       0       0       0
  1593 ;;Total ram usage:        0 bytes
  1594 ;; Hardware stack levels used:    1
  1595 ;; Hardware stack levels required when called:    2
  1596 ;; This function calls:
  1597 ;;		Nothing
  1598 ;; This function is called by:
  1599 ;;		_main
  1600 ;; This function uses a non-reentrant model
  1601 ;;
  1602                           
  1603                           
  1604                           ;psect for function _setupSPI
  1605  0E4D                     _setupSPI:	
  1606                           
  1607                           ;SPI.c: 6: TRISB = 0b00000000;
  1608                           
  1609                           ;incstack = 0
  1610                           ; Regs used in _setupSPI: [wreg+status,2]
  1611  0E4D  1683               	bsf	3,5	;RP0=1, select bank1
  1612  0E4E  1303               	bcf	3,6	;RP1=0, select bank1
  1613  0E4F  0186               	clrf	6	;volatile
  1614                           
  1615                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  1616  0E50  3040               	movlw	64
  1617  0E51  0094               	movwf	20	;volatile
  1618                           
  1619                           ;SPI.c: 9: SSPCON = 0b00100000;
  1620  0E52  3020               	movlw	32
  1621  0E53  1283               	bcf	3,5	;RP0=0, select bank0
  1622  0E54  1303               	bcf	3,6	;RP1=0, select bank0
  1623  0E55  0094               	movwf	20	;volatile
  1624                           
  1625                           ;SPI.c: 10: TRISC = 0b11010000;
  1626  0E56  30D0               	movlw	208
  1627  0E57  1683               	bsf	3,5	;RP0=1, select bank1
  1628  0E58  1303               	bcf	3,6	;RP1=0, select bank1
  1629  0E59  0087               	movwf	7	;volatile
  1630                           
  1631                           ;SPI.c: 11: PORTC = 0b00000011;
  1632  0E5A  3003               	movlw	3
  1633  0E5B  1283               	bcf	3,5	;RP0=0, select bank0
  1634  0E5C  1303               	bcf	3,6	;RP1=0, select bank0
  1635  0E5D  0087               	movwf	7	;volatile
  1636                           
  1637                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  1638  0E5E  3004               	movlw	4
  1639  0E5F  1683               	bsf	3,5	;RP0=1, select bank1
  1640  0E60  1303               	bcf	3,6	;RP1=0, select bank1
  1641  0E61  0081               	movwf	1	;volatile
  1642                           
  1643                           ;SPI.c: 16: TMR0IE = 1;
  1644  0E62  168B               	bsf	11,5	;volatile
  1645                           
  1646                           ;SPI.c: 19: (GIE = 1);
  1647  0E63  178B               	bsf	11,7	;volatile
  1648  0E64  0008               	return
  1649  0E65                     __end_of_setupSPI:	
  1650                           
  1651                           	psect	text3
  1652  0ED0                     __ptext3:	
  1653 ;; *************** function _setupLCD *****************
  1654 ;; Defined at:
  1655 ;;		line 86 in file "LCD.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;		None
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;		None
  1660 ;; Return value:  Size  Location     Type
  1661 ;;                  1    wreg      void 
  1662 ;; Registers used:
  1663 ;;		wreg, status,2, status,0, pclath, cstack
  1664 ;; Tracked objects:
  1665 ;;		On entry : 0/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1669 ;;      Params:         0       0       0       0       0
  1670 ;;      Locals:         0       0       0       0       0
  1671 ;;      Temps:          0       0       0       0       0
  1672 ;;      Totals:         0       0       0       0       0
  1673 ;;Total ram usage:        0 bytes
  1674 ;; Hardware stack levels used:    1
  1675 ;; Hardware stack levels required when called:    3
  1676 ;; This function calls:
  1677 ;;		_lcdWriteControl
  1678 ;; This function is called by:
  1679 ;;		_main
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683                           
  1684                           ;psect for function _setupLCD
  1685  0ED0                     _setupLCD:	
  1686                           
  1687                           ;LCD.c: 88: ADCON1 = 0b00000010;
  1688                           
  1689                           ;incstack = 0
  1690                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  1691  0ED0  3002               	movlw	2
  1692  0ED1  1683               	bsf	3,5	;RP0=1, select bank1
  1693  0ED2  1303               	bcf	3,6	;RP1=0, select bank1
  1694  0ED3  009F               	movwf	31	;volatile
  1695                           
  1696                           ;LCD.c: 90: PORTD = 0;
  1697  0ED4  1283               	bcf	3,5	;RP0=0, select bank0
  1698  0ED5  1303               	bcf	3,6	;RP1=0, select bank0
  1699  0ED6  0188               	clrf	8	;volatile
  1700                           
  1701                           ;LCD.c: 91: PORTE = 0;
  1702  0ED7  0189               	clrf	9	;volatile
  1703                           
  1704                           ;LCD.c: 93: TRISD = 0b00000000;
  1705  0ED8  1683               	bsf	3,5	;RP0=1, select bank1
  1706  0ED9  1303               	bcf	3,6	;RP1=0, select bank1
  1707  0EDA  0188               	clrf	8	;volatile
  1708                           
  1709                           ;LCD.c: 94: TRISE = 0b00000000;
  1710  0EDB  0189               	clrf	9	;volatile
  1711                           
  1712                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  1713  0EDC  3001               	movlw	1
  1714  0EDD  120A  158A  2623  120A  158A  	fcall	_lcdWriteControl
  1715                           
  1716                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  1717  0EE2  3038               	movlw	56
  1718  0EE3  120A  158A  2623  120A  158A  	fcall	_lcdWriteControl
  1719                           
  1720                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  1721  0EE8  300C               	movlw	12
  1722  0EE9  120A  158A  2623  120A  158A  	fcall	_lcdWriteControl
  1723                           
  1724                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  1725  0EEE  3006               	movlw	6
  1726  0EEF  120A  158A  2623  120A  158A  	fcall	_lcdWriteControl
  1727                           
  1728                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  1729  0EF4  3002               	movlw	2
  1730  0EF5  120A  158A  2623   	fcall	_lcdWriteControl
  1731  0EF8  0008               	return
  1732  0EF9                     __end_of_setupLCD:	
  1733                           
  1734                           	psect	text4
  1735  0E37                     __ptext4:	
  1736 ;; *************** function _setupADC *****************
  1737 ;; Defined at:
  1738 ;;		line 8 in file "ADC.c"
  1739 ;; Parameters:    Size  Location     Type
  1740 ;;		None
  1741 ;; Auto vars:     Size  Location     Type
  1742 ;;		None
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  1    wreg      void 
  1745 ;; Registers used:
  1746 ;;		wreg, status,2
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1752 ;;      Params:         0       0       0       0       0
  1753 ;;      Locals:         0       0       0       0       0
  1754 ;;      Temps:          0       1       0       0       0
  1755 ;;      Totals:         0       1       0       0       0
  1756 ;;Total ram usage:        1 bytes
  1757 ;; Hardware stack levels used:    1
  1758 ;; Hardware stack levels required when called:    2
  1759 ;; This function calls:
  1760 ;;		Nothing
  1761 ;; This function is called by:
  1762 ;;		_main
  1763 ;; This function uses a non-reentrant model
  1764 ;;
  1765                           
  1766                           
  1767                           ;psect for function _setupADC
  1768  0E37                     _setupADC:	
  1769                           
  1770                           ;ADC.c: 9: PORTA = 0;
  1771                           
  1772                           ;incstack = 0
  1773                           ; Regs used in _setupADC: [wreg+status,2]
  1774  0E37  1283               	bcf	3,5	;RP0=0, select bank0
  1775  0E38  1303               	bcf	3,6	;RP1=0, select bank0
  1776  0E39  0185               	clrf	5	;volatile
  1777                           
  1778                           ;ADC.c: 10: TRISA = 0b11111111;
  1779  0E3A  30FF               	movlw	255
  1780  0E3B  1683               	bsf	3,5	;RP0=1, select bank1
  1781  0E3C  1303               	bcf	3,6	;RP1=0, select bank1
  1782  0E3D  0085               	movwf	5	;volatile
  1783                           
  1784                           ;ADC.c: 13: ADCON0 = 0b10001001;
  1785  0E3E  3089               	movlw	137
  1786  0E3F  1283               	bcf	3,5	;RP0=0, select bank0
  1787  0E40  1303               	bcf	3,6	;RP1=0, select bank0
  1788  0E41  009F               	movwf	31	;volatile
  1789                           
  1790                           ;ADC.c: 14: ADCON1 = 0b00000010;
  1791  0E42  3002               	movlw	2
  1792  0E43  1683               	bsf	3,5	;RP0=1, select bank1
  1793  0E44  1303               	bcf	3,6	;RP1=0, select bank1
  1794  0E45  009F               	movwf	31	;volatile
  1795                           
  1796                           ;ADC.c: 16: _delay((unsigned long)((50)*(20000000/4000000.0)));
  1797  0E46  3053               	movlw	83
  1798  0E47  1283               	bcf	3,5	;RP0=0, select bank0
  1799  0E48  1303               	bcf	3,6	;RP1=0, select bank0
  1800  0E49  00C9               	movwf	??_setupADC
  1801  0E4A                     u1917:	
  1802  0E4A  0BC9               	decfsz	??_setupADC,f
  1803  0E4B  2E4A               	goto	u1917
  1804  0E4C  0008               	return
  1805  0E4D                     __end_of_setupADC:	
  1806                           
  1807                           	psect	text5
  1808  0DF2                     __ptext5:	
  1809 ;; *************** function _ser_init *****************
  1810 ;; Defined at:
  1811 ;;		line 5 in file "ser.c"
  1812 ;; Parameters:    Size  Location     Type
  1813 ;;		None
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;		None
  1816 ;; Return value:  Size  Location     Type
  1817 ;;                  1    wreg      void 
  1818 ;; Registers used:
  1819 ;;		wreg
  1820 ;; Tracked objects:
  1821 ;;		On entry : 0/0
  1822 ;;		On exit  : 0/0
  1823 ;;		Unchanged: 0/0
  1824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1825 ;;      Params:         0       0       0       0       0
  1826 ;;      Locals:         0       0       0       0       0
  1827 ;;      Temps:          0       0       0       0       0
  1828 ;;      Totals:         0       0       0       0       0
  1829 ;;Total ram usage:        0 bytes
  1830 ;; Hardware stack levels used:    1
  1831 ;; Hardware stack levels required when called:    2
  1832 ;; This function calls:
  1833 ;;		Nothing
  1834 ;; This function is called by:
  1835 ;;		_main
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839                           
  1840                           ;psect for function _ser_init
  1841  0DF2                     _ser_init:	
  1842                           
  1843                           ;ser.c: 7: TXSTA = 0b00100100;
  1844                           
  1845                           ;incstack = 0
  1846                           ; Regs used in _ser_init: [wreg]
  1847  0DF2  3024               	movlw	36
  1848  0DF3  1683               	bsf	3,5	;RP0=1, select bank1
  1849  0DF4  1303               	bcf	3,6	;RP1=0, select bank1
  1850  0DF5  0098               	movwf	24	;volatile
  1851                           
  1852                           ;ser.c: 8: RCSTA = 0b10011000;
  1853  0DF6  3098               	movlw	152
  1854  0DF7  1283               	bcf	3,5	;RP0=0, select bank0
  1855  0DF8  1303               	bcf	3,6	;RP1=0, select bank0
  1856  0DF9  0098               	movwf	24	;volatile
  1857                           
  1858                           ;ser.c: 24: SPBRG = 20;
  1859  0DFA  3014               	movlw	20
  1860  0DFB  1683               	bsf	3,5	;RP0=1, select bank1
  1861  0DFC  1303               	bcf	3,6	;RP1=0, select bank1
  1862  0DFD  0099               	movwf	25	;volatile
  1863                           
  1864                           ;ser.c: 26: PEIE = 1;
  1865  0DFE  170B               	bsf	11,6	;volatile
  1866                           
  1867                           ;ser.c: 27: (GIE = 1);
  1868  0DFF  178B               	bsf	11,7	;volatile
  1869  0E00  0008               	return
  1870  0E01                     __end_of_ser_init:	
  1871                           
  1872                           	psect	text6
  1873  0731                     __ptext6:	
  1874 ;; *************** function _moveCW *****************
  1875 ;; Defined at:
  1876 ;;		line 5 in file "motor.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;		None
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;		None
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  1    wreg      void 
  1883 ;; Registers used:
  1884 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1890 ;;      Params:         0       0       0       0       0
  1891 ;;      Locals:         0       0       0       0       0
  1892 ;;      Temps:          0       2       0       0       0
  1893 ;;      Totals:         0       2       0       0       0
  1894 ;;Total ram usage:        2 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:    2
  1897 ;; This function calls:
  1898 ;;		Nothing
  1899 ;; This function is called by:
  1900 ;;		_main
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           
  1905                           ;psect for function _moveCW
  1906  0731                     _moveCW:	
  1907                           
  1908                           ;motor.c: 8: if (stepCount == 0) negativeFlag = 1;
  1909                           
  1910                           ;incstack = 0
  1911                           ; Regs used in _moveCW: [wreg-fsr0h+status,2+status,0]
  1912  0731  1283               	bcf	3,5	;RP0=0, select bank0
  1913  0732  1303               	bcf	3,6	;RP1=0, select bank0
  1914  0733  0847               	movf	_stepCount,w
  1915  0734  1D03               	btfss	3,2
  1916  0735  2F38               	goto	l1944
  1917  0736  01C2               	clrf	_negativeFlag
  1918  0737  0AC2               	incf	_negativeFlag,f
  1919  0738                     l1944:	
  1920                           
  1921                           ;motor.c: 10: stepCount--;
  1922  0738  30FF               	movlw	255
  1923  0739  00C9               	movwf	??_moveCW
  1924  073A  0849               	movf	??_moveCW,w
  1925  073B  07C7               	addwf	_stepCount,f
  1926                           
  1927                           ;motor.c: 13: switch(currentStep){
  1928  073C  2F58               	goto	l1980
  1929  073D                     l1946:	
  1930                           ;motor.c: 15: case 7: PORTC = 0b00011011;
  1931                           
  1932  073D  301B               	movlw	27
  1933  073E  2F4A               	goto	L1
  1934  073F                     l1950:	
  1935                           ;motor.c: 19: case 6: PORTC = 0b00010111;
  1936                           
  1937                           ;motor.c: 17: break;
  1938                           
  1939                           ;motor.c: 16: currentStep--;
  1940                           
  1941  073F  3017               	movlw	23
  1942  0740  2F4A               	goto	L1
  1943  0741                     l1954:	
  1944                           ;motor.c: 23: case 5: PORTC = 0b00110101;
  1945                           
  1946                           ;motor.c: 21: break;
  1947                           
  1948                           ;motor.c: 20: currentStep--;
  1949                           
  1950  0741  3035               	movlw	53
  1951  0742  2F4A               	goto	L1
  1952  0743                     l1958:	
  1953                           ;motor.c: 27: case 4: PORTC = 0b00100111;
  1954                           
  1955                           ;motor.c: 25: break;
  1956                           
  1957                           ;motor.c: 24: currentStep--;
  1958                           
  1959  0743  3027               	movlw	39
  1960  0744  2F4A               	goto	L1
  1961  0745                     l1962:	
  1962                           ;motor.c: 31: case 3: PORTC = 0b00101011;
  1963                           
  1964                           ;motor.c: 29: break;
  1965                           
  1966                           ;motor.c: 28: currentStep--;
  1967                           
  1968  0745  302B               	movlw	43
  1969  0746  2F4A               	goto	L1
  1970  0747                     l1966:	
  1971                           ;motor.c: 35: case 2: PORTC = 0b00101110;
  1972                           
  1973                           ;motor.c: 33: break;
  1974                           
  1975                           ;motor.c: 32: currentStep--;
  1976                           
  1977  0747  302E               	movlw	46
  1978  0748  2F4A               	goto	L1
  1979  0749                     l1970:	
  1980                           ;motor.c: 39: case 1: PORTC = 0b00111100;
  1981                           
  1982                           ;motor.c: 37: break;
  1983                           
  1984                           ;motor.c: 36: currentStep--;
  1985                           
  1986  0749  303C               	movlw	60
  1987  074A                     L1:	
  1988  074A  0087               	movwf	7	;volatile
  1989                           
  1990                           ;motor.c: 40: currentStep--;
  1991  074B  3001               	movlw	1
  1992  074C  02FB               	subwf	_currentStep,f
  1993                           
  1994                           ;motor.c: 41: break;
  1995  074D  2F72               	goto	l1982
  1996  074E                     l1974:	
  1997                           ;motor.c: 43: case 0: PORTC = 0b00011110;
  1998                           
  1999  074E  301E               	movlw	30
  2000  074F  0087               	movwf	7	;volatile
  2001                           
  2002                           ;motor.c: 44: currentStep = 7;
  2003  0750  3007               	movlw	7
  2004  0751  00C9               	movwf	??_moveCW
  2005  0752  0849               	movf	??_moveCW,w
  2006  0753  00FB               	movwf	_currentStep
  2007                           
  2008                           ;motor.c: 45: break;
  2009  0754  2F72               	goto	l1982
  2010  0755                     l1976:	
  2011                           ;motor.c: 47: default: PORTC = 0b00111001;
  2012                           
  2013  0755  3039               	movlw	57
  2014  0756  0087               	movwf	7	;volatile
  2015                           
  2016                           ;motor.c: 49: }
  2017                           
  2018                           ;motor.c: 48: break;
  2019  0757  2F72               	goto	l1982
  2020  0758                     l1980:	
  2021  0758  087B               	movf	_currentStep,w
  2022                           
  2023                           ; Switch size 1, requested type "space"
  2024                           ; Number of cases is 8, Range of values is 0 to 7
  2025                           ; switch strategies available:
  2026                           ; Name         Instructions Cycles
  2027                           ; simple_byte           25    13 (average)
  2028                           ; direct_byte           32     8 (fixed)
  2029                           ; jumptable            260     6 (fixed)
  2030                           ;	Chosen strategy is simple_byte
  2031  0759  3A00               	xorlw	0	; case 0
  2032  075A  1903               	skipnz
  2033  075B  2F4E               	goto	l1974
  2034  075C  3A01               	xorlw	1	; case 1
  2035  075D  1903               	skipnz
  2036  075E  2F49               	goto	l1970
  2037  075F  3A03               	xorlw	3	; case 2
  2038  0760  1903               	skipnz
  2039  0761  2F47               	goto	l1966
  2040  0762  3A01               	xorlw	1	; case 3
  2041  0763  1903               	skipnz
  2042  0764  2F45               	goto	l1962
  2043  0765  3A07               	xorlw	7	; case 4
  2044  0766  1903               	skipnz
  2045  0767  2F43               	goto	l1958
  2046  0768  3A01               	xorlw	1	; case 5
  2047  0769  1903               	skipnz
  2048  076A  2F41               	goto	l1954
  2049  076B  3A03               	xorlw	3	; case 6
  2050  076C  1903               	skipnz
  2051  076D  2F3F               	goto	l1950
  2052  076E  3A01               	xorlw	1	; case 7
  2053  076F  1903               	skipnz
  2054  0770  2F3D               	goto	l1946
  2055  0771  2F55               	goto	l1976
  2056  0772                     l1982:	
  2057                           
  2058                           ;motor.c: 51: _delay((unsigned long)((3)*(20000000/4000.0)));
  2059  0772  3014               	movlw	20
  2060  0773  00CA               	movwf	??_moveCW+1
  2061  0774  3079               	movlw	121
  2062  0775  00C9               	movwf	??_moveCW
  2063  0776                     u1927:	
  2064  0776  0BC9               	decfsz	??_moveCW,f
  2065  0777  2F76               	goto	u1927
  2066  0778  0BCA               	decfsz	??_moveCW+1,f
  2067  0779  2F76               	goto	u1927
  2068  077A  2F7B               	nop2
  2069  077B  0008               	return
  2070  077C                     __end_of_moveCW:	
  2071                           
  2072                           	psect	text7
  2073  077C                     __ptext7:	
  2074 ;; *************** function _moveCCW *****************
  2075 ;; Defined at:
  2076 ;;		line 55 in file "motor.c"
  2077 ;; Parameters:    Size  Location     Type
  2078 ;;		None
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;		None
  2081 ;; Return value:  Size  Location     Type
  2082 ;;                  1    wreg      void 
  2083 ;; Registers used:
  2084 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2085 ;; Tracked objects:
  2086 ;;		On entry : 0/0
  2087 ;;		On exit  : 0/0
  2088 ;;		Unchanged: 0/0
  2089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2090 ;;      Params:         0       0       0       0       0
  2091 ;;      Locals:         0       0       0       0       0
  2092 ;;      Temps:          0       2       0       0       0
  2093 ;;      Totals:         0       2       0       0       0
  2094 ;;Total ram usage:        2 bytes
  2095 ;; Hardware stack levels used:    1
  2096 ;; Hardware stack levels required when called:    2
  2097 ;; This function calls:
  2098 ;;		Nothing
  2099 ;; This function is called by:
  2100 ;;		_main
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           
  2105                           ;psect for function _moveCCW
  2106  077C                     _moveCCW:	
  2107                           
  2108                           ;motor.c: 57: if (stepCount == (-1)) negativeFlag = 0;
  2109                           
  2110                           ;incstack = 0
  2111                           ; Regs used in _moveCCW: [wreg-fsr0h+status,2+status,0]
  2112  077C  1283               	bcf	3,5	;RP0=0, select bank0
  2113  077D  1303               	bcf	3,6	;RP1=0, select bank0
  2114  077E  0A47               	incf	_stepCount,w
  2115  077F  1903               	btfsc	3,2
  2116  0780  01C2               	clrf	_negativeFlag
  2117                           
  2118                           ;motor.c: 59: stepCount++;
  2119  0781  3001               	movlw	1
  2120  0782  00C9               	movwf	??_moveCCW
  2121  0783  0849               	movf	??_moveCCW,w
  2122  0784  07C7               	addwf	_stepCount,f
  2123                           
  2124                           ;motor.c: 62: switch(currentStep){
  2125  0785  2FA0               	goto	l1936
  2126  0786                     l1900:	
  2127                           ;motor.c: 63: case 0: PORTC = 0b00101110;
  2128                           
  2129  0786  302E               	movlw	46
  2130  0787  2F93               	goto	L2
  2131  0788                     l1904:	
  2132                           ;motor.c: 67: case 1: PORTC = 0b00101011;
  2133                           
  2134                           ;motor.c: 65: break;
  2135                           
  2136                           ;motor.c: 64: currentStep++;
  2137                           
  2138  0788  302B               	movlw	43
  2139  0789  2F93               	goto	L2
  2140  078A                     l1908:	
  2141                           ;motor.c: 71: case 2: PORTC = 0b00100111;
  2142                           
  2143                           ;motor.c: 69: break;
  2144                           
  2145                           ;motor.c: 68: currentStep++;
  2146                           
  2147  078A  3027               	movlw	39
  2148  078B  2F93               	goto	L2
  2149  078C                     l1912:	
  2150                           ;motor.c: 75: case 3: PORTC = 0b00110101;
  2151                           
  2152                           ;motor.c: 73: break;
  2153                           
  2154                           ;motor.c: 72: currentStep++;
  2155                           
  2156  078C  3035               	movlw	53
  2157  078D  2F93               	goto	L2
  2158  078E                     l1916:	
  2159                           ;motor.c: 79: case 4: PORTC = 0b00010111;
  2160                           
  2161                           ;motor.c: 77: break;
  2162                           
  2163                           ;motor.c: 76: currentStep++;
  2164                           
  2165  078E  3017               	movlw	23
  2166  078F  2F93               	goto	L2
  2167  0790                     l1920:	
  2168                           ;motor.c: 83: case 5: PORTC = 0b00011011;
  2169                           
  2170                           ;motor.c: 81: break;
  2171                           
  2172                           ;motor.c: 80: currentStep++;
  2173                           
  2174  0790  301B               	movlw	27
  2175  0791  2F93               	goto	L2
  2176  0792                     l1924:	
  2177                           ;motor.c: 87: case 6: PORTC = 0b00011110;
  2178                           
  2179                           ;motor.c: 85: break;
  2180                           
  2181                           ;motor.c: 84: currentStep++;
  2182                           
  2183  0792  301E               	movlw	30
  2184  0793                     L2:	
  2185  0793  0087               	movwf	7	;volatile
  2186                           
  2187                           ;motor.c: 88: currentStep++;
  2188  0794  3001               	movlw	1
  2189  0795  00C9               	movwf	??_moveCCW
  2190  0796  0849               	movf	??_moveCCW,w
  2191  0797  07FB               	addwf	_currentStep,f
  2192                           
  2193                           ;motor.c: 89: break;
  2194  0798  2FBA               	goto	l1938
  2195  0799                     l1928:	
  2196                           ;motor.c: 91: case 7: PORTC = 0b00111100;
  2197                           
  2198  0799  303C               	movlw	60
  2199  079A  0087               	movwf	7	;volatile
  2200                           
  2201                           ;motor.c: 92: currentStep = 0;
  2202  079B  01FB               	clrf	_currentStep
  2203                           
  2204                           ;motor.c: 93: break;
  2205  079C  2FBA               	goto	l1938
  2206  079D                     l1932:	
  2207                           ;motor.c: 95: default: PORTC = 0b00111001;
  2208                           
  2209  079D  3039               	movlw	57
  2210  079E  0087               	movwf	7	;volatile
  2211                           
  2212                           ;motor.c: 97: }
  2213                           
  2214                           ;motor.c: 96: break;
  2215  079F  2FBA               	goto	l1938
  2216  07A0                     l1936:	
  2217  07A0  087B               	movf	_currentStep,w
  2218                           
  2219                           ; Switch size 1, requested type "space"
  2220                           ; Number of cases is 8, Range of values is 0 to 7
  2221                           ; switch strategies available:
  2222                           ; Name         Instructions Cycles
  2223                           ; simple_byte           25    13 (average)
  2224                           ; direct_byte           32     8 (fixed)
  2225                           ; jumptable            260     6 (fixed)
  2226                           ;	Chosen strategy is simple_byte
  2227  07A1  3A00               	xorlw	0	; case 0
  2228  07A2  1903               	skipnz
  2229  07A3  2F86               	goto	l1900
  2230  07A4  3A01               	xorlw	1	; case 1
  2231  07A5  1903               	skipnz
  2232  07A6  2F88               	goto	l1904
  2233  07A7  3A03               	xorlw	3	; case 2
  2234  07A8  1903               	skipnz
  2235  07A9  2F8A               	goto	l1908
  2236  07AA  3A01               	xorlw	1	; case 3
  2237  07AB  1903               	skipnz
  2238  07AC  2F8C               	goto	l1912
  2239  07AD  3A07               	xorlw	7	; case 4
  2240  07AE  1903               	skipnz
  2241  07AF  2F8E               	goto	l1916
  2242  07B0  3A01               	xorlw	1	; case 5
  2243  07B1  1903               	skipnz
  2244  07B2  2F90               	goto	l1920
  2245  07B3  3A03               	xorlw	3	; case 6
  2246  07B4  1903               	skipnz
  2247  07B5  2F92               	goto	l1924
  2248  07B6  3A01               	xorlw	1	; case 7
  2249  07B7  1903               	skipnz
  2250  07B8  2F99               	goto	l1928
  2251  07B9  2F9D               	goto	l1932
  2252  07BA                     l1938:	
  2253                           
  2254                           ;motor.c: 99: _delay((unsigned long)((3)*(20000000/4000.0)));
  2255  07BA  3014               	movlw	20
  2256  07BB  00CA               	movwf	??_moveCCW+1
  2257  07BC  3079               	movlw	121
  2258  07BD  00C9               	movwf	??_moveCCW
  2259  07BE                     u1937:	
  2260  07BE  0BC9               	decfsz	??_moveCCW,f
  2261  07BF  2FBE               	goto	u1937
  2262  07C0  0BCA               	decfsz	??_moveCCW+1,f
  2263  07C1  2FBE               	goto	u1937
  2264  07C2  2FC3               	nop2
  2265  07C3  0008               	return
  2266  07C4                     __end_of_moveCCW:	
  2267                           
  2268                           	psect	text8
  2269  0F37                     __ptext8:	
  2270 ;; *************** function _getSensorData *****************
  2271 ;; Defined at:
  2272 ;;		line 85 in file "ser.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;  packetID        1    wreg     unsigned char 
  2275 ;;  bytes           1    2[BANK0 ] unsigned char 
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;  packetID        1    8[BANK0 ] unsigned char 
  2278 ;;  sensor          2    6[BANK0 ] int 
  2279 ;; Return value:  Size  Location     Type
  2280 ;;                  2    2[BANK0 ] int 
  2281 ;; Registers used:
  2282 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2283 ;; Tracked objects:
  2284 ;;		On entry : 0/0
  2285 ;;		On exit  : 0/0
  2286 ;;		Unchanged: 0/0
  2287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2288 ;;      Params:         0       2       0       0       0
  2289 ;;      Locals:         0       3       0       0       0
  2290 ;;      Temps:          0       2       0       0       0
  2291 ;;      Totals:         0       7       0       0       0
  2292 ;;Total ram usage:        7 bytes
  2293 ;; Hardware stack levels used:    1
  2294 ;; Hardware stack levels required when called:    3
  2295 ;; This function calls:
  2296 ;;		_ser_getch
  2297 ;;		_ser_putch
  2298 ;; This function is called by:
  2299 ;;		_main
  2300 ;; This function uses a non-reentrant model
  2301 ;;
  2302                           
  2303                           
  2304                           ;psect for function _getSensorData
  2305  0F37                     _getSensorData:	
  2306                           
  2307                           ;incstack = 0
  2308                           ; Regs used in _getSensorData: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2309                           ;getSensorData@packetID stored from wreg
  2310  0F37  1283               	bcf	3,5	;RP0=0, select bank0
  2311  0F38  1303               	bcf	3,6	;RP1=0, select bank0
  2312  0F39  00D1               	movwf	getSensorData@packetID
  2313                           
  2314                           ;ser.c: 86: ser_putch(142);
  2315  0F3A  308E               	movlw	142
  2316  0F3B  120A  158A  25E6  120A  158A  	fcall	_ser_putch
  2317                           
  2318                           ;ser.c: 87: ser_putch(packetID);
  2319  0F40  1283               	bcf	3,5	;RP0=0, select bank0
  2320  0F41  1303               	bcf	3,6	;RP1=0, select bank0
  2321  0F42  0851               	movf	getSensorData@packetID,w
  2322  0F43  120A  158A  25E6  120A  158A  	fcall	_ser_putch
  2323                           
  2324                           ;ser.c: 89: if (bytes == 2)
  2325  0F48  3002               	movlw	2
  2326  0F49  1283               	bcf	3,5	;RP0=0, select bank0
  2327  0F4A  1303               	bcf	3,6	;RP1=0, select bank0
  2328  0F4B  064B               	xorwf	getSensorData@bytes,w
  2329  0F4C  1D03               	btfss	3,2
  2330  0F4D  2F59               	goto	l1998
  2331                           
  2332                           ;ser.c: 90: highByte = ser_getch();
  2333  0F4E  120A  118A  27F6  120A  158A  	fcall	_ser_getch
  2334  0F53  1283               	bcf	3,5	;RP0=0, select bank0
  2335  0F54  1303               	bcf	3,6	;RP1=0, select bank0
  2336  0F55  00CD               	movwf	??_getSensorData
  2337  0F56  084D               	movf	??_getSensorData,w
  2338  0F57  00C8               	movwf	_highByte
  2339  0F58  2F5A               	goto	l2000
  2340  0F59                     l1998:	
  2341                           
  2342                           ;ser.c: 91: else
  2343                           ;ser.c: 92: highByte = 0;
  2344  0F59  01C8               	clrf	_highByte
  2345  0F5A                     l2000:	
  2346                           
  2347                           ;ser.c: 94: lowByte = ser_getch();
  2348  0F5A  120A  118A  27F6   	fcall	_ser_getch
  2349  0F5D  1283               	bcf	3,5	;RP0=0, select bank0
  2350  0F5E  1303               	bcf	3,6	;RP1=0, select bank0
  2351  0F5F  00CD               	movwf	??_getSensorData
  2352  0F60  084D               	movf	??_getSensorData,w
  2353  0F61  00C1               	movwf	_lowByte
  2354                           
  2355                           ;ser.c: 96: signed int sensor = (256*highByte + lowByte);
  2356  0F62  0848               	movf	_highByte,w
  2357  0F63  00CD               	movwf	??_getSensorData
  2358  0F64  01CE               	clrf	??_getSensorData+1
  2359  0F65  084D               	movf	??_getSensorData,w
  2360  0F66  00CE               	movwf	??_getSensorData+1
  2361  0F67  01CD               	clrf	??_getSensorData
  2362  0F68  0841               	movf	_lowByte,w
  2363  0F69  074D               	addwf	??_getSensorData,w
  2364  0F6A  00CF               	movwf	getSensorData@sensor
  2365  0F6B  3000               	movlw	0
  2366  0F6C  1803               	skipnc
  2367  0F6D  3001               	movlw	1
  2368  0F6E  074E               	addwf	??_getSensorData+1,w
  2369  0F6F  00D0               	movwf	getSensorData@sensor+1
  2370                           
  2371                           ;ser.c: 98: return sensor;
  2372  0F70  0850               	movf	getSensorData@sensor+1,w
  2373  0F71  00CC               	movwf	?_getSensorData+1
  2374  0F72  084F               	movf	getSensorData@sensor,w
  2375  0F73  00CB               	movwf	?_getSensorData
  2376  0F74  0008               	return
  2377  0F75                     __end_of_getSensorData:	
  2378                           
  2379                           	psect	text9
  2380  07F6                     __ptext9:	
  2381 ;; *************** function _ser_getch *****************
  2382 ;; Defined at:
  2383 ;;		line 35 in file "ser.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;		None
  2386 ;; Auto vars:     Size  Location     Type
  2387 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  2388 ;; Return value:  Size  Location     Type
  2389 ;;                  1    wreg      unsigned char 
  2390 ;; Registers used:
  2391 ;;		wreg
  2392 ;; Tracked objects:
  2393 ;;		On entry : 0/0
  2394 ;;		On exit  : 0/0
  2395 ;;		Unchanged: 0/0
  2396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2397 ;;      Params:         0       0       0       0       0
  2398 ;;      Locals:         0       1       0       0       0
  2399 ;;      Temps:          0       1       0       0       0
  2400 ;;      Totals:         0       2       0       0       0
  2401 ;;Total ram usage:        2 bytes
  2402 ;; Hardware stack levels used:    1
  2403 ;; Hardware stack levels required when called:    2
  2404 ;; This function calls:
  2405 ;;		Nothing
  2406 ;; This function is called by:
  2407 ;;		_getSensorData
  2408 ;; This function uses a non-reentrant model
  2409 ;;
  2410                           
  2411                           
  2412                           ;psect for function _ser_getch
  2413  07F6                     _ser_getch:	
  2414  07F6                     l339:	
  2415                           ;ser.c: 36: while(!RCIF);
  2416                           
  2417                           ;incstack = 0
  2418                           ; Regs used in _ser_getch: [wreg]
  2419                           
  2420  07F6  1283               	bcf	3,5	;RP0=0, select bank0
  2421  07F7  1303               	bcf	3,6	;RP1=0, select bank0
  2422  07F8  1E8C               	btfss	12,5	;volatile
  2423  07F9  2FF6               	goto	l339
  2424                           
  2425                           ;ser.c: 37: unsigned char rxbyte = RCREG;
  2426  07FA  081A               	movf	26,w	;volatile
  2427  07FB  00C9               	movwf	??_ser_getch
  2428  07FC  0849               	movf	??_ser_getch,w
  2429  07FD  00CA               	movwf	ser_getch@rxbyte
  2430                           
  2431                           ;ser.c: 38: return rxbyte;
  2432  07FE  084A               	movf	ser_getch@rxbyte,w
  2433  07FF  0008               	return
  2434  0800                     __end_of_ser_getch:	
  2435                           
  2436                           	psect	text10
  2437  06A4                     __ptext10:	
  2438 ;; *************** function _DriveDirect *****************
  2439 ;; Defined at:
  2440 ;;		line 54 in file "ser.c"
  2441 ;; Parameters:    Size  Location     Type
  2442 ;;  VelocityRigh    2    1[BANK0 ] int 
  2443 ;;  VelocityLeft    2    3[BANK0 ] int 
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;  data            2    8[BANK0 ] unsigned int 
  2446 ;;  data            2    6[BANK0 ] unsigned int 
  2447 ;; Return value:  Size  Location     Type
  2448 ;;                  1    wreg      void 
  2449 ;; Registers used:
  2450 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2456 ;;      Params:         0       4       0       0       0
  2457 ;;      Locals:         0       4       0       0       0
  2458 ;;      Temps:          0       1       0       0       0
  2459 ;;      Totals:         0       9       0       0       0
  2460 ;;Total ram usage:        9 bytes
  2461 ;; Hardware stack levels used:    1
  2462 ;; Hardware stack levels required when called:    3
  2463 ;; This function calls:
  2464 ;;		_ser_putch
  2465 ;; This function is called by:
  2466 ;;		_main
  2467 ;; This function uses a non-reentrant model
  2468 ;;
  2469                           
  2470                           
  2471                           ;psect for function _DriveDirect
  2472  06A4                     _DriveDirect:	
  2473                           
  2474                           ;ser.c: 55: RightSpeedH = 0;
  2475                           
  2476                           ;incstack = 0
  2477                           ; Regs used in _DriveDirect: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2478  06A4  1283               	bcf	3,5	;RP0=0, select bank0
  2479  06A5  1303               	bcf	3,6	;RP1=0, select bank0
  2480  06A6  01BD               	clrf	_RightSpeedH
  2481                           
  2482                           ;ser.c: 56: LeftSpeedH = 0;
  2483  06A7  01B8               	clrf	_LeftSpeedH
  2484                           
  2485                           ;ser.c: 58: if(VelocityRight > 255){
  2486  06A8  084B               	movf	DriveDirect@VelocityRight+1,w
  2487  06A9  3A80               	xorlw	128
  2488  06AA  00FF               	movwf	127
  2489  06AB  3081               	movlw	129
  2490  06AC  027F               	subwf	127,w
  2491  06AD  1D03               	skipz
  2492  06AE  2EB1               	goto	u1555
  2493  06AF  3000               	movlw	0
  2494  06B0  024A               	subwf	DriveDirect@VelocityRight,w
  2495  06B1                     u1555:	
  2496  06B1  1C03               	skipc
  2497  06B2  2ED4               	goto	l2024
  2498                           
  2499                           ;ser.c: 59: unsigned int data = VelocityRight;
  2500  06B3  1283               	bcf	3,5	;RP0=0, select bank0
  2501  06B4  1303               	bcf	3,6	;RP1=0, select bank0
  2502  06B5  084B               	movf	DriveDirect@VelocityRight+1,w
  2503  06B6  00D0               	movwf	DriveDirect@data+1
  2504  06B7  084A               	movf	DriveDirect@VelocityRight,w
  2505  06B8  00CF               	movwf	DriveDirect@data
  2506                           
  2507                           ;ser.c: 60: for (RightSpeedH = 0; data > 255; RightSpeedH++){
  2508  06B9  01BD               	clrf	_RightSpeedH
  2509  06BA  3001               	movlw	1
  2510  06BB  0250               	subwf	DriveDirect@data+1,w
  2511  06BC  3000               	movlw	0
  2512  06BD  1903               	skipnz
  2513  06BE  024F               	subwf	DriveDirect@data,w
  2514  06BF  1C03               	btfss	3,0
  2515  06C0  2ED4               	goto	l2024
  2516  06C1                     l2020:	
  2517                           
  2518                           ;ser.c: 61: data = data - 256;
  2519  06C1  084F               	movf	DriveDirect@data,w
  2520  06C2  3E00               	addlw	0
  2521  06C3  00CF               	movwf	DriveDirect@data
  2522  06C4  0850               	movf	DriveDirect@data+1,w
  2523  06C5  1803               	skipnc
  2524  06C6  3E01               	addlw	1
  2525  06C7  3EFF               	addlw	255
  2526  06C8  00D0               	movwf	DriveDirect@data+1
  2527  06C9  3001               	movlw	1
  2528  06CA  00CE               	movwf	??_DriveDirect
  2529  06CB  084E               	movf	??_DriveDirect,w
  2530  06CC  07BD               	addwf	_RightSpeedH,f
  2531  06CD  3001               	movlw	1
  2532  06CE  0250               	subwf	DriveDirect@data+1,w
  2533  06CF  3000               	movlw	0
  2534  06D0  1903               	skipnz
  2535  06D1  024F               	subwf	DriveDirect@data,w
  2536  06D2  1803               	skipnc
  2537  06D3  2EC1               	goto	l2020
  2538  06D4                     l2024:	
  2539                           
  2540                           ;ser.c: 62: }
  2541                           ;ser.c: 63: }
  2542                           ;ser.c: 64: RightSpeedL = VelocityRight;
  2543  06D4  1283               	bcf	3,5	;RP0=0, select bank0
  2544  06D5  1303               	bcf	3,6	;RP1=0, select bank0
  2545  06D6  084A               	movf	DriveDirect@VelocityRight,w
  2546  06D7  00CE               	movwf	??_DriveDirect
  2547  06D8  084E               	movf	??_DriveDirect,w
  2548  06D9  00BE               	movwf	_RightSpeedL
  2549                           
  2550                           ;ser.c: 67: if(VelocityLeft > 255){
  2551  06DA  084D               	movf	DriveDirect@VelocityLeft+1,w
  2552  06DB  3A80               	xorlw	128
  2553  06DC  00FF               	movwf	127
  2554  06DD  3081               	movlw	129
  2555  06DE  027F               	subwf	127,w
  2556  06DF  1D03               	skipz
  2557  06E0  2EE3               	goto	u1585
  2558  06E1  3000               	movlw	0
  2559  06E2  024C               	subwf	DriveDirect@VelocityLeft,w
  2560  06E3                     u1585:	
  2561  06E3  1C03               	skipc
  2562  06E4  2F06               	goto	l2040
  2563                           
  2564                           ;ser.c: 68: unsigned int data = VelocityLeft;
  2565  06E5  1283               	bcf	3,5	;RP0=0, select bank0
  2566  06E6  1303               	bcf	3,6	;RP1=0, select bank0
  2567  06E7  084D               	movf	DriveDirect@VelocityLeft+1,w
  2568  06E8  00D2               	movwf	DriveDirect@data_244+1
  2569  06E9  084C               	movf	DriveDirect@VelocityLeft,w
  2570  06EA  00D1               	movwf	DriveDirect@data_244
  2571                           
  2572                           ;ser.c: 69: for (LeftSpeedH = 0; data > 255; LeftSpeedH++){
  2573  06EB  01B8               	clrf	_LeftSpeedH
  2574  06EC  3001               	movlw	1
  2575  06ED  0252               	subwf	DriveDirect@data_244+1,w
  2576  06EE  3000               	movlw	0
  2577  06EF  1903               	skipnz
  2578  06F0  0251               	subwf	DriveDirect@data_244,w
  2579  06F1  1C03               	btfss	3,0
  2580  06F2  2F06               	goto	l2040
  2581  06F3                     l2036:	
  2582                           
  2583                           ;ser.c: 70: data = data - 256;
  2584  06F3  0851               	movf	DriveDirect@data_244,w
  2585  06F4  3E00               	addlw	0
  2586  06F5  00D1               	movwf	DriveDirect@data_244
  2587  06F6  0852               	movf	DriveDirect@data_244+1,w
  2588  06F7  1803               	skipnc
  2589  06F8  3E01               	addlw	1
  2590  06F9  3EFF               	addlw	255
  2591  06FA  00D2               	movwf	DriveDirect@data_244+1
  2592  06FB  3001               	movlw	1
  2593  06FC  00CE               	movwf	??_DriveDirect
  2594  06FD  084E               	movf	??_DriveDirect,w
  2595  06FE  07B8               	addwf	_LeftSpeedH,f
  2596  06FF  3001               	movlw	1
  2597  0700  0252               	subwf	DriveDirect@data_244+1,w
  2598  0701  3000               	movlw	0
  2599  0702  1903               	skipnz
  2600  0703  0251               	subwf	DriveDirect@data_244,w
  2601  0704  1803               	skipnc
  2602  0705  2EF3               	goto	l2036
  2603  0706                     l2040:	
  2604                           
  2605                           ;ser.c: 71: }
  2606                           ;ser.c: 72: }
  2607                           ;ser.c: 73: LeftSpeedL = VelocityLeft;
  2608  0706  1283               	bcf	3,5	;RP0=0, select bank0
  2609  0707  1303               	bcf	3,6	;RP1=0, select bank0
  2610  0708  084C               	movf	DriveDirect@VelocityLeft,w
  2611  0709  00CE               	movwf	??_DriveDirect
  2612  070A  084E               	movf	??_DriveDirect,w
  2613  070B  00B9               	movwf	_LeftSpeedL
  2614                           
  2615                           ;ser.c: 76: ser_putch(145);
  2616  070C  3091               	movlw	145
  2617  070D  120A  158A  25E6  120A  118A  	fcall	_ser_putch
  2618                           
  2619                           ;ser.c: 77: ser_putch(RightSpeedH);
  2620  0712  1283               	bcf	3,5	;RP0=0, select bank0
  2621  0713  1303               	bcf	3,6	;RP1=0, select bank0
  2622  0714  083D               	movf	_RightSpeedH,w
  2623  0715  120A  158A  25E6  120A  118A  	fcall	_ser_putch
  2624                           
  2625                           ;ser.c: 78: ser_putch(RightSpeedL);
  2626  071A  1283               	bcf	3,5	;RP0=0, select bank0
  2627  071B  1303               	bcf	3,6	;RP1=0, select bank0
  2628  071C  083E               	movf	_RightSpeedL,w
  2629  071D  120A  158A  25E6  120A  118A  	fcall	_ser_putch
  2630                           
  2631                           ;ser.c: 79: ser_putch(LeftSpeedH);
  2632  0722  1283               	bcf	3,5	;RP0=0, select bank0
  2633  0723  1303               	bcf	3,6	;RP1=0, select bank0
  2634  0724  0838               	movf	_LeftSpeedH,w
  2635  0725  120A  158A  25E6  120A  118A  	fcall	_ser_putch
  2636                           
  2637                           ;ser.c: 80: ser_putch(LeftSpeedL);
  2638  072A  1283               	bcf	3,5	;RP0=0, select bank0
  2639  072B  1303               	bcf	3,6	;RP1=0, select bank0
  2640  072C  0839               	movf	_LeftSpeedL,w
  2641  072D  120A  158A  25E6   	fcall	_ser_putch
  2642  0730  0008               	return
  2643  0731                     __end_of_DriveDirect:	
  2644                           
  2645                           	psect	text11
  2646  0EA8                     __ptext11:	
  2647 ;; *************** function _Drive *****************
  2648 ;; Defined at:
  2649 ;;		line 45 in file "ser.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;  speedH          1    wreg     unsigned char 
  2652 ;;  speedL          1    1[BANK0 ] unsigned char 
  2653 ;;  radH            1    2[BANK0 ] unsigned char 
  2654 ;;  radL            1    3[BANK0 ] unsigned char 
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;  speedH          1    4[BANK0 ] unsigned char 
  2657 ;; Return value:  Size  Location     Type
  2658 ;;                  1    wreg      void 
  2659 ;; Registers used:
  2660 ;;		wreg, status,2, status,0, pclath, cstack
  2661 ;; Tracked objects:
  2662 ;;		On entry : 0/0
  2663 ;;		On exit  : 0/0
  2664 ;;		Unchanged: 0/0
  2665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2666 ;;      Params:         0       3       0       0       0
  2667 ;;      Locals:         0       1       0       0       0
  2668 ;;      Temps:          0       0       0       0       0
  2669 ;;      Totals:         0       4       0       0       0
  2670 ;;Total ram usage:        4 bytes
  2671 ;; Hardware stack levels used:    1
  2672 ;; Hardware stack levels required when called:    3
  2673 ;; This function calls:
  2674 ;;		_ser_putch
  2675 ;; This function is called by:
  2676 ;;		_main
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680                           
  2681                           ;psect for function _Drive
  2682  0EA8                     _Drive:	
  2683                           
  2684                           ;incstack = 0
  2685                           ; Regs used in _Drive: [wreg+status,2+status,0+pclath+cstack]
  2686                           ;Drive@speedH stored from wreg
  2687  0EA8  1283               	bcf	3,5	;RP0=0, select bank0
  2688  0EA9  1303               	bcf	3,6	;RP1=0, select bank0
  2689  0EAA  00CD               	movwf	Drive@speedH
  2690                           
  2691                           ;ser.c: 46: ser_putch(137);
  2692  0EAB  3089               	movlw	137
  2693  0EAC  120A  158A  25E6  120A  158A  	fcall	_ser_putch
  2694                           
  2695                           ;ser.c: 47: ser_putch(speedH);
  2696  0EB1  1283               	bcf	3,5	;RP0=0, select bank0
  2697  0EB2  1303               	bcf	3,6	;RP1=0, select bank0
  2698  0EB3  084D               	movf	Drive@speedH,w
  2699  0EB4  120A  158A  25E6  120A  158A  	fcall	_ser_putch
  2700                           
  2701                           ;ser.c: 48: ser_putch(speedL);
  2702  0EB9  1283               	bcf	3,5	;RP0=0, select bank0
  2703  0EBA  1303               	bcf	3,6	;RP1=0, select bank0
  2704  0EBB  084A               	movf	Drive@speedL,w
  2705  0EBC  120A  158A  25E6  120A  158A  	fcall	_ser_putch
  2706                           
  2707                           ;ser.c: 49: ser_putch(radH);
  2708  0EC1  1283               	bcf	3,5	;RP0=0, select bank0
  2709  0EC2  1303               	bcf	3,6	;RP1=0, select bank0
  2710  0EC3  084B               	movf	Drive@radH,w
  2711  0EC4  120A  158A  25E6  120A  158A  	fcall	_ser_putch
  2712                           
  2713                           ;ser.c: 50: ser_putch(radL);
  2714  0EC9  1283               	bcf	3,5	;RP0=0, select bank0
  2715  0ECA  1303               	bcf	3,6	;RP1=0, select bank0
  2716  0ECB  084C               	movf	Drive@radL,w
  2717  0ECC  120A  158A  25E6   	fcall	_ser_putch
  2718  0ECF  0008               	return
  2719  0ED0                     __end_of_Drive:	
  2720                           
  2721                           	psect	text12
  2722  0DE6                     __ptext12:	
  2723 ;; *************** function _ser_putch *****************
  2724 ;; Defined at:
  2725 ;;		line 30 in file "ser.c"
  2726 ;; Parameters:    Size  Location     Type
  2727 ;;  c               1    wreg     unsigned char 
  2728 ;; Auto vars:     Size  Location     Type
  2729 ;;  c               1    0[BANK0 ] unsigned char 
  2730 ;; Return value:  Size  Location     Type
  2731 ;;                  1    wreg      void 
  2732 ;; Registers used:
  2733 ;;		wreg
  2734 ;; Tracked objects:
  2735 ;;		On entry : 0/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2739 ;;      Params:         0       0       0       0       0
  2740 ;;      Locals:         0       1       0       0       0
  2741 ;;      Temps:          0       0       0       0       0
  2742 ;;      Totals:         0       1       0       0       0
  2743 ;;Total ram usage:        1 bytes
  2744 ;; Hardware stack levels used:    1
  2745 ;; Hardware stack levels required when called:    2
  2746 ;; This function calls:
  2747 ;;		Nothing
  2748 ;; This function is called by:
  2749 ;;		_main
  2750 ;;		_Drive
  2751 ;;		_DriveDirect
  2752 ;;		_getSensorData
  2753 ;; This function uses a non-reentrant model
  2754 ;;
  2755                           
  2756                           
  2757                           ;psect for function _ser_putch
  2758  0DE6                     _ser_putch:	
  2759                           
  2760                           ;incstack = 0
  2761                           ; Regs used in _ser_putch: [wreg]
  2762                           ;ser_putch@c stored from wreg
  2763  0DE6  1283               	bcf	3,5	;RP0=0, select bank0
  2764  0DE7  1303               	bcf	3,6	;RP1=0, select bank0
  2765  0DE8  00C9               	movwf	ser_putch@c
  2766  0DE9                     l333:	
  2767                           ;ser.c: 31: while(!TRMT);
  2768                           
  2769  0DE9  1683               	bsf	3,5	;RP0=1, select bank1
  2770  0DEA  1303               	bcf	3,6	;RP1=0, select bank1
  2771  0DEB  1C98               	btfss	24,1	;volatile
  2772  0DEC  2DE9               	goto	l333
  2773                           
  2774                           ;ser.c: 32: TXREG=c;
  2775  0DED  1283               	bcf	3,5	;RP0=0, select bank0
  2776  0DEE  1303               	bcf	3,6	;RP1=0, select bank0
  2777  0DEF  0849               	movf	ser_putch@c,w
  2778  0DF0  0099               	movwf	25	;volatile
  2779  0DF1  0008               	return
  2780  0DF2                     __end_of_ser_putch:	
  2781                           
  2782                           	psect	text13
  2783  0E65                     __ptext13:	
  2784 ;; *************** function _ADCMain *****************
  2785 ;; Defined at:
  2786 ;;		line 19 in file "ADC.c"
  2787 ;; Parameters:    Size  Location     Type
  2788 ;;		None
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;		None
  2791 ;; Return value:  Size  Location     Type
  2792 ;;                  1    wreg      void 
  2793 ;; Registers used:
  2794 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2795 ;; Tracked objects:
  2796 ;;		On entry : 0/0
  2797 ;;		On exit  : 0/0
  2798 ;;		Unchanged: 0/0
  2799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2800 ;;      Params:         0       0       0       0       0
  2801 ;;      Locals:         0       0       0       0       0
  2802 ;;      Temps:          0       0       0       0       0
  2803 ;;      Totals:         0       0       0       0       0
  2804 ;;Total ram usage:        0 bytes
  2805 ;; Hardware stack levels used:    1
  2806 ;; Hardware stack levels required when called:    4
  2807 ;; This function calls:
  2808 ;;		_adcConvertMM
  2809 ;;		_getADC
  2810 ;;		_lcdSetCursor
  2811 ;;		_lcdWriteToDigitBCD
  2812 ;; This function is called by:
  2813 ;;		_main
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817                           
  2818                           ;psect for function _ADCMain
  2819  0E65                     _ADCMain:	
  2820                           
  2821                           ;ADC.c: 21: getADC();
  2822                           
  2823                           ;incstack = 0
  2824                           ; Regs used in _ADCMain: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2825  0E65  120A  158A  2775  120A  158A  	fcall	_getADC
  2826                           
  2827                           ;ADC.c: 22: lcdSetCursor(0b10000000);
  2828  0E6A  3080               	movlw	128
  2829  0E6B  120A  158A  25DD  120A  158A  	fcall	_lcdSetCursor
  2830                           
  2831                           ;ADC.c: 23: lcdWriteToDigitBCD(adcRAW);
  2832  0E70  1283               	bcf	3,5	;RP0=0, select bank0
  2833  0E71  1303               	bcf	3,6	;RP1=0, select bank0
  2834  0E72  0827               	movf	_adcRAW+1,w	;volatile
  2835  0E73  00CD               	movwf	lcdWriteToDigitBCD@data+1
  2836  0E74  0826               	movf	_adcRAW,w	;volatile
  2837  0E75  00CC               	movwf	lcdWriteToDigitBCD@data
  2838  0E76  120A  118A  257E  120A  158A  	fcall	_lcdWriteToDigitBCD
  2839                           
  2840                           ;ADC.c: 25: adcConvertMM(adcRAW);
  2841  0E7B  1283               	bcf	3,5	;RP0=0, select bank0
  2842  0E7C  1303               	bcf	3,6	;RP1=0, select bank0
  2843  0E7D  0827               	movf	_adcRAW+1,w	;volatile
  2844  0E7E  00DF               	movwf	adcConvertMM@adcRAW+1
  2845  0E7F  0826               	movf	_adcRAW,w	;volatile
  2846  0E80  00DE               	movwf	adcConvertMM@adcRAW
  2847  0E81  120A  118A  202F   	fcall	_adcConvertMM
  2848  0E84  0008               	return
  2849  0E85                     __end_of_ADCMain:	
  2850                           
  2851                           	psect	text14
  2852  057E                     __ptext14:	
  2853 ;; *************** function _lcdWriteToDigitBCD *****************
  2854 ;; Defined at:
  2855 ;;		line 42 in file "LCD.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;  data            2    3[BANK0 ] unsigned int 
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  2860 ;;  TenThouDigit    2   11[BANK0 ] unsigned int 
  2861 ;;  ThouDigit       2    9[BANK0 ] unsigned int 
  2862 ;;  HunsDigit       2    7[BANK0 ] unsigned int 
  2863 ;;  TensDigit       2    5[BANK0 ] unsigned int 
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  1    wreg      void 
  2866 ;; Registers used:
  2867 ;;		wreg, status,2, status,0, pclath, cstack
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2873 ;;      Params:         0       2       0       0       0
  2874 ;;      Locals:         0      10       0       0       0
  2875 ;;      Temps:          0       0       0       0       0
  2876 ;;      Totals:         0      12       0       0       0
  2877 ;;Total ram usage:       12 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; Hardware stack levels required when called:    3
  2880 ;; This function calls:
  2881 ;;		_lcdWriteData
  2882 ;; This function is called by:
  2883 ;;		_main
  2884 ;;		_ADCMain
  2885 ;; This function uses a non-reentrant model
  2886 ;;
  2887                           
  2888                           
  2889                           ;psect for function _lcdWriteToDigitBCD
  2890  057E                     _lcdWriteToDigitBCD:	
  2891                           
  2892                           ;LCD.c: 43: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  2893                           ;LCD.c: 46: OnesDigit = data;
  2894                           
  2895                           ;incstack = 0
  2896                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  2897  057E  1283               	bcf	3,5	;RP0=0, select bank0
  2898  057F  1303               	bcf	3,6	;RP1=0, select bank0
  2899  0580  084D               	movf	lcdWriteToDigitBCD@data+1,w
  2900  0581  00D7               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2901  0582  084C               	movf	lcdWriteToDigitBCD@data,w
  2902  0583  00D6               	movwf	lcdWriteToDigitBCD@OnesDigit
  2903                           
  2904                           ;LCD.c: 47: TensDigit = 0;
  2905  0584  01CE               	clrf	lcdWriteToDigitBCD@TensDigit
  2906  0585  01CF               	clrf	lcdWriteToDigitBCD@TensDigit+1
  2907                           
  2908                           ;LCD.c: 48: HunsDigit = 0;
  2909  0586  01D0               	clrf	lcdWriteToDigitBCD@HunsDigit
  2910  0587  01D1               	clrf	lcdWriteToDigitBCD@HunsDigit+1
  2911                           
  2912                           ;LCD.c: 49: ThouDigit = 0;
  2913  0588  01D2               	clrf	lcdWriteToDigitBCD@ThouDigit
  2914  0589  01D3               	clrf	lcdWriteToDigitBCD@ThouDigit+1
  2915                           
  2916                           ;LCD.c: 50: TenThouDigit = 0;
  2917  058A  01D4               	clrf	lcdWriteToDigitBCD@TenThouDigit
  2918  058B  01D5               	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  2919  058C                     l1704:	
  2920                           ;LCD.c: 53: while (OnesDigit >= 10000){
  2921                           
  2922  058C  3027               	movlw	39
  2923  058D  0257               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2924  058E  3010               	movlw	16
  2925  058F  1903               	skipnz
  2926  0590  0256               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2927  0591  1C03               	btfss	3,0
  2928  0592  2DB0               	goto	l1710
  2929                           
  2930                           ;LCD.c: 54: OnesDigit = OnesDigit - 10000;
  2931  0593  0856               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2932  0594  3EF0               	addlw	240
  2933  0595  00D6               	movwf	lcdWriteToDigitBCD@OnesDigit
  2934  0596  0857               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2935  0597  1803               	skipnc
  2936  0598  3E01               	addlw	1
  2937  0599  3ED8               	addlw	216
  2938  059A  00D7               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2939                           
  2940                           ;LCD.c: 55: TenThouDigit++;
  2941  059B  3001               	movlw	1
  2942  059C  07D4               	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  2943  059D  1803               	skipnc
  2944  059E  0AD5               	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2945  059F  3000               	movlw	0
  2946  05A0  07D5               	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2947  05A1  2D8C               	goto	l1704
  2948  05A2                     l1706:	
  2949                           ;LCD.c: 56: }
  2950                           ;LCD.c: 58: while (OnesDigit >= 1000){
  2951                           
  2952                           
  2953                           ;LCD.c: 59: OnesDigit = OnesDigit - 1000;
  2954  05A2  0856               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2955  05A3  3E18               	addlw	24
  2956  05A4  00D6               	movwf	lcdWriteToDigitBCD@OnesDigit
  2957  05A5  0857               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2958  05A6  1803               	skipnc
  2959  05A7  3E01               	addlw	1
  2960  05A8  3EFC               	addlw	252
  2961  05A9  00D7               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2962                           
  2963                           ;LCD.c: 60: ThouDigit++;
  2964  05AA  3001               	movlw	1
  2965  05AB  07D2               	addwf	lcdWriteToDigitBCD@ThouDigit,f
  2966  05AC  1803               	skipnc
  2967  05AD  0AD3               	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  2968  05AE  3000               	movlw	0
  2969  05AF  07D3               	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  2970  05B0                     l1710:	
  2971  05B0  3003               	movlw	3
  2972  05B1  0257               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2973  05B2  30E8               	movlw	232
  2974  05B3  1903               	skipnz
  2975  05B4  0256               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2976  05B5  1C03               	btfss	3,0
  2977  05B6  2DC6               	goto	l1716
  2978  05B7  2DA2               	goto	l1706
  2979  05B8                     l1712:	
  2980                           ;LCD.c: 61: }
  2981                           ;LCD.c: 63: while (OnesDigit >= 100){
  2982                           
  2983                           
  2984                           ;LCD.c: 64: OnesDigit = OnesDigit - 100;
  2985  05B8  0856               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2986  05B9  3E9C               	addlw	156
  2987  05BA  00D6               	movwf	lcdWriteToDigitBCD@OnesDigit
  2988  05BB  0857               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2989  05BC  1803               	skipnc
  2990  05BD  3E01               	addlw	1
  2991  05BE  3EFF               	addlw	255
  2992  05BF  00D7               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2993                           
  2994                           ;LCD.c: 65: HunsDigit++;
  2995  05C0  3001               	movlw	1
  2996  05C1  07D0               	addwf	lcdWriteToDigitBCD@HunsDigit,f
  2997  05C2  1803               	skipnc
  2998  05C3  0AD1               	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  2999  05C4  3000               	movlw	0
  3000  05C5  07D1               	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  3001  05C6                     l1716:	
  3002  05C6  3000               	movlw	0
  3003  05C7  0257               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  3004  05C8  3064               	movlw	100
  3005  05C9  1903               	skipnz
  3006  05CA  0256               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  3007  05CB  1C03               	btfss	3,0
  3008  05CC  2DDC               	goto	l1722
  3009  05CD  2DB8               	goto	l1712
  3010  05CE                     l1718:	
  3011                           ;LCD.c: 66: }
  3012                           ;LCD.c: 68: while (OnesDigit >= 10){
  3013                           
  3014                           
  3015                           ;LCD.c: 69: OnesDigit = OnesDigit - 10;
  3016  05CE  0856               	movf	lcdWriteToDigitBCD@OnesDigit,w
  3017  05CF  3EF6               	addlw	246
  3018  05D0  00D6               	movwf	lcdWriteToDigitBCD@OnesDigit
  3019  05D1  0857               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  3020  05D2  1803               	skipnc
  3021  05D3  3E01               	addlw	1
  3022  05D4  3EFF               	addlw	255
  3023  05D5  00D7               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  3024                           
  3025                           ;LCD.c: 70: TensDigit++;
  3026  05D6  3001               	movlw	1
  3027  05D7  07CE               	addwf	lcdWriteToDigitBCD@TensDigit,f
  3028  05D8  1803               	skipnc
  3029  05D9  0ACF               	incf	lcdWriteToDigitBCD@TensDigit+1,f
  3030  05DA  3000               	movlw	0
  3031  05DB  07CF               	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  3032  05DC                     l1722:	
  3033  05DC  3000               	movlw	0
  3034  05DD  0257               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  3035  05DE  300A               	movlw	10
  3036  05DF  1903               	skipnz
  3037  05E0  0256               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  3038  05E1  1803               	skipnc
  3039  05E2  2DCE               	goto	l1718
  3040                           
  3041                           ;LCD.c: 71: }
  3042                           ;LCD.c: 73: if (TenThouDigit > 0)
  3043  05E3  0854               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  3044  05E4  0455               	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  3045  05E5  1903               	btfsc	3,2
  3046  05E6  2DEE               	goto	l1728
  3047                           
  3048                           ;LCD.c: 74: lcdWriteData((unsigned int)TenThouDigit + 48);
  3049  05E7  0854               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  3050  05E8  3E30               	addlw	48
  3051  05E9  120A  158A  2610  120A  118A  	fcall	_lcdWriteData
  3052  05EE                     l1728:	
  3053                           
  3054                           ;LCD.c: 76: if (ThouDigit > 0)
  3055  05EE  1283               	bcf	3,5	;RP0=0, select bank0
  3056  05EF  1303               	bcf	3,6	;RP1=0, select bank0
  3057  05F0  0852               	movf	lcdWriteToDigitBCD@ThouDigit,w
  3058  05F1  0453               	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  3059  05F2  1903               	btfsc	3,2
  3060  05F3  2DFB               	goto	l220
  3061                           
  3062                           ;LCD.c: 77: lcdWriteData((unsigned int)ThouDigit + 48);
  3063  05F4  0852               	movf	lcdWriteToDigitBCD@ThouDigit,w
  3064  05F5  3E30               	addlw	48
  3065  05F6  120A  158A  2610  120A  118A  	fcall	_lcdWriteData
  3066  05FB                     l220:	
  3067                           
  3068                           ;LCD.c: 79: lcdWriteData((unsigned int)HunsDigit + 48);
  3069  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  3070  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  3071  05FD  0850               	movf	lcdWriteToDigitBCD@HunsDigit,w
  3072  05FE  3E30               	addlw	48
  3073  05FF  120A  158A  2610  120A  118A  	fcall	_lcdWriteData
  3074                           
  3075                           ;LCD.c: 80: lcdWriteData((unsigned int)TensDigit + 48);
  3076  0604  1283               	bcf	3,5	;RP0=0, select bank0
  3077  0605  1303               	bcf	3,6	;RP1=0, select bank0
  3078  0606  084E               	movf	lcdWriteToDigitBCD@TensDigit,w
  3079  0607  3E30               	addlw	48
  3080  0608  120A  158A  2610  120A  118A  	fcall	_lcdWriteData
  3081                           
  3082                           ;LCD.c: 81: lcdWriteData((unsigned int)OnesDigit + 48);
  3083  060D  1283               	bcf	3,5	;RP0=0, select bank0
  3084  060E  1303               	bcf	3,6	;RP1=0, select bank0
  3085  060F  0856               	movf	lcdWriteToDigitBCD@OnesDigit,w
  3086  0610  3E30               	addlw	48
  3087  0611  120A  158A  2610   	fcall	_lcdWriteData
  3088  0614  0008               	return
  3089  0615                     __end_of_lcdWriteToDigitBCD:	
  3090                           
  3091                           	psect	text15
  3092  0E10                     __ptext15:	
  3093 ;; *************** function _lcdWriteData *****************
  3094 ;; Defined at:
  3095 ;;		line 20 in file "LCD.c"
  3096 ;; Parameters:    Size  Location     Type
  3097 ;;  databyte        1    wreg     unsigned char 
  3098 ;; Auto vars:     Size  Location     Type
  3099 ;;  databyte        1    2[BANK0 ] unsigned char 
  3100 ;; Return value:  Size  Location     Type
  3101 ;;                  1    wreg      void 
  3102 ;; Registers used:
  3103 ;;		wreg
  3104 ;; Tracked objects:
  3105 ;;		On entry : 0/0
  3106 ;;		On exit  : 0/0
  3107 ;;		Unchanged: 0/0
  3108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3109 ;;      Params:         0       0       0       0       0
  3110 ;;      Locals:         0       1       0       0       0
  3111 ;;      Temps:          0       2       0       0       0
  3112 ;;      Totals:         0       3       0       0       0
  3113 ;;Total ram usage:        3 bytes
  3114 ;; Hardware stack levels used:    1
  3115 ;; Hardware stack levels required when called:    2
  3116 ;; This function calls:
  3117 ;;		Nothing
  3118 ;; This function is called by:
  3119 ;;		_lcdWriteToDigitBCD
  3120 ;;		_lcdWriteString
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           
  3125                           ;psect for function _lcdWriteData
  3126  0E10                     _lcdWriteData:	
  3127                           
  3128                           ;incstack = 0
  3129                           ; Regs used in _lcdWriteData: [wreg]
  3130                           ;lcdWriteData@databyte stored from wreg
  3131  0E10  1283               	bcf	3,5	;RP0=0, select bank0
  3132  0E11  1303               	bcf	3,6	;RP1=0, select bank0
  3133  0E12  00CB               	movwf	lcdWriteData@databyte
  3134                           
  3135                           ;LCD.c: 21: RE2 = 0;
  3136  0E13  1109               	bcf	9,2	;volatile
  3137                           
  3138                           ;LCD.c: 22: RE1 = 0;
  3139  0E14  1089               	bcf	9,1	;volatile
  3140                           
  3141                           ;LCD.c: 23: RE0 = 1;
  3142  0E15  1409               	bsf	9,0	;volatile
  3143                           
  3144                           ;LCD.c: 24: PORTD = databyte;
  3145  0E16  084B               	movf	lcdWriteData@databyte,w
  3146  0E17  0088               	movwf	8	;volatile
  3147                           
  3148                           ;LCD.c: 25: RE2 = 1;
  3149  0E18  1509               	bsf	9,2	;volatile
  3150                           
  3151                           ;LCD.c: 26: RE2 = 0;
  3152  0E19  1109               	bcf	9,2	;volatile
  3153                           
  3154                           ;LCD.c: 27: _delay((unsigned long)((1)*(20000000/4000.0)));
  3155  0E1A  3007               	movlw	7
  3156  0E1B  00CA               	movwf	??_lcdWriteData+1
  3157  0E1C  307D               	movlw	125
  3158  0E1D  00C9               	movwf	??_lcdWriteData
  3159  0E1E                     u1947:	
  3160  0E1E  0BC9               	decfsz	??_lcdWriteData,f
  3161  0E1F  2E1E               	goto	u1947
  3162  0E20  0BCA               	decfsz	??_lcdWriteData+1,f
  3163  0E21  2E1E               	goto	u1947
  3164  0E22  0008               	return
  3165  0E23                     __end_of_lcdWriteData:	
  3166                           
  3167                           	psect	text16
  3168  0DDD                     __ptext16:	
  3169 ;; *************** function _lcdSetCursor *****************
  3170 ;; Defined at:
  3171 ;;		line 31 in file "LCD.c"
  3172 ;; Parameters:    Size  Location     Type
  3173 ;;  address         1    wreg     unsigned char 
  3174 ;; Auto vars:     Size  Location     Type
  3175 ;;  address         1    3[BANK0 ] unsigned char 
  3176 ;; Return value:  Size  Location     Type
  3177 ;;                  1    wreg      void 
  3178 ;; Registers used:
  3179 ;;		wreg, status,2, status,0, pclath, cstack
  3180 ;; Tracked objects:
  3181 ;;		On entry : 0/0
  3182 ;;		On exit  : 0/0
  3183 ;;		Unchanged: 0/0
  3184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3185 ;;      Params:         0       0       0       0       0
  3186 ;;      Locals:         0       1       0       0       0
  3187 ;;      Temps:          0       0       0       0       0
  3188 ;;      Totals:         0       1       0       0       0
  3189 ;;Total ram usage:        1 bytes
  3190 ;; Hardware stack levels used:    1
  3191 ;; Hardware stack levels required when called:    3
  3192 ;; This function calls:
  3193 ;;		_lcdWriteControl
  3194 ;; This function is called by:
  3195 ;;		_main
  3196 ;;		_ADCMain
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200                           
  3201                           ;psect for function _lcdSetCursor
  3202  0DDD                     _lcdSetCursor:	
  3203                           
  3204                           ;incstack = 0
  3205                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  3206                           ;lcdSetCursor@address stored from wreg
  3207  0DDD  1283               	bcf	3,5	;RP0=0, select bank0
  3208  0DDE  1303               	bcf	3,6	;RP1=0, select bank0
  3209  0DDF  00CC               	movwf	lcdSetCursor@address
  3210                           
  3211                           ;LCD.c: 32: address |= 0b10000000;
  3212  0DE0  17CC               	bsf	lcdSetCursor@address,7
  3213                           
  3214                           ;LCD.c: 33: lcdWriteControl(address);
  3215  0DE1  084C               	movf	lcdSetCursor@address,w
  3216  0DE2  120A  158A  2623   	fcall	_lcdWriteControl
  3217  0DE5  0008               	return
  3218  0DE6                     __end_of_lcdSetCursor:	
  3219                           
  3220                           	psect	text17
  3221  0E23                     __ptext17:	
  3222 ;; *************** function _lcdWriteControl *****************
  3223 ;; Defined at:
  3224 ;;		line 9 in file "LCD.c"
  3225 ;; Parameters:    Size  Location     Type
  3226 ;;  databyte        1    wreg     unsigned char 
  3227 ;; Auto vars:     Size  Location     Type
  3228 ;;  databyte        1    2[BANK0 ] unsigned char 
  3229 ;; Return value:  Size  Location     Type
  3230 ;;                  1    wreg      void 
  3231 ;; Registers used:
  3232 ;;		wreg
  3233 ;; Tracked objects:
  3234 ;;		On entry : 0/0
  3235 ;;		On exit  : 0/0
  3236 ;;		Unchanged: 0/0
  3237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3238 ;;      Params:         0       0       0       0       0
  3239 ;;      Locals:         0       1       0       0       0
  3240 ;;      Temps:          0       2       0       0       0
  3241 ;;      Totals:         0       3       0       0       0
  3242 ;;Total ram usage:        3 bytes
  3243 ;; Hardware stack levels used:    1
  3244 ;; Hardware stack levels required when called:    2
  3245 ;; This function calls:
  3246 ;;		Nothing
  3247 ;; This function is called by:
  3248 ;;		_lcdSetCursor
  3249 ;;		_setupLCD
  3250 ;; This function uses a non-reentrant model
  3251 ;;
  3252                           
  3253                           
  3254                           ;psect for function _lcdWriteControl
  3255  0E23                     _lcdWriteControl:	
  3256                           
  3257                           ;incstack = 0
  3258                           ; Regs used in _lcdWriteControl: [wreg]
  3259                           ;lcdWriteControl@databyte stored from wreg
  3260  0E23  1283               	bcf	3,5	;RP0=0, select bank0
  3261  0E24  1303               	bcf	3,6	;RP1=0, select bank0
  3262  0E25  00CB               	movwf	lcdWriteControl@databyte
  3263                           
  3264                           ;LCD.c: 10: RE2 = 0;
  3265  0E26  1109               	bcf	9,2	;volatile
  3266                           
  3267                           ;LCD.c: 11: RE1 = 0;
  3268  0E27  1089               	bcf	9,1	;volatile
  3269                           
  3270                           ;LCD.c: 12: RE0 = 0;
  3271  0E28  1009               	bcf	9,0	;volatile
  3272                           
  3273                           ;LCD.c: 13: PORTD = databyte;
  3274  0E29  084B               	movf	lcdWriteControl@databyte,w
  3275  0E2A  0088               	movwf	8	;volatile
  3276                           
  3277                           ;LCD.c: 14: RE2 = 1;
  3278  0E2B  1509               	bsf	9,2	;volatile
  3279                           
  3280                           ;LCD.c: 15: RE2 = 0;
  3281  0E2C  1109               	bcf	9,2	;volatile
  3282                           
  3283                           ;LCD.c: 16: _delay((unsigned long)((2)*(20000000/4000.0)));
  3284  0E2D  300D               	movlw	13
  3285  0E2E  00CA               	movwf	??_lcdWriteControl+1
  3286  0E2F  30FB               	movlw	251
  3287  0E30  00C9               	movwf	??_lcdWriteControl
  3288  0E31                     u1957:	
  3289  0E31  0BC9               	decfsz	??_lcdWriteControl,f
  3290  0E32  2E31               	goto	u1957
  3291  0E33  0BCA               	decfsz	??_lcdWriteControl+1,f
  3292  0E34  2E31               	goto	u1957
  3293  0E35  2E36               	nop2
  3294  0E36  0008               	return
  3295  0E37                     __end_of_lcdWriteControl:	
  3296                           
  3297                           	psect	text18
  3298  0F75                     __ptext18:	
  3299 ;; *************** function _getADC *****************
  3300 ;; Defined at:
  3301 ;;		line 29 in file "ADC.c"
  3302 ;; Parameters:    Size  Location     Type
  3303 ;;		None
  3304 ;; Auto vars:     Size  Location     Type
  3305 ;;		None
  3306 ;; Return value:  Size  Location     Type
  3307 ;;                  2  427[None  ] unsigned int 
  3308 ;; Registers used:
  3309 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3310 ;; Tracked objects:
  3311 ;;		On entry : 0/0
  3312 ;;		On exit  : 0/0
  3313 ;;		Unchanged: 0/0
  3314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3315 ;;      Params:         0       0       0       0       0
  3316 ;;      Locals:         0       0       0       0       0
  3317 ;;      Temps:          0       2       0       0       0
  3318 ;;      Totals:         0       2       0       0       0
  3319 ;;Total ram usage:        2 bytes
  3320 ;; Hardware stack levels used:    1
  3321 ;; Hardware stack levels required when called:    2
  3322 ;; This function calls:
  3323 ;;		Nothing
  3324 ;; This function is called by:
  3325 ;;		_ADCMain
  3326 ;; This function uses a non-reentrant model
  3327 ;;
  3328                           
  3329                           
  3330                           ;psect for function _getADC
  3331  0F75                     _getADC:	
  3332                           
  3333                           ;ADC.c: 31: ADRESH = 0;
  3334                           
  3335                           ;incstack = 0
  3336                           ; Regs used in _getADC: [wreg-fsr0h+status,2+status,0]
  3337  0F75  1283               	bcf	3,5	;RP0=0, select bank0
  3338  0F76  1303               	bcf	3,6	;RP1=0, select bank0
  3339  0F77  019E               	clrf	30	;volatile
  3340                           
  3341                           ;ADC.c: 32: ADRESL = 0;
  3342  0F78  1683               	bsf	3,5	;RP0=1, select bank1
  3343  0F79  1303               	bcf	3,6	;RP1=0, select bank1
  3344  0F7A  019E               	clrf	30	;volatile
  3345                           
  3346                           ;ADC.c: 34: GO = 1;
  3347  0F7B  1283               	bcf	3,5	;RP0=0, select bank0
  3348  0F7C  1303               	bcf	3,6	;RP1=0, select bank0
  3349  0F7D  151F               	bsf	31,2	;volatile
  3350  0F7E                     l472:	
  3351                           ;ADC.c: 35: while(GO) continue;
  3352                           
  3353  0F7E  191F               	btfsc	31,2	;volatile
  3354  0F7F  2F7E               	goto	l472
  3355                           
  3356                           ;ADC.c: 39: adcRAW = (4*ADRESH);
  3357  0F80  081E               	movf	30,w	;volatile
  3358  0F81  00C9               	movwf	??_getADC
  3359  0F82  01CA               	clrf	??_getADC+1
  3360  0F83  1003               	clrc
  3361  0F84  0DC9               	rlf	??_getADC,f
  3362  0F85  0DCA               	rlf	??_getADC+1,f
  3363  0F86  1003               	clrc
  3364  0F87  0DC9               	rlf	??_getADC,f
  3365  0F88  0DCA               	rlf	??_getADC+1,f
  3366  0F89  0849               	movf	??_getADC,w
  3367  0F8A  00A6               	movwf	_adcRAW	;volatile
  3368  0F8B  084A               	movf	??_getADC+1,w
  3369  0F8C  00A7               	movwf	_adcRAW+1	;volatile
  3370                           
  3371                           ;ADC.c: 41: switch(ADRESL){
  3372  0F8D  2FAC               	goto	l1754
  3373  0F8E                     l1748:	
  3374                           ;ADC.c: 42: case 0b01000000: adcRAW = adcRAW + 1;
  3375                           
  3376  0F8E  1283               	bcf	3,5	;RP0=0, select bank0
  3377  0F8F  0826               	movf	_adcRAW,w	;volatile
  3378  0F90  3E01               	addlw	1
  3379  0F91  00A6               	movwf	_adcRAW	;volatile
  3380  0F92  0827               	movf	_adcRAW+1,w	;volatile
  3381  0F93  1803               	skipnc
  3382  0F94  3E01               	addlw	1
  3383  0F95  3E00               	addlw	0
  3384  0F96  00A7               	movwf	_adcRAW+1	;volatile
  3385                           
  3386                           ;ADC.c: 43: break;
  3387  0F97  0008               	return
  3388  0F98                     l1750:	
  3389                           ;ADC.c: 44: case 0b10000000: adcRAW = adcRAW + 2;
  3390                           
  3391  0F98  1283               	bcf	3,5	;RP0=0, select bank0
  3392  0F99  0826               	movf	_adcRAW,w	;volatile
  3393  0F9A  3E02               	addlw	2
  3394  0F9B  00A6               	movwf	_adcRAW	;volatile
  3395  0F9C  0827               	movf	_adcRAW+1,w	;volatile
  3396  0F9D  1803               	skipnc
  3397  0F9E  3E01               	addlw	1
  3398  0F9F  3E00               	addlw	0
  3399  0FA0  00A7               	movwf	_adcRAW+1	;volatile
  3400                           
  3401                           ;ADC.c: 45: break;
  3402  0FA1  0008               	return
  3403  0FA2                     l1752:	
  3404                           ;ADC.c: 46: case 0b11000000: adcRAW = adcRAW + 3;
  3405                           
  3406  0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  3407  0FA3  0826               	movf	_adcRAW,w	;volatile
  3408  0FA4  3E03               	addlw	3
  3409  0FA5  00A6               	movwf	_adcRAW	;volatile
  3410  0FA6  0827               	movf	_adcRAW+1,w	;volatile
  3411  0FA7  1803               	skipnc
  3412  0FA8  3E01               	addlw	1
  3413  0FA9  3E00               	addlw	0
  3414  0FAA  00A7               	movwf	_adcRAW+1	;volatile
  3415                           
  3416                           ;ADC.c: 49: }
  3417                           
  3418                           ;ADC.c: 48: default: adcRAW = adcRAW;
  3419                           
  3420                           ;ADC.c: 47: break;
  3421  0FAB  0008               	return
  3422  0FAC                     l1754:	
  3423  0FAC  1683               	bsf	3,5	;RP0=1, select bank1
  3424  0FAD  1303               	bcf	3,6	;RP1=0, select bank1
  3425  0FAE  081E               	movf	30,w	;volatile
  3426                           
  3427                           ; Switch size 1, requested type "space"
  3428                           ; Number of cases is 3, Range of values is 64 to 192
  3429                           ; switch strategies available:
  3430                           ; Name         Instructions Cycles
  3431                           ; simple_byte           10     6 (average)
  3432                           ; jumptable            263     9 (fixed)
  3433                           ;	Chosen strategy is simple_byte
  3434  0FAF  3A40               	xorlw	64	; case 64
  3435  0FB0  1903               	skipnz
  3436  0FB1  2F8E               	goto	l1748
  3437  0FB2  3AC0               	xorlw	192	; case 128
  3438  0FB3  1903               	skipnz
  3439  0FB4  2F98               	goto	l1750
  3440  0FB5  3A40               	xorlw	64	; case 192
  3441  0FB6  1903               	skipnz
  3442  0FB7  2FA2               	goto	l1752
  3443  0FB8  2FB9               	goto	l481
  3444  0FB9                     l481:	
  3445                           ;ADC.c: 51: return(adcRAW);
  3446                           ;	Return value of _getADC is never used
  3447                           
  3448  0FB9  0008               	return
  3449  0FBA                     __end_of_getADC:	
  3450                           
  3451                           	psect	text19
  3452  002F                     __ptext19:	
  3453 ;; *************** function _adcConvertMM *****************
  3454 ;; Defined at:
  3455 ;;		line 59 in file "ADC.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;  adcRAW          2   21[BANK0 ] unsigned int 
  3458 ;; Auto vars:     Size  Location     Type
  3459 ;;		None
  3460 ;; Return value:  Size  Location     Type
  3461 ;;                  2   21[BANK0 ] unsigned int 
  3462 ;; Registers used:
  3463 ;;		wreg, status,2, status,0, pclath, cstack
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3469 ;;      Params:         0       2       0       0       0
  3470 ;;      Locals:         0       0       0       0       0
  3471 ;;      Temps:          0       8       0       0       0
  3472 ;;      Totals:         0      10       0       0       0
  3473 ;;Total ram usage:       10 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; Hardware stack levels required when called:    3
  3476 ;; This function calls:
  3477 ;;		___aldiv
  3478 ;;		___lwdiv
  3479 ;;		___wmul
  3480 ;; This function is called by:
  3481 ;;		_ADCMain
  3482 ;; This function uses a non-reentrant model
  3483 ;;
  3484                           
  3485                           
  3486                           ;psect for function _adcConvertMM
  3487  002F                     _adcConvertMM:	
  3488                           
  3489                           ;ADC.c: 61: if (adcRAW < 517 && adcRAW >= 513)
  3490                           
  3491                           ;incstack = 0
  3492                           ; Regs used in _adcConvertMM: [wreg+status,2+status,0+pclath+cstack]
  3493  002F  3002               	movlw	2
  3494  0030  1283               	bcf	3,5	;RP0=0, select bank0
  3495  0031  1303               	bcf	3,6	;RP1=0, select bank0
  3496  0032  025F               	subwf	adcConvertMM@adcRAW+1,w
  3497  0033  3005               	movlw	5
  3498  0034  1903               	skipnz
  3499  0035  025E               	subwf	adcConvertMM@adcRAW,w
  3500  0036  1803               	skipnc
  3501  0037  2898               	goto	l1762
  3502  0038  3002               	movlw	2
  3503  0039  025F               	subwf	adcConvertMM@adcRAW+1,w
  3504  003A  3001               	movlw	1
  3505  003B  1903               	skipnz
  3506  003C  025E               	subwf	adcConvertMM@adcRAW,w
  3507  003D  1C03               	skipc
  3508  003E  2898               	goto	l1762
  3509                           
  3510                           ;ADC.c: 62: Distance = (((51700 - adcRAW*100)/4) + 100);
  3511  003F  3000               	movlw	0
  3512  0040  00D2               	movwf	___aldiv@divisor+3
  3513  0041  3000               	movlw	0
  3514  0042  00D1               	movwf	___aldiv@divisor+2
  3515  0043  3000               	movlw	0
  3516  0044  00D0               	movwf	___aldiv@divisor+1
  3517  0045  3004               	movlw	4
  3518  0046  00CF               	movwf	___aldiv@divisor
  3519  0047  30F4               	movlw	244
  3520  0048  00E0               	movwf	??_adcConvertMM
  3521  0049  30C9               	movlw	201
  3522  004A  00E1               	movwf	??_adcConvertMM+1
  3523  004B  3000               	movlw	0
  3524  004C  00E2               	movwf	??_adcConvertMM+2
  3525  004D  3000               	movlw	0
  3526  004E  00E3               	movwf	??_adcConvertMM+3
  3527  004F  085F               	movf	adcConvertMM@adcRAW+1,w
  3528  0050  00CA               	movwf	___wmul@multiplier+1
  3529  0051  085E               	movf	adcConvertMM@adcRAW,w
  3530  0052  00C9               	movwf	___wmul@multiplier
  3531  0053  3064               	movlw	100
  3532  0054  00CB               	movwf	___wmul@multiplicand
  3533  0055  3000               	movlw	0
  3534  0056  00CC               	movwf	___wmul@multiplicand+1
  3535  0057  120A  158A  2685  120A  118A  	fcall	___wmul
  3536  005C  1283               	bcf	3,5	;RP0=0, select bank0
  3537  005D  1303               	bcf	3,6	;RP1=0, select bank0
  3538  005E  0849               	movf	?___wmul,w
  3539  005F  00E4               	movwf	??_adcConvertMM+4
  3540  0060  084A               	movf	?___wmul+1,w
  3541  0061  00E5               	movwf	??_adcConvertMM+5
  3542  0062  01E6               	clrf	??_adcConvertMM+6
  3543  0063  01E7               	clrf	??_adcConvertMM+7
  3544  0064  09E4               	comf	??_adcConvertMM+4,f
  3545  0065  09E5               	comf	??_adcConvertMM+5,f
  3546  0066  09E6               	comf	??_adcConvertMM+6,f
  3547  0067  09E7               	comf	??_adcConvertMM+7,f
  3548  0068  0AE4               	incf	??_adcConvertMM+4,f
  3549  0069  1903               	skipnz
  3550  006A  0AE5               	incf	??_adcConvertMM+5,f
  3551  006B  1903               	skipnz
  3552  006C  0AE6               	incf	??_adcConvertMM+6,f
  3553  006D  1903               	skipnz
  3554  006E  0AE7               	incf	??_adcConvertMM+7,f
  3555  006F  0864               	movf	??_adcConvertMM+4,w
  3556  0070  07E0               	addwf	??_adcConvertMM,f
  3557  0071  0865               	movf	??_adcConvertMM+5,w
  3558  0072  1803               	skipnc
  3559  0073  0F65               	incfsz	??_adcConvertMM+5,w
  3560  0074  2876               	goto	u1260
  3561  0075  2877               	goto	u1261
  3562  0076                     u1260:	
  3563  0076  07E1               	addwf	??_adcConvertMM+1,f
  3564  0077                     u1261:	
  3565  0077  0866               	movf	??_adcConvertMM+6,w
  3566  0078  1803               	skipnc
  3567  0079  0F66               	incfsz	??_adcConvertMM+6,w
  3568  007A  287C               	goto	u1262
  3569  007B  287D               	goto	u1263
  3570  007C                     u1262:	
  3571  007C  07E2               	addwf	??_adcConvertMM+2,f
  3572  007D                     u1263:	
  3573  007D  0867               	movf	??_adcConvertMM+7,w
  3574  007E  1803               	skipnc
  3575  007F  0A67               	incf	??_adcConvertMM+7,w
  3576  0080  07E3               	addwf	??_adcConvertMM+3,f
  3577  0081  0863               	movf	??_adcConvertMM+3,w
  3578  0082  00D6               	movwf	___aldiv@dividend+3
  3579  0083  0862               	movf	??_adcConvertMM+2,w
  3580  0084  00D5               	movwf	___aldiv@dividend+2
  3581  0085  0861               	movf	??_adcConvertMM+1,w
  3582  0086  00D4               	movwf	___aldiv@dividend+1
  3583  0087  0860               	movf	??_adcConvertMM,w
  3584  0088  00D3               	movwf	___aldiv@dividend
  3585  0089  120A  118A  2615  120A  118A  	fcall	___aldiv
  3586  008E  1283               	bcf	3,5	;RP0=0, select bank0
  3587  008F  1303               	bcf	3,6	;RP1=0, select bank0
  3588  0090  084F               	movf	?___aldiv,w
  3589  0091  3E64               	addlw	100
  3590  0092  00A0               	movwf	_Distance	;volatile
  3591  0093  0850               	movf	?___aldiv+1,w
  3592  0094  1803               	skipnc
  3593  0095  3E01               	addlw	1
  3594  0096  3E00               	addlw	0
  3595  0097  00A1               	movwf	_Distance+1	;volatile
  3596  0098                     l1762:	
  3597                           
  3598                           ;ADC.c: 64: if (adcRAW < 513 && adcRAW >= 393)
  3599  0098  3002               	movlw	2
  3600  0099  025F               	subwf	adcConvertMM@adcRAW+1,w
  3601  009A  3001               	movlw	1
  3602  009B  1903               	skipnz
  3603  009C  025E               	subwf	adcConvertMM@adcRAW,w
  3604  009D  1803               	skipnc
  3605  009E  28FF               	goto	l1768
  3606  009F  3001               	movlw	1
  3607  00A0  025F               	subwf	adcConvertMM@adcRAW+1,w
  3608  00A1  3089               	movlw	137
  3609  00A2  1903               	skipnz
  3610  00A3  025E               	subwf	adcConvertMM@adcRAW,w
  3611  00A4  1C03               	skipc
  3612  00A5  28FF               	goto	l1768
  3613                           
  3614                           ;ADC.c: 65: Distance = (((51300 - adcRAW*100)/120) + 200);
  3615  00A6  3000               	movlw	0
  3616  00A7  00D2               	movwf	___aldiv@divisor+3
  3617  00A8  3000               	movlw	0
  3618  00A9  00D1               	movwf	___aldiv@divisor+2
  3619  00AA  3000               	movlw	0
  3620  00AB  00D0               	movwf	___aldiv@divisor+1
  3621  00AC  3078               	movlw	120
  3622  00AD  00CF               	movwf	___aldiv@divisor
  3623  00AE  3064               	movlw	100
  3624  00AF  00E0               	movwf	??_adcConvertMM
  3625  00B0  30C8               	movlw	200
  3626  00B1  00E1               	movwf	??_adcConvertMM+1
  3627  00B2  3000               	movlw	0
  3628  00B3  00E2               	movwf	??_adcConvertMM+2
  3629  00B4  3000               	movlw	0
  3630  00B5  00E3               	movwf	??_adcConvertMM+3
  3631  00B6  085F               	movf	adcConvertMM@adcRAW+1,w
  3632  00B7  00CA               	movwf	___wmul@multiplier+1
  3633  00B8  085E               	movf	adcConvertMM@adcRAW,w
  3634  00B9  00C9               	movwf	___wmul@multiplier
  3635  00BA  3064               	movlw	100
  3636  00BB  00CB               	movwf	___wmul@multiplicand
  3637  00BC  3000               	movlw	0
  3638  00BD  00CC               	movwf	___wmul@multiplicand+1
  3639  00BE  120A  158A  2685  120A  118A  	fcall	___wmul
  3640  00C3  1283               	bcf	3,5	;RP0=0, select bank0
  3641  00C4  1303               	bcf	3,6	;RP1=0, select bank0
  3642  00C5  0849               	movf	?___wmul,w
  3643  00C6  00E4               	movwf	??_adcConvertMM+4
  3644  00C7  084A               	movf	?___wmul+1,w
  3645  00C8  00E5               	movwf	??_adcConvertMM+5
  3646  00C9  01E6               	clrf	??_adcConvertMM+6
  3647  00CA  01E7               	clrf	??_adcConvertMM+7
  3648  00CB  09E4               	comf	??_adcConvertMM+4,f
  3649  00CC  09E5               	comf	??_adcConvertMM+5,f
  3650  00CD  09E6               	comf	??_adcConvertMM+6,f
  3651  00CE  09E7               	comf	??_adcConvertMM+7,f
  3652  00CF  0AE4               	incf	??_adcConvertMM+4,f
  3653  00D0  1903               	skipnz
  3654  00D1  0AE5               	incf	??_adcConvertMM+5,f
  3655  00D2  1903               	skipnz
  3656  00D3  0AE6               	incf	??_adcConvertMM+6,f
  3657  00D4  1903               	skipnz
  3658  00D5  0AE7               	incf	??_adcConvertMM+7,f
  3659  00D6  0864               	movf	??_adcConvertMM+4,w
  3660  00D7  07E0               	addwf	??_adcConvertMM,f
  3661  00D8  0865               	movf	??_adcConvertMM+5,w
  3662  00D9  1803               	skipnc
  3663  00DA  0F65               	incfsz	??_adcConvertMM+5,w
  3664  00DB  28DD               	goto	u1290
  3665  00DC  28DE               	goto	u1291
  3666  00DD                     u1290:	
  3667  00DD  07E1               	addwf	??_adcConvertMM+1,f
  3668  00DE                     u1291:	
  3669  00DE  0866               	movf	??_adcConvertMM+6,w
  3670  00DF  1803               	skipnc
  3671  00E0  0F66               	incfsz	??_adcConvertMM+6,w
  3672  00E1  28E3               	goto	u1292
  3673  00E2  28E4               	goto	u1293
  3674  00E3                     u1292:	
  3675  00E3  07E2               	addwf	??_adcConvertMM+2,f
  3676  00E4                     u1293:	
  3677  00E4  0867               	movf	??_adcConvertMM+7,w
  3678  00E5  1803               	skipnc
  3679  00E6  0A67               	incf	??_adcConvertMM+7,w
  3680  00E7  07E3               	addwf	??_adcConvertMM+3,f
  3681  00E8  0863               	movf	??_adcConvertMM+3,w
  3682  00E9  00D6               	movwf	___aldiv@dividend+3
  3683  00EA  0862               	movf	??_adcConvertMM+2,w
  3684  00EB  00D5               	movwf	___aldiv@dividend+2
  3685  00EC  0861               	movf	??_adcConvertMM+1,w
  3686  00ED  00D4               	movwf	___aldiv@dividend+1
  3687  00EE  0860               	movf	??_adcConvertMM,w
  3688  00EF  00D3               	movwf	___aldiv@dividend
  3689  00F0  120A  118A  2615  120A  118A  	fcall	___aldiv
  3690  00F5  1283               	bcf	3,5	;RP0=0, select bank0
  3691  00F6  1303               	bcf	3,6	;RP1=0, select bank0
  3692  00F7  084F               	movf	?___aldiv,w
  3693  00F8  3EC8               	addlw	200
  3694  00F9  00A0               	movwf	_Distance	;volatile
  3695  00FA  0850               	movf	?___aldiv+1,w
  3696  00FB  1803               	skipnc
  3697  00FC  3E01               	addlw	1
  3698  00FD  3E00               	addlw	0
  3699  00FE  00A1               	movwf	_Distance+1	;volatile
  3700  00FF                     l1768:	
  3701                           
  3702                           ;ADC.c: 67: if (adcRAW < 393 && adcRAW >= 298)
  3703  00FF  3001               	movlw	1
  3704  0100  025F               	subwf	adcConvertMM@adcRAW+1,w
  3705  0101  3089               	movlw	137
  3706  0102  1903               	skipnz
  3707  0103  025E               	subwf	adcConvertMM@adcRAW,w
  3708  0104  1803               	skipnc
  3709  0105  2966               	goto	l1774
  3710  0106  3001               	movlw	1
  3711  0107  025F               	subwf	adcConvertMM@adcRAW+1,w
  3712  0108  302A               	movlw	42
  3713  0109  1903               	skipnz
  3714  010A  025E               	subwf	adcConvertMM@adcRAW,w
  3715  010B  1C03               	skipc
  3716  010C  2966               	goto	l1774
  3717                           
  3718                           ;ADC.c: 68: Distance = (((39300 - adcRAW*100)/95) + 300);
  3719  010D  3000               	movlw	0
  3720  010E  00D2               	movwf	___aldiv@divisor+3
  3721  010F  3000               	movlw	0
  3722  0110  00D1               	movwf	___aldiv@divisor+2
  3723  0111  3000               	movlw	0
  3724  0112  00D0               	movwf	___aldiv@divisor+1
  3725  0113  305F               	movlw	95
  3726  0114  00CF               	movwf	___aldiv@divisor
  3727  0115  3084               	movlw	132
  3728  0116  00E0               	movwf	??_adcConvertMM
  3729  0117  3099               	movlw	153
  3730  0118  00E1               	movwf	??_adcConvertMM+1
  3731  0119  3000               	movlw	0
  3732  011A  00E2               	movwf	??_adcConvertMM+2
  3733  011B  3000               	movlw	0
  3734  011C  00E3               	movwf	??_adcConvertMM+3
  3735  011D  085F               	movf	adcConvertMM@adcRAW+1,w
  3736  011E  00CA               	movwf	___wmul@multiplier+1
  3737  011F  085E               	movf	adcConvertMM@adcRAW,w
  3738  0120  00C9               	movwf	___wmul@multiplier
  3739  0121  3064               	movlw	100
  3740  0122  00CB               	movwf	___wmul@multiplicand
  3741  0123  3000               	movlw	0
  3742  0124  00CC               	movwf	___wmul@multiplicand+1
  3743  0125  120A  158A  2685  120A  118A  	fcall	___wmul
  3744  012A  1283               	bcf	3,5	;RP0=0, select bank0
  3745  012B  1303               	bcf	3,6	;RP1=0, select bank0
  3746  012C  0849               	movf	?___wmul,w
  3747  012D  00E4               	movwf	??_adcConvertMM+4
  3748  012E  084A               	movf	?___wmul+1,w
  3749  012F  00E5               	movwf	??_adcConvertMM+5
  3750  0130  01E6               	clrf	??_adcConvertMM+6
  3751  0131  01E7               	clrf	??_adcConvertMM+7
  3752  0132  09E4               	comf	??_adcConvertMM+4,f
  3753  0133  09E5               	comf	??_adcConvertMM+5,f
  3754  0134  09E6               	comf	??_adcConvertMM+6,f
  3755  0135  09E7               	comf	??_adcConvertMM+7,f
  3756  0136  0AE4               	incf	??_adcConvertMM+4,f
  3757  0137  1903               	skipnz
  3758  0138  0AE5               	incf	??_adcConvertMM+5,f
  3759  0139  1903               	skipnz
  3760  013A  0AE6               	incf	??_adcConvertMM+6,f
  3761  013B  1903               	skipnz
  3762  013C  0AE7               	incf	??_adcConvertMM+7,f
  3763  013D  0864               	movf	??_adcConvertMM+4,w
  3764  013E  07E0               	addwf	??_adcConvertMM,f
  3765  013F  0865               	movf	??_adcConvertMM+5,w
  3766  0140  1803               	skipnc
  3767  0141  0F65               	incfsz	??_adcConvertMM+5,w
  3768  0142  2944               	goto	u1320
  3769  0143  2945               	goto	u1321
  3770  0144                     u1320:	
  3771  0144  07E1               	addwf	??_adcConvertMM+1,f
  3772  0145                     u1321:	
  3773  0145  0866               	movf	??_adcConvertMM+6,w
  3774  0146  1803               	skipnc
  3775  0147  0F66               	incfsz	??_adcConvertMM+6,w
  3776  0148  294A               	goto	u1322
  3777  0149  294B               	goto	u1323
  3778  014A                     u1322:	
  3779  014A  07E2               	addwf	??_adcConvertMM+2,f
  3780  014B                     u1323:	
  3781  014B  0867               	movf	??_adcConvertMM+7,w
  3782  014C  1803               	skipnc
  3783  014D  0A67               	incf	??_adcConvertMM+7,w
  3784  014E  07E3               	addwf	??_adcConvertMM+3,f
  3785  014F  0863               	movf	??_adcConvertMM+3,w
  3786  0150  00D6               	movwf	___aldiv@dividend+3
  3787  0151  0862               	movf	??_adcConvertMM+2,w
  3788  0152  00D5               	movwf	___aldiv@dividend+2
  3789  0153  0861               	movf	??_adcConvertMM+1,w
  3790  0154  00D4               	movwf	___aldiv@dividend+1
  3791  0155  0860               	movf	??_adcConvertMM,w
  3792  0156  00D3               	movwf	___aldiv@dividend
  3793  0157  120A  118A  2615  120A  118A  	fcall	___aldiv
  3794  015C  1283               	bcf	3,5	;RP0=0, select bank0
  3795  015D  1303               	bcf	3,6	;RP1=0, select bank0
  3796  015E  084F               	movf	?___aldiv,w
  3797  015F  3E2C               	addlw	44
  3798  0160  00A0               	movwf	_Distance	;volatile
  3799  0161  0850               	movf	?___aldiv+1,w
  3800  0162  1803               	skipnc
  3801  0163  3E01               	addlw	1
  3802  0164  3E01               	addlw	1
  3803  0165  00A1               	movwf	_Distance+1	;volatile
  3804  0166                     l1774:	
  3805                           
  3806                           ;ADC.c: 70: if (adcRAW < 298 && adcRAW >= 236)
  3807  0166  3001               	movlw	1
  3808  0167  025F               	subwf	adcConvertMM@adcRAW+1,w
  3809  0168  302A               	movlw	42
  3810  0169  1903               	skipnz
  3811  016A  025E               	subwf	adcConvertMM@adcRAW,w
  3812  016B  1803               	skipnc
  3813  016C  29A5               	goto	l1780
  3814  016D  3000               	movlw	0
  3815  016E  025F               	subwf	adcConvertMM@adcRAW+1,w
  3816  016F  30EC               	movlw	236
  3817  0170  1903               	skipnz
  3818  0171  025E               	subwf	adcConvertMM@adcRAW,w
  3819  0172  1C03               	skipc
  3820  0173  29A5               	goto	l1780
  3821                           
  3822                           ;ADC.c: 71: Distance = (((29800 - adcRAW*100)/62) + 400);
  3823  0174  303E               	movlw	62
  3824  0175  00CF               	movwf	___lwdiv@divisor
  3825  0176  3000               	movlw	0
  3826  0177  00D0               	movwf	___lwdiv@divisor+1
  3827  0178  085F               	movf	adcConvertMM@adcRAW+1,w
  3828  0179  00CA               	movwf	___wmul@multiplier+1
  3829  017A  085E               	movf	adcConvertMM@adcRAW,w
  3830  017B  00C9               	movwf	___wmul@multiplier
  3831  017C  3064               	movlw	100
  3832  017D  00CB               	movwf	___wmul@multiplicand
  3833  017E  3000               	movlw	0
  3834  017F  00CC               	movwf	___wmul@multiplicand+1
  3835  0180  120A  158A  2685  120A  118A  	fcall	___wmul
  3836  0185  1283               	bcf	3,5	;RP0=0, select bank0
  3837  0186  1303               	bcf	3,6	;RP1=0, select bank0
  3838  0187  0949               	comf	?___wmul,w
  3839  0188  00E0               	movwf	??_adcConvertMM
  3840  0189  094A               	comf	?___wmul+1,w
  3841  018A  00E1               	movwf	??_adcConvertMM+1
  3842  018B  0AE0               	incf	??_adcConvertMM,f
  3843  018C  1903               	skipnz
  3844  018D  0AE1               	incf	??_adcConvertMM+1,f
  3845  018E  0860               	movf	??_adcConvertMM,w
  3846  018F  3E68               	addlw	104
  3847  0190  00D1               	movwf	___lwdiv@dividend
  3848  0191  0861               	movf	??_adcConvertMM+1,w
  3849  0192  1803               	skipnc
  3850  0193  3E01               	addlw	1
  3851  0194  3E74               	addlw	116
  3852  0195  00D2               	movwf	___lwdiv@dividend+1
  3853  0196  120A  158A  26F9  120A  118A  	fcall	___lwdiv
  3854  019B  1283               	bcf	3,5	;RP0=0, select bank0
  3855  019C  1303               	bcf	3,6	;RP1=0, select bank0
  3856  019D  084F               	movf	?___lwdiv,w
  3857  019E  3E90               	addlw	144
  3858  019F  00A0               	movwf	_Distance	;volatile
  3859  01A0  0850               	movf	?___lwdiv+1,w
  3860  01A1  1803               	skipnc
  3861  01A2  3E01               	addlw	1
  3862  01A3  3E01               	addlw	1
  3863  01A4  00A1               	movwf	_Distance+1	;volatile
  3864  01A5                     l1780:	
  3865                           
  3866                           ;ADC.c: 73: if (adcRAW < 236 && adcRAW >= 194)
  3867  01A5  3000               	movlw	0
  3868  01A6  025F               	subwf	adcConvertMM@adcRAW+1,w
  3869  01A7  30EC               	movlw	236
  3870  01A8  1903               	skipnz
  3871  01A9  025E               	subwf	adcConvertMM@adcRAW,w
  3872  01AA  1803               	skipnc
  3873  01AB  29E4               	goto	l1786
  3874  01AC  3000               	movlw	0
  3875  01AD  025F               	subwf	adcConvertMM@adcRAW+1,w
  3876  01AE  30C2               	movlw	194
  3877  01AF  1903               	skipnz
  3878  01B0  025E               	subwf	adcConvertMM@adcRAW,w
  3879  01B1  1C03               	skipc
  3880  01B2  29E4               	goto	l1786
  3881                           
  3882                           ;ADC.c: 74: Distance = (((23600 - adcRAW*100)/42) + 500);
  3883  01B3  302A               	movlw	42
  3884  01B4  00CF               	movwf	___lwdiv@divisor
  3885  01B5  3000               	movlw	0
  3886  01B6  00D0               	movwf	___lwdiv@divisor+1
  3887  01B7  085F               	movf	adcConvertMM@adcRAW+1,w
  3888  01B8  00CA               	movwf	___wmul@multiplier+1
  3889  01B9  085E               	movf	adcConvertMM@adcRAW,w
  3890  01BA  00C9               	movwf	___wmul@multiplier
  3891  01BB  3064               	movlw	100
  3892  01BC  00CB               	movwf	___wmul@multiplicand
  3893  01BD  3000               	movlw	0
  3894  01BE  00CC               	movwf	___wmul@multiplicand+1
  3895  01BF  120A  158A  2685  120A  118A  	fcall	___wmul
  3896  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  3897  01C5  1303               	bcf	3,6	;RP1=0, select bank0
  3898  01C6  0949               	comf	?___wmul,w
  3899  01C7  00E0               	movwf	??_adcConvertMM
  3900  01C8  094A               	comf	?___wmul+1,w
  3901  01C9  00E1               	movwf	??_adcConvertMM+1
  3902  01CA  0AE0               	incf	??_adcConvertMM,f
  3903  01CB  1903               	skipnz
  3904  01CC  0AE1               	incf	??_adcConvertMM+1,f
  3905  01CD  0860               	movf	??_adcConvertMM,w
  3906  01CE  3E30               	addlw	48
  3907  01CF  00D1               	movwf	___lwdiv@dividend
  3908  01D0  0861               	movf	??_adcConvertMM+1,w
  3909  01D1  1803               	skipnc
  3910  01D2  3E01               	addlw	1
  3911  01D3  3E5C               	addlw	92
  3912  01D4  00D2               	movwf	___lwdiv@dividend+1
  3913  01D5  120A  158A  26F9  120A  118A  	fcall	___lwdiv
  3914  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  3915  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  3916  01DC  084F               	movf	?___lwdiv,w
  3917  01DD  3EF4               	addlw	244
  3918  01DE  00A0               	movwf	_Distance	;volatile
  3919  01DF  0850               	movf	?___lwdiv+1,w
  3920  01E0  1803               	skipnc
  3921  01E1  3E01               	addlw	1
  3922  01E2  3E01               	addlw	1
  3923  01E3  00A1               	movwf	_Distance+1	;volatile
  3924  01E4                     l1786:	
  3925                           
  3926                           ;ADC.c: 76: if (adcRAW < 194 && adcRAW >= 168)
  3927  01E4  3000               	movlw	0
  3928  01E5  025F               	subwf	adcConvertMM@adcRAW+1,w
  3929  01E6  30C2               	movlw	194
  3930  01E7  1903               	skipnz
  3931  01E8  025E               	subwf	adcConvertMM@adcRAW,w
  3932  01E9  1803               	skipnc
  3933  01EA  2A23               	goto	l1792
  3934  01EB  3000               	movlw	0
  3935  01EC  025F               	subwf	adcConvertMM@adcRAW+1,w
  3936  01ED  30A8               	movlw	168
  3937  01EE  1903               	skipnz
  3938  01EF  025E               	subwf	adcConvertMM@adcRAW,w
  3939  01F0  1C03               	skipc
  3940  01F1  2A23               	goto	l1792
  3941                           
  3942                           ;ADC.c: 77: Distance = (((19400 - adcRAW*100)/26) + 600);
  3943  01F2  301A               	movlw	26
  3944  01F3  00CF               	movwf	___lwdiv@divisor
  3945  01F4  3000               	movlw	0
  3946  01F5  00D0               	movwf	___lwdiv@divisor+1
  3947  01F6  085F               	movf	adcConvertMM@adcRAW+1,w
  3948  01F7  00CA               	movwf	___wmul@multiplier+1
  3949  01F8  085E               	movf	adcConvertMM@adcRAW,w
  3950  01F9  00C9               	movwf	___wmul@multiplier
  3951  01FA  3064               	movlw	100
  3952  01FB  00CB               	movwf	___wmul@multiplicand
  3953  01FC  3000               	movlw	0
  3954  01FD  00CC               	movwf	___wmul@multiplicand+1
  3955  01FE  120A  158A  2685  120A  118A  	fcall	___wmul
  3956  0203  1283               	bcf	3,5	;RP0=0, select bank0
  3957  0204  1303               	bcf	3,6	;RP1=0, select bank0
  3958  0205  0949               	comf	?___wmul,w
  3959  0206  00E0               	movwf	??_adcConvertMM
  3960  0207  094A               	comf	?___wmul+1,w
  3961  0208  00E1               	movwf	??_adcConvertMM+1
  3962  0209  0AE0               	incf	??_adcConvertMM,f
  3963  020A  1903               	skipnz
  3964  020B  0AE1               	incf	??_adcConvertMM+1,f
  3965  020C  0860               	movf	??_adcConvertMM,w
  3966  020D  3EC8               	addlw	200
  3967  020E  00D1               	movwf	___lwdiv@dividend
  3968  020F  0861               	movf	??_adcConvertMM+1,w
  3969  0210  1803               	skipnc
  3970  0211  3E01               	addlw	1
  3971  0212  3E4B               	addlw	75
  3972  0213  00D2               	movwf	___lwdiv@dividend+1
  3973  0214  120A  158A  26F9  120A  118A  	fcall	___lwdiv
  3974  0219  1283               	bcf	3,5	;RP0=0, select bank0
  3975  021A  1303               	bcf	3,6	;RP1=0, select bank0
  3976  021B  084F               	movf	?___lwdiv,w
  3977  021C  3E58               	addlw	88
  3978  021D  00A0               	movwf	_Distance	;volatile
  3979  021E  0850               	movf	?___lwdiv+1,w
  3980  021F  1803               	skipnc
  3981  0220  3E01               	addlw	1
  3982  0221  3E02               	addlw	2
  3983  0222  00A1               	movwf	_Distance+1	;volatile
  3984  0223                     l1792:	
  3985                           
  3986                           ;ADC.c: 79: if (adcRAW < 168 && adcRAW >= 144)
  3987  0223  3000               	movlw	0
  3988  0224  025F               	subwf	adcConvertMM@adcRAW+1,w
  3989  0225  30A8               	movlw	168
  3990  0226  1903               	skipnz
  3991  0227  025E               	subwf	adcConvertMM@adcRAW,w
  3992  0228  1803               	skipnc
  3993  0229  2A62               	goto	l1798
  3994  022A  3000               	movlw	0
  3995  022B  025F               	subwf	adcConvertMM@adcRAW+1,w
  3996  022C  3090               	movlw	144
  3997  022D  1903               	skipnz
  3998  022E  025E               	subwf	adcConvertMM@adcRAW,w
  3999  022F  1C03               	skipc
  4000  0230  2A62               	goto	l1798
  4001                           
  4002                           ;ADC.c: 80: Distance = (((16800 - adcRAW*100)/24) + 700);
  4003  0231  3018               	movlw	24
  4004  0232  00CF               	movwf	___lwdiv@divisor
  4005  0233  3000               	movlw	0
  4006  0234  00D0               	movwf	___lwdiv@divisor+1
  4007  0235  085F               	movf	adcConvertMM@adcRAW+1,w
  4008  0236  00CA               	movwf	___wmul@multiplier+1
  4009  0237  085E               	movf	adcConvertMM@adcRAW,w
  4010  0238  00C9               	movwf	___wmul@multiplier
  4011  0239  3064               	movlw	100
  4012  023A  00CB               	movwf	___wmul@multiplicand
  4013  023B  3000               	movlw	0
  4014  023C  00CC               	movwf	___wmul@multiplicand+1
  4015  023D  120A  158A  2685  120A  118A  	fcall	___wmul
  4016  0242  1283               	bcf	3,5	;RP0=0, select bank0
  4017  0243  1303               	bcf	3,6	;RP1=0, select bank0
  4018  0244  0949               	comf	?___wmul,w
  4019  0245  00E0               	movwf	??_adcConvertMM
  4020  0246  094A               	comf	?___wmul+1,w
  4021  0247  00E1               	movwf	??_adcConvertMM+1
  4022  0248  0AE0               	incf	??_adcConvertMM,f
  4023  0249  1903               	skipnz
  4024  024A  0AE1               	incf	??_adcConvertMM+1,f
  4025  024B  0860               	movf	??_adcConvertMM,w
  4026  024C  3EA0               	addlw	160
  4027  024D  00D1               	movwf	___lwdiv@dividend
  4028  024E  0861               	movf	??_adcConvertMM+1,w
  4029  024F  1803               	skipnc
  4030  0250  3E01               	addlw	1
  4031  0251  3E41               	addlw	65
  4032  0252  00D2               	movwf	___lwdiv@dividend+1
  4033  0253  120A  158A  26F9  120A  118A  	fcall	___lwdiv
  4034  0258  1283               	bcf	3,5	;RP0=0, select bank0
  4035  0259  1303               	bcf	3,6	;RP1=0, select bank0
  4036  025A  084F               	movf	?___lwdiv,w
  4037  025B  3EBC               	addlw	188
  4038  025C  00A0               	movwf	_Distance	;volatile
  4039  025D  0850               	movf	?___lwdiv+1,w
  4040  025E  1803               	skipnc
  4041  025F  3E01               	addlw	1
  4042  0260  3E02               	addlw	2
  4043  0261  00A1               	movwf	_Distance+1	;volatile
  4044  0262                     l1798:	
  4045                           
  4046                           ;ADC.c: 82: if (adcRAW < 144 && adcRAW >= 129)
  4047  0262  3000               	movlw	0
  4048  0263  025F               	subwf	adcConvertMM@adcRAW+1,w
  4049  0264  3090               	movlw	144
  4050  0265  1903               	skipnz
  4051  0266  025E               	subwf	adcConvertMM@adcRAW,w
  4052  0267  1803               	skipnc
  4053  0268  2AA1               	goto	l1804
  4054  0269  3000               	movlw	0
  4055  026A  025F               	subwf	adcConvertMM@adcRAW+1,w
  4056  026B  3081               	movlw	129
  4057  026C  1903               	skipnz
  4058  026D  025E               	subwf	adcConvertMM@adcRAW,w
  4059  026E  1C03               	skipc
  4060  026F  2AA1               	goto	l1804
  4061                           
  4062                           ;ADC.c: 83: Distance = (((14400 - adcRAW*100)/15) + 800);
  4063  0270  300F               	movlw	15
  4064  0271  00CF               	movwf	___lwdiv@divisor
  4065  0272  3000               	movlw	0
  4066  0273  00D0               	movwf	___lwdiv@divisor+1
  4067  0274  085F               	movf	adcConvertMM@adcRAW+1,w
  4068  0275  00CA               	movwf	___wmul@multiplier+1
  4069  0276  085E               	movf	adcConvertMM@adcRAW,w
  4070  0277  00C9               	movwf	___wmul@multiplier
  4071  0278  3064               	movlw	100
  4072  0279  00CB               	movwf	___wmul@multiplicand
  4073  027A  3000               	movlw	0
  4074  027B  00CC               	movwf	___wmul@multiplicand+1
  4075  027C  120A  158A  2685  120A  118A  	fcall	___wmul
  4076  0281  1283               	bcf	3,5	;RP0=0, select bank0
  4077  0282  1303               	bcf	3,6	;RP1=0, select bank0
  4078  0283  0949               	comf	?___wmul,w
  4079  0284  00E0               	movwf	??_adcConvertMM
  4080  0285  094A               	comf	?___wmul+1,w
  4081  0286  00E1               	movwf	??_adcConvertMM+1
  4082  0287  0AE0               	incf	??_adcConvertMM,f
  4083  0288  1903               	skipnz
  4084  0289  0AE1               	incf	??_adcConvertMM+1,f
  4085  028A  0860               	movf	??_adcConvertMM,w
  4086  028B  3E40               	addlw	64
  4087  028C  00D1               	movwf	___lwdiv@dividend
  4088  028D  0861               	movf	??_adcConvertMM+1,w
  4089  028E  1803               	skipnc
  4090  028F  3E01               	addlw	1
  4091  0290  3E38               	addlw	56
  4092  0291  00D2               	movwf	___lwdiv@dividend+1
  4093  0292  120A  158A  26F9  120A  118A  	fcall	___lwdiv
  4094  0297  1283               	bcf	3,5	;RP0=0, select bank0
  4095  0298  1303               	bcf	3,6	;RP1=0, select bank0
  4096  0299  084F               	movf	?___lwdiv,w
  4097  029A  3E20               	addlw	32
  4098  029B  00A0               	movwf	_Distance	;volatile
  4099  029C  0850               	movf	?___lwdiv+1,w
  4100  029D  1803               	skipnc
  4101  029E  3E01               	addlw	1
  4102  029F  3E03               	addlw	3
  4103  02A0  00A1               	movwf	_Distance+1	;volatile
  4104  02A1                     l1804:	
  4105                           
  4106                           ;ADC.c: 85: if (adcRAW < 129 && adcRAW >= 110)
  4107  02A1  3000               	movlw	0
  4108  02A2  025F               	subwf	adcConvertMM@adcRAW+1,w
  4109  02A3  3081               	movlw	129
  4110  02A4  1903               	skipnz
  4111  02A5  025E               	subwf	adcConvertMM@adcRAW,w
  4112  02A6  1803               	skipnc
  4113  02A7  2AE0               	goto	l1810
  4114  02A8  3000               	movlw	0
  4115  02A9  025F               	subwf	adcConvertMM@adcRAW+1,w
  4116  02AA  306E               	movlw	110
  4117  02AB  1903               	skipnz
  4118  02AC  025E               	subwf	adcConvertMM@adcRAW,w
  4119  02AD  1C03               	skipc
  4120  02AE  2AE0               	goto	l1810
  4121                           
  4122                           ;ADC.c: 86: Distance = (((12900 - adcRAW*100)/19) + 900 + 50);
  4123  02AF  3013               	movlw	19
  4124  02B0  00CF               	movwf	___lwdiv@divisor
  4125  02B1  3000               	movlw	0
  4126  02B2  00D0               	movwf	___lwdiv@divisor+1
  4127  02B3  085F               	movf	adcConvertMM@adcRAW+1,w
  4128  02B4  00CA               	movwf	___wmul@multiplier+1
  4129  02B5  085E               	movf	adcConvertMM@adcRAW,w
  4130  02B6  00C9               	movwf	___wmul@multiplier
  4131  02B7  3064               	movlw	100
  4132  02B8  00CB               	movwf	___wmul@multiplicand
  4133  02B9  3000               	movlw	0
  4134  02BA  00CC               	movwf	___wmul@multiplicand+1
  4135  02BB  120A  158A  2685  120A  118A  	fcall	___wmul
  4136  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  4137  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  4138  02C2  0949               	comf	?___wmul,w
  4139  02C3  00E0               	movwf	??_adcConvertMM
  4140  02C4  094A               	comf	?___wmul+1,w
  4141  02C5  00E1               	movwf	??_adcConvertMM+1
  4142  02C6  0AE0               	incf	??_adcConvertMM,f
  4143  02C7  1903               	skipnz
  4144  02C8  0AE1               	incf	??_adcConvertMM+1,f
  4145  02C9  0860               	movf	??_adcConvertMM,w
  4146  02CA  3E64               	addlw	100
  4147  02CB  00D1               	movwf	___lwdiv@dividend
  4148  02CC  0861               	movf	??_adcConvertMM+1,w
  4149  02CD  1803               	skipnc
  4150  02CE  3E01               	addlw	1
  4151  02CF  3E32               	addlw	50
  4152  02D0  00D2               	movwf	___lwdiv@dividend+1
  4153  02D1  120A  158A  26F9  120A  118A  	fcall	___lwdiv
  4154  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  4155  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  4156  02D8  084F               	movf	?___lwdiv,w
  4157  02D9  3EB6               	addlw	182
  4158  02DA  00A0               	movwf	_Distance	;volatile
  4159  02DB  0850               	movf	?___lwdiv+1,w
  4160  02DC  1803               	skipnc
  4161  02DD  3E01               	addlw	1
  4162  02DE  3E03               	addlw	3
  4163  02DF  00A1               	movwf	_Distance+1	;volatile
  4164  02E0                     l1810:	
  4165                           
  4166                           ;ADC.c: 88: if (adcRAW < 110 && adcRAW >= 98)
  4167  02E0  3000               	movlw	0
  4168  02E1  025F               	subwf	adcConvertMM@adcRAW+1,w
  4169  02E2  306E               	movlw	110
  4170  02E3  1903               	skipnz
  4171  02E4  025E               	subwf	adcConvertMM@adcRAW,w
  4172  02E5  1803               	skipnc
  4173  02E6  2B1F               	goto	l1816
  4174  02E7  3000               	movlw	0
  4175  02E8  025F               	subwf	adcConvertMM@adcRAW+1,w
  4176  02E9  3062               	movlw	98
  4177  02EA  1903               	skipnz
  4178  02EB  025E               	subwf	adcConvertMM@adcRAW,w
  4179  02EC  1C03               	skipc
  4180  02ED  2B1F               	goto	l1816
  4181                           
  4182                           ;ADC.c: 89: Distance = (((11000 - adcRAW*100)/12) + 1000 + 100);
  4183  02EE  300C               	movlw	12
  4184  02EF  00CF               	movwf	___lwdiv@divisor
  4185  02F0  3000               	movlw	0
  4186  02F1  00D0               	movwf	___lwdiv@divisor+1
  4187  02F2  085F               	movf	adcConvertMM@adcRAW+1,w
  4188  02F3  00CA               	movwf	___wmul@multiplier+1
  4189  02F4  085E               	movf	adcConvertMM@adcRAW,w
  4190  02F5  00C9               	movwf	___wmul@multiplier
  4191  02F6  3064               	movlw	100
  4192  02F7  00CB               	movwf	___wmul@multiplicand
  4193  02F8  3000               	movlw	0
  4194  02F9  00CC               	movwf	___wmul@multiplicand+1
  4195  02FA  120A  158A  2685  120A  118A  	fcall	___wmul
  4196  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  4197  0300  1303               	bcf	3,6	;RP1=0, select bank0
  4198  0301  0949               	comf	?___wmul,w
  4199  0302  00E0               	movwf	??_adcConvertMM
  4200  0303  094A               	comf	?___wmul+1,w
  4201  0304  00E1               	movwf	??_adcConvertMM+1
  4202  0305  0AE0               	incf	??_adcConvertMM,f
  4203  0306  1903               	skipnz
  4204  0307  0AE1               	incf	??_adcConvertMM+1,f
  4205  0308  0860               	movf	??_adcConvertMM,w
  4206  0309  3EF8               	addlw	248
  4207  030A  00D1               	movwf	___lwdiv@dividend
  4208  030B  0861               	movf	??_adcConvertMM+1,w
  4209  030C  1803               	skipnc
  4210  030D  3E01               	addlw	1
  4211  030E  3E2A               	addlw	42
  4212  030F  00D2               	movwf	___lwdiv@dividend+1
  4213  0310  120A  158A  26F9  120A  118A  	fcall	___lwdiv
  4214  0315  1283               	bcf	3,5	;RP0=0, select bank0
  4215  0316  1303               	bcf	3,6	;RP1=0, select bank0
  4216  0317  084F               	movf	?___lwdiv,w
  4217  0318  3E4C               	addlw	76
  4218  0319  00A0               	movwf	_Distance	;volatile
  4219  031A  0850               	movf	?___lwdiv+1,w
  4220  031B  1803               	skipnc
  4221  031C  3E01               	addlw	1
  4222  031D  3E04               	addlw	4
  4223  031E  00A1               	movwf	_Distance+1	;volatile
  4224  031F                     l1816:	
  4225                           
  4226                           ;ADC.c: 91: if (adcRAW < 98 && adcRAW >= 90)
  4227  031F  3000               	movlw	0
  4228  0320  025F               	subwf	adcConvertMM@adcRAW+1,w
  4229  0321  3062               	movlw	98
  4230  0322  1903               	skipnz
  4231  0323  025E               	subwf	adcConvertMM@adcRAW,w
  4232  0324  1803               	skipnc
  4233  0325  2B5C               	goto	l1822
  4234  0326  3000               	movlw	0
  4235  0327  025F               	subwf	adcConvertMM@adcRAW+1,w
  4236  0328  305A               	movlw	90
  4237  0329  1903               	skipnz
  4238  032A  025E               	subwf	adcConvertMM@adcRAW,w
  4239  032B  1C03               	skipc
  4240  032C  2B5C               	goto	l1822
  4241                           
  4242                           ;ADC.c: 92: Distance = (((9800 - adcRAW*100)/8) + 1100 + 150);
  4243  032D  085F               	movf	adcConvertMM@adcRAW+1,w
  4244  032E  00CA               	movwf	___wmul@multiplier+1
  4245  032F  085E               	movf	adcConvertMM@adcRAW,w
  4246  0330  00C9               	movwf	___wmul@multiplier
  4247  0331  3064               	movlw	100
  4248  0332  00CB               	movwf	___wmul@multiplicand
  4249  0333  3000               	movlw	0
  4250  0334  00CC               	movwf	___wmul@multiplicand+1
  4251  0335  120A  158A  2685  120A  118A  	fcall	___wmul
  4252  033A  1283               	bcf	3,5	;RP0=0, select bank0
  4253  033B  1303               	bcf	3,6	;RP1=0, select bank0
  4254  033C  0949               	comf	?___wmul,w
  4255  033D  00E0               	movwf	??_adcConvertMM
  4256  033E  094A               	comf	?___wmul+1,w
  4257  033F  00E1               	movwf	??_adcConvertMM+1
  4258  0340  0AE0               	incf	??_adcConvertMM,f
  4259  0341  1903               	skipnz
  4260  0342  0AE1               	incf	??_adcConvertMM+1,f
  4261  0343  0860               	movf	??_adcConvertMM,w
  4262  0344  3E48               	addlw	72
  4263  0345  00E2               	movwf	??_adcConvertMM+2
  4264  0346  0861               	movf	??_adcConvertMM+1,w
  4265  0347  1803               	skipnc
  4266  0348  3E01               	addlw	1
  4267  0349  3E26               	addlw	38
  4268  034A  00E3               	movwf	??_adcConvertMM+3
  4269  034B  1003               	clrc
  4270  034C  0CE3               	rrf	??_adcConvertMM+3,f
  4271  034D  0CE2               	rrf	??_adcConvertMM+2,f
  4272  034E  1003               	clrc
  4273  034F  0CE3               	rrf	??_adcConvertMM+3,f
  4274  0350  0CE2               	rrf	??_adcConvertMM+2,f
  4275  0351  1003               	clrc
  4276  0352  0CE3               	rrf	??_adcConvertMM+3,f
  4277  0353  0CE2               	rrf	??_adcConvertMM+2,f
  4278  0354  0862               	movf	??_adcConvertMM+2,w
  4279  0355  3EE2               	addlw	226
  4280  0356  00A0               	movwf	_Distance	;volatile
  4281  0357  0863               	movf	??_adcConvertMM+3,w
  4282  0358  1803               	skipnc
  4283  0359  3E01               	addlw	1
  4284  035A  3E04               	addlw	4
  4285  035B  00A1               	movwf	_Distance+1	;volatile
  4286  035C                     l1822:	
  4287                           
  4288                           ;ADC.c: 94: if(adcRAW < 90 || adcRAW >= 517)
  4289  035C  3000               	movlw	0
  4290  035D  025F               	subwf	adcConvertMM@adcRAW+1,w
  4291  035E  305A               	movlw	90
  4292  035F  1903               	skipnz
  4293  0360  025E               	subwf	adcConvertMM@adcRAW,w
  4294  0361  1C03               	skipc
  4295  0362  2B6A               	goto	l1826
  4296  0363  3002               	movlw	2
  4297  0364  025F               	subwf	adcConvertMM@adcRAW+1,w
  4298  0365  3005               	movlw	5
  4299  0366  1903               	skipnz
  4300  0367  025E               	subwf	adcConvertMM@adcRAW,w
  4301  0368  1C03               	skipc
  4302  0369  0008               	return
  4303  036A                     l1826:	
  4304                           
  4305                           ;ADC.c: 95: Distance = 0;
  4306  036A  01A0               	clrf	_Distance	;volatile
  4307  036B  01A1               	clrf	_Distance+1	;volatile
  4308  036C  0008               	return
  4309  036D                     __end_of_adcConvertMM:	
  4310                           ;ADC.c: 97: return(Distance);
  4311                           ;	Return value of _adcConvertMM is never used
  4312                           
  4313                           
  4314                           	psect	text20
  4315  0E85                     __ptext20:	
  4316 ;; *************** function ___wmul *****************
  4317 ;; Defined at:
  4318 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4321 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4322 ;; Auto vars:     Size  Location     Type
  4323 ;;  product         2    4[BANK0 ] unsigned int 
  4324 ;; Return value:  Size  Location     Type
  4325 ;;                  2    0[BANK0 ] unsigned int 
  4326 ;; Registers used:
  4327 ;;		wreg, status,2, status,0
  4328 ;; Tracked objects:
  4329 ;;		On entry : 0/0
  4330 ;;		On exit  : 0/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4333 ;;      Params:         0       4       0       0       0
  4334 ;;      Locals:         0       2       0       0       0
  4335 ;;      Temps:          0       0       0       0       0
  4336 ;;      Totals:         0       6       0       0       0
  4337 ;;Total ram usage:        6 bytes
  4338 ;; Hardware stack levels used:    1
  4339 ;; Hardware stack levels required when called:    2
  4340 ;; This function calls:
  4341 ;;		Nothing
  4342 ;; This function is called by:
  4343 ;;		_adcConvertMM
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           
  4348                           ;psect for function ___wmul
  4349  0E85                     ___wmul:	
  4350                           
  4351                           ;incstack = 0
  4352                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4353  0E85  1283               	bcf	3,5	;RP0=0, select bank0
  4354  0E86  1303               	bcf	3,6	;RP1=0, select bank0
  4355  0E87  01CD               	clrf	___wmul@product
  4356  0E88  01CE               	clrf	___wmul@product+1
  4357  0E89                     l1608:	
  4358  0E89  1C49               	btfss	___wmul@multiplier,0
  4359  0E8A  2E91               	goto	l582
  4360  0E8B  084B               	movf	___wmul@multiplicand,w
  4361  0E8C  07CD               	addwf	___wmul@product,f
  4362  0E8D  1803               	skipnc
  4363  0E8E  0ACE               	incf	___wmul@product+1,f
  4364  0E8F  084C               	movf	___wmul@multiplicand+1,w
  4365  0E90  07CE               	addwf	___wmul@product+1,f
  4366  0E91                     l582:	
  4367  0E91  3001               	movlw	1
  4368  0E92                     u955:	
  4369  0E92  1003               	clrc
  4370  0E93  0DCB               	rlf	___wmul@multiplicand,f
  4371  0E94  0DCC               	rlf	___wmul@multiplicand+1,f
  4372  0E95  3EFF               	addlw	-1
  4373  0E96  1D03               	skipz
  4374  0E97  2E92               	goto	u955
  4375  0E98  3001               	movlw	1
  4376  0E99                     u965:	
  4377  0E99  1003               	clrc
  4378  0E9A  0CCA               	rrf	___wmul@multiplier+1,f
  4379  0E9B  0CC9               	rrf	___wmul@multiplier,f
  4380  0E9C  3EFF               	addlw	-1
  4381  0E9D  1D03               	skipz
  4382  0E9E  2E99               	goto	u965
  4383  0E9F  0849               	movf	___wmul@multiplier,w
  4384  0EA0  044A               	iorwf	___wmul@multiplier+1,w
  4385  0EA1  1D03               	btfss	3,2
  4386  0EA2  2E89               	goto	l1608
  4387  0EA3  084E               	movf	___wmul@product+1,w
  4388  0EA4  00CA               	movwf	?___wmul+1
  4389  0EA5  084D               	movf	___wmul@product,w
  4390  0EA6  00C9               	movwf	?___wmul
  4391  0EA7  0008               	return
  4392  0EA8                     __end_of___wmul:	
  4393                           
  4394                           	psect	text21
  4395  0EF9                     __ptext21:	
  4396 ;; *************** function ___lwdiv *****************
  4397 ;; Defined at:
  4398 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;  divisor         2    6[BANK0 ] unsigned int 
  4401 ;;  dividend        2    8[BANK0 ] unsigned int 
  4402 ;; Auto vars:     Size  Location     Type
  4403 ;;  quotient        2   11[BANK0 ] unsigned int 
  4404 ;;  counter         1   13[BANK0 ] unsigned char 
  4405 ;; Return value:  Size  Location     Type
  4406 ;;                  2    6[BANK0 ] unsigned int 
  4407 ;; Registers used:
  4408 ;;		wreg, status,2, status,0
  4409 ;; Tracked objects:
  4410 ;;		On entry : 0/0
  4411 ;;		On exit  : 0/0
  4412 ;;		Unchanged: 0/0
  4413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4414 ;;      Params:         0       4       0       0       0
  4415 ;;      Locals:         0       3       0       0       0
  4416 ;;      Temps:          0       1       0       0       0
  4417 ;;      Totals:         0       8       0       0       0
  4418 ;;Total ram usage:        8 bytes
  4419 ;; Hardware stack levels used:    1
  4420 ;; Hardware stack levels required when called:    2
  4421 ;; This function calls:
  4422 ;;		Nothing
  4423 ;; This function is called by:
  4424 ;;		_adcConvertMM
  4425 ;; This function uses a non-reentrant model
  4426 ;;
  4427                           
  4428                           
  4429                           ;psect for function ___lwdiv
  4430  0EF9                     ___lwdiv:	
  4431                           
  4432                           ;incstack = 0
  4433                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4434  0EF9  1283               	bcf	3,5	;RP0=0, select bank0
  4435  0EFA  1303               	bcf	3,6	;RP1=0, select bank0
  4436  0EFB  01D4               	clrf	___lwdiv@quotient
  4437  0EFC  01D5               	clrf	___lwdiv@quotient+1
  4438  0EFD  084F               	movf	___lwdiv@divisor,w
  4439  0EFE  0450               	iorwf	___lwdiv@divisor+1,w
  4440  0EFF  1903               	btfsc	3,2
  4441  0F00  2F32               	goto	l1682
  4442  0F01  01D6               	clrf	___lwdiv@counter
  4443  0F02  0AD6               	incf	___lwdiv@counter,f
  4444  0F03                     l1670:	
  4445  0F03  1BD0               	btfsc	___lwdiv@divisor+1,7
  4446  0F04  2F11               	goto	l1672
  4447  0F05  3001               	movlw	1
  4448  0F06                     u1095:	
  4449  0F06  1003               	clrc
  4450  0F07  0DCF               	rlf	___lwdiv@divisor,f
  4451  0F08  0DD0               	rlf	___lwdiv@divisor+1,f
  4452  0F09  3EFF               	addlw	-1
  4453  0F0A  1D03               	skipz
  4454  0F0B  2F06               	goto	u1095
  4455  0F0C  3001               	movlw	1
  4456  0F0D  00D3               	movwf	??___lwdiv
  4457  0F0E  0853               	movf	??___lwdiv,w
  4458  0F0F  07D6               	addwf	___lwdiv@counter,f
  4459  0F10  2F03               	goto	l1670
  4460  0F11                     l1672:	
  4461  0F11  3001               	movlw	1
  4462  0F12                     u1115:	
  4463  0F12  1003               	clrc
  4464  0F13  0DD4               	rlf	___lwdiv@quotient,f
  4465  0F14  0DD5               	rlf	___lwdiv@quotient+1,f
  4466  0F15  3EFF               	addlw	-1
  4467  0F16  1D03               	skipz
  4468  0F17  2F12               	goto	u1115
  4469  0F18  0850               	movf	___lwdiv@divisor+1,w
  4470  0F19  0252               	subwf	___lwdiv@dividend+1,w
  4471  0F1A  1D03               	skipz
  4472  0F1B  2F1E               	goto	u1125
  4473  0F1C  084F               	movf	___lwdiv@divisor,w
  4474  0F1D  0251               	subwf	___lwdiv@dividend,w
  4475  0F1E                     u1125:	
  4476  0F1E  1C03               	skipc
  4477  0F1F  2F27               	goto	l1678
  4478  0F20  084F               	movf	___lwdiv@divisor,w
  4479  0F21  02D1               	subwf	___lwdiv@dividend,f
  4480  0F22  0850               	movf	___lwdiv@divisor+1,w
  4481  0F23  1C03               	skipc
  4482  0F24  03D2               	decf	___lwdiv@dividend+1,f
  4483  0F25  02D2               	subwf	___lwdiv@dividend+1,f
  4484  0F26  1454               	bsf	___lwdiv@quotient,0
  4485  0F27                     l1678:	
  4486  0F27  3001               	movlw	1
  4487  0F28                     u1135:	
  4488  0F28  1003               	clrc
  4489  0F29  0CD0               	rrf	___lwdiv@divisor+1,f
  4490  0F2A  0CCF               	rrf	___lwdiv@divisor,f
  4491  0F2B  3EFF               	addlw	-1
  4492  0F2C  1D03               	skipz
  4493  0F2D  2F28               	goto	u1135
  4494  0F2E  3001               	movlw	1
  4495  0F2F  02D6               	subwf	___lwdiv@counter,f
  4496  0F30  1D03               	btfss	3,2
  4497  0F31  2F11               	goto	l1672
  4498  0F32                     l1682:	
  4499  0F32  0855               	movf	___lwdiv@quotient+1,w
  4500  0F33  00D0               	movwf	?___lwdiv+1
  4501  0F34  0854               	movf	___lwdiv@quotient,w
  4502  0F35  00CF               	movwf	?___lwdiv
  4503  0F36  0008               	return
  4504  0F37                     __end_of___lwdiv:	
  4505                           
  4506                           	psect	text22
  4507  0615                     __ptext22:	
  4508 ;; *************** function ___aldiv *****************
  4509 ;; Defined at:
  4510 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;  divisor         4    6[BANK0 ] long 
  4513 ;;  dividend        4   10[BANK0 ] long 
  4514 ;; Auto vars:     Size  Location     Type
  4515 ;;  quotient        4   17[BANK0 ] long 
  4516 ;;  sign            1   16[BANK0 ] unsigned char 
  4517 ;;  counter         1   15[BANK0 ] unsigned char 
  4518 ;; Return value:  Size  Location     Type
  4519 ;;                  4    6[BANK0 ] long 
  4520 ;; Registers used:
  4521 ;;		wreg, status,2, status,0
  4522 ;; Tracked objects:
  4523 ;;		On entry : 0/0
  4524 ;;		On exit  : 0/0
  4525 ;;		Unchanged: 0/0
  4526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4527 ;;      Params:         0       8       0       0       0
  4528 ;;      Locals:         0       6       0       0       0
  4529 ;;      Temps:          0       1       0       0       0
  4530 ;;      Totals:         0      15       0       0       0
  4531 ;;Total ram usage:       15 bytes
  4532 ;; Hardware stack levels used:    1
  4533 ;; Hardware stack levels required when called:    2
  4534 ;; This function calls:
  4535 ;;		Nothing
  4536 ;; This function is called by:
  4537 ;;		_adcConvertMM
  4538 ;; This function uses a non-reentrant model
  4539 ;;
  4540                           
  4541                           
  4542                           ;psect for function ___aldiv
  4543  0615                     ___aldiv:	
  4544                           
  4545                           ;incstack = 0
  4546                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4547  0615  1283               	bcf	3,5	;RP0=0, select bank0
  4548  0616  1303               	bcf	3,6	;RP1=0, select bank0
  4549  0617  01D9               	clrf	___aldiv@sign
  4550  0618  1FD2               	btfss	___aldiv@divisor+3,7
  4551  0619  2E27               	goto	l637
  4552  061A  09CF               	comf	___aldiv@divisor,f
  4553  061B  09D0               	comf	___aldiv@divisor+1,f
  4554  061C  09D1               	comf	___aldiv@divisor+2,f
  4555  061D  09D2               	comf	___aldiv@divisor+3,f
  4556  061E  0ACF               	incf	___aldiv@divisor,f
  4557  061F  1903               	skipnz
  4558  0620  0AD0               	incf	___aldiv@divisor+1,f
  4559  0621  1903               	skipnz
  4560  0622  0AD1               	incf	___aldiv@divisor+2,f
  4561  0623  1903               	skipnz
  4562  0624  0AD2               	incf	___aldiv@divisor+3,f
  4563  0625  01D9               	clrf	___aldiv@sign
  4564  0626  0AD9               	incf	___aldiv@sign,f
  4565  0627                     l637:	
  4566  0627  1FD6               	btfss	___aldiv@dividend+3,7
  4567  0628  2E38               	goto	l1630
  4568  0629  09D3               	comf	___aldiv@dividend,f
  4569  062A  09D4               	comf	___aldiv@dividend+1,f
  4570  062B  09D5               	comf	___aldiv@dividend+2,f
  4571  062C  09D6               	comf	___aldiv@dividend+3,f
  4572  062D  0AD3               	incf	___aldiv@dividend,f
  4573  062E  1903               	skipnz
  4574  062F  0AD4               	incf	___aldiv@dividend+1,f
  4575  0630  1903               	skipnz
  4576  0631  0AD5               	incf	___aldiv@dividend+2,f
  4577  0632  1903               	skipnz
  4578  0633  0AD6               	incf	___aldiv@dividend+3,f
  4579  0634  3001               	movlw	1
  4580  0635  00D7               	movwf	??___aldiv
  4581  0636  0857               	movf	??___aldiv,w
  4582  0637  06D9               	xorwf	___aldiv@sign,f
  4583  0638                     l1630:	
  4584  0638  3000               	movlw	0
  4585  0639  00DD               	movwf	___aldiv@quotient+3
  4586  063A  3000               	movlw	0
  4587  063B  00DC               	movwf	___aldiv@quotient+2
  4588  063C  3000               	movlw	0
  4589  063D  00DB               	movwf	___aldiv@quotient+1
  4590  063E  3000               	movlw	0
  4591  063F  00DA               	movwf	___aldiv@quotient
  4592  0640  0852               	movf	___aldiv@divisor+3,w
  4593  0641  0451               	iorwf	___aldiv@divisor+2,w
  4594  0642  0450               	iorwf	___aldiv@divisor+1,w
  4595  0643  044F               	iorwf	___aldiv@divisor,w
  4596  0644  1903               	skipnz
  4597  0645  2E8D               	goto	l1652
  4598  0646  01D8               	clrf	___aldiv@counter
  4599  0647  0AD8               	incf	___aldiv@counter,f
  4600  0648                     l1638:	
  4601  0648  1BD2               	btfsc	___aldiv@divisor+3,7
  4602  0649  2E58               	goto	l1640
  4603  064A  3001               	movlw	1
  4604  064B  00D7               	movwf	??___aldiv
  4605  064C                     u1015:	
  4606  064C  1003               	clrc
  4607  064D  0DCF               	rlf	___aldiv@divisor,f
  4608  064E  0DD0               	rlf	___aldiv@divisor+1,f
  4609  064F  0DD1               	rlf	___aldiv@divisor+2,f
  4610  0650  0DD2               	rlf	___aldiv@divisor+3,f
  4611  0651  0BD7               	decfsz	??___aldiv,f
  4612  0652  2E4C               	goto	u1015
  4613  0653  3001               	movlw	1
  4614  0654  00D7               	movwf	??___aldiv
  4615  0655  0857               	movf	??___aldiv,w
  4616  0656  07D8               	addwf	___aldiv@counter,f
  4617  0657  2E48               	goto	l1638
  4618  0658                     l1640:	
  4619  0658  3001               	movlw	1
  4620  0659  00D7               	movwf	??___aldiv
  4621  065A                     u1035:	
  4622  065A  1003               	clrc
  4623  065B  0DDA               	rlf	___aldiv@quotient,f
  4624  065C  0DDB               	rlf	___aldiv@quotient+1,f
  4625  065D  0DDC               	rlf	___aldiv@quotient+2,f
  4626  065E  0DDD               	rlf	___aldiv@quotient+3,f
  4627  065F  0BD7               	decfsz	??___aldiv,f
  4628  0660  2E5A               	goto	u1035
  4629  0661  0852               	movf	___aldiv@divisor+3,w
  4630  0662  0256               	subwf	___aldiv@dividend+3,w
  4631  0663  1D03               	skipz
  4632  0664  2E6F               	goto	u1045
  4633  0665  0851               	movf	___aldiv@divisor+2,w
  4634  0666  0255               	subwf	___aldiv@dividend+2,w
  4635  0667  1D03               	skipz
  4636  0668  2E6F               	goto	u1045
  4637  0669  0850               	movf	___aldiv@divisor+1,w
  4638  066A  0254               	subwf	___aldiv@dividend+1,w
  4639  066B  1D03               	skipz
  4640  066C  2E6F               	goto	u1045
  4641  066D  084F               	movf	___aldiv@divisor,w
  4642  066E  0253               	subwf	___aldiv@dividend,w
  4643  066F                     u1045:	
  4644  066F  1C03               	skipc
  4645  0670  2E80               	goto	l1648
  4646  0671  084F               	movf	___aldiv@divisor,w
  4647  0672  02D3               	subwf	___aldiv@dividend,f
  4648  0673  0850               	movf	___aldiv@divisor+1,w
  4649  0674  1C03               	skipc
  4650  0675  0F50               	incfsz	___aldiv@divisor+1,w
  4651  0676  02D4               	subwf	___aldiv@dividend+1,f
  4652  0677  0851               	movf	___aldiv@divisor+2,w
  4653  0678  1C03               	skipc
  4654  0679  0F51               	incfsz	___aldiv@divisor+2,w
  4655  067A  02D5               	subwf	___aldiv@dividend+2,f
  4656  067B  0852               	movf	___aldiv@divisor+3,w
  4657  067C  1C03               	skipc
  4658  067D  0F52               	incfsz	___aldiv@divisor+3,w
  4659  067E  02D6               	subwf	___aldiv@dividend+3,f
  4660  067F  145A               	bsf	___aldiv@quotient,0
  4661  0680                     l1648:	
  4662  0680  3001               	movlw	1
  4663  0681                     u1055:	
  4664  0681  1003               	clrc
  4665  0682  0CD2               	rrf	___aldiv@divisor+3,f
  4666  0683  0CD1               	rrf	___aldiv@divisor+2,f
  4667  0684  0CD0               	rrf	___aldiv@divisor+1,f
  4668  0685  0CCF               	rrf	___aldiv@divisor,f
  4669  0686  3EFF               	addlw	-1
  4670  0687  1D03               	skipz
  4671  0688  2E81               	goto	u1055
  4672  0689  3001               	movlw	1
  4673  068A  02D8               	subwf	___aldiv@counter,f
  4674  068B  1D03               	btfss	3,2
  4675  068C  2E58               	goto	l1640
  4676  068D                     l1652:	
  4677  068D  0859               	movf	___aldiv@sign,w
  4678  068E  1903               	btfsc	3,2
  4679  068F  2E9B               	goto	l1656
  4680  0690  09DA               	comf	___aldiv@quotient,f
  4681  0691  09DB               	comf	___aldiv@quotient+1,f
  4682  0692  09DC               	comf	___aldiv@quotient+2,f
  4683  0693  09DD               	comf	___aldiv@quotient+3,f
  4684  0694  0ADA               	incf	___aldiv@quotient,f
  4685  0695  1903               	skipnz
  4686  0696  0ADB               	incf	___aldiv@quotient+1,f
  4687  0697  1903               	skipnz
  4688  0698  0ADC               	incf	___aldiv@quotient+2,f
  4689  0699  1903               	skipnz
  4690  069A  0ADD               	incf	___aldiv@quotient+3,f
  4691  069B                     l1656:	
  4692  069B  085D               	movf	___aldiv@quotient+3,w
  4693  069C  00D2               	movwf	?___aldiv+3
  4694  069D  085C               	movf	___aldiv@quotient+2,w
  4695  069E  00D1               	movwf	?___aldiv+2
  4696  069F  085B               	movf	___aldiv@quotient+1,w
  4697  06A0  00D0               	movwf	?___aldiv+1
  4698  06A1  085A               	movf	___aldiv@quotient,w
  4699  06A2  00CF               	movwf	?___aldiv
  4700  06A3  0008               	return
  4701  06A4                     __end_of___aldiv:	
  4702                           
  4703                           	psect	text23
  4704  0FBA                     __ptext23:	
  4705 ;; *************** function _isr *****************
  4706 ;; Defined at:
  4707 ;;		line 26 in file "main.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;		None
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;		None
  4712 ;; Return value:  Size  Location     Type
  4713 ;;                  1    wreg      void 
  4714 ;; Registers used:
  4715 ;;		wreg, status,2, status,0, pclath, cstack
  4716 ;; Tracked objects:
  4717 ;;		On entry : 0/0
  4718 ;;		On exit  : 0/0
  4719 ;;		Unchanged: 0/0
  4720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4721 ;;      Params:         0       0       0       0       0
  4722 ;;      Locals:         0       0       0       0       0
  4723 ;;      Temps:          5       0       0       0       0
  4724 ;;      Totals:         5       0       0       0       0
  4725 ;;Total ram usage:        5 bytes
  4726 ;; Hardware stack levels used:    1
  4727 ;; Hardware stack levels required when called:    1
  4728 ;; This function calls:
  4729 ;;		___lwmod
  4730 ;; This function is called by:
  4731 ;;		Interrupt level 1
  4732 ;; This function uses a non-reentrant model
  4733 ;;
  4734                           
  4735                           
  4736                           ;psect for function _isr
  4737  0FBA                     _isr:	
  4738                           
  4739                           ;main.c: 28: if(TMR0IF){
  4740  0FBA  1D0B               	btfss	11,2	;volatile
  4741  0FBB  2FF5               	goto	i1l121
  4742                           
  4743                           ;main.c: 29: TMR0IF = 0;
  4744  0FBC  110B               	bcf	11,2	;volatile
  4745                           
  4746                           ;main.c: 30: TMR0 = 100;
  4747  0FBD  3064               	movlw	100
  4748  0FBE  0081               	movwf	1	;volatile
  4749                           
  4750                           ;main.c: 33: if(time_count % 1 == 0) {
  4751  0FBF  3001               	movlw	1
  4752  0FC0  07B4               	addwf	_time_count,f	;volatile
  4753  0FC1  1803               	skipnc
  4754  0FC2  0AB5               	incf	_time_count+1,f	;volatile
  4755  0FC3  3000               	movlw	0
  4756  0FC4  07B5               	addwf	_time_count+1,f	;volatile
  4757                           
  4758                           ;main.c: 35: RC2 = 1; __nop(); RC2 = 0;;
  4759  0FC5  1507               	bsf	7,2	;volatile
  4760  0FC6  0000               	nop
  4761  0FC7  1283               	bcf	3,5	;RP0=0, select bank0
  4762  0FC8  1303               	bcf	3,6	;RP1=0, select bank0
  4763  0FC9  1107               	bcf	7,2	;volatile
  4764                           
  4765                           ;main.c: 36: }
  4766                           ;main.c: 38: if(time_count % 1000 == 0){
  4767  0FCA  30E8               	movlw	232
  4768  0FCB  00F0               	movwf	___lwmod@divisor
  4769  0FCC  3003               	movlw	3
  4770  0FCD  00F1               	movwf	___lwmod@divisor+1
  4771  0FCE  0835               	movf	_time_count+1,w	;volatile
  4772  0FCF  00F3               	movwf	___lwmod@dividend+1
  4773  0FD0  0834               	movf	_time_count,w	;volatile
  4774  0FD1  00F2               	movwf	___lwmod@dividend
  4775  0FD2  120A  118A  27C4  120A  158A  	fcall	___lwmod
  4776  0FD7  0870               	movf	?___lwmod,w
  4777  0FD8  0471               	iorwf	?___lwmod+1,w
  4778  0FD9  1D03               	btfss	3,2
  4779  0FDA  2FE1               	goto	i1l2094
  4780                           
  4781                           ;main.c: 39: RB4 = !RB4;
  4782  0FDB  3010               	movlw	16
  4783  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  4784  0FDD  1303               	bcf	3,6	;RP1=0, select bank0
  4785  0FDE  0686               	xorwf	6,f
  4786                           
  4787                           ;main.c: 41: time_count = 0;
  4788  0FDF  01B4               	clrf	_time_count	;volatile
  4789  0FE0  01B5               	clrf	_time_count+1	;volatile
  4790  0FE1                     i1l2094:	
  4791                           
  4792                           ;main.c: 42: }
  4793                           ;main.c: 44: if (!RB0 == 1)
  4794  0FE1  1283               	bcf	3,5	;RP0=0, select bank0
  4795  0FE2  1303               	bcf	3,6	;RP1=0, select bank0
  4796  0FE3  1806               	btfsc	6,0	;volatile
  4797  0FE4  2FE9               	goto	i1l2098
  4798                           
  4799                           ;main.c: 45: PB8Counter++;
  4800  0FE5  3001               	movlw	1
  4801  0FE6  00F6               	movwf	??_isr
  4802  0FE7  0876               	movf	??_isr,w
  4803  0FE8  07BC               	addwf	_PB8Counter,f
  4804  0FE9                     i1l2098:	
  4805                           
  4806                           ;main.c: 46: if (!RB1 == 1)
  4807  0FE9  1886               	btfsc	6,1	;volatile
  4808  0FEA  2FEF               	goto	i1l2102
  4809                           
  4810                           ;main.c: 47: PB7Counter++;
  4811  0FEB  3001               	movlw	1
  4812  0FEC  00F6               	movwf	??_isr
  4813  0FED  0876               	movf	??_isr,w
  4814  0FEE  07BB               	addwf	_PB7Counter,f
  4815  0FEF                     i1l2102:	
  4816                           
  4817                           ;main.c: 48: if (!RB2 == 1)
  4818  0FEF  1906               	btfsc	6,2	;volatile
  4819  0FF0  2FF5               	goto	i1l121
  4820                           
  4821                           ;main.c: 49: PB6Counter++;
  4822  0FF1  3001               	movlw	1
  4823  0FF2  00F6               	movwf	??_isr
  4824  0FF3  0876               	movf	??_isr,w
  4825  0FF4  07BA               	addwf	_PB6Counter,f
  4826  0FF5                     i1l121:	
  4827  0FF5  087A               	movf	??_isr+4,w
  4828  0FF6  00FF               	movwf	127
  4829  0FF7  0879               	movf	??_isr+3,w
  4830  0FF8  008A               	movwf	10
  4831  0FF9  0878               	movf	??_isr+2,w
  4832  0FFA  0084               	movwf	4
  4833  0FFB  0E77               	swapf	(??_isr+1)^(0+-128),w
  4834  0FFC  0083               	movwf	3
  4835  0FFD  0EFE               	swapf	126,f
  4836  0FFE  0E7E               	swapf	126,w
  4837  0FFF  0009               	retfie
  4838  1000                     __end_of_isr:	
  4839                           
  4840                           	psect	intentry
  4841  0004                     __pintentry:	
  4842                           ;incstack = 0
  4843                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  4844                           
  4845  0004                     interrupt_function:	
  4846  007E                     saved_w	set	btemp
  4847  0004  00FE               	movwf	btemp
  4848  0005  0E03               	swapf	3,w
  4849  0006  00F7               	movwf	??_isr+1
  4850  0007  0804               	movf	4,w
  4851  0008  00F8               	movwf	??_isr+2
  4852  0009  080A               	movf	10,w
  4853  000A  00F9               	movwf	??_isr+3
  4854  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4855  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4856  000D  087F               	movf	btemp+1,w
  4857  000E  00FA               	movwf	??_isr+4
  4858  000F  120A  158A  2FBA   	ljmp	_isr
  4859                           
  4860                           	psect	text24
  4861  07C4                     __ptext24:	
  4862 ;; *************** function ___lwmod *****************
  4863 ;; Defined at:
  4864 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;  divisor         2    0[COMMON] unsigned int 
  4867 ;;  dividend        2    2[COMMON] unsigned int 
  4868 ;; Auto vars:     Size  Location     Type
  4869 ;;  counter         1    5[COMMON] unsigned char 
  4870 ;; Return value:  Size  Location     Type
  4871 ;;                  2    0[COMMON] unsigned int 
  4872 ;; Registers used:
  4873 ;;		wreg, status,2, status,0
  4874 ;; Tracked objects:
  4875 ;;		On entry : 0/0
  4876 ;;		On exit  : 0/0
  4877 ;;		Unchanged: 0/0
  4878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4879 ;;      Params:         4       0       0       0       0
  4880 ;;      Locals:         1       0       0       0       0
  4881 ;;      Temps:          1       0       0       0       0
  4882 ;;      Totals:         6       0       0       0       0
  4883 ;;Total ram usage:        6 bytes
  4884 ;; Hardware stack levels used:    1
  4885 ;; This function calls:
  4886 ;;		Nothing
  4887 ;; This function is called by:
  4888 ;;		_isr
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           
  4893                           ;psect for function ___lwmod
  4894  07C4                     ___lwmod:	
  4895                           
  4896                           ;incstack = 0
  4897                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4898  07C4  0870               	movf	___lwmod@divisor,w
  4899  07C5  0471               	iorwf	___lwmod@divisor+1,w
  4900  07C6  1903               	btfsc	3,2
  4901  07C7  2FF1               	goto	i1l2072
  4902  07C8  01F5               	clrf	___lwmod@counter
  4903  07C9  0AF5               	incf	___lwmod@counter,f
  4904  07CA                     i1l2062:	
  4905  07CA  1BF1               	btfsc	___lwmod@divisor+1,7
  4906  07CB  2FD8               	goto	i1l2064
  4907  07CC  3001               	movlw	1
  4908  07CD                     u162_25:	
  4909  07CD  1003               	clrc
  4910  07CE  0DF0               	rlf	___lwmod@divisor,f
  4911  07CF  0DF1               	rlf	___lwmod@divisor+1,f
  4912  07D0  3EFF               	addlw	-1
  4913  07D1  1D03               	skipz
  4914  07D2  2FCD               	goto	u162_25
  4915  07D3  3001               	movlw	1
  4916  07D4  00F4               	movwf	??___lwmod
  4917  07D5  0874               	movf	??___lwmod,w
  4918  07D6  07F5               	addwf	___lwmod@counter,f
  4919  07D7  2FCA               	goto	i1l2062
  4920  07D8                     i1l2064:	
  4921  07D8  0871               	movf	___lwmod@divisor+1,w
  4922  07D9  0273               	subwf	___lwmod@dividend+1,w
  4923  07DA  1D03               	skipz
  4924  07DB  2FDE               	goto	u164_25
  4925  07DC  0870               	movf	___lwmod@divisor,w
  4926  07DD  0272               	subwf	___lwmod@dividend,w
  4927  07DE                     u164_25:	
  4928  07DE  1C03               	skipc
  4929  07DF  2FE6               	goto	i1l2068
  4930  07E0  0870               	movf	___lwmod@divisor,w
  4931  07E1  02F2               	subwf	___lwmod@dividend,f
  4932  07E2  0871               	movf	___lwmod@divisor+1,w
  4933  07E3  1C03               	skipc
  4934  07E4  03F3               	decf	___lwmod@dividend+1,f
  4935  07E5  02F3               	subwf	___lwmod@dividend+1,f
  4936  07E6                     i1l2068:	
  4937  07E6  3001               	movlw	1
  4938  07E7                     u165_25:	
  4939  07E7  1003               	clrc
  4940  07E8  0CF1               	rrf	___lwmod@divisor+1,f
  4941  07E9  0CF0               	rrf	___lwmod@divisor,f
  4942  07EA  3EFF               	addlw	-1
  4943  07EB  1D03               	skipz
  4944  07EC  2FE7               	goto	u165_25
  4945  07ED  3001               	movlw	1
  4946  07EE  02F5               	subwf	___lwmod@counter,f
  4947  07EF  1D03               	btfss	3,2
  4948  07F0  2FD8               	goto	i1l2064
  4949  07F1                     i1l2072:	
  4950  07F1  0873               	movf	___lwmod@dividend+1,w
  4951  07F2  00F1               	movwf	?___lwmod+1
  4952  07F3  0872               	movf	___lwmod@dividend,w
  4953  07F4  00F0               	movwf	?___lwmod
  4954  07F5  0008               	return
  4955  07F6                     __end_of___lwmod:	
  4956  007E                     btemp	set	126	;btemp
  4957  007E                     wtemp	set	126
  4958  007E                     wtemp0	set	126
  4959  0080                     wtemp1	set	128
  4960  0082                     wtemp2	set	130
  4961  0084                     wtemp3	set	132
  4962  0086                     wtemp4	set	134
  4963  0088                     wtemp5	set	136
  4964  007F                     wtemp6	set	127
  4965  007E                     ttemp	set	126
  4966  007E                     ttemp0	set	126
  4967  0081                     ttemp1	set	129
  4968  0084                     ttemp2	set	132
  4969  0087                     ttemp3	set	135
  4970  007F                     ttemp4	set	127
  4971  007E                     ltemp	set	126
  4972  007E                     ltemp0	set	126
  4973  0082                     ltemp1	set	130
  4974  0086                     ltemp2	set	134
  4975  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         43
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     35      78
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->___lwmod

Critical Paths under _main in BANK0

    _setupLCD->_lcdWriteControl
    _getSensorData->_ser_getch
    _DriveDirect->_ser_putch
    _Drive->_ser_putch
    _ADCMain->_adcConvertMM
    _lcdWriteToDigitBCD->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl
    _adcConvertMM->___aldiv
    ___lwdiv->___wmul
    ___aldiv->___wmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    6454
                                             31 BANK0      4     4      0
                            _ADCMain
                              _Drive
                        _DriveDirect
                      _getSensorData
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
                            _moveCCW
                             _moveCW
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      30
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      22
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _moveCW                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _moveCCW                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _getSensorData                                        7     5      2     430
                                              2 BANK0      7     5      2
                          _ser_getch
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _ser_getch                                            2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DriveDirect                                          9     5      4     608
                                              1 BANK0      9     5      4
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _Drive                                                4     1      3     428
                                              1 BANK0      4     1      3
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCMain                                              0     0      0    4247
                       _adcConvertMM
                             _getADC
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (1) _lcdWriteToDigitBCD                                  12    10      2     599
                                              3 BANK0     12    10      2
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (2) _lcdWriteData                                         3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcdSetCursor                                         1     1      0      45
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getADC                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _adcConvertMM                                        10     8      2    3603
                                             21 BANK0     10     8      2
                            ___aldiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1258
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     904
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     618
                                              6 BANK0     15     7      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  5     5      0     265
                                              6 COMMON     5     5      0
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCMain
     _adcConvertMM
       ___aldiv
         ___wmul (ARG)
       ___lwdiv
         ___wmul (ARG)
       ___wmul
     _getADC
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteToDigitBCD
       _lcdWriteData
   _Drive
     _ser_putch
   _DriveDirect
     _ser_putch
   _getSensorData
     _ser_getch
     _ser_putch
   _lcdSetCursor
     _lcdWriteControl
   _lcdWriteToDigitBCD
     _lcdWriteData
   _moveCCW
   _moveCW
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)
   ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     23      4E       5       97.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       E       1      100.0%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5C      12        0.0%
ABS                  0      0      5C       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Sep 12 14:46:04 2016

               ??_getSensorData 004D                     __CFG_CP$OFF 0000                              _GO 00FA  
                            fsr 0004             ___wmul@multiplicand 004B                     Drive@speedH 004D  
                   Drive@speedL 004A                             l220 05FB                             l135 04B0  
                           l139 0573                             l333 0DE9                             l266 0E08  
                           l339 07F6                             l472 0F7E                             l481 0FB9  
                           l637 0627                             l582 0E91                             _GIE 005F  
                           _RB0 0030                             _RB1 0031                             _RB2 0032  
                 ??_DriveDirect 004E                             _RC2 003A                             _RB4 0034  
                           _RE0 0048                             _RE1 0049                             _RE2 004A  
                  __CFG_CPD$OFF 0000                             u955 0E92                             u965 0E99  
                           _isr 0FBA                 __end_of_ADCMain 0E85                             fsr0 0004  
                           indf 0000                    __CFG_FOSC$HS 0000                  ??_lcdWriteData 0049  
                  __CFG_LVP$OFF 0000                            l2000 0F5A                            l2020 06C1  
                          l2040 0706                            l2024 06D4                            l2036 06F3  
                          l2204 0518                            l2212 0566                            l2132 03E9  
                          l2206 0551                            l2150 041E                            l2142 0401  
                          l2134 03EE                            l2126 03E0                            l2160 0436  
                          l2162 044C                            l2154 042F                            l2180 04A3  
                          l2164 044D                            l1630 0638                            l1710 05B0  
                          l1640 0658                            l1608 0E89                            l1712 05B8  
                          l1704 058C                            l2192 04E4                            l1810 02E0  
                          l1722 05DC                            l1706 05A2                            l2194 0504  
                          l2178 046A                            l1652 068D                            l1804 02A1  
                          l1716 05C6                            l1900 0786                            l2188 04D0  
                          l1638 0648                            l1670 0F03                            l1822 035C  
                          l1750 0F98                            l1718 05CE                            l1656 069B  
                          l1648 0680                            l1672 0F11                            l1816 031F  
                          l1752 0FA2                            l1728 05EE                            l1920 0790  
                          l1912 078C                            l1904 0788                            l1682 0F32  
                          l1826 036A                            l1762 0098                            l1754 0FAC  
                          l1780 01A5                            l1748 0F8E                            l1932 079D  
                          l1924 0792                            l1916 078E                            l1908 078A  
                          l1678 0F27                            l1774 0166                            l1950 073F  
                          l1792 0223                            l1768 00FF                            l1928 0799  
                          l1936 07A0                            l1944 0738                            l1786 01E4  
                          l1938 07BA                            l1970 0749                            l1962 0745  
                          l1954 0741                            l1946 073D                            l1980 0758  
                          l1798 0262                            l1974 074E                            l1966 0747  
                          l1958 0743                            l1982 0772                            l1976 0755  
                          l1998 0F59                            ?_isr 0070                            u1015 064C  
                          u1035 065A                            u1115 0F12                            u1045 066F  
                          u1125 0F1E                            u1055 0681                            u1135 0F28  
                          u1320 0144                            u1321 0145                            u1322 014A  
                          u1323 014B                            u1260 0076                            u1261 0077  
                          u1262 007C                            u1095 0F06                            u1263 007D  
                          u1290 00DD                            u1291 00DE                            u1292 00E3  
                          u1293 00E4                            u1555 06B1                            u1805 0475  
                          u1585 06E3                            u1825 04CE                            u1835 04EF  
                          u1755 03FF                            u1907 03CE                            u1917 0E4A  
                          u1845 0523                            u1765 0413                            u1927 0776  
                          u1855 0564                            u1775 042D                            u1937 07BE  
                          u1785 043C                            u1947 0E1E                            _PEIE 005E  
                          u1957 0E31                            u1877 0375                            u1887 03A4  
                          u1897 03B9                            _RCIF 0065                            _TMR0 0001  
                          _TRMT 04C1                    __CFG_WRT$OFF 0000                            _radH 0043  
                          _radL 0044                            _main 036D                            _loop 002E  
                          btemp 007E                            ltemp 007E                            start 0012  
                          ttemp 007E                            wtemp 007E                           ??_isr 0076  
               __end_of___aldiv 06A4                           ?_main 0070                   __CFG_WDTE$OFF 0000  
               __end_of___lwdiv 0F37                           i1l121 0FF5                 __end_of___lwmod 07F6  
                 _totalDistTrav 0036                           _RCREG 001A                           _RCSTA 0018  
                         _SPBRG 0099                           _PORTA 0005                           _PORTC 0007  
                         _PORTD 0008                           _PORTE 0009                           _TRISA 0085  
                         _TRISB 0086                           _TRISC 0087                           _TRISD 0088  
                         _TRISE 0089                           _SSPIF 0063                           _TXREG 0019  
                         _TXSTA 0098                           _Drive 0EA8      __end_of_lcdWriteToDigitBCD 0615  
                         _count 0040             __end_of_DriveDirect 0731                 __end_of_moveCCW 07C4  
                __pbitbssCOMMON 03E8                  __CFG_BOREN$OFF 0000                           pclath 000A  
                         ltemp0 007E                           ltemp1 0082                           ltemp2 0086  
                         ltemp3 0080                      _LeftSpeedH 0038                      _LeftSpeedL 0039  
                         ttemp0 007E                           ttemp1 0081                           ttemp2 0084  
                         ttemp3 0087                           ttemp4 007F                           status 0003  
                         wtemp0 007E                           wtemp1 0080                           wtemp2 0082  
                         wtemp3 0084                           wtemp4 0086                           wtemp5 0088  
                         wtemp6 007F                 __initialization 0015                    __end_of_main 057E  
                     ??_ADCMain 0068        __size_of_lcdWriteControl 0014                          ??_main 0068  
          __end_of_lcdSetCursor 0DE6                          ?_Drive 004A                          _ADCON0 001F  
                        _ADCON1 009F                          _ADRESH 001E                          _ADRESL 009E  
                        i1l2102 0FEF                          i1l2062 07CA                          i1l2064 07D8  
                        i1l2072 07F1                          i1l2068 07E6                          i1l2094 0FE1  
                        i1l2098 0FE9                          u162_25 07CD                          u164_25 07DE  
                        u165_25 07E7                          _TMR0IE 005D                          _TMR0IF 005A  
                        _SSPCON 0014                          _SSPBUF 0013                  __CFG_PWRTE$OFF 0000  
                        _adcRAW 0026                       ??___aldiv 0057                          ___wmul 0E85  
                        _getADC 0F75            __end_of_lcdWriteData 0E23                       ??___lwdiv 0053  
                     ??___lwmod 0074                          _moveCW 0731                          _speedH 0045  
                        _speedL 0046                          _rxbyte 007C                     _DriveDirect 06A4  
              __end_of_ser_init 0E01                __end_of_setupADC 0E4D                       ??_moveCCW 0049  
              __end_of_setupLCD 0EF9                __end_of_setupSPI 0E65                          saved_w 007E  
                    _adcClosest 006C         __end_of__initialization 002B                   __end_of_Drive 0ED0  
                __pcstackCOMMON 0070                    __pidataBANK0 0DD3                 DriveDirect@data 004F  
                       ??_Drive 004D               ??_lcdWriteControl 0049                      __pbssBANK0 0020  
           lcdSetCursor@address 004C                      __pmaintext 036D                         ?___wmul 0049  
                       ?_getADC 0070                      __pintentry 0004           __size_of_lcdSetCursor 0009  
                       _ADCMain 0E65           __end_of_getSensorData 0F75                         ?_moveCW 0070  
            __size_of_ser_getch 000A              __size_of_ser_putch 000C                     _RightSpeedH 003D  
                   _RightSpeedL 003E                         _SSPSTAT 0094         DriveDirect@VelocityLeft 004C  
         __size_of_lcdWriteData 0013                    _lcdSetCursor 0DDD              _lcdWriteToDigitBCD 057E  
                     ?_ser_init 0070                       ?_setupADC 0070                       ?_setupLCD 0070  
                     ?_setupSPI 0070                         ___aldiv 0615                 __size_of___wmul 0023  
               __size_of_getADC 0045                         ___lwdiv 0EF9                         ___lwmod 07C4  
           ?_lcdWriteToDigitBCD 004C                         _degrees 002A                 __size_of_moveCW 004B  
                       __ptext1 0E01                         __ptext2 0E4D                         __ptext3 0ED0  
                       __ptext4 0E37                         __ptext5 0DF2                         __ptext6 0731  
                       __ptext7 077C                         __ptext8 0F37                         __ptext9 07F6  
                  __size_of_isr 0046                         _lowByte 0041                         _moveCCW 077C  
              ___aldiv@dividend 0053                         clrloop0 0DD6                    _lcdWriteData 0E10  
          end_of_initialization 002B            ??_lcdWriteToDigitBCD 004E               __end_of_ser_getch 0800  
             __end_of_ser_putch 0DF2                      ??_ser_init 0049                      ??_setupADC 0049  
                    ??_setupLCD 004C                      ??_setupSPI 0049                ___aldiv@quotient 005A  
                    _time_count 0034                    ?_DriveDirect 004A              adcConvertMM@adcRAW 005E  
                     Drive@radH 004B                       Drive@radL 004C                   ?_spi_transfer 0070  
               ser_getch@rxbyte 004A                   ?_adcConvertMM 005E             DriveDirect@data_244 0051  
               _lcdWriteControl 0E23                  __end_of___wmul 0EA8                  __end_of_getADC 0FBA  
                __end_of_moveCW 077C             start_initialization 0015                     __end_of_isr 1000  
                ??_spi_transfer 0049                  ??_adcConvertMM 0060                        ??___wmul 004D  
                      ??_getADC 0049                     __pdataBANK0 006C                        ?_ADCMain 0070  
                      ??_moveCW 0049                    _negativeFlag 0042                     _FLAG_1000MS 03E8  
                   __pbssCOMMON 007B                       ___latbits 0002                   __pcstackBANK0 0049  
       __end_of_lcdWriteControl 0E37                ___lwdiv@dividend 0051                     _angleTurned 0028  
                      ?___aldiv 004F               __size_of_ser_init 000F                        ?___lwdiv 004F  
                      ?___lwmod 0070               __size_of_setupADC 0016               __size_of_setupLCD 0029  
             __size_of_setupSPI 0018                        ?_moveCCW 0070                  __size_of_Drive 0028  
          __size_of_DriveDirect 008D                ___lwdiv@quotient 0054                 main@controlByte 006B  
       lcdWriteControl@databyte 004B                 ___aldiv@divisor 004F               interrupt_function 0004  
               ___aldiv@counter 0058          __size_of_getSensorData 003E                  ___wmul@product 004D  
                    ser_putch@c 0049           getSensorData@packetID 0051                       clear_ram0 0DD5  
                     _ser_getch 07F6                       _ser_putch 0DE6                       _stepCount 0047  
              __size_of_ADCMain 0020                   _VelocityRight 0024            __end_of_spi_transfer 0E10  
             ___wmul@multiplier 0049                spi_transfer@data 004B                spi_transfer@temp 004A  
          __end_of_adcConvertMM 036D                     _controlByte 003F                        _Distance 0020  
          lcdWriteData@databyte 004B     __size_of_lcdWriteToDigitBCD 0097        DriveDirect@VelocityRight 004A  
                    ?_ser_getch 0070                ?_lcdWriteControl 0070                      ?_ser_putch 0070  
              __size_of___aldiv 008F                __size_of___lwdiv 003E                __size_of___lwmod 0032  
                 _getSensorData 0F37                     _currentStep 007B  lcdWriteToDigitBCD@TenThouDigit 0054  
               ___lwdiv@divisor 004F                __size_of_moveCCW 0048                 ___lwdiv@counter 0056  
                      __ptext10 06A4                        __ptext11 0EA8                        __ptext20 0E85  
                      __ptext12 0DE6                        __ptext21 0EF9                        __ptext13 0E65  
                      __ptext22 0615                        __ptext14 057E                        __ptext23 0FBA  
                      __ptext15 0E10                        __ptext24 07C4                        __ptext16 0DDD  
                      __ptext17 0E23                        __ptext18 0F75                        __ptext19 002F  
                      _highByte 0048                        _distTrav 002C                   __size_of_main 0211  
                      _ser_init 0DF2                      _PB6Counter 003A                        _setupADC 0E37  
                      _setupLCD 0ED0                        _setupSPI 0E4D                      _PB7Counter 003B  
   lcdWriteToDigitBCD@HunsDigit 0050                      _PB8Counter 003C                    _VelocityLeft 0022  
   lcdWriteToDigitBCD@OnesDigit 0056                  ?_getSensorData 004B     lcdWriteToDigitBCD@TensDigit 004E  
   lcdWriteToDigitBCD@ThouDigit 0052                        intlevel1 0000                ___lwmod@dividend 0072  
                 ?_lcdSetCursor 0070                     ??_ser_getch 0049                     ??_ser_putch 0049  
           getSensorData@sensor 004F           __size_of_spi_transfer 000F           __size_of_adcConvertMM 033E  
                    _OPTION_REG 0081                 ___lwmod@divisor 0070                 ___lwmod@counter 0075  
                  ___aldiv@sign 0059              getSensorData@bytes 004B                   ?_lcdWriteData 0070  
        lcdWriteToDigitBCD@data 004C                    _spi_transfer 0E01                  ??_lcdSetCursor 004C  
                  _stepCountNeg 0032                     _stepClosest 0030                    _adcConvertMM 002F  
