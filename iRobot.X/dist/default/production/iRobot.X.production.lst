

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
<<<<<<< HEAD
                                                                                               Tue Aug 30 13:55:30 2016
=======
                                                                                               Wed Aug 31 10:20:33 2016
>>>>>>> refs/remotes/origin/Brendan

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
<<<<<<< HEAD
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     	;# 
    25  0001                     	;# 
    26  0002                     	;# 
    27  0003                     	;# 
    28  0004                     	;# 
    29  0005                     	;# 
    30  0006                     	;# 
    31  0007                     	;# 
    32  0008                     	;# 
    33  0009                     	;# 
    34  000A                     	;# 
    35  000B                     	;# 
    36  000C                     	;# 
    37  000D                     	;# 
    38  000E                     	;# 
    39  000E                     	;# 
    40  000F                     	;# 
    41  0010                     	;# 
    42  0011                     	;# 
    43  0012                     	;# 
    44  0013                     	;# 
    45  0014                     	;# 
    46  0015                     	;# 
    47  0015                     	;# 
    48  0016                     	;# 
    49  0017                     	;# 
    50  0018                     	;# 
    51  0019                     	;# 
    52  001A                     	;# 
    53  001B                     	;# 
    54  001B                     	;# 
    55  001C                     	;# 
    56  001D                     	;# 
    57  001E                     	;# 
    58  001F                     	;# 
    59  0081                     	;# 
    60  0085                     	;# 
    61  0086                     	;# 
    62  0087                     	;# 
    63  0088                     	;# 
    64  0089                     	;# 
    65  008C                     	;# 
    66  008D                     	;# 
    67  008E                     	;# 
    68  0091                     	;# 
    69  0092                     	;# 
    70  0093                     	;# 
    71  0094                     	;# 
    72  0098                     	;# 
    73  0099                     	;# 
    74  009C                     	;# 
    75  009D                     	;# 
    76  009E                     	;# 
    77  009F                     	;# 
    78  010C                     	;# 
    79  010D                     	;# 
    80  010E                     	;# 
    81  010F                     	;# 
    82  018C                     	;# 
    83  018D                     	;# 
    84  0000                     	;# 
    85  0001                     	;# 
    86  0002                     	;# 
    87  0003                     	;# 
    88  0004                     	;# 
    89  0005                     	;# 
    90  0006                     	;# 
    91  0007                     	;# 
    92  0008                     	;# 
    93  0009                     	;# 
    94  000A                     	;# 
    95  000B                     	;# 
    96  000C                     	;# 
    97  000D                     	;# 
    98  000E                     	;# 
    99  000E                     	;# 
   100  000F                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0013                     	;# 
   105  0014                     	;# 
   106  0015                     	;# 
   107  0015                     	;# 
   108  0016                     	;# 
   109  0017                     	;# 
   110  0018                     	;# 
   111  0019                     	;# 
   112  001A                     	;# 
   113  001B                     	;# 
   114  001B                     	;# 
   115  001C                     	;# 
   116  001D                     	;# 
   117  001E                     	;# 
   118  001F                     	;# 
   119  0081                     	;# 
   120  0085                     	;# 
   121  0086                     	;# 
   122  0087                     	;# 
   123  0088                     	;# 
   124  0089                     	;# 
   125  008C                     	;# 
   126  008D                     	;# 
   127  008E                     	;# 
   128  0091                     	;# 
   129  0092                     	;# 
   130  0093                     	;# 
   131  0094                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  009E                     	;# 
   137  009F                     	;# 
   138  010C                     	;# 
   139  010D                     	;# 
   140  010E                     	;# 
   141  010F                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144  0000                     	;# 
   145  0001                     	;# 
   146  0002                     	;# 
   147  0003                     	;# 
   148  0004                     	;# 
   149  0005                     	;# 
   150  0006                     	;# 
   151  0007                     	;# 
   152  0008                     	;# 
   153  0009                     	;# 
   154  000A                     	;# 
   155  000B                     	;# 
   156  000C                     	;# 
   157  000D                     	;# 
   158  000E                     	;# 
   159  000E                     	;# 
   160  000F                     	;# 
   161  0010                     	;# 
   162  0011                     	;# 
   163  0012                     	;# 
   164  0013                     	;# 
   165  0014                     	;# 
   166  0015                     	;# 
   167  0015                     	;# 
   168  0016                     	;# 
   169  0017                     	;# 
   170  0018                     	;# 
   171  0019                     	;# 
   172  001A                     	;# 
   173  001B                     	;# 
   174  001B                     	;# 
   175  001C                     	;# 
   176  001D                     	;# 
   177  001E                     	;# 
   178  001F                     	;# 
   179  0081                     	;# 
   180  0085                     	;# 
   181  0086                     	;# 
   182  0087                     	;# 
   183  0088                     	;# 
   184  0089                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  0091                     	;# 
   189  0092                     	;# 
   190  0093                     	;# 
   191  0094                     	;# 
   192  0098                     	;# 
   193  0099                     	;# 
   194  009C                     	;# 
   195  009D                     	;# 
   196  009E                     	;# 
   197  009F                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  010F                     	;# 
   202  018C                     	;# 
   203  018D                     	;# 
   204  0000                     	;# 
   205  0001                     	;# 
   206  0002                     	;# 
   207  0003                     	;# 
   208  0004                     	;# 
   209  0005                     	;# 
   210  0006                     	;# 
   211  0007                     	;# 
   212  0008                     	;# 
   213  0009                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  000D                     	;# 
   218  000E                     	;# 
   219  000E                     	;# 
   220  000F                     	;# 
   221  0010                     	;# 
   222  0011                     	;# 
   223  0012                     	;# 
   224  0013                     	;# 
   225  0014                     	;# 
   226  0015                     	;# 
   227  0015                     	;# 
   228  0016                     	;# 
   229  0017                     	;# 
   230  0018                     	;# 
   231  0019                     	;# 
   232  001A                     	;# 
   233  001B                     	;# 
   234  001B                     	;# 
   235  001C                     	;# 
   236  001D                     	;# 
   237  001E                     	;# 
   238  001F                     	;# 
   239  0081                     	;# 
   240  0085                     	;# 
   241  0086                     	;# 
   242  0087                     	;# 
   243  0088                     	;# 
   244  0089                     	;# 
   245  008C                     	;# 
   246  008D                     	;# 
   247  008E                     	;# 
   248  0091                     	;# 
   249  0092                     	;# 
   250  0093                     	;# 
   251  0094                     	;# 
   252  0098                     	;# 
   253  0099                     	;# 
   254  009C                     	;# 
   255  009D                     	;# 
   256  009E                     	;# 
   257  009F                     	;# 
   258  010C                     	;# 
   259  010D                     	;# 
   260  010E                     	;# 
   261  010F                     	;# 
   262  018C                     	;# 
   263  018D                     	;# 
   264  0007                     _PORTC	set	7
   265  0008                     _PORTD	set	8
   266  0009                     _PORTE	set	9
   267  001A                     _RCREG	set	26
   268  0018                     _RCSTA	set	24
   269  0013                     _SSPBUF	set	19
   270  0014                     _SSPCON	set	20
   271  0001                     _TMR0	set	1
   272  0019                     _TXREG	set	25
   273  005F                     _GIE	set	95
   274  005E                     _PEIE	set	94
   275  0030                     _RB0	set	48
   276  003A                     _RC2	set	58
   277  0065                     _RCIF	set	101
   278  0048                     _RE0	set	72
   279  0049                     _RE1	set	73
   280  004A                     _RE2	set	74
   281  0063                     _SSPIF	set	99
   282  005D                     _TMR0IE	set	93
   283  005A                     _TMR0IF	set	90
   284  009F                     _ADCON1	set	159
   285  0081                     _OPTION_REG	set	129
   286  0099                     _SPBRG	set	153
   287  0094                     _SSPSTAT	set	148
   288  0086                     _TRISB	set	134
   289  0087                     _TRISC	set	135
   290  0088                     _TRISD	set	136
   291  0089                     _TRISE	set	137
   292  0098                     _TXSTA	set	152
   293  04C1                     _TRMT	set	1217
   294                           
   295                           ; #config settings
   296  0000                     
   297                           	psect	cinit
   298  0015                     start_initialization:	
   299  0015                     __initialization:	
   300                           
   301                           ; Clear objects allocated to BITCOMMON
   302  0015  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   303                           
   304                           ; Clear objects allocated to COMMON
   305  0016  01FA               	clrf	__pbssCOMMON& (0+127)
   306  0017  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   307                           
   308                           ; Clear objects allocated to BANK0
   309  0018  1283               	bcf	3,5	;RP0=0, select bank0
   310  0019  1303               	bcf	3,6	;RP1=0, select bank0
   311  001A  01B8               	clrf	__pbssBANK0& (0+127)
   312  001B  01B9               	clrf	(__pbssBANK0+1)& (0+127)
   313  001C  01BA               	clrf	(__pbssBANK0+2)& (0+127)
   314  001D  01BB               	clrf	(__pbssBANK0+3)& (0+127)
   315  001E  01BC               	clrf	(__pbssBANK0+4)& (0+127)
   316  001F                     end_of_initialization:	
   317                           ;End of C runtime variable initialization code
   318                           
   319  001F                     __end_of__initialization:	
   320  001F  0183               	clrf	3
   321  0020  120A  118A  28BA   	ljmp	_main	;jump to C main() function
   322                           
   323                           	psect	bitbssCOMMON
   324  03E0                     __pbitbssCOMMON:	
   325  03E0                     _FLAG_1000MS:	
   326  03E0                     	ds	1
   327                           
   328                           	psect	bssCOMMON
   329  007A                     __pbssCOMMON:	
   330  007A                     _time_count:	
   331  007A                     	ds	2
   332                           
   333                           	psect	bssBANK0
   334  0038                     __pbssBANK0:	
   335  0038                     _degrees:	
   336  0038                     	ds	2
   337  003A                     _stepCountNeg:	
   338  003A                     	ds	2
   339  003C                     _rxbyte:	
   340  003C                     	ds	1
   341                           
   342                           	psect	cstackCOMMON
   343  0070                     __pcstackCOMMON:	
   344  0070                     ?_setupSPI:	
   345  0070                     ?_ser_init:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ?_setupLCD:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ?_spi_transfer:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?_ser_putch:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ?_ser_getch:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?_isr:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ?_main:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_lcdWriteControl:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_lcdWriteData:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?___lwmod:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ___lwmod@divisor:	
   376                           ; 2 bytes @ 0x0
   377                           
   378                           
   379                           ; 2 bytes @ 0x0
   380  0070                     	ds	2
   381  0072                     ___lwmod@dividend:	
   382                           
   383                           ; 2 bytes @ 0x2
   384  0072                     	ds	2
   385  0074                     ??___lwmod:	
   386                           
   387                           ; 1 bytes @ 0x4
   388  0074                     	ds	1
   389  0075                     ___lwmod@counter:	
   390                           
   391                           ; 1 bytes @ 0x5
   392  0075                     	ds	1
   393  0076                     ??_isr:	
   394                           
   395                           ; 1 bytes @ 0x6
   396  0076                     	ds	4
   397                           
   398                           	psect	cstackBANK0
   399  0020                     __pcstackBANK0:	
   400  0020                     ??_setupSPI:	
   401  0020                     ??_ser_init:	
   402                           ; 1 bytes @ 0x0
   403                           
   404  0020                     ??_spi_transfer:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0020                     ??_ser_putch:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0020                     ??_ser_getch:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0020                     ??_lcdWriteControl:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0020                     ??_lcdWriteData:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0020                     ser_putch@c:	
   420                           ; 1 bytes @ 0x0
   421                           
   422                           
   423                           ; 1 bytes @ 0x0
   424  0020                     	ds	1
   425  0021                     spi_transfer@temp:	
   426  0021                     ser_getch@rxbyte:	
   427                           ; 1 bytes @ 0x1
   428                           
   429                           
   430                           ; 1 bytes @ 0x1
   431  0021                     	ds	1
   432  0022                     lcdWriteControl@databyte:	
   433  0022                     lcdWriteData@databyte:	
   434                           ; 1 bytes @ 0x2
   435                           
   436  0022                     spi_transfer@data:	
   437                           ; 1 bytes @ 0x2
   438                           
   439                           
   440                           ; 1 bytes @ 0x2
   441  0022                     	ds	1
   442  0023                     ??_setupLCD:	
   443  0023                     ?_lcdWriteToDigitBCD:	
   444                           ; 1 bytes @ 0x3
   445                           
   446  0023                     lcdWriteToDigitBCD@data:	
   447                           ; 1 bytes @ 0x3
   448                           
   449                           
   450                           ; 2 bytes @ 0x3
   451  0023                     	ds	2
   452  0025                     ??_lcdWriteToDigitBCD:	
   453  0025                     lcdWriteToDigitBCD@TensDigit:	
   454                           ; 1 bytes @ 0x5
   455                           
   456                           
   457                           ; 2 bytes @ 0x5
   458  0025                     	ds	2
   459  0027                     lcdWriteToDigitBCD@HunsDigit:	
   460                           
   461                           ; 2 bytes @ 0x7
   462  0027                     	ds	2
   463  0029                     lcdWriteToDigitBCD@ThouDigit:	
   464                           
   465                           ; 2 bytes @ 0x9
   466  0029                     	ds	2
   467  002B                     lcdWriteToDigitBCD@TenThouDigit:	
   468                           
   469                           ; 2 bytes @ 0xB
   470  002B                     	ds	2
   471  002D                     lcdWriteToDigitBCD@OnesDigit:	
   472                           
   473                           ; 2 bytes @ 0xD
   474  002D                     	ds	2
   475  002F                     ??_main:	
   476                           
   477                           ; 1 bytes @ 0xF
   478  002F                     	ds	2
   479  0031                     main@highByte:	
   480                           
   481                           ; 2 bytes @ 0x11
   482  0031                     	ds	2
   483  0033                     main@lowByte:	
   484                           
   485                           ; 2 bytes @ 0x13
   486  0033                     	ds	2
   487  0035                     main@dist:	
   488                           
   489                           ; 2 bytes @ 0x15
   490  0035                     	ds	2
   491  0037                     main@controlByte:	
   492                           
   493                           ; 1 bytes @ 0x17
   494  0037                     	ds	1
   495                           
   496                           	psect	maintext
   497  00BA                     __pmaintext:	
   498 ;;
   499 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   500 ;;
   501 ;; *************** function _main *****************
   502 ;; Defined at:
   503 ;;		line 36 in file "main.c"
   504 ;; Parameters:    Size  Location     Type
   505 ;;		None
   506 ;; Auto vars:     Size  Location     Type
   507 ;;  dist            2   21[BANK0 ] int 
   508 ;;  lowByte         2   19[BANK0 ] int 
   509 ;;  highByte        2   17[BANK0 ] int 
   510 ;;  controlByte     1   23[BANK0 ] unsigned char 
   511 ;; Return value:  Size  Location     Type
   512 ;;                  1    wreg      void 
   513 ;; Registers used:
   514 ;;		wreg, status,2, status,0, pclath, cstack
   515 ;; Tracked objects:
   516 ;;		On entry : B00/0
   517 ;;		On exit  : 0/0
   518 ;;		Unchanged: 0/0
   519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   520 ;;      Params:         0       0       0       0       0
   521 ;;      Locals:         0       7       0       0       0
   522 ;;      Temps:          0       2       0       0       0
   523 ;;      Totals:         0       9       0       0       0
   524 ;;Total ram usage:        9 bytes
   525 ;; Hardware stack levels required when called:    4
   526 ;; This function calls:
   527 ;;		_lcdWriteToDigitBCD
   528 ;;		_ser_getch
   529 ;;		_ser_init
   530 ;;		_ser_putch
   531 ;;		_setupLCD
   532 ;;		_setupSPI
   533 ;;		_spi_transfer
   534 ;; This function is called by:
   535 ;;		Startup code after reset
   536 ;; This function uses a non-reentrant model
   537 ;;
   538                           
   539                           
   540                           ;psect for function _main
   541  00BA                     _main:	
   542                           
   543                           ;main.c: 37: signed int highByte = 0;
   544                           
   545                           ;incstack = 0
   546                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   547  00BA  1283               	bcf	3,5	;RP0=0, select bank0
   548  00BB  1303               	bcf	3,6	;RP1=0, select bank0
   549  00BC  01B1               	clrf	main@highByte
   550  00BD  01B2               	clrf	main@highByte+1
   551                           
   552                           ;main.c: 38: signed int lowByte = 0;
   553  00BE  01B3               	clrf	main@lowByte
   554  00BF  01B4               	clrf	main@lowByte+1
   555                           
   556                           ;main.c: 39: signed int dist = 0;
   557  00C0  01B5               	clrf	main@dist
   558  00C1  01B6               	clrf	main@dist+1
   559                           
   560                           ;main.c: 42: setupSPI();
   561  00C2  120A  118A  21CC  120A  118A  	fcall	_setupSPI
   562                           
   563                           ;main.c: 43: ser_init();
   564  00C7  120A  118A  221A  120A  118A  	fcall	_ser_init
   565                           
   566                           ;main.c: 44: setupLCD();
   567  00CC  120A  118A  21A3  120A  118A  	fcall	_setupLCD
   568                           
   569                           ;main.c: 45: unsigned char controlByte = 0b00001101;
   570  00D1  300D               	movlw	13
   571  00D2  1283               	bcf	3,5	;RP0=0, select bank0
   572  00D3  1303               	bcf	3,6	;RP1=0, select bank0
   573  00D4  00AF               	movwf	??_main
   574  00D5  082F               	movf	??_main,w
   575  00D6  00B7               	movwf	main@controlByte
   576                           
   577                           ;main.c: 46: spi_transfer(controlByte);
   578  00D7  0837               	movf	main@controlByte,w
   579  00D8  120A  118A  220B  120A  118A  	fcall	_spi_transfer
   580                           
   581                           ;main.c: 48: ser_putch(128);
   582  00DD  3080               	movlw	128
   583  00DE  120A  118A  2229  120A  118A  	fcall	_ser_putch
   584                           
   585                           ;main.c: 49: ser_putch(132);
   586  00E3  3084               	movlw	132
   587  00E4  120A  118A  2229  120A  118A  	fcall	_ser_putch
   588                           
   589                           ;main.c: 51: ser_putch(136);
   590  00E9  3088               	movlw	136
   591  00EA  120A  118A  2229  120A  118A  	fcall	_ser_putch
   592                           
   593                           ;main.c: 52: ser_putch(4);
   594  00EF  3004               	movlw	4
   595  00F0  120A  118A  2229  120A  118A  	fcall	_ser_putch
   596                           
   597                           ;main.c: 54: ser_putch(142);
   598  00F5  308E               	movlw	142
   599  00F6  120A  118A  2229  120A  118A  	fcall	_ser_putch
   600                           
   601                           ;main.c: 55: ser_putch(19);
   602  00FB  3013               	movlw	19
   603  00FC  120A  118A  2229  120A  118A  	fcall	_ser_putch
   604                           
   605                           ;main.c: 57: ser_getch();
   606  0101  120A  118A  2235  120A  118A  	fcall	_ser_getch
   607                           
   608                           ;main.c: 58: highByte = rxbyte;
   609  0106  1283               	bcf	3,5	;RP0=0, select bank0
   610  0107  1303               	bcf	3,6	;RP1=0, select bank0
   611  0108  083C               	movf	_rxbyte,w
   612  0109  00AF               	movwf	??_main
   613  010A  01B0               	clrf	??_main+1
   614  010B  082F               	movf	??_main,w
   615  010C  00B1               	movwf	main@highByte
   616  010D  0830               	movf	??_main+1,w
   617  010E  00B2               	movwf	main@highByte+1
   618                           
   619                           ;main.c: 59: ser_getch();
   620  010F  120A  118A  2235  120A  118A  	fcall	_ser_getch
   621                           
   622                           ;main.c: 60: lowByte = rxbyte;
   623  0114  1283               	bcf	3,5	;RP0=0, select bank0
   624  0115  1303               	bcf	3,6	;RP1=0, select bank0
   625  0116  083C               	movf	_rxbyte,w
   626  0117  00AF               	movwf	??_main
   627  0118  01B0               	clrf	??_main+1
   628  0119  082F               	movf	??_main,w
   629  011A  00B3               	movwf	main@lowByte
   630  011B  0830               	movf	??_main+1,w
   631  011C  00B4               	movwf	main@lowByte+1
   632                           
   633                           ;main.c: 62: dist = (4*highByte + lowByte);
   634  011D  0832               	movf	main@highByte+1,w
   635  011E  00B0               	movwf	??_main+1
   636  011F  0831               	movf	main@highByte,w
   637  0120  00AF               	movwf	??_main
   638  0121  1003               	clrc
   639  0122  0DAF               	rlf	??_main,f
   640  0123  0DB0               	rlf	??_main+1,f
   641  0124  1003               	clrc
   642  0125  0DAF               	rlf	??_main,f
   643  0126  0DB0               	rlf	??_main+1,f
   644  0127  0833               	movf	main@lowByte,w
   645  0128  072F               	addwf	??_main,w
   646  0129  00B5               	movwf	main@dist
   647  012A  0834               	movf	main@lowByte+1,w
   648  012B  1803               	skipnc
   649  012C  0A34               	incf	main@lowByte+1,w
   650  012D  0730               	addwf	??_main+1,w
   651  012E  00B6               	movwf	main@dist+1
   652                           
   653                           ;main.c: 64: lcdWriteToDigitBCD(dist);
   654  012F  0836               	movf	main@dist+1,w
   655  0130  00A4               	movwf	lcdWriteToDigitBCD@data+1
   656  0131  0835               	movf	main@dist,w
   657  0132  00A3               	movwf	lcdWriteToDigitBCD@data
   658  0133  120A  118A  2023  120A  118A  	fcall	_lcdWriteToDigitBCD
   659  0138                     l1046:	
   660                           ;main.c: 67: while(1){
   661                           
   662                           
   663                           ;main.c: 68: if(FLAG_1000MS){
   664  0138  1C7C               	btfss	_FLAG_1000MS/(0+8),_FLAG_1000MS& (0+7)	;volatile
   665  0139  2938               	goto	l1046
   666                           
   667                           ;main.c: 69: RB0 = !RB0;
   668  013A  3001               	movlw	1
   669  013B  1283               	bcf	3,5	;RP0=0, select bank0
   670  013C  1303               	bcf	3,6	;RP1=0, select bank0
   671  013D  0686               	xorwf	6,f
   672                           
   673                           ;main.c: 70: FLAG_1000MS = 0;
   674  013E  107C               	bcf	_FLAG_1000MS/(0+8),_FLAG_1000MS& (0+7)	;volatile
   675  013F  2938               	goto	l1046
   676  0140                     __end_of_main:	
   677                           
   678                           	psect	text1
   679  020B                     __ptext1:	
   680 ;; *************** function _spi_transfer *****************
   681 ;; Defined at:
   682 ;;		line 23 in file "SPI.c"
   683 ;; Parameters:    Size  Location     Type
   684 ;;  data            1    wreg     unsigned char 
   685 ;; Auto vars:     Size  Location     Type
   686 ;;  data            1    2[BANK0 ] unsigned char 
   687 ;;  temp            1    1[BANK0 ] unsigned char 
   688 ;; Return value:  Size  Location     Type
   689 ;;                  1    wreg      unsigned char 
   690 ;; Registers used:
   691 ;;		wreg, status,2
   692 ;; Tracked objects:
   693 ;;		On entry : 0/0
   694 ;;		On exit  : 0/0
   695 ;;		Unchanged: 0/0
   696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   697 ;;      Params:         0       0       0       0       0
   698 ;;      Locals:         0       2       0       0       0
   699 ;;      Temps:          0       1       0       0       0
   700 ;;      Totals:         0       3       0       0       0
   701 ;;Total ram usage:        3 bytes
   702 ;; Hardware stack levels used:    1
   703 ;; Hardware stack levels required when called:    2
   704 ;; This function calls:
   705 ;;		Nothing
   706 ;; This function is called by:
   707 ;;		_main
   708 ;; This function uses a non-reentrant model
   709 ;;
   710                           
   711                           
   712                           ;psect for function _spi_transfer
   713  020B                     _spi_transfer:	
   714                           
   715                           ;incstack = 0
   716                           ; Regs used in _spi_transfer: [wreg+status,2]
   717                           ;spi_transfer@data stored from wreg
   718  020B  1283               	bcf	3,5	;RP0=0, select bank0
   719  020C  1303               	bcf	3,6	;RP1=0, select bank0
   720  020D  00A2               	movwf	spi_transfer@data
   721                           
   722                           ;SPI.c: 24: unsigned char temp = 0;
   723  020E  01A1               	clrf	spi_transfer@temp
   724                           
   725                           ;SPI.c: 26: SSPIF = 0;
   726  020F  118C               	bcf	12,3	;volatile
   727                           
   728                           ;SPI.c: 27: SSPBUF = data;
   729  0210  0822               	movf	spi_transfer@data,w
   730  0211  0093               	movwf	19	;volatile
   731  0212                     l134:	
   732                           ;SPI.c: 29: while (SSPIF == 0);
   733                           
   734  0212  1D8C               	btfss	12,3	;volatile
   735  0213  2A12               	goto	l134
   736                           
   737                           ;SPI.c: 30: temp = SSPBUF;
   738  0214  0813               	movf	19,w	;volatile
   739  0215  00A0               	movwf	??_spi_transfer
   740  0216  0820               	movf	??_spi_transfer,w
   741  0217  00A1               	movwf	spi_transfer@temp
   742                           
   743                           ;SPI.c: 31: SSPIF = 0;
   744  0218  118C               	bcf	12,3	;volatile
   745  0219  0008               	return
   746  021A                     __end_of_spi_transfer:	
   747                           ;SPI.c: 33: return temp;
   748                           ;	Return value of _spi_transfer is never used
   749                           
   750                           
   751                           	psect	text2
   752  01CC                     __ptext2:	
   753 ;; *************** function _setupSPI *****************
   754 ;; Defined at:
   755 ;;		line 4 in file "SPI.c"
   756 ;; Parameters:    Size  Location     Type
   757 ;;		None
   758 ;; Auto vars:     Size  Location     Type
   759 ;;		None
   760 ;; Return value:  Size  Location     Type
   761 ;;                  1    wreg      void 
   762 ;; Registers used:
   763 ;;		wreg, status,2
   764 ;; Tracked objects:
   765 ;;		On entry : 0/0
   766 ;;		On exit  : 0/0
   767 ;;		Unchanged: 0/0
   768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   769 ;;      Params:         0       0       0       0       0
   770 ;;      Locals:         0       0       0       0       0
   771 ;;      Temps:          0       0       0       0       0
   772 ;;      Totals:         0       0       0       0       0
   773 ;;Total ram usage:        0 bytes
   774 ;; Hardware stack levels used:    1
   775 ;; Hardware stack levels required when called:    2
   776 ;; This function calls:
   777 ;;		Nothing
   778 ;; This function is called by:
   779 ;;		_main
   780 ;; This function uses a non-reentrant model
   781 ;;
   782                           
   783                           
   784                           ;psect for function _setupSPI
   785  01CC                     _setupSPI:	
   786                           
   787                           ;SPI.c: 6: TRISB = 0b00000000;
   788                           
   789                           ;incstack = 0
   790                           ; Regs used in _setupSPI: [wreg+status,2]
   791  01CC  1683               	bsf	3,5	;RP0=1, select bank1
   792  01CD  1303               	bcf	3,6	;RP1=0, select bank1
   793  01CE  0186               	clrf	6	;volatile
   794                           
   795                           ;SPI.c: 8: SSPSTAT = 0b01000000;
   796  01CF  3040               	movlw	64
   797  01D0  0094               	movwf	20	;volatile
   798                           
   799                           ;SPI.c: 9: SSPCON = 0b00100000;
   800  01D1  3020               	movlw	32
   801  01D2  1283               	bcf	3,5	;RP0=0, select bank0
   802  01D3  1303               	bcf	3,6	;RP1=0, select bank0
   803  01D4  0094               	movwf	20	;volatile
   804                           
   805                           ;SPI.c: 10: TRISC = 0b11010000;
   806  01D5  30D0               	movlw	208
   807  01D6  1683               	bsf	3,5	;RP0=1, select bank1
   808  01D7  1303               	bcf	3,6	;RP1=0, select bank1
   809  01D8  0087               	movwf	7	;volatile
   810                           
   811                           ;SPI.c: 11: PORTC = 0b00000011;
   812  01D9  3003               	movlw	3
   813  01DA  1283               	bcf	3,5	;RP0=0, select bank0
   814  01DB  1303               	bcf	3,6	;RP1=0, select bank0
   815  01DC  0087               	movwf	7	;volatile
   816                           
   817                           ;SPI.c: 14: OPTION_REG = 0b00000100;
   818  01DD  3004               	movlw	4
   819  01DE  1683               	bsf	3,5	;RP0=1, select bank1
   820  01DF  1303               	bcf	3,6	;RP1=0, select bank1
   821  01E0  0081               	movwf	1	;volatile
   822                           
   823                           ;SPI.c: 16: TMR0IE = 1;
   824  01E1  168B               	bsf	11,5	;volatile
   825                           
   826                           ;SPI.c: 19: (GIE = 1);
   827  01E2  178B               	bsf	11,7	;volatile
   828  01E3  0008               	return
   829  01E4                     __end_of_setupSPI:	
   830                           
   831                           	psect	text3
   832  01A3                     __ptext3:	
   833 ;; *************** function _setupLCD *****************
   834 ;; Defined at:
   835 ;;		line 86 in file "LCD.c"
   836 ;; Parameters:    Size  Location     Type
   837 ;;		None
   838 ;; Auto vars:     Size  Location     Type
   839 ;;		None
   840 ;; Return value:  Size  Location     Type
   841 ;;                  1    wreg      void 
   842 ;; Registers used:
   843 ;;		wreg, status,2, status,0, pclath, cstack
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   849 ;;      Params:         0       0       0       0       0
   850 ;;      Locals:         0       0       0       0       0
   851 ;;      Temps:          0       0       0       0       0
   852 ;;      Totals:         0       0       0       0       0
   853 ;;Total ram usage:        0 bytes
   854 ;; Hardware stack levels used:    1
   855 ;; Hardware stack levels required when called:    3
   856 ;; This function calls:
   857 ;;		_lcdWriteControl
   858 ;; This function is called by:
   859 ;;		_main
   860 ;; This function uses a non-reentrant model
   861 ;;
   862                           
   863                           
   864                           ;psect for function _setupLCD
   865  01A3                     _setupLCD:	
   866                           
   867                           ;LCD.c: 88: ADCON1 = 0b00000010;
   868                           
   869                           ;incstack = 0
   870                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
   871  01A3  3002               	movlw	2
   872  01A4  1683               	bsf	3,5	;RP0=1, select bank1
   873  01A5  1303               	bcf	3,6	;RP1=0, select bank1
   874  01A6  009F               	movwf	31	;volatile
   875                           
   876                           ;LCD.c: 90: PORTD = 0;
   877  01A7  1283               	bcf	3,5	;RP0=0, select bank0
   878  01A8  1303               	bcf	3,6	;RP1=0, select bank0
   879  01A9  0188               	clrf	8	;volatile
   880                           
   881                           ;LCD.c: 91: PORTE = 0;
   882  01AA  0189               	clrf	9	;volatile
   883                           
   884                           ;LCD.c: 93: TRISD = 0b00000000;
   885  01AB  1683               	bsf	3,5	;RP0=1, select bank1
   886  01AC  1303               	bcf	3,6	;RP1=0, select bank1
   887  01AD  0188               	clrf	8	;volatile
   888                           
   889                           ;LCD.c: 94: TRISE = 0b00000000;
   890  01AE  0189               	clrf	9	;volatile
   891                           
   892                           ;LCD.c: 97: lcdWriteControl(0b00000001);
   893  01AF  3001               	movlw	1
   894  01B0  120A  118A  21E4  120A  118A  	fcall	_lcdWriteControl
   895                           
   896                           ;LCD.c: 98: lcdWriteControl(0b00111000);
   897  01B5  3038               	movlw	56
   898  01B6  120A  118A  21E4  120A  118A  	fcall	_lcdWriteControl
   899                           
   900                           ;LCD.c: 99: lcdWriteControl(0b00001100);
   901  01BB  300C               	movlw	12
   902  01BC  120A  118A  21E4  120A  118A  	fcall	_lcdWriteControl
   903                           
   904                           ;LCD.c: 100: lcdWriteControl(0b00000110);
   905  01C1  3006               	movlw	6
   906  01C2  120A  118A  21E4  120A  118A  	fcall	_lcdWriteControl
   907                           
   908                           ;LCD.c: 101: lcdWriteControl(0b00000010);
   909  01C7  3002               	movlw	2
   910  01C8  120A  118A  21E4   	fcall	_lcdWriteControl
   911  01CB  0008               	return
   912  01CC                     __end_of_setupLCD:	
   913                           
   914                           	psect	text4
   915  01E4                     __ptext4:	
   916 ;; *************** function _lcdWriteControl *****************
   917 ;; Defined at:
   918 ;;		line 9 in file "LCD.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;  databyte        1    wreg     unsigned char 
   921 ;; Auto vars:     Size  Location     Type
   922 ;;  databyte        1    2[BANK0 ] unsigned char 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   932 ;;      Params:         0       0       0       0       0
   933 ;;      Locals:         0       1       0       0       0
   934 ;;      Temps:          0       2       0       0       0
   935 ;;      Totals:         0       3       0       0       0
   936 ;;Total ram usage:        3 bytes
   937 ;; Hardware stack levels used:    1
   938 ;; Hardware stack levels required when called:    2
   939 ;; This function calls:
   940 ;;		Nothing
   941 ;; This function is called by:
   942 ;;		_setupLCD
   943 ;;		_lcdSetCursor
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947                           
   948                           ;psect for function _lcdWriteControl
   949  01E4                     _lcdWriteControl:	
   950                           
   951                           ;incstack = 0
   952                           ; Regs used in _lcdWriteControl: [wreg]
   953                           ;lcdWriteControl@databyte stored from wreg
   954  01E4  1283               	bcf	3,5	;RP0=0, select bank0
   955  01E5  1303               	bcf	3,6	;RP1=0, select bank0
   956  01E6  00A2               	movwf	lcdWriteControl@databyte
   957                           
   958                           ;LCD.c: 10: RE2 = 0;
   959  01E7  1109               	bcf	9,2	;volatile
   960                           
   961                           ;LCD.c: 11: RE1 = 0;
   962  01E8  1089               	bcf	9,1	;volatile
   963                           
   964                           ;LCD.c: 12: RE0 = 0;
   965  01E9  1009               	bcf	9,0	;volatile
   966                           
   967                           ;LCD.c: 13: PORTD = databyte;
   968  01EA  0822               	movf	lcdWriteControl@databyte,w
   969  01EB  0088               	movwf	8	;volatile
   970                           
   971                           ;LCD.c: 14: RE2 = 1;
   972  01EC  1509               	bsf	9,2	;volatile
   973                           
   974                           ;LCD.c: 15: RE2 = 0;
   975  01ED  1109               	bcf	9,2	;volatile
   976                           
   977                           ;LCD.c: 16: _delay((unsigned long)((2)*(20000000/4000.0)));
   978  01EE  300D               	movlw	13
   979  01EF  00A1               	movwf	??_lcdWriteControl+1
   980  01F0  30FB               	movlw	251
   981  01F1  00A0               	movwf	??_lcdWriteControl
   982  01F2                     u397:	
   983  01F2  0BA0               	decfsz	??_lcdWriteControl,f
   984  01F3  29F2               	goto	u397
   985  01F4  0BA1               	decfsz	??_lcdWriteControl+1,f
   986  01F5  29F2               	goto	u397
   987  01F6  29F7               	nop2
   988  01F7  0008               	return
   989  01F8                     __end_of_lcdWriteControl:	
   990                           
   991                           	psect	text5
   992  0229                     __ptext5:	
   993 ;; *************** function _ser_putch *****************
   994 ;; Defined at:
   995 ;;		line 28 in file "ser.c"
   996 ;; Parameters:    Size  Location     Type
   997 ;;  c               1    wreg     unsigned char 
   998 ;; Auto vars:     Size  Location     Type
   999 ;;  c               1    0[BANK0 ] unsigned char 
  1000 ;; Return value:  Size  Location     Type
  1001 ;;                  1    wreg      void 
  1002 ;; Registers used:
  1003 ;;		wreg
  1004 ;; Tracked objects:
  1005 ;;		On entry : 0/0
  1006 ;;		On exit  : 0/0
  1007 ;;		Unchanged: 0/0
  1008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1009 ;;      Params:         0       0       0       0       0
  1010 ;;      Locals:         0       1       0       0       0
  1011 ;;      Temps:          0       0       0       0       0
  1012 ;;      Totals:         0       1       0       0       0
  1013 ;;Total ram usage:        1 bytes
  1014 ;; Hardware stack levels used:    1
  1015 ;; Hardware stack levels required when called:    2
  1016 ;; This function calls:
  1017 ;;		Nothing
  1018 ;; This function is called by:
  1019 ;;		_main
  1020 ;; This function uses a non-reentrant model
  1021 ;;
  1022                           
  1023                           
  1024                           ;psect for function _ser_putch
  1025  0229                     _ser_putch:	
  1026                           
  1027                           ;incstack = 0
  1028                           ; Regs used in _ser_putch: [wreg]
  1029                           ;ser_putch@c stored from wreg
  1030  0229  1283               	bcf	3,5	;RP0=0, select bank0
  1031  022A  1303               	bcf	3,6	;RP1=0, select bank0
  1032  022B  00A0               	movwf	ser_putch@c
  1033  022C                     l163:	
  1034                           ;ser.c: 29: while(!TRMT);
  1035                           
  1036  022C  1683               	bsf	3,5	;RP0=1, select bank1
  1037  022D  1303               	bcf	3,6	;RP1=0, select bank1
  1038  022E  1C98               	btfss	24,1	;volatile
  1039  022F  2A2C               	goto	l163
  1040                           
  1041                           ;ser.c: 30: TXREG=c;
  1042  0230  1283               	bcf	3,5	;RP0=0, select bank0
  1043  0231  1303               	bcf	3,6	;RP1=0, select bank0
  1044  0232  0820               	movf	ser_putch@c,w
  1045  0233  0099               	movwf	25	;volatile
  1046  0234  0008               	return
  1047  0235                     __end_of_ser_putch:	
  1048                           
  1049                           	psect	text6
  1050  021A                     __ptext6:	
  1051 ;; *************** function _ser_init *****************
  1052 ;; Defined at:
  1053 ;;		line 4 in file "ser.c"
  1054 ;; Parameters:    Size  Location     Type
  1055 ;;		None
  1056 ;; Auto vars:     Size  Location     Type
  1057 ;;		None
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  1    wreg      void 
  1060 ;; Registers used:
  1061 ;;		wreg
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1067 ;;      Params:         0       0       0       0       0
  1068 ;;      Locals:         0       0       0       0       0
  1069 ;;      Temps:          0       0       0       0       0
  1070 ;;      Totals:         0       0       0       0       0
  1071 ;;Total ram usage:        0 bytes
  1072 ;; Hardware stack levels used:    1
  1073 ;; Hardware stack levels required when called:    2
  1074 ;; This function calls:
  1075 ;;		Nothing
  1076 ;; This function is called by:
  1077 ;;		_main
  1078 ;; This function uses a non-reentrant model
  1079 ;;
  1080                           
  1081                           
  1082                           ;psect for function _ser_init
  1083  021A                     _ser_init:	
  1084                           
  1085                           ;ser.c: 6: TXSTA = 0b00100100;
  1086                           
  1087                           ;incstack = 0
  1088                           ; Regs used in _ser_init: [wreg]
  1089  021A  3024               	movlw	36
  1090  021B  1683               	bsf	3,5	;RP0=1, select bank1
  1091  021C  1303               	bcf	3,6	;RP1=0, select bank1
  1092  021D  0098               	movwf	24	;volatile
  1093                           
  1094                           ;ser.c: 7: RCSTA = 0b10011000;
  1095  021E  3098               	movlw	152
  1096  021F  1283               	bcf	3,5	;RP0=0, select bank0
  1097  0220  1303               	bcf	3,6	;RP1=0, select bank0
  1098  0221  0098               	movwf	24	;volatile
  1099                           
  1100                           ;ser.c: 22: SPBRG = 20;
  1101  0222  3014               	movlw	20
  1102  0223  1683               	bsf	3,5	;RP0=1, select bank1
  1103  0224  1303               	bcf	3,6	;RP1=0, select bank1
  1104  0225  0099               	movwf	25	;volatile
  1105                           
  1106                           ;ser.c: 24: PEIE = 1;
  1107  0226  170B               	bsf	11,6	;volatile
  1108                           
  1109                           ;ser.c: 25: (GIE = 1);
  1110  0227  178B               	bsf	11,7	;volatile
  1111  0228  0008               	return
  1112  0229                     __end_of_ser_init:	
  1113                           
  1114                           	psect	text7
  1115  0235                     __ptext7:	
  1116 ;; *************** function _ser_getch *****************
  1117 ;; Defined at:
  1118 ;;		line 33 in file "ser.c"
  1119 ;; Parameters:    Size  Location     Type
  1120 ;;		None
  1121 ;; Auto vars:     Size  Location     Type
  1122 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  1123 ;; Return value:  Size  Location     Type
  1124 ;;                  1    wreg      unsigned char 
  1125 ;; Registers used:
  1126 ;;		wreg
  1127 ;; Tracked objects:
  1128 ;;		On entry : 0/0
  1129 ;;		On exit  : 0/0
  1130 ;;		Unchanged: 0/0
  1131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1132 ;;      Params:         0       0       0       0       0
  1133 ;;      Locals:         0       1       0       0       0
  1134 ;;      Temps:          0       1       0       0       0
  1135 ;;      Totals:         0       2       0       0       0
  1136 ;;Total ram usage:        2 bytes
  1137 ;; Hardware stack levels used:    1
  1138 ;; Hardware stack levels required when called:    2
  1139 ;; This function calls:
  1140 ;;		Nothing
  1141 ;; This function is called by:
  1142 ;;		_main
  1143 ;; This function uses a non-reentrant model
  1144 ;;
  1145                           
  1146                           
  1147                           ;psect for function _ser_getch
  1148  0235                     _ser_getch:	
  1149  0235                     l169:	
  1150                           ;ser.c: 34: while(!RCIF);
  1151                           
  1152                           ;incstack = 0
  1153                           ; Regs used in _ser_getch: [wreg]
  1154                           
  1155  0235  1283               	bcf	3,5	;RP0=0, select bank0
  1156  0236  1303               	bcf	3,6	;RP1=0, select bank0
  1157  0237  1E8C               	btfss	12,5	;volatile
  1158  0238  2A35               	goto	l169
  1159                           
  1160                           ;ser.c: 35: unsigned char rxbyte = RCREG;
  1161  0239  081A               	movf	26,w	;volatile
  1162  023A  00A0               	movwf	??_ser_getch
  1163  023B  0820               	movf	??_ser_getch,w
  1164  023C  00A1               	movwf	ser_getch@rxbyte
  1165  023D  0008               	return
  1166  023E                     __end_of_ser_getch:	
  1167                           ;ser.c: 36: return rxbyte;
  1168                           ;	Return value of _ser_getch is never used
  1169                           
  1170                           
  1171                           	psect	text8
  1172  0023                     __ptext8:	
  1173 ;; *************** function _lcdWriteToDigitBCD *****************
  1174 ;; Defined at:
  1175 ;;		line 42 in file "LCD.c"
  1176 ;; Parameters:    Size  Location     Type
  1177 ;;  data            2    3[BANK0 ] unsigned int 
  1178 ;; Auto vars:     Size  Location     Type
  1179 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  1180 ;;  TenThouDigit    2   11[BANK0 ] unsigned int 
  1181 ;;  ThouDigit       2    9[BANK0 ] unsigned int 
  1182 ;;  HunsDigit       2    7[BANK0 ] unsigned int 
  1183 ;;  TensDigit       2    5[BANK0 ] unsigned int 
  1184 ;; Return value:  Size  Location     Type
  1185 ;;                  1    wreg      void 
  1186 ;; Registers used:
  1187 ;;		wreg, status,2, status,0, pclath, cstack
  1188 ;; Tracked objects:
  1189 ;;		On entry : 0/0
  1190 ;;		On exit  : 0/0
  1191 ;;		Unchanged: 0/0
  1192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1193 ;;      Params:         0       2       0       0       0
  1194 ;;      Locals:         0      10       0       0       0
  1195 ;;      Temps:          0       0       0       0       0
  1196 ;;      Totals:         0      12       0       0       0
  1197 ;;Total ram usage:       12 bytes
  1198 ;; Hardware stack levels used:    1
  1199 ;; Hardware stack levels required when called:    3
  1200 ;; This function calls:
  1201 ;;		_lcdWriteData
  1202 ;; This function is called by:
  1203 ;;		_main
  1204 ;; This function uses a non-reentrant model
  1205 ;;
  1206                           
  1207                           
  1208                           ;psect for function _lcdWriteToDigitBCD
  1209  0023                     _lcdWriteToDigitBCD:	
  1210                           
  1211                           ;LCD.c: 43: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  1212                           ;LCD.c: 46: OnesDigit = data;
  1213                           
  1214                           ;incstack = 0
  1215                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  1216  0023  1283               	bcf	3,5	;RP0=0, select bank0
  1217  0024  1303               	bcf	3,6	;RP1=0, select bank0
  1218  0025  0824               	movf	lcdWriteToDigitBCD@data+1,w
  1219  0026  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1220  0027  0823               	movf	lcdWriteToDigitBCD@data,w
  1221  0028  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  1222                           
  1223                           ;LCD.c: 47: TensDigit = 0;
  1224  0029  01A5               	clrf	lcdWriteToDigitBCD@TensDigit
  1225  002A  01A6               	clrf	lcdWriteToDigitBCD@TensDigit+1
  1226                           
  1227                           ;LCD.c: 48: HunsDigit = 0;
  1228  002B  01A7               	clrf	lcdWriteToDigitBCD@HunsDigit
  1229  002C  01A8               	clrf	lcdWriteToDigitBCD@HunsDigit+1
  1230                           
  1231                           ;LCD.c: 49: ThouDigit = 0;
  1232  002D  01A9               	clrf	lcdWriteToDigitBCD@ThouDigit
  1233  002E  01AA               	clrf	lcdWriteToDigitBCD@ThouDigit+1
  1234                           
  1235                           ;LCD.c: 50: TenThouDigit = 0;
  1236  002F  01AB               	clrf	lcdWriteToDigitBCD@TenThouDigit
  1237  0030  01AC               	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  1238  0031                     l942:	
  1239                           ;LCD.c: 53: while (OnesDigit >= 10000){
  1240                           
  1241  0031  3027               	movlw	39
  1242  0032  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1243  0033  3010               	movlw	16
  1244  0034  1903               	skipnz
  1245  0035  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1246  0036  1C03               	btfss	3,0
  1247  0037  2855               	goto	l948
  1248                           
  1249                           ;LCD.c: 54: OnesDigit = OnesDigit - 10000;
  1250  0038  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  1251  0039  3EF0               	addlw	240
  1252  003A  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  1253  003B  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1254  003C  1803               	skipnc
  1255  003D  3E01               	addlw	1
  1256  003E  3ED8               	addlw	216
  1257  003F  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1258                           
  1259                           ;LCD.c: 55: TenThouDigit++;
  1260  0040  3001               	movlw	1
  1261  0041  07AB               	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  1262  0042  1803               	skipnc
  1263  0043  0AAC               	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  1264  0044  3000               	movlw	0
  1265  0045  07AC               	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  1266  0046  2831               	goto	l942
  1267  0047                     l944:	
  1268                           ;LCD.c: 56: }
  1269                           ;LCD.c: 58: while (OnesDigit >= 1000){
  1270                           
  1271                           
  1272                           ;LCD.c: 59: OnesDigit = OnesDigit - 1000;
  1273  0047  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  1274  0048  3E18               	addlw	24
  1275  0049  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  1276  004A  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1277  004B  1803               	skipnc
  1278  004C  3E01               	addlw	1
  1279  004D  3EFC               	addlw	252
  1280  004E  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1281                           
  1282                           ;LCD.c: 60: ThouDigit++;
  1283  004F  3001               	movlw	1
  1284  0050  07A9               	addwf	lcdWriteToDigitBCD@ThouDigit,f
  1285  0051  1803               	skipnc
  1286  0052  0AAA               	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  1287  0053  3000               	movlw	0
  1288  0054  07AA               	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  1289  0055                     l948:	
  1290  0055  3003               	movlw	3
  1291  0056  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1292  0057  30E8               	movlw	232
  1293  0058  1903               	skipnz
  1294  0059  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1295  005A  1C03               	btfss	3,0
  1296  005B  286B               	goto	l954
  1297  005C  2847               	goto	l944
  1298  005D                     l950:	
  1299                           ;LCD.c: 61: }
  1300                           ;LCD.c: 63: while (OnesDigit >= 100){
  1301                           
  1302                           
  1303                           ;LCD.c: 64: OnesDigit = OnesDigit - 100;
  1304  005D  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  1305  005E  3E9C               	addlw	156
  1306  005F  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  1307  0060  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1308  0061  1803               	skipnc
  1309  0062  3E01               	addlw	1
  1310  0063  3EFF               	addlw	255
  1311  0064  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1312                           
  1313                           ;LCD.c: 65: HunsDigit++;
  1314  0065  3001               	movlw	1
  1315  0066  07A7               	addwf	lcdWriteToDigitBCD@HunsDigit,f
  1316  0067  1803               	skipnc
  1317  0068  0AA8               	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  1318  0069  3000               	movlw	0
  1319  006A  07A8               	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  1320  006B                     l954:	
  1321  006B  3000               	movlw	0
  1322  006C  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1323  006D  3064               	movlw	100
  1324  006E  1903               	skipnz
  1325  006F  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1326  0070  1C03               	btfss	3,0
  1327  0071  2881               	goto	l960
  1328  0072  285D               	goto	l950
  1329  0073                     l956:	
  1330                           ;LCD.c: 66: }
  1331                           ;LCD.c: 68: while (OnesDigit >= 10){
  1332                           
  1333                           
  1334                           ;LCD.c: 69: OnesDigit = OnesDigit - 10;
  1335  0073  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  1336  0074  3EF6               	addlw	246
  1337  0075  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  1338  0076  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1339  0077  1803               	skipnc
  1340  0078  3E01               	addlw	1
  1341  0079  3EFF               	addlw	255
  1342  007A  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1343                           
  1344                           ;LCD.c: 70: TensDigit++;
  1345  007B  3001               	movlw	1
  1346  007C  07A5               	addwf	lcdWriteToDigitBCD@TensDigit,f
  1347  007D  1803               	skipnc
  1348  007E  0AA6               	incf	lcdWriteToDigitBCD@TensDigit+1,f
  1349  007F  3000               	movlw	0
  1350  0080  07A6               	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  1351  0081                     l960:	
  1352  0081  3000               	movlw	0
  1353  0082  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1354  0083  300A               	movlw	10
  1355  0084  1903               	skipnz
  1356  0085  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1357  0086  1803               	skipnc
  1358  0087  2873               	goto	l956
  1359                           
  1360                           ;LCD.c: 71: }
  1361                           ;LCD.c: 73: if (TenThouDigit > 0)
  1362  0088  082B               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  1363  0089  042C               	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  1364  008A  1903               	btfsc	3,2
  1365  008B  2893               	goto	l966
  1366                           
  1367                           ;LCD.c: 74: lcdWriteData((unsigned int)TenThouDigit + 48);
  1368  008C  082B               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  1369  008D  3E30               	addlw	48
  1370  008E  120A  118A  21F8  120A  118A  	fcall	_lcdWriteData
  1371  0093                     l966:	
  1372                           
  1373                           ;LCD.c: 76: if (ThouDigit > 0)
  1374  0093  1283               	bcf	3,5	;RP0=0, select bank0
  1375  0094  1303               	bcf	3,6	;RP1=0, select bank0
  1376  0095  0829               	movf	lcdWriteToDigitBCD@ThouDigit,w
  1377  0096  042A               	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  1378  0097  1903               	btfsc	3,2
  1379  0098  28A0               	goto	l102
  1380                           
  1381                           ;LCD.c: 77: lcdWriteData((unsigned int)ThouDigit + 48);
  1382  0099  0829               	movf	lcdWriteToDigitBCD@ThouDigit,w
  1383  009A  3E30               	addlw	48
  1384  009B  120A  118A  21F8  120A  118A  	fcall	_lcdWriteData
  1385  00A0                     l102:	
  1386                           
  1387                           ;LCD.c: 79: lcdWriteData((unsigned int)HunsDigit + 48);
  1388  00A0  1283               	bcf	3,5	;RP0=0, select bank0
  1389  00A1  1303               	bcf	3,6	;RP1=0, select bank0
  1390  00A2  0827               	movf	lcdWriteToDigitBCD@HunsDigit,w
  1391  00A3  3E30               	addlw	48
  1392  00A4  120A  118A  21F8  120A  118A  	fcall	_lcdWriteData
  1393                           
  1394                           ;LCD.c: 80: lcdWriteData((unsigned int)TensDigit + 48);
  1395  00A9  1283               	bcf	3,5	;RP0=0, select bank0
  1396  00AA  1303               	bcf	3,6	;RP1=0, select bank0
  1397  00AB  0825               	movf	lcdWriteToDigitBCD@TensDigit,w
  1398  00AC  3E30               	addlw	48
  1399  00AD  120A  118A  21F8  120A  118A  	fcall	_lcdWriteData
  1400                           
  1401                           ;LCD.c: 81: lcdWriteData((unsigned int)OnesDigit + 48);
  1402  00B2  1283               	bcf	3,5	;RP0=0, select bank0
  1403  00B3  1303               	bcf	3,6	;RP1=0, select bank0
  1404  00B4  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  1405  00B5  3E30               	addlw	48
  1406  00B6  120A  118A  21F8   	fcall	_lcdWriteData
  1407  00B9  0008               	return
  1408  00BA                     __end_of_lcdWriteToDigitBCD:	
  1409                           
  1410                           	psect	text9
  1411  01F8                     __ptext9:	
  1412 ;; *************** function _lcdWriteData *****************
  1413 ;; Defined at:
  1414 ;;		line 20 in file "LCD.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;  databyte        1    wreg     unsigned char 
  1417 ;; Auto vars:     Size  Location     Type
  1418 ;;  databyte        1    2[BANK0 ] unsigned char 
  1419 ;; Return value:  Size  Location     Type
  1420 ;;                  1    wreg      void 
  1421 ;; Registers used:
  1422 ;;		wreg
  1423 ;; Tracked objects:
  1424 ;;		On entry : 0/0
  1425 ;;		On exit  : 0/0
  1426 ;;		Unchanged: 0/0
  1427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1428 ;;      Params:         0       0       0       0       0
  1429 ;;      Locals:         0       1       0       0       0
  1430 ;;      Temps:          0       2       0       0       0
  1431 ;;      Totals:         0       3       0       0       0
  1432 ;;Total ram usage:        3 bytes
  1433 ;; Hardware stack levels used:    1
  1434 ;; Hardware stack levels required when called:    2
  1435 ;; This function calls:
  1436 ;;		Nothing
  1437 ;; This function is called by:
  1438 ;;		_lcdWriteToDigitBCD
  1439 ;;		_lcdWriteString
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           
  1444                           ;psect for function _lcdWriteData
  1445  01F8                     _lcdWriteData:	
  1446                           
  1447                           ;incstack = 0
  1448                           ; Regs used in _lcdWriteData: [wreg]
  1449                           ;lcdWriteData@databyte stored from wreg
  1450  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  1451  01F9  1303               	bcf	3,6	;RP1=0, select bank0
  1452  01FA  00A2               	movwf	lcdWriteData@databyte
  1453                           
  1454                           ;LCD.c: 21: RE2 = 0;
  1455  01FB  1109               	bcf	9,2	;volatile
  1456                           
  1457                           ;LCD.c: 22: RE1 = 0;
  1458  01FC  1089               	bcf	9,1	;volatile
  1459                           
  1460                           ;LCD.c: 23: RE0 = 1;
  1461  01FD  1409               	bsf	9,0	;volatile
  1462                           
  1463                           ;LCD.c: 24: PORTD = databyte;
  1464  01FE  0822               	movf	lcdWriteData@databyte,w
  1465  01FF  0088               	movwf	8	;volatile
  1466                           
  1467                           ;LCD.c: 25: RE2 = 1;
  1468  0200  1509               	bsf	9,2	;volatile
  1469                           
  1470                           ;LCD.c: 26: RE2 = 0;
  1471  0201  1109               	bcf	9,2	;volatile
  1472                           
  1473                           ;LCD.c: 27: _delay((unsigned long)((1)*(20000000/4000.0)));
  1474  0202  3007               	movlw	7
  1475  0203  00A1               	movwf	??_lcdWriteData+1
  1476  0204  307D               	movlw	125
  1477  0205  00A0               	movwf	??_lcdWriteData
  1478  0206                     u407:	
  1479  0206  0BA0               	decfsz	??_lcdWriteData,f
  1480  0207  2A06               	goto	u407
  1481  0208  0BA1               	decfsz	??_lcdWriteData+1,f
  1482  0209  2A06               	goto	u407
  1483  020A  0008               	return
  1484  020B                     __end_of_lcdWriteData:	
  1485                           
  1486                           	psect	text10
  1487  0172                     __ptext10:	
  1488 ;; *************** function _isr *****************
  1489 ;; Defined at:
  1490 ;;		line 12 in file "main.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;		None
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;		None
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  1    wreg      void 
  1497 ;; Registers used:
  1498 ;;		wreg, status,2, status,0, pclath, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1504 ;;      Params:         0       0       0       0       0
  1505 ;;      Locals:         0       0       0       0       0
  1506 ;;      Temps:          4       0       0       0       0
  1507 ;;      Totals:         4       0       0       0       0
  1508 ;;Total ram usage:        4 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    1
  1511 ;; This function calls:
  1512 ;;		___lwmod
  1513 ;; This function is called by:
  1514 ;;		Interrupt level 1
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           
  1519                           ;psect for function _isr
  1520  0172                     _isr:	
  1521                           
  1522                           ;main.c: 14: if(TMR0IF){
  1523  0172  1D0B               	btfss	11,2	;volatile
  1524  0173  2996               	goto	i1l40
  1525                           
  1526                           ;main.c: 15: TMR0IF = 0;
  1527  0174  110B               	bcf	11,2	;volatile
  1528                           
  1529                           ;main.c: 16: TMR0 = 100;
  1530  0175  3064               	movlw	100
  1531  0176  0081               	movwf	1	;volatile
  1532                           
  1533                           ;main.c: 19: if(time_count % 1 == 0) {
  1534  0177  3001               	movlw	1
  1535  0178  07FA               	addwf	_time_count,f	;volatile
  1536  0179  1803               	skipnc
  1537  017A  0AFB               	incf	_time_count+1,f	;volatile
  1538  017B  3000               	movlw	0
  1539  017C  07FB               	addwf	_time_count+1,f	;volatile
  1540                           
  1541                           ;main.c: 21: RC2 = 1; __nop(); RC2 = 0;;
  1542  017D  1507               	bsf	7,2	;volatile
  1543  017E  0000               	nop
  1544  017F  1283               	bcf	3,5	;RP0=0, select bank0
  1545  0180  1303               	bcf	3,6	;RP1=0, select bank0
  1546  0181  1107               	bcf	7,2	;volatile
  1547                           
  1548                           ;main.c: 22: }
  1549                           ;main.c: 24: if(time_count % 1000 == 0){
  1550  0182  30E8               	movlw	232
  1551  0183  00F0               	movwf	___lwmod@divisor
  1552  0184  3003               	movlw	3
  1553  0185  00F1               	movwf	___lwmod@divisor+1
  1554  0186  087B               	movf	_time_count+1,w	;volatile
  1555  0187  00F3               	movwf	___lwmod@dividend+1
  1556  0188  087A               	movf	_time_count,w	;volatile
  1557  0189  00F2               	movwf	___lwmod@dividend
  1558  018A  120A  118A  2140  120A  118A  	fcall	___lwmod
  1559  018F  0870               	movf	?___lwmod,w
  1560  0190  0471               	iorwf	?___lwmod+1,w
  1561  0191  1D03               	btfss	3,2
  1562  0192  2996               	goto	i1l40
  1563                           
  1564                           ;main.c: 25: FLAG_1000MS = 1;
  1565  0193  147C               	bsf	_FLAG_1000MS/(0+8),_FLAG_1000MS& (0+7)	;volatile
  1566                           
  1567                           ;main.c: 26: time_count = 0;
  1568  0194  01FA               	clrf	_time_count	;volatile
  1569  0195  01FB               	clrf	_time_count+1	;volatile
  1570  0196                     i1l40:	
  1571  0196  0879               	movf	??_isr+3,w
  1572  0197  1283               	bcf	3,5	;RP0=0, select bank0
  1573  0198  1303               	bcf	3,6	;RP1=0, select bank0
  1574  0199  00FF               	movwf	127
  1575  019A  0878               	movf	??_isr+2,w
  1576  019B  008A               	movwf	10
  1577  019C  0877               	movf	??_isr+1,w
  1578  019D  0084               	movwf	4
  1579  019E  0E76               	swapf	??_isr^(0+-128),w
  1580  019F  0083               	movwf	3
  1581  01A0  0EFE               	swapf	126,f
  1582  01A1  0E7E               	swapf	126,w
  1583  01A2  0009               	retfie
  1584  01A3                     __end_of_isr:	
  1585                           
  1586                           	psect	intentry
  1587  0004                     __pintentry:	
  1588                           ;incstack = 0
  1589                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  1590                           
  1591  0004                     interrupt_function:	
  1592  007E                     saved_w	set	btemp
  1593  0004  00FE               	movwf	btemp
  1594  0005  0E03               	swapf	3,w
  1595  0006  00F6               	movwf	??_isr
  1596  0007  0804               	movf	4,w
  1597  0008  00F7               	movwf	??_isr+1
  1598  0009  080A               	movf	10,w
  1599  000A  00F8               	movwf	??_isr+2
  1600  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1601  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1602  000D  087F               	movf	btemp+1,w
  1603  000E  00F9               	movwf	??_isr+3
  1604  000F  120A  118A  2972   	ljmp	_isr
  1605                           
  1606                           	psect	text11
  1607  0140                     __ptext11:	
  1608 ;; *************** function ___lwmod *****************
  1609 ;; Defined at:
  1610 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;  divisor         2    0[COMMON] unsigned int 
  1613 ;;  dividend        2    2[COMMON] unsigned int 
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;  counter         1    5[COMMON] unsigned char 
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  2    0[COMMON] unsigned int 
  1618 ;; Registers used:
  1619 ;;		wreg, status,2, status,0
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1625 ;;      Params:         4       0       0       0       0
  1626 ;;      Locals:         1       0       0       0       0
  1627 ;;      Temps:          1       0       0       0       0
  1628 ;;      Totals:         6       0       0       0       0
  1629 ;;Total ram usage:        6 bytes
  1630 ;; Hardware stack levels used:    1
  1631 ;; This function calls:
  1632 ;;		Nothing
  1633 ;; This function is called by:
  1634 ;;		_isr
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           
  1639                           ;psect for function ___lwmod
  1640  0140                     ___lwmod:	
  1641                           
  1642                           ;incstack = 0
  1643                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1644  0140  0870               	movf	___lwmod@divisor,w
  1645  0141  0471               	iorwf	___lwmod@divisor+1,w
  1646  0142  1903               	btfsc	3,2
  1647  0143  296D               	goto	i1l988
  1648  0144  01F5               	clrf	___lwmod@counter
  1649  0145  0AF5               	incf	___lwmod@counter,f
  1650  0146                     i1l978:	
  1651  0146  1BF1               	btfsc	___lwmod@divisor+1,7
  1652  0147  2954               	goto	i1l980
  1653  0148  3001               	movlw	1
  1654  0149                     u30_25:	
  1655  0149  1003               	clrc
  1656  014A  0DF0               	rlf	___lwmod@divisor,f
  1657  014B  0DF1               	rlf	___lwmod@divisor+1,f
  1658  014C  3EFF               	addlw	-1
  1659  014D  1D03               	skipz
  1660  014E  2949               	goto	u30_25
  1661  014F  3001               	movlw	1
  1662  0150  00F4               	movwf	??___lwmod
  1663  0151  0874               	movf	??___lwmod,w
  1664  0152  07F5               	addwf	___lwmod@counter,f
  1665  0153  2946               	goto	i1l978
  1666  0154                     i1l980:	
  1667  0154  0871               	movf	___lwmod@divisor+1,w
  1668  0155  0273               	subwf	___lwmod@dividend+1,w
  1669  0156  1D03               	skipz
  1670  0157  295A               	goto	u32_25
  1671  0158  0870               	movf	___lwmod@divisor,w
  1672  0159  0272               	subwf	___lwmod@dividend,w
  1673  015A                     u32_25:	
  1674  015A  1C03               	skipc
  1675  015B  2962               	goto	i1l984
  1676  015C  0870               	movf	___lwmod@divisor,w
  1677  015D  02F2               	subwf	___lwmod@dividend,f
  1678  015E  0871               	movf	___lwmod@divisor+1,w
  1679  015F  1C03               	skipc
  1680  0160  03F3               	decf	___lwmod@dividend+1,f
  1681  0161  02F3               	subwf	___lwmod@dividend+1,f
  1682  0162                     i1l984:	
  1683  0162  3001               	movlw	1
  1684  0163                     u33_25:	
  1685  0163  1003               	clrc
  1686  0164  0CF1               	rrf	___lwmod@divisor+1,f
  1687  0165  0CF0               	rrf	___lwmod@divisor,f
  1688  0166  3EFF               	addlw	-1
  1689  0167  1D03               	skipz
  1690  0168  2963               	goto	u33_25
  1691  0169  3001               	movlw	1
  1692  016A  02F5               	subwf	___lwmod@counter,f
  1693  016B  1D03               	btfss	3,2
  1694  016C  2954               	goto	i1l980
  1695  016D                     i1l988:	
  1696  016D  0873               	movf	___lwmod@dividend+1,w
  1697  016E  00F1               	movwf	?___lwmod+1
  1698  016F  0872               	movf	___lwmod@dividend,w
  1699  0170  00F0               	movwf	?___lwmod
  1700  0171  0008               	return
  1701  0172                     __end_of___lwmod:	
  1702  007E                     btemp	set	126	;btemp
  1703  007E                     wtemp	set	126
  1704  007E                     wtemp0	set	126
  1705  0080                     wtemp1	set	128
  1706  0082                     wtemp2	set	130
  1707  0084                     wtemp3	set	132
  1708  0086                     wtemp4	set	134
  1709  0088                     wtemp5	set	136
  1710  007F                     wtemp6	set	127
  1711  007E                     ttemp	set	126
  1712  007E                     ttemp0	set	126
  1713  0081                     ttemp1	set	129
  1714  0084                     ttemp2	set	132
  1715  0087                     ttemp3	set	135
  1716  007F                     ttemp4	set	127
  1717  007E                     ltemp	set	126
  1718  007E                     ltemp0	set	126
  1719  0082                     ltemp1	set	130
  1720  0086                     ltemp2	set	134
  1721  0080                     ltemp3	set	128
=======
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     	;# 
    34  0001                     	;# 
    35  0002                     	;# 
    36  0003                     	;# 
    37  0004                     	;# 
    38  0005                     	;# 
    39  0006                     	;# 
    40  0007                     	;# 
    41  0008                     	;# 
    42  0009                     	;# 
    43  000A                     	;# 
    44  000B                     	;# 
    45  000C                     	;# 
    46  000D                     	;# 
    47  000E                     	;# 
    48  000E                     	;# 
    49  000F                     	;# 
    50  0010                     	;# 
    51  0011                     	;# 
    52  0012                     	;# 
    53  0013                     	;# 
    54  0014                     	;# 
    55  0015                     	;# 
    56  0015                     	;# 
    57  0016                     	;# 
    58  0017                     	;# 
    59  0018                     	;# 
    60  0019                     	;# 
    61  001A                     	;# 
    62  001B                     	;# 
    63  001B                     	;# 
    64  001C                     	;# 
    65  001D                     	;# 
    66  001E                     	;# 
    67  001F                     	;# 
    68  0081                     	;# 
    69  0085                     	;# 
    70  0086                     	;# 
    71  0087                     	;# 
    72  0088                     	;# 
    73  0089                     	;# 
    74  008C                     	;# 
    75  008D                     	;# 
    76  008E                     	;# 
    77  0091                     	;# 
    78  0092                     	;# 
    79  0093                     	;# 
    80  0094                     	;# 
    81  0098                     	;# 
    82  0099                     	;# 
    83  009C                     	;# 
    84  009D                     	;# 
    85  009E                     	;# 
    86  009F                     	;# 
    87  010C                     	;# 
    88  010D                     	;# 
    89  010E                     	;# 
    90  010F                     	;# 
    91  018C                     	;# 
    92  018D                     	;# 
    93  0000                     	;# 
    94  0001                     	;# 
    95  0002                     	;# 
    96  0003                     	;# 
    97  0004                     	;# 
    98  0005                     	;# 
    99  0006                     	;# 
   100  0007                     	;# 
   101  0008                     	;# 
   102  0009                     	;# 
   103  000A                     	;# 
   104  000B                     	;# 
   105  000C                     	;# 
   106  000D                     	;# 
   107  000E                     	;# 
   108  000E                     	;# 
   109  000F                     	;# 
   110  0010                     	;# 
   111  0011                     	;# 
   112  0012                     	;# 
   113  0013                     	;# 
   114  0014                     	;# 
   115  0015                     	;# 
   116  0015                     	;# 
   117  0016                     	;# 
   118  0017                     	;# 
   119  0018                     	;# 
   120  0019                     	;# 
   121  001A                     	;# 
   122  001B                     	;# 
   123  001B                     	;# 
   124  001C                     	;# 
   125  001D                     	;# 
   126  001E                     	;# 
   127  001F                     	;# 
   128  0081                     	;# 
   129  0085                     	;# 
   130  0086                     	;# 
   131  0087                     	;# 
   132  0088                     	;# 
   133  0089                     	;# 
   134  008C                     	;# 
   135  008D                     	;# 
   136  008E                     	;# 
   137  0091                     	;# 
   138  0092                     	;# 
   139  0093                     	;# 
   140  0094                     	;# 
   141  0098                     	;# 
   142  0099                     	;# 
   143  009C                     	;# 
   144  009D                     	;# 
   145  009E                     	;# 
   146  009F                     	;# 
   147  010C                     	;# 
   148  010D                     	;# 
   149  010E                     	;# 
   150  010F                     	;# 
   151  018C                     	;# 
   152  018D                     	;# 
   153  0000                     	;# 
   154  0001                     	;# 
   155  0002                     	;# 
   156  0003                     	;# 
   157  0004                     	;# 
   158  0005                     	;# 
   159  0006                     	;# 
   160  0007                     	;# 
   161  0008                     	;# 
   162  0009                     	;# 
   163  000A                     	;# 
   164  000B                     	;# 
   165  000C                     	;# 
   166  000D                     	;# 
   167  000E                     	;# 
   168  000E                     	;# 
   169  000F                     	;# 
   170  0010                     	;# 
   171  0011                     	;# 
   172  0012                     	;# 
   173  0013                     	;# 
   174  0014                     	;# 
   175  0015                     	;# 
   176  0015                     	;# 
   177  0016                     	;# 
   178  0017                     	;# 
   179  0018                     	;# 
   180  0019                     	;# 
   181  001A                     	;# 
   182  001B                     	;# 
   183  001B                     	;# 
   184  001C                     	;# 
   185  001D                     	;# 
   186  001E                     	;# 
   187  001F                     	;# 
   188  0081                     	;# 
   189  0085                     	;# 
   190  0086                     	;# 
   191  0087                     	;# 
   192  0088                     	;# 
   193  0089                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0093                     	;# 
   200  0094                     	;# 
   201  0098                     	;# 
   202  0099                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009E                     	;# 
   206  009F                     	;# 
   207  010C                     	;# 
   208  010D                     	;# 
   209  010E                     	;# 
   210  010F                     	;# 
   211  018C                     	;# 
   212  018D                     	;# 
   213  0000                     	;# 
   214  0001                     	;# 
   215  0002                     	;# 
   216  0003                     	;# 
   217  0004                     	;# 
   218  0005                     	;# 
   219  0006                     	;# 
   220  0007                     	;# 
   221  0008                     	;# 
   222  0009                     	;# 
   223  000A                     	;# 
   224  000B                     	;# 
   225  000C                     	;# 
   226  000D                     	;# 
   227  000E                     	;# 
   228  000E                     	;# 
   229  000F                     	;# 
   230  0010                     	;# 
   231  0011                     	;# 
   232  0012                     	;# 
   233  0013                     	;# 
   234  0014                     	;# 
   235  0015                     	;# 
   236  0015                     	;# 
   237  0016                     	;# 
   238  0017                     	;# 
   239  0018                     	;# 
   240  0019                     	;# 
   241  001A                     	;# 
   242  001B                     	;# 
   243  001B                     	;# 
   244  001C                     	;# 
   245  001D                     	;# 
   246  001E                     	;# 
   247  001F                     	;# 
   248  0081                     	;# 
   249  0085                     	;# 
   250  0086                     	;# 
   251  0087                     	;# 
   252  0088                     	;# 
   253  0089                     	;# 
   254  008C                     	;# 
   255  008D                     	;# 
   256  008E                     	;# 
   257  0091                     	;# 
   258  0092                     	;# 
   259  0093                     	;# 
   260  0094                     	;# 
   261  0098                     	;# 
   262  0099                     	;# 
   263  009C                     	;# 
   264  009D                     	;# 
   265  009E                     	;# 
   266  009F                     	;# 
   267  010C                     	;# 
   268  010D                     	;# 
   269  010E                     	;# 
   270  010F                     	;# 
   271  018C                     	;# 
   272  018D                     	;# 
   273  0000                     	;# 
   274  0001                     	;# 
   275  0002                     	;# 
   276  0003                     	;# 
   277  0004                     	;# 
   278  0005                     	;# 
   279  0006                     	;# 
   280  0007                     	;# 
   281  0008                     	;# 
   282  0009                     	;# 
   283  000A                     	;# 
   284  000B                     	;# 
   285  000C                     	;# 
   286  000D                     	;# 
   287  000E                     	;# 
   288  000E                     	;# 
   289  000F                     	;# 
   290  0010                     	;# 
   291  0011                     	;# 
   292  0012                     	;# 
   293  0013                     	;# 
   294  0014                     	;# 
   295  0015                     	;# 
   296  0015                     	;# 
   297  0016                     	;# 
   298  0017                     	;# 
   299  0018                     	;# 
   300  0019                     	;# 
   301  001A                     	;# 
   302  001B                     	;# 
   303  001B                     	;# 
   304  001C                     	;# 
   305  001D                     	;# 
   306  001E                     	;# 
   307  001F                     	;# 
   308  0081                     	;# 
   309  0085                     	;# 
   310  0086                     	;# 
   311  0087                     	;# 
   312  0088                     	;# 
   313  0089                     	;# 
   314  008C                     	;# 
   315  008D                     	;# 
   316  008E                     	;# 
   317  0091                     	;# 
   318  0092                     	;# 
   319  0093                     	;# 
   320  0094                     	;# 
   321  0098                     	;# 
   322  0099                     	;# 
   323  009C                     	;# 
   324  009D                     	;# 
   325  009E                     	;# 
   326  009F                     	;# 
   327  010C                     	;# 
   328  010D                     	;# 
   329  010E                     	;# 
   330  010F                     	;# 
   331  018C                     	;# 
   332  018D                     	;# 
   333  0000                     	;# 
   334  0001                     	;# 
   335  0002                     	;# 
   336  0003                     	;# 
   337  0004                     	;# 
   338  0005                     	;# 
   339  0006                     	;# 
   340  0007                     	;# 
   341  0008                     	;# 
   342  0009                     	;# 
   343  000A                     	;# 
   344  000B                     	;# 
   345  000C                     	;# 
   346  000D                     	;# 
   347  000E                     	;# 
   348  000E                     	;# 
   349  000F                     	;# 
   350  0010                     	;# 
   351  0011                     	;# 
   352  0012                     	;# 
   353  0013                     	;# 
   354  0014                     	;# 
   355  0015                     	;# 
   356  0015                     	;# 
   357  0016                     	;# 
   358  0017                     	;# 
   359  0018                     	;# 
   360  0019                     	;# 
   361  001A                     	;# 
   362  001B                     	;# 
   363  001B                     	;# 
   364  001C                     	;# 
   365  001D                     	;# 
   366  001E                     	;# 
   367  001F                     	;# 
   368  0081                     	;# 
   369  0085                     	;# 
   370  0086                     	;# 
   371  0087                     	;# 
   372  0088                     	;# 
   373  0089                     	;# 
   374  008C                     	;# 
   375  008D                     	;# 
   376  008E                     	;# 
   377  0091                     	;# 
   378  0092                     	;# 
   379  0093                     	;# 
   380  0094                     	;# 
   381  0098                     	;# 
   382  0099                     	;# 
   383  009C                     	;# 
   384  009D                     	;# 
   385  009E                     	;# 
   386  009F                     	;# 
   387  010C                     	;# 
   388  010D                     	;# 
   389  010E                     	;# 
   390  010F                     	;# 
   391  018C                     	;# 
   392  018D                     	;# 
   393                           
   394                           	psect	idataBANK0
   395  03B6                     __pidataBANK0:	
   396                           
   397                           ;initializer for _adcClosest
   398  03B6  34E8               	retlw	232
   399  03B7  3403               	retlw	3
   400  001F                     _ADCON0	set	31
   401  0005                     _PORTA	set	5
   402  0007                     _PORTC	set	7
   403  0008                     _PORTD	set	8
   404  0009                     _PORTE	set	9
   405  001A                     _RCREG	set	26
   406  0018                     _RCSTA	set	24
   407  0013                     _SSPBUF	set	19
   408  0014                     _SSPCON	set	20
   409  0001                     _TMR0	set	1
   410  0019                     _TXREG	set	25
   411  001E                     _ADRESH	set	30
   412  005F                     _GIE	set	95
   413  00FA                     _GO	set	250
   414  005E                     _PEIE	set	94
   415  0030                     _RB0	set	48
   416  003A                     _RC2	set	58
   417  0065                     _RCIF	set	101
   418  0048                     _RE0	set	72
   419  0049                     _RE1	set	73
   420  004A                     _RE2	set	74
   421  0063                     _SSPIF	set	99
   422  005D                     _TMR0IE	set	93
   423  005A                     _TMR0IF	set	90
   424  009F                     _ADCON1	set	159
   425  009E                     _ADRESL	set	158
   426  0081                     _OPTION_REG	set	129
   427  0099                     _SPBRG	set	153
   428  0094                     _SSPSTAT	set	148
   429  0085                     _TRISA	set	133
   430  0086                     _TRISB	set	134
   431  0087                     _TRISC	set	135
   432  0088                     _TRISD	set	136
   433  0089                     _TRISE	set	137
   434  0098                     _TXSTA	set	152
   435  04C1                     _TRMT	set	1217
   436                           
   437                           ; #config settings
   438  0000                     
   439                           	psect	cinit
   440  0015                     start_initialization:	
   441  0015                     __initialization:	
   442                           
   443                           ; Initialize objects allocated to BANK0
   444  0015  120A  118A  23B6  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   445  001A  00CA               	movwf	__pdataBANK0& (0+127)
   446  001B  120A  118A  23B7  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   447  0020  00CB               	movwf	(__pdataBANK0+1)& (0+127)
   448                           
   449                           ; Clear objects allocated to BANK0
   450  0021  1383               	bcf	3,7	;select IRP bank0
   451  0022  3020               	movlw	low __pbssBANK0
   452  0023  0084               	movwf	4
   453  0024  3038               	movlw	low (__pbssBANK0+24)
   454  0025  120A  118A  23AE   	fcall	clear_ram0
   455                           
   456                           ; Clear objects allocated to COMMON
   457  0028  01FB               	clrf	__pbssCOMMON& (0+127)
   458  0029  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   459                           
   460                           ; Clear objects allocated to BITCOMMON
   461  002A  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   462  002B                     end_of_initialization:	
   463                           ;End of C runtime variable initialization code
   464                           
   465  002B                     __end_of__initialization:	
   466  002B  0183               	clrf	3
   467  002C  120A  118A  282F   	ljmp	_main	;jump to C main() function
   468                           
   469                           	psect	bitbssCOMMON
   470  03E8                     __pbitbssCOMMON:	
   471  03E8                     _FLAG_1000MS:	
   472  03E8                     	ds	1
   473                           
   474                           	psect	bssCOMMON
   475  007B                     __pbssCOMMON:	
   476  007B                     _currentStep:	
   477  007B                     	ds	1
   478  007C                     _negativeFlag:	
   479  007C                     	ds	1
   480                           
   481                           	psect	bssBANK0
   482  0020                     __pbssBANK0:	
   483  0020                     _Distance:	
   484  0020                     	ds	2
   485  0022                     _adcRAW:	
   486  0022                     	ds	2
   487  0024                     _degrees:	
   488  0024                     	ds	2
   489  0026                     _distTrav:	
   490  0026                     	ds	2
   491  0028                     _lowByte:	
   492  0028                     	ds	2
   493  002A                     _stepClosest:	
   494  002A                     	ds	2
   495  002C                     _stepCountNeg:	
   496  002C                     	ds	2
   497  002E                     _time_count:	
   498  002E                     	ds	2
   499  0030                     _x:	
   500  0030                     	ds	2
   501  0032                     _PB8Counter:	
   502  0032                     	ds	1
   503  0033                     _controlByte:	
   504  0033                     	ds	1
   505  0034                     _rxbyte:	
   506  0034                     	ds	1
   507  0035                     _stepCount:	
   508  0035                     	ds	1
   509  0036                     _highByte:	
   510  0036                     	ds	2
   511                           
   512                           	psect	dataBANK0
   513  004A                     __pdataBANK0:	
   514  004A                     _adcClosest:	
   515  004A                     	ds	2
   516                           
   517                           	psect	clrtext
   518  03AE                     clear_ram0:	
   519                           ;	Called with FSR containing the base address, and
   520                           ;	W with the last address+1
   521                           
   522  03AE  0064               	clrwdt	;clear the watchdog before getting into this loop
   523  03AF                     clrloop0:	
   524  03AF  0180               	clrf	0	;clear RAM location pointed to by FSR
   525  03B0  0A84               	incf	4,f	;increment pointer
   526  03B1  0604               	xorwf	4,w	;XOR with final address
   527  03B2  1903               	btfsc	3,2	;have we reached the end yet?
   528  03B3  3400               	retlw	0	;all done for this memory range, return
   529  03B4  0604               	xorwf	4,w	;XOR again to restore value
   530  03B5  2BAF               	goto	clrloop0	;do the next byte
   531                           
   532                           	psect	cstackCOMMON
   533  0070                     __pcstackCOMMON:	
   534  0070                     ?_setupSPI:	
   535  0070                     ?_ser_init:	
   536                           ; 1 bytes @ 0x0
   537                           
   538  0070                     ?_setupLCD:	
   539                           ; 1 bytes @ 0x0
   540                           
   541  0070                     ?_setupADC:	
   542                           ; 1 bytes @ 0x0
   543                           
   544  0070                     ?_spi_transfer:	
   545                           ; 1 bytes @ 0x0
   546                           
   547  0070                     ?_ser_putch:	
   548                           ; 1 bytes @ 0x0
   549                           
   550  0070                     ?_ser_getch:	
   551                           ; 1 bytes @ 0x0
   552                           
   553  0070                     ?_moveCW:	
   554                           ; 1 bytes @ 0x0
   555                           
   556  0070                     ?_ADCMain:	
   557                           ; 1 bytes @ 0x0
   558                           
   559  0070                     ?_moveCCW:	
   560                           ; 1 bytes @ 0x0
   561                           
   562  0070                     ?_isr:	
   563                           ; 1 bytes @ 0x0
   564                           
   565  0070                     ?_main:	
   566                           ; 1 bytes @ 0x0
   567                           
   568  0070                     ?_lcdWriteControl:	
   569                           ; 1 bytes @ 0x0
   570                           
   571  0070                     ?_lcdWriteData:	
   572                           ; 1 bytes @ 0x0
   573                           
   574  0070                     ?_lcdSetCursor:	
   575                           ; 1 bytes @ 0x0
   576                           
   577  0070                     ?_getADC:	
   578                           ; 1 bytes @ 0x0
   579                           
   580  0070                     ?___lwmod:	
   581                           ; 2 bytes @ 0x0
   582                           
   583  0070                     ___lwmod@divisor:	
   584                           ; 2 bytes @ 0x0
   585                           
   586                           
   587                           ; 2 bytes @ 0x0
   588  0070                     	ds	2
   589  0072                     ___lwmod@dividend:	
   590                           
   591                           ; 2 bytes @ 0x2
   592  0072                     	ds	2
   593  0074                     ??___lwmod:	
   594                           
   595                           ; 1 bytes @ 0x4
   596  0074                     	ds	1
   597  0075                     ___lwmod@counter:	
   598                           
   599                           ; 1 bytes @ 0x5
   600  0075                     	ds	1
   601  0076                     ??_isr:	
   602                           
   603                           ; 1 bytes @ 0x6
   604  0076                     	ds	5
   605                           
   606                           	psect	cstackBANK0
   607  0038                     __pcstackBANK0:	
   608  0038                     ??_setupSPI:	
   609  0038                     ??_ser_init:	
   610                           ; 1 bytes @ 0x0
   611                           
   612  0038                     ??_setupADC:	
   613                           ; 1 bytes @ 0x0
   614                           
   615  0038                     ??_spi_transfer:	
   616                           ; 1 bytes @ 0x0
   617                           
   618  0038                     ??_ser_putch:	
   619                           ; 1 bytes @ 0x0
   620                           
   621  0038                     ??_ser_getch:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0038                     ??_moveCW:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0038                     ??_moveCCW:	
   628                           ; 1 bytes @ 0x0
   629                           
   630  0038                     ??_getADC:	
   631                           ; 1 bytes @ 0x0
   632                           
   633  0038                     ??_lcdWriteControl:	
   634                           ; 1 bytes @ 0x0
   635                           
   636  0038                     ??_lcdWriteData:	
   637                           ; 1 bytes @ 0x0
   638                           
   639  0038                     ser_putch@c:	
   640                           ; 1 bytes @ 0x0
   641                           
   642                           
   643                           ; 1 bytes @ 0x0
   644  0038                     	ds	1
   645  0039                     spi_transfer@temp:	
   646  0039                     ser_getch@rxbyte:	
   647                           ; 1 bytes @ 0x1
   648                           
   649                           
   650                           ; 1 bytes @ 0x1
   651  0039                     	ds	1
   652  003A                     lcdWriteControl@databyte:	
   653  003A                     lcdWriteData@databyte:	
   654                           ; 1 bytes @ 0x2
   655                           
   656  003A                     spi_transfer@data:	
   657                           ; 1 bytes @ 0x2
   658                           
   659                           
   660                           ; 1 bytes @ 0x2
   661  003A                     	ds	1
   662  003B                     ??_setupLCD:	
   663  003B                     ?_lcdWriteToDigitBCD:	
   664                           ; 1 bytes @ 0x3
   665                           
   666  003B                     ??_lcdSetCursor:	
   667                           ; 1 bytes @ 0x3
   668                           
   669  003B                     lcdSetCursor@address:	
   670                           ; 1 bytes @ 0x3
   671                           
   672  003B                     lcdWriteToDigitBCD@data:	
   673                           ; 1 bytes @ 0x3
   674                           
   675                           
   676                           ; 2 bytes @ 0x3
   677  003B                     	ds	2
   678  003D                     ??_lcdWriteToDigitBCD:	
   679  003D                     lcdWriteToDigitBCD@TensDigit:	
   680                           ; 1 bytes @ 0x5
   681                           
   682                           
   683                           ; 2 bytes @ 0x5
   684  003D                     	ds	2
   685  003F                     lcdWriteToDigitBCD@HunsDigit:	
   686                           
   687                           ; 2 bytes @ 0x7
   688  003F                     	ds	2
   689  0041                     lcdWriteToDigitBCD@ThouDigit:	
   690                           
   691                           ; 2 bytes @ 0x9
   692  0041                     	ds	2
   693  0043                     lcdWriteToDigitBCD@TenThouDigit:	
   694                           
   695                           ; 2 bytes @ 0xB
   696  0043                     	ds	2
   697  0045                     lcdWriteToDigitBCD@OnesDigit:	
   698                           
   699                           ; 2 bytes @ 0xD
   700  0045                     	ds	2
   701  0047                     ??_ADCMain:	
   702  0047                     ??_main:	
   703                           ; 1 bytes @ 0xF
   704                           
   705                           
   706                           ; 1 bytes @ 0xF
   707  0047                     	ds	2
   708  0049                     main@controlByte:	
   709                           
   710                           ; 1 bytes @ 0x11
   711  0049                     	ds	1
   712                           
   713                           	psect	maintext
   714  002F                     __pmaintext:	
   715 ;;
   716 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   717 ;;
   718 ;; *************** function _main *****************
   719 ;; Defined at:
   720 ;;		line 41 in file "main.c"
   721 ;; Parameters:    Size  Location     Type
   722 ;;		None
   723 ;; Auto vars:     Size  Location     Type
   724 ;;  controlByte     1   17[BANK0 ] unsigned char 
   725 ;; Return value:  Size  Location     Type
   726 ;;                  1    wreg      void 
   727 ;; Registers used:
   728 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   729 ;; Tracked objects:
   730 ;;		On entry : B00/0
   731 ;;		On exit  : 0/0
   732 ;;		Unchanged: 0/0
   733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   734 ;;      Params:         0       0       0       0       0
   735 ;;      Locals:         0       1       0       0       0
   736 ;;      Temps:          0       2       0       0       0
   737 ;;      Totals:         0       3       0       0       0
   738 ;;Total ram usage:        3 bytes
   739 ;; Hardware stack levels required when called:    5
   740 ;; This function calls:
   741 ;;		_ADCMain
   742 ;;		_lcdWriteToDigitBCD
   743 ;;		_moveCCW
   744 ;;		_moveCW
   745 ;;		_ser_getch
   746 ;;		_ser_init
   747 ;;		_ser_putch
   748 ;;		_setupADC
   749 ;;		_setupLCD
   750 ;;		_setupSPI
   751 ;;		_spi_transfer
   752 ;; This function is called by:
   753 ;;		Startup code after reset
   754 ;; This function uses a non-reentrant model
   755 ;;
   756                           
   757                           
   758                           ;psect for function _main
   759  002F                     _main:	
   760                           
   761                           ;main.c: 46: setupSPI();
   762                           
   763                           ;incstack = 0
   764                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   765  002F  120A  118A  2308  120A  118A  	fcall	_setupSPI
   766                           
   767                           ;main.c: 47: ser_init();
   768  0034  120A  118A  2381  120A  118A  	fcall	_ser_init
   769                           
   770                           ;main.c: 48: setupLCD();
   771  0039  120A  118A  22DF  120A  118A  	fcall	_setupLCD
   772                           
   773                           ;main.c: 49: setupADC();
   774  003E  120A  118A  2320  120A  118A  	fcall	_setupADC
   775                           
   776                           ;main.c: 51: unsigned char controlByte = 0b00001101;
   777  0043  300D               	movlw	13
   778  0044  1283               	bcf	3,5	;RP0=0, select bank0
   779  0045  1303               	bcf	3,6	;RP1=0, select bank0
   780  0046  00C7               	movwf	??_main
   781  0047  0847               	movf	??_main,w
   782  0048  00C9               	movwf	main@controlByte
   783                           
   784                           ;main.c: 52: spi_transfer(controlByte);
   785  0049  0849               	movf	main@controlByte,w
   786  004A  120A  118A  2372  120A  118A  	fcall	_spi_transfer
   787                           
   788                           ;main.c: 54: ser_putch(128);
   789  004F  3080               	movlw	128
   790  0050  120A  118A  2390  120A  118A  	fcall	_ser_putch
   791                           
   792                           ;main.c: 55: ser_putch(132);
   793  0055  3084               	movlw	132
   794  0056  120A  118A  2390  120A  118A  	fcall	_ser_putch
   795                           
   796                           ;main.c: 57: ser_putch(136);
   797  005B  3088               	movlw	136
   798  005C  120A  118A  2390  120A  118A  	fcall	_ser_putch
   799                           
   800                           ;main.c: 58: ser_putch(4);
   801  0061  3004               	movlw	4
   802  0062  120A  118A  2390  120A  118A  	fcall	_ser_putch
   803                           
   804                           ;main.c: 60: ser_putch(142);
   805  0067  308E               	movlw	142
   806  0068  120A  118A  2390  120A  118A  	fcall	_ser_putch
   807                           
   808                           ;main.c: 61: ser_putch(19);
   809  006D  3013               	movlw	19
   810  006E  120A  118A  2390  120A  118A  	fcall	_ser_putch
   811                           
   812                           ;main.c: 63: ser_getch();
   813  0073  120A  118A  239C  120A  118A  	fcall	_ser_getch
   814                           
   815                           ;main.c: 64: highByte = rxbyte;
   816  0078  1283               	bcf	3,5	;RP0=0, select bank0
   817  0079  1303               	bcf	3,6	;RP1=0, select bank0
   818  007A  0834               	movf	_rxbyte,w
   819  007B  00C7               	movwf	??_main
   820  007C  01C8               	clrf	??_main+1
   821  007D  0847               	movf	??_main,w
   822  007E  00B6               	movwf	_highByte
   823  007F  0848               	movf	??_main+1,w
   824  0080  00B7               	movwf	_highByte+1
   825                           
   826                           ;main.c: 65: ser_getch();
   827  0081  120A  118A  239C  120A  118A  	fcall	_ser_getch
   828                           
   829                           ;main.c: 66: lowByte = rxbyte;
   830  0086  1283               	bcf	3,5	;RP0=0, select bank0
   831  0087  1303               	bcf	3,6	;RP1=0, select bank0
   832  0088  0834               	movf	_rxbyte,w
   833  0089  00C7               	movwf	??_main
   834  008A  01C8               	clrf	??_main+1
   835  008B  0847               	movf	??_main,w
   836  008C  00A8               	movwf	_lowByte
   837  008D  0848               	movf	??_main+1,w
   838  008E  00A9               	movwf	_lowByte+1
   839                           
   840                           ;main.c: 68: distTrav = (4*highByte + lowByte);
   841  008F  0837               	movf	_highByte+1,w
   842  0090  00C8               	movwf	??_main+1
   843  0091  0836               	movf	_highByte,w
   844  0092  00C7               	movwf	??_main
   845  0093  1003               	clrc
   846  0094  0DC7               	rlf	??_main,f
   847  0095  0DC8               	rlf	??_main+1,f
   848  0096  1003               	clrc
   849  0097  0DC7               	rlf	??_main,f
   850  0098  0DC8               	rlf	??_main+1,f
   851  0099  0828               	movf	_lowByte,w
   852  009A  0747               	addwf	??_main,w
   853  009B  00A6               	movwf	_distTrav
   854  009C  0829               	movf	_lowByte+1,w
   855  009D  1803               	skipnc
   856  009E  0A29               	incf	_lowByte+1,w
   857  009F  0748               	addwf	??_main+1,w
   858  00A0  00A7               	movwf	_distTrav+1
   859                           
   860                           ;main.c: 70: lcdWriteToDigitBCD(distTrav);
   861  00A1  0827               	movf	_distTrav+1,w
   862  00A2  00BC               	movwf	lcdWriteToDigitBCD@data+1
   863  00A3  0826               	movf	_distTrav,w
   864  00A4  00BB               	movwf	lcdWriteToDigitBCD@data
   865  00A5  120A  118A  2105  120A  118A  	fcall	_lcdWriteToDigitBCD
   866  00AA                     l1554:	
   867                           ;main.c: 73: while(1){
   868                           
   869                           
   870                           ;main.c: 74: if(FLAG_1000MS){
   871  00AA  1C7D               	btfss	_FLAG_1000MS/(0+8),_FLAG_1000MS& (0+7)	;volatile
   872  00AB  28B1               	goto	l79
   873                           
   874                           ;main.c: 75: RB0 = !RB0;
   875  00AC  3001               	movlw	1
   876  00AD  1283               	bcf	3,5	;RP0=0, select bank0
   877  00AE  1303               	bcf	3,6	;RP1=0, select bank0
   878  00AF  0686               	xorwf	6,f
   879                           
   880                           ;main.c: 76: FLAG_1000MS = 0;
   881  00B0  107D               	bcf	_FLAG_1000MS/(0+8),_FLAG_1000MS& (0+7)	;volatile
   882  00B1                     l79:	
   883                           
   884                           ;main.c: 77: }
   885                           ;main.c: 81: if (PB8Counter >= 10 && !RB0 == 0){
   886  00B1  300A               	movlw	10
   887  00B2  1283               	bcf	3,5	;RP0=0, select bank0
   888  00B3  1303               	bcf	3,6	;RP1=0, select bank0
   889  00B4  0232               	subwf	_PB8Counter,w
   890  00B5  1803               	btfsc	3,0
   891  00B6  1C06               	btfss	6,0	;volatile
   892  00B7  28AA               	goto	l1554
   893                           
   894                           ;main.c: 82: for (x=0; x==400; x++){
   895  00B8  01B0               	clrf	_x
   896  00B9  01B1               	clrf	_x+1
   897  00BA  3090               	movlw	144
   898  00BB  0630               	xorwf	_x,w
   899  00BC  1D03               	skipz
   900  00BD  28EA               	goto	l1578
   901  00BE  0331               	decf	_x+1,w
   902  00BF  1D03               	btfss	3,2
   903  00C0  28EA               	goto	l1578
   904  00C1                     l1568:	
   905                           
   906                           ;main.c: 83: moveCW();
   907  00C1  120A  118A  219C  120A  118A  	fcall	_moveCW
   908                           
   909                           ;main.c: 84: ADCMain();
   910  00C6  120A  118A  2336  120A  118A  	fcall	_ADCMain
   911                           
   912                           ;main.c: 85: if (adcRAW < adcClosest){
   913  00CB  1283               	bcf	3,5	;RP0=0, select bank0
   914  00CC  1303               	bcf	3,6	;RP1=0, select bank0
   915  00CD  084B               	movf	_adcClosest+1,w
   916  00CE  0223               	subwf	_adcRAW+1,w	;volatile
   917  00CF  1D03               	skipz
   918  00D0  28D3               	goto	u555
   919  00D1  084A               	movf	_adcClosest,w
   920  00D2  0222               	subwf	_adcRAW,w	;volatile
   921  00D3                     u555:	
   922  00D3  1803               	skipnc
   923  00D4  28DE               	goto	l1576
   924                           
   925                           ;main.c: 86: adcClosest = adcRAW;
   926  00D5  0823               	movf	_adcRAW+1,w	;volatile
   927  00D6  00CB               	movwf	_adcClosest+1
   928  00D7  0822               	movf	_adcRAW,w	;volatile
   929  00D8  00CA               	movwf	_adcClosest
   930                           
   931                           ;main.c: 87: stepClosest = stepCount;
   932  00D9  0835               	movf	_stepCount,w
   933  00DA  00AA               	movwf	_stepClosest
   934  00DB  01AB               	clrf	_stepClosest+1
   935  00DC  1BAA               	btfsc	_stepClosest,7
   936  00DD  03AB               	decf	_stepClosest+1,f
   937  00DE                     l1576:	
   938  00DE  3001               	movlw	1
   939  00DF  07B0               	addwf	_x,f
   940  00E0  1803               	skipnc
   941  00E1  0AB1               	incf	_x+1,f
   942  00E2  3000               	movlw	0
   943  00E3  07B1               	addwf	_x+1,f
   944  00E4  3090               	movlw	144
   945  00E5  0630               	xorwf	_x,w
   946  00E6  1903               	btfsc	3,2
   947  00E7  0331               	decf	_x+1,w
   948  00E8  1903               	btfsc	3,2
   949  00E9  28C1               	goto	l1568
   950  00EA                     l1578:	
   951                           
   952                           ;main.c: 88: }
   953                           ;main.c: 90: }
   954                           ;main.c: 92: for (x=stepCount; x=stepClosest; x++){
   955  00EA  0835               	movf	_stepCount,w
   956  00EB  00B0               	movwf	_x
   957  00EC  01B1               	clrf	_x+1
   958  00ED  1BB0               	btfsc	_x,7
   959  00EE  03B1               	decf	_x+1,f
   960  00EF                     l1584:	
   961  00EF  082B               	movf	_stepClosest+1,w
   962  00F0  00B1               	movwf	_x+1
   963  00F1  082A               	movf	_stepClosest,w
   964  00F2  00B0               	movwf	_x
   965  00F3  0830               	movf	_x,w
   966  00F4  0431               	iorwf	_x+1,w
   967  00F5  1903               	btfsc	3,2
   968  00F6  28AA               	goto	l1554
   969                           
   970                           ;main.c: 93: moveCCW();
   971  00F7  120A  118A  21E7  120A  118A  	fcall	_moveCCW
   972  00FC  3001               	movlw	1
   973  00FD  1283               	bcf	3,5	;RP0=0, select bank0
   974  00FE  1303               	bcf	3,6	;RP1=0, select bank0
   975  00FF  07B0               	addwf	_x,f
   976  0100  1803               	skipnc
   977  0101  0AB1               	incf	_x+1,f
   978  0102  3000               	movlw	0
   979  0103  07B1               	addwf	_x+1,f
   980  0104  28EF               	goto	l1584
   981  0105                     __end_of_main:	
   982                           
   983                           	psect	text1
   984  0372                     __ptext1:	
   985 ;; *************** function _spi_transfer *****************
   986 ;; Defined at:
   987 ;;		line 23 in file "SPI.c"
   988 ;; Parameters:    Size  Location     Type
   989 ;;  data            1    wreg     unsigned char 
   990 ;; Auto vars:     Size  Location     Type
   991 ;;  data            1    2[BANK0 ] unsigned char 
   992 ;;  temp            1    1[BANK0 ] unsigned char 
   993 ;; Return value:  Size  Location     Type
   994 ;;                  1    wreg      unsigned char 
   995 ;; Registers used:
   996 ;;		wreg, status,2
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1002 ;;      Params:         0       0       0       0       0
  1003 ;;      Locals:         0       2       0       0       0
  1004 ;;      Temps:          0       1       0       0       0
  1005 ;;      Totals:         0       3       0       0       0
  1006 ;;Total ram usage:        3 bytes
  1007 ;; Hardware stack levels used:    1
  1008 ;; Hardware stack levels required when called:    2
  1009 ;; This function calls:
  1010 ;;		Nothing
  1011 ;; This function is called by:
  1012 ;;		_main
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016                           
  1017                           ;psect for function _spi_transfer
  1018  0372                     _spi_transfer:	
  1019                           
  1020                           ;incstack = 0
  1021                           ; Regs used in _spi_transfer: [wreg+status,2]
  1022                           ;spi_transfer@data stored from wreg
  1023  0372  1283               	bcf	3,5	;RP0=0, select bank0
  1024  0373  1303               	bcf	3,6	;RP1=0, select bank0
  1025  0374  00BA               	movwf	spi_transfer@data
  1026                           
  1027                           ;SPI.c: 24: unsigned char temp = 0;
  1028  0375  01B9               	clrf	spi_transfer@temp
  1029                           
  1030                           ;SPI.c: 26: SSPIF = 0;
  1031  0376  118C               	bcf	12,3	;volatile
  1032                           
  1033                           ;SPI.c: 27: SSPBUF = data;
  1034  0377  083A               	movf	spi_transfer@data,w
  1035  0378  0093               	movwf	19	;volatile
  1036  0379                     l224:	
  1037                           ;SPI.c: 29: while (SSPIF == 0);
  1038                           
  1039  0379  1D8C               	btfss	12,3	;volatile
  1040  037A  2B79               	goto	l224
  1041                           
  1042                           ;SPI.c: 30: temp = SSPBUF;
  1043  037B  0813               	movf	19,w	;volatile
  1044  037C  00B8               	movwf	??_spi_transfer
  1045  037D  0838               	movf	??_spi_transfer,w
  1046  037E  00B9               	movwf	spi_transfer@temp
  1047                           
  1048                           ;SPI.c: 31: SSPIF = 0;
  1049  037F  118C               	bcf	12,3	;volatile
  1050  0380  0008               	return
  1051  0381                     __end_of_spi_transfer:	
  1052                           ;SPI.c: 33: return temp;
  1053                           ;	Return value of _spi_transfer is never used
  1054                           
  1055                           
  1056                           	psect	text2
  1057  0308                     __ptext2:	
  1058 ;; *************** function _setupSPI *****************
  1059 ;; Defined at:
  1060 ;;		line 4 in file "SPI.c"
  1061 ;; Parameters:    Size  Location     Type
  1062 ;;		None
  1063 ;; Auto vars:     Size  Location     Type
  1064 ;;		None
  1065 ;; Return value:  Size  Location     Type
  1066 ;;                  1    wreg      void 
  1067 ;; Registers used:
  1068 ;;		wreg, status,2
  1069 ;; Tracked objects:
  1070 ;;		On entry : 0/0
  1071 ;;		On exit  : 0/0
  1072 ;;		Unchanged: 0/0
  1073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1074 ;;      Params:         0       0       0       0       0
  1075 ;;      Locals:         0       0       0       0       0
  1076 ;;      Temps:          0       0       0       0       0
  1077 ;;      Totals:         0       0       0       0       0
  1078 ;;Total ram usage:        0 bytes
  1079 ;; Hardware stack levels used:    1
  1080 ;; Hardware stack levels required when called:    2
  1081 ;; This function calls:
  1082 ;;		Nothing
  1083 ;; This function is called by:
  1084 ;;		_main
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           
  1089                           ;psect for function _setupSPI
  1090  0308                     _setupSPI:	
  1091                           
  1092                           ;SPI.c: 6: TRISB = 0b00000000;
  1093                           
  1094                           ;incstack = 0
  1095                           ; Regs used in _setupSPI: [wreg+status,2]
  1096  0308  1683               	bsf	3,5	;RP0=1, select bank1
  1097  0309  1303               	bcf	3,6	;RP1=0, select bank1
  1098  030A  0186               	clrf	6	;volatile
  1099                           
  1100                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  1101  030B  3040               	movlw	64
  1102  030C  0094               	movwf	20	;volatile
  1103                           
  1104                           ;SPI.c: 9: SSPCON = 0b00100000;
  1105  030D  3020               	movlw	32
  1106  030E  1283               	bcf	3,5	;RP0=0, select bank0
  1107  030F  1303               	bcf	3,6	;RP1=0, select bank0
  1108  0310  0094               	movwf	20	;volatile
  1109                           
  1110                           ;SPI.c: 10: TRISC = 0b11010000;
  1111  0311  30D0               	movlw	208
  1112  0312  1683               	bsf	3,5	;RP0=1, select bank1
  1113  0313  1303               	bcf	3,6	;RP1=0, select bank1
  1114  0314  0087               	movwf	7	;volatile
  1115                           
  1116                           ;SPI.c: 11: PORTC = 0b00000011;
  1117  0315  3003               	movlw	3
  1118  0316  1283               	bcf	3,5	;RP0=0, select bank0
  1119  0317  1303               	bcf	3,6	;RP1=0, select bank0
  1120  0318  0087               	movwf	7	;volatile
  1121                           
  1122                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  1123  0319  3004               	movlw	4
  1124  031A  1683               	bsf	3,5	;RP0=1, select bank1
  1125  031B  1303               	bcf	3,6	;RP1=0, select bank1
  1126  031C  0081               	movwf	1	;volatile
  1127                           
  1128                           ;SPI.c: 16: TMR0IE = 1;
  1129  031D  168B               	bsf	11,5	;volatile
  1130                           
  1131                           ;SPI.c: 19: (GIE = 1);
  1132  031E  178B               	bsf	11,7	;volatile
  1133  031F  0008               	return
  1134  0320                     __end_of_setupSPI:	
  1135                           
  1136                           	psect	text3
  1137  02DF                     __ptext3:	
  1138 ;; *************** function _setupLCD *****************
  1139 ;; Defined at:
  1140 ;;		line 86 in file "LCD.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;		None
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;		None
  1145 ;; Return value:  Size  Location     Type
  1146 ;;                  1    wreg      void 
  1147 ;; Registers used:
  1148 ;;		wreg, status,2, status,0, pclath, cstack
  1149 ;; Tracked objects:
  1150 ;;		On entry : 0/0
  1151 ;;		On exit  : 0/0
  1152 ;;		Unchanged: 0/0
  1153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1154 ;;      Params:         0       0       0       0       0
  1155 ;;      Locals:         0       0       0       0       0
  1156 ;;      Temps:          0       0       0       0       0
  1157 ;;      Totals:         0       0       0       0       0
  1158 ;;Total ram usage:        0 bytes
  1159 ;; Hardware stack levels used:    1
  1160 ;; Hardware stack levels required when called:    3
  1161 ;; This function calls:
  1162 ;;		_lcdWriteControl
  1163 ;; This function is called by:
  1164 ;;		_main
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           
  1169                           ;psect for function _setupLCD
  1170  02DF                     _setupLCD:	
  1171                           
  1172                           ;LCD.c: 88: ADCON1 = 0b00000010;
  1173                           
  1174                           ;incstack = 0
  1175                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  1176  02DF  3002               	movlw	2
  1177  02E0  1683               	bsf	3,5	;RP0=1, select bank1
  1178  02E1  1303               	bcf	3,6	;RP1=0, select bank1
  1179  02E2  009F               	movwf	31	;volatile
  1180                           
  1181                           ;LCD.c: 90: PORTD = 0;
  1182  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  1183  02E4  1303               	bcf	3,6	;RP1=0, select bank0
  1184  02E5  0188               	clrf	8	;volatile
  1185                           
  1186                           ;LCD.c: 91: PORTE = 0;
  1187  02E6  0189               	clrf	9	;volatile
  1188                           
  1189                           ;LCD.c: 93: TRISD = 0b00000000;
  1190  02E7  1683               	bsf	3,5	;RP0=1, select bank1
  1191  02E8  1303               	bcf	3,6	;RP1=0, select bank1
  1192  02E9  0188               	clrf	8	;volatile
  1193                           
  1194                           ;LCD.c: 94: TRISE = 0b00000000;
  1195  02EA  0189               	clrf	9	;volatile
  1196                           
  1197                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  1198  02EB  3001               	movlw	1
  1199  02EC  120A  118A  234B  120A  118A  	fcall	_lcdWriteControl
  1200                           
  1201                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  1202  02F1  3038               	movlw	56
  1203  02F2  120A  118A  234B  120A  118A  	fcall	_lcdWriteControl
  1204                           
  1205                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  1206  02F7  300C               	movlw	12
  1207  02F8  120A  118A  234B  120A  118A  	fcall	_lcdWriteControl
  1208                           
  1209                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  1210  02FD  3006               	movlw	6
  1211  02FE  120A  118A  234B  120A  118A  	fcall	_lcdWriteControl
  1212                           
  1213                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  1214  0303  3002               	movlw	2
  1215  0304  120A  118A  234B   	fcall	_lcdWriteControl
  1216  0307  0008               	return
  1217  0308                     __end_of_setupLCD:	
  1218                           
  1219                           	psect	text4
  1220  0320                     __ptext4:	
  1221 ;; *************** function _setupADC *****************
  1222 ;; Defined at:
  1223 ;;		line 8 in file "ADC.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;		None
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;		None
  1228 ;; Return value:  Size  Location     Type
  1229 ;;                  1    wreg      void 
  1230 ;; Registers used:
  1231 ;;		wreg, status,2
  1232 ;; Tracked objects:
  1233 ;;		On entry : 0/0
  1234 ;;		On exit  : 0/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1237 ;;      Params:         0       0       0       0       0
  1238 ;;      Locals:         0       0       0       0       0
  1239 ;;      Temps:          0       1       0       0       0
  1240 ;;      Totals:         0       1       0       0       0
  1241 ;;Total ram usage:        1 bytes
  1242 ;; Hardware stack levels used:    1
  1243 ;; Hardware stack levels required when called:    2
  1244 ;; This function calls:
  1245 ;;		Nothing
  1246 ;; This function is called by:
  1247 ;;		_main
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251                           
  1252                           ;psect for function _setupADC
  1253  0320                     _setupADC:	
  1254                           
  1255                           ;ADC.c: 9: PORTA = 0;
  1256                           
  1257                           ;incstack = 0
  1258                           ; Regs used in _setupADC: [wreg+status,2]
  1259  0320  1283               	bcf	3,5	;RP0=0, select bank0
  1260  0321  1303               	bcf	3,6	;RP1=0, select bank0
  1261  0322  0185               	clrf	5	;volatile
  1262                           
  1263                           ;ADC.c: 10: TRISA = 0b11111111;
  1264  0323  30FF               	movlw	255
  1265  0324  1683               	bsf	3,5	;RP0=1, select bank1
  1266  0325  1303               	bcf	3,6	;RP1=0, select bank1
  1267  0326  0085               	movwf	5	;volatile
  1268                           
  1269                           ;ADC.c: 13: ADCON0 = 0b10001001;
  1270  0327  3089               	movlw	137
  1271  0328  1283               	bcf	3,5	;RP0=0, select bank0
  1272  0329  1303               	bcf	3,6	;RP1=0, select bank0
  1273  032A  009F               	movwf	31	;volatile
  1274                           
  1275                           ;ADC.c: 14: ADCON1 = 0b00000010;
  1276  032B  3002               	movlw	2
  1277  032C  1683               	bsf	3,5	;RP0=1, select bank1
  1278  032D  1303               	bcf	3,6	;RP1=0, select bank1
  1279  032E  009F               	movwf	31	;volatile
  1280                           
  1281                           ;ADC.c: 16: _delay((unsigned long)((50)*(20000000/4000000.0)));
  1282  032F  3053               	movlw	83
  1283  0330  1283               	bcf	3,5	;RP0=0, select bank0
  1284  0331  1303               	bcf	3,6	;RP1=0, select bank0
  1285  0332  00B8               	movwf	??_setupADC
  1286  0333                     u597:	
  1287  0333  0BB8               	decfsz	??_setupADC,f
  1288  0334  2B33               	goto	u597
  1289  0335  0008               	return
  1290  0336                     __end_of_setupADC:	
  1291                           
  1292                           	psect	text5
  1293  0390                     __ptext5:	
  1294 ;; *************** function _ser_putch *****************
  1295 ;; Defined at:
  1296 ;;		line 28 in file "ser.c"
  1297 ;; Parameters:    Size  Location     Type
  1298 ;;  c               1    wreg     unsigned char 
  1299 ;; Auto vars:     Size  Location     Type
  1300 ;;  c               1    0[BANK0 ] unsigned char 
  1301 ;; Return value:  Size  Location     Type
  1302 ;;                  1    wreg      void 
  1303 ;; Registers used:
  1304 ;;		wreg
  1305 ;; Tracked objects:
  1306 ;;		On entry : 0/0
  1307 ;;		On exit  : 0/0
  1308 ;;		Unchanged: 0/0
  1309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1310 ;;      Params:         0       0       0       0       0
  1311 ;;      Locals:         0       1       0       0       0
  1312 ;;      Temps:          0       0       0       0       0
  1313 ;;      Totals:         0       1       0       0       0
  1314 ;;Total ram usage:        1 bytes
  1315 ;; Hardware stack levels used:    1
  1316 ;; Hardware stack levels required when called:    2
  1317 ;; This function calls:
  1318 ;;		Nothing
  1319 ;; This function is called by:
  1320 ;;		_main
  1321 ;; This function uses a non-reentrant model
  1322 ;;
  1323                           
  1324                           
  1325                           ;psect for function _ser_putch
  1326  0390                     _ser_putch:	
  1327                           
  1328                           ;incstack = 0
  1329                           ; Regs used in _ser_putch: [wreg]
  1330                           ;ser_putch@c stored from wreg
  1331  0390  1283               	bcf	3,5	;RP0=0, select bank0
  1332  0391  1303               	bcf	3,6	;RP1=0, select bank0
  1333  0392  00B8               	movwf	ser_putch@c
  1334  0393                     l279:	
  1335                           ;ser.c: 29: while(!TRMT);
  1336                           
  1337  0393  1683               	bsf	3,5	;RP0=1, select bank1
  1338  0394  1303               	bcf	3,6	;RP1=0, select bank1
  1339  0395  1C98               	btfss	24,1	;volatile
  1340  0396  2B93               	goto	l279
  1341                           
  1342                           ;ser.c: 30: TXREG=c;
  1343  0397  1283               	bcf	3,5	;RP0=0, select bank0
  1344  0398  1303               	bcf	3,6	;RP1=0, select bank0
  1345  0399  0838               	movf	ser_putch@c,w
  1346  039A  0099               	movwf	25	;volatile
  1347  039B  0008               	return
  1348  039C                     __end_of_ser_putch:	
  1349                           
  1350                           	psect	text6
  1351  0381                     __ptext6:	
  1352 ;; *************** function _ser_init *****************
  1353 ;; Defined at:
  1354 ;;		line 4 in file "ser.c"
  1355 ;; Parameters:    Size  Location     Type
  1356 ;;		None
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;		None
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  1    wreg      void 
  1361 ;; Registers used:
  1362 ;;		wreg
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1368 ;;      Params:         0       0       0       0       0
  1369 ;;      Locals:         0       0       0       0       0
  1370 ;;      Temps:          0       0       0       0       0
  1371 ;;      Totals:         0       0       0       0       0
  1372 ;;Total ram usage:        0 bytes
  1373 ;; Hardware stack levels used:    1
  1374 ;; Hardware stack levels required when called:    2
  1375 ;; This function calls:
  1376 ;;		Nothing
  1377 ;; This function is called by:
  1378 ;;		_main
  1379 ;; This function uses a non-reentrant model
  1380 ;;
  1381                           
  1382                           
  1383                           ;psect for function _ser_init
  1384  0381                     _ser_init:	
  1385                           
  1386                           ;ser.c: 6: TXSTA = 0b00100100;
  1387                           
  1388                           ;incstack = 0
  1389                           ; Regs used in _ser_init: [wreg]
  1390  0381  3024               	movlw	36
  1391  0382  1683               	bsf	3,5	;RP0=1, select bank1
  1392  0383  1303               	bcf	3,6	;RP1=0, select bank1
  1393  0384  0098               	movwf	24	;volatile
  1394                           
  1395                           ;ser.c: 7: RCSTA = 0b10011000;
  1396  0385  3098               	movlw	152
  1397  0386  1283               	bcf	3,5	;RP0=0, select bank0
  1398  0387  1303               	bcf	3,6	;RP1=0, select bank0
  1399  0388  0098               	movwf	24	;volatile
  1400                           
  1401                           ;ser.c: 22: SPBRG = 20;
  1402  0389  3014               	movlw	20
  1403  038A  1683               	bsf	3,5	;RP0=1, select bank1
  1404  038B  1303               	bcf	3,6	;RP1=0, select bank1
  1405  038C  0099               	movwf	25	;volatile
  1406                           
  1407                           ;ser.c: 24: PEIE = 1;
  1408  038D  170B               	bsf	11,6	;volatile
  1409                           
  1410                           ;ser.c: 25: (GIE = 1);
  1411  038E  178B               	bsf	11,7	;volatile
  1412  038F  0008               	return
  1413  0390                     __end_of_ser_init:	
  1414                           
  1415                           	psect	text7
  1416  039C                     __ptext7:	
  1417 ;; *************** function _ser_getch *****************
  1418 ;; Defined at:
  1419 ;;		line 33 in file "ser.c"
  1420 ;; Parameters:    Size  Location     Type
  1421 ;;		None
  1422 ;; Auto vars:     Size  Location     Type
  1423 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  1424 ;; Return value:  Size  Location     Type
  1425 ;;                  1    wreg      unsigned char 
  1426 ;; Registers used:
  1427 ;;		wreg
  1428 ;; Tracked objects:
  1429 ;;		On entry : 0/0
  1430 ;;		On exit  : 0/0
  1431 ;;		Unchanged: 0/0
  1432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1433 ;;      Params:         0       0       0       0       0
  1434 ;;      Locals:         0       1       0       0       0
  1435 ;;      Temps:          0       1       0       0       0
  1436 ;;      Totals:         0       2       0       0       0
  1437 ;;Total ram usage:        2 bytes
  1438 ;; Hardware stack levels used:    1
  1439 ;; Hardware stack levels required when called:    2
  1440 ;; This function calls:
  1441 ;;		Nothing
  1442 ;; This function is called by:
  1443 ;;		_main
  1444 ;; This function uses a non-reentrant model
  1445 ;;
  1446                           
  1447                           
  1448                           ;psect for function _ser_getch
  1449  039C                     _ser_getch:	
  1450  039C                     l285:	
  1451                           ;ser.c: 34: while(!RCIF);
  1452                           
  1453                           ;incstack = 0
  1454                           ; Regs used in _ser_getch: [wreg]
  1455                           
  1456  039C  1283               	bcf	3,5	;RP0=0, select bank0
  1457  039D  1303               	bcf	3,6	;RP1=0, select bank0
  1458  039E  1E8C               	btfss	12,5	;volatile
  1459  039F  2B9C               	goto	l285
  1460                           
  1461                           ;ser.c: 35: unsigned char rxbyte = RCREG;
  1462  03A0  081A               	movf	26,w	;volatile
  1463  03A1  00B8               	movwf	??_ser_getch
  1464  03A2  0838               	movf	??_ser_getch,w
  1465  03A3  00B9               	movwf	ser_getch@rxbyte
  1466  03A4  0008               	return
  1467  03A5                     __end_of_ser_getch:	
  1468                           ;ser.c: 36: return rxbyte;
  1469                           ;	Return value of _ser_getch is never used
  1470                           
  1471                           
  1472                           	psect	text8
  1473  019C                     __ptext8:	
  1474 ;; *************** function _moveCW *****************
  1475 ;; Defined at:
  1476 ;;		line 5 in file "motor.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;		None
  1479 ;; Auto vars:     Size  Location     Type
  1480 ;;		None
  1481 ;; Return value:  Size  Location     Type
  1482 ;;                  1    wreg      void 
  1483 ;; Registers used:
  1484 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1485 ;; Tracked objects:
  1486 ;;		On entry : 0/0
  1487 ;;		On exit  : 0/0
  1488 ;;		Unchanged: 0/0
  1489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1490 ;;      Params:         0       0       0       0       0
  1491 ;;      Locals:         0       0       0       0       0
  1492 ;;      Temps:          0       2       0       0       0
  1493 ;;      Totals:         0       2       0       0       0
  1494 ;;Total ram usage:        2 bytes
  1495 ;; Hardware stack levels used:    1
  1496 ;; Hardware stack levels required when called:    2
  1497 ;; This function calls:
  1498 ;;		Nothing
  1499 ;; This function is called by:
  1500 ;;		_main
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503                           
  1504                           
  1505                           ;psect for function _moveCW
  1506  019C                     _moveCW:	
  1507                           
  1508                           ;motor.c: 7: if (stepCount == 0) negativeFlag = 1;
  1509                           
  1510                           ;incstack = 0
  1511                           ; Regs used in _moveCW: [wreg-fsr0h+status,2+status,0]
  1512  019C  1283               	bcf	3,5	;RP0=0, select bank0
  1513  019D  1303               	bcf	3,6	;RP1=0, select bank0
  1514  019E  0835               	movf	_stepCount,w
  1515  019F  1D03               	btfss	3,2
  1516  01A0  29A3               	goto	l1390
  1517  01A1  01FC               	clrf	_negativeFlag
  1518  01A2  0AFC               	incf	_negativeFlag,f
  1519  01A3                     l1390:	
  1520                           
  1521                           ;motor.c: 9: stepCount--;
  1522  01A3  30FF               	movlw	255
  1523  01A4  00B8               	movwf	??_moveCW
  1524  01A5  0838               	movf	??_moveCW,w
  1525  01A6  07B5               	addwf	_stepCount,f
  1526                           
  1527                           ;motor.c: 12: switch(currentStep){
  1528  01A7  29C3               	goto	l1426
  1529  01A8                     l1392:	
  1530                           ;motor.c: 14: case 7: PORTC = 0b00011011;
  1531                           
  1532  01A8  301B               	movlw	27
  1533  01A9  29B5               	goto	L1
  1534  01AA                     l1396:	
  1535                           ;motor.c: 18: case 6: PORTC = 0b00010111;
  1536                           
  1537                           ;motor.c: 16: break;
  1538                           
  1539                           ;motor.c: 15: currentStep--;
  1540                           
  1541  01AA  3017               	movlw	23
  1542  01AB  29B5               	goto	L1
  1543  01AC                     l1400:	
  1544                           ;motor.c: 22: case 5: PORTC = 0b00110101;
  1545                           
  1546                           ;motor.c: 20: break;
  1547                           
  1548                           ;motor.c: 19: currentStep--;
  1549                           
  1550  01AC  3035               	movlw	53
  1551  01AD  29B5               	goto	L1
  1552  01AE                     l1404:	
  1553                           ;motor.c: 26: case 4: PORTC = 0b00100111;
  1554                           
  1555                           ;motor.c: 24: break;
  1556                           
  1557                           ;motor.c: 23: currentStep--;
  1558                           
  1559  01AE  3027               	movlw	39
  1560  01AF  29B5               	goto	L1
  1561  01B0                     l1408:	
  1562                           ;motor.c: 30: case 3: PORTC = 0b00101011;
  1563                           
  1564                           ;motor.c: 28: break;
  1565                           
  1566                           ;motor.c: 27: currentStep--;
  1567                           
  1568  01B0  302B               	movlw	43
  1569  01B1  29B5               	goto	L1
  1570  01B2                     l1412:	
  1571                           ;motor.c: 34: case 2: PORTC = 0b00101110;
  1572                           
  1573                           ;motor.c: 32: break;
  1574                           
  1575                           ;motor.c: 31: currentStep--;
  1576                           
  1577  01B2  302E               	movlw	46
  1578  01B3  29B5               	goto	L1
  1579  01B4                     l1416:	
  1580                           ;motor.c: 38: case 1: PORTC = 0b00111100;
  1581                           
  1582                           ;motor.c: 36: break;
  1583                           
  1584                           ;motor.c: 35: currentStep--;
  1585                           
  1586  01B4  303C               	movlw	60
  1587  01B5                     L1:	
  1588  01B5  0087               	movwf	7	;volatile
  1589                           
  1590                           ;motor.c: 39: currentStep--;
  1591  01B6  3001               	movlw	1
  1592  01B7  02FB               	subwf	_currentStep,f
  1593                           
  1594                           ;motor.c: 40: break;
  1595  01B8  29DD               	goto	l1428
  1596  01B9                     l1420:	
  1597                           ;motor.c: 42: case 0: PORTC = 0b00011110;
  1598                           
  1599  01B9  301E               	movlw	30
  1600  01BA  0087               	movwf	7	;volatile
  1601                           
  1602                           ;motor.c: 43: currentStep = 7;
  1603  01BB  3007               	movlw	7
  1604  01BC  00B8               	movwf	??_moveCW
  1605  01BD  0838               	movf	??_moveCW,w
  1606  01BE  00FB               	movwf	_currentStep
  1607                           
  1608                           ;motor.c: 44: break;
  1609  01BF  29DD               	goto	l1428
  1610  01C0                     l1422:	
  1611                           ;motor.c: 46: default: PORTC = 0b00111001;
  1612                           
  1613  01C0  3039               	movlw	57
  1614  01C1  0087               	movwf	7	;volatile
  1615                           
  1616                           ;motor.c: 48: }
  1617                           
  1618                           ;motor.c: 47: break;
  1619  01C2  29DD               	goto	l1428
  1620  01C3                     l1426:	
  1621  01C3  087B               	movf	_currentStep,w
  1622                           
  1623                           ; Switch size 1, requested type "space"
  1624                           ; Number of cases is 8, Range of values is 0 to 7
  1625                           ; switch strategies available:
  1626                           ; Name         Instructions Cycles
  1627                           ; simple_byte           25    13 (average)
  1628                           ; direct_byte           32     8 (fixed)
  1629                           ; jumptable            260     6 (fixed)
  1630                           ;	Chosen strategy is simple_byte
  1631  01C4  3A00               	xorlw	0	; case 0
  1632  01C5  1903               	skipnz
  1633  01C6  29B9               	goto	l1420
  1634  01C7  3A01               	xorlw	1	; case 1
  1635  01C8  1903               	skipnz
  1636  01C9  29B4               	goto	l1416
  1637  01CA  3A03               	xorlw	3	; case 2
  1638  01CB  1903               	skipnz
  1639  01CC  29B2               	goto	l1412
  1640  01CD  3A01               	xorlw	1	; case 3
  1641  01CE  1903               	skipnz
  1642  01CF  29B0               	goto	l1408
  1643  01D0  3A07               	xorlw	7	; case 4
  1644  01D1  1903               	skipnz
  1645  01D2  29AE               	goto	l1404
  1646  01D3  3A01               	xorlw	1	; case 5
  1647  01D4  1903               	skipnz
  1648  01D5  29AC               	goto	l1400
  1649  01D6  3A03               	xorlw	3	; case 6
  1650  01D7  1903               	skipnz
  1651  01D8  29AA               	goto	l1396
  1652  01D9  3A01               	xorlw	1	; case 7
  1653  01DA  1903               	skipnz
  1654  01DB  29A8               	goto	l1392
  1655  01DC  29C0               	goto	l1422
  1656  01DD                     l1428:	
  1657                           
  1658                           ;motor.c: 50: _delay((unsigned long)((3)*(20000000/4000.0)));
  1659  01DD  3014               	movlw	20
  1660  01DE  00B9               	movwf	??_moveCW+1
  1661  01DF  3079               	movlw	121
  1662  01E0  00B8               	movwf	??_moveCW
  1663  01E1                     u607:	
  1664  01E1  0BB8               	decfsz	??_moveCW,f
  1665  01E2  29E1               	goto	u607
  1666  01E3  0BB9               	decfsz	??_moveCW+1,f
  1667  01E4  29E1               	goto	u607
  1668  01E5  29E6               	nop2
  1669  01E6  0008               	return
  1670  01E7                     __end_of_moveCW:	
  1671                           
  1672                           	psect	text9
  1673  01E7                     __ptext9:	
  1674 ;; *************** function _moveCCW *****************
  1675 ;; Defined at:
  1676 ;;		line 54 in file "motor.c"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;		None
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;		None
  1681 ;; Return value:  Size  Location     Type
  1682 ;;                  1    wreg      void 
  1683 ;; Registers used:
  1684 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1685 ;; Tracked objects:
  1686 ;;		On entry : 0/0
  1687 ;;		On exit  : 0/0
  1688 ;;		Unchanged: 0/0
  1689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1690 ;;      Params:         0       0       0       0       0
  1691 ;;      Locals:         0       0       0       0       0
  1692 ;;      Temps:          0       2       0       0       0
  1693 ;;      Totals:         0       2       0       0       0
  1694 ;;Total ram usage:        2 bytes
  1695 ;; Hardware stack levels used:    1
  1696 ;; Hardware stack levels required when called:    2
  1697 ;; This function calls:
  1698 ;;		Nothing
  1699 ;; This function is called by:
  1700 ;;		_main
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           
  1705                           ;psect for function _moveCCW
  1706  01E7                     _moveCCW:	
  1707                           
  1708                           ;motor.c: 56: if (stepCount == (-1)) negativeFlag = 0;
  1709                           
  1710                           ;incstack = 0
  1711                           ; Regs used in _moveCCW: [wreg-fsr0h+status,2+status,0]
  1712  01E7  1283               	bcf	3,5	;RP0=0, select bank0
  1713  01E8  1303               	bcf	3,6	;RP1=0, select bank0
  1714  01E9  0A35               	incf	_stepCount,w
  1715  01EA  1903               	btfsc	3,2
  1716  01EB  01FC               	clrf	_negativeFlag
  1717                           
  1718                           ;motor.c: 58: stepCount++;
  1719  01EC  3001               	movlw	1
  1720  01ED  00B8               	movwf	??_moveCCW
  1721  01EE  0838               	movf	??_moveCCW,w
  1722  01EF  07B5               	addwf	_stepCount,f
  1723                           
  1724                           ;motor.c: 61: switch(currentStep){
  1725  01F0  2A0B               	goto	l1478
  1726  01F1                     l1442:	
  1727                           ;motor.c: 62: case 0: PORTC = 0b00101110;
  1728                           
  1729  01F1  302E               	movlw	46
  1730  01F2  29FE               	goto	L2
  1731  01F3                     l1446:	
  1732                           ;motor.c: 66: case 1: PORTC = 0b00101011;
  1733                           
  1734                           ;motor.c: 64: break;
  1735                           
  1736                           ;motor.c: 63: currentStep++;
  1737                           
  1738  01F3  302B               	movlw	43
  1739  01F4  29FE               	goto	L2
  1740  01F5                     l1450:	
  1741                           ;motor.c: 70: case 2: PORTC = 0b00100111;
  1742                           
  1743                           ;motor.c: 68: break;
  1744                           
  1745                           ;motor.c: 67: currentStep++;
  1746                           
  1747  01F5  3027               	movlw	39
  1748  01F6  29FE               	goto	L2
  1749  01F7                     l1454:	
  1750                           ;motor.c: 74: case 3: PORTC = 0b00110101;
  1751                           
  1752                           ;motor.c: 72: break;
  1753                           
  1754                           ;motor.c: 71: currentStep++;
  1755                           
  1756  01F7  3035               	movlw	53
  1757  01F8  29FE               	goto	L2
  1758  01F9                     l1458:	
  1759                           ;motor.c: 78: case 4: PORTC = 0b00010111;
  1760                           
  1761                           ;motor.c: 76: break;
  1762                           
  1763                           ;motor.c: 75: currentStep++;
  1764                           
  1765  01F9  3017               	movlw	23
  1766  01FA  29FE               	goto	L2
  1767  01FB                     l1462:	
  1768                           ;motor.c: 82: case 5: PORTC = 0b00011011;
  1769                           
  1770                           ;motor.c: 80: break;
  1771                           
  1772                           ;motor.c: 79: currentStep++;
  1773                           
  1774  01FB  301B               	movlw	27
  1775  01FC  29FE               	goto	L2
  1776  01FD                     l1466:	
  1777                           ;motor.c: 86: case 6: PORTC = 0b00011110;
  1778                           
  1779                           ;motor.c: 84: break;
  1780                           
  1781                           ;motor.c: 83: currentStep++;
  1782                           
  1783  01FD  301E               	movlw	30
  1784  01FE                     L2:	
  1785  01FE  0087               	movwf	7	;volatile
  1786                           
  1787                           ;motor.c: 87: currentStep++;
  1788  01FF  3001               	movlw	1
  1789  0200  00B8               	movwf	??_moveCCW
  1790  0201  0838               	movf	??_moveCCW,w
  1791  0202  07FB               	addwf	_currentStep,f
  1792                           
  1793                           ;motor.c: 88: break;
  1794  0203  2A25               	goto	l1480
  1795  0204                     l1470:	
  1796                           ;motor.c: 90: case 7: PORTC = 0b00111100;
  1797                           
  1798  0204  303C               	movlw	60
  1799  0205  0087               	movwf	7	;volatile
  1800                           
  1801                           ;motor.c: 91: currentStep = 0;
  1802  0206  01FB               	clrf	_currentStep
  1803                           
  1804                           ;motor.c: 92: break;
  1805  0207  2A25               	goto	l1480
  1806  0208                     l1474:	
  1807                           ;motor.c: 94: default: PORTC = 0b00111001;
  1808                           
  1809  0208  3039               	movlw	57
  1810  0209  0087               	movwf	7	;volatile
  1811                           
  1812                           ;motor.c: 96: }
  1813                           
  1814                           ;motor.c: 95: break;
  1815  020A  2A25               	goto	l1480
  1816  020B                     l1478:	
  1817  020B  087B               	movf	_currentStep,w
  1818                           
  1819                           ; Switch size 1, requested type "space"
  1820                           ; Number of cases is 8, Range of values is 0 to 7
  1821                           ; switch strategies available:
  1822                           ; Name         Instructions Cycles
  1823                           ; simple_byte           25    13 (average)
  1824                           ; direct_byte           32     8 (fixed)
  1825                           ; jumptable            260     6 (fixed)
  1826                           ;	Chosen strategy is simple_byte
  1827  020C  3A00               	xorlw	0	; case 0
  1828  020D  1903               	skipnz
  1829  020E  29F1               	goto	l1442
  1830  020F  3A01               	xorlw	1	; case 1
  1831  0210  1903               	skipnz
  1832  0211  29F3               	goto	l1446
  1833  0212  3A03               	xorlw	3	; case 2
  1834  0213  1903               	skipnz
  1835  0214  29F5               	goto	l1450
  1836  0215  3A01               	xorlw	1	; case 3
  1837  0216  1903               	skipnz
  1838  0217  29F7               	goto	l1454
  1839  0218  3A07               	xorlw	7	; case 4
  1840  0219  1903               	skipnz
  1841  021A  29F9               	goto	l1458
  1842  021B  3A01               	xorlw	1	; case 5
  1843  021C  1903               	skipnz
  1844  021D  29FB               	goto	l1462
  1845  021E  3A03               	xorlw	3	; case 6
  1846  021F  1903               	skipnz
  1847  0220  29FD               	goto	l1466
  1848  0221  3A01               	xorlw	1	; case 7
  1849  0222  1903               	skipnz
  1850  0223  2A04               	goto	l1470
  1851  0224  2A08               	goto	l1474
  1852  0225                     l1480:	
  1853                           
  1854                           ;motor.c: 98: _delay((unsigned long)((3)*(20000000/4000.0)));
  1855  0225  3014               	movlw	20
  1856  0226  00B9               	movwf	??_moveCCW+1
  1857  0227  3079               	movlw	121
  1858  0228  00B8               	movwf	??_moveCCW
  1859  0229                     u617:	
  1860  0229  0BB8               	decfsz	??_moveCCW,f
  1861  022A  2A29               	goto	u617
  1862  022B  0BB9               	decfsz	??_moveCCW+1,f
  1863  022C  2A29               	goto	u617
  1864  022D  2A2E               	nop2
  1865  022E  0008               	return
  1866  022F                     __end_of_moveCCW:	
  1867                           
  1868                           	psect	text10
  1869  0336                     __ptext10:	
  1870 ;; *************** function _ADCMain *****************
  1871 ;; Defined at:
  1872 ;;		line 19 in file "ADC.c"
  1873 ;; Parameters:    Size  Location     Type
  1874 ;;		None
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;		None
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  1    wreg      void 
  1879 ;; Registers used:
  1880 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1886 ;;      Params:         0       0       0       0       0
  1887 ;;      Locals:         0       0       0       0       0
  1888 ;;      Temps:          0       0       0       0       0
  1889 ;;      Totals:         0       0       0       0       0
  1890 ;;Total ram usage:        0 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:    4
  1893 ;; This function calls:
  1894 ;;		_getADC
  1895 ;;		_lcdSetCursor
  1896 ;;		_lcdWriteToDigitBCD
  1897 ;; This function is called by:
  1898 ;;		_main
  1899 ;; This function uses a non-reentrant model
  1900 ;;
  1901                           
  1902                           
  1903                           ;psect for function _ADCMain
  1904  0336                     _ADCMain:	
  1905                           
  1906                           ;ADC.c: 21: getADC();
  1907                           
  1908                           ;incstack = 0
  1909                           ; Regs used in _ADCMain: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1910  0336  120A  118A  222F  120A  118A  	fcall	_getADC
  1911                           
  1912                           ;ADC.c: 22: lcdSetCursor(0b10000000);
  1913  033B  3080               	movlw	128
  1914  033C  120A  118A  23A5  120A  118A  	fcall	_lcdSetCursor
  1915                           
  1916                           ;ADC.c: 23: lcdWriteToDigitBCD(adcRAW);
  1917  0341  1283               	bcf	3,5	;RP0=0, select bank0
  1918  0342  1303               	bcf	3,6	;RP1=0, select bank0
  1919  0343  0823               	movf	_adcRAW+1,w	;volatile
  1920  0344  00BC               	movwf	lcdWriteToDigitBCD@data+1
  1921  0345  0822               	movf	_adcRAW,w	;volatile
  1922  0346  00BB               	movwf	lcdWriteToDigitBCD@data
  1923  0347  120A  118A  2105   	fcall	_lcdWriteToDigitBCD
  1924  034A  0008               	return
  1925  034B                     __end_of_ADCMain:	
  1926                           
  1927                           	psect	text11
  1928  0105                     __ptext11:	
  1929 ;; *************** function _lcdWriteToDigitBCD *****************
  1930 ;; Defined at:
  1931 ;;		line 42 in file "LCD.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;  data            2    3[BANK0 ] unsigned int 
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  1936 ;;  TenThouDigit    2   11[BANK0 ] unsigned int 
  1937 ;;  ThouDigit       2    9[BANK0 ] unsigned int 
  1938 ;;  HunsDigit       2    7[BANK0 ] unsigned int 
  1939 ;;  TensDigit       2    5[BANK0 ] unsigned int 
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  1    wreg      void 
  1942 ;; Registers used:
  1943 ;;		wreg, status,2, status,0, pclath, cstack
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1949 ;;      Params:         0       2       0       0       0
  1950 ;;      Locals:         0      10       0       0       0
  1951 ;;      Temps:          0       0       0       0       0
  1952 ;;      Totals:         0      12       0       0       0
  1953 ;;Total ram usage:       12 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    3
  1956 ;; This function calls:
  1957 ;;		_lcdWriteData
  1958 ;; This function is called by:
  1959 ;;		_main
  1960 ;;		_ADCMain
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963                           
  1964                           
  1965                           ;psect for function _lcdWriteToDigitBCD
  1966  0105                     _lcdWriteToDigitBCD:	
  1967                           
  1968                           ;LCD.c: 43: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  1969                           ;LCD.c: 46: OnesDigit = data;
  1970                           
  1971                           ;incstack = 0
  1972                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  1973  0105  1283               	bcf	3,5	;RP0=0, select bank0
  1974  0106  1303               	bcf	3,6	;RP1=0, select bank0
  1975  0107  083C               	movf	lcdWriteToDigitBCD@data+1,w
  1976  0108  00C6               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1977  0109  083B               	movf	lcdWriteToDigitBCD@data,w
  1978  010A  00C5               	movwf	lcdWriteToDigitBCD@OnesDigit
  1979                           
  1980                           ;LCD.c: 47: TensDigit = 0;
  1981  010B  01BD               	clrf	lcdWriteToDigitBCD@TensDigit
  1982  010C  01BE               	clrf	lcdWriteToDigitBCD@TensDigit+1
  1983                           
  1984                           ;LCD.c: 48: HunsDigit = 0;
  1985  010D  01BF               	clrf	lcdWriteToDigitBCD@HunsDigit
  1986  010E  01C0               	clrf	lcdWriteToDigitBCD@HunsDigit+1
  1987                           
  1988                           ;LCD.c: 49: ThouDigit = 0;
  1989  010F  01C1               	clrf	lcdWriteToDigitBCD@ThouDigit
  1990  0110  01C2               	clrf	lcdWriteToDigitBCD@ThouDigit+1
  1991                           
  1992                           ;LCD.c: 50: TenThouDigit = 0;
  1993  0111  01C3               	clrf	lcdWriteToDigitBCD@TenThouDigit
  1994  0112  01C4               	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  1995  0113                     l1266:	
  1996                           ;LCD.c: 53: while (OnesDigit >= 10000){
  1997                           
  1998  0113  3027               	movlw	39
  1999  0114  0246               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2000  0115  3010               	movlw	16
  2001  0116  1903               	skipnz
  2002  0117  0245               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2003  0118  1C03               	btfss	3,0
  2004  0119  2937               	goto	l1272
  2005                           
  2006                           ;LCD.c: 54: OnesDigit = OnesDigit - 10000;
  2007  011A  0845               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2008  011B  3EF0               	addlw	240
  2009  011C  00C5               	movwf	lcdWriteToDigitBCD@OnesDigit
  2010  011D  0846               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2011  011E  1803               	skipnc
  2012  011F  3E01               	addlw	1
  2013  0120  3ED8               	addlw	216
  2014  0121  00C6               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2015                           
  2016                           ;LCD.c: 55: TenThouDigit++;
  2017  0122  3001               	movlw	1
  2018  0123  07C3               	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  2019  0124  1803               	skipnc
  2020  0125  0AC4               	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2021  0126  3000               	movlw	0
  2022  0127  07C4               	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2023  0128  2913               	goto	l1266
  2024  0129                     l1268:	
  2025                           ;LCD.c: 56: }
  2026                           ;LCD.c: 58: while (OnesDigit >= 1000){
  2027                           
  2028                           
  2029                           ;LCD.c: 59: OnesDigit = OnesDigit - 1000;
  2030  0129  0845               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2031  012A  3E18               	addlw	24
  2032  012B  00C5               	movwf	lcdWriteToDigitBCD@OnesDigit
  2033  012C  0846               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2034  012D  1803               	skipnc
  2035  012E  3E01               	addlw	1
  2036  012F  3EFC               	addlw	252
  2037  0130  00C6               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2038                           
  2039                           ;LCD.c: 60: ThouDigit++;
  2040  0131  3001               	movlw	1
  2041  0132  07C1               	addwf	lcdWriteToDigitBCD@ThouDigit,f
  2042  0133  1803               	skipnc
  2043  0134  0AC2               	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  2044  0135  3000               	movlw	0
  2045  0136  07C2               	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  2046  0137                     l1272:	
  2047  0137  3003               	movlw	3
  2048  0138  0246               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2049  0139  30E8               	movlw	232
  2050  013A  1903               	skipnz
  2051  013B  0245               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2052  013C  1C03               	btfss	3,0
  2053  013D  294D               	goto	l1278
  2054  013E  2929               	goto	l1268
  2055  013F                     l1274:	
  2056                           ;LCD.c: 61: }
  2057                           ;LCD.c: 63: while (OnesDigit >= 100){
  2058                           
  2059                           
  2060                           ;LCD.c: 64: OnesDigit = OnesDigit - 100;
  2061  013F  0845               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2062  0140  3E9C               	addlw	156
  2063  0141  00C5               	movwf	lcdWriteToDigitBCD@OnesDigit
  2064  0142  0846               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2065  0143  1803               	skipnc
  2066  0144  3E01               	addlw	1
  2067  0145  3EFF               	addlw	255
  2068  0146  00C6               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2069                           
  2070                           ;LCD.c: 65: HunsDigit++;
  2071  0147  3001               	movlw	1
  2072  0148  07BF               	addwf	lcdWriteToDigitBCD@HunsDigit,f
  2073  0149  1803               	skipnc
  2074  014A  0AC0               	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  2075  014B  3000               	movlw	0
  2076  014C  07C0               	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  2077  014D                     l1278:	
  2078  014D  3000               	movlw	0
  2079  014E  0246               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2080  014F  3064               	movlw	100
  2081  0150  1903               	skipnz
  2082  0151  0245               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2083  0152  1C03               	btfss	3,0
  2084  0153  2963               	goto	l1284
  2085  0154  293F               	goto	l1274
  2086  0155                     l1280:	
  2087                           ;LCD.c: 66: }
  2088                           ;LCD.c: 68: while (OnesDigit >= 10){
  2089                           
  2090                           
  2091                           ;LCD.c: 69: OnesDigit = OnesDigit - 10;
  2092  0155  0845               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2093  0156  3EF6               	addlw	246
  2094  0157  00C5               	movwf	lcdWriteToDigitBCD@OnesDigit
  2095  0158  0846               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2096  0159  1803               	skipnc
  2097  015A  3E01               	addlw	1
  2098  015B  3EFF               	addlw	255
  2099  015C  00C6               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2100                           
  2101                           ;LCD.c: 70: TensDigit++;
  2102  015D  3001               	movlw	1
  2103  015E  07BD               	addwf	lcdWriteToDigitBCD@TensDigit,f
  2104  015F  1803               	skipnc
  2105  0160  0ABE               	incf	lcdWriteToDigitBCD@TensDigit+1,f
  2106  0161  3000               	movlw	0
  2107  0162  07BE               	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  2108  0163                     l1284:	
  2109  0163  3000               	movlw	0
  2110  0164  0246               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2111  0165  300A               	movlw	10
  2112  0166  1903               	skipnz
  2113  0167  0245               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2114  0168  1803               	skipnc
  2115  0169  2955               	goto	l1280
  2116                           
  2117                           ;LCD.c: 71: }
  2118                           ;LCD.c: 73: if (TenThouDigit > 0)
  2119  016A  0843               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  2120  016B  0444               	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  2121  016C  1903               	btfsc	3,2
  2122  016D  2975               	goto	l1290
  2123                           
  2124                           ;LCD.c: 74: lcdWriteData((unsigned int)TenThouDigit + 48);
  2125  016E  0843               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  2126  016F  3E30               	addlw	48
  2127  0170  120A  118A  235F  120A  118A  	fcall	_lcdWriteData
  2128  0175                     l1290:	
  2129                           
  2130                           ;LCD.c: 76: if (ThouDigit > 0)
  2131  0175  1283               	bcf	3,5	;RP0=0, select bank0
  2132  0176  1303               	bcf	3,6	;RP1=0, select bank0
  2133  0177  0841               	movf	lcdWriteToDigitBCD@ThouDigit,w
  2134  0178  0442               	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  2135  0179  1903               	btfsc	3,2
  2136  017A  2982               	goto	l166
  2137                           
  2138                           ;LCD.c: 77: lcdWriteData((unsigned int)ThouDigit + 48);
  2139  017B  0841               	movf	lcdWriteToDigitBCD@ThouDigit,w
  2140  017C  3E30               	addlw	48
  2141  017D  120A  118A  235F  120A  118A  	fcall	_lcdWriteData
  2142  0182                     l166:	
  2143                           
  2144                           ;LCD.c: 79: lcdWriteData((unsigned int)HunsDigit + 48);
  2145  0182  1283               	bcf	3,5	;RP0=0, select bank0
  2146  0183  1303               	bcf	3,6	;RP1=0, select bank0
  2147  0184  083F               	movf	lcdWriteToDigitBCD@HunsDigit,w
  2148  0185  3E30               	addlw	48
  2149  0186  120A  118A  235F  120A  118A  	fcall	_lcdWriteData
  2150                           
  2151                           ;LCD.c: 80: lcdWriteData((unsigned int)TensDigit + 48);
  2152  018B  1283               	bcf	3,5	;RP0=0, select bank0
  2153  018C  1303               	bcf	3,6	;RP1=0, select bank0
  2154  018D  083D               	movf	lcdWriteToDigitBCD@TensDigit,w
  2155  018E  3E30               	addlw	48
  2156  018F  120A  118A  235F  120A  118A  	fcall	_lcdWriteData
  2157                           
  2158                           ;LCD.c: 81: lcdWriteData((unsigned int)OnesDigit + 48);
  2159  0194  1283               	bcf	3,5	;RP0=0, select bank0
  2160  0195  1303               	bcf	3,6	;RP1=0, select bank0
  2161  0196  0845               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2162  0197  3E30               	addlw	48
  2163  0198  120A  118A  235F   	fcall	_lcdWriteData
  2164  019B  0008               	return
  2165  019C                     __end_of_lcdWriteToDigitBCD:	
  2166                           
  2167                           	psect	text12
  2168  035F                     __ptext12:	
  2169 ;; *************** function _lcdWriteData *****************
  2170 ;; Defined at:
  2171 ;;		line 20 in file "LCD.c"
  2172 ;; Parameters:    Size  Location     Type
  2173 ;;  databyte        1    wreg     unsigned char 
  2174 ;; Auto vars:     Size  Location     Type
  2175 ;;  databyte        1    2[BANK0 ] unsigned char 
  2176 ;; Return value:  Size  Location     Type
  2177 ;;                  1    wreg      void 
  2178 ;; Registers used:
  2179 ;;		wreg
  2180 ;; Tracked objects:
  2181 ;;		On entry : 0/0
  2182 ;;		On exit  : 0/0
  2183 ;;		Unchanged: 0/0
  2184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2185 ;;      Params:         0       0       0       0       0
  2186 ;;      Locals:         0       1       0       0       0
  2187 ;;      Temps:          0       2       0       0       0
  2188 ;;      Totals:         0       3       0       0       0
  2189 ;;Total ram usage:        3 bytes
  2190 ;; Hardware stack levels used:    1
  2191 ;; Hardware stack levels required when called:    2
  2192 ;; This function calls:
  2193 ;;		Nothing
  2194 ;; This function is called by:
  2195 ;;		_lcdWriteToDigitBCD
  2196 ;;		_lcdWriteString
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           
  2201                           ;psect for function _lcdWriteData
  2202  035F                     _lcdWriteData:	
  2203                           
  2204                           ;incstack = 0
  2205                           ; Regs used in _lcdWriteData: [wreg]
  2206                           ;lcdWriteData@databyte stored from wreg
  2207  035F  1283               	bcf	3,5	;RP0=0, select bank0
  2208  0360  1303               	bcf	3,6	;RP1=0, select bank0
  2209  0361  00BA               	movwf	lcdWriteData@databyte
  2210                           
  2211                           ;LCD.c: 21: RE2 = 0;
  2212  0362  1109               	bcf	9,2	;volatile
  2213                           
  2214                           ;LCD.c: 22: RE1 = 0;
  2215  0363  1089               	bcf	9,1	;volatile
  2216                           
  2217                           ;LCD.c: 23: RE0 = 1;
  2218  0364  1409               	bsf	9,0	;volatile
  2219                           
  2220                           ;LCD.c: 24: PORTD = databyte;
  2221  0365  083A               	movf	lcdWriteData@databyte,w
  2222  0366  0088               	movwf	8	;volatile
  2223                           
  2224                           ;LCD.c: 25: RE2 = 1;
  2225  0367  1509               	bsf	9,2	;volatile
  2226                           
  2227                           ;LCD.c: 26: RE2 = 0;
  2228  0368  1109               	bcf	9,2	;volatile
  2229                           
  2230                           ;LCD.c: 27: _delay((unsigned long)((1)*(20000000/4000.0)));
  2231  0369  3007               	movlw	7
  2232  036A  00B9               	movwf	??_lcdWriteData+1
  2233  036B  307D               	movlw	125
  2234  036C  00B8               	movwf	??_lcdWriteData
  2235  036D                     u627:	
  2236  036D  0BB8               	decfsz	??_lcdWriteData,f
  2237  036E  2B6D               	goto	u627
  2238  036F  0BB9               	decfsz	??_lcdWriteData+1,f
  2239  0370  2B6D               	goto	u627
  2240  0371  0008               	return
  2241  0372                     __end_of_lcdWriteData:	
  2242                           
  2243                           	psect	text13
  2244  03A5                     __ptext13:	
  2245 ;; *************** function _lcdSetCursor *****************
  2246 ;; Defined at:
  2247 ;;		line 31 in file "LCD.c"
  2248 ;; Parameters:    Size  Location     Type
  2249 ;;  address         1    wreg     unsigned char 
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;  address         1    3[BANK0 ] unsigned char 
  2252 ;; Return value:  Size  Location     Type
  2253 ;;                  1    wreg      void 
  2254 ;; Registers used:
  2255 ;;		wreg, status,2, status,0, pclath, cstack
  2256 ;; Tracked objects:
  2257 ;;		On entry : 0/0
  2258 ;;		On exit  : 0/0
  2259 ;;		Unchanged: 0/0
  2260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2261 ;;      Params:         0       0       0       0       0
  2262 ;;      Locals:         0       1       0       0       0
  2263 ;;      Temps:          0       0       0       0       0
  2264 ;;      Totals:         0       1       0       0       0
  2265 ;;Total ram usage:        1 bytes
  2266 ;; Hardware stack levels used:    1
  2267 ;; Hardware stack levels required when called:    3
  2268 ;; This function calls:
  2269 ;;		_lcdWriteControl
  2270 ;; This function is called by:
  2271 ;;		_ADCMain
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           
  2276                           ;psect for function _lcdSetCursor
  2277  03A5                     _lcdSetCursor:	
  2278                           
  2279                           ;incstack = 0
  2280                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  2281                           ;lcdSetCursor@address stored from wreg
  2282  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  2283  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  2284  03A7  00BB               	movwf	lcdSetCursor@address
  2285                           
  2286                           ;LCD.c: 32: address |= 0b10000000;
  2287  03A8  17BB               	bsf	lcdSetCursor@address,7
  2288                           
  2289                           ;LCD.c: 33: lcdWriteControl(address);
  2290  03A9  083B               	movf	lcdSetCursor@address,w
  2291  03AA  120A  118A  234B   	fcall	_lcdWriteControl
  2292  03AD  0008               	return
  2293  03AE                     __end_of_lcdSetCursor:	
  2294                           
  2295                           	psect	text14
  2296  034B                     __ptext14:	
  2297 ;; *************** function _lcdWriteControl *****************
  2298 ;; Defined at:
  2299 ;;		line 9 in file "LCD.c"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;  databyte        1    wreg     unsigned char 
  2302 ;; Auto vars:     Size  Location     Type
  2303 ;;  databyte        1    2[BANK0 ] unsigned char 
  2304 ;; Return value:  Size  Location     Type
  2305 ;;                  1    wreg      void 
  2306 ;; Registers used:
  2307 ;;		wreg
  2308 ;; Tracked objects:
  2309 ;;		On entry : 0/0
  2310 ;;		On exit  : 0/0
  2311 ;;		Unchanged: 0/0
  2312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2313 ;;      Params:         0       0       0       0       0
  2314 ;;      Locals:         0       1       0       0       0
  2315 ;;      Temps:          0       2       0       0       0
  2316 ;;      Totals:         0       3       0       0       0
  2317 ;;Total ram usage:        3 bytes
  2318 ;; Hardware stack levels used:    1
  2319 ;; Hardware stack levels required when called:    2
  2320 ;; This function calls:
  2321 ;;		Nothing
  2322 ;; This function is called by:
  2323 ;;		_lcdSetCursor
  2324 ;;		_setupLCD
  2325 ;; This function uses a non-reentrant model
  2326 ;;
  2327                           
  2328                           
  2329                           ;psect for function _lcdWriteControl
  2330  034B                     _lcdWriteControl:	
  2331                           
  2332                           ;incstack = 0
  2333                           ; Regs used in _lcdWriteControl: [wreg]
  2334                           ;lcdWriteControl@databyte stored from wreg
  2335  034B  1283               	bcf	3,5	;RP0=0, select bank0
  2336  034C  1303               	bcf	3,6	;RP1=0, select bank0
  2337  034D  00BA               	movwf	lcdWriteControl@databyte
  2338                           
  2339                           ;LCD.c: 10: RE2 = 0;
  2340  034E  1109               	bcf	9,2	;volatile
  2341                           
  2342                           ;LCD.c: 11: RE1 = 0;
  2343  034F  1089               	bcf	9,1	;volatile
  2344                           
  2345                           ;LCD.c: 12: RE0 = 0;
  2346  0350  1009               	bcf	9,0	;volatile
  2347                           
  2348                           ;LCD.c: 13: PORTD = databyte;
  2349  0351  083A               	movf	lcdWriteControl@databyte,w
  2350  0352  0088               	movwf	8	;volatile
  2351                           
  2352                           ;LCD.c: 14: RE2 = 1;
  2353  0353  1509               	bsf	9,2	;volatile
  2354                           
  2355                           ;LCD.c: 15: RE2 = 0;
  2356  0354  1109               	bcf	9,2	;volatile
  2357                           
  2358                           ;LCD.c: 16: _delay((unsigned long)((2)*(20000000/4000.0)));
  2359  0355  300D               	movlw	13
  2360  0356  00B9               	movwf	??_lcdWriteControl+1
  2361  0357  30FB               	movlw	251
  2362  0358  00B8               	movwf	??_lcdWriteControl
  2363  0359                     u637:	
  2364  0359  0BB8               	decfsz	??_lcdWriteControl,f
  2365  035A  2B59               	goto	u637
  2366  035B  0BB9               	decfsz	??_lcdWriteControl+1,f
  2367  035C  2B59               	goto	u637
  2368  035D  2B5E               	nop2
  2369  035E  0008               	return
  2370  035F                     __end_of_lcdWriteControl:	
  2371                           
  2372                           	psect	text15
  2373  022F                     __ptext15:	
  2374 ;; *************** function _getADC *****************
  2375 ;; Defined at:
  2376 ;;		line 29 in file "ADC.c"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;		None
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;		None
  2381 ;; Return value:  Size  Location     Type
  2382 ;;                  2  300[None  ] unsigned int 
  2383 ;; Registers used:
  2384 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2385 ;; Tracked objects:
  2386 ;;		On entry : 0/0
  2387 ;;		On exit  : 0/0
  2388 ;;		Unchanged: 0/0
  2389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2390 ;;      Params:         0       0       0       0       0
  2391 ;;      Locals:         0       0       0       0       0
  2392 ;;      Temps:          0       2       0       0       0
  2393 ;;      Totals:         0       2       0       0       0
  2394 ;;Total ram usage:        2 bytes
  2395 ;; Hardware stack levels used:    1
  2396 ;; Hardware stack levels required when called:    2
  2397 ;; This function calls:
  2398 ;;		Nothing
  2399 ;; This function is called by:
  2400 ;;		_ADCMain
  2401 ;; This function uses a non-reentrant model
  2402 ;;
  2403                           
  2404                           
  2405                           ;psect for function _getADC
  2406  022F                     _getADC:	
  2407                           
  2408                           ;ADC.c: 31: ADRESH = 0;
  2409                           
  2410                           ;incstack = 0
  2411                           ; Regs used in _getADC: [wreg-fsr0h+status,2+status,0]
  2412  022F  1283               	bcf	3,5	;RP0=0, select bank0
  2413  0230  1303               	bcf	3,6	;RP1=0, select bank0
  2414  0231  019E               	clrf	30	;volatile
  2415                           
  2416                           ;ADC.c: 32: ADRESL = 0;
  2417  0232  1683               	bsf	3,5	;RP0=1, select bank1
  2418  0233  1303               	bcf	3,6	;RP1=0, select bank1
  2419  0234  019E               	clrf	30	;volatile
  2420                           
  2421                           ;ADC.c: 34: GO = 1;
  2422  0235  1283               	bcf	3,5	;RP0=0, select bank0
  2423  0236  1303               	bcf	3,6	;RP1=0, select bank0
  2424  0237  151F               	bsf	31,2	;volatile
  2425  0238                     l347:	
  2426                           ;ADC.c: 35: while(GO) continue;
  2427                           
  2428  0238  191F               	btfsc	31,2	;volatile
  2429  0239  2A38               	goto	l347
  2430                           
  2431                           ;ADC.c: 39: adcRAW = (4*ADRESH);
  2432  023A  081E               	movf	30,w	;volatile
  2433  023B  00B8               	movwf	??_getADC
  2434  023C  01B9               	clrf	??_getADC+1
  2435  023D  1003               	clrc
  2436  023E  0DB8               	rlf	??_getADC,f
  2437  023F  0DB9               	rlf	??_getADC+1,f
  2438  0240  1003               	clrc
  2439  0241  0DB8               	rlf	??_getADC,f
  2440  0242  0DB9               	rlf	??_getADC+1,f
  2441  0243  0838               	movf	??_getADC,w
  2442  0244  00A2               	movwf	_adcRAW	;volatile
  2443  0245  0839               	movf	??_getADC+1,w
  2444  0246  00A3               	movwf	_adcRAW+1	;volatile
  2445                           
  2446                           ;ADC.c: 41: switch(ADRESL){
  2447  0247  2A66               	goto	l1310
  2448  0248                     l1304:	
  2449                           ;ADC.c: 42: case 0b01000000: adcRAW = adcRAW + 1;
  2450                           
  2451  0248  1283               	bcf	3,5	;RP0=0, select bank0
  2452  0249  0822               	movf	_adcRAW,w	;volatile
  2453  024A  3E01               	addlw	1
  2454  024B  00A2               	movwf	_adcRAW	;volatile
  2455  024C  0823               	movf	_adcRAW+1,w	;volatile
  2456  024D  1803               	skipnc
  2457  024E  3E01               	addlw	1
  2458  024F  3E00               	addlw	0
  2459  0250  00A3               	movwf	_adcRAW+1	;volatile
  2460                           
  2461                           ;ADC.c: 43: break;
  2462  0251  0008               	return
  2463  0252                     l1306:	
  2464                           ;ADC.c: 44: case 0b10000000: adcRAW = adcRAW + 2;
  2465                           
  2466  0252  1283               	bcf	3,5	;RP0=0, select bank0
  2467  0253  0822               	movf	_adcRAW,w	;volatile
  2468  0254  3E02               	addlw	2
  2469  0255  00A2               	movwf	_adcRAW	;volatile
  2470  0256  0823               	movf	_adcRAW+1,w	;volatile
  2471  0257  1803               	skipnc
  2472  0258  3E01               	addlw	1
  2473  0259  3E00               	addlw	0
  2474  025A  00A3               	movwf	_adcRAW+1	;volatile
  2475                           
  2476                           ;ADC.c: 45: break;
  2477  025B  0008               	return
  2478  025C                     l1308:	
  2479                           ;ADC.c: 46: case 0b11000000: adcRAW = adcRAW + 3;
  2480                           
  2481  025C  1283               	bcf	3,5	;RP0=0, select bank0
  2482  025D  0822               	movf	_adcRAW,w	;volatile
  2483  025E  3E03               	addlw	3
  2484  025F  00A2               	movwf	_adcRAW	;volatile
  2485  0260  0823               	movf	_adcRAW+1,w	;volatile
  2486  0261  1803               	skipnc
  2487  0262  3E01               	addlw	1
  2488  0263  3E00               	addlw	0
  2489  0264  00A3               	movwf	_adcRAW+1	;volatile
  2490                           
  2491                           ;ADC.c: 49: }
  2492                           
  2493                           ;ADC.c: 48: default: adcRAW = adcRAW;
  2494                           
  2495                           ;ADC.c: 47: break;
  2496  0265  0008               	return
  2497  0266                     l1310:	
  2498  0266  1683               	bsf	3,5	;RP0=1, select bank1
  2499  0267  1303               	bcf	3,6	;RP1=0, select bank1
  2500  0268  081E               	movf	30,w	;volatile
  2501                           
  2502                           ; Switch size 1, requested type "space"
  2503                           ; Number of cases is 3, Range of values is 64 to 192
  2504                           ; switch strategies available:
  2505                           ; Name         Instructions Cycles
  2506                           ; simple_byte           10     6 (average)
  2507                           ; jumptable            263     9 (fixed)
  2508                           ;	Chosen strategy is simple_byte
  2509  0269  3A40               	xorlw	64	; case 64
  2510  026A  1903               	skipnz
  2511  026B  2A48               	goto	l1304
  2512  026C  3AC0               	xorlw	192	; case 128
  2513  026D  1903               	skipnz
  2514  026E  2A52               	goto	l1306
  2515  026F  3A40               	xorlw	64	; case 192
  2516  0270  1903               	skipnz
  2517  0271  2A5C               	goto	l1308
  2518  0272  2A73               	goto	l356
  2519  0273                     l356:	
  2520                           ;ADC.c: 51: return(adcRAW);
  2521                           ;	Return value of _getADC is never used
  2522                           
  2523  0273  0008               	return
  2524  0274                     __end_of_getADC:	
  2525                           
  2526                           	psect	text16
  2527  0274                     __ptext16:	
  2528 ;; *************** function _isr *****************
  2529 ;; Defined at:
  2530 ;;		line 16 in file "main.c"
  2531 ;; Parameters:    Size  Location     Type
  2532 ;;		None
  2533 ;; Auto vars:     Size  Location     Type
  2534 ;;		None
  2535 ;; Return value:  Size  Location     Type
  2536 ;;                  1    wreg      void 
  2537 ;; Registers used:
  2538 ;;		wreg, status,2, status,0, pclath, cstack
  2539 ;; Tracked objects:
  2540 ;;		On entry : 0/0
  2541 ;;		On exit  : 0/0
  2542 ;;		Unchanged: 0/0
  2543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2544 ;;      Params:         0       0       0       0       0
  2545 ;;      Locals:         0       0       0       0       0
  2546 ;;      Temps:          5       0       0       0       0
  2547 ;;      Totals:         5       0       0       0       0
  2548 ;;Total ram usage:        5 bytes
  2549 ;; Hardware stack levels used:    1
  2550 ;; Hardware stack levels required when called:    1
  2551 ;; This function calls:
  2552 ;;		___lwmod
  2553 ;; This function is called by:
  2554 ;;		Interrupt level 1
  2555 ;; This function uses a non-reentrant model
  2556 ;;
  2557                           
  2558                           
  2559                           ;psect for function _isr
  2560  0274                     _isr:	
  2561                           
  2562                           ;main.c: 18: if(TMR0IF){
  2563  0274  1D0B               	btfss	11,2	;volatile
  2564  0275  2AA2               	goto	i1l75
  2565                           
  2566                           ;main.c: 19: TMR0IF = 0;
  2567  0276  110B               	bcf	11,2	;volatile
  2568                           
  2569                           ;main.c: 20: TMR0 = 100;
  2570  0277  3064               	movlw	100
  2571  0278  0081               	movwf	1	;volatile
  2572                           
  2573                           ;main.c: 23: if(time_count % 1 == 0) {
  2574  0279  3001               	movlw	1
  2575  027A  07AE               	addwf	_time_count,f	;volatile
  2576  027B  1803               	skipnc
  2577  027C  0AAF               	incf	_time_count+1,f	;volatile
  2578  027D  3000               	movlw	0
  2579  027E  07AF               	addwf	_time_count+1,f	;volatile
  2580                           
  2581                           ;main.c: 25: RC2 = 1; __nop(); RC2 = 0;;
  2582  027F  1507               	bsf	7,2	;volatile
  2583  0280  0000               	nop
  2584  0281  1283               	bcf	3,5	;RP0=0, select bank0
  2585  0282  1303               	bcf	3,6	;RP1=0, select bank0
  2586  0283  1107               	bcf	7,2	;volatile
  2587                           
  2588                           ;main.c: 26: }
  2589                           ;main.c: 28: if(time_count % 1000 == 0){
  2590  0284  30E8               	movlw	232
  2591  0285  00F0               	movwf	___lwmod@divisor
  2592  0286  3003               	movlw	3
  2593  0287  00F1               	movwf	___lwmod@divisor+1
  2594  0288  082F               	movf	_time_count+1,w	;volatile
  2595  0289  00F3               	movwf	___lwmod@dividend+1
  2596  028A  082E               	movf	_time_count,w	;volatile
  2597  028B  00F2               	movwf	___lwmod@dividend
  2598  028C  120A  118A  22AD  120A  118A  	fcall	___lwmod
  2599  0291  0870               	movf	?___lwmod,w
  2600  0292  0471               	iorwf	?___lwmod+1,w
  2601  0293  1D03               	btfss	3,2
  2602  0294  2A9A               	goto	i1l1522
  2603                           
  2604                           ;main.c: 29: FLAG_1000MS = 1;
  2605  0295  147D               	bsf	_FLAG_1000MS/(0+8),_FLAG_1000MS& (0+7)	;volatile
  2606                           
  2607                           ;main.c: 30: time_count = 0;
  2608  0296  1283               	bcf	3,5	;RP0=0, select bank0
  2609  0297  1303               	bcf	3,6	;RP1=0, select bank0
  2610  0298  01AE               	clrf	_time_count	;volatile
  2611  0299  01AF               	clrf	_time_count+1	;volatile
  2612  029A                     i1l1522:	
  2613                           
  2614                           ;main.c: 31: }
  2615                           ;main.c: 32: if (!RB0 == 1)
  2616  029A  1283               	bcf	3,5	;RP0=0, select bank0
  2617  029B  1303               	bcf	3,6	;RP1=0, select bank0
  2618  029C  1806               	btfsc	6,0	;volatile
  2619  029D  2AA2               	goto	i1l75
  2620                           
  2621                           ;main.c: 33: PB8Counter++;
  2622  029E  3001               	movlw	1
  2623  029F  00F6               	movwf	??_isr
  2624  02A0  0876               	movf	??_isr,w
  2625  02A1  07B2               	addwf	_PB8Counter,f
  2626  02A2                     i1l75:	
  2627  02A2  087A               	movf	??_isr+4,w
  2628  02A3  00FF               	movwf	127
  2629  02A4  0879               	movf	??_isr+3,w
  2630  02A5  008A               	movwf	10
  2631  02A6  0878               	movf	??_isr+2,w
  2632  02A7  0084               	movwf	4
  2633  02A8  0E77               	swapf	(??_isr+1)^(0+-128),w
  2634  02A9  0083               	movwf	3
  2635  02AA  0EFE               	swapf	126,f
  2636  02AB  0E7E               	swapf	126,w
  2637  02AC  0009               	retfie
  2638  02AD                     __end_of_isr:	
  2639                           
  2640                           	psect	intentry
  2641  0004                     __pintentry:	
  2642                           ;incstack = 0
  2643                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  2644                           
  2645  0004                     interrupt_function:	
  2646  007E                     saved_w	set	btemp
  2647  0004  00FE               	movwf	btemp
  2648  0005  0E03               	swapf	3,w
  2649  0006  00F7               	movwf	??_isr+1
  2650  0007  0804               	movf	4,w
  2651  0008  00F8               	movwf	??_isr+2
  2652  0009  080A               	movf	10,w
  2653  000A  00F9               	movwf	??_isr+3
  2654  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2655  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2656  000D  087F               	movf	btemp+1,w
  2657  000E  00FA               	movwf	??_isr+4
  2658  000F  120A  118A  2A74   	ljmp	_isr
  2659                           
  2660                           	psect	text17
  2661  02AD                     __ptext17:	
  2662 ;; *************** function ___lwmod *****************
  2663 ;; Defined at:
  2664 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;  divisor         2    0[COMMON] unsigned int 
  2667 ;;  dividend        2    2[COMMON] unsigned int 
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;  counter         1    5[COMMON] unsigned char 
  2670 ;; Return value:  Size  Location     Type
  2671 ;;                  2    0[COMMON] unsigned int 
  2672 ;; Registers used:
  2673 ;;		wreg, status,2, status,0
  2674 ;; Tracked objects:
  2675 ;;		On entry : 0/0
  2676 ;;		On exit  : 0/0
  2677 ;;		Unchanged: 0/0
  2678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2679 ;;      Params:         4       0       0       0       0
  2680 ;;      Locals:         1       0       0       0       0
  2681 ;;      Temps:          1       0       0       0       0
  2682 ;;      Totals:         6       0       0       0       0
  2683 ;;Total ram usage:        6 bytes
  2684 ;; Hardware stack levels used:    1
  2685 ;; This function calls:
  2686 ;;		Nothing
  2687 ;; This function is called by:
  2688 ;;		_isr
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           
  2693                           ;psect for function ___lwmod
  2694  02AD                     ___lwmod:	
  2695                           
  2696                           ;incstack = 0
  2697                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2698  02AD  0870               	movf	___lwmod@divisor,w
  2699  02AE  0471               	iorwf	___lwmod@divisor+1,w
  2700  02AF  1903               	btfsc	3,2
  2701  02B0  2ADA               	goto	i1l1500
  2702  02B1  01F5               	clrf	___lwmod@counter
  2703  02B2  0AF5               	incf	___lwmod@counter,f
  2704  02B3                     i1l1490:	
  2705  02B3  1BF1               	btfsc	___lwmod@divisor+1,7
  2706  02B4  2AC1               	goto	i1l1492
  2707  02B5  3001               	movlw	1
  2708  02B6                     u43_25:	
  2709  02B6  1003               	clrc
  2710  02B7  0DF0               	rlf	___lwmod@divisor,f
  2711  02B8  0DF1               	rlf	___lwmod@divisor+1,f
  2712  02B9  3EFF               	addlw	-1
  2713  02BA  1D03               	skipz
  2714  02BB  2AB6               	goto	u43_25
  2715  02BC  3001               	movlw	1
  2716  02BD  00F4               	movwf	??___lwmod
  2717  02BE  0874               	movf	??___lwmod,w
  2718  02BF  07F5               	addwf	___lwmod@counter,f
  2719  02C0  2AB3               	goto	i1l1490
  2720  02C1                     i1l1492:	
  2721  02C1  0871               	movf	___lwmod@divisor+1,w
  2722  02C2  0273               	subwf	___lwmod@dividend+1,w
  2723  02C3  1D03               	skipz
  2724  02C4  2AC7               	goto	u45_25
  2725  02C5  0870               	movf	___lwmod@divisor,w
  2726  02C6  0272               	subwf	___lwmod@dividend,w
  2727  02C7                     u45_25:	
  2728  02C7  1C03               	skipc
  2729  02C8  2ACF               	goto	i1l1496
  2730  02C9  0870               	movf	___lwmod@divisor,w
  2731  02CA  02F2               	subwf	___lwmod@dividend,f
  2732  02CB  0871               	movf	___lwmod@divisor+1,w
  2733  02CC  1C03               	skipc
  2734  02CD  03F3               	decf	___lwmod@dividend+1,f
  2735  02CE  02F3               	subwf	___lwmod@dividend+1,f
  2736  02CF                     i1l1496:	
  2737  02CF  3001               	movlw	1
  2738  02D0                     u46_25:	
  2739  02D0  1003               	clrc
  2740  02D1  0CF1               	rrf	___lwmod@divisor+1,f
  2741  02D2  0CF0               	rrf	___lwmod@divisor,f
  2742  02D3  3EFF               	addlw	-1
  2743  02D4  1D03               	skipz
  2744  02D5  2AD0               	goto	u46_25
  2745  02D6  3001               	movlw	1
  2746  02D7  02F5               	subwf	___lwmod@counter,f
  2747  02D8  1D03               	btfss	3,2
  2748  02D9  2AC1               	goto	i1l1492
  2749  02DA                     i1l1500:	
  2750  02DA  0873               	movf	___lwmod@dividend+1,w
  2751  02DB  00F1               	movwf	?___lwmod+1
  2752  02DC  0872               	movf	___lwmod@dividend,w
  2753  02DD  00F0               	movwf	?___lwmod
  2754  02DE  0008               	return
  2755  02DF                     __end_of___lwmod:	
  2756  007E                     btemp	set	126	;btemp
  2757  007E                     wtemp	set	126
  2758  007E                     wtemp0	set	126
  2759  0080                     wtemp1	set	128
  2760  0082                     wtemp2	set	130
  2761  0084                     wtemp3	set	132
  2762  0086                     wtemp4	set	134
  2763  0088                     wtemp5	set	136
  2764  007F                     wtemp6	set	127
  2765  007E                     ttemp	set	126
  2766  007E                     ttemp0	set	126
  2767  0081                     ttemp1	set	129
  2768  0084                     ttemp2	set	132
  2769  0087                     ttemp3	set	135
  2770  007F                     ttemp4	set	127
  2771  007E                     ltemp	set	126
  2772  007E                     ltemp0	set	126
  2773  0082                     ltemp1	set	130
  2774  0086                     ltemp2	set	134
  2775  0080                     ltemp3	set	128
>>>>>>> refs/remotes/origin/Brendan


Data Sizes:
    Strings     0
    Constant    0
<<<<<<< HEAD
    Data        0
    BSS         7
=======
    Data        2
    BSS         26
>>>>>>> refs/remotes/origin/Brendan
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
<<<<<<< HEAD
    COMMON           14     10      13
    BANK0            80     24      29
=======
    COMMON           14     11      14
    BANK0            80     18      44
>>>>>>> refs/remotes/origin/Brendan
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->___lwmod

Critical Paths under _main in BANK0

    _main->_lcdWriteToDigitBCD
    _setupLCD->_lcdWriteControl
    _ADCMain->_lcdWriteToDigitBCD
    _lcdWriteToDigitBCD->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (0) _main                                                 9     9      0     616
                                             15 BANK0      9     9      0
=======
 (0) _main                                                 3     3      0    1135
                                             15 BANK0      3     3      0
                            _ADCMain
>>>>>>> refs/remotes/origin/Brendan
                 _lcdWriteToDigitBCD
                            _moveCCW
                             _moveCW
                          _ser_getch
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      30
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      22
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ser_getch                                            2     2      0       7
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (1) _lcdWriteToDigitBCD                                  12    10      2     440
=======
 (1) _moveCW                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _moveCCW                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADCMain                                              0     0      0     538
                             _getADC
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (1) _lcdWriteToDigitBCD                                  12    10      2     493
>>>>>>> refs/remotes/origin/Brendan
                                              3 BANK0     12    10      2
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (2) _lcdWriteData                                         3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _lcdSetCursor                                         1     1      0      45
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getADC                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  5     5      0     265
                                              6 COMMON     5     5      0
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCMain
     _getADC
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteToDigitBCD
       _lcdWriteData
   _lcdWriteToDigitBCD
     _lcdWriteData
   _moveCCW
   _moveCW
   _ser_getch
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)
   ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
<<<<<<< HEAD
BITCOMMON            E      0       1       0        7.1%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      2A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     18      1D       5       36.3%
BITSFR2              0      0       0       5        0.0%
=======
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
>>>>>>> refs/remotes/origin/Brendan
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
<<<<<<< HEAD
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      2A      12        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Tue Aug 30 13:55:30 2016

                   __CFG_CP$OFF 0000                             l102 00A0                             l134 0212  
                           l163 022C                             l169 0235                             l950 005D  
                           l942 0031                             l960 0081                             l944 0047  
                           l954 006B                             l956 0073                             l948 0055  
                           l966 0093                             _GIE 005F                             _RB0 0030  
                           _RC2 003A                             _RE0 0048                             _RE1 0049  
                           _RE2 004A                             u407 0206                    __CFG_CPD$OFF 0000  
                           u397 01F2                             _isr 0172                             fsr0 0004  
                  __CFG_FOSC$HS 0000                  ??_lcdWriteData 0020                    __CFG_LVP$OFF 0000  
                          l1046 0138                            ?_isr 0070                            _PEIE 005E  
                          i1l40 0196                            _RCIF 0065                            _TMR0 0001  
                          _TRMT 04C1                    __CFG_WRT$OFF 0000                     main@lowByte 0033  
                          _main 00BA                            btemp 007E                            ltemp 007E  
                          start 0012                            ttemp 007E                            wtemp 007E  
                         ??_isr 0076                    main@highByte 0031                           ?_main 0070  
                 __CFG_WDTE$OFF 0000                 __end_of___lwmod 0172                           i1l980 0154  
                         i1l984 0162                           i1l978 0146                           i1l988 016D  
                         _RCREG 001A                           _RCSTA 0018                           u30_25 0149  
                         u32_25 015A                           u33_25 0163                           _SPBRG 0099  
                         _PORTC 0007                           _PORTD 0008                           _PORTE 0009  
                         _TRISB 0086                           _TRISC 0087                           _TRISD 0088  
                         _TRISE 0089                           _SSPIF 0063                           _TXREG 0019  
                         _TXSTA 0098      __end_of_lcdWriteToDigitBCD 00BA                  __pbitbssCOMMON 03E0  
                __CFG_BOREN$OFF 0000                           pclath 000A                           ltemp0 007E  
                         ltemp1 0082                           ltemp2 0086                           ltemp3 0080  
                         ttemp0 007E                           ttemp1 0081                           ttemp2 0084  
                         ttemp3 0087                           ttemp4 007F                           status 0003  
                         wtemp0 007E                           wtemp1 0080                           wtemp2 0082  
                         wtemp3 0084                           wtemp4 0086                           wtemp5 0088  
                         wtemp6 007F                 __initialization 0015                    __end_of_main 0140  
      __size_of_lcdWriteControl 0014                          ??_main 002F                          _ADCON1 009F  
                        _TMR0IE 005D                          _TMR0IF 005A                          _SSPCON 0014  
                        _SSPBUF 0013                  __CFG_PWRTE$OFF 0000            __end_of_lcdWriteData 020B  
                     ??___lwmod 0074                          _rxbyte 003C                __end_of_ser_init 0229  
              __end_of_setupLCD 01CC                __end_of_setupSPI 01E4                          saved_w 007E  
       __end_of__initialization 001F                  __pcstackCOMMON 0070               ??_lcdWriteControl 0020  
                    __pbssBANK0 0038                      __pmaintext 00BA                      __pintentry 0004  
            __size_of_ser_getch 0009              __size_of_ser_putch 000C                         _SSPSTAT 0094  
         __size_of_lcdWriteData 0013              _lcdWriteToDigitBCD 0023                       ?_ser_init 0070  
                     ?_setupLCD 0070                       ?_setupSPI 0070                         ___lwmod 0140  
           ?_lcdWriteToDigitBCD 0023                         _degrees 0038                         __ptext1 020B  
                       __ptext2 01CC                         __ptext3 01A3                         __ptext4 01E4  
                       __ptext5 0229                         __ptext6 021A                         __ptext7 0235  
                       __ptext8 0023                         __ptext9 01F8                    __size_of_isr 0031  
                  _lcdWriteData 01F8            end_of_initialization 001F            ??_lcdWriteToDigitBCD 0025  
             __end_of_ser_getch 023E               __end_of_ser_putch 0235                      ??_ser_init 0020  
                    ??_setupLCD 0023                      ??_setupSPI 0020                      _time_count 007A  
                 ?_spi_transfer 0070                 ser_getch@rxbyte 0021                 _lcdWriteControl 01E4  
           start_initialization 0015                     __end_of_isr 01A3                  ??_spi_transfer 0020  
                   _FLAG_1000MS 03E0                     __pbssCOMMON 007A                       ___latbits 0002  
                 __pcstackBANK0 0020         __end_of_lcdWriteControl 01F8               __size_of_ser_init 000F  
                      ?___lwmod 0070               __size_of_setupLCD 0029               __size_of_setupSPI 0018  
               main@controlByte 0037         lcdWriteControl@databyte 0022               interrupt_function 0004  
                    ser_putch@c 0020                       _ser_getch 0235                       _ser_putch 0229  
          __end_of_spi_transfer 021A                spi_transfer@data 0022                spi_transfer@temp 0021  
          lcdWriteData@databyte 0022     __size_of_lcdWriteToDigitBCD 0097                      ?_ser_getch 0070  
              ?_lcdWriteControl 0070                      ?_ser_putch 0070                __size_of___lwmod 0032  
lcdWriteToDigitBCD@TenThouDigit 002B                        __ptext10 0172                        __ptext11 0140  
                 __size_of_main 0086                        _ser_init 021A                        _setupLCD 01A3  
                      _setupSPI 01CC     lcdWriteToDigitBCD@HunsDigit 0027     lcdWriteToDigitBCD@OnesDigit 002D  
                      main@dist 0035     lcdWriteToDigitBCD@TensDigit 0025     lcdWriteToDigitBCD@ThouDigit 0029  
                      intlevel1 0000                ___lwmod@dividend 0072                     ??_ser_getch 0020  
                   ??_ser_putch 0020           __size_of_spi_transfer 000F                      _OPTION_REG 0081  
               ___lwmod@divisor 0070                 ___lwmod@counter 0075                   ?_lcdWriteData 0070  
        lcdWriteToDigitBCD@data 0023                    _spi_transfer 020B                    _stepCountNeg 003A  
=======
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     12      2C       5       55.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       E       1      100.0%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3A      12        0.0%
ABS                  0      0      3A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Aug 31 10:20:33 2016

                             _x 0030                     __CFG_CP$OFF 0000                              l79 00B1  
                            _GO 00FA                              fsr 0004                             l224 0379  
                           l166 0182                             l347 0238                             l356 0273  
                           l285 039C                             l279 0393                             _GIE 005F  
                           _RB0 0030                             _RC2 003A                             _RE0 0048  
                           _RE1 0049                             _RE2 004A                    __CFG_CPD$OFF 0000  
                           u607 01E1                             u617 0229                             u627 036D  
                           u555 00D3                             u637 0359                             u597 0333  
                           _isr 0274                 __end_of_ADCMain 034B                             fsr0 0004  
                           indf 0000                    __CFG_FOSC$HS 0000                  ??_lcdWriteData 0038  
                  __CFG_LVP$OFF 0000                            l1310 0266                            l1304 0248  
                          l1400 01AC                            l1306 0252                            l1308 025C  
                          l1420 01B9                            l1412 01B2                            l1404 01AE  
                          l1422 01C0                            l1280 0155                            l1272 0137  
                          l1416 01B4                            l1408 01B0                            l1290 0175  
                          l1274 013F                            l1266 0113                            l1450 01F5  
                          l1442 01F1                            l1426 01C3                            l1284 0163  
                          l1268 0129                            l1428 01DD                            l1278 014D  
                          l1470 0204                            l1462 01FB                            l1454 01F7  
                          l1446 01F3                            l1390 01A3                            l1480 0225  
                          l1392 01A8                            l1474 0208                            l1466 01FD  
                          l1458 01F9                            l1554 00AA                            l1396 01AA  
                          l1478 020B                            l1584 00EF                            l1576 00DE  
                          l1568 00C1                            l1578 00EA                            ?_isr 0070  
                          _PEIE 005E                            _RCIF 0065                            i1l75 02A2  
                          _TMR0 0001                            _TRMT 04C1                    __CFG_WRT$OFF 0000  
                          _main 002F                            btemp 007E                            ltemp 007E  
                          start 0012                            ttemp 007E                            wtemp 007E  
                         ??_isr 0076                           ?_main 0070                   __CFG_WDTE$OFF 0000  
               __end_of___lwmod 02DF                           _RCREG 001A                           _RCSTA 0018  
                         _SPBRG 0099                           _PORTA 0005                           _PORTC 0007  
                         _PORTD 0008                           u43_25 02B6                           _PORTE 0009  
                         u45_25 02C7                           u46_25 02D0                           _TRISA 0085  
                         _TRISB 0086                           _TRISC 0087                           _TRISD 0088  
                         _TRISE 0089                           _SSPIF 0063                           _TXREG 0019  
                         _TXSTA 0098      __end_of_lcdWriteToDigitBCD 019C                 __end_of_moveCCW 022F  
                __pbitbssCOMMON 03E8                  __CFG_BOREN$OFF 0000                           pclath 000A  
                         ltemp0 007E                           ltemp1 0082                           ltemp2 0086  
                         ltemp3 0080                           ttemp0 007E                           ttemp1 0081  
                         ttemp2 0084                           ttemp3 0087                           ttemp4 007F  
                         status 0003                           wtemp0 007E                           wtemp1 0080  
                         wtemp2 0082                           wtemp3 0084                           wtemp4 0086  
                         wtemp5 0088                           wtemp6 007F                 __initialization 0015  
                  __end_of_main 0105                       ??_ADCMain 0047        __size_of_lcdWriteControl 0014  
                        ??_main 0047            __end_of_lcdSetCursor 03AE                          _ADCON0 001F  
                        _ADCON1 009F                          _ADRESH 001E                          _ADRESL 009E  
                        i1l1500 02DA                          i1l1522 029A                          i1l1490 02B3  
                        i1l1492 02C1                          i1l1496 02CF                          _TMR0IE 005D  
                        _TMR0IF 005A                          _SSPCON 0014                          _SSPBUF 0013  
                __CFG_PWRTE$OFF 0000                          _adcRAW 0022                          _getADC 022F  
          __end_of_lcdWriteData 0372                       ??___lwmod 0074                          _moveCW 019C  
                        _rxbyte 0034                __end_of_ser_init 0390                __end_of_setupADC 0336  
                     ??_moveCCW 0038                __end_of_setupLCD 0308                __end_of_setupSPI 0320  
                        saved_w 007E                      _adcClosest 004A         __end_of__initialization 002B  
                __pcstackCOMMON 0070                    __pidataBANK0 03B6               ??_lcdWriteControl 0038  
                    __pbssBANK0 0020             lcdSetCursor@address 003B                      __pmaintext 002F  
                       ?_getADC 0070                      __pintentry 0004           __size_of_lcdSetCursor 0009  
                       _ADCMain 0336                         ?_moveCW 0070              __size_of_ser_getch 0009  
            __size_of_ser_putch 000C                         _SSPSTAT 0094           __size_of_lcdWriteData 0013  
                  _lcdSetCursor 03A5              _lcdWriteToDigitBCD 0105                       ?_ser_init 0070  
                     ?_setupADC 0070                       ?_setupLCD 0070                       ?_setupSPI 0070  
               __size_of_getADC 0045                         ___lwmod 02AD             ?_lcdWriteToDigitBCD 003B  
                       _degrees 0024                 __size_of_moveCW 004B                         __ptext1 0372  
                       __ptext2 0308                         __ptext3 02DF                         __ptext4 0320  
                       __ptext5 0390                         __ptext6 0381                         __ptext7 039C  
                       __ptext8 019C                         __ptext9 01E7                    __size_of_isr 0039  
                       _lowByte 0028                         _moveCCW 01E7                         clrloop0 03AF  
                  _lcdWriteData 035F            end_of_initialization 002B            ??_lcdWriteToDigitBCD 003D  
             __end_of_ser_getch 03A5               __end_of_ser_putch 039C                      ??_ser_init 0038  
                    ??_setupADC 0038                      ??_setupLCD 003B                      ??_setupSPI 0038  
                    _time_count 002E                   ?_spi_transfer 0070                 ser_getch@rxbyte 0039  
               _lcdWriteControl 034B                  __end_of_getADC 0274                  __end_of_moveCW 01E7  
           start_initialization 0015                     __end_of_isr 02AD                  ??_spi_transfer 0038  
                      ??_getADC 0038                     __pdataBANK0 004A                        ?_ADCMain 0070  
                      ??_moveCW 0038                    _negativeFlag 007C                     _FLAG_1000MS 03E8  
                   __pbssCOMMON 007B                       ___latbits 0002                   __pcstackBANK0 0038  
       __end_of_lcdWriteControl 035F               __size_of_ser_init 000F                        ?___lwmod 0070  
             __size_of_setupADC 0016               __size_of_setupLCD 0029               __size_of_setupSPI 0018  
                      ?_moveCCW 0070                 main@controlByte 0049         lcdWriteControl@databyte 003A  
             interrupt_function 0004                      ser_putch@c 0038                       clear_ram0 03AE  
                     _ser_getch 039C                       _ser_putch 0390                       _stepCount 0035  
              __size_of_ADCMain 0015            __end_of_spi_transfer 0381                spi_transfer@data 003A  
              spi_transfer@temp 0039                     _controlByte 0033                        _Distance 0020  
          lcdWriteData@databyte 003A     __size_of_lcdWriteToDigitBCD 0097                      ?_ser_getch 0070  
              ?_lcdWriteControl 0070                      ?_ser_putch 0070                __size_of___lwmod 0032  
                   _currentStep 007B  lcdWriteToDigitBCD@TenThouDigit 0043                __size_of_moveCCW 0048  
                      __ptext10 0336                        __ptext11 0105                        __ptext12 035F  
                      __ptext13 03A5                        __ptext14 034B                        __ptext15 022F  
                      __ptext16 0274                        __ptext17 02AD                        _highByte 0036  
                      _distTrav 0026                   __size_of_main 00D6                        _ser_init 0381  
                      _setupADC 0320                        _setupLCD 02DF                        _setupSPI 0308  
   lcdWriteToDigitBCD@HunsDigit 003F                      _PB8Counter 0032     lcdWriteToDigitBCD@OnesDigit 0045  
   lcdWriteToDigitBCD@TensDigit 003D     lcdWriteToDigitBCD@ThouDigit 0041                        intlevel1 0000  
              ___lwmod@dividend 0072                   ?_lcdSetCursor 0070                     ??_ser_getch 0038  
                   ??_ser_putch 0038           __size_of_spi_transfer 000F                      _OPTION_REG 0081  
               ___lwmod@divisor 0070                 ___lwmod@counter 0075                   ?_lcdWriteData 0070  
        lcdWriteToDigitBCD@data 003B                    _spi_transfer 0372                  ??_lcdSetCursor 003B  
                  _stepCountNeg 002C                     _stepClosest 002A  
>>>>>>> refs/remotes/origin/Brendan
