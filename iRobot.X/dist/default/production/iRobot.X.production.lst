

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Tue Aug 30 13:55:30 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     	;# 
    25  0001                     	;# 
    26  0002                     	;# 
    27  0003                     	;# 
    28  0004                     	;# 
    29  0005                     	;# 
    30  0006                     	;# 
    31  0007                     	;# 
    32  0008                     	;# 
    33  0009                     	;# 
    34  000A                     	;# 
    35  000B                     	;# 
    36  000C                     	;# 
    37  000D                     	;# 
    38  000E                     	;# 
    39  000E                     	;# 
    40  000F                     	;# 
    41  0010                     	;# 
    42  0011                     	;# 
    43  0012                     	;# 
    44  0013                     	;# 
    45  0014                     	;# 
    46  0015                     	;# 
    47  0015                     	;# 
    48  0016                     	;# 
    49  0017                     	;# 
    50  0018                     	;# 
    51  0019                     	;# 
    52  001A                     	;# 
    53  001B                     	;# 
    54  001B                     	;# 
    55  001C                     	;# 
    56  001D                     	;# 
    57  001E                     	;# 
    58  001F                     	;# 
    59  0081                     	;# 
    60  0085                     	;# 
    61  0086                     	;# 
    62  0087                     	;# 
    63  0088                     	;# 
    64  0089                     	;# 
    65  008C                     	;# 
    66  008D                     	;# 
    67  008E                     	;# 
    68  0091                     	;# 
    69  0092                     	;# 
    70  0093                     	;# 
    71  0094                     	;# 
    72  0098                     	;# 
    73  0099                     	;# 
    74  009C                     	;# 
    75  009D                     	;# 
    76  009E                     	;# 
    77  009F                     	;# 
    78  010C                     	;# 
    79  010D                     	;# 
    80  010E                     	;# 
    81  010F                     	;# 
    82  018C                     	;# 
    83  018D                     	;# 
    84  0000                     	;# 
    85  0001                     	;# 
    86  0002                     	;# 
    87  0003                     	;# 
    88  0004                     	;# 
    89  0005                     	;# 
    90  0006                     	;# 
    91  0007                     	;# 
    92  0008                     	;# 
    93  0009                     	;# 
    94  000A                     	;# 
    95  000B                     	;# 
    96  000C                     	;# 
    97  000D                     	;# 
    98  000E                     	;# 
    99  000E                     	;# 
   100  000F                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0013                     	;# 
   105  0014                     	;# 
   106  0015                     	;# 
   107  0015                     	;# 
   108  0016                     	;# 
   109  0017                     	;# 
   110  0018                     	;# 
   111  0019                     	;# 
   112  001A                     	;# 
   113  001B                     	;# 
   114  001B                     	;# 
   115  001C                     	;# 
   116  001D                     	;# 
   117  001E                     	;# 
   118  001F                     	;# 
   119  0081                     	;# 
   120  0085                     	;# 
   121  0086                     	;# 
   122  0087                     	;# 
   123  0088                     	;# 
   124  0089                     	;# 
   125  008C                     	;# 
   126  008D                     	;# 
   127  008E                     	;# 
   128  0091                     	;# 
   129  0092                     	;# 
   130  0093                     	;# 
   131  0094                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  009E                     	;# 
   137  009F                     	;# 
   138  010C                     	;# 
   139  010D                     	;# 
   140  010E                     	;# 
   141  010F                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144  0000                     	;# 
   145  0001                     	;# 
   146  0002                     	;# 
   147  0003                     	;# 
   148  0004                     	;# 
   149  0005                     	;# 
   150  0006                     	;# 
   151  0007                     	;# 
   152  0008                     	;# 
   153  0009                     	;# 
   154  000A                     	;# 
   155  000B                     	;# 
   156  000C                     	;# 
   157  000D                     	;# 
   158  000E                     	;# 
   159  000E                     	;# 
   160  000F                     	;# 
   161  0010                     	;# 
   162  0011                     	;# 
   163  0012                     	;# 
   164  0013                     	;# 
   165  0014                     	;# 
   166  0015                     	;# 
   167  0015                     	;# 
   168  0016                     	;# 
   169  0017                     	;# 
   170  0018                     	;# 
   171  0019                     	;# 
   172  001A                     	;# 
   173  001B                     	;# 
   174  001B                     	;# 
   175  001C                     	;# 
   176  001D                     	;# 
   177  001E                     	;# 
   178  001F                     	;# 
   179  0081                     	;# 
   180  0085                     	;# 
   181  0086                     	;# 
   182  0087                     	;# 
   183  0088                     	;# 
   184  0089                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  0091                     	;# 
   189  0092                     	;# 
   190  0093                     	;# 
   191  0094                     	;# 
   192  0098                     	;# 
   193  0099                     	;# 
   194  009C                     	;# 
   195  009D                     	;# 
   196  009E                     	;# 
   197  009F                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  010F                     	;# 
   202  018C                     	;# 
   203  018D                     	;# 
   204  0000                     	;# 
   205  0001                     	;# 
   206  0002                     	;# 
   207  0003                     	;# 
   208  0004                     	;# 
   209  0005                     	;# 
   210  0006                     	;# 
   211  0007                     	;# 
   212  0008                     	;# 
   213  0009                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  000D                     	;# 
   218  000E                     	;# 
   219  000E                     	;# 
   220  000F                     	;# 
   221  0010                     	;# 
   222  0011                     	;# 
   223  0012                     	;# 
   224  0013                     	;# 
   225  0014                     	;# 
   226  0015                     	;# 
   227  0015                     	;# 
   228  0016                     	;# 
   229  0017                     	;# 
   230  0018                     	;# 
   231  0019                     	;# 
   232  001A                     	;# 
   233  001B                     	;# 
   234  001B                     	;# 
   235  001C                     	;# 
   236  001D                     	;# 
   237  001E                     	;# 
   238  001F                     	;# 
   239  0081                     	;# 
   240  0085                     	;# 
   241  0086                     	;# 
   242  0087                     	;# 
   243  0088                     	;# 
   244  0089                     	;# 
   245  008C                     	;# 
   246  008D                     	;# 
   247  008E                     	;# 
   248  0091                     	;# 
   249  0092                     	;# 
   250  0093                     	;# 
   251  0094                     	;# 
   252  0098                     	;# 
   253  0099                     	;# 
   254  009C                     	;# 
   255  009D                     	;# 
   256  009E                     	;# 
   257  009F                     	;# 
   258  010C                     	;# 
   259  010D                     	;# 
   260  010E                     	;# 
   261  010F                     	;# 
   262  018C                     	;# 
   263  018D                     	;# 
   264  0007                     _PORTC	set	7
   265  0008                     _PORTD	set	8
   266  0009                     _PORTE	set	9
   267  001A                     _RCREG	set	26
   268  0018                     _RCSTA	set	24
   269  0013                     _SSPBUF	set	19
   270  0014                     _SSPCON	set	20
   271  0001                     _TMR0	set	1
   272  0019                     _TXREG	set	25
   273  005F                     _GIE	set	95
   274  005E                     _PEIE	set	94
   275  0030                     _RB0	set	48
   276  003A                     _RC2	set	58
   277  0065                     _RCIF	set	101
   278  0048                     _RE0	set	72
   279  0049                     _RE1	set	73
   280  004A                     _RE2	set	74
   281  0063                     _SSPIF	set	99
   282  005D                     _TMR0IE	set	93
   283  005A                     _TMR0IF	set	90
   284  009F                     _ADCON1	set	159
   285  0081                     _OPTION_REG	set	129
   286  0099                     _SPBRG	set	153
   287  0094                     _SSPSTAT	set	148
   288  0086                     _TRISB	set	134
   289  0087                     _TRISC	set	135
   290  0088                     _TRISD	set	136
   291  0089                     _TRISE	set	137
   292  0098                     _TXSTA	set	152
   293  04C1                     _TRMT	set	1217
   294                           
   295                           ; #config settings
   296  0000                     
   297                           	psect	cinit
   298  0015                     start_initialization:	
   299  0015                     __initialization:	
   300                           
   301                           ; Clear objects allocated to BITCOMMON
   302  0015  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   303                           
   304                           ; Clear objects allocated to COMMON
   305  0016  01FA               	clrf	__pbssCOMMON& (0+127)
   306  0017  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   307                           
   308                           ; Clear objects allocated to BANK0
   309  0018  1283               	bcf	3,5	;RP0=0, select bank0
   310  0019  1303               	bcf	3,6	;RP1=0, select bank0
   311  001A  01B8               	clrf	__pbssBANK0& (0+127)
   312  001B  01B9               	clrf	(__pbssBANK0+1)& (0+127)
   313  001C  01BA               	clrf	(__pbssBANK0+2)& (0+127)
   314  001D  01BB               	clrf	(__pbssBANK0+3)& (0+127)
   315  001E  01BC               	clrf	(__pbssBANK0+4)& (0+127)
   316  001F                     end_of_initialization:	
   317                           ;End of C runtime variable initialization code
   318                           
   319  001F                     __end_of__initialization:	
   320  001F  0183               	clrf	3
   321  0020  120A  118A  28BA   	ljmp	_main	;jump to C main() function
   322                           
   323                           	psect	bitbssCOMMON
   324  03E0                     __pbitbssCOMMON:	
   325  03E0                     _FLAG_1000MS:	
   326  03E0                     	ds	1
   327                           
   328                           	psect	bssCOMMON
   329  007A                     __pbssCOMMON:	
   330  007A                     _time_count:	
   331  007A                     	ds	2
   332                           
   333                           	psect	bssBANK0
   334  0038                     __pbssBANK0:	
   335  0038                     _degrees:	
   336  0038                     	ds	2
   337  003A                     _stepCountNeg:	
   338  003A                     	ds	2
   339  003C                     _rxbyte:	
   340  003C                     	ds	1
   341                           
   342                           	psect	cstackCOMMON
   343  0070                     __pcstackCOMMON:	
   344  0070                     ?_setupSPI:	
   345  0070                     ?_ser_init:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ?_setupLCD:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ?_spi_transfer:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?_ser_putch:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ?_ser_getch:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?_isr:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ?_main:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_lcdWriteControl:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_lcdWriteData:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?___lwmod:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ___lwmod@divisor:	
   376                           ; 2 bytes @ 0x0
   377                           
   378                           
   379                           ; 2 bytes @ 0x0
   380  0070                     	ds	2
   381  0072                     ___lwmod@dividend:	
   382                           
   383                           ; 2 bytes @ 0x2
   384  0072                     	ds	2
   385  0074                     ??___lwmod:	
   386                           
   387                           ; 1 bytes @ 0x4
   388  0074                     	ds	1
   389  0075                     ___lwmod@counter:	
   390                           
   391                           ; 1 bytes @ 0x5
   392  0075                     	ds	1
   393  0076                     ??_isr:	
   394                           
   395                           ; 1 bytes @ 0x6
   396  0076                     	ds	4
   397                           
   398                           	psect	cstackBANK0
   399  0020                     __pcstackBANK0:	
   400  0020                     ??_setupSPI:	
   401  0020                     ??_ser_init:	
   402                           ; 1 bytes @ 0x0
   403                           
   404  0020                     ??_spi_transfer:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0020                     ??_ser_putch:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0020                     ??_ser_getch:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0020                     ??_lcdWriteControl:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0020                     ??_lcdWriteData:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0020                     ser_putch@c:	
   420                           ; 1 bytes @ 0x0
   421                           
   422                           
   423                           ; 1 bytes @ 0x0
   424  0020                     	ds	1
   425  0021                     spi_transfer@temp:	
   426  0021                     ser_getch@rxbyte:	
   427                           ; 1 bytes @ 0x1
   428                           
   429                           
   430                           ; 1 bytes @ 0x1
   431  0021                     	ds	1
   432  0022                     lcdWriteControl@databyte:	
   433  0022                     lcdWriteData@databyte:	
   434                           ; 1 bytes @ 0x2
   435                           
   436  0022                     spi_transfer@data:	
   437                           ; 1 bytes @ 0x2
   438                           
   439                           
   440                           ; 1 bytes @ 0x2
   441  0022                     	ds	1
   442  0023                     ??_setupLCD:	
   443  0023                     ?_lcdWriteToDigitBCD:	
   444                           ; 1 bytes @ 0x3
   445                           
   446  0023                     lcdWriteToDigitBCD@data:	
   447                           ; 1 bytes @ 0x3
   448                           
   449                           
   450                           ; 2 bytes @ 0x3
   451  0023                     	ds	2
   452  0025                     ??_lcdWriteToDigitBCD:	
   453  0025                     lcdWriteToDigitBCD@TensDigit:	
   454                           ; 1 bytes @ 0x5
   455                           
   456                           
   457                           ; 2 bytes @ 0x5
   458  0025                     	ds	2
   459  0027                     lcdWriteToDigitBCD@HunsDigit:	
   460                           
   461                           ; 2 bytes @ 0x7
   462  0027                     	ds	2
   463  0029                     lcdWriteToDigitBCD@ThouDigit:	
   464                           
   465                           ; 2 bytes @ 0x9
   466  0029                     	ds	2
   467  002B                     lcdWriteToDigitBCD@TenThouDigit:	
   468                           
   469                           ; 2 bytes @ 0xB
   470  002B                     	ds	2
   471  002D                     lcdWriteToDigitBCD@OnesDigit:	
   472                           
   473                           ; 2 bytes @ 0xD
   474  002D                     	ds	2
   475  002F                     ??_main:	
   476                           
   477                           ; 1 bytes @ 0xF
   478  002F                     	ds	2
   479  0031                     main@highByte:	
   480                           
   481                           ; 2 bytes @ 0x11
   482  0031                     	ds	2
   483  0033                     main@lowByte:	
   484                           
   485                           ; 2 bytes @ 0x13
   486  0033                     	ds	2
   487  0035                     main@dist:	
   488                           
   489                           ; 2 bytes @ 0x15
   490  0035                     	ds	2
   491  0037                     main@controlByte:	
   492                           
   493                           ; 1 bytes @ 0x17
   494  0037                     	ds	1
   495                           
   496                           	psect	maintext
   497  00BA                     __pmaintext:	
   498 ;;
   499 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   500 ;;
   501 ;; *************** function _main *****************
   502 ;; Defined at:
   503 ;;		line 36 in file "main.c"
   504 ;; Parameters:    Size  Location     Type
   505 ;;		None
   506 ;; Auto vars:     Size  Location     Type
   507 ;;  dist            2   21[BANK0 ] int 
   508 ;;  lowByte         2   19[BANK0 ] int 
   509 ;;  highByte        2   17[BANK0 ] int 
   510 ;;  controlByte     1   23[BANK0 ] unsigned char 
   511 ;; Return value:  Size  Location     Type
   512 ;;                  1    wreg      void 
   513 ;; Registers used:
   514 ;;		wreg, status,2, status,0, pclath, cstack
   515 ;; Tracked objects:
   516 ;;		On entry : B00/0
   517 ;;		On exit  : 0/0
   518 ;;		Unchanged: 0/0
   519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   520 ;;      Params:         0       0       0       0       0
   521 ;;      Locals:         0       7       0       0       0
   522 ;;      Temps:          0       2       0       0       0
   523 ;;      Totals:         0       9       0       0       0
   524 ;;Total ram usage:        9 bytes
   525 ;; Hardware stack levels required when called:    4
   526 ;; This function calls:
   527 ;;		_lcdWriteToDigitBCD
   528 ;;		_ser_getch
   529 ;;		_ser_init
   530 ;;		_ser_putch
   531 ;;		_setupLCD
   532 ;;		_setupSPI
   533 ;;		_spi_transfer
   534 ;; This function is called by:
   535 ;;		Startup code after reset
   536 ;; This function uses a non-reentrant model
   537 ;;
   538                           
   539                           
   540                           ;psect for function _main
   541  00BA                     _main:	
   542                           
   543                           ;main.c: 37: signed int highByte = 0;
   544                           
   545                           ;incstack = 0
   546                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   547  00BA  1283               	bcf	3,5	;RP0=0, select bank0
   548  00BB  1303               	bcf	3,6	;RP1=0, select bank0
   549  00BC  01B1               	clrf	main@highByte
   550  00BD  01B2               	clrf	main@highByte+1
   551                           
   552                           ;main.c: 38: signed int lowByte = 0;
   553  00BE  01B3               	clrf	main@lowByte
   554  00BF  01B4               	clrf	main@lowByte+1
   555                           
   556                           ;main.c: 39: signed int dist = 0;
   557  00C0  01B5               	clrf	main@dist
   558  00C1  01B6               	clrf	main@dist+1
   559                           
   560                           ;main.c: 42: setupSPI();
   561  00C2  120A  118A  21CC  120A  118A  	fcall	_setupSPI
   562                           
   563                           ;main.c: 43: ser_init();
   564  00C7  120A  118A  221A  120A  118A  	fcall	_ser_init
   565                           
   566                           ;main.c: 44: setupLCD();
   567  00CC  120A  118A  21A3  120A  118A  	fcall	_setupLCD
   568                           
   569                           ;main.c: 45: unsigned char controlByte = 0b00001101;
   570  00D1  300D               	movlw	13
   571  00D2  1283               	bcf	3,5	;RP0=0, select bank0
   572  00D3  1303               	bcf	3,6	;RP1=0, select bank0
   573  00D4  00AF               	movwf	??_main
   574  00D5  082F               	movf	??_main,w
   575  00D6  00B7               	movwf	main@controlByte
   576                           
   577                           ;main.c: 46: spi_transfer(controlByte);
   578  00D7  0837               	movf	main@controlByte,w
   579  00D8  120A  118A  220B  120A  118A  	fcall	_spi_transfer
   580                           
   581                           ;main.c: 48: ser_putch(128);
   582  00DD  3080               	movlw	128
   583  00DE  120A  118A  2229  120A  118A  	fcall	_ser_putch
   584                           
   585                           ;main.c: 49: ser_putch(132);
   586  00E3  3084               	movlw	132
   587  00E4  120A  118A  2229  120A  118A  	fcall	_ser_putch
   588                           
   589                           ;main.c: 51: ser_putch(136);
   590  00E9  3088               	movlw	136
   591  00EA  120A  118A  2229  120A  118A  	fcall	_ser_putch
   592                           
   593                           ;main.c: 52: ser_putch(4);
   594  00EF  3004               	movlw	4
   595  00F0  120A  118A  2229  120A  118A  	fcall	_ser_putch
   596                           
   597                           ;main.c: 54: ser_putch(142);
   598  00F5  308E               	movlw	142
   599  00F6  120A  118A  2229  120A  118A  	fcall	_ser_putch
   600                           
   601                           ;main.c: 55: ser_putch(19);
   602  00FB  3013               	movlw	19
   603  00FC  120A  118A  2229  120A  118A  	fcall	_ser_putch
   604                           
   605                           ;main.c: 57: ser_getch();
   606  0101  120A  118A  2235  120A  118A  	fcall	_ser_getch
   607                           
   608                           ;main.c: 58: highByte = rxbyte;
   609  0106  1283               	bcf	3,5	;RP0=0, select bank0
   610  0107  1303               	bcf	3,6	;RP1=0, select bank0
   611  0108  083C               	movf	_rxbyte,w
   612  0109  00AF               	movwf	??_main
   613  010A  01B0               	clrf	??_main+1
   614  010B  082F               	movf	??_main,w
   615  010C  00B1               	movwf	main@highByte
   616  010D  0830               	movf	??_main+1,w
   617  010E  00B2               	movwf	main@highByte+1
   618                           
   619                           ;main.c: 59: ser_getch();
   620  010F  120A  118A  2235  120A  118A  	fcall	_ser_getch
   621                           
   622                           ;main.c: 60: lowByte = rxbyte;
   623  0114  1283               	bcf	3,5	;RP0=0, select bank0
   624  0115  1303               	bcf	3,6	;RP1=0, select bank0
   625  0116  083C               	movf	_rxbyte,w
   626  0117  00AF               	movwf	??_main
   627  0118  01B0               	clrf	??_main+1
   628  0119  082F               	movf	??_main,w
   629  011A  00B3               	movwf	main@lowByte
   630  011B  0830               	movf	??_main+1,w
   631  011C  00B4               	movwf	main@lowByte+1
   632                           
   633                           ;main.c: 62: dist = (4*highByte + lowByte);
   634  011D  0832               	movf	main@highByte+1,w
   635  011E  00B0               	movwf	??_main+1
   636  011F  0831               	movf	main@highByte,w
   637  0120  00AF               	movwf	??_main
   638  0121  1003               	clrc
   639  0122  0DAF               	rlf	??_main,f
   640  0123  0DB0               	rlf	??_main+1,f
   641  0124  1003               	clrc
   642  0125  0DAF               	rlf	??_main,f
   643  0126  0DB0               	rlf	??_main+1,f
   644  0127  0833               	movf	main@lowByte,w
   645  0128  072F               	addwf	??_main,w
   646  0129  00B5               	movwf	main@dist
   647  012A  0834               	movf	main@lowByte+1,w
   648  012B  1803               	skipnc
   649  012C  0A34               	incf	main@lowByte+1,w
   650  012D  0730               	addwf	??_main+1,w
   651  012E  00B6               	movwf	main@dist+1
   652                           
   653                           ;main.c: 64: lcdWriteToDigitBCD(dist);
   654  012F  0836               	movf	main@dist+1,w
   655  0130  00A4               	movwf	lcdWriteToDigitBCD@data+1
   656  0131  0835               	movf	main@dist,w
   657  0132  00A3               	movwf	lcdWriteToDigitBCD@data
   658  0133  120A  118A  2023  120A  118A  	fcall	_lcdWriteToDigitBCD
   659  0138                     l1046:	
   660                           ;main.c: 67: while(1){
   661                           
   662                           
   663                           ;main.c: 68: if(FLAG_1000MS){
   664  0138  1C7C               	btfss	_FLAG_1000MS/(0+8),_FLAG_1000MS& (0+7)	;volatile
   665  0139  2938               	goto	l1046
   666                           
   667                           ;main.c: 69: RB0 = !RB0;
   668  013A  3001               	movlw	1
   669  013B  1283               	bcf	3,5	;RP0=0, select bank0
   670  013C  1303               	bcf	3,6	;RP1=0, select bank0
   671  013D  0686               	xorwf	6,f
   672                           
   673                           ;main.c: 70: FLAG_1000MS = 0;
   674  013E  107C               	bcf	_FLAG_1000MS/(0+8),_FLAG_1000MS& (0+7)	;volatile
   675  013F  2938               	goto	l1046
   676  0140                     __end_of_main:	
   677                           
   678                           	psect	text1
   679  020B                     __ptext1:	
   680 ;; *************** function _spi_transfer *****************
   681 ;; Defined at:
   682 ;;		line 23 in file "SPI.c"
   683 ;; Parameters:    Size  Location     Type
   684 ;;  data            1    wreg     unsigned char 
   685 ;; Auto vars:     Size  Location     Type
   686 ;;  data            1    2[BANK0 ] unsigned char 
   687 ;;  temp            1    1[BANK0 ] unsigned char 
   688 ;; Return value:  Size  Location     Type
   689 ;;                  1    wreg      unsigned char 
   690 ;; Registers used:
   691 ;;		wreg, status,2
   692 ;; Tracked objects:
   693 ;;		On entry : 0/0
   694 ;;		On exit  : 0/0
   695 ;;		Unchanged: 0/0
   696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   697 ;;      Params:         0       0       0       0       0
   698 ;;      Locals:         0       2       0       0       0
   699 ;;      Temps:          0       1       0       0       0
   700 ;;      Totals:         0       3       0       0       0
   701 ;;Total ram usage:        3 bytes
   702 ;; Hardware stack levels used:    1
   703 ;; Hardware stack levels required when called:    2
   704 ;; This function calls:
   705 ;;		Nothing
   706 ;; This function is called by:
   707 ;;		_main
   708 ;; This function uses a non-reentrant model
   709 ;;
   710                           
   711                           
   712                           ;psect for function _spi_transfer
   713  020B                     _spi_transfer:	
   714                           
   715                           ;incstack = 0
   716                           ; Regs used in _spi_transfer: [wreg+status,2]
   717                           ;spi_transfer@data stored from wreg
   718  020B  1283               	bcf	3,5	;RP0=0, select bank0
   719  020C  1303               	bcf	3,6	;RP1=0, select bank0
   720  020D  00A2               	movwf	spi_transfer@data
   721                           
   722                           ;SPI.c: 24: unsigned char temp = 0;
   723  020E  01A1               	clrf	spi_transfer@temp
   724                           
   725                           ;SPI.c: 26: SSPIF = 0;
   726  020F  118C               	bcf	12,3	;volatile
   727                           
   728                           ;SPI.c: 27: SSPBUF = data;
   729  0210  0822               	movf	spi_transfer@data,w
   730  0211  0093               	movwf	19	;volatile
   731  0212                     l134:	
   732                           ;SPI.c: 29: while (SSPIF == 0);
   733                           
   734  0212  1D8C               	btfss	12,3	;volatile
   735  0213  2A12               	goto	l134
   736                           
   737                           ;SPI.c: 30: temp = SSPBUF;
   738  0214  0813               	movf	19,w	;volatile
   739  0215  00A0               	movwf	??_spi_transfer
   740  0216  0820               	movf	??_spi_transfer,w
   741  0217  00A1               	movwf	spi_transfer@temp
   742                           
   743                           ;SPI.c: 31: SSPIF = 0;
   744  0218  118C               	bcf	12,3	;volatile
   745  0219  0008               	return
   746  021A                     __end_of_spi_transfer:	
   747                           ;SPI.c: 33: return temp;
   748                           ;	Return value of _spi_transfer is never used
   749                           
   750                           
   751                           	psect	text2
   752  01CC                     __ptext2:	
   753 ;; *************** function _setupSPI *****************
   754 ;; Defined at:
   755 ;;		line 4 in file "SPI.c"
   756 ;; Parameters:    Size  Location     Type
   757 ;;		None
   758 ;; Auto vars:     Size  Location     Type
   759 ;;		None
   760 ;; Return value:  Size  Location     Type
   761 ;;                  1    wreg      void 
   762 ;; Registers used:
   763 ;;		wreg, status,2
   764 ;; Tracked objects:
   765 ;;		On entry : 0/0
   766 ;;		On exit  : 0/0
   767 ;;		Unchanged: 0/0
   768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   769 ;;      Params:         0       0       0       0       0
   770 ;;      Locals:         0       0       0       0       0
   771 ;;      Temps:          0       0       0       0       0
   772 ;;      Totals:         0       0       0       0       0
   773 ;;Total ram usage:        0 bytes
   774 ;; Hardware stack levels used:    1
   775 ;; Hardware stack levels required when called:    2
   776 ;; This function calls:
   777 ;;		Nothing
   778 ;; This function is called by:
   779 ;;		_main
   780 ;; This function uses a non-reentrant model
   781 ;;
   782                           
   783                           
   784                           ;psect for function _setupSPI
   785  01CC                     _setupSPI:	
   786                           
   787                           ;SPI.c: 6: TRISB = 0b00000000;
   788                           
   789                           ;incstack = 0
   790                           ; Regs used in _setupSPI: [wreg+status,2]
   791  01CC  1683               	bsf	3,5	;RP0=1, select bank1
   792  01CD  1303               	bcf	3,6	;RP1=0, select bank1
   793  01CE  0186               	clrf	6	;volatile
   794                           
   795                           ;SPI.c: 8: SSPSTAT = 0b01000000;
   796  01CF  3040               	movlw	64
   797  01D0  0094               	movwf	20	;volatile
   798                           
   799                           ;SPI.c: 9: SSPCON = 0b00100000;
   800  01D1  3020               	movlw	32
   801  01D2  1283               	bcf	3,5	;RP0=0, select bank0
   802  01D3  1303               	bcf	3,6	;RP1=0, select bank0
   803  01D4  0094               	movwf	20	;volatile
   804                           
   805                           ;SPI.c: 10: TRISC = 0b11010000;
   806  01D5  30D0               	movlw	208
   807  01D6  1683               	bsf	3,5	;RP0=1, select bank1
   808  01D7  1303               	bcf	3,6	;RP1=0, select bank1
   809  01D8  0087               	movwf	7	;volatile
   810                           
   811                           ;SPI.c: 11: PORTC = 0b00000011;
   812  01D9  3003               	movlw	3
   813  01DA  1283               	bcf	3,5	;RP0=0, select bank0
   814  01DB  1303               	bcf	3,6	;RP1=0, select bank0
   815  01DC  0087               	movwf	7	;volatile
   816                           
   817                           ;SPI.c: 14: OPTION_REG = 0b00000100;
   818  01DD  3004               	movlw	4
   819  01DE  1683               	bsf	3,5	;RP0=1, select bank1
   820  01DF  1303               	bcf	3,6	;RP1=0, select bank1
   821  01E0  0081               	movwf	1	;volatile
   822                           
   823                           ;SPI.c: 16: TMR0IE = 1;
   824  01E1  168B               	bsf	11,5	;volatile
   825                           
   826                           ;SPI.c: 19: (GIE = 1);
   827  01E2  178B               	bsf	11,7	;volatile
   828  01E3  0008               	return
   829  01E4                     __end_of_setupSPI:	
   830                           
   831                           	psect	text3
   832  01A3                     __ptext3:	
   833 ;; *************** function _setupLCD *****************
   834 ;; Defined at:
   835 ;;		line 86 in file "LCD.c"
   836 ;; Parameters:    Size  Location     Type
   837 ;;		None
   838 ;; Auto vars:     Size  Location     Type
   839 ;;		None
   840 ;; Return value:  Size  Location     Type
   841 ;;                  1    wreg      void 
   842 ;; Registers used:
   843 ;;		wreg, status,2, status,0, pclath, cstack
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   849 ;;      Params:         0       0       0       0       0
   850 ;;      Locals:         0       0       0       0       0
   851 ;;      Temps:          0       0       0       0       0
   852 ;;      Totals:         0       0       0       0       0
   853 ;;Total ram usage:        0 bytes
   854 ;; Hardware stack levels used:    1
   855 ;; Hardware stack levels required when called:    3
   856 ;; This function calls:
   857 ;;		_lcdWriteControl
   858 ;; This function is called by:
   859 ;;		_main
   860 ;; This function uses a non-reentrant model
   861 ;;
   862                           
   863                           
   864                           ;psect for function _setupLCD
   865  01A3                     _setupLCD:	
   866                           
   867                           ;LCD.c: 88: ADCON1 = 0b00000010;
   868                           
   869                           ;incstack = 0
   870                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
   871  01A3  3002               	movlw	2
   872  01A4  1683               	bsf	3,5	;RP0=1, select bank1
   873  01A5  1303               	bcf	3,6	;RP1=0, select bank1
   874  01A6  009F               	movwf	31	;volatile
   875                           
   876                           ;LCD.c: 90: PORTD = 0;
   877  01A7  1283               	bcf	3,5	;RP0=0, select bank0
   878  01A8  1303               	bcf	3,6	;RP1=0, select bank0
   879  01A9  0188               	clrf	8	;volatile
   880                           
   881                           ;LCD.c: 91: PORTE = 0;
   882  01AA  0189               	clrf	9	;volatile
   883                           
   884                           ;LCD.c: 93: TRISD = 0b00000000;
   885  01AB  1683               	bsf	3,5	;RP0=1, select bank1
   886  01AC  1303               	bcf	3,6	;RP1=0, select bank1
   887  01AD  0188               	clrf	8	;volatile
   888                           
   889                           ;LCD.c: 94: TRISE = 0b00000000;
   890  01AE  0189               	clrf	9	;volatile
   891                           
   892                           ;LCD.c: 97: lcdWriteControl(0b00000001);
   893  01AF  3001               	movlw	1
   894  01B0  120A  118A  21E4  120A  118A  	fcall	_lcdWriteControl
   895                           
   896                           ;LCD.c: 98: lcdWriteControl(0b00111000);
   897  01B5  3038               	movlw	56
   898  01B6  120A  118A  21E4  120A  118A  	fcall	_lcdWriteControl
   899                           
   900                           ;LCD.c: 99: lcdWriteControl(0b00001100);
   901  01BB  300C               	movlw	12
   902  01BC  120A  118A  21E4  120A  118A  	fcall	_lcdWriteControl
   903                           
   904                           ;LCD.c: 100: lcdWriteControl(0b00000110);
   905  01C1  3006               	movlw	6
   906  01C2  120A  118A  21E4  120A  118A  	fcall	_lcdWriteControl
   907                           
   908                           ;LCD.c: 101: lcdWriteControl(0b00000010);
   909  01C7  3002               	movlw	2
   910  01C8  120A  118A  21E4   	fcall	_lcdWriteControl
   911  01CB  0008               	return
   912  01CC                     __end_of_setupLCD:	
   913                           
   914                           	psect	text4
   915  01E4                     __ptext4:	
   916 ;; *************** function _lcdWriteControl *****************
   917 ;; Defined at:
   918 ;;		line 9 in file "LCD.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;  databyte        1    wreg     unsigned char 
   921 ;; Auto vars:     Size  Location     Type
   922 ;;  databyte        1    2[BANK0 ] unsigned char 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   932 ;;      Params:         0       0       0       0       0
   933 ;;      Locals:         0       1       0       0       0
   934 ;;      Temps:          0       2       0       0       0
   935 ;;      Totals:         0       3       0       0       0
   936 ;;Total ram usage:        3 bytes
   937 ;; Hardware stack levels used:    1
   938 ;; Hardware stack levels required when called:    2
   939 ;; This function calls:
   940 ;;		Nothing
   941 ;; This function is called by:
   942 ;;		_setupLCD
   943 ;;		_lcdSetCursor
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947                           
   948                           ;psect for function _lcdWriteControl
   949  01E4                     _lcdWriteControl:	
   950                           
   951                           ;incstack = 0
   952                           ; Regs used in _lcdWriteControl: [wreg]
   953                           ;lcdWriteControl@databyte stored from wreg
   954  01E4  1283               	bcf	3,5	;RP0=0, select bank0
   955  01E5  1303               	bcf	3,6	;RP1=0, select bank0
   956  01E6  00A2               	movwf	lcdWriteControl@databyte
   957                           
   958                           ;LCD.c: 10: RE2 = 0;
   959  01E7  1109               	bcf	9,2	;volatile
   960                           
   961                           ;LCD.c: 11: RE1 = 0;
   962  01E8  1089               	bcf	9,1	;volatile
   963                           
   964                           ;LCD.c: 12: RE0 = 0;
   965  01E9  1009               	bcf	9,0	;volatile
   966                           
   967                           ;LCD.c: 13: PORTD = databyte;
   968  01EA  0822               	movf	lcdWriteControl@databyte,w
   969  01EB  0088               	movwf	8	;volatile
   970                           
   971                           ;LCD.c: 14: RE2 = 1;
   972  01EC  1509               	bsf	9,2	;volatile
   973                           
   974                           ;LCD.c: 15: RE2 = 0;
   975  01ED  1109               	bcf	9,2	;volatile
   976                           
   977                           ;LCD.c: 16: _delay((unsigned long)((2)*(20000000/4000.0)));
   978  01EE  300D               	movlw	13
   979  01EF  00A1               	movwf	??_lcdWriteControl+1
   980  01F0  30FB               	movlw	251
   981  01F1  00A0               	movwf	??_lcdWriteControl
   982  01F2                     u397:	
   983  01F2  0BA0               	decfsz	??_lcdWriteControl,f
   984  01F3  29F2               	goto	u397
   985  01F4  0BA1               	decfsz	??_lcdWriteControl+1,f
   986  01F5  29F2               	goto	u397
   987  01F6  29F7               	nop2
   988  01F7  0008               	return
   989  01F8                     __end_of_lcdWriteControl:	
   990                           
   991                           	psect	text5
   992  0229                     __ptext5:	
   993 ;; *************** function _ser_putch *****************
   994 ;; Defined at:
   995 ;;		line 28 in file "ser.c"
   996 ;; Parameters:    Size  Location     Type
   997 ;;  c               1    wreg     unsigned char 
   998 ;; Auto vars:     Size  Location     Type
   999 ;;  c               1    0[BANK0 ] unsigned char 
  1000 ;; Return value:  Size  Location     Type
  1001 ;;                  1    wreg      void 
  1002 ;; Registers used:
  1003 ;;		wreg
  1004 ;; Tracked objects:
  1005 ;;		On entry : 0/0
  1006 ;;		On exit  : 0/0
  1007 ;;		Unchanged: 0/0
  1008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1009 ;;      Params:         0       0       0       0       0
  1010 ;;      Locals:         0       1       0       0       0
  1011 ;;      Temps:          0       0       0       0       0
  1012 ;;      Totals:         0       1       0       0       0
  1013 ;;Total ram usage:        1 bytes
  1014 ;; Hardware stack levels used:    1
  1015 ;; Hardware stack levels required when called:    2
  1016 ;; This function calls:
  1017 ;;		Nothing
  1018 ;; This function is called by:
  1019 ;;		_main
  1020 ;; This function uses a non-reentrant model
  1021 ;;
  1022                           
  1023                           
  1024                           ;psect for function _ser_putch
  1025  0229                     _ser_putch:	
  1026                           
  1027                           ;incstack = 0
  1028                           ; Regs used in _ser_putch: [wreg]
  1029                           ;ser_putch@c stored from wreg
  1030  0229  1283               	bcf	3,5	;RP0=0, select bank0
  1031  022A  1303               	bcf	3,6	;RP1=0, select bank0
  1032  022B  00A0               	movwf	ser_putch@c
  1033  022C                     l163:	
  1034                           ;ser.c: 29: while(!TRMT);
  1035                           
  1036  022C  1683               	bsf	3,5	;RP0=1, select bank1
  1037  022D  1303               	bcf	3,6	;RP1=0, select bank1
  1038  022E  1C98               	btfss	24,1	;volatile
  1039  022F  2A2C               	goto	l163
  1040                           
  1041                           ;ser.c: 30: TXREG=c;
  1042  0230  1283               	bcf	3,5	;RP0=0, select bank0
  1043  0231  1303               	bcf	3,6	;RP1=0, select bank0
  1044  0232  0820               	movf	ser_putch@c,w
  1045  0233  0099               	movwf	25	;volatile
  1046  0234  0008               	return
  1047  0235                     __end_of_ser_putch:	
  1048                           
  1049                           	psect	text6
  1050  021A                     __ptext6:	
  1051 ;; *************** function _ser_init *****************
  1052 ;; Defined at:
  1053 ;;		line 4 in file "ser.c"
  1054 ;; Parameters:    Size  Location     Type
  1055 ;;		None
  1056 ;; Auto vars:     Size  Location     Type
  1057 ;;		None
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  1    wreg      void 
  1060 ;; Registers used:
  1061 ;;		wreg
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1067 ;;      Params:         0       0       0       0       0
  1068 ;;      Locals:         0       0       0       0       0
  1069 ;;      Temps:          0       0       0       0       0
  1070 ;;      Totals:         0       0       0       0       0
  1071 ;;Total ram usage:        0 bytes
  1072 ;; Hardware stack levels used:    1
  1073 ;; Hardware stack levels required when called:    2
  1074 ;; This function calls:
  1075 ;;		Nothing
  1076 ;; This function is called by:
  1077 ;;		_main
  1078 ;; This function uses a non-reentrant model
  1079 ;;
  1080                           
  1081                           
  1082                           ;psect for function _ser_init
  1083  021A                     _ser_init:	
  1084                           
  1085                           ;ser.c: 6: TXSTA = 0b00100100;
  1086                           
  1087                           ;incstack = 0
  1088                           ; Regs used in _ser_init: [wreg]
  1089  021A  3024               	movlw	36
  1090  021B  1683               	bsf	3,5	;RP0=1, select bank1
  1091  021C  1303               	bcf	3,6	;RP1=0, select bank1
  1092  021D  0098               	movwf	24	;volatile
  1093                           
  1094                           ;ser.c: 7: RCSTA = 0b10011000;
  1095  021E  3098               	movlw	152
  1096  021F  1283               	bcf	3,5	;RP0=0, select bank0
  1097  0220  1303               	bcf	3,6	;RP1=0, select bank0
  1098  0221  0098               	movwf	24	;volatile
  1099                           
  1100                           ;ser.c: 22: SPBRG = 20;
  1101  0222  3014               	movlw	20
  1102  0223  1683               	bsf	3,5	;RP0=1, select bank1
  1103  0224  1303               	bcf	3,6	;RP1=0, select bank1
  1104  0225  0099               	movwf	25	;volatile
  1105                           
  1106                           ;ser.c: 24: PEIE = 1;
  1107  0226  170B               	bsf	11,6	;volatile
  1108                           
  1109                           ;ser.c: 25: (GIE = 1);
  1110  0227  178B               	bsf	11,7	;volatile
  1111  0228  0008               	return
  1112  0229                     __end_of_ser_init:	
  1113                           
  1114                           	psect	text7
  1115  0235                     __ptext7:	
  1116 ;; *************** function _ser_getch *****************
  1117 ;; Defined at:
  1118 ;;		line 33 in file "ser.c"
  1119 ;; Parameters:    Size  Location     Type
  1120 ;;		None
  1121 ;; Auto vars:     Size  Location     Type
  1122 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  1123 ;; Return value:  Size  Location     Type
  1124 ;;                  1    wreg      unsigned char 
  1125 ;; Registers used:
  1126 ;;		wreg
  1127 ;; Tracked objects:
  1128 ;;		On entry : 0/0
  1129 ;;		On exit  : 0/0
  1130 ;;		Unchanged: 0/0
  1131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1132 ;;      Params:         0       0       0       0       0
  1133 ;;      Locals:         0       1       0       0       0
  1134 ;;      Temps:          0       1       0       0       0
  1135 ;;      Totals:         0       2       0       0       0
  1136 ;;Total ram usage:        2 bytes
  1137 ;; Hardware stack levels used:    1
  1138 ;; Hardware stack levels required when called:    2
  1139 ;; This function calls:
  1140 ;;		Nothing
  1141 ;; This function is called by:
  1142 ;;		_main
  1143 ;; This function uses a non-reentrant model
  1144 ;;
  1145                           
  1146                           
  1147                           ;psect for function _ser_getch
  1148  0235                     _ser_getch:	
  1149  0235                     l169:	
  1150                           ;ser.c: 34: while(!RCIF);
  1151                           
  1152                           ;incstack = 0
  1153                           ; Regs used in _ser_getch: [wreg]
  1154                           
  1155  0235  1283               	bcf	3,5	;RP0=0, select bank0
  1156  0236  1303               	bcf	3,6	;RP1=0, select bank0
  1157  0237  1E8C               	btfss	12,5	;volatile
  1158  0238  2A35               	goto	l169
  1159                           
  1160                           ;ser.c: 35: unsigned char rxbyte = RCREG;
  1161  0239  081A               	movf	26,w	;volatile
  1162  023A  00A0               	movwf	??_ser_getch
  1163  023B  0820               	movf	??_ser_getch,w
  1164  023C  00A1               	movwf	ser_getch@rxbyte
  1165  023D  0008               	return
  1166  023E                     __end_of_ser_getch:	
  1167                           ;ser.c: 36: return rxbyte;
  1168                           ;	Return value of _ser_getch is never used
  1169                           
  1170                           
  1171                           	psect	text8
  1172  0023                     __ptext8:	
  1173 ;; *************** function _lcdWriteToDigitBCD *****************
  1174 ;; Defined at:
  1175 ;;		line 42 in file "LCD.c"
  1176 ;; Parameters:    Size  Location     Type
  1177 ;;  data            2    3[BANK0 ] unsigned int 
  1178 ;; Auto vars:     Size  Location     Type
  1179 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  1180 ;;  TenThouDigit    2   11[BANK0 ] unsigned int 
  1181 ;;  ThouDigit       2    9[BANK0 ] unsigned int 
  1182 ;;  HunsDigit       2    7[BANK0 ] unsigned int 
  1183 ;;  TensDigit       2    5[BANK0 ] unsigned int 
  1184 ;; Return value:  Size  Location     Type
  1185 ;;                  1    wreg      void 
  1186 ;; Registers used:
  1187 ;;		wreg, status,2, status,0, pclath, cstack
  1188 ;; Tracked objects:
  1189 ;;		On entry : 0/0
  1190 ;;		On exit  : 0/0
  1191 ;;		Unchanged: 0/0
  1192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1193 ;;      Params:         0       2       0       0       0
  1194 ;;      Locals:         0      10       0       0       0
  1195 ;;      Temps:          0       0       0       0       0
  1196 ;;      Totals:         0      12       0       0       0
  1197 ;;Total ram usage:       12 bytes
  1198 ;; Hardware stack levels used:    1
  1199 ;; Hardware stack levels required when called:    3
  1200 ;; This function calls:
  1201 ;;		_lcdWriteData
  1202 ;; This function is called by:
  1203 ;;		_main
  1204 ;; This function uses a non-reentrant model
  1205 ;;
  1206                           
  1207                           
  1208                           ;psect for function _lcdWriteToDigitBCD
  1209  0023                     _lcdWriteToDigitBCD:	
  1210                           
  1211                           ;LCD.c: 43: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  1212                           ;LCD.c: 46: OnesDigit = data;
  1213                           
  1214                           ;incstack = 0
  1215                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  1216  0023  1283               	bcf	3,5	;RP0=0, select bank0
  1217  0024  1303               	bcf	3,6	;RP1=0, select bank0
  1218  0025  0824               	movf	lcdWriteToDigitBCD@data+1,w
  1219  0026  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1220  0027  0823               	movf	lcdWriteToDigitBCD@data,w
  1221  0028  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  1222                           
  1223                           ;LCD.c: 47: TensDigit = 0;
  1224  0029  01A5               	clrf	lcdWriteToDigitBCD@TensDigit
  1225  002A  01A6               	clrf	lcdWriteToDigitBCD@TensDigit+1
  1226                           
  1227                           ;LCD.c: 48: HunsDigit = 0;
  1228  002B  01A7               	clrf	lcdWriteToDigitBCD@HunsDigit
  1229  002C  01A8               	clrf	lcdWriteToDigitBCD@HunsDigit+1
  1230                           
  1231                           ;LCD.c: 49: ThouDigit = 0;
  1232  002D  01A9               	clrf	lcdWriteToDigitBCD@ThouDigit
  1233  002E  01AA               	clrf	lcdWriteToDigitBCD@ThouDigit+1
  1234                           
  1235                           ;LCD.c: 50: TenThouDigit = 0;
  1236  002F  01AB               	clrf	lcdWriteToDigitBCD@TenThouDigit
  1237  0030  01AC               	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  1238  0031                     l942:	
  1239                           ;LCD.c: 53: while (OnesDigit >= 10000){
  1240                           
  1241  0031  3027               	movlw	39
  1242  0032  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1243  0033  3010               	movlw	16
  1244  0034  1903               	skipnz
  1245  0035  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1246  0036  1C03               	btfss	3,0
  1247  0037  2855               	goto	l948
  1248                           
  1249                           ;LCD.c: 54: OnesDigit = OnesDigit - 10000;
  1250  0038  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  1251  0039  3EF0               	addlw	240
  1252  003A  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  1253  003B  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1254  003C  1803               	skipnc
  1255  003D  3E01               	addlw	1
  1256  003E  3ED8               	addlw	216
  1257  003F  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1258                           
  1259                           ;LCD.c: 55: TenThouDigit++;
  1260  0040  3001               	movlw	1
  1261  0041  07AB               	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  1262  0042  1803               	skipnc
  1263  0043  0AAC               	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  1264  0044  3000               	movlw	0
  1265  0045  07AC               	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  1266  0046  2831               	goto	l942
  1267  0047                     l944:	
  1268                           ;LCD.c: 56: }
  1269                           ;LCD.c: 58: while (OnesDigit >= 1000){
  1270                           
  1271                           
  1272                           ;LCD.c: 59: OnesDigit = OnesDigit - 1000;
  1273  0047  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  1274  0048  3E18               	addlw	24
  1275  0049  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  1276  004A  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1277  004B  1803               	skipnc
  1278  004C  3E01               	addlw	1
  1279  004D  3EFC               	addlw	252
  1280  004E  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1281                           
  1282                           ;LCD.c: 60: ThouDigit++;
  1283  004F  3001               	movlw	1
  1284  0050  07A9               	addwf	lcdWriteToDigitBCD@ThouDigit,f
  1285  0051  1803               	skipnc
  1286  0052  0AAA               	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  1287  0053  3000               	movlw	0
  1288  0054  07AA               	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  1289  0055                     l948:	
  1290  0055  3003               	movlw	3
  1291  0056  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1292  0057  30E8               	movlw	232
  1293  0058  1903               	skipnz
  1294  0059  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1295  005A  1C03               	btfss	3,0
  1296  005B  286B               	goto	l954
  1297  005C  2847               	goto	l944
  1298  005D                     l950:	
  1299                           ;LCD.c: 61: }
  1300                           ;LCD.c: 63: while (OnesDigit >= 100){
  1301                           
  1302                           
  1303                           ;LCD.c: 64: OnesDigit = OnesDigit - 100;
  1304  005D  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  1305  005E  3E9C               	addlw	156
  1306  005F  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  1307  0060  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1308  0061  1803               	skipnc
  1309  0062  3E01               	addlw	1
  1310  0063  3EFF               	addlw	255
  1311  0064  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1312                           
  1313                           ;LCD.c: 65: HunsDigit++;
  1314  0065  3001               	movlw	1
  1315  0066  07A7               	addwf	lcdWriteToDigitBCD@HunsDigit,f
  1316  0067  1803               	skipnc
  1317  0068  0AA8               	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  1318  0069  3000               	movlw	0
  1319  006A  07A8               	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  1320  006B                     l954:	
  1321  006B  3000               	movlw	0
  1322  006C  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1323  006D  3064               	movlw	100
  1324  006E  1903               	skipnz
  1325  006F  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1326  0070  1C03               	btfss	3,0
  1327  0071  2881               	goto	l960
  1328  0072  285D               	goto	l950
  1329  0073                     l956:	
  1330                           ;LCD.c: 66: }
  1331                           ;LCD.c: 68: while (OnesDigit >= 10){
  1332                           
  1333                           
  1334                           ;LCD.c: 69: OnesDigit = OnesDigit - 10;
  1335  0073  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  1336  0074  3EF6               	addlw	246
  1337  0075  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  1338  0076  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1339  0077  1803               	skipnc
  1340  0078  3E01               	addlw	1
  1341  0079  3EFF               	addlw	255
  1342  007A  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1343                           
  1344                           ;LCD.c: 70: TensDigit++;
  1345  007B  3001               	movlw	1
  1346  007C  07A5               	addwf	lcdWriteToDigitBCD@TensDigit,f
  1347  007D  1803               	skipnc
  1348  007E  0AA6               	incf	lcdWriteToDigitBCD@TensDigit+1,f
  1349  007F  3000               	movlw	0
  1350  0080  07A6               	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  1351  0081                     l960:	
  1352  0081  3000               	movlw	0
  1353  0082  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1354  0083  300A               	movlw	10
  1355  0084  1903               	skipnz
  1356  0085  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1357  0086  1803               	skipnc
  1358  0087  2873               	goto	l956
  1359                           
  1360                           ;LCD.c: 71: }
  1361                           ;LCD.c: 73: if (TenThouDigit > 0)
  1362  0088  082B               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  1363  0089  042C               	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  1364  008A  1903               	btfsc	3,2
  1365  008B  2893               	goto	l966
  1366                           
  1367                           ;LCD.c: 74: lcdWriteData((unsigned int)TenThouDigit + 48);
  1368  008C  082B               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  1369  008D  3E30               	addlw	48
  1370  008E  120A  118A  21F8  120A  118A  	fcall	_lcdWriteData
  1371  0093                     l966:	
  1372                           
  1373                           ;LCD.c: 76: if (ThouDigit > 0)
  1374  0093  1283               	bcf	3,5	;RP0=0, select bank0
  1375  0094  1303               	bcf	3,6	;RP1=0, select bank0
  1376  0095  0829               	movf	lcdWriteToDigitBCD@ThouDigit,w
  1377  0096  042A               	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  1378  0097  1903               	btfsc	3,2
  1379  0098  28A0               	goto	l102
  1380                           
  1381                           ;LCD.c: 77: lcdWriteData((unsigned int)ThouDigit + 48);
  1382  0099  0829               	movf	lcdWriteToDigitBCD@ThouDigit,w
  1383  009A  3E30               	addlw	48
  1384  009B  120A  118A  21F8  120A  118A  	fcall	_lcdWriteData
  1385  00A0                     l102:	
  1386                           
  1387                           ;LCD.c: 79: lcdWriteData((unsigned int)HunsDigit + 48);
  1388  00A0  1283               	bcf	3,5	;RP0=0, select bank0
  1389  00A1  1303               	bcf	3,6	;RP1=0, select bank0
  1390  00A2  0827               	movf	lcdWriteToDigitBCD@HunsDigit,w
  1391  00A3  3E30               	addlw	48
  1392  00A4  120A  118A  21F8  120A  118A  	fcall	_lcdWriteData
  1393                           
  1394                           ;LCD.c: 80: lcdWriteData((unsigned int)TensDigit + 48);
  1395  00A9  1283               	bcf	3,5	;RP0=0, select bank0
  1396  00AA  1303               	bcf	3,6	;RP1=0, select bank0
  1397  00AB  0825               	movf	lcdWriteToDigitBCD@TensDigit,w
  1398  00AC  3E30               	addlw	48
  1399  00AD  120A  118A  21F8  120A  118A  	fcall	_lcdWriteData
  1400                           
  1401                           ;LCD.c: 81: lcdWriteData((unsigned int)OnesDigit + 48);
  1402  00B2  1283               	bcf	3,5	;RP0=0, select bank0
  1403  00B3  1303               	bcf	3,6	;RP1=0, select bank0
  1404  00B4  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  1405  00B5  3E30               	addlw	48
  1406  00B6  120A  118A  21F8   	fcall	_lcdWriteData
  1407  00B9  0008               	return
  1408  00BA                     __end_of_lcdWriteToDigitBCD:	
  1409                           
  1410                           	psect	text9
  1411  01F8                     __ptext9:	
  1412 ;; *************** function _lcdWriteData *****************
  1413 ;; Defined at:
  1414 ;;		line 20 in file "LCD.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;  databyte        1    wreg     unsigned char 
  1417 ;; Auto vars:     Size  Location     Type
  1418 ;;  databyte        1    2[BANK0 ] unsigned char 
  1419 ;; Return value:  Size  Location     Type
  1420 ;;                  1    wreg      void 
  1421 ;; Registers used:
  1422 ;;		wreg
  1423 ;; Tracked objects:
  1424 ;;		On entry : 0/0
  1425 ;;		On exit  : 0/0
  1426 ;;		Unchanged: 0/0
  1427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1428 ;;      Params:         0       0       0       0       0
  1429 ;;      Locals:         0       1       0       0       0
  1430 ;;      Temps:          0       2       0       0       0
  1431 ;;      Totals:         0       3       0       0       0
  1432 ;;Total ram usage:        3 bytes
  1433 ;; Hardware stack levels used:    1
  1434 ;; Hardware stack levels required when called:    2
  1435 ;; This function calls:
  1436 ;;		Nothing
  1437 ;; This function is called by:
  1438 ;;		_lcdWriteToDigitBCD
  1439 ;;		_lcdWriteString
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           
  1444                           ;psect for function _lcdWriteData
  1445  01F8                     _lcdWriteData:	
  1446                           
  1447                           ;incstack = 0
  1448                           ; Regs used in _lcdWriteData: [wreg]
  1449                           ;lcdWriteData@databyte stored from wreg
  1450  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  1451  01F9  1303               	bcf	3,6	;RP1=0, select bank0
  1452  01FA  00A2               	movwf	lcdWriteData@databyte
  1453                           
  1454                           ;LCD.c: 21: RE2 = 0;
  1455  01FB  1109               	bcf	9,2	;volatile
  1456                           
  1457                           ;LCD.c: 22: RE1 = 0;
  1458  01FC  1089               	bcf	9,1	;volatile
  1459                           
  1460                           ;LCD.c: 23: RE0 = 1;
  1461  01FD  1409               	bsf	9,0	;volatile
  1462                           
  1463                           ;LCD.c: 24: PORTD = databyte;
  1464  01FE  0822               	movf	lcdWriteData@databyte,w
  1465  01FF  0088               	movwf	8	;volatile
  1466                           
  1467                           ;LCD.c: 25: RE2 = 1;
  1468  0200  1509               	bsf	9,2	;volatile
  1469                           
  1470                           ;LCD.c: 26: RE2 = 0;
  1471  0201  1109               	bcf	9,2	;volatile
  1472                           
  1473                           ;LCD.c: 27: _delay((unsigned long)((1)*(20000000/4000.0)));
  1474  0202  3007               	movlw	7
  1475  0203  00A1               	movwf	??_lcdWriteData+1
  1476  0204  307D               	movlw	125
  1477  0205  00A0               	movwf	??_lcdWriteData
  1478  0206                     u407:	
  1479  0206  0BA0               	decfsz	??_lcdWriteData,f
  1480  0207  2A06               	goto	u407
  1481  0208  0BA1               	decfsz	??_lcdWriteData+1,f
  1482  0209  2A06               	goto	u407
  1483  020A  0008               	return
  1484  020B                     __end_of_lcdWriteData:	
  1485                           
  1486                           	psect	text10
  1487  0172                     __ptext10:	
  1488 ;; *************** function _isr *****************
  1489 ;; Defined at:
  1490 ;;		line 12 in file "main.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;		None
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;		None
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  1    wreg      void 
  1497 ;; Registers used:
  1498 ;;		wreg, status,2, status,0, pclath, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1504 ;;      Params:         0       0       0       0       0
  1505 ;;      Locals:         0       0       0       0       0
  1506 ;;      Temps:          4       0       0       0       0
  1507 ;;      Totals:         4       0       0       0       0
  1508 ;;Total ram usage:        4 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    1
  1511 ;; This function calls:
  1512 ;;		___lwmod
  1513 ;; This function is called by:
  1514 ;;		Interrupt level 1
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           
  1519                           ;psect for function _isr
  1520  0172                     _isr:	
  1521                           
  1522                           ;main.c: 14: if(TMR0IF){
  1523  0172  1D0B               	btfss	11,2	;volatile
  1524  0173  2996               	goto	i1l40
  1525                           
  1526                           ;main.c: 15: TMR0IF = 0;
  1527  0174  110B               	bcf	11,2	;volatile
  1528                           
  1529                           ;main.c: 16: TMR0 = 100;
  1530  0175  3064               	movlw	100
  1531  0176  0081               	movwf	1	;volatile
  1532                           
  1533                           ;main.c: 19: if(time_count % 1 == 0) {
  1534  0177  3001               	movlw	1
  1535  0178  07FA               	addwf	_time_count,f	;volatile
  1536  0179  1803               	skipnc
  1537  017A  0AFB               	incf	_time_count+1,f	;volatile
  1538  017B  3000               	movlw	0
  1539  017C  07FB               	addwf	_time_count+1,f	;volatile
  1540                           
  1541                           ;main.c: 21: RC2 = 1; __nop(); RC2 = 0;;
  1542  017D  1507               	bsf	7,2	;volatile
  1543  017E  0000               	nop
  1544  017F  1283               	bcf	3,5	;RP0=0, select bank0
  1545  0180  1303               	bcf	3,6	;RP1=0, select bank0
  1546  0181  1107               	bcf	7,2	;volatile
  1547                           
  1548                           ;main.c: 22: }
  1549                           ;main.c: 24: if(time_count % 1000 == 0){
  1550  0182  30E8               	movlw	232
  1551  0183  00F0               	movwf	___lwmod@divisor
  1552  0184  3003               	movlw	3
  1553  0185  00F1               	movwf	___lwmod@divisor+1
  1554  0186  087B               	movf	_time_count+1,w	;volatile
  1555  0187  00F3               	movwf	___lwmod@dividend+1
  1556  0188  087A               	movf	_time_count,w	;volatile
  1557  0189  00F2               	movwf	___lwmod@dividend
  1558  018A  120A  118A  2140  120A  118A  	fcall	___lwmod
  1559  018F  0870               	movf	?___lwmod,w
  1560  0190  0471               	iorwf	?___lwmod+1,w
  1561  0191  1D03               	btfss	3,2
  1562  0192  2996               	goto	i1l40
  1563                           
  1564                           ;main.c: 25: FLAG_1000MS = 1;
  1565  0193  147C               	bsf	_FLAG_1000MS/(0+8),_FLAG_1000MS& (0+7)	;volatile
  1566                           
  1567                           ;main.c: 26: time_count = 0;
  1568  0194  01FA               	clrf	_time_count	;volatile
  1569  0195  01FB               	clrf	_time_count+1	;volatile
  1570  0196                     i1l40:	
  1571  0196  0879               	movf	??_isr+3,w
  1572  0197  1283               	bcf	3,5	;RP0=0, select bank0
  1573  0198  1303               	bcf	3,6	;RP1=0, select bank0
  1574  0199  00FF               	movwf	127
  1575  019A  0878               	movf	??_isr+2,w
  1576  019B  008A               	movwf	10
  1577  019C  0877               	movf	??_isr+1,w
  1578  019D  0084               	movwf	4
  1579  019E  0E76               	swapf	??_isr^(0+-128),w
  1580  019F  0083               	movwf	3
  1581  01A0  0EFE               	swapf	126,f
  1582  01A1  0E7E               	swapf	126,w
  1583  01A2  0009               	retfie
  1584  01A3                     __end_of_isr:	
  1585                           
  1586                           	psect	intentry
  1587  0004                     __pintentry:	
  1588                           ;incstack = 0
  1589                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  1590                           
  1591  0004                     interrupt_function:	
  1592  007E                     saved_w	set	btemp
  1593  0004  00FE               	movwf	btemp
  1594  0005  0E03               	swapf	3,w
  1595  0006  00F6               	movwf	??_isr
  1596  0007  0804               	movf	4,w
  1597  0008  00F7               	movwf	??_isr+1
  1598  0009  080A               	movf	10,w
  1599  000A  00F8               	movwf	??_isr+2
  1600  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1601  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1602  000D  087F               	movf	btemp+1,w
  1603  000E  00F9               	movwf	??_isr+3
  1604  000F  120A  118A  2972   	ljmp	_isr
  1605                           
  1606                           	psect	text11
  1607  0140                     __ptext11:	
  1608 ;; *************** function ___lwmod *****************
  1609 ;; Defined at:
  1610 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;  divisor         2    0[COMMON] unsigned int 
  1613 ;;  dividend        2    2[COMMON] unsigned int 
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;  counter         1    5[COMMON] unsigned char 
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  2    0[COMMON] unsigned int 
  1618 ;; Registers used:
  1619 ;;		wreg, status,2, status,0
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1625 ;;      Params:         4       0       0       0       0
  1626 ;;      Locals:         1       0       0       0       0
  1627 ;;      Temps:          1       0       0       0       0
  1628 ;;      Totals:         6       0       0       0       0
  1629 ;;Total ram usage:        6 bytes
  1630 ;; Hardware stack levels used:    1
  1631 ;; This function calls:
  1632 ;;		Nothing
  1633 ;; This function is called by:
  1634 ;;		_isr
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           
  1639                           ;psect for function ___lwmod
  1640  0140                     ___lwmod:	
  1641                           
  1642                           ;incstack = 0
  1643                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1644  0140  0870               	movf	___lwmod@divisor,w
  1645  0141  0471               	iorwf	___lwmod@divisor+1,w
  1646  0142  1903               	btfsc	3,2
  1647  0143  296D               	goto	i1l988
  1648  0144  01F5               	clrf	___lwmod@counter
  1649  0145  0AF5               	incf	___lwmod@counter,f
  1650  0146                     i1l978:	
  1651  0146  1BF1               	btfsc	___lwmod@divisor+1,7
  1652  0147  2954               	goto	i1l980
  1653  0148  3001               	movlw	1
  1654  0149                     u30_25:	
  1655  0149  1003               	clrc
  1656  014A  0DF0               	rlf	___lwmod@divisor,f
  1657  014B  0DF1               	rlf	___lwmod@divisor+1,f
  1658  014C  3EFF               	addlw	-1
  1659  014D  1D03               	skipz
  1660  014E  2949               	goto	u30_25
  1661  014F  3001               	movlw	1
  1662  0150  00F4               	movwf	??___lwmod
  1663  0151  0874               	movf	??___lwmod,w
  1664  0152  07F5               	addwf	___lwmod@counter,f
  1665  0153  2946               	goto	i1l978
  1666  0154                     i1l980:	
  1667  0154  0871               	movf	___lwmod@divisor+1,w
  1668  0155  0273               	subwf	___lwmod@dividend+1,w
  1669  0156  1D03               	skipz
  1670  0157  295A               	goto	u32_25
  1671  0158  0870               	movf	___lwmod@divisor,w
  1672  0159  0272               	subwf	___lwmod@dividend,w
  1673  015A                     u32_25:	
  1674  015A  1C03               	skipc
  1675  015B  2962               	goto	i1l984
  1676  015C  0870               	movf	___lwmod@divisor,w
  1677  015D  02F2               	subwf	___lwmod@dividend,f
  1678  015E  0871               	movf	___lwmod@divisor+1,w
  1679  015F  1C03               	skipc
  1680  0160  03F3               	decf	___lwmod@dividend+1,f
  1681  0161  02F3               	subwf	___lwmod@dividend+1,f
  1682  0162                     i1l984:	
  1683  0162  3001               	movlw	1
  1684  0163                     u33_25:	
  1685  0163  1003               	clrc
  1686  0164  0CF1               	rrf	___lwmod@divisor+1,f
  1687  0165  0CF0               	rrf	___lwmod@divisor,f
  1688  0166  3EFF               	addlw	-1
  1689  0167  1D03               	skipz
  1690  0168  2963               	goto	u33_25
  1691  0169  3001               	movlw	1
  1692  016A  02F5               	subwf	___lwmod@counter,f
  1693  016B  1D03               	btfss	3,2
  1694  016C  2954               	goto	i1l980
  1695  016D                     i1l988:	
  1696  016D  0873               	movf	___lwmod@dividend+1,w
  1697  016E  00F1               	movwf	?___lwmod+1
  1698  016F  0872               	movf	___lwmod@dividend,w
  1699  0170  00F0               	movwf	?___lwmod
  1700  0171  0008               	return
  1701  0172                     __end_of___lwmod:	
  1702  007E                     btemp	set	126	;btemp
  1703  007E                     wtemp	set	126
  1704  007E                     wtemp0	set	126
  1705  0080                     wtemp1	set	128
  1706  0082                     wtemp2	set	130
  1707  0084                     wtemp3	set	132
  1708  0086                     wtemp4	set	134
  1709  0088                     wtemp5	set	136
  1710  007F                     wtemp6	set	127
  1711  007E                     ttemp	set	126
  1712  007E                     ttemp0	set	126
  1713  0081                     ttemp1	set	129
  1714  0084                     ttemp2	set	132
  1715  0087                     ttemp3	set	135
  1716  007F                     ttemp4	set	127
  1717  007E                     ltemp	set	126
  1718  007E                     ltemp0	set	126
  1719  0082                     ltemp1	set	130
  1720  0086                     ltemp2	set	134
  1721  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      13
    BANK0            80     24      29
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->___lwmod

Critical Paths under _main in BANK0

    _main->_lcdWriteToDigitBCD
    _setupLCD->_lcdWriteControl
    _lcdWriteToDigitBCD->_lcdWriteData

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0     616
                                             15 BANK0      9     9      0
                 _lcdWriteToDigitBCD
                          _ser_getch
                           _ser_init
                          _ser_putch
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      30
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      22
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ser_getch                                            2     2      0       7
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _lcdWriteToDigitBCD                                  12    10      2     440
                                              3 BANK0     12    10      2
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (2) _lcdWriteData                                         3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  4     4      0     265
                                              6 COMMON     4     4      0
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcdWriteToDigitBCD
     _lcdWriteData
   _ser_getch
   _ser_init
   _ser_putch
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)
   ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      2A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     18      1D       5       36.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      2A      12        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Tue Aug 30 13:55:30 2016

                   __CFG_CP$OFF 0000                             l102 00A0                             l134 0212  
                           l163 022C                             l169 0235                             l950 005D  
                           l942 0031                             l960 0081                             l944 0047  
                           l954 006B                             l956 0073                             l948 0055  
                           l966 0093                             _GIE 005F                             _RB0 0030  
                           _RC2 003A                             _RE0 0048                             _RE1 0049  
                           _RE2 004A                             u407 0206                    __CFG_CPD$OFF 0000  
                           u397 01F2                             _isr 0172                             fsr0 0004  
                  __CFG_FOSC$HS 0000                  ??_lcdWriteData 0020                    __CFG_LVP$OFF 0000  
                          l1046 0138                            ?_isr 0070                            _PEIE 005E  
                          i1l40 0196                            _RCIF 0065                            _TMR0 0001  
                          _TRMT 04C1                    __CFG_WRT$OFF 0000                     main@lowByte 0033  
                          _main 00BA                            btemp 007E                            ltemp 007E  
                          start 0012                            ttemp 007E                            wtemp 007E  
                         ??_isr 0076                    main@highByte 0031                           ?_main 0070  
                 __CFG_WDTE$OFF 0000                 __end_of___lwmod 0172                           i1l980 0154  
                         i1l984 0162                           i1l978 0146                           i1l988 016D  
                         _RCREG 001A                           _RCSTA 0018                           u30_25 0149  
                         u32_25 015A                           u33_25 0163                           _SPBRG 0099  
                         _PORTC 0007                           _PORTD 0008                           _PORTE 0009  
                         _TRISB 0086                           _TRISC 0087                           _TRISD 0088  
                         _TRISE 0089                           _SSPIF 0063                           _TXREG 0019  
                         _TXSTA 0098      __end_of_lcdWriteToDigitBCD 00BA                  __pbitbssCOMMON 03E0  
                __CFG_BOREN$OFF 0000                           pclath 000A                           ltemp0 007E  
                         ltemp1 0082                           ltemp2 0086                           ltemp3 0080  
                         ttemp0 007E                           ttemp1 0081                           ttemp2 0084  
                         ttemp3 0087                           ttemp4 007F                           status 0003  
                         wtemp0 007E                           wtemp1 0080                           wtemp2 0082  
                         wtemp3 0084                           wtemp4 0086                           wtemp5 0088  
                         wtemp6 007F                 __initialization 0015                    __end_of_main 0140  
      __size_of_lcdWriteControl 0014                          ??_main 002F                          _ADCON1 009F  
                        _TMR0IE 005D                          _TMR0IF 005A                          _SSPCON 0014  
                        _SSPBUF 0013                  __CFG_PWRTE$OFF 0000            __end_of_lcdWriteData 020B  
                     ??___lwmod 0074                          _rxbyte 003C                __end_of_ser_init 0229  
              __end_of_setupLCD 01CC                __end_of_setupSPI 01E4                          saved_w 007E  
       __end_of__initialization 001F                  __pcstackCOMMON 0070               ??_lcdWriteControl 0020  
                    __pbssBANK0 0038                      __pmaintext 00BA                      __pintentry 0004  
            __size_of_ser_getch 0009              __size_of_ser_putch 000C                         _SSPSTAT 0094  
         __size_of_lcdWriteData 0013              _lcdWriteToDigitBCD 0023                       ?_ser_init 0070  
                     ?_setupLCD 0070                       ?_setupSPI 0070                         ___lwmod 0140  
           ?_lcdWriteToDigitBCD 0023                         _degrees 0038                         __ptext1 020B  
                       __ptext2 01CC                         __ptext3 01A3                         __ptext4 01E4  
                       __ptext5 0229                         __ptext6 021A                         __ptext7 0235  
                       __ptext8 0023                         __ptext9 01F8                    __size_of_isr 0031  
                  _lcdWriteData 01F8            end_of_initialization 001F            ??_lcdWriteToDigitBCD 0025  
             __end_of_ser_getch 023E               __end_of_ser_putch 0235                      ??_ser_init 0020  
                    ??_setupLCD 0023                      ??_setupSPI 0020                      _time_count 007A  
                 ?_spi_transfer 0070                 ser_getch@rxbyte 0021                 _lcdWriteControl 01E4  
           start_initialization 0015                     __end_of_isr 01A3                  ??_spi_transfer 0020  
                   _FLAG_1000MS 03E0                     __pbssCOMMON 007A                       ___latbits 0002  
                 __pcstackBANK0 0020         __end_of_lcdWriteControl 01F8               __size_of_ser_init 000F  
                      ?___lwmod 0070               __size_of_setupLCD 0029               __size_of_setupSPI 0018  
               main@controlByte 0037         lcdWriteControl@databyte 0022               interrupt_function 0004  
                    ser_putch@c 0020                       _ser_getch 0235                       _ser_putch 0229  
          __end_of_spi_transfer 021A                spi_transfer@data 0022                spi_transfer@temp 0021  
          lcdWriteData@databyte 0022     __size_of_lcdWriteToDigitBCD 0097                      ?_ser_getch 0070  
              ?_lcdWriteControl 0070                      ?_ser_putch 0070                __size_of___lwmod 0032  
lcdWriteToDigitBCD@TenThouDigit 002B                        __ptext10 0172                        __ptext11 0140  
                 __size_of_main 0086                        _ser_init 021A                        _setupLCD 01A3  
                      _setupSPI 01CC     lcdWriteToDigitBCD@HunsDigit 0027     lcdWriteToDigitBCD@OnesDigit 002D  
                      main@dist 0035     lcdWriteToDigitBCD@TensDigit 0025     lcdWriteToDigitBCD@ThouDigit 0029  
                      intlevel1 0000                ___lwmod@dividend 0072                     ??_ser_getch 0020  
                   ??_ser_putch 0020           __size_of_spi_transfer 000F                      _OPTION_REG 0081  
               ___lwmod@divisor 0070                 ___lwmod@counter 0075                   ?_lcdWriteData 0070  
        lcdWriteToDigitBCD@data 0023                    _spi_transfer 020B                    _stepCountNeg 003A  
