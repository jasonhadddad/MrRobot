

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Wed Sep 07 10:22:50 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     	;# 
    42  0001                     	;# 
    43  0002                     	;# 
    44  0003                     	;# 
    45  0004                     	;# 
    46  0005                     	;# 
    47  0006                     	;# 
    48  0007                     	;# 
    49  0008                     	;# 
    50  0009                     	;# 
    51  000A                     	;# 
    52  000B                     	;# 
    53  000C                     	;# 
    54  000D                     	;# 
    55  000E                     	;# 
    56  000E                     	;# 
    57  000F                     	;# 
    58  0010                     	;# 
    59  0011                     	;# 
    60  0012                     	;# 
    61  0013                     	;# 
    62  0014                     	;# 
    63  0015                     	;# 
    64  0015                     	;# 
    65  0016                     	;# 
    66  0017                     	;# 
    67  0018                     	;# 
    68  0019                     	;# 
    69  001A                     	;# 
    70  001B                     	;# 
    71  001B                     	;# 
    72  001C                     	;# 
    73  001D                     	;# 
    74  001E                     	;# 
    75  001F                     	;# 
    76  0081                     	;# 
    77  0085                     	;# 
    78  0086                     	;# 
    79  0087                     	;# 
    80  0088                     	;# 
    81  0089                     	;# 
    82  008C                     	;# 
    83  008D                     	;# 
    84  008E                     	;# 
    85  0091                     	;# 
    86  0092                     	;# 
    87  0093                     	;# 
    88  0094                     	;# 
    89  0098                     	;# 
    90  0099                     	;# 
    91  009C                     	;# 
    92  009D                     	;# 
    93  009E                     	;# 
    94  009F                     	;# 
    95  010C                     	;# 
    96  010D                     	;# 
    97  010E                     	;# 
    98  010F                     	;# 
    99  018C                     	;# 
   100  018D                     	;# 
   101  0000                     	;# 
   102  0001                     	;# 
   103  0002                     	;# 
   104  0003                     	;# 
   105  0004                     	;# 
   106  0005                     	;# 
   107  0006                     	;# 
   108  0007                     	;# 
   109  0008                     	;# 
   110  0009                     	;# 
   111  000A                     	;# 
   112  000B                     	;# 
   113  000C                     	;# 
   114  000D                     	;# 
   115  000E                     	;# 
   116  000E                     	;# 
   117  000F                     	;# 
   118  0010                     	;# 
   119  0011                     	;# 
   120  0012                     	;# 
   121  0013                     	;# 
   122  0014                     	;# 
   123  0015                     	;# 
   124  0015                     	;# 
   125  0016                     	;# 
   126  0017                     	;# 
   127  0018                     	;# 
   128  0019                     	;# 
   129  001A                     	;# 
   130  001B                     	;# 
   131  001B                     	;# 
   132  001C                     	;# 
   133  001D                     	;# 
   134  001E                     	;# 
   135  001F                     	;# 
   136  0081                     	;# 
   137  0085                     	;# 
   138  0086                     	;# 
   139  0087                     	;# 
   140  0088                     	;# 
   141  0089                     	;# 
   142  008C                     	;# 
   143  008D                     	;# 
   144  008E                     	;# 
   145  0091                     	;# 
   146  0092                     	;# 
   147  0093                     	;# 
   148  0094                     	;# 
   149  0098                     	;# 
   150  0099                     	;# 
   151  009C                     	;# 
   152  009D                     	;# 
   153  009E                     	;# 
   154  009F                     	;# 
   155  010C                     	;# 
   156  010D                     	;# 
   157  010E                     	;# 
   158  010F                     	;# 
   159  018C                     	;# 
   160  018D                     	;# 
   161  0000                     	;# 
   162  0001                     	;# 
   163  0002                     	;# 
   164  0003                     	;# 
   165  0004                     	;# 
   166  0005                     	;# 
   167  0006                     	;# 
   168  0007                     	;# 
   169  0008                     	;# 
   170  0009                     	;# 
   171  000A                     	;# 
   172  000B                     	;# 
   173  000C                     	;# 
   174  000D                     	;# 
   175  000E                     	;# 
   176  000E                     	;# 
   177  000F                     	;# 
   178  0010                     	;# 
   179  0011                     	;# 
   180  0012                     	;# 
   181  0013                     	;# 
   182  0014                     	;# 
   183  0015                     	;# 
   184  0015                     	;# 
   185  0016                     	;# 
   186  0017                     	;# 
   187  0018                     	;# 
   188  0019                     	;# 
   189  001A                     	;# 
   190  001B                     	;# 
   191  001B                     	;# 
   192  001C                     	;# 
   193  001D                     	;# 
   194  001E                     	;# 
   195  001F                     	;# 
   196  0081                     	;# 
   197  0085                     	;# 
   198  0086                     	;# 
   199  0087                     	;# 
   200  0088                     	;# 
   201  0089                     	;# 
   202  008C                     	;# 
   203  008D                     	;# 
   204  008E                     	;# 
   205  0091                     	;# 
   206  0092                     	;# 
   207  0093                     	;# 
   208  0094                     	;# 
   209  0098                     	;# 
   210  0099                     	;# 
   211  009C                     	;# 
   212  009D                     	;# 
   213  009E                     	;# 
   214  009F                     	;# 
   215  010C                     	;# 
   216  010D                     	;# 
   217  010E                     	;# 
   218  010F                     	;# 
   219  018C                     	;# 
   220  018D                     	;# 
   221  0000                     	;# 
   222  0001                     	;# 
   223  0002                     	;# 
   224  0003                     	;# 
   225  0004                     	;# 
   226  0005                     	;# 
   227  0006                     	;# 
   228  0007                     	;# 
   229  0008                     	;# 
   230  0009                     	;# 
   231  000A                     	;# 
   232  000B                     	;# 
   233  000C                     	;# 
   234  000D                     	;# 
   235  000E                     	;# 
   236  000E                     	;# 
   237  000F                     	;# 
   238  0010                     	;# 
   239  0011                     	;# 
   240  0012                     	;# 
   241  0013                     	;# 
   242  0014                     	;# 
   243  0015                     	;# 
   244  0015                     	;# 
   245  0016                     	;# 
   246  0017                     	;# 
   247  0018                     	;# 
   248  0019                     	;# 
   249  001A                     	;# 
   250  001B                     	;# 
   251  001B                     	;# 
   252  001C                     	;# 
   253  001D                     	;# 
   254  001E                     	;# 
   255  001F                     	;# 
   256  0081                     	;# 
   257  0085                     	;# 
   258  0086                     	;# 
   259  0087                     	;# 
   260  0088                     	;# 
   261  0089                     	;# 
   262  008C                     	;# 
   263  008D                     	;# 
   264  008E                     	;# 
   265  0091                     	;# 
   266  0092                     	;# 
   267  0093                     	;# 
   268  0094                     	;# 
   269  0098                     	;# 
   270  0099                     	;# 
   271  009C                     	;# 
   272  009D                     	;# 
   273  009E                     	;# 
   274  009F                     	;# 
   275  010C                     	;# 
   276  010D                     	;# 
   277  010E                     	;# 
   278  010F                     	;# 
   279  018C                     	;# 
   280  018D                     	;# 
   281  0000                     	;# 
   282  0001                     	;# 
   283  0002                     	;# 
   284  0003                     	;# 
   285  0004                     	;# 
   286  0005                     	;# 
   287  0006                     	;# 
   288  0007                     	;# 
   289  0008                     	;# 
   290  0009                     	;# 
   291  000A                     	;# 
   292  000B                     	;# 
   293  000C                     	;# 
   294  000D                     	;# 
   295  000E                     	;# 
   296  000E                     	;# 
   297  000F                     	;# 
   298  0010                     	;# 
   299  0011                     	;# 
   300  0012                     	;# 
   301  0013                     	;# 
   302  0014                     	;# 
   303  0015                     	;# 
   304  0015                     	;# 
   305  0016                     	;# 
   306  0017                     	;# 
   307  0018                     	;# 
   308  0019                     	;# 
   309  001A                     	;# 
   310  001B                     	;# 
   311  001B                     	;# 
   312  001C                     	;# 
   313  001D                     	;# 
   314  001E                     	;# 
   315  001F                     	;# 
   316  0081                     	;# 
   317  0085                     	;# 
   318  0086                     	;# 
   319  0087                     	;# 
   320  0088                     	;# 
   321  0089                     	;# 
   322  008C                     	;# 
   323  008D                     	;# 
   324  008E                     	;# 
   325  0091                     	;# 
   326  0092                     	;# 
   327  0093                     	;# 
   328  0094                     	;# 
   329  0098                     	;# 
   330  0099                     	;# 
   331  009C                     	;# 
   332  009D                     	;# 
   333  009E                     	;# 
   334  009F                     	;# 
   335  010C                     	;# 
   336  010D                     	;# 
   337  010E                     	;# 
   338  010F                     	;# 
   339  018C                     	;# 
   340  018D                     	;# 
   341  0000                     	;# 
   342  0001                     	;# 
   343  0002                     	;# 
   344  0003                     	;# 
   345  0004                     	;# 
   346  0005                     	;# 
   347  0006                     	;# 
   348  0007                     	;# 
   349  0008                     	;# 
   350  0009                     	;# 
   351  000A                     	;# 
   352  000B                     	;# 
   353  000C                     	;# 
   354  000D                     	;# 
   355  000E                     	;# 
   356  000E                     	;# 
   357  000F                     	;# 
   358  0010                     	;# 
   359  0011                     	;# 
   360  0012                     	;# 
   361  0013                     	;# 
   362  0014                     	;# 
   363  0015                     	;# 
   364  0015                     	;# 
   365  0016                     	;# 
   366  0017                     	;# 
   367  0018                     	;# 
   368  0019                     	;# 
   369  001A                     	;# 
   370  001B                     	;# 
   371  001B                     	;# 
   372  001C                     	;# 
   373  001D                     	;# 
   374  001E                     	;# 
   375  001F                     	;# 
   376  0081                     	;# 
   377  0085                     	;# 
   378  0086                     	;# 
   379  0087                     	;# 
   380  0088                     	;# 
   381  0089                     	;# 
   382  008C                     	;# 
   383  008D                     	;# 
   384  008E                     	;# 
   385  0091                     	;# 
   386  0092                     	;# 
   387  0093                     	;# 
   388  0094                     	;# 
   389  0098                     	;# 
   390  0099                     	;# 
   391  009C                     	;# 
   392  009D                     	;# 
   393  009E                     	;# 
   394  009F                     	;# 
   395  010C                     	;# 
   396  010D                     	;# 
   397  010E                     	;# 
   398  010F                     	;# 
   399  018C                     	;# 
   400  018D                     	;# 
   401                           
   402                           	psect	idataBANK0
   403  0DD7                     __pidataBANK0:	
   404                           
   405                           ;initializer for _adcClosest
   406  0DD7  34E8               	retlw	232
   407  0DD8  3403               	retlw	3
   408  001F                     _ADCON0	set	31
   409  0005                     _PORTA	set	5
   410  0007                     _PORTC	set	7
   411  0008                     _PORTD	set	8
   412  0009                     _PORTE	set	9
   413  001A                     _RCREG	set	26
   414  0018                     _RCSTA	set	24
   415  0013                     _SSPBUF	set	19
   416  0014                     _SSPCON	set	20
   417  0001                     _TMR0	set	1
   418  0019                     _TXREG	set	25
   419  001E                     _ADRESH	set	30
   420  005F                     _GIE	set	95
   421  00FA                     _GO	set	250
   422  005E                     _PEIE	set	94
   423  0030                     _RB0	set	48
   424  0031                     _RB1	set	49
   425  0032                     _RB2	set	50
   426  0034                     _RB4	set	52
   427  003A                     _RC2	set	58
   428  0065                     _RCIF	set	101
   429  0048                     _RE0	set	72
   430  0049                     _RE1	set	73
   431  004A                     _RE2	set	74
   432  0063                     _SSPIF	set	99
   433  005D                     _TMR0IE	set	93
   434  005A                     _TMR0IF	set	90
   435  009F                     _ADCON1	set	159
   436  009E                     _ADRESL	set	158
   437  0081                     _OPTION_REG	set	129
   438  0099                     _SPBRG	set	153
   439  0094                     _SSPSTAT	set	148
   440  0085                     _TRISA	set	133
   441  0086                     _TRISB	set	134
   442  0087                     _TRISC	set	135
   443  0088                     _TRISD	set	136
   444  0089                     _TRISE	set	137
   445  0098                     _TXSTA	set	152
   446  04C1                     _TRMT	set	1217
   447                           
   448                           ; #config settings
   449  0000                     
   450                           	psect	cinit
   451  0015                     start_initialization:	
   452  0015                     __initialization:	
   453                           
   454                           ; Initialize objects allocated to BANK0
   455  0015  120A  158A  25D7  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   456  001A  00ED               	movwf	__pdataBANK0& (0+127)
   457  001B  120A  158A  25D8  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   458  0020  00EE               	movwf	(__pdataBANK0+1)& (0+127)
   459                           
   460                           ; Clear objects allocated to BANK0
   461  0021  1383               	bcf	3,7	;select IRP bank0
   462  0022  3020               	movlw	low __pbssBANK0
   463  0023  0084               	movwf	4
   464  0024  304A               	movlw	low (__pbssBANK0+42)
   465  0025  120A  158A  25D9   	fcall	clear_ram0
   466                           
   467                           ; Clear objects allocated to BITBANK0
   468  0028  01EF               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   469  0029                     end_of_initialization:	
   470                           ;End of C runtime variable initialization code
   471                           
   472  0029                     __end_of__initialization:	
   473  0029  0183               	clrf	3
   474  002A  120A  118A  2B6B   	ljmp	_main	;jump to C main() function
   475                           
   476                           	psect	bitbssBANK0
   477  0378                     __pbitbssBANK0:	
   478  0378                     _FLAG_1000MS:	
   479  0378                     	ds	1
   480                           
   481                           	psect	bssBANK0
   482  0020                     __pbssBANK0:	
   483  0020                     _Distance:	
   484  0020                     	ds	2
   485  0022                     _adcRAW:	
   486  0022                     	ds	2
   487  0024                     _angleTurned:	
   488  0024                     	ds	2
   489  0026                     _degrees:	
   490  0026                     	ds	2
   491  0028                     _distTrav:	
   492  0028                     	ds	2
   493  002A                     _loop:	
   494  002A                     	ds	2
   495  002C                     _radH:	
   496  002C                     	ds	2
   497  002E                     _radL:	
   498  002E                     	ds	2
   499  0030                     _speedH:	
   500  0030                     	ds	2
   501  0032                     _speedL:	
   502  0032                     	ds	2
   503  0034                     _stepClosest:	
   504  0034                     	ds	2
   505  0036                     _stepCountNeg:	
   506  0036                     	ds	2
   507  0038                     _time_count:	
   508  0038                     	ds	2
   509  003A                     _totalDistTrav:	
   510  003A                     	ds	2
   511  003C                     _FLAG_AdvPlay:	
   512  003C                     	ds	1
   513  003D                     _FLAG_Advanced:	
   514  003D                     	ds	1
   515  003E                     _FLAG_Play:	
   516  003E                     	ds	1
   517  003F                     _PB6Counter:	
   518  003F                     	ds	1
   519  0040                     _PB7Counter:	
   520  0040                     	ds	1
   521  0041                     _PB8Counter:	
   522  0041                     	ds	1
   523  0042                     _controlByte:	
   524  0042                     	ds	1
   525  0043                     _count:	
   526  0043                     	ds	1
   527  0044                     _currentStep:	
   528  0044                     	ds	1
   529  0045                     _lowByte:	
   530  0045                     	ds	1
   531  0046                     _negativeFlag:	
   532  0046                     	ds	1
   533  0047                     _rxbyte:	
   534  0047                     	ds	1
   535  0048                     _stepCount:	
   536  0048                     	ds	1
   537  0049                     _highByte:	
   538  0049                     	ds	1
   539                           
   540                           	psect	dataBANK0
   541  006D                     __pdataBANK0:	
   542  006D                     _adcClosest:	
   543  006D                     	ds	2
   544                           
   545                           	psect	clrtext
   546  0DD9                     clear_ram0:	
   547                           ;	Called with FSR containing the base address, and
   548                           ;	W with the last address+1
   549                           
   550  0DD9  0064               	clrwdt	;clear the watchdog before getting into this loop
   551  0DDA                     clrloop0:	
   552  0DDA  0180               	clrf	0	;clear RAM location pointed to by FSR
   553  0DDB  0A84               	incf	4,f	;increment pointer
   554  0DDC  0604               	xorwf	4,w	;XOR with final address
   555  0DDD  1903               	btfsc	3,2	;have we reached the end yet?
   556  0DDE  3400               	retlw	0	;all done for this memory range, return
   557  0DDF  0604               	xorwf	4,w	;XOR again to restore value
   558  0DE0  2DDA               	goto	clrloop0	;do the next byte
   559                           
   560                           	psect	cstackCOMMON
   561  0070                     __pcstackCOMMON:	
   562  0070                     ?_setupSPI:	
   563  0070                     ?_ser_init:	
   564                           ; 1 bytes @ 0x0
   565                           
   566  0070                     ?_setupLCD:	
   567                           ; 1 bytes @ 0x0
   568                           
   569  0070                     ?_setupADC:	
   570                           ; 1 bytes @ 0x0
   571                           
   572  0070                     ?_spi_transfer:	
   573                           ; 1 bytes @ 0x0
   574                           
   575  0070                     ?_ser_putch:	
   576                           ; 1 bytes @ 0x0
   577                           
   578  0070                     ?_moveCW:	
   579                           ; 1 bytes @ 0x0
   580                           
   581  0070                     ?_ADCMain:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0070                     ?_moveCCW:	
   585                           ; 1 bytes @ 0x0
   586                           
   587  0070                     ?_lcdSetCursor:	
   588                           ; 1 bytes @ 0x0
   589                           
   590  0070                     ?_isr:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0070                     ?_main:	
   594                           ; 1 bytes @ 0x0
   595                           
   596  0070                     ?_lcdWriteControl:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0070                     ?_lcdWriteData:	
   600                           ; 1 bytes @ 0x0
   601                           
   602  0070                     ?_ser_getch:	
   603                           ; 1 bytes @ 0x0
   604                           
   605  0070                     ?i1_ser_putch:	
   606                           ; 1 bytes @ 0x0
   607                           
   608  0070                     ??i1_ser_putch:	
   609                           ; 1 bytes @ 0x0
   610                           
   611  0070                     ?i1_ser_getch:	
   612                           ; 1 bytes @ 0x0
   613                           
   614  0070                     ??i1_ser_getch:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  0070                     ?_getADC:	
   618                           ; 1 bytes @ 0x0
   619                           
   620  0070                     ?___lwmod:	
   621                           ; 2 bytes @ 0x0
   622                           
   623  0070                     i1ser_putch@c:	
   624                           ; 2 bytes @ 0x0
   625                           
   626  0070                     ___lwmod@divisor:	
   627                           ; 1 bytes @ 0x0
   628                           
   629                           
   630                           ; 2 bytes @ 0x0
   631  0070                     	ds	1
   632  0071                     i1ser_getch@rxbyte:	
   633                           
   634                           ; 1 bytes @ 0x1
   635  0071                     	ds	1
   636  0072                     ?i1_getSensorData:	
   637  0072                     i1getSensorData@bytes:	
   638                           ; 2 bytes @ 0x2
   639                           
   640  0072                     ___lwmod@dividend:	
   641                           ; 1 bytes @ 0x2
   642                           
   643                           
   644                           ; 2 bytes @ 0x2
   645  0072                     	ds	2
   646  0074                     ??___lwmod:	
   647  0074                     ??i1_getSensorData:	
   648                           ; 1 bytes @ 0x4
   649                           
   650                           
   651                           ; 1 bytes @ 0x4
   652  0074                     	ds	1
   653  0075                     ___lwmod@counter:	
   654                           
   655                           ; 1 bytes @ 0x5
   656  0075                     	ds	1
   657  0076                     i1getSensorData@packetID:	
   658                           
   659                           ; 1 bytes @ 0x6
   660  0076                     	ds	1
   661  0077                     i1getSensorData@sensor:	
   662                           
   663                           ; 2 bytes @ 0x7
   664  0077                     	ds	2
   665  0079                     ??_isr:	
   666                           
   667                           ; 1 bytes @ 0x9
   668  0079                     	ds	5
   669                           
   670                           	psect	cstackBANK0
   671  004A                     __pcstackBANK0:	
   672  004A                     ??_setupSPI:	
   673  004A                     ??_ser_init:	
   674                           ; 1 bytes @ 0x0
   675                           
   676  004A                     ??_setupADC:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  004A                     ??_spi_transfer:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  004A                     ??_ser_putch:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  004A                     ??_moveCW:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  004A                     ??_moveCCW:	
   689                           ; 1 bytes @ 0x0
   690                           
   691  004A                     ??_getADC:	
   692                           ; 1 bytes @ 0x0
   693                           
   694  004A                     ??_lcdWriteControl:	
   695                           ; 1 bytes @ 0x0
   696                           
   697  004A                     ??_lcdWriteData:	
   698                           ; 1 bytes @ 0x0
   699                           
   700  004A                     ??_ser_getch:	
   701                           ; 1 bytes @ 0x0
   702                           
   703  004A                     ?___wmul:	
   704                           ; 1 bytes @ 0x0
   705                           
   706  004A                     ser_putch@c:	
   707                           ; 2 bytes @ 0x0
   708                           
   709  004A                     ___wmul@multiplier:	
   710                           ; 1 bytes @ 0x0
   711                           
   712                           
   713                           ; 2 bytes @ 0x0
   714  004A                     	ds	1
   715  004B                     ?_Drive:	
   716  004B                     spi_transfer@temp:	
   717                           ; 1 bytes @ 0x1
   718                           
   719  004B                     ser_getch@rxbyte:	
   720                           ; 1 bytes @ 0x1
   721                           
   722  004B                     Drive@speedH:	
   723                           ; 1 bytes @ 0x1
   724                           
   725                           
   726                           ; 2 bytes @ 0x1
   727  004B                     	ds	1
   728  004C                     ?_getSensorData:	
   729  004C                     lcdWriteControl@databyte:	
   730                           ; 2 bytes @ 0x2
   731                           
   732  004C                     lcdWriteData@databyte:	
   733                           ; 1 bytes @ 0x2
   734                           
   735  004C                     spi_transfer@data:	
   736                           ; 1 bytes @ 0x2
   737                           
   738  004C                     getSensorData@bytes:	
   739                           ; 1 bytes @ 0x2
   740                           
   741  004C                     ___wmul@multiplicand:	
   742                           ; 1 bytes @ 0x2
   743                           
   744                           
   745                           ; 2 bytes @ 0x2
   746  004C                     	ds	1
   747  004D                     ??_setupLCD:	
   748  004D                     ?_lcdWriteToDigitBCD:	
   749                           ; 1 bytes @ 0x3
   750                           
   751  004D                     ??_lcdSetCursor:	
   752                           ; 1 bytes @ 0x3
   753                           
   754  004D                     lcdSetCursor@address:	
   755                           ; 1 bytes @ 0x3
   756                           
   757  004D                     lcdWriteToDigitBCD@data:	
   758                           ; 1 bytes @ 0x3
   759                           
   760  004D                     Drive@speedL:	
   761                           ; 2 bytes @ 0x3
   762                           
   763                           
   764                           ; 2 bytes @ 0x3
   765  004D                     	ds	1
   766  004E                     ??_getSensorData:	
   767  004E                     ??___wmul:	
   768                           ; 1 bytes @ 0x4
   769                           
   770  004E                     ___wmul@product:	
   771                           ; 1 bytes @ 0x4
   772                           
   773                           
   774                           ; 2 bytes @ 0x4
   775  004E                     	ds	1
   776  004F                     ??_lcdWriteToDigitBCD:	
   777  004F                     lcdWriteToDigitBCD@TensDigit:	
   778                           ; 1 bytes @ 0x5
   779                           
   780  004F                     Drive@radH:	
   781                           ; 2 bytes @ 0x5
   782                           
   783                           
   784                           ; 2 bytes @ 0x5
   785  004F                     	ds	1
   786  0050                     ?___lwdiv:	
   787  0050                     ?___aldiv:	
   788                           ; 2 bytes @ 0x6
   789                           
   790  0050                     getSensorData@sensor:	
   791                           ; 4 bytes @ 0x6
   792                           
   793  0050                     ___lwdiv@divisor:	
   794                           ; 2 bytes @ 0x6
   795                           
   796  0050                     ___aldiv@divisor:	
   797                           ; 2 bytes @ 0x6
   798                           
   799                           
   800                           ; 4 bytes @ 0x6
   801  0050                     	ds	1
   802  0051                     lcdWriteToDigitBCD@HunsDigit:	
   803  0051                     Drive@radL:	
   804                           ; 2 bytes @ 0x7
   805                           
   806                           
   807                           ; 2 bytes @ 0x7
   808  0051                     	ds	1
   809  0052                     getSensorData@packetID:	
   810  0052                     ___lwdiv@dividend:	
   811                           ; 1 bytes @ 0x8
   812                           
   813                           
   814                           ; 2 bytes @ 0x8
   815  0052                     	ds	1
   816  0053                     ??_Drive:	
   817  0053                     lcdWriteToDigitBCD@ThouDigit:	
   818                           ; 1 bytes @ 0x9
   819                           
   820                           
   821                           ; 2 bytes @ 0x9
   822  0053                     	ds	1
   823  0054                     ??___lwdiv:	
   824  0054                     ___aldiv@dividend:	
   825                           ; 1 bytes @ 0xA
   826                           
   827                           
   828                           ; 4 bytes @ 0xA
   829  0054                     	ds	1
   830  0055                     lcdWriteToDigitBCD@TenThouDigit:	
   831  0055                     ___lwdiv@quotient:	
   832                           ; 2 bytes @ 0xB
   833                           
   834                           
   835                           ; 2 bytes @ 0xB
   836  0055                     	ds	2
   837  0057                     ___lwdiv@counter:	
   838  0057                     lcdWriteToDigitBCD@OnesDigit:	
   839                           ; 1 bytes @ 0xD
   840                           
   841                           
   842                           ; 2 bytes @ 0xD
   843  0057                     	ds	1
   844  0058                     ??___aldiv:	
   845                           
   846                           ; 1 bytes @ 0xE
   847  0058                     	ds	1
   848  0059                     ___aldiv@counter:	
   849                           
   850                           ; 1 bytes @ 0xF
   851  0059                     	ds	1
   852  005A                     ___aldiv@sign:	
   853                           
   854                           ; 1 bytes @ 0x10
   855  005A                     	ds	1
   856  005B                     ___aldiv@quotient:	
   857                           
   858                           ; 4 bytes @ 0x11
   859  005B                     	ds	4
   860  005F                     ?_adcConvertMM:	
   861  005F                     adcConvertMM@adcRAW:	
   862                           ; 2 bytes @ 0x15
   863                           
   864                           
   865                           ; 2 bytes @ 0x15
   866  005F                     	ds	2
   867  0061                     ??_adcConvertMM:	
   868                           
   869                           ; 1 bytes @ 0x17
   870  0061                     	ds	8
   871  0069                     ??_ADCMain:	
   872  0069                     ??_main:	
   873                           ; 1 bytes @ 0x1F
   874                           
   875                           
   876                           ; 1 bytes @ 0x1F
   877  0069                     	ds	3
   878  006C                     main@controlByte:	
   879                           
   880                           ; 1 bytes @ 0x22
   881  006C                     	ds	1
   882                           
   883                           	psect	maintext
   884  036B                     __pmaintext:	
   885 ;;
   886 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   887 ;;
   888 ;; *************** function _main *****************
   889 ;; Defined at:
   890 ;;		line 72 in file "main.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;		None
   893 ;; Auto vars:     Size  Location     Type
   894 ;;  controlByte     1   34[BANK0 ] unsigned char 
   895 ;; Return value:  Size  Location     Type
   896 ;;                  1    wreg      void 
   897 ;; Registers used:
   898 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   899 ;; Tracked objects:
   900 ;;		On entry : B00/0
   901 ;;		On exit  : 0/0
   902 ;;		Unchanged: 0/0
   903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   904 ;;      Params:         0       0       0       0       0
   905 ;;      Locals:         0       1       0       0       0
   906 ;;      Temps:          0       3       0       0       0
   907 ;;      Totals:         0       4       0       0       0
   908 ;;Total ram usage:        4 bytes
   909 ;; Hardware stack levels required when called:    6
   910 ;; This function calls:
   911 ;;		_ADCMain
   912 ;;		_Drive
   913 ;;		_getSensorData
   914 ;;		_lcdSetCursor
   915 ;;		_lcdWriteToDigitBCD
   916 ;;		_moveCCW
   917 ;;		_moveCW
   918 ;;		_ser_init
   919 ;;		_ser_putch
   920 ;;		_setupADC
   921 ;;		_setupLCD
   922 ;;		_setupSPI
   923 ;;		_spi_transfer
   924 ;; This function is called by:
   925 ;;		Startup code after reset
   926 ;; This function uses a non-reentrant model
   927 ;;
   928                           
   929                           
   930                           ;psect for function _main
   931  036B                     _main:	
   932                           
   933                           ;main.c: 73: _delay((unsigned long)((5000)*(20000000/4000.0)));
   934                           
   935                           ;incstack = 0
   936                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   937  036B  307F               	movlw	127
   938  036C  1283               	bcf	3,5	;RP0=0, select bank0
   939  036D  1303               	bcf	3,6	;RP1=0, select bank0
   940  036E  00EB               	movwf	??_main+2
   941  036F  30D4               	movlw	212
   942  0370  00EA               	movwf	??_main+1
   943  0371  30AE               	movlw	174
   944  0372  00E9               	movwf	??_main
   945  0373                     u1937:	
   946  0373  0BE9               	decfsz	??_main,f
   947  0374  2B73               	goto	u1937
   948  0375  0BEA               	decfsz	??_main+1,f
   949  0376  2B73               	goto	u1937
   950  0377  0BEB               	decfsz	??_main+2,f
   951  0378  2B73               	goto	u1937
   952  0379  2B7A               	nop2
   953                           
   954                           ;main.c: 76: setupSPI();
   955  037A  120A  158A  266F  120A  118A  	fcall	_setupSPI
   956                           
   957                           ;main.c: 77: ser_init();
   958  037F  120A  158A  2614  120A  118A  	fcall	_ser_init
   959                           
   960                           ;main.c: 78: setupLCD();
   961  0384  120A  158A  26EF  120A  118A  	fcall	_setupLCD
   962                           
   963                           ;main.c: 79: setupADC();
   964  0389  120A  158A  2659  120A  118A  	fcall	_setupADC
   965                           
   966                           ;main.c: 81: unsigned char controlByte = 0b00001101;
   967  038E  300D               	movlw	13
   968  038F  1283               	bcf	3,5	;RP0=0, select bank0
   969  0390  1303               	bcf	3,6	;RP1=0, select bank0
   970  0391  00E9               	movwf	??_main
   971  0392  0869               	movf	??_main,w
   972  0393  00EC               	movwf	main@controlByte
   973                           
   974                           ;main.c: 82: spi_transfer(controlByte);
   975  0394  086C               	movf	main@controlByte,w
   976  0395  120A  158A  2623  120A  118A  	fcall	_spi_transfer
   977                           
   978                           ;main.c: 84: ser_putch(128);
   979  039A  3080               	movlw	128
   980  039B  120A  158A  2608  120A  118A  	fcall	_ser_putch
   981                           
   982                           ;main.c: 85: _delay((unsigned long)((3000)*(20000000/4000.0)));
   983  03A0  304D               	movlw	77
   984  03A1  1283               	bcf	3,5	;RP0=0, select bank0
   985  03A2  1303               	bcf	3,6	;RP1=0, select bank0
   986  03A3  00EB               	movwf	??_main+2
   987  03A4  3019               	movlw	25
   988  03A5  00EA               	movwf	??_main+1
   989  03A6  309A               	movlw	154
   990  03A7  00E9               	movwf	??_main
   991  03A8                     u1947:	
   992  03A8  0BE9               	decfsz	??_main,f
   993  03A9  2BA8               	goto	u1947
   994  03AA  0BEA               	decfsz	??_main+1,f
   995  03AB  2BA8               	goto	u1947
   996  03AC  0BEB               	decfsz	??_main+2,f
   997  03AD  2BA8               	goto	u1947
   998  03AE  2BAF               	nop2
   999                           
  1000                           ;main.c: 86: ser_putch(132);
  1001  03AF  3084               	movlw	132
  1002  03B0  120A  158A  2608  120A  118A  	fcall	_ser_putch
  1003                           
  1004                           ;main.c: 88: lcdWriteToDigitBCD(totalDistTrav);
  1005  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  1006  03B6  1303               	bcf	3,6	;RP1=0, select bank0
  1007  03B7  083B               	movf	_totalDistTrav+1,w
  1008  03B8  00CE               	movwf	lcdWriteToDigitBCD@data+1
  1009  03B9  083A               	movf	_totalDistTrav,w
  1010  03BA  00CD               	movwf	lcdWriteToDigitBCD@data
  1011  03BB  120A  118A  2581  120A  118A  	fcall	_lcdWriteToDigitBCD
  1012  03C0                     l119:	
  1013                           ;main.c: 91: while(1){
  1014                           
  1015                           
  1016                           ;main.c: 96: if (PB8Counter >= 10 && !RB0 == 0){
  1017  03C0  300A               	movlw	10
  1018  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  1019  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  1020  03C3  0241               	subwf	_PB8Counter,w
  1021  03C4  1803               	btfsc	3,0
  1022  03C5  1C06               	btfss	6,0	;volatile
  1023  03C6  2C22               	goto	l2117
  1024                           
  1025                           ;main.c: 97: adcClosest = 0;
  1026  03C7  01ED               	clrf	_adcClosest
  1027  03C8  01EE               	clrf	_adcClosest+1
  1028                           
  1029                           ;main.c: 98: for (loop = 0; loop < 400; loop++){
  1030  03C9  01AA               	clrf	_loop
  1031  03CA  01AB               	clrf	_loop+1
  1032  03CB  082B               	movf	_loop+1,w
  1033  03CC  3A80               	xorlw	128
  1034  03CD  00FF               	movwf	127
  1035  03CE  3081               	movlw	129
  1036  03CF  027F               	subwf	127,w
  1037  03D0  1D03               	skipz
  1038  03D1  2BD4               	goto	u1775
  1039  03D2  3090               	movlw	144
  1040  03D3  022A               	subwf	_loop,w
  1041  03D4                     u1775:	
  1042  03D4  1803               	btfsc	3,0
  1043  03D5  2C04               	goto	l2107
  1044  03D6                     l2095:	
  1045                           
  1046                           ;main.c: 99: moveCW();
  1047  03D6  120A  118A  2727  120A  118A  	fcall	_moveCW
  1048                           
  1049                           ;main.c: 100: ADCMain();
  1050  03DB  120A  158A  2687  120A  118A  	fcall	_ADCMain
  1051                           
  1052                           ;main.c: 101: if (adcRAW > adcClosest){
  1053  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  1054  03E1  1303               	bcf	3,6	;RP1=0, select bank0
  1055  03E2  0823               	movf	_adcRAW+1,w	;volatile
  1056  03E3  026E               	subwf	_adcClosest+1,w
  1057  03E4  1D03               	skipz
  1058  03E5  2BE8               	goto	u1785
  1059  03E6  0822               	movf	_adcRAW,w	;volatile
  1060  03E7  026D               	subwf	_adcClosest,w
  1061  03E8                     u1785:	
  1062  03E8  1803               	skipnc
  1063  03E9  2BF3               	goto	l2103
  1064                           
  1065                           ;main.c: 102: adcClosest = adcRAW;
  1066  03EA  0823               	movf	_adcRAW+1,w	;volatile
  1067  03EB  00EE               	movwf	_adcClosest+1
  1068  03EC  0822               	movf	_adcRAW,w	;volatile
  1069  03ED  00ED               	movwf	_adcClosest
  1070                           
  1071                           ;main.c: 103: stepClosest = stepCount;
  1072  03EE  0848               	movf	_stepCount,w
  1073  03EF  00B4               	movwf	_stepClosest
  1074  03F0  01B5               	clrf	_stepClosest+1
  1075  03F1  1BB4               	btfsc	_stepClosest,7
  1076  03F2  03B5               	decf	_stepClosest+1,f
  1077  03F3                     l2103:	
  1078  03F3  3001               	movlw	1
  1079  03F4  07AA               	addwf	_loop,f
  1080  03F5  1803               	skipnc
  1081  03F6  0AAB               	incf	_loop+1,f
  1082  03F7  3000               	movlw	0
  1083  03F8  07AB               	addwf	_loop+1,f
  1084  03F9  082B               	movf	_loop+1,w
  1085  03FA  3A80               	xorlw	128
  1086  03FB  00FF               	movwf	127
  1087  03FC  3081               	movlw	129
  1088  03FD  027F               	subwf	127,w
  1089  03FE  1D03               	skipz
  1090  03FF  2C02               	goto	u1795
  1091  0400  3090               	movlw	144
  1092  0401  022A               	subwf	_loop,w
  1093  0402                     u1795:	
  1094  0402  1C03               	skipc
  1095  0403  2BD6               	goto	l2095
  1096  0404                     l2107:	
  1097                           
  1098                           ;main.c: 104: }
  1099                           ;main.c: 105: }
  1100                           ;main.c: 107: for (loop = stepCount; loop != stepClosest; loop++){
  1101  0404  1283               	bcf	3,5	;RP0=0, select bank0
  1102  0405  1303               	bcf	3,6	;RP1=0, select bank0
  1103  0406  0848               	movf	_stepCount,w
  1104  0407  00AA               	movwf	_loop
  1105  0408  01AB               	clrf	_loop+1
  1106  0409  1BAA               	btfsc	_loop,7
  1107  040A  03AB               	decf	_loop+1,f
  1108  040B                     l2113:	
  1109  040B  0835               	movf	_stepClosest+1,w
  1110  040C  062B               	xorwf	_loop+1,w
  1111  040D  1D03               	skipz
  1112  040E  2C11               	goto	u1805
  1113  040F  0834               	movf	_stepClosest,w
  1114  0410  062A               	xorwf	_loop,w
  1115  0411                     u1805:	
  1116  0411  1903               	btfsc	3,2
  1117  0412  2C21               	goto	l2115
  1118                           
  1119                           ;main.c: 108: moveCCW();
  1120  0413  120A  118A  2772  120A  118A  	fcall	_moveCCW
  1121  0418  3001               	movlw	1
  1122  0419  1283               	bcf	3,5	;RP0=0, select bank0
  1123  041A  1303               	bcf	3,6	;RP1=0, select bank0
  1124  041B  07AA               	addwf	_loop,f
  1125  041C  1803               	skipnc
  1126  041D  0AAB               	incf	_loop+1,f
  1127  041E  3000               	movlw	0
  1128  041F  07AB               	addwf	_loop+1,f
  1129  0420  2C0B               	goto	l2113
  1130  0421                     l2115:	
  1131                           
  1132                           ;main.c: 109: }
  1133                           ;main.c: 110: PB8Counter = 0;
  1134  0421  01C1               	clrf	_PB8Counter
  1135  0422                     l2117:	
  1136                           
  1137                           ;main.c: 111: }
  1138                           ;main.c: 116: if (FLAG_Play >= 10 && getSensorData(18,1) == 0x00){
  1139  0422  300A               	movlw	10
  1140  0423  023E               	subwf	_FLAG_Play,w	;volatile
  1141  0424  1C03               	skipc
  1142  0425  2C9A               	goto	l2137
  1143  0426  01CC               	clrf	getSensorData@bytes
  1144  0427  0ACC               	incf	getSensorData@bytes,f
  1145  0428  3012               	movlw	18
  1146  0429  120A  158A  27C2  120A  118A  	fcall	_getSensorData
  1147  042E  1283               	bcf	3,5	;RP0=0, select bank0
  1148  042F  1303               	bcf	3,6	;RP1=0, select bank0
  1149  0430  084C               	movf	?_getSensorData,w
  1150  0431  044D               	iorwf	?_getSensorData+1,w
  1151  0432  1D03               	btfss	3,2
  1152  0433  2C9A               	goto	l2137
  1153                           
  1154                           ;main.c: 117: Drive(1,144,0x7F,0xFF);
  1155  0434  3001               	movlw	1
  1156  0435  00CB               	movwf	Drive@speedH
  1157  0436  3000               	movlw	0
  1158  0437  00CC               	movwf	Drive@speedH+1
  1159  0438  3090               	movlw	144
  1160  0439  00CD               	movwf	Drive@speedL
  1161  043A  3000               	movlw	0
  1162  043B  00CE               	movwf	Drive@speedL+1
  1163  043C  307F               	movlw	127
  1164  043D  00CF               	movwf	Drive@radH
  1165  043E  3000               	movlw	0
  1166  043F  00D0               	movwf	Drive@radH+1
  1167  0440  30FF               	movlw	255
  1168  0441  00D1               	movwf	Drive@radL
  1169  0442  3000               	movlw	0
  1170  0443  00D2               	movwf	Drive@radL+1
  1171  0444  120A  158A  26CA  120A  118A  	fcall	_Drive
  1172  0449                     l2131:	
  1173                           ;main.c: 118: while (totalDistTrav < 4000){
  1174                           
  1175  0449  1283               	bcf	3,5	;RP0=0, select bank0
  1176  044A  1303               	bcf	3,6	;RP1=0, select bank0
  1177  044B  083B               	movf	_totalDistTrav+1,w
  1178  044C  3A80               	xorlw	128
  1179  044D  00FF               	movwf	127
  1180  044E  308F               	movlw	143
  1181  044F  027F               	subwf	127,w
  1182  0450  1D03               	skipz
  1183  0451  2C54               	goto	u1835
  1184  0452  30A0               	movlw	160
  1185  0453  023A               	subwf	_totalDistTrav,w
  1186  0454                     u1835:	
  1187  0454  1803               	btfsc	3,0
  1188  0455  2C82               	goto	l2133
  1189                           
  1190                           ;main.c: 119: distTrav = getSensorData(19,2);
  1191  0456  3002               	movlw	2
  1192  0457  1283               	bcf	3,5	;RP0=0, select bank0
  1193  0458  1303               	bcf	3,6	;RP1=0, select bank0
  1194  0459  00E9               	movwf	??_main
  1195  045A  0869               	movf	??_main,w
  1196  045B  00CC               	movwf	getSensorData@bytes
  1197  045C  3013               	movlw	19
  1198  045D  120A  158A  27C2  120A  118A  	fcall	_getSensorData
  1199  0462  1283               	bcf	3,5	;RP0=0, select bank0
  1200  0463  1303               	bcf	3,6	;RP1=0, select bank0
  1201  0464  084D               	movf	?_getSensorData+1,w
  1202  0465  00A9               	movwf	_distTrav+1
  1203  0466  084C               	movf	?_getSensorData,w
  1204  0467  00A8               	movwf	_distTrav
  1205                           
  1206                           ;main.c: 120: totalDistTrav = (totalDistTrav + distTrav);
  1207  0468  0828               	movf	_distTrav,w
  1208  0469  073A               	addwf	_totalDistTrav,w
  1209  046A  00BA               	movwf	_totalDistTrav
  1210  046B  0829               	movf	_distTrav+1,w
  1211  046C  1803               	skipnc
  1212  046D  0A29               	incf	_distTrav+1,w
  1213  046E  073B               	addwf	_totalDistTrav+1,w
  1214  046F  00BB               	movwf	_totalDistTrav+1
  1215                           
  1216                           ;main.c: 122: lcdSetCursor(0x00);
  1217  0470  3000               	movlw	0
  1218  0471  120A  158A  25E1  120A  118A  	fcall	_lcdSetCursor
  1219                           
  1220                           ;main.c: 123: lcdWriteToDigitBCD(totalDistTrav);
  1221  0476  1283               	bcf	3,5	;RP0=0, select bank0
  1222  0477  1303               	bcf	3,6	;RP1=0, select bank0
  1223  0478  083B               	movf	_totalDistTrav+1,w
  1224  0479  00CE               	movwf	lcdWriteToDigitBCD@data+1
  1225  047A  083A               	movf	_totalDistTrav,w
  1226  047B  00CD               	movwf	lcdWriteToDigitBCD@data
  1227  047C  120A  118A  2581  120A  118A  	fcall	_lcdWriteToDigitBCD
  1228  0481  2C49               	goto	l2131
  1229  0482                     l2133:	
  1230                           
  1231                           ;main.c: 124: }
  1232                           ;main.c: 126: Drive(0,0,0x7F,0xFF);
  1233  0482  3000               	movlw	0
  1234  0483  1283               	bcf	3,5	;RP0=0, select bank0
  1235  0484  1303               	bcf	3,6	;RP1=0, select bank0
  1236  0485  00CB               	movwf	Drive@speedH
  1237  0486  00CC               	movwf	Drive@speedH+1
  1238  0487  3000               	movlw	0
  1239  0488  00CD               	movwf	Drive@speedL
  1240  0489  00CE               	movwf	Drive@speedL+1
  1241  048A  307F               	movlw	127
  1242  048B  00CF               	movwf	Drive@radH
  1243  048C  3000               	movlw	0
  1244  048D  00D0               	movwf	Drive@radH+1
  1245  048E  30FF               	movlw	255
  1246  048F  00D1               	movwf	Drive@radL
  1247  0490  3000               	movlw	0
  1248  0491  00D2               	movwf	Drive@radL+1
  1249  0492  120A  158A  26CA  120A  118A  	fcall	_Drive
  1250                           
  1251                           ;main.c: 127: FLAG_Play = 0;
  1252  0497  1283               	bcf	3,5	;RP0=0, select bank0
  1253  0498  1303               	bcf	3,6	;RP1=0, select bank0
  1254  0499  01BE               	clrf	_FLAG_Play	;volatile
  1255  049A                     l2137:	
  1256                           
  1257                           ;main.c: 128: }
  1258                           ;main.c: 131: if (FLAG_Advanced >= 10 && getSensorData(18,1) == 0x00){
  1259  049A  300A               	movlw	10
  1260  049B  023D               	subwf	_FLAG_Advanced,w	;volatile
  1261  049C  1C03               	skipc
  1262  049D  2D6D               	goto	l2175
  1263  049E  01CC               	clrf	getSensorData@bytes
  1264  049F  0ACC               	incf	getSensorData@bytes,f
  1265  04A0  3012               	movlw	18
  1266  04A1  120A  158A  27C2  120A  118A  	fcall	_getSensorData
  1267  04A6  1283               	bcf	3,5	;RP0=0, select bank0
  1268  04A7  1303               	bcf	3,6	;RP1=0, select bank0
  1269  04A8  084C               	movf	?_getSensorData,w
  1270  04A9  044D               	iorwf	?_getSensorData+1,w
  1271  04AA  1D03               	btfss	3,2
  1272  04AB  2D6D               	goto	l2175
  1273                           
  1274                           ;main.c: 132: totalDistTrav = 0;
  1275  04AC  01BA               	clrf	_totalDistTrav
  1276  04AD  01BB               	clrf	_totalDistTrav+1
  1277                           
  1278                           ;main.c: 134: for (loop = 0; loop < 4; loop++){
  1279  04AE  01AA               	clrf	_loop
  1280  04AF  01AB               	clrf	_loop+1
  1281  04B0  082B               	movf	_loop+1,w
  1282  04B1  3A80               	xorlw	128
  1283  04B2  00FF               	movwf	127
  1284  04B3  3080               	movlw	128
  1285  04B4  027F               	subwf	127,w
  1286  04B5  1D03               	skipz
  1287  04B6  2CB9               	goto	u1865
  1288  04B7  3004               	movlw	4
  1289  04B8  022A               	subwf	_loop,w
  1290  04B9                     u1865:	
  1291  04B9  1803               	btfsc	3,0
  1292  04BA  2D55               	goto	l2171
  1293  04BB                     l2147:	
  1294                           
  1295                           ;main.c: 137: Drive(0,250,0xFF,0xFF);
  1296  04BB  3000               	movlw	0
  1297  04BC  1283               	bcf	3,5	;RP0=0, select bank0
  1298  04BD  1303               	bcf	3,6	;RP1=0, select bank0
  1299  04BE  00CB               	movwf	Drive@speedH
  1300  04BF  00CC               	movwf	Drive@speedH+1
  1301  04C0  30FA               	movlw	250
  1302  04C1  00CD               	movwf	Drive@speedL
  1303  04C2  3000               	movlw	0
  1304  04C3  00CE               	movwf	Drive@speedL+1
  1305  04C4  30FF               	movlw	255
  1306  04C5  00CF               	movwf	Drive@radH
  1307  04C6  3000               	movlw	0
  1308  04C7  00D0               	movwf	Drive@radH+1
  1309  04C8  30FF               	movlw	255
  1310  04C9  00D1               	movwf	Drive@radL
  1311  04CA  3000               	movlw	0
  1312  04CB  00D2               	movwf	Drive@radL+1
  1313  04CC  120A  158A  26CA  120A  118A  	fcall	_Drive
  1314  04D1                     l2151:	
  1315                           ;main.c: 138: while (angleTurned > -90){
  1316                           
  1317  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  1318  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  1319  04D3  0825               	movf	_angleTurned+1,w
  1320  04D4  3A80               	xorlw	128
  1321  04D5  00FF               	movwf	127
  1322  04D6  307F               	movlw	127
  1323  04D7  027F               	subwf	127,w
  1324  04D8  1D03               	skipz
  1325  04D9  2CDC               	goto	u1875
  1326  04DA  30A7               	movlw	167
  1327  04DB  0224               	subwf	_angleTurned,w
  1328  04DC                     u1875:	
  1329  04DC  1C03               	btfss	3,0
  1330  04DD  2CF1               	goto	l2153
  1331                           
  1332                           ;main.c: 139: angleTurned = getSensorData(20,2);
  1333  04DE  3002               	movlw	2
  1334  04DF  1283               	bcf	3,5	;RP0=0, select bank0
  1335  04E0  1303               	bcf	3,6	;RP1=0, select bank0
  1336  04E1  00E9               	movwf	??_main
  1337  04E2  0869               	movf	??_main,w
  1338  04E3  00CC               	movwf	getSensorData@bytes
  1339  04E4  3014               	movlw	20
  1340  04E5  120A  158A  27C2  120A  118A  	fcall	_getSensorData
  1341  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  1342  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  1343  04EC  084D               	movf	?_getSensorData+1,w
  1344  04ED  00A5               	movwf	_angleTurned+1
  1345  04EE  084C               	movf	?_getSensorData,w
  1346  04EF  00A4               	movwf	_angleTurned
  1347  04F0  2CD1               	goto	l2151
  1348  04F1                     l2153:	
  1349                           
  1350                           ;main.c: 140: }
  1351                           ;main.c: 143: Drive(0,250,0x7F,0xFF);
  1352  04F1  3000               	movlw	0
  1353  04F2  1283               	bcf	3,5	;RP0=0, select bank0
  1354  04F3  1303               	bcf	3,6	;RP1=0, select bank0
  1355  04F4  00CB               	movwf	Drive@speedH
  1356  04F5  00CC               	movwf	Drive@speedH+1
  1357  04F6  30FA               	movlw	250
  1358  04F7  00CD               	movwf	Drive@speedL
  1359  04F8  3000               	movlw	0
  1360  04F9  00CE               	movwf	Drive@speedL+1
  1361  04FA  307F               	movlw	127
  1362  04FB  00CF               	movwf	Drive@radH
  1363  04FC  3000               	movlw	0
  1364  04FD  00D0               	movwf	Drive@radH+1
  1365  04FE  30FF               	movlw	255
  1366  04FF  00D1               	movwf	Drive@radL
  1367  0500  3000               	movlw	0
  1368  0501  00D2               	movwf	Drive@radL+1
  1369  0502  120A  158A  26CA  120A  118A  	fcall	_Drive
  1370  0507                     l2163:	
  1371                           ;main.c: 144: while (totalDistTrav < 1000){
  1372                           
  1373  0507  1283               	bcf	3,5	;RP0=0, select bank0
  1374  0508  1303               	bcf	3,6	;RP1=0, select bank0
  1375  0509  083B               	movf	_totalDistTrav+1,w
  1376  050A  3A80               	xorlw	128
  1377  050B  00FF               	movwf	127
  1378  050C  3083               	movlw	131
  1379  050D  027F               	subwf	127,w
  1380  050E  1D03               	skipz
  1381  050F  2D12               	goto	u1885
  1382  0510  30E8               	movlw	232
  1383  0511  023A               	subwf	_totalDistTrav,w
  1384  0512                     u1885:	
  1385  0512  1803               	btfsc	3,0
  1386  0513  2D40               	goto	l2165
  1387                           
  1388                           ;main.c: 145: distTrav = getSensorData(19,2);
  1389  0514  3002               	movlw	2
  1390  0515  1283               	bcf	3,5	;RP0=0, select bank0
  1391  0516  1303               	bcf	3,6	;RP1=0, select bank0
  1392  0517  00E9               	movwf	??_main
  1393  0518  0869               	movf	??_main,w
  1394  0519  00CC               	movwf	getSensorData@bytes
  1395  051A  3013               	movlw	19
  1396  051B  120A  158A  27C2  120A  118A  	fcall	_getSensorData
  1397  0520  1283               	bcf	3,5	;RP0=0, select bank0
  1398  0521  1303               	bcf	3,6	;RP1=0, select bank0
  1399  0522  084D               	movf	?_getSensorData+1,w
  1400  0523  00A9               	movwf	_distTrav+1
  1401  0524  084C               	movf	?_getSensorData,w
  1402  0525  00A8               	movwf	_distTrav
  1403                           
  1404                           ;main.c: 146: totalDistTrav = (totalDistTrav + distTrav);
  1405  0526  0828               	movf	_distTrav,w
  1406  0527  073A               	addwf	_totalDistTrav,w
  1407  0528  00BA               	movwf	_totalDistTrav
  1408  0529  0829               	movf	_distTrav+1,w
  1409  052A  1803               	skipnc
  1410  052B  0A29               	incf	_distTrav+1,w
  1411  052C  073B               	addwf	_totalDistTrav+1,w
  1412  052D  00BB               	movwf	_totalDistTrav+1
  1413                           
  1414                           ;main.c: 148: lcdSetCursor(0x00);
  1415  052E  3000               	movlw	0
  1416  052F  120A  158A  25E1  120A  118A  	fcall	_lcdSetCursor
  1417                           
  1418                           ;main.c: 149: lcdWriteToDigitBCD(totalDistTrav);
  1419  0534  1283               	bcf	3,5	;RP0=0, select bank0
  1420  0535  1303               	bcf	3,6	;RP1=0, select bank0
  1421  0536  083B               	movf	_totalDistTrav+1,w
  1422  0537  00CE               	movwf	lcdWriteToDigitBCD@data+1
  1423  0538  083A               	movf	_totalDistTrav,w
  1424  0539  00CD               	movwf	lcdWriteToDigitBCD@data
  1425  053A  120A  118A  2581  120A  118A  	fcall	_lcdWriteToDigitBCD
  1426  053F  2D07               	goto	l2163
  1427  0540                     l2165:	
  1428                           
  1429                           ;main.c: 150: }
  1430                           ;main.c: 151: totalDistTrav = 0;
  1431  0540  1283               	bcf	3,5	;RP0=0, select bank0
  1432  0541  1303               	bcf	3,6	;RP1=0, select bank0
  1433  0542  01BA               	clrf	_totalDistTrav
  1434  0543  01BB               	clrf	_totalDistTrav+1
  1435  0544  3001               	movlw	1
  1436  0545  07AA               	addwf	_loop,f
  1437  0546  1803               	skipnc
  1438  0547  0AAB               	incf	_loop+1,f
  1439  0548  3000               	movlw	0
  1440  0549  07AB               	addwf	_loop+1,f
  1441  054A  082B               	movf	_loop+1,w
  1442  054B  3A80               	xorlw	128
  1443  054C  00FF               	movwf	127
  1444  054D  3080               	movlw	128
  1445  054E  027F               	subwf	127,w
  1446  054F  1D03               	skipz
  1447  0550  2D53               	goto	u1895
  1448  0551  3004               	movlw	4
  1449  0552  022A               	subwf	_loop,w
  1450  0553                     u1895:	
  1451  0553  1C03               	skipc
  1452  0554  2CBB               	goto	l2147
  1453  0555                     l2171:	
  1454                           
  1455                           ;main.c: 152: }
  1456                           ;main.c: 154: Drive(0,0,0x7F,0xFF);
  1457  0555  3000               	movlw	0
  1458  0556  1283               	bcf	3,5	;RP0=0, select bank0
  1459  0557  1303               	bcf	3,6	;RP1=0, select bank0
  1460  0558  00CB               	movwf	Drive@speedH
  1461  0559  00CC               	movwf	Drive@speedH+1
  1462  055A  3000               	movlw	0
  1463  055B  00CD               	movwf	Drive@speedL
  1464  055C  00CE               	movwf	Drive@speedL+1
  1465  055D  307F               	movlw	127
  1466  055E  00CF               	movwf	Drive@radH
  1467  055F  3000               	movlw	0
  1468  0560  00D0               	movwf	Drive@radH+1
  1469  0561  30FF               	movlw	255
  1470  0562  00D1               	movwf	Drive@radL
  1471  0563  3000               	movlw	0
  1472  0564  00D2               	movwf	Drive@radL+1
  1473  0565  120A  158A  26CA  120A  118A  	fcall	_Drive
  1474                           
  1475                           ;main.c: 155: FLAG_Advanced = 0;
  1476  056A  1283               	bcf	3,5	;RP0=0, select bank0
  1477  056B  1303               	bcf	3,6	;RP1=0, select bank0
  1478  056C  01BD               	clrf	_FLAG_Advanced	;volatile
  1479  056D                     l2175:	
  1480                           
  1481                           ;main.c: 156: }
  1482                           ;main.c: 159: if(FLAG_AdvPlay >= 10 && getSensorData(18,1) == 0x00){
  1483  056D  300A               	movlw	10
  1484  056E  023C               	subwf	_FLAG_AdvPlay,w	;volatile
  1485  056F  1C03               	skipc
  1486  0570  2BC0               	goto	l119
  1487  0571  01CC               	clrf	getSensorData@bytes
  1488  0572  0ACC               	incf	getSensorData@bytes,f
  1489  0573  3012               	movlw	18
  1490  0574  120A  158A  27C2  120A  118A  	fcall	_getSensorData
  1491  0579  1283               	bcf	3,5	;RP0=0, select bank0
  1492  057A  1303               	bcf	3,6	;RP1=0, select bank0
  1493  057B  084C               	movf	?_getSensorData,w
  1494  057C  044D               	iorwf	?_getSensorData+1,w
  1495  057D  1D03               	btfss	3,2
  1496  057E  2BC0               	goto	l119
  1497                           
  1498                           ;main.c: 163: FLAG_AdvPlay = 0;
  1499  057F  01BC               	clrf	_FLAG_AdvPlay	;volatile
  1500  0580  2BC0               	goto	l119
  1501  0581                     __end_of_main:	
  1502                           
  1503                           	psect	text1
  1504  0E23                     __ptext1:	
  1505 ;; *************** function _spi_transfer *****************
  1506 ;; Defined at:
  1507 ;;		line 23 in file "SPI.c"
  1508 ;; Parameters:    Size  Location     Type
  1509 ;;  data            1    wreg     unsigned char 
  1510 ;; Auto vars:     Size  Location     Type
  1511 ;;  data            1    2[BANK0 ] unsigned char 
  1512 ;;  temp            1    1[BANK0 ] unsigned char 
  1513 ;; Return value:  Size  Location     Type
  1514 ;;                  1    wreg      unsigned char 
  1515 ;; Registers used:
  1516 ;;		wreg, status,2
  1517 ;; Tracked objects:
  1518 ;;		On entry : 0/0
  1519 ;;		On exit  : 0/0
  1520 ;;		Unchanged: 0/0
  1521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1522 ;;      Params:         0       0       0       0       0
  1523 ;;      Locals:         0       2       0       0       0
  1524 ;;      Temps:          0       1       0       0       0
  1525 ;;      Totals:         0       3       0       0       0
  1526 ;;Total ram usage:        3 bytes
  1527 ;; Hardware stack levels used:    1
  1528 ;; Hardware stack levels required when called:    3
  1529 ;; This function calls:
  1530 ;;		Nothing
  1531 ;; This function is called by:
  1532 ;;		_main
  1533 ;; This function uses a non-reentrant model
  1534 ;;
  1535                           
  1536                           
  1537                           ;psect for function _spi_transfer
  1538  0E23                     _spi_transfer:	
  1539                           
  1540                           ;incstack = 0
  1541                           ; Regs used in _spi_transfer: [wreg+status,2]
  1542                           ;spi_transfer@data stored from wreg
  1543  0E23  1283               	bcf	3,5	;RP0=0, select bank0
  1544  0E24  1303               	bcf	3,6	;RP1=0, select bank0
  1545  0E25  00CC               	movwf	spi_transfer@data
  1546                           
  1547                           ;SPI.c: 24: unsigned char temp = 0;
  1548  0E26  01CB               	clrf	spi_transfer@temp
  1549                           
  1550                           ;SPI.c: 26: SSPIF = 0;
  1551  0E27  118C               	bcf	12,3	;volatile
  1552                           
  1553                           ;SPI.c: 27: SSPBUF = data;
  1554  0E28  084C               	movf	spi_transfer@data,w
  1555  0E29  0093               	movwf	19	;volatile
  1556  0E2A                     l258:	
  1557                           ;SPI.c: 29: while (SSPIF == 0);
  1558                           
  1559  0E2A  1D8C               	btfss	12,3	;volatile
  1560  0E2B  2E2A               	goto	l258
  1561                           
  1562                           ;SPI.c: 30: temp = SSPBUF;
  1563  0E2C  0813               	movf	19,w	;volatile
  1564  0E2D  00CA               	movwf	??_spi_transfer
  1565  0E2E  084A               	movf	??_spi_transfer,w
  1566  0E2F  00CB               	movwf	spi_transfer@temp
  1567                           
  1568                           ;SPI.c: 31: SSPIF = 0;
  1569  0E30  118C               	bcf	12,3	;volatile
  1570  0E31  0008               	return
  1571  0E32                     __end_of_spi_transfer:	
  1572                           ;SPI.c: 33: return temp;
  1573                           ;	Return value of _spi_transfer is never used
  1574                           
  1575                           
  1576                           	psect	text2
  1577  0E6F                     __ptext2:	
  1578 ;; *************** function _setupSPI *****************
  1579 ;; Defined at:
  1580 ;;		line 4 in file "SPI.c"
  1581 ;; Parameters:    Size  Location     Type
  1582 ;;		None
  1583 ;; Auto vars:     Size  Location     Type
  1584 ;;		None
  1585 ;; Return value:  Size  Location     Type
  1586 ;;                  1    wreg      void 
  1587 ;; Registers used:
  1588 ;;		wreg, status,2
  1589 ;; Tracked objects:
  1590 ;;		On entry : 0/0
  1591 ;;		On exit  : 0/0
  1592 ;;		Unchanged: 0/0
  1593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1594 ;;      Params:         0       0       0       0       0
  1595 ;;      Locals:         0       0       0       0       0
  1596 ;;      Temps:          0       0       0       0       0
  1597 ;;      Totals:         0       0       0       0       0
  1598 ;;Total ram usage:        0 bytes
  1599 ;; Hardware stack levels used:    1
  1600 ;; Hardware stack levels required when called:    3
  1601 ;; This function calls:
  1602 ;;		Nothing
  1603 ;; This function is called by:
  1604 ;;		_main
  1605 ;; This function uses a non-reentrant model
  1606 ;;
  1607                           
  1608                           
  1609                           ;psect for function _setupSPI
  1610  0E6F                     _setupSPI:	
  1611                           
  1612                           ;SPI.c: 6: TRISB = 0b00000000;
  1613                           
  1614                           ;incstack = 0
  1615                           ; Regs used in _setupSPI: [wreg+status,2]
  1616  0E6F  1683               	bsf	3,5	;RP0=1, select bank1
  1617  0E70  1303               	bcf	3,6	;RP1=0, select bank1
  1618  0E71  0186               	clrf	6	;volatile
  1619                           
  1620                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  1621  0E72  3040               	movlw	64
  1622  0E73  0094               	movwf	20	;volatile
  1623                           
  1624                           ;SPI.c: 9: SSPCON = 0b00100000;
  1625  0E74  3020               	movlw	32
  1626  0E75  1283               	bcf	3,5	;RP0=0, select bank0
  1627  0E76  1303               	bcf	3,6	;RP1=0, select bank0
  1628  0E77  0094               	movwf	20	;volatile
  1629                           
  1630                           ;SPI.c: 10: TRISC = 0b11010000;
  1631  0E78  30D0               	movlw	208
  1632  0E79  1683               	bsf	3,5	;RP0=1, select bank1
  1633  0E7A  1303               	bcf	3,6	;RP1=0, select bank1
  1634  0E7B  0087               	movwf	7	;volatile
  1635                           
  1636                           ;SPI.c: 11: PORTC = 0b00000011;
  1637  0E7C  3003               	movlw	3
  1638  0E7D  1283               	bcf	3,5	;RP0=0, select bank0
  1639  0E7E  1303               	bcf	3,6	;RP1=0, select bank0
  1640  0E7F  0087               	movwf	7	;volatile
  1641                           
  1642                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  1643  0E80  3004               	movlw	4
  1644  0E81  1683               	bsf	3,5	;RP0=1, select bank1
  1645  0E82  1303               	bcf	3,6	;RP1=0, select bank1
  1646  0E83  0081               	movwf	1	;volatile
  1647                           
  1648                           ;SPI.c: 16: TMR0IE = 1;
  1649  0E84  168B               	bsf	11,5	;volatile
  1650                           
  1651                           ;SPI.c: 19: (GIE = 1);
  1652  0E85  178B               	bsf	11,7	;volatile
  1653  0E86  0008               	return
  1654  0E87                     __end_of_setupSPI:	
  1655                           
  1656                           	psect	text3
  1657  0EEF                     __ptext3:	
  1658 ;; *************** function _setupLCD *****************
  1659 ;; Defined at:
  1660 ;;		line 86 in file "LCD.c"
  1661 ;; Parameters:    Size  Location     Type
  1662 ;;		None
  1663 ;; Auto vars:     Size  Location     Type
  1664 ;;		None
  1665 ;; Return value:  Size  Location     Type
  1666 ;;                  1    wreg      void 
  1667 ;; Registers used:
  1668 ;;		wreg, status,2, status,0, pclath, cstack
  1669 ;; Tracked objects:
  1670 ;;		On entry : 0/0
  1671 ;;		On exit  : 0/0
  1672 ;;		Unchanged: 0/0
  1673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1674 ;;      Params:         0       0       0       0       0
  1675 ;;      Locals:         0       0       0       0       0
  1676 ;;      Temps:          0       0       0       0       0
  1677 ;;      Totals:         0       0       0       0       0
  1678 ;;Total ram usage:        0 bytes
  1679 ;; Hardware stack levels used:    1
  1680 ;; Hardware stack levels required when called:    4
  1681 ;; This function calls:
  1682 ;;		_lcdWriteControl
  1683 ;; This function is called by:
  1684 ;;		_main
  1685 ;; This function uses a non-reentrant model
  1686 ;;
  1687                           
  1688                           
  1689                           ;psect for function _setupLCD
  1690  0EEF                     _setupLCD:	
  1691                           
  1692                           ;LCD.c: 88: ADCON1 = 0b00000010;
  1693                           
  1694                           ;incstack = 0
  1695                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  1696  0EEF  3002               	movlw	2
  1697  0EF0  1683               	bsf	3,5	;RP0=1, select bank1
  1698  0EF1  1303               	bcf	3,6	;RP1=0, select bank1
  1699  0EF2  009F               	movwf	31	;volatile
  1700                           
  1701                           ;LCD.c: 90: PORTD = 0;
  1702  0EF3  1283               	bcf	3,5	;RP0=0, select bank0
  1703  0EF4  1303               	bcf	3,6	;RP1=0, select bank0
  1704  0EF5  0188               	clrf	8	;volatile
  1705                           
  1706                           ;LCD.c: 91: PORTE = 0;
  1707  0EF6  0189               	clrf	9	;volatile
  1708                           
  1709                           ;LCD.c: 93: TRISD = 0b00000000;
  1710  0EF7  1683               	bsf	3,5	;RP0=1, select bank1
  1711  0EF8  1303               	bcf	3,6	;RP1=0, select bank1
  1712  0EF9  0188               	clrf	8	;volatile
  1713                           
  1714                           ;LCD.c: 94: TRISE = 0b00000000;
  1715  0EFA  0189               	clrf	9	;volatile
  1716                           
  1717                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  1718  0EFB  3001               	movlw	1
  1719  0EFC  120A  158A  2645  120A  158A  	fcall	_lcdWriteControl
  1720                           
  1721                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  1722  0F01  3038               	movlw	56
  1723  0F02  120A  158A  2645  120A  158A  	fcall	_lcdWriteControl
  1724                           
  1725                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  1726  0F07  300C               	movlw	12
  1727  0F08  120A  158A  2645  120A  158A  	fcall	_lcdWriteControl
  1728                           
  1729                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  1730  0F0D  3006               	movlw	6
  1731  0F0E  120A  158A  2645  120A  158A  	fcall	_lcdWriteControl
  1732                           
  1733                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  1734  0F13  3002               	movlw	2
  1735  0F14  120A  158A  2645   	fcall	_lcdWriteControl
  1736  0F17  0008               	return
  1737  0F18                     __end_of_setupLCD:	
  1738                           
  1739                           	psect	text4
  1740  0E59                     __ptext4:	
  1741 ;; *************** function _setupADC *****************
  1742 ;; Defined at:
  1743 ;;		line 8 in file "ADC.c"
  1744 ;; Parameters:    Size  Location     Type
  1745 ;;		None
  1746 ;; Auto vars:     Size  Location     Type
  1747 ;;		None
  1748 ;; Return value:  Size  Location     Type
  1749 ;;                  1    wreg      void 
  1750 ;; Registers used:
  1751 ;;		wreg, status,2
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1757 ;;      Params:         0       0       0       0       0
  1758 ;;      Locals:         0       0       0       0       0
  1759 ;;      Temps:          0       1       0       0       0
  1760 ;;      Totals:         0       1       0       0       0
  1761 ;;Total ram usage:        1 bytes
  1762 ;; Hardware stack levels used:    1
  1763 ;; Hardware stack levels required when called:    3
  1764 ;; This function calls:
  1765 ;;		Nothing
  1766 ;; This function is called by:
  1767 ;;		_main
  1768 ;; This function uses a non-reentrant model
  1769 ;;
  1770                           
  1771                           
  1772                           ;psect for function _setupADC
  1773  0E59                     _setupADC:	
  1774                           
  1775                           ;ADC.c: 9: PORTA = 0;
  1776                           
  1777                           ;incstack = 0
  1778                           ; Regs used in _setupADC: [wreg+status,2]
  1779  0E59  1283               	bcf	3,5	;RP0=0, select bank0
  1780  0E5A  1303               	bcf	3,6	;RP1=0, select bank0
  1781  0E5B  0185               	clrf	5	;volatile
  1782                           
  1783                           ;ADC.c: 10: TRISA = 0b11111111;
  1784  0E5C  30FF               	movlw	255
  1785  0E5D  1683               	bsf	3,5	;RP0=1, select bank1
  1786  0E5E  1303               	bcf	3,6	;RP1=0, select bank1
  1787  0E5F  0085               	movwf	5	;volatile
  1788                           
  1789                           ;ADC.c: 13: ADCON0 = 0b10001001;
  1790  0E60  3089               	movlw	137
  1791  0E61  1283               	bcf	3,5	;RP0=0, select bank0
  1792  0E62  1303               	bcf	3,6	;RP1=0, select bank0
  1793  0E63  009F               	movwf	31	;volatile
  1794                           
  1795                           ;ADC.c: 14: ADCON1 = 0b00000010;
  1796  0E64  3002               	movlw	2
  1797  0E65  1683               	bsf	3,5	;RP0=1, select bank1
  1798  0E66  1303               	bcf	3,6	;RP1=0, select bank1
  1799  0E67  009F               	movwf	31	;volatile
  1800                           
  1801                           ;ADC.c: 16: _delay((unsigned long)((50)*(20000000/4000000.0)));
  1802  0E68  3053               	movlw	83
  1803  0E69  1283               	bcf	3,5	;RP0=0, select bank0
  1804  0E6A  1303               	bcf	3,6	;RP1=0, select bank0
  1805  0E6B  00CA               	movwf	??_setupADC
  1806  0E6C                     u1957:	
  1807  0E6C  0BCA               	decfsz	??_setupADC,f
  1808  0E6D  2E6C               	goto	u1957
  1809  0E6E  0008               	return
  1810  0E6F                     __end_of_setupADC:	
  1811                           
  1812                           	psect	text5
  1813  0E14                     __ptext5:	
  1814 ;; *************** function _ser_init *****************
  1815 ;; Defined at:
  1816 ;;		line 5 in file "ser.c"
  1817 ;; Parameters:    Size  Location     Type
  1818 ;;		None
  1819 ;; Auto vars:     Size  Location     Type
  1820 ;;		None
  1821 ;; Return value:  Size  Location     Type
  1822 ;;                  1    wreg      void 
  1823 ;; Registers used:
  1824 ;;		wreg
  1825 ;; Tracked objects:
  1826 ;;		On entry : 0/0
  1827 ;;		On exit  : 0/0
  1828 ;;		Unchanged: 0/0
  1829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1830 ;;      Params:         0       0       0       0       0
  1831 ;;      Locals:         0       0       0       0       0
  1832 ;;      Temps:          0       0       0       0       0
  1833 ;;      Totals:         0       0       0       0       0
  1834 ;;Total ram usage:        0 bytes
  1835 ;; Hardware stack levels used:    1
  1836 ;; Hardware stack levels required when called:    3
  1837 ;; This function calls:
  1838 ;;		Nothing
  1839 ;; This function is called by:
  1840 ;;		_main
  1841 ;; This function uses a non-reentrant model
  1842 ;;
  1843                           
  1844                           
  1845                           ;psect for function _ser_init
  1846  0E14                     _ser_init:	
  1847                           
  1848                           ;ser.c: 7: TXSTA = 0b00100100;
  1849                           
  1850                           ;incstack = 0
  1851                           ; Regs used in _ser_init: [wreg]
  1852  0E14  3024               	movlw	36
  1853  0E15  1683               	bsf	3,5	;RP0=1, select bank1
  1854  0E16  1303               	bcf	3,6	;RP1=0, select bank1
  1855  0E17  0098               	movwf	24	;volatile
  1856                           
  1857                           ;ser.c: 8: RCSTA = 0b10011000;
  1858  0E18  3098               	movlw	152
  1859  0E19  1283               	bcf	3,5	;RP0=0, select bank0
  1860  0E1A  1303               	bcf	3,6	;RP1=0, select bank0
  1861  0E1B  0098               	movwf	24	;volatile
  1862                           
  1863                           ;ser.c: 24: SPBRG = 20;
  1864  0E1C  3014               	movlw	20
  1865  0E1D  1683               	bsf	3,5	;RP0=1, select bank1
  1866  0E1E  1303               	bcf	3,6	;RP1=0, select bank1
  1867  0E1F  0099               	movwf	25	;volatile
  1868                           
  1869                           ;ser.c: 26: PEIE = 1;
  1870  0E20  170B               	bsf	11,6	;volatile
  1871                           
  1872                           ;ser.c: 27: (GIE = 1);
  1873  0E21  178B               	bsf	11,7	;volatile
  1874  0E22  0008               	return
  1875  0E23                     __end_of_ser_init:	
  1876                           
  1877                           	psect	text6
  1878  0727                     __ptext6:	
  1879 ;; *************** function _moveCW *****************
  1880 ;; Defined at:
  1881 ;;		line 5 in file "motor.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;		None
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;		None
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  1    wreg      void 
  1888 ;; Registers used:
  1889 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1895 ;;      Params:         0       0       0       0       0
  1896 ;;      Locals:         0       0       0       0       0
  1897 ;;      Temps:          0       2       0       0       0
  1898 ;;      Totals:         0       2       0       0       0
  1899 ;;Total ram usage:        2 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; Hardware stack levels required when called:    3
  1902 ;; This function calls:
  1903 ;;		Nothing
  1904 ;; This function is called by:
  1905 ;;		_main
  1906 ;; This function uses a non-reentrant model
  1907 ;;
  1908                           
  1909                           
  1910                           ;psect for function _moveCW
  1911  0727                     _moveCW:	
  1912                           
  1913                           ;motor.c: 8: if (stepCount == 0) negativeFlag = 1;
  1914                           
  1915                           ;incstack = 0
  1916                           ; Regs used in _moveCW: [wreg-fsr0h+status,2+status,0]
  1917  0727  1283               	bcf	3,5	;RP0=0, select bank0
  1918  0728  1303               	bcf	3,6	;RP1=0, select bank0
  1919  0729  0848               	movf	_stepCount,w
  1920  072A  1D03               	btfss	3,2
  1921  072B  2F2E               	goto	l1893
  1922  072C  01C6               	clrf	_negativeFlag
  1923  072D  0AC6               	incf	_negativeFlag,f
  1924  072E                     l1893:	
  1925                           
  1926                           ;motor.c: 10: stepCount--;
  1927  072E  30FF               	movlw	255
  1928  072F  00CA               	movwf	??_moveCW
  1929  0730  084A               	movf	??_moveCW,w
  1930  0731  07C8               	addwf	_stepCount,f
  1931                           
  1932                           ;motor.c: 13: switch(currentStep){
  1933  0732  2F4E               	goto	l1929
  1934  0733                     l1895:	
  1935                           ;motor.c: 15: case 7: PORTC = 0b00011011;
  1936                           
  1937  0733  301B               	movlw	27
  1938  0734  2F40               	goto	L1
  1939  0735                     l1899:	
  1940                           ;motor.c: 19: case 6: PORTC = 0b00010111;
  1941                           
  1942                           ;motor.c: 17: break;
  1943                           
  1944                           ;motor.c: 16: currentStep--;
  1945                           
  1946  0735  3017               	movlw	23
  1947  0736  2F40               	goto	L1
  1948  0737                     l1903:	
  1949                           ;motor.c: 23: case 5: PORTC = 0b00110101;
  1950                           
  1951                           ;motor.c: 21: break;
  1952                           
  1953                           ;motor.c: 20: currentStep--;
  1954                           
  1955  0737  3035               	movlw	53
  1956  0738  2F40               	goto	L1
  1957  0739                     l1907:	
  1958                           ;motor.c: 27: case 4: PORTC = 0b00100111;
  1959                           
  1960                           ;motor.c: 25: break;
  1961                           
  1962                           ;motor.c: 24: currentStep--;
  1963                           
  1964  0739  3027               	movlw	39
  1965  073A  2F40               	goto	L1
  1966  073B                     l1911:	
  1967                           ;motor.c: 31: case 3: PORTC = 0b00101011;
  1968                           
  1969                           ;motor.c: 29: break;
  1970                           
  1971                           ;motor.c: 28: currentStep--;
  1972                           
  1973  073B  302B               	movlw	43
  1974  073C  2F40               	goto	L1
  1975  073D                     l1915:	
  1976                           ;motor.c: 35: case 2: PORTC = 0b00101110;
  1977                           
  1978                           ;motor.c: 33: break;
  1979                           
  1980                           ;motor.c: 32: currentStep--;
  1981                           
  1982  073D  302E               	movlw	46
  1983  073E  2F40               	goto	L1
  1984  073F                     l1919:	
  1985                           ;motor.c: 39: case 1: PORTC = 0b00111100;
  1986                           
  1987                           ;motor.c: 37: break;
  1988                           
  1989                           ;motor.c: 36: currentStep--;
  1990                           
  1991  073F  303C               	movlw	60
  1992  0740                     L1:	
  1993  0740  0087               	movwf	7	;volatile
  1994                           
  1995                           ;motor.c: 40: currentStep--;
  1996  0741  3001               	movlw	1
  1997  0742  02C4               	subwf	_currentStep,f
  1998                           
  1999                           ;motor.c: 41: break;
  2000  0743  2F68               	goto	l1931
  2001  0744                     l1923:	
  2002                           ;motor.c: 43: case 0: PORTC = 0b00011110;
  2003                           
  2004  0744  301E               	movlw	30
  2005  0745  0087               	movwf	7	;volatile
  2006                           
  2007                           ;motor.c: 44: currentStep = 7;
  2008  0746  3007               	movlw	7
  2009  0747  00CA               	movwf	??_moveCW
  2010  0748  084A               	movf	??_moveCW,w
  2011  0749  00C4               	movwf	_currentStep
  2012                           
  2013                           ;motor.c: 45: break;
  2014  074A  2F68               	goto	l1931
  2015  074B                     l1925:	
  2016                           ;motor.c: 47: default: PORTC = 0b00111001;
  2017                           
  2018  074B  3039               	movlw	57
  2019  074C  0087               	movwf	7	;volatile
  2020                           
  2021                           ;motor.c: 49: }
  2022                           
  2023                           ;motor.c: 48: break;
  2024  074D  2F68               	goto	l1931
  2025  074E                     l1929:	
  2026  074E  0844               	movf	_currentStep,w
  2027                           
  2028                           ; Switch size 1, requested type "space"
  2029                           ; Number of cases is 8, Range of values is 0 to 7
  2030                           ; switch strategies available:
  2031                           ; Name         Instructions Cycles
  2032                           ; simple_byte           25    13 (average)
  2033                           ; direct_byte           32     8 (fixed)
  2034                           ; jumptable            260     6 (fixed)
  2035                           ;	Chosen strategy is simple_byte
  2036  074F  3A00               	xorlw	0	; case 0
  2037  0750  1903               	skipnz
  2038  0751  2F44               	goto	l1923
  2039  0752  3A01               	xorlw	1	; case 1
  2040  0753  1903               	skipnz
  2041  0754  2F3F               	goto	l1919
  2042  0755  3A03               	xorlw	3	; case 2
  2043  0756  1903               	skipnz
  2044  0757  2F3D               	goto	l1915
  2045  0758  3A01               	xorlw	1	; case 3
  2046  0759  1903               	skipnz
  2047  075A  2F3B               	goto	l1911
  2048  075B  3A07               	xorlw	7	; case 4
  2049  075C  1903               	skipnz
  2050  075D  2F39               	goto	l1907
  2051  075E  3A01               	xorlw	1	; case 5
  2052  075F  1903               	skipnz
  2053  0760  2F37               	goto	l1903
  2054  0761  3A03               	xorlw	3	; case 6
  2055  0762  1903               	skipnz
  2056  0763  2F35               	goto	l1899
  2057  0764  3A01               	xorlw	1	; case 7
  2058  0765  1903               	skipnz
  2059  0766  2F33               	goto	l1895
  2060  0767  2F4B               	goto	l1925
  2061  0768                     l1931:	
  2062                           
  2063                           ;motor.c: 51: _delay((unsigned long)((3)*(20000000/4000.0)));
  2064  0768  3014               	movlw	20
  2065  0769  00CB               	movwf	??_moveCW+1
  2066  076A  3079               	movlw	121
  2067  076B  00CA               	movwf	??_moveCW
  2068  076C                     u1967:	
  2069  076C  0BCA               	decfsz	??_moveCW,f
  2070  076D  2F6C               	goto	u1967
  2071  076E  0BCB               	decfsz	??_moveCW+1,f
  2072  076F  2F6C               	goto	u1967
  2073  0770  2F71               	nop2
  2074  0771  0008               	return
  2075  0772                     __end_of_moveCW:	
  2076                           
  2077                           	psect	text7
  2078  0772                     __ptext7:	
  2079 ;; *************** function _moveCCW *****************
  2080 ;; Defined at:
  2081 ;;		line 55 in file "motor.c"
  2082 ;; Parameters:    Size  Location     Type
  2083 ;;		None
  2084 ;; Auto vars:     Size  Location     Type
  2085 ;;		None
  2086 ;; Return value:  Size  Location     Type
  2087 ;;                  1    wreg      void 
  2088 ;; Registers used:
  2089 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2090 ;; Tracked objects:
  2091 ;;		On entry : 0/0
  2092 ;;		On exit  : 0/0
  2093 ;;		Unchanged: 0/0
  2094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2095 ;;      Params:         0       0       0       0       0
  2096 ;;      Locals:         0       0       0       0       0
  2097 ;;      Temps:          0       2       0       0       0
  2098 ;;      Totals:         0       2       0       0       0
  2099 ;;Total ram usage:        2 bytes
  2100 ;; Hardware stack levels used:    1
  2101 ;; Hardware stack levels required when called:    3
  2102 ;; This function calls:
  2103 ;;		Nothing
  2104 ;; This function is called by:
  2105 ;;		_main
  2106 ;; This function uses a non-reentrant model
  2107 ;;
  2108                           
  2109                           
  2110                           ;psect for function _moveCCW
  2111  0772                     _moveCCW:	
  2112                           
  2113                           ;motor.c: 57: if (stepCount == (-1)) negativeFlag = 0;
  2114                           
  2115                           ;incstack = 0
  2116                           ; Regs used in _moveCCW: [wreg-fsr0h+status,2+status,0]
  2117  0772  1283               	bcf	3,5	;RP0=0, select bank0
  2118  0773  1303               	bcf	3,6	;RP1=0, select bank0
  2119  0774  0A48               	incf	_stepCount,w
  2120  0775  1903               	btfsc	3,2
  2121  0776  01C6               	clrf	_negativeFlag
  2122                           
  2123                           ;motor.c: 59: stepCount++;
  2124  0777  3001               	movlw	1
  2125  0778  00CA               	movwf	??_moveCCW
  2126  0779  084A               	movf	??_moveCCW,w
  2127  077A  07C8               	addwf	_stepCount,f
  2128                           
  2129                           ;motor.c: 62: switch(currentStep){
  2130  077B  2F96               	goto	l1983
  2131  077C                     l1947:	
  2132                           ;motor.c: 63: case 0: PORTC = 0b00101110;
  2133                           
  2134  077C  302E               	movlw	46
  2135  077D  2F89               	goto	L2
  2136  077E                     l1951:	
  2137                           ;motor.c: 67: case 1: PORTC = 0b00101011;
  2138                           
  2139                           ;motor.c: 65: break;
  2140                           
  2141                           ;motor.c: 64: currentStep++;
  2142                           
  2143  077E  302B               	movlw	43
  2144  077F  2F89               	goto	L2
  2145  0780                     l1955:	
  2146                           ;motor.c: 71: case 2: PORTC = 0b00100111;
  2147                           
  2148                           ;motor.c: 69: break;
  2149                           
  2150                           ;motor.c: 68: currentStep++;
  2151                           
  2152  0780  3027               	movlw	39
  2153  0781  2F89               	goto	L2
  2154  0782                     l1959:	
  2155                           ;motor.c: 75: case 3: PORTC = 0b00110101;
  2156                           
  2157                           ;motor.c: 73: break;
  2158                           
  2159                           ;motor.c: 72: currentStep++;
  2160                           
  2161  0782  3035               	movlw	53
  2162  0783  2F89               	goto	L2
  2163  0784                     l1963:	
  2164                           ;motor.c: 79: case 4: PORTC = 0b00010111;
  2165                           
  2166                           ;motor.c: 77: break;
  2167                           
  2168                           ;motor.c: 76: currentStep++;
  2169                           
  2170  0784  3017               	movlw	23
  2171  0785  2F89               	goto	L2
  2172  0786                     l1967:	
  2173                           ;motor.c: 83: case 5: PORTC = 0b00011011;
  2174                           
  2175                           ;motor.c: 81: break;
  2176                           
  2177                           ;motor.c: 80: currentStep++;
  2178                           
  2179  0786  301B               	movlw	27
  2180  0787  2F89               	goto	L2
  2181  0788                     l1971:	
  2182                           ;motor.c: 87: case 6: PORTC = 0b00011110;
  2183                           
  2184                           ;motor.c: 85: break;
  2185                           
  2186                           ;motor.c: 84: currentStep++;
  2187                           
  2188  0788  301E               	movlw	30
  2189  0789                     L2:	
  2190  0789  0087               	movwf	7	;volatile
  2191                           
  2192                           ;motor.c: 88: currentStep++;
  2193  078A  3001               	movlw	1
  2194  078B  00CA               	movwf	??_moveCCW
  2195  078C  084A               	movf	??_moveCCW,w
  2196  078D  07C4               	addwf	_currentStep,f
  2197                           
  2198                           ;motor.c: 89: break;
  2199  078E  2FB0               	goto	l1985
  2200  078F                     l1975:	
  2201                           ;motor.c: 91: case 7: PORTC = 0b00111100;
  2202                           
  2203  078F  303C               	movlw	60
  2204  0790  0087               	movwf	7	;volatile
  2205                           
  2206                           ;motor.c: 92: currentStep = 0;
  2207  0791  01C4               	clrf	_currentStep
  2208                           
  2209                           ;motor.c: 93: break;
  2210  0792  2FB0               	goto	l1985
  2211  0793                     l1979:	
  2212                           ;motor.c: 95: default: PORTC = 0b00111001;
  2213                           
  2214  0793  3039               	movlw	57
  2215  0794  0087               	movwf	7	;volatile
  2216                           
  2217                           ;motor.c: 97: }
  2218                           
  2219                           ;motor.c: 96: break;
  2220  0795  2FB0               	goto	l1985
  2221  0796                     l1983:	
  2222  0796  0844               	movf	_currentStep,w
  2223                           
  2224                           ; Switch size 1, requested type "space"
  2225                           ; Number of cases is 8, Range of values is 0 to 7
  2226                           ; switch strategies available:
  2227                           ; Name         Instructions Cycles
  2228                           ; simple_byte           25    13 (average)
  2229                           ; direct_byte           32     8 (fixed)
  2230                           ; jumptable            260     6 (fixed)
  2231                           ;	Chosen strategy is simple_byte
  2232  0797  3A00               	xorlw	0	; case 0
  2233  0798  1903               	skipnz
  2234  0799  2F7C               	goto	l1947
  2235  079A  3A01               	xorlw	1	; case 1
  2236  079B  1903               	skipnz
  2237  079C  2F7E               	goto	l1951
  2238  079D  3A03               	xorlw	3	; case 2
  2239  079E  1903               	skipnz
  2240  079F  2F80               	goto	l1955
  2241  07A0  3A01               	xorlw	1	; case 3
  2242  07A1  1903               	skipnz
  2243  07A2  2F82               	goto	l1959
  2244  07A3  3A07               	xorlw	7	; case 4
  2245  07A4  1903               	skipnz
  2246  07A5  2F84               	goto	l1963
  2247  07A6  3A01               	xorlw	1	; case 5
  2248  07A7  1903               	skipnz
  2249  07A8  2F86               	goto	l1967
  2250  07A9  3A03               	xorlw	3	; case 6
  2251  07AA  1903               	skipnz
  2252  07AB  2F88               	goto	l1971
  2253  07AC  3A01               	xorlw	1	; case 7
  2254  07AD  1903               	skipnz
  2255  07AE  2F8F               	goto	l1975
  2256  07AF  2F93               	goto	l1979
  2257  07B0                     l1985:	
  2258                           
  2259                           ;motor.c: 99: _delay((unsigned long)((3)*(20000000/4000.0)));
  2260  07B0  3014               	movlw	20
  2261  07B1  00CB               	movwf	??_moveCCW+1
  2262  07B2  3079               	movlw	121
  2263  07B3  00CA               	movwf	??_moveCCW
  2264  07B4                     u1977:	
  2265  07B4  0BCA               	decfsz	??_moveCCW,f
  2266  07B5  2FB4               	goto	u1977
  2267  07B6  0BCB               	decfsz	??_moveCCW+1,f
  2268  07B7  2FB4               	goto	u1977
  2269  07B8  2FB9               	nop2
  2270  07B9  0008               	return
  2271  07BA                     __end_of_moveCCW:	
  2272                           
  2273                           	psect	text8
  2274  0FC2                     __ptext8:	
  2275 ;; *************** function _getSensorData *****************
  2276 ;; Defined at:
  2277 ;;		line 55 in file "ser.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;  packetID        1    wreg     unsigned char 
  2280 ;;  bytes           1    2[BANK0 ] unsigned char 
  2281 ;; Auto vars:     Size  Location     Type
  2282 ;;  packetID        1    8[BANK0 ] unsigned char 
  2283 ;;  sensor          2    6[BANK0 ] int 
  2284 ;; Return value:  Size  Location     Type
  2285 ;;                  2    2[BANK0 ] int 
  2286 ;; Registers used:
  2287 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2288 ;; Tracked objects:
  2289 ;;		On entry : 0/0
  2290 ;;		On exit  : 0/0
  2291 ;;		Unchanged: 0/0
  2292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2293 ;;      Params:         0       2       0       0       0
  2294 ;;      Locals:         0       3       0       0       0
  2295 ;;      Temps:          0       2       0       0       0
  2296 ;;      Totals:         0       7       0       0       0
  2297 ;;Total ram usage:        7 bytes
  2298 ;; Hardware stack levels used:    1
  2299 ;; Hardware stack levels required when called:    4
  2300 ;; This function calls:
  2301 ;;		_ser_getch
  2302 ;;		_ser_putch
  2303 ;; This function is called by:
  2304 ;;		_main
  2305 ;; This function uses a non-reentrant model
  2306 ;;
  2307                           
  2308                           
  2309                           ;psect for function _getSensorData
  2310  0FC2                     _getSensorData:	
  2311                           
  2312                           ;incstack = 0
  2313                           ; Regs used in _getSensorData: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2314                           ;getSensorData@packetID stored from wreg
  2315  0FC2  1283               	bcf	3,5	;RP0=0, select bank0
  2316  0FC3  1303               	bcf	3,6	;RP1=0, select bank0
  2317  0FC4  00D2               	movwf	getSensorData@packetID
  2318                           
  2319                           ;ser.c: 56: ser_putch(142);
  2320  0FC5  308E               	movlw	142
  2321  0FC6  120A  158A  2608  120A  158A  	fcall	_ser_putch
  2322                           
  2323                           ;ser.c: 57: ser_putch(packetID);
  2324  0FCB  1283               	bcf	3,5	;RP0=0, select bank0
  2325  0FCC  1303               	bcf	3,6	;RP1=0, select bank0
  2326  0FCD  0852               	movf	getSensorData@packetID,w
  2327  0FCE  120A  158A  2608  120A  158A  	fcall	_ser_putch
  2328                           
  2329                           ;ser.c: 59: if (bytes == 2)
  2330  0FD3  3002               	movlw	2
  2331  0FD4  1283               	bcf	3,5	;RP0=0, select bank0
  2332  0FD5  1303               	bcf	3,6	;RP1=0, select bank0
  2333  0FD6  064C               	xorwf	getSensorData@bytes,w
  2334  0FD7  1D03               	btfss	3,2
  2335  0FD8  2FE4               	goto	l1815
  2336                           
  2337                           ;ser.c: 60: highByte = ser_getch();
  2338  0FD9  120A  158A  25FE  120A  158A  	fcall	_ser_getch
  2339  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  2340  0FDF  1303               	bcf	3,6	;RP1=0, select bank0
  2341  0FE0  00CE               	movwf	??_getSensorData
  2342  0FE1  084E               	movf	??_getSensorData,w
  2343  0FE2  00C9               	movwf	_highByte
  2344  0FE3  2FE5               	goto	l1817
  2345  0FE4                     l1815:	
  2346                           
  2347                           ;ser.c: 61: else
  2348                           ;ser.c: 62: highByte = 0;
  2349  0FE4  01C9               	clrf	_highByte
  2350  0FE5                     l1817:	
  2351                           
  2352                           ;ser.c: 64: lowByte = ser_getch();
  2353  0FE5  120A  158A  25FE   	fcall	_ser_getch
  2354  0FE8  1283               	bcf	3,5	;RP0=0, select bank0
  2355  0FE9  1303               	bcf	3,6	;RP1=0, select bank0
  2356  0FEA  00CE               	movwf	??_getSensorData
  2357  0FEB  084E               	movf	??_getSensorData,w
  2358  0FEC  00C5               	movwf	_lowByte
  2359                           
  2360                           ;ser.c: 66: signed int sensor = (256*highByte + lowByte);
  2361  0FED  0849               	movf	_highByte,w
  2362  0FEE  00CE               	movwf	??_getSensorData
  2363  0FEF  01CF               	clrf	??_getSensorData+1
  2364  0FF0  084E               	movf	??_getSensorData,w
  2365  0FF1  00CF               	movwf	??_getSensorData+1
  2366  0FF2  01CE               	clrf	??_getSensorData
  2367  0FF3  0845               	movf	_lowByte,w
  2368  0FF4  074E               	addwf	??_getSensorData,w
  2369  0FF5  00D0               	movwf	getSensorData@sensor
  2370  0FF6  3000               	movlw	0
  2371  0FF7  1803               	skipnc
  2372  0FF8  3001               	movlw	1
  2373  0FF9  074F               	addwf	??_getSensorData+1,w
  2374  0FFA  00D1               	movwf	getSensorData@sensor+1
  2375                           
  2376                           ;ser.c: 68: return sensor;
  2377  0FFB  0851               	movf	getSensorData@sensor+1,w
  2378  0FFC  00CD               	movwf	?_getSensorData+1
  2379  0FFD  0850               	movf	getSensorData@sensor,w
  2380  0FFE  00CC               	movwf	?_getSensorData
  2381  0FFF  0008               	return
  2382  1000                     __end_of_getSensorData:	
  2383                           
  2384                           	psect	text9
  2385  0DFE                     __ptext9:	
  2386 ;; *************** function _ser_getch *****************
  2387 ;; Defined at:
  2388 ;;		line 35 in file "ser.c"
  2389 ;; Parameters:    Size  Location     Type
  2390 ;;		None
  2391 ;; Auto vars:     Size  Location     Type
  2392 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  2393 ;; Return value:  Size  Location     Type
  2394 ;;                  1    wreg      unsigned char 
  2395 ;; Registers used:
  2396 ;;		wreg
  2397 ;; Tracked objects:
  2398 ;;		On entry : 0/0
  2399 ;;		On exit  : 0/0
  2400 ;;		Unchanged: 0/0
  2401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2402 ;;      Params:         0       0       0       0       0
  2403 ;;      Locals:         0       1       0       0       0
  2404 ;;      Temps:          0       1       0       0       0
  2405 ;;      Totals:         0       2       0       0       0
  2406 ;;Total ram usage:        2 bytes
  2407 ;; Hardware stack levels used:    1
  2408 ;; Hardware stack levels required when called:    3
  2409 ;; This function calls:
  2410 ;;		Nothing
  2411 ;; This function is called by:
  2412 ;;		_getSensorData
  2413 ;; This function uses a non-reentrant model
  2414 ;;
  2415                           
  2416                           
  2417                           ;psect for function _ser_getch
  2418  0DFE                     _ser_getch:	
  2419  0DFE                     l319:	
  2420                           ;ser.c: 36: while(!RCIF);
  2421                           
  2422                           ;incstack = 0
  2423                           ; Regs used in _ser_getch: [wreg]
  2424                           
  2425  0DFE  1283               	bcf	3,5	;RP0=0, select bank0
  2426  0DFF  1303               	bcf	3,6	;RP1=0, select bank0
  2427  0E00  1E8C               	btfss	12,5	;volatile
  2428  0E01  2DFE               	goto	l319
  2429                           
  2430                           ;ser.c: 37: unsigned char rxbyte = RCREG;
  2431  0E02  081A               	movf	26,w	;volatile
  2432  0E03  00CA               	movwf	??_ser_getch
  2433  0E04  084A               	movf	??_ser_getch,w
  2434  0E05  00CB               	movwf	ser_getch@rxbyte
  2435                           
  2436                           ;ser.c: 38: return rxbyte;
  2437  0E06  084B               	movf	ser_getch@rxbyte,w
  2438  0E07  0008               	return
  2439  0E08                     __end_of_ser_getch:	
  2440                           
  2441                           	psect	text10
  2442  0ECA                     __ptext10:	
  2443 ;; *************** function _Drive *****************
  2444 ;; Defined at:
  2445 ;;		line 45 in file "ser.c"
  2446 ;; Parameters:    Size  Location     Type
  2447 ;;  speedH          2    1[BANK0 ] int 
  2448 ;;  speedL          2    3[BANK0 ] int 
  2449 ;;  radH            2    5[BANK0 ] int 
  2450 ;;  radL            2    7[BANK0 ] int 
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;		None
  2453 ;; Return value:  Size  Location     Type
  2454 ;;                  1    wreg      void 
  2455 ;; Registers used:
  2456 ;;		wreg, status,2, status,0, pclath, cstack
  2457 ;; Tracked objects:
  2458 ;;		On entry : 0/0
  2459 ;;		On exit  : 0/0
  2460 ;;		Unchanged: 0/0
  2461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2462 ;;      Params:         0       8       0       0       0
  2463 ;;      Locals:         0       0       0       0       0
  2464 ;;      Temps:          0       0       0       0       0
  2465 ;;      Totals:         0       8       0       0       0
  2466 ;;Total ram usage:        8 bytes
  2467 ;; Hardware stack levels used:    1
  2468 ;; Hardware stack levels required when called:    4
  2469 ;; This function calls:
  2470 ;;		_ser_putch
  2471 ;; This function is called by:
  2472 ;;		_main
  2473 ;; This function uses a non-reentrant model
  2474 ;;
  2475                           
  2476                           
  2477                           ;psect for function _Drive
  2478  0ECA                     _Drive:	
  2479                           
  2480                           ;ser.c: 46: ser_putch(137);
  2481                           
  2482                           ;incstack = 0
  2483                           ; Regs used in _Drive: [wreg+status,2+status,0+pclath+cstack]
  2484  0ECA  3089               	movlw	137
  2485  0ECB  120A  158A  2608  120A  158A  	fcall	_ser_putch
  2486                           
  2487                           ;ser.c: 47: ser_putch(speedH);
  2488  0ED0  1283               	bcf	3,5	;RP0=0, select bank0
  2489  0ED1  1303               	bcf	3,6	;RP1=0, select bank0
  2490  0ED2  084B               	movf	Drive@speedH,w
  2491  0ED3  120A  158A  2608  120A  158A  	fcall	_ser_putch
  2492                           
  2493                           ;ser.c: 48: ser_putch(speedL);
  2494  0ED8  1283               	bcf	3,5	;RP0=0, select bank0
  2495  0ED9  1303               	bcf	3,6	;RP1=0, select bank0
  2496  0EDA  084D               	movf	Drive@speedL,w
  2497  0EDB  120A  158A  2608  120A  158A  	fcall	_ser_putch
  2498                           
  2499                           ;ser.c: 49: ser_putch(radH);
  2500  0EE0  1283               	bcf	3,5	;RP0=0, select bank0
  2501  0EE1  1303               	bcf	3,6	;RP1=0, select bank0
  2502  0EE2  084F               	movf	Drive@radH,w
  2503  0EE3  120A  158A  2608  120A  158A  	fcall	_ser_putch
  2504                           
  2505                           ;ser.c: 50: ser_putch(radL);
  2506  0EE8  1283               	bcf	3,5	;RP0=0, select bank0
  2507  0EE9  1303               	bcf	3,6	;RP1=0, select bank0
  2508  0EEA  0851               	movf	Drive@radL,w
  2509  0EEB  120A  158A  2608   	fcall	_ser_putch
  2510  0EEE  0008               	return
  2511  0EEF                     __end_of_Drive:	
  2512                           
  2513                           	psect	text11
  2514  0E08                     __ptext11:	
  2515 ;; *************** function _ser_putch *****************
  2516 ;; Defined at:
  2517 ;;		line 30 in file "ser.c"
  2518 ;; Parameters:    Size  Location     Type
  2519 ;;  c               1    wreg     unsigned char 
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;  c               1    0[BANK0 ] unsigned char 
  2522 ;; Return value:  Size  Location     Type
  2523 ;;                  1    wreg      void 
  2524 ;; Registers used:
  2525 ;;		wreg
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2531 ;;      Params:         0       0       0       0       0
  2532 ;;      Locals:         0       1       0       0       0
  2533 ;;      Temps:          0       0       0       0       0
  2534 ;;      Totals:         0       1       0       0       0
  2535 ;;Total ram usage:        1 bytes
  2536 ;; Hardware stack levels used:    1
  2537 ;; Hardware stack levels required when called:    3
  2538 ;; This function calls:
  2539 ;;		Nothing
  2540 ;; This function is called by:
  2541 ;;		_main
  2542 ;;		_Drive
  2543 ;;		_getSensorData
  2544 ;; This function uses a non-reentrant model
  2545 ;;
  2546                           
  2547                           
  2548                           ;psect for function _ser_putch
  2549  0E08                     _ser_putch:	
  2550                           
  2551                           ;incstack = 0
  2552                           ; Regs used in _ser_putch: [wreg]
  2553                           ;ser_putch@c stored from wreg
  2554  0E08  1283               	bcf	3,5	;RP0=0, select bank0
  2555  0E09  1303               	bcf	3,6	;RP1=0, select bank0
  2556  0E0A  00CA               	movwf	ser_putch@c
  2557  0E0B                     l313:	
  2558                           ;ser.c: 31: while(!TRMT);
  2559                           
  2560  0E0B  1683               	bsf	3,5	;RP0=1, select bank1
  2561  0E0C  1303               	bcf	3,6	;RP1=0, select bank1
  2562  0E0D  1C98               	btfss	24,1	;volatile
  2563  0E0E  2E0B               	goto	l313
  2564                           
  2565                           ;ser.c: 32: TXREG=c;
  2566  0E0F  1283               	bcf	3,5	;RP0=0, select bank0
  2567  0E10  1303               	bcf	3,6	;RP1=0, select bank0
  2568  0E11  084A               	movf	ser_putch@c,w
  2569  0E12  0099               	movwf	25	;volatile
  2570  0E13  0008               	return
  2571  0E14                     __end_of_ser_putch:	
  2572                           
  2573                           	psect	text12
  2574  0E87                     __ptext12:	
  2575 ;; *************** function _ADCMain *****************
  2576 ;; Defined at:
  2577 ;;		line 19 in file "ADC.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;		None
  2580 ;; Auto vars:     Size  Location     Type
  2581 ;;		None
  2582 ;; Return value:  Size  Location     Type
  2583 ;;                  1    wreg      void 
  2584 ;; Registers used:
  2585 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2591 ;;      Params:         0       0       0       0       0
  2592 ;;      Locals:         0       0       0       0       0
  2593 ;;      Temps:          0       0       0       0       0
  2594 ;;      Totals:         0       0       0       0       0
  2595 ;;Total ram usage:        0 bytes
  2596 ;; Hardware stack levels used:    1
  2597 ;; Hardware stack levels required when called:    5
  2598 ;; This function calls:
  2599 ;;		_adcConvertMM
  2600 ;;		_getADC
  2601 ;;		_lcdSetCursor
  2602 ;;		_lcdWriteToDigitBCD
  2603 ;; This function is called by:
  2604 ;;		_main
  2605 ;; This function uses a non-reentrant model
  2606 ;;
  2607                           
  2608                           
  2609                           ;psect for function _ADCMain
  2610  0E87                     _ADCMain:	
  2611                           
  2612                           ;ADC.c: 21: getADC();
  2613                           
  2614                           ;incstack = 0
  2615                           ; Regs used in _ADCMain: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2616  0E87  120A  118A  27BA  120A  158A  	fcall	_getADC
  2617                           
  2618                           ;ADC.c: 22: lcdSetCursor(0b10000000);
  2619  0E8C  3080               	movlw	128
  2620  0E8D  120A  158A  25E1  120A  158A  	fcall	_lcdSetCursor
  2621                           
  2622                           ;ADC.c: 23: lcdWriteToDigitBCD(adcRAW);
  2623  0E92  1283               	bcf	3,5	;RP0=0, select bank0
  2624  0E93  1303               	bcf	3,6	;RP1=0, select bank0
  2625  0E94  0823               	movf	_adcRAW+1,w	;volatile
  2626  0E95  00CE               	movwf	lcdWriteToDigitBCD@data+1
  2627  0E96  0822               	movf	_adcRAW,w	;volatile
  2628  0E97  00CD               	movwf	lcdWriteToDigitBCD@data
  2629  0E98  120A  118A  2581  120A  158A  	fcall	_lcdWriteToDigitBCD
  2630                           
  2631                           ;ADC.c: 25: adcConvertMM(adcRAW);
  2632  0E9D  1283               	bcf	3,5	;RP0=0, select bank0
  2633  0E9E  1303               	bcf	3,6	;RP1=0, select bank0
  2634  0E9F  0823               	movf	_adcRAW+1,w	;volatile
  2635  0EA0  00E0               	movwf	adcConvertMM@adcRAW+1
  2636  0EA1  0822               	movf	_adcRAW,w	;volatile
  2637  0EA2  00DF               	movwf	adcConvertMM@adcRAW
  2638  0EA3  120A  118A  202D   	fcall	_adcConvertMM
  2639  0EA6  0008               	return
  2640  0EA7                     __end_of_ADCMain:	
  2641                           
  2642                           	psect	text13
  2643  0581                     __ptext13:	
  2644 ;; *************** function _lcdWriteToDigitBCD *****************
  2645 ;; Defined at:
  2646 ;;		line 42 in file "LCD.c"
  2647 ;; Parameters:    Size  Location     Type
  2648 ;;  data            2    3[BANK0 ] unsigned int 
  2649 ;; Auto vars:     Size  Location     Type
  2650 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  2651 ;;  TenThouDigit    2   11[BANK0 ] unsigned int 
  2652 ;;  ThouDigit       2    9[BANK0 ] unsigned int 
  2653 ;;  HunsDigit       2    7[BANK0 ] unsigned int 
  2654 ;;  TensDigit       2    5[BANK0 ] unsigned int 
  2655 ;; Return value:  Size  Location     Type
  2656 ;;                  1    wreg      void 
  2657 ;; Registers used:
  2658 ;;		wreg, status,2, status,0, pclath, cstack
  2659 ;; Tracked objects:
  2660 ;;		On entry : 0/0
  2661 ;;		On exit  : 0/0
  2662 ;;		Unchanged: 0/0
  2663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2664 ;;      Params:         0       2       0       0       0
  2665 ;;      Locals:         0      10       0       0       0
  2666 ;;      Temps:          0       0       0       0       0
  2667 ;;      Totals:         0      12       0       0       0
  2668 ;;Total ram usage:       12 bytes
  2669 ;; Hardware stack levels used:    1
  2670 ;; Hardware stack levels required when called:    4
  2671 ;; This function calls:
  2672 ;;		_lcdWriteData
  2673 ;; This function is called by:
  2674 ;;		_main
  2675 ;;		_ADCMain
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679                           
  2680                           ;psect for function _lcdWriteToDigitBCD
  2681  0581                     _lcdWriteToDigitBCD:	
  2682                           
  2683                           ;LCD.c: 43: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  2684                           ;LCD.c: 46: OnesDigit = data;
  2685                           
  2686                           ;incstack = 0
  2687                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  2688  0581  1283               	bcf	3,5	;RP0=0, select bank0
  2689  0582  1303               	bcf	3,6	;RP1=0, select bank0
  2690  0583  084E               	movf	lcdWriteToDigitBCD@data+1,w
  2691  0584  00D8               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2692  0585  084D               	movf	lcdWriteToDigitBCD@data,w
  2693  0586  00D7               	movwf	lcdWriteToDigitBCD@OnesDigit
  2694                           
  2695                           ;LCD.c: 47: TensDigit = 0;
  2696  0587  01CF               	clrf	lcdWriteToDigitBCD@TensDigit
  2697  0588  01D0               	clrf	lcdWriteToDigitBCD@TensDigit+1
  2698                           
  2699                           ;LCD.c: 48: HunsDigit = 0;
  2700  0589  01D1               	clrf	lcdWriteToDigitBCD@HunsDigit
  2701  058A  01D2               	clrf	lcdWriteToDigitBCD@HunsDigit+1
  2702                           
  2703                           ;LCD.c: 49: ThouDigit = 0;
  2704  058B  01D3               	clrf	lcdWriteToDigitBCD@ThouDigit
  2705  058C  01D4               	clrf	lcdWriteToDigitBCD@ThouDigit+1
  2706                           
  2707                           ;LCD.c: 50: TenThouDigit = 0;
  2708  058D  01D5               	clrf	lcdWriteToDigitBCD@TenThouDigit
  2709  058E  01D6               	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  2710  058F                     l1673:	
  2711                           ;LCD.c: 53: while (OnesDigit >= 10000){
  2712                           
  2713  058F  3027               	movlw	39
  2714  0590  0258               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2715  0591  3010               	movlw	16
  2716  0592  1903               	skipnz
  2717  0593  0257               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2718  0594  1C03               	btfss	3,0
  2719  0595  2DB3               	goto	l1679
  2720                           
  2721                           ;LCD.c: 54: OnesDigit = OnesDigit - 10000;
  2722  0596  0857               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2723  0597  3EF0               	addlw	240
  2724  0598  00D7               	movwf	lcdWriteToDigitBCD@OnesDigit
  2725  0599  0858               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2726  059A  1803               	skipnc
  2727  059B  3E01               	addlw	1
  2728  059C  3ED8               	addlw	216
  2729  059D  00D8               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2730                           
  2731                           ;LCD.c: 55: TenThouDigit++;
  2732  059E  3001               	movlw	1
  2733  059F  07D5               	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  2734  05A0  1803               	skipnc
  2735  05A1  0AD6               	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2736  05A2  3000               	movlw	0
  2737  05A3  07D6               	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2738  05A4  2D8F               	goto	l1673
  2739  05A5                     l1675:	
  2740                           ;LCD.c: 56: }
  2741                           ;LCD.c: 58: while (OnesDigit >= 1000){
  2742                           
  2743                           
  2744                           ;LCD.c: 59: OnesDigit = OnesDigit - 1000;
  2745  05A5  0857               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2746  05A6  3E18               	addlw	24
  2747  05A7  00D7               	movwf	lcdWriteToDigitBCD@OnesDigit
  2748  05A8  0858               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2749  05A9  1803               	skipnc
  2750  05AA  3E01               	addlw	1
  2751  05AB  3EFC               	addlw	252
  2752  05AC  00D8               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2753                           
  2754                           ;LCD.c: 60: ThouDigit++;
  2755  05AD  3001               	movlw	1
  2756  05AE  07D3               	addwf	lcdWriteToDigitBCD@ThouDigit,f
  2757  05AF  1803               	skipnc
  2758  05B0  0AD4               	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  2759  05B1  3000               	movlw	0
  2760  05B2  07D4               	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  2761  05B3                     l1679:	
  2762  05B3  3003               	movlw	3
  2763  05B4  0258               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2764  05B5  30E8               	movlw	232
  2765  05B6  1903               	skipnz
  2766  05B7  0257               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2767  05B8  1C03               	btfss	3,0
  2768  05B9  2DC9               	goto	l1685
  2769  05BA  2DA5               	goto	l1675
  2770  05BB                     l1681:	
  2771                           ;LCD.c: 61: }
  2772                           ;LCD.c: 63: while (OnesDigit >= 100){
  2773                           
  2774                           
  2775                           ;LCD.c: 64: OnesDigit = OnesDigit - 100;
  2776  05BB  0857               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2777  05BC  3E9C               	addlw	156
  2778  05BD  00D7               	movwf	lcdWriteToDigitBCD@OnesDigit
  2779  05BE  0858               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2780  05BF  1803               	skipnc
  2781  05C0  3E01               	addlw	1
  2782  05C1  3EFF               	addlw	255
  2783  05C2  00D8               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2784                           
  2785                           ;LCD.c: 65: HunsDigit++;
  2786  05C3  3001               	movlw	1
  2787  05C4  07D1               	addwf	lcdWriteToDigitBCD@HunsDigit,f
  2788  05C5  1803               	skipnc
  2789  05C6  0AD2               	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  2790  05C7  3000               	movlw	0
  2791  05C8  07D2               	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  2792  05C9                     l1685:	
  2793  05C9  3000               	movlw	0
  2794  05CA  0258               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2795  05CB  3064               	movlw	100
  2796  05CC  1903               	skipnz
  2797  05CD  0257               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2798  05CE  1C03               	btfss	3,0
  2799  05CF  2DDF               	goto	l1691
  2800  05D0  2DBB               	goto	l1681
  2801  05D1                     l1687:	
  2802                           ;LCD.c: 66: }
  2803                           ;LCD.c: 68: while (OnesDigit >= 10){
  2804                           
  2805                           
  2806                           ;LCD.c: 69: OnesDigit = OnesDigit - 10;
  2807  05D1  0857               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2808  05D2  3EF6               	addlw	246
  2809  05D3  00D7               	movwf	lcdWriteToDigitBCD@OnesDigit
  2810  05D4  0858               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2811  05D5  1803               	skipnc
  2812  05D6  3E01               	addlw	1
  2813  05D7  3EFF               	addlw	255
  2814  05D8  00D8               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2815                           
  2816                           ;LCD.c: 70: TensDigit++;
  2817  05D9  3001               	movlw	1
  2818  05DA  07CF               	addwf	lcdWriteToDigitBCD@TensDigit,f
  2819  05DB  1803               	skipnc
  2820  05DC  0AD0               	incf	lcdWriteToDigitBCD@TensDigit+1,f
  2821  05DD  3000               	movlw	0
  2822  05DE  07D0               	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  2823  05DF                     l1691:	
  2824  05DF  3000               	movlw	0
  2825  05E0  0258               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2826  05E1  300A               	movlw	10
  2827  05E2  1903               	skipnz
  2828  05E3  0257               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2829  05E4  1803               	skipnc
  2830  05E5  2DD1               	goto	l1687
  2831                           
  2832                           ;LCD.c: 71: }
  2833                           ;LCD.c: 73: if (TenThouDigit > 0)
  2834  05E6  0855               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  2835  05E7  0456               	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  2836  05E8  1903               	btfsc	3,2
  2837  05E9  2DF1               	goto	l1697
  2838                           
  2839                           ;LCD.c: 74: lcdWriteData((unsigned int)TenThouDigit + 48);
  2840  05EA  0855               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  2841  05EB  3E30               	addlw	48
  2842  05EC  120A  158A  2632  120A  118A  	fcall	_lcdWriteData
  2843  05F1                     l1697:	
  2844                           
  2845                           ;LCD.c: 76: if (ThouDigit > 0)
  2846  05F1  1283               	bcf	3,5	;RP0=0, select bank0
  2847  05F2  1303               	bcf	3,6	;RP1=0, select bank0
  2848  05F3  0853               	movf	lcdWriteToDigitBCD@ThouDigit,w
  2849  05F4  0454               	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  2850  05F5  1903               	btfsc	3,2
  2851  05F6  2DFE               	goto	l212
  2852                           
  2853                           ;LCD.c: 77: lcdWriteData((unsigned int)ThouDigit + 48);
  2854  05F7  0853               	movf	lcdWriteToDigitBCD@ThouDigit,w
  2855  05F8  3E30               	addlw	48
  2856  05F9  120A  158A  2632  120A  118A  	fcall	_lcdWriteData
  2857  05FE                     l212:	
  2858                           
  2859                           ;LCD.c: 79: lcdWriteData((unsigned int)HunsDigit + 48);
  2860  05FE  1283               	bcf	3,5	;RP0=0, select bank0
  2861  05FF  1303               	bcf	3,6	;RP1=0, select bank0
  2862  0600  0851               	movf	lcdWriteToDigitBCD@HunsDigit,w
  2863  0601  3E30               	addlw	48
  2864  0602  120A  158A  2632  120A  118A  	fcall	_lcdWriteData
  2865                           
  2866                           ;LCD.c: 80: lcdWriteData((unsigned int)TensDigit + 48);
  2867  0607  1283               	bcf	3,5	;RP0=0, select bank0
  2868  0608  1303               	bcf	3,6	;RP1=0, select bank0
  2869  0609  084F               	movf	lcdWriteToDigitBCD@TensDigit,w
  2870  060A  3E30               	addlw	48
  2871  060B  120A  158A  2632  120A  118A  	fcall	_lcdWriteData
  2872                           
  2873                           ;LCD.c: 81: lcdWriteData((unsigned int)OnesDigit + 48);
  2874  0610  1283               	bcf	3,5	;RP0=0, select bank0
  2875  0611  1303               	bcf	3,6	;RP1=0, select bank0
  2876  0612  0857               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2877  0613  3E30               	addlw	48
  2878  0614  120A  158A  2632   	fcall	_lcdWriteData
  2879  0617  0008               	return
  2880  0618                     __end_of_lcdWriteToDigitBCD:	
  2881                           
  2882                           	psect	text14
  2883  0E32                     __ptext14:	
  2884 ;; *************** function _lcdWriteData *****************
  2885 ;; Defined at:
  2886 ;;		line 20 in file "LCD.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  databyte        1    wreg     unsigned char 
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;  databyte        1    2[BANK0 ] unsigned char 
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  1    wreg      void 
  2893 ;; Registers used:
  2894 ;;		wreg
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2900 ;;      Params:         0       0       0       0       0
  2901 ;;      Locals:         0       1       0       0       0
  2902 ;;      Temps:          0       2       0       0       0
  2903 ;;      Totals:         0       3       0       0       0
  2904 ;;Total ram usage:        3 bytes
  2905 ;; Hardware stack levels used:    1
  2906 ;; Hardware stack levels required when called:    3
  2907 ;; This function calls:
  2908 ;;		Nothing
  2909 ;; This function is called by:
  2910 ;;		_lcdWriteToDigitBCD
  2911 ;;		_lcdWriteString
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           
  2916                           ;psect for function _lcdWriteData
  2917  0E32                     _lcdWriteData:	
  2918                           
  2919                           ;incstack = 0
  2920                           ; Regs used in _lcdWriteData: [wreg]
  2921                           ;lcdWriteData@databyte stored from wreg
  2922  0E32  1283               	bcf	3,5	;RP0=0, select bank0
  2923  0E33  1303               	bcf	3,6	;RP1=0, select bank0
  2924  0E34  00CC               	movwf	lcdWriteData@databyte
  2925                           
  2926                           ;LCD.c: 21: RE2 = 0;
  2927  0E35  1109               	bcf	9,2	;volatile
  2928                           
  2929                           ;LCD.c: 22: RE1 = 0;
  2930  0E36  1089               	bcf	9,1	;volatile
  2931                           
  2932                           ;LCD.c: 23: RE0 = 1;
  2933  0E37  1409               	bsf	9,0	;volatile
  2934                           
  2935                           ;LCD.c: 24: PORTD = databyte;
  2936  0E38  084C               	movf	lcdWriteData@databyte,w
  2937  0E39  0088               	movwf	8	;volatile
  2938                           
  2939                           ;LCD.c: 25: RE2 = 1;
  2940  0E3A  1509               	bsf	9,2	;volatile
  2941                           
  2942                           ;LCD.c: 26: RE2 = 0;
  2943  0E3B  1109               	bcf	9,2	;volatile
  2944                           
  2945                           ;LCD.c: 27: _delay((unsigned long)((1)*(20000000/4000.0)));
  2946  0E3C  3007               	movlw	7
  2947  0E3D  00CB               	movwf	??_lcdWriteData+1
  2948  0E3E  307D               	movlw	125
  2949  0E3F  00CA               	movwf	??_lcdWriteData
  2950  0E40                     u1987:	
  2951  0E40  0BCA               	decfsz	??_lcdWriteData,f
  2952  0E41  2E40               	goto	u1987
  2953  0E42  0BCB               	decfsz	??_lcdWriteData+1,f
  2954  0E43  2E40               	goto	u1987
  2955  0E44  0008               	return
  2956  0E45                     __end_of_lcdWriteData:	
  2957                           
  2958                           	psect	text15
  2959  0DE1                     __ptext15:	
  2960 ;; *************** function _lcdSetCursor *****************
  2961 ;; Defined at:
  2962 ;;		line 31 in file "LCD.c"
  2963 ;; Parameters:    Size  Location     Type
  2964 ;;  address         1    wreg     unsigned char 
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;  address         1    3[BANK0 ] unsigned char 
  2967 ;; Return value:  Size  Location     Type
  2968 ;;                  1    wreg      void 
  2969 ;; Registers used:
  2970 ;;		wreg, status,2, status,0, pclath, cstack
  2971 ;; Tracked objects:
  2972 ;;		On entry : 0/0
  2973 ;;		On exit  : 0/0
  2974 ;;		Unchanged: 0/0
  2975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2976 ;;      Params:         0       0       0       0       0
  2977 ;;      Locals:         0       1       0       0       0
  2978 ;;      Temps:          0       0       0       0       0
  2979 ;;      Totals:         0       1       0       0       0
  2980 ;;Total ram usage:        1 bytes
  2981 ;; Hardware stack levels used:    1
  2982 ;; Hardware stack levels required when called:    4
  2983 ;; This function calls:
  2984 ;;		_lcdWriteControl
  2985 ;; This function is called by:
  2986 ;;		_main
  2987 ;;		_ADCMain
  2988 ;; This function uses a non-reentrant model
  2989 ;;
  2990                           
  2991                           
  2992                           ;psect for function _lcdSetCursor
  2993  0DE1                     _lcdSetCursor:	
  2994                           
  2995                           ;incstack = 0
  2996                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  2997                           ;lcdSetCursor@address stored from wreg
  2998  0DE1  1283               	bcf	3,5	;RP0=0, select bank0
  2999  0DE2  1303               	bcf	3,6	;RP1=0, select bank0
  3000  0DE3  00CD               	movwf	lcdSetCursor@address
  3001                           
  3002                           ;LCD.c: 32: address |= 0b10000000;
  3003  0DE4  17CD               	bsf	lcdSetCursor@address,7
  3004                           
  3005                           ;LCD.c: 33: lcdWriteControl(address);
  3006  0DE5  084D               	movf	lcdSetCursor@address,w
  3007  0DE6  120A  158A  2645   	fcall	_lcdWriteControl
  3008  0DE9  0008               	return
  3009  0DEA                     __end_of_lcdSetCursor:	
  3010                           
  3011                           	psect	text16
  3012  0E45                     __ptext16:	
  3013 ;; *************** function _lcdWriteControl *****************
  3014 ;; Defined at:
  3015 ;;		line 9 in file "LCD.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;  databyte        1    wreg     unsigned char 
  3018 ;; Auto vars:     Size  Location     Type
  3019 ;;  databyte        1    2[BANK0 ] unsigned char 
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  1    wreg      void 
  3022 ;; Registers used:
  3023 ;;		wreg
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 0/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3029 ;;      Params:         0       0       0       0       0
  3030 ;;      Locals:         0       1       0       0       0
  3031 ;;      Temps:          0       2       0       0       0
  3032 ;;      Totals:         0       3       0       0       0
  3033 ;;Total ram usage:        3 bytes
  3034 ;; Hardware stack levels used:    1
  3035 ;; Hardware stack levels required when called:    3
  3036 ;; This function calls:
  3037 ;;		Nothing
  3038 ;; This function is called by:
  3039 ;;		_lcdSetCursor
  3040 ;;		_setupLCD
  3041 ;; This function uses a non-reentrant model
  3042 ;;
  3043                           
  3044                           
  3045                           ;psect for function _lcdWriteControl
  3046  0E45                     _lcdWriteControl:	
  3047                           
  3048                           ;incstack = 0
  3049                           ; Regs used in _lcdWriteControl: [wreg]
  3050                           ;lcdWriteControl@databyte stored from wreg
  3051  0E45  1283               	bcf	3,5	;RP0=0, select bank0
  3052  0E46  1303               	bcf	3,6	;RP1=0, select bank0
  3053  0E47  00CC               	movwf	lcdWriteControl@databyte
  3054                           
  3055                           ;LCD.c: 10: RE2 = 0;
  3056  0E48  1109               	bcf	9,2	;volatile
  3057                           
  3058                           ;LCD.c: 11: RE1 = 0;
  3059  0E49  1089               	bcf	9,1	;volatile
  3060                           
  3061                           ;LCD.c: 12: RE0 = 0;
  3062  0E4A  1009               	bcf	9,0	;volatile
  3063                           
  3064                           ;LCD.c: 13: PORTD = databyte;
  3065  0E4B  084C               	movf	lcdWriteControl@databyte,w
  3066  0E4C  0088               	movwf	8	;volatile
  3067                           
  3068                           ;LCD.c: 14: RE2 = 1;
  3069  0E4D  1509               	bsf	9,2	;volatile
  3070                           
  3071                           ;LCD.c: 15: RE2 = 0;
  3072  0E4E  1109               	bcf	9,2	;volatile
  3073                           
  3074                           ;LCD.c: 16: _delay((unsigned long)((2)*(20000000/4000.0)));
  3075  0E4F  300D               	movlw	13
  3076  0E50  00CB               	movwf	??_lcdWriteControl+1
  3077  0E51  30FB               	movlw	251
  3078  0E52  00CA               	movwf	??_lcdWriteControl
  3079  0E53                     u1997:	
  3080  0E53  0BCA               	decfsz	??_lcdWriteControl,f
  3081  0E54  2E53               	goto	u1997
  3082  0E55  0BCB               	decfsz	??_lcdWriteControl+1,f
  3083  0E56  2E53               	goto	u1997
  3084  0E57  2E58               	nop2
  3085  0E58  0008               	return
  3086  0E59                     __end_of_lcdWriteControl:	
  3087                           
  3088                           	psect	text17
  3089  07BA                     __ptext17:	
  3090 ;; *************** function _getADC *****************
  3091 ;; Defined at:
  3092 ;;		line 29 in file "ADC.c"
  3093 ;; Parameters:    Size  Location     Type
  3094 ;;		None
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;		None
  3097 ;; Return value:  Size  Location     Type
  3098 ;;                  2  398[None  ] unsigned int 
  3099 ;; Registers used:
  3100 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3101 ;; Tracked objects:
  3102 ;;		On entry : 0/0
  3103 ;;		On exit  : 0/0
  3104 ;;		Unchanged: 0/0
  3105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3106 ;;      Params:         0       0       0       0       0
  3107 ;;      Locals:         0       0       0       0       0
  3108 ;;      Temps:          0       2       0       0       0
  3109 ;;      Totals:         0       2       0       0       0
  3110 ;;Total ram usage:        2 bytes
  3111 ;; Hardware stack levels used:    1
  3112 ;; Hardware stack levels required when called:    3
  3113 ;; This function calls:
  3114 ;;		Nothing
  3115 ;; This function is called by:
  3116 ;;		_ADCMain
  3117 ;; This function uses a non-reentrant model
  3118 ;;
  3119                           
  3120                           
  3121                           ;psect for function _getADC
  3122  07BA                     _getADC:	
  3123                           
  3124                           ;ADC.c: 31: ADRESH = 0;
  3125                           
  3126                           ;incstack = 0
  3127                           ; Regs used in _getADC: [wreg-fsr0h+status,2+status,0]
  3128  07BA  1283               	bcf	3,5	;RP0=0, select bank0
  3129  07BB  1303               	bcf	3,6	;RP1=0, select bank0
  3130  07BC  019E               	clrf	30	;volatile
  3131                           
  3132                           ;ADC.c: 32: ADRESL = 0;
  3133  07BD  1683               	bsf	3,5	;RP0=1, select bank1
  3134  07BE  1303               	bcf	3,6	;RP1=0, select bank1
  3135  07BF  019E               	clrf	30	;volatile
  3136                           
  3137                           ;ADC.c: 34: GO = 1;
  3138  07C0  1283               	bcf	3,5	;RP0=0, select bank0
  3139  07C1  1303               	bcf	3,6	;RP1=0, select bank0
  3140  07C2  151F               	bsf	31,2	;volatile
  3141  07C3                     l443:	
  3142                           ;ADC.c: 35: while(GO) continue;
  3143                           
  3144  07C3  191F               	btfsc	31,2	;volatile
  3145  07C4  2FC3               	goto	l443
  3146                           
  3147                           ;ADC.c: 39: adcRAW = (4*ADRESH);
  3148  07C5  081E               	movf	30,w	;volatile
  3149  07C6  00CA               	movwf	??_getADC
  3150  07C7  01CB               	clrf	??_getADC+1
  3151  07C8  1003               	clrc
  3152  07C9  0DCA               	rlf	??_getADC,f
  3153  07CA  0DCB               	rlf	??_getADC+1,f
  3154  07CB  1003               	clrc
  3155  07CC  0DCA               	rlf	??_getADC,f
  3156  07CD  0DCB               	rlf	??_getADC+1,f
  3157  07CE  084A               	movf	??_getADC,w
  3158  07CF  00A2               	movwf	_adcRAW	;volatile
  3159  07D0  084B               	movf	??_getADC+1,w
  3160  07D1  00A3               	movwf	_adcRAW+1	;volatile
  3161                           
  3162                           ;ADC.c: 41: switch(ADRESL){
  3163  07D2  2FF1               	goto	l1723
  3164  07D3                     l1717:	
  3165                           ;ADC.c: 42: case 0b01000000: adcRAW = adcRAW + 1;
  3166                           
  3167  07D3  1283               	bcf	3,5	;RP0=0, select bank0
  3168  07D4  0822               	movf	_adcRAW,w	;volatile
  3169  07D5  3E01               	addlw	1
  3170  07D6  00A2               	movwf	_adcRAW	;volatile
  3171  07D7  0823               	movf	_adcRAW+1,w	;volatile
  3172  07D8  1803               	skipnc
  3173  07D9  3E01               	addlw	1
  3174  07DA  3E00               	addlw	0
  3175  07DB  00A3               	movwf	_adcRAW+1	;volatile
  3176                           
  3177                           ;ADC.c: 43: break;
  3178  07DC  0008               	return
  3179  07DD                     l1719:	
  3180                           ;ADC.c: 44: case 0b10000000: adcRAW = adcRAW + 2;
  3181                           
  3182  07DD  1283               	bcf	3,5	;RP0=0, select bank0
  3183  07DE  0822               	movf	_adcRAW,w	;volatile
  3184  07DF  3E02               	addlw	2
  3185  07E0  00A2               	movwf	_adcRAW	;volatile
  3186  07E1  0823               	movf	_adcRAW+1,w	;volatile
  3187  07E2  1803               	skipnc
  3188  07E3  3E01               	addlw	1
  3189  07E4  3E00               	addlw	0
  3190  07E5  00A3               	movwf	_adcRAW+1	;volatile
  3191                           
  3192                           ;ADC.c: 45: break;
  3193  07E6  0008               	return
  3194  07E7                     l1721:	
  3195                           ;ADC.c: 46: case 0b11000000: adcRAW = adcRAW + 3;
  3196                           
  3197  07E7  1283               	bcf	3,5	;RP0=0, select bank0
  3198  07E8  0822               	movf	_adcRAW,w	;volatile
  3199  07E9  3E03               	addlw	3
  3200  07EA  00A2               	movwf	_adcRAW	;volatile
  3201  07EB  0823               	movf	_adcRAW+1,w	;volatile
  3202  07EC  1803               	skipnc
  3203  07ED  3E01               	addlw	1
  3204  07EE  3E00               	addlw	0
  3205  07EF  00A3               	movwf	_adcRAW+1	;volatile
  3206                           
  3207                           ;ADC.c: 49: }
  3208                           
  3209                           ;ADC.c: 48: default: adcRAW = adcRAW;
  3210                           
  3211                           ;ADC.c: 47: break;
  3212  07F0  0008               	return
  3213  07F1                     l1723:	
  3214  07F1  1683               	bsf	3,5	;RP0=1, select bank1
  3215  07F2  1303               	bcf	3,6	;RP1=0, select bank1
  3216  07F3  081E               	movf	30,w	;volatile
  3217                           
  3218                           ; Switch size 1, requested type "space"
  3219                           ; Number of cases is 3, Range of values is 64 to 192
  3220                           ; switch strategies available:
  3221                           ; Name         Instructions Cycles
  3222                           ; simple_byte           10     6 (average)
  3223                           ; jumptable            263     9 (fixed)
  3224                           ;	Chosen strategy is simple_byte
  3225  07F4  3A40               	xorlw	64	; case 64
  3226  07F5  1903               	skipnz
  3227  07F6  2FD3               	goto	l1717
  3228  07F7  3AC0               	xorlw	192	; case 128
  3229  07F8  1903               	skipnz
  3230  07F9  2FDD               	goto	l1719
  3231  07FA  3A40               	xorlw	64	; case 192
  3232  07FB  1903               	skipnz
  3233  07FC  2FE7               	goto	l1721
  3234  07FD  2FFE               	goto	l452
  3235  07FE                     l452:	
  3236                           ;ADC.c: 51: return(adcRAW);
  3237                           ;	Return value of _getADC is never used
  3238                           
  3239  07FE  0008               	return
  3240  07FF                     __end_of_getADC:	
  3241                           
  3242                           	psect	text18
  3243  002D                     __ptext18:	
  3244 ;; *************** function _adcConvertMM *****************
  3245 ;; Defined at:
  3246 ;;		line 59 in file "ADC.c"
  3247 ;; Parameters:    Size  Location     Type
  3248 ;;  adcRAW          2   21[BANK0 ] unsigned int 
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;		None
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  2   21[BANK0 ] unsigned int 
  3253 ;; Registers used:
  3254 ;;		wreg, status,2, status,0, pclath, cstack
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3260 ;;      Params:         0       2       0       0       0
  3261 ;;      Locals:         0       0       0       0       0
  3262 ;;      Temps:          0       8       0       0       0
  3263 ;;      Totals:         0      10       0       0       0
  3264 ;;Total ram usage:       10 bytes
  3265 ;; Hardware stack levels used:    1
  3266 ;; Hardware stack levels required when called:    4
  3267 ;; This function calls:
  3268 ;;		___aldiv
  3269 ;;		___lwdiv
  3270 ;;		___wmul
  3271 ;; This function is called by:
  3272 ;;		_ADCMain
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           
  3277                           ;psect for function _adcConvertMM
  3278  002D                     _adcConvertMM:	
  3279                           
  3280                           ;ADC.c: 61: if (adcRAW < 517 && adcRAW >= 513)
  3281                           
  3282                           ;incstack = 0
  3283                           ; Regs used in _adcConvertMM: [wreg+status,2+status,0+pclath+cstack]
  3284  002D  3002               	movlw	2
  3285  002E  1283               	bcf	3,5	;RP0=0, select bank0
  3286  002F  1303               	bcf	3,6	;RP1=0, select bank0
  3287  0030  0260               	subwf	adcConvertMM@adcRAW+1,w
  3288  0031  3005               	movlw	5
  3289  0032  1903               	skipnz
  3290  0033  025F               	subwf	adcConvertMM@adcRAW,w
  3291  0034  1803               	skipnc
  3292  0035  2896               	goto	l1731
  3293  0036  3002               	movlw	2
  3294  0037  0260               	subwf	adcConvertMM@adcRAW+1,w
  3295  0038  3001               	movlw	1
  3296  0039  1903               	skipnz
  3297  003A  025F               	subwf	adcConvertMM@adcRAW,w
  3298  003B  1C03               	skipc
  3299  003C  2896               	goto	l1731
  3300                           
  3301                           ;ADC.c: 62: Distance = (((51700 - adcRAW*100)/4) + 100);
  3302  003D  3000               	movlw	0
  3303  003E  00D3               	movwf	___aldiv@divisor+3
  3304  003F  3000               	movlw	0
  3305  0040  00D2               	movwf	___aldiv@divisor+2
  3306  0041  3000               	movlw	0
  3307  0042  00D1               	movwf	___aldiv@divisor+1
  3308  0043  3004               	movlw	4
  3309  0044  00D0               	movwf	___aldiv@divisor
  3310  0045  30F4               	movlw	244
  3311  0046  00E1               	movwf	??_adcConvertMM
  3312  0047  30C9               	movlw	201
  3313  0048  00E2               	movwf	??_adcConvertMM+1
  3314  0049  3000               	movlw	0
  3315  004A  00E3               	movwf	??_adcConvertMM+2
  3316  004B  3000               	movlw	0
  3317  004C  00E4               	movwf	??_adcConvertMM+3
  3318  004D  0860               	movf	adcConvertMM@adcRAW+1,w
  3319  004E  00CB               	movwf	___wmul@multiplier+1
  3320  004F  085F               	movf	adcConvertMM@adcRAW,w
  3321  0050  00CA               	movwf	___wmul@multiplier
  3322  0051  3064               	movlw	100
  3323  0052  00CC               	movwf	___wmul@multiplicand
  3324  0053  3000               	movlw	0
  3325  0054  00CD               	movwf	___wmul@multiplicand+1
  3326  0055  120A  158A  26A7  120A  118A  	fcall	___wmul
  3327  005A  1283               	bcf	3,5	;RP0=0, select bank0
  3328  005B  1303               	bcf	3,6	;RP1=0, select bank0
  3329  005C  084A               	movf	?___wmul,w
  3330  005D  00E5               	movwf	??_adcConvertMM+4
  3331  005E  084B               	movf	?___wmul+1,w
  3332  005F  00E6               	movwf	??_adcConvertMM+5
  3333  0060  01E7               	clrf	??_adcConvertMM+6
  3334  0061  01E8               	clrf	??_adcConvertMM+7
  3335  0062  09E5               	comf	??_adcConvertMM+4,f
  3336  0063  09E6               	comf	??_adcConvertMM+5,f
  3337  0064  09E7               	comf	??_adcConvertMM+6,f
  3338  0065  09E8               	comf	??_adcConvertMM+7,f
  3339  0066  0AE5               	incf	??_adcConvertMM+4,f
  3340  0067  1903               	skipnz
  3341  0068  0AE6               	incf	??_adcConvertMM+5,f
  3342  0069  1903               	skipnz
  3343  006A  0AE7               	incf	??_adcConvertMM+6,f
  3344  006B  1903               	skipnz
  3345  006C  0AE8               	incf	??_adcConvertMM+7,f
  3346  006D  0865               	movf	??_adcConvertMM+4,w
  3347  006E  07E1               	addwf	??_adcConvertMM,f
  3348  006F  0866               	movf	??_adcConvertMM+5,w
  3349  0070  1803               	skipnc
  3350  0071  0F66               	incfsz	??_adcConvertMM+5,w
  3351  0072  2874               	goto	u1290
  3352  0073  2875               	goto	u1291
  3353  0074                     u1290:	
  3354  0074  07E2               	addwf	??_adcConvertMM+1,f
  3355  0075                     u1291:	
  3356  0075  0867               	movf	??_adcConvertMM+6,w
  3357  0076  1803               	skipnc
  3358  0077  0F67               	incfsz	??_adcConvertMM+6,w
  3359  0078  287A               	goto	u1292
  3360  0079  287B               	goto	u1293
  3361  007A                     u1292:	
  3362  007A  07E3               	addwf	??_adcConvertMM+2,f
  3363  007B                     u1293:	
  3364  007B  0868               	movf	??_adcConvertMM+7,w
  3365  007C  1803               	skipnc
  3366  007D  0A68               	incf	??_adcConvertMM+7,w
  3367  007E  07E4               	addwf	??_adcConvertMM+3,f
  3368  007F  0864               	movf	??_adcConvertMM+3,w
  3369  0080  00D7               	movwf	___aldiv@dividend+3
  3370  0081  0863               	movf	??_adcConvertMM+2,w
  3371  0082  00D6               	movwf	___aldiv@dividend+2
  3372  0083  0862               	movf	??_adcConvertMM+1,w
  3373  0084  00D5               	movwf	___aldiv@dividend+1
  3374  0085  0861               	movf	??_adcConvertMM,w
  3375  0086  00D4               	movwf	___aldiv@dividend
  3376  0087  120A  118A  2618  120A  118A  	fcall	___aldiv
  3377  008C  1283               	bcf	3,5	;RP0=0, select bank0
  3378  008D  1303               	bcf	3,6	;RP1=0, select bank0
  3379  008E  0850               	movf	?___aldiv,w
  3380  008F  3E64               	addlw	100
  3381  0090  00A0               	movwf	_Distance	;volatile
  3382  0091  0851               	movf	?___aldiv+1,w
  3383  0092  1803               	skipnc
  3384  0093  3E01               	addlw	1
  3385  0094  3E00               	addlw	0
  3386  0095  00A1               	movwf	_Distance+1	;volatile
  3387  0096                     l1731:	
  3388                           
  3389                           ;ADC.c: 64: if (adcRAW < 513 && adcRAW >= 393)
  3390  0096  3002               	movlw	2
  3391  0097  0260               	subwf	adcConvertMM@adcRAW+1,w
  3392  0098  3001               	movlw	1
  3393  0099  1903               	skipnz
  3394  009A  025F               	subwf	adcConvertMM@adcRAW,w
  3395  009B  1803               	skipnc
  3396  009C  28FD               	goto	l1737
  3397  009D  3001               	movlw	1
  3398  009E  0260               	subwf	adcConvertMM@adcRAW+1,w
  3399  009F  3089               	movlw	137
  3400  00A0  1903               	skipnz
  3401  00A1  025F               	subwf	adcConvertMM@adcRAW,w
  3402  00A2  1C03               	skipc
  3403  00A3  28FD               	goto	l1737
  3404                           
  3405                           ;ADC.c: 65: Distance = (((51300 - adcRAW*100)/120) + 200);
  3406  00A4  3000               	movlw	0
  3407  00A5  00D3               	movwf	___aldiv@divisor+3
  3408  00A6  3000               	movlw	0
  3409  00A7  00D2               	movwf	___aldiv@divisor+2
  3410  00A8  3000               	movlw	0
  3411  00A9  00D1               	movwf	___aldiv@divisor+1
  3412  00AA  3078               	movlw	120
  3413  00AB  00D0               	movwf	___aldiv@divisor
  3414  00AC  3064               	movlw	100
  3415  00AD  00E1               	movwf	??_adcConvertMM
  3416  00AE  30C8               	movlw	200
  3417  00AF  00E2               	movwf	??_adcConvertMM+1
  3418  00B0  3000               	movlw	0
  3419  00B1  00E3               	movwf	??_adcConvertMM+2
  3420  00B2  3000               	movlw	0
  3421  00B3  00E4               	movwf	??_adcConvertMM+3
  3422  00B4  0860               	movf	adcConvertMM@adcRAW+1,w
  3423  00B5  00CB               	movwf	___wmul@multiplier+1
  3424  00B6  085F               	movf	adcConvertMM@adcRAW,w
  3425  00B7  00CA               	movwf	___wmul@multiplier
  3426  00B8  3064               	movlw	100
  3427  00B9  00CC               	movwf	___wmul@multiplicand
  3428  00BA  3000               	movlw	0
  3429  00BB  00CD               	movwf	___wmul@multiplicand+1
  3430  00BC  120A  158A  26A7  120A  118A  	fcall	___wmul
  3431  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  3432  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  3433  00C3  084A               	movf	?___wmul,w
  3434  00C4  00E5               	movwf	??_adcConvertMM+4
  3435  00C5  084B               	movf	?___wmul+1,w
  3436  00C6  00E6               	movwf	??_adcConvertMM+5
  3437  00C7  01E7               	clrf	??_adcConvertMM+6
  3438  00C8  01E8               	clrf	??_adcConvertMM+7
  3439  00C9  09E5               	comf	??_adcConvertMM+4,f
  3440  00CA  09E6               	comf	??_adcConvertMM+5,f
  3441  00CB  09E7               	comf	??_adcConvertMM+6,f
  3442  00CC  09E8               	comf	??_adcConvertMM+7,f
  3443  00CD  0AE5               	incf	??_adcConvertMM+4,f
  3444  00CE  1903               	skipnz
  3445  00CF  0AE6               	incf	??_adcConvertMM+5,f
  3446  00D0  1903               	skipnz
  3447  00D1  0AE7               	incf	??_adcConvertMM+6,f
  3448  00D2  1903               	skipnz
  3449  00D3  0AE8               	incf	??_adcConvertMM+7,f
  3450  00D4  0865               	movf	??_adcConvertMM+4,w
  3451  00D5  07E1               	addwf	??_adcConvertMM,f
  3452  00D6  0866               	movf	??_adcConvertMM+5,w
  3453  00D7  1803               	skipnc
  3454  00D8  0F66               	incfsz	??_adcConvertMM+5,w
  3455  00D9  28DB               	goto	u1320
  3456  00DA  28DC               	goto	u1321
  3457  00DB                     u1320:	
  3458  00DB  07E2               	addwf	??_adcConvertMM+1,f
  3459  00DC                     u1321:	
  3460  00DC  0867               	movf	??_adcConvertMM+6,w
  3461  00DD  1803               	skipnc
  3462  00DE  0F67               	incfsz	??_adcConvertMM+6,w
  3463  00DF  28E1               	goto	u1322
  3464  00E0  28E2               	goto	u1323
  3465  00E1                     u1322:	
  3466  00E1  07E3               	addwf	??_adcConvertMM+2,f
  3467  00E2                     u1323:	
  3468  00E2  0868               	movf	??_adcConvertMM+7,w
  3469  00E3  1803               	skipnc
  3470  00E4  0A68               	incf	??_adcConvertMM+7,w
  3471  00E5  07E4               	addwf	??_adcConvertMM+3,f
  3472  00E6  0864               	movf	??_adcConvertMM+3,w
  3473  00E7  00D7               	movwf	___aldiv@dividend+3
  3474  00E8  0863               	movf	??_adcConvertMM+2,w
  3475  00E9  00D6               	movwf	___aldiv@dividend+2
  3476  00EA  0862               	movf	??_adcConvertMM+1,w
  3477  00EB  00D5               	movwf	___aldiv@dividend+1
  3478  00EC  0861               	movf	??_adcConvertMM,w
  3479  00ED  00D4               	movwf	___aldiv@dividend
  3480  00EE  120A  118A  2618  120A  118A  	fcall	___aldiv
  3481  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  3482  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  3483  00F5  0850               	movf	?___aldiv,w
  3484  00F6  3EC8               	addlw	200
  3485  00F7  00A0               	movwf	_Distance	;volatile
  3486  00F8  0851               	movf	?___aldiv+1,w
  3487  00F9  1803               	skipnc
  3488  00FA  3E01               	addlw	1
  3489  00FB  3E00               	addlw	0
  3490  00FC  00A1               	movwf	_Distance+1	;volatile
  3491  00FD                     l1737:	
  3492                           
  3493                           ;ADC.c: 67: if (adcRAW < 393 && adcRAW >= 298)
  3494  00FD  3001               	movlw	1
  3495  00FE  0260               	subwf	adcConvertMM@adcRAW+1,w
  3496  00FF  3089               	movlw	137
  3497  0100  1903               	skipnz
  3498  0101  025F               	subwf	adcConvertMM@adcRAW,w
  3499  0102  1803               	skipnc
  3500  0103  2964               	goto	l1743
  3501  0104  3001               	movlw	1
  3502  0105  0260               	subwf	adcConvertMM@adcRAW+1,w
  3503  0106  302A               	movlw	42
  3504  0107  1903               	skipnz
  3505  0108  025F               	subwf	adcConvertMM@adcRAW,w
  3506  0109  1C03               	skipc
  3507  010A  2964               	goto	l1743
  3508                           
  3509                           ;ADC.c: 68: Distance = (((39300 - adcRAW*100)/95) + 300);
  3510  010B  3000               	movlw	0
  3511  010C  00D3               	movwf	___aldiv@divisor+3
  3512  010D  3000               	movlw	0
  3513  010E  00D2               	movwf	___aldiv@divisor+2
  3514  010F  3000               	movlw	0
  3515  0110  00D1               	movwf	___aldiv@divisor+1
  3516  0111  305F               	movlw	95
  3517  0112  00D0               	movwf	___aldiv@divisor
  3518  0113  3084               	movlw	132
  3519  0114  00E1               	movwf	??_adcConvertMM
  3520  0115  3099               	movlw	153
  3521  0116  00E2               	movwf	??_adcConvertMM+1
  3522  0117  3000               	movlw	0
  3523  0118  00E3               	movwf	??_adcConvertMM+2
  3524  0119  3000               	movlw	0
  3525  011A  00E4               	movwf	??_adcConvertMM+3
  3526  011B  0860               	movf	adcConvertMM@adcRAW+1,w
  3527  011C  00CB               	movwf	___wmul@multiplier+1
  3528  011D  085F               	movf	adcConvertMM@adcRAW,w
  3529  011E  00CA               	movwf	___wmul@multiplier
  3530  011F  3064               	movlw	100
  3531  0120  00CC               	movwf	___wmul@multiplicand
  3532  0121  3000               	movlw	0
  3533  0122  00CD               	movwf	___wmul@multiplicand+1
  3534  0123  120A  158A  26A7  120A  118A  	fcall	___wmul
  3535  0128  1283               	bcf	3,5	;RP0=0, select bank0
  3536  0129  1303               	bcf	3,6	;RP1=0, select bank0
  3537  012A  084A               	movf	?___wmul,w
  3538  012B  00E5               	movwf	??_adcConvertMM+4
  3539  012C  084B               	movf	?___wmul+1,w
  3540  012D  00E6               	movwf	??_adcConvertMM+5
  3541  012E  01E7               	clrf	??_adcConvertMM+6
  3542  012F  01E8               	clrf	??_adcConvertMM+7
  3543  0130  09E5               	comf	??_adcConvertMM+4,f
  3544  0131  09E6               	comf	??_adcConvertMM+5,f
  3545  0132  09E7               	comf	??_adcConvertMM+6,f
  3546  0133  09E8               	comf	??_adcConvertMM+7,f
  3547  0134  0AE5               	incf	??_adcConvertMM+4,f
  3548  0135  1903               	skipnz
  3549  0136  0AE6               	incf	??_adcConvertMM+5,f
  3550  0137  1903               	skipnz
  3551  0138  0AE7               	incf	??_adcConvertMM+6,f
  3552  0139  1903               	skipnz
  3553  013A  0AE8               	incf	??_adcConvertMM+7,f
  3554  013B  0865               	movf	??_adcConvertMM+4,w
  3555  013C  07E1               	addwf	??_adcConvertMM,f
  3556  013D  0866               	movf	??_adcConvertMM+5,w
  3557  013E  1803               	skipnc
  3558  013F  0F66               	incfsz	??_adcConvertMM+5,w
  3559  0140  2942               	goto	u1350
  3560  0141  2943               	goto	u1351
  3561  0142                     u1350:	
  3562  0142  07E2               	addwf	??_adcConvertMM+1,f
  3563  0143                     u1351:	
  3564  0143  0867               	movf	??_adcConvertMM+6,w
  3565  0144  1803               	skipnc
  3566  0145  0F67               	incfsz	??_adcConvertMM+6,w
  3567  0146  2948               	goto	u1352
  3568  0147  2949               	goto	u1353
  3569  0148                     u1352:	
  3570  0148  07E3               	addwf	??_adcConvertMM+2,f
  3571  0149                     u1353:	
  3572  0149  0868               	movf	??_adcConvertMM+7,w
  3573  014A  1803               	skipnc
  3574  014B  0A68               	incf	??_adcConvertMM+7,w
  3575  014C  07E4               	addwf	??_adcConvertMM+3,f
  3576  014D  0864               	movf	??_adcConvertMM+3,w
  3577  014E  00D7               	movwf	___aldiv@dividend+3
  3578  014F  0863               	movf	??_adcConvertMM+2,w
  3579  0150  00D6               	movwf	___aldiv@dividend+2
  3580  0151  0862               	movf	??_adcConvertMM+1,w
  3581  0152  00D5               	movwf	___aldiv@dividend+1
  3582  0153  0861               	movf	??_adcConvertMM,w
  3583  0154  00D4               	movwf	___aldiv@dividend
  3584  0155  120A  118A  2618  120A  118A  	fcall	___aldiv
  3585  015A  1283               	bcf	3,5	;RP0=0, select bank0
  3586  015B  1303               	bcf	3,6	;RP1=0, select bank0
  3587  015C  0850               	movf	?___aldiv,w
  3588  015D  3E2C               	addlw	44
  3589  015E  00A0               	movwf	_Distance	;volatile
  3590  015F  0851               	movf	?___aldiv+1,w
  3591  0160  1803               	skipnc
  3592  0161  3E01               	addlw	1
  3593  0162  3E01               	addlw	1
  3594  0163  00A1               	movwf	_Distance+1	;volatile
  3595  0164                     l1743:	
  3596                           
  3597                           ;ADC.c: 70: if (adcRAW < 298 && adcRAW >= 236)
  3598  0164  3001               	movlw	1
  3599  0165  0260               	subwf	adcConvertMM@adcRAW+1,w
  3600  0166  302A               	movlw	42
  3601  0167  1903               	skipnz
  3602  0168  025F               	subwf	adcConvertMM@adcRAW,w
  3603  0169  1803               	skipnc
  3604  016A  29A3               	goto	l1749
  3605  016B  3000               	movlw	0
  3606  016C  0260               	subwf	adcConvertMM@adcRAW+1,w
  3607  016D  30EC               	movlw	236
  3608  016E  1903               	skipnz
  3609  016F  025F               	subwf	adcConvertMM@adcRAW,w
  3610  0170  1C03               	skipc
  3611  0171  29A3               	goto	l1749
  3612                           
  3613                           ;ADC.c: 71: Distance = (((29800 - adcRAW*100)/62) + 400);
  3614  0172  303E               	movlw	62
  3615  0173  00D0               	movwf	___lwdiv@divisor
  3616  0174  3000               	movlw	0
  3617  0175  00D1               	movwf	___lwdiv@divisor+1
  3618  0176  0860               	movf	adcConvertMM@adcRAW+1,w
  3619  0177  00CB               	movwf	___wmul@multiplier+1
  3620  0178  085F               	movf	adcConvertMM@adcRAW,w
  3621  0179  00CA               	movwf	___wmul@multiplier
  3622  017A  3064               	movlw	100
  3623  017B  00CC               	movwf	___wmul@multiplicand
  3624  017C  3000               	movlw	0
  3625  017D  00CD               	movwf	___wmul@multiplicand+1
  3626  017E  120A  158A  26A7  120A  118A  	fcall	___wmul
  3627  0183  1283               	bcf	3,5	;RP0=0, select bank0
  3628  0184  1303               	bcf	3,6	;RP1=0, select bank0
  3629  0185  094A               	comf	?___wmul,w
  3630  0186  00E1               	movwf	??_adcConvertMM
  3631  0187  094B               	comf	?___wmul+1,w
  3632  0188  00E2               	movwf	??_adcConvertMM+1
  3633  0189  0AE1               	incf	??_adcConvertMM,f
  3634  018A  1903               	skipnz
  3635  018B  0AE2               	incf	??_adcConvertMM+1,f
  3636  018C  0861               	movf	??_adcConvertMM,w
  3637  018D  3E68               	addlw	104
  3638  018E  00D2               	movwf	___lwdiv@dividend
  3639  018F  0862               	movf	??_adcConvertMM+1,w
  3640  0190  1803               	skipnc
  3641  0191  3E01               	addlw	1
  3642  0192  3E74               	addlw	116
  3643  0193  00D3               	movwf	___lwdiv@dividend+1
  3644  0194  120A  158A  2784  120A  118A  	fcall	___lwdiv
  3645  0199  1283               	bcf	3,5	;RP0=0, select bank0
  3646  019A  1303               	bcf	3,6	;RP1=0, select bank0
  3647  019B  0850               	movf	?___lwdiv,w
  3648  019C  3E90               	addlw	144
  3649  019D  00A0               	movwf	_Distance	;volatile
  3650  019E  0851               	movf	?___lwdiv+1,w
  3651  019F  1803               	skipnc
  3652  01A0  3E01               	addlw	1
  3653  01A1  3E01               	addlw	1
  3654  01A2  00A1               	movwf	_Distance+1	;volatile
  3655  01A3                     l1749:	
  3656                           
  3657                           ;ADC.c: 73: if (adcRAW < 236 && adcRAW >= 194)
  3658  01A3  3000               	movlw	0
  3659  01A4  0260               	subwf	adcConvertMM@adcRAW+1,w
  3660  01A5  30EC               	movlw	236
  3661  01A6  1903               	skipnz
  3662  01A7  025F               	subwf	adcConvertMM@adcRAW,w
  3663  01A8  1803               	skipnc
  3664  01A9  29E2               	goto	l1755
  3665  01AA  3000               	movlw	0
  3666  01AB  0260               	subwf	adcConvertMM@adcRAW+1,w
  3667  01AC  30C2               	movlw	194
  3668  01AD  1903               	skipnz
  3669  01AE  025F               	subwf	adcConvertMM@adcRAW,w
  3670  01AF  1C03               	skipc
  3671  01B0  29E2               	goto	l1755
  3672                           
  3673                           ;ADC.c: 74: Distance = (((23600 - adcRAW*100)/42) + 500);
  3674  01B1  302A               	movlw	42
  3675  01B2  00D0               	movwf	___lwdiv@divisor
  3676  01B3  3000               	movlw	0
  3677  01B4  00D1               	movwf	___lwdiv@divisor+1
  3678  01B5  0860               	movf	adcConvertMM@adcRAW+1,w
  3679  01B6  00CB               	movwf	___wmul@multiplier+1
  3680  01B7  085F               	movf	adcConvertMM@adcRAW,w
  3681  01B8  00CA               	movwf	___wmul@multiplier
  3682  01B9  3064               	movlw	100
  3683  01BA  00CC               	movwf	___wmul@multiplicand
  3684  01BB  3000               	movlw	0
  3685  01BC  00CD               	movwf	___wmul@multiplicand+1
  3686  01BD  120A  158A  26A7  120A  118A  	fcall	___wmul
  3687  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  3688  01C3  1303               	bcf	3,6	;RP1=0, select bank0
  3689  01C4  094A               	comf	?___wmul,w
  3690  01C5  00E1               	movwf	??_adcConvertMM
  3691  01C6  094B               	comf	?___wmul+1,w
  3692  01C7  00E2               	movwf	??_adcConvertMM+1
  3693  01C8  0AE1               	incf	??_adcConvertMM,f
  3694  01C9  1903               	skipnz
  3695  01CA  0AE2               	incf	??_adcConvertMM+1,f
  3696  01CB  0861               	movf	??_adcConvertMM,w
  3697  01CC  3E30               	addlw	48
  3698  01CD  00D2               	movwf	___lwdiv@dividend
  3699  01CE  0862               	movf	??_adcConvertMM+1,w
  3700  01CF  1803               	skipnc
  3701  01D0  3E01               	addlw	1
  3702  01D1  3E5C               	addlw	92
  3703  01D2  00D3               	movwf	___lwdiv@dividend+1
  3704  01D3  120A  158A  2784  120A  118A  	fcall	___lwdiv
  3705  01D8  1283               	bcf	3,5	;RP0=0, select bank0
  3706  01D9  1303               	bcf	3,6	;RP1=0, select bank0
  3707  01DA  0850               	movf	?___lwdiv,w
  3708  01DB  3EF4               	addlw	244
  3709  01DC  00A0               	movwf	_Distance	;volatile
  3710  01DD  0851               	movf	?___lwdiv+1,w
  3711  01DE  1803               	skipnc
  3712  01DF  3E01               	addlw	1
  3713  01E0  3E01               	addlw	1
  3714  01E1  00A1               	movwf	_Distance+1	;volatile
  3715  01E2                     l1755:	
  3716                           
  3717                           ;ADC.c: 76: if (adcRAW < 194 && adcRAW >= 168)
  3718  01E2  3000               	movlw	0
  3719  01E3  0260               	subwf	adcConvertMM@adcRAW+1,w
  3720  01E4  30C2               	movlw	194
  3721  01E5  1903               	skipnz
  3722  01E6  025F               	subwf	adcConvertMM@adcRAW,w
  3723  01E7  1803               	skipnc
  3724  01E8  2A21               	goto	l1761
  3725  01E9  3000               	movlw	0
  3726  01EA  0260               	subwf	adcConvertMM@adcRAW+1,w
  3727  01EB  30A8               	movlw	168
  3728  01EC  1903               	skipnz
  3729  01ED  025F               	subwf	adcConvertMM@adcRAW,w
  3730  01EE  1C03               	skipc
  3731  01EF  2A21               	goto	l1761
  3732                           
  3733                           ;ADC.c: 77: Distance = (((19400 - adcRAW*100)/26) + 600);
  3734  01F0  301A               	movlw	26
  3735  01F1  00D0               	movwf	___lwdiv@divisor
  3736  01F2  3000               	movlw	0
  3737  01F3  00D1               	movwf	___lwdiv@divisor+1
  3738  01F4  0860               	movf	adcConvertMM@adcRAW+1,w
  3739  01F5  00CB               	movwf	___wmul@multiplier+1
  3740  01F6  085F               	movf	adcConvertMM@adcRAW,w
  3741  01F7  00CA               	movwf	___wmul@multiplier
  3742  01F8  3064               	movlw	100
  3743  01F9  00CC               	movwf	___wmul@multiplicand
  3744  01FA  3000               	movlw	0
  3745  01FB  00CD               	movwf	___wmul@multiplicand+1
  3746  01FC  120A  158A  26A7  120A  118A  	fcall	___wmul
  3747  0201  1283               	bcf	3,5	;RP0=0, select bank0
  3748  0202  1303               	bcf	3,6	;RP1=0, select bank0
  3749  0203  094A               	comf	?___wmul,w
  3750  0204  00E1               	movwf	??_adcConvertMM
  3751  0205  094B               	comf	?___wmul+1,w
  3752  0206  00E2               	movwf	??_adcConvertMM+1
  3753  0207  0AE1               	incf	??_adcConvertMM,f
  3754  0208  1903               	skipnz
  3755  0209  0AE2               	incf	??_adcConvertMM+1,f
  3756  020A  0861               	movf	??_adcConvertMM,w
  3757  020B  3EC8               	addlw	200
  3758  020C  00D2               	movwf	___lwdiv@dividend
  3759  020D  0862               	movf	??_adcConvertMM+1,w
  3760  020E  1803               	skipnc
  3761  020F  3E01               	addlw	1
  3762  0210  3E4B               	addlw	75
  3763  0211  00D3               	movwf	___lwdiv@dividend+1
  3764  0212  120A  158A  2784  120A  118A  	fcall	___lwdiv
  3765  0217  1283               	bcf	3,5	;RP0=0, select bank0
  3766  0218  1303               	bcf	3,6	;RP1=0, select bank0
  3767  0219  0850               	movf	?___lwdiv,w
  3768  021A  3E58               	addlw	88
  3769  021B  00A0               	movwf	_Distance	;volatile
  3770  021C  0851               	movf	?___lwdiv+1,w
  3771  021D  1803               	skipnc
  3772  021E  3E01               	addlw	1
  3773  021F  3E02               	addlw	2
  3774  0220  00A1               	movwf	_Distance+1	;volatile
  3775  0221                     l1761:	
  3776                           
  3777                           ;ADC.c: 79: if (adcRAW < 168 && adcRAW >= 144)
  3778  0221  3000               	movlw	0
  3779  0222  0260               	subwf	adcConvertMM@adcRAW+1,w
  3780  0223  30A8               	movlw	168
  3781  0224  1903               	skipnz
  3782  0225  025F               	subwf	adcConvertMM@adcRAW,w
  3783  0226  1803               	skipnc
  3784  0227  2A60               	goto	l1767
  3785  0228  3000               	movlw	0
  3786  0229  0260               	subwf	adcConvertMM@adcRAW+1,w
  3787  022A  3090               	movlw	144
  3788  022B  1903               	skipnz
  3789  022C  025F               	subwf	adcConvertMM@adcRAW,w
  3790  022D  1C03               	skipc
  3791  022E  2A60               	goto	l1767
  3792                           
  3793                           ;ADC.c: 80: Distance = (((16800 - adcRAW*100)/24) + 700);
  3794  022F  3018               	movlw	24
  3795  0230  00D0               	movwf	___lwdiv@divisor
  3796  0231  3000               	movlw	0
  3797  0232  00D1               	movwf	___lwdiv@divisor+1
  3798  0233  0860               	movf	adcConvertMM@adcRAW+1,w
  3799  0234  00CB               	movwf	___wmul@multiplier+1
  3800  0235  085F               	movf	adcConvertMM@adcRAW,w
  3801  0236  00CA               	movwf	___wmul@multiplier
  3802  0237  3064               	movlw	100
  3803  0238  00CC               	movwf	___wmul@multiplicand
  3804  0239  3000               	movlw	0
  3805  023A  00CD               	movwf	___wmul@multiplicand+1
  3806  023B  120A  158A  26A7  120A  118A  	fcall	___wmul
  3807  0240  1283               	bcf	3,5	;RP0=0, select bank0
  3808  0241  1303               	bcf	3,6	;RP1=0, select bank0
  3809  0242  094A               	comf	?___wmul,w
  3810  0243  00E1               	movwf	??_adcConvertMM
  3811  0244  094B               	comf	?___wmul+1,w
  3812  0245  00E2               	movwf	??_adcConvertMM+1
  3813  0246  0AE1               	incf	??_adcConvertMM,f
  3814  0247  1903               	skipnz
  3815  0248  0AE2               	incf	??_adcConvertMM+1,f
  3816  0249  0861               	movf	??_adcConvertMM,w
  3817  024A  3EA0               	addlw	160
  3818  024B  00D2               	movwf	___lwdiv@dividend
  3819  024C  0862               	movf	??_adcConvertMM+1,w
  3820  024D  1803               	skipnc
  3821  024E  3E01               	addlw	1
  3822  024F  3E41               	addlw	65
  3823  0250  00D3               	movwf	___lwdiv@dividend+1
  3824  0251  120A  158A  2784  120A  118A  	fcall	___lwdiv
  3825  0256  1283               	bcf	3,5	;RP0=0, select bank0
  3826  0257  1303               	bcf	3,6	;RP1=0, select bank0
  3827  0258  0850               	movf	?___lwdiv,w
  3828  0259  3EBC               	addlw	188
  3829  025A  00A0               	movwf	_Distance	;volatile
  3830  025B  0851               	movf	?___lwdiv+1,w
  3831  025C  1803               	skipnc
  3832  025D  3E01               	addlw	1
  3833  025E  3E02               	addlw	2
  3834  025F  00A1               	movwf	_Distance+1	;volatile
  3835  0260                     l1767:	
  3836                           
  3837                           ;ADC.c: 82: if (adcRAW < 144 && adcRAW >= 129)
  3838  0260  3000               	movlw	0
  3839  0261  0260               	subwf	adcConvertMM@adcRAW+1,w
  3840  0262  3090               	movlw	144
  3841  0263  1903               	skipnz
  3842  0264  025F               	subwf	adcConvertMM@adcRAW,w
  3843  0265  1803               	skipnc
  3844  0266  2A9F               	goto	l1773
  3845  0267  3000               	movlw	0
  3846  0268  0260               	subwf	adcConvertMM@adcRAW+1,w
  3847  0269  3081               	movlw	129
  3848  026A  1903               	skipnz
  3849  026B  025F               	subwf	adcConvertMM@adcRAW,w
  3850  026C  1C03               	skipc
  3851  026D  2A9F               	goto	l1773
  3852                           
  3853                           ;ADC.c: 83: Distance = (((14400 - adcRAW*100)/15) + 800);
  3854  026E  300F               	movlw	15
  3855  026F  00D0               	movwf	___lwdiv@divisor
  3856  0270  3000               	movlw	0
  3857  0271  00D1               	movwf	___lwdiv@divisor+1
  3858  0272  0860               	movf	adcConvertMM@adcRAW+1,w
  3859  0273  00CB               	movwf	___wmul@multiplier+1
  3860  0274  085F               	movf	adcConvertMM@adcRAW,w
  3861  0275  00CA               	movwf	___wmul@multiplier
  3862  0276  3064               	movlw	100
  3863  0277  00CC               	movwf	___wmul@multiplicand
  3864  0278  3000               	movlw	0
  3865  0279  00CD               	movwf	___wmul@multiplicand+1
  3866  027A  120A  158A  26A7  120A  118A  	fcall	___wmul
  3867  027F  1283               	bcf	3,5	;RP0=0, select bank0
  3868  0280  1303               	bcf	3,6	;RP1=0, select bank0
  3869  0281  094A               	comf	?___wmul,w
  3870  0282  00E1               	movwf	??_adcConvertMM
  3871  0283  094B               	comf	?___wmul+1,w
  3872  0284  00E2               	movwf	??_adcConvertMM+1
  3873  0285  0AE1               	incf	??_adcConvertMM,f
  3874  0286  1903               	skipnz
  3875  0287  0AE2               	incf	??_adcConvertMM+1,f
  3876  0288  0861               	movf	??_adcConvertMM,w
  3877  0289  3E40               	addlw	64
  3878  028A  00D2               	movwf	___lwdiv@dividend
  3879  028B  0862               	movf	??_adcConvertMM+1,w
  3880  028C  1803               	skipnc
  3881  028D  3E01               	addlw	1
  3882  028E  3E38               	addlw	56
  3883  028F  00D3               	movwf	___lwdiv@dividend+1
  3884  0290  120A  158A  2784  120A  118A  	fcall	___lwdiv
  3885  0295  1283               	bcf	3,5	;RP0=0, select bank0
  3886  0296  1303               	bcf	3,6	;RP1=0, select bank0
  3887  0297  0850               	movf	?___lwdiv,w
  3888  0298  3E20               	addlw	32
  3889  0299  00A0               	movwf	_Distance	;volatile
  3890  029A  0851               	movf	?___lwdiv+1,w
  3891  029B  1803               	skipnc
  3892  029C  3E01               	addlw	1
  3893  029D  3E03               	addlw	3
  3894  029E  00A1               	movwf	_Distance+1	;volatile
  3895  029F                     l1773:	
  3896                           
  3897                           ;ADC.c: 85: if (adcRAW < 129 && adcRAW >= 110)
  3898  029F  3000               	movlw	0
  3899  02A0  0260               	subwf	adcConvertMM@adcRAW+1,w
  3900  02A1  3081               	movlw	129
  3901  02A2  1903               	skipnz
  3902  02A3  025F               	subwf	adcConvertMM@adcRAW,w
  3903  02A4  1803               	skipnc
  3904  02A5  2ADE               	goto	l1779
  3905  02A6  3000               	movlw	0
  3906  02A7  0260               	subwf	adcConvertMM@adcRAW+1,w
  3907  02A8  306E               	movlw	110
  3908  02A9  1903               	skipnz
  3909  02AA  025F               	subwf	adcConvertMM@adcRAW,w
  3910  02AB  1C03               	skipc
  3911  02AC  2ADE               	goto	l1779
  3912                           
  3913                           ;ADC.c: 86: Distance = (((12900 - adcRAW*100)/19) + 900 + 50);
  3914  02AD  3013               	movlw	19
  3915  02AE  00D0               	movwf	___lwdiv@divisor
  3916  02AF  3000               	movlw	0
  3917  02B0  00D1               	movwf	___lwdiv@divisor+1
  3918  02B1  0860               	movf	adcConvertMM@adcRAW+1,w
  3919  02B2  00CB               	movwf	___wmul@multiplier+1
  3920  02B3  085F               	movf	adcConvertMM@adcRAW,w
  3921  02B4  00CA               	movwf	___wmul@multiplier
  3922  02B5  3064               	movlw	100
  3923  02B6  00CC               	movwf	___wmul@multiplicand
  3924  02B7  3000               	movlw	0
  3925  02B8  00CD               	movwf	___wmul@multiplicand+1
  3926  02B9  120A  158A  26A7  120A  118A  	fcall	___wmul
  3927  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  3928  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  3929  02C0  094A               	comf	?___wmul,w
  3930  02C1  00E1               	movwf	??_adcConvertMM
  3931  02C2  094B               	comf	?___wmul+1,w
  3932  02C3  00E2               	movwf	??_adcConvertMM+1
  3933  02C4  0AE1               	incf	??_adcConvertMM,f
  3934  02C5  1903               	skipnz
  3935  02C6  0AE2               	incf	??_adcConvertMM+1,f
  3936  02C7  0861               	movf	??_adcConvertMM,w
  3937  02C8  3E64               	addlw	100
  3938  02C9  00D2               	movwf	___lwdiv@dividend
  3939  02CA  0862               	movf	??_adcConvertMM+1,w
  3940  02CB  1803               	skipnc
  3941  02CC  3E01               	addlw	1
  3942  02CD  3E32               	addlw	50
  3943  02CE  00D3               	movwf	___lwdiv@dividend+1
  3944  02CF  120A  158A  2784  120A  118A  	fcall	___lwdiv
  3945  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  3946  02D5  1303               	bcf	3,6	;RP1=0, select bank0
  3947  02D6  0850               	movf	?___lwdiv,w
  3948  02D7  3EB6               	addlw	182
  3949  02D8  00A0               	movwf	_Distance	;volatile
  3950  02D9  0851               	movf	?___lwdiv+1,w
  3951  02DA  1803               	skipnc
  3952  02DB  3E01               	addlw	1
  3953  02DC  3E03               	addlw	3
  3954  02DD  00A1               	movwf	_Distance+1	;volatile
  3955  02DE                     l1779:	
  3956                           
  3957                           ;ADC.c: 88: if (adcRAW < 110 && adcRAW >= 98)
  3958  02DE  3000               	movlw	0
  3959  02DF  0260               	subwf	adcConvertMM@adcRAW+1,w
  3960  02E0  306E               	movlw	110
  3961  02E1  1903               	skipnz
  3962  02E2  025F               	subwf	adcConvertMM@adcRAW,w
  3963  02E3  1803               	skipnc
  3964  02E4  2B1D               	goto	l1785
  3965  02E5  3000               	movlw	0
  3966  02E6  0260               	subwf	adcConvertMM@adcRAW+1,w
  3967  02E7  3062               	movlw	98
  3968  02E8  1903               	skipnz
  3969  02E9  025F               	subwf	adcConvertMM@adcRAW,w
  3970  02EA  1C03               	skipc
  3971  02EB  2B1D               	goto	l1785
  3972                           
  3973                           ;ADC.c: 89: Distance = (((11000 - adcRAW*100)/12) + 1000 + 100);
  3974  02EC  300C               	movlw	12
  3975  02ED  00D0               	movwf	___lwdiv@divisor
  3976  02EE  3000               	movlw	0
  3977  02EF  00D1               	movwf	___lwdiv@divisor+1
  3978  02F0  0860               	movf	adcConvertMM@adcRAW+1,w
  3979  02F1  00CB               	movwf	___wmul@multiplier+1
  3980  02F2  085F               	movf	adcConvertMM@adcRAW,w
  3981  02F3  00CA               	movwf	___wmul@multiplier
  3982  02F4  3064               	movlw	100
  3983  02F5  00CC               	movwf	___wmul@multiplicand
  3984  02F6  3000               	movlw	0
  3985  02F7  00CD               	movwf	___wmul@multiplicand+1
  3986  02F8  120A  158A  26A7  120A  118A  	fcall	___wmul
  3987  02FD  1283               	bcf	3,5	;RP0=0, select bank0
  3988  02FE  1303               	bcf	3,6	;RP1=0, select bank0
  3989  02FF  094A               	comf	?___wmul,w
  3990  0300  00E1               	movwf	??_adcConvertMM
  3991  0301  094B               	comf	?___wmul+1,w
  3992  0302  00E2               	movwf	??_adcConvertMM+1
  3993  0303  0AE1               	incf	??_adcConvertMM,f
  3994  0304  1903               	skipnz
  3995  0305  0AE2               	incf	??_adcConvertMM+1,f
  3996  0306  0861               	movf	??_adcConvertMM,w
  3997  0307  3EF8               	addlw	248
  3998  0308  00D2               	movwf	___lwdiv@dividend
  3999  0309  0862               	movf	??_adcConvertMM+1,w
  4000  030A  1803               	skipnc
  4001  030B  3E01               	addlw	1
  4002  030C  3E2A               	addlw	42
  4003  030D  00D3               	movwf	___lwdiv@dividend+1
  4004  030E  120A  158A  2784  120A  118A  	fcall	___lwdiv
  4005  0313  1283               	bcf	3,5	;RP0=0, select bank0
  4006  0314  1303               	bcf	3,6	;RP1=0, select bank0
  4007  0315  0850               	movf	?___lwdiv,w
  4008  0316  3E4C               	addlw	76
  4009  0317  00A0               	movwf	_Distance	;volatile
  4010  0318  0851               	movf	?___lwdiv+1,w
  4011  0319  1803               	skipnc
  4012  031A  3E01               	addlw	1
  4013  031B  3E04               	addlw	4
  4014  031C  00A1               	movwf	_Distance+1	;volatile
  4015  031D                     l1785:	
  4016                           
  4017                           ;ADC.c: 91: if (adcRAW < 98 && adcRAW >= 90)
  4018  031D  3000               	movlw	0
  4019  031E  0260               	subwf	adcConvertMM@adcRAW+1,w
  4020  031F  3062               	movlw	98
  4021  0320  1903               	skipnz
  4022  0321  025F               	subwf	adcConvertMM@adcRAW,w
  4023  0322  1803               	skipnc
  4024  0323  2B5A               	goto	l1791
  4025  0324  3000               	movlw	0
  4026  0325  0260               	subwf	adcConvertMM@adcRAW+1,w
  4027  0326  305A               	movlw	90
  4028  0327  1903               	skipnz
  4029  0328  025F               	subwf	adcConvertMM@adcRAW,w
  4030  0329  1C03               	skipc
  4031  032A  2B5A               	goto	l1791
  4032                           
  4033                           ;ADC.c: 92: Distance = (((9800 - adcRAW*100)/8) + 1100 + 150);
  4034  032B  0860               	movf	adcConvertMM@adcRAW+1,w
  4035  032C  00CB               	movwf	___wmul@multiplier+1
  4036  032D  085F               	movf	adcConvertMM@adcRAW,w
  4037  032E  00CA               	movwf	___wmul@multiplier
  4038  032F  3064               	movlw	100
  4039  0330  00CC               	movwf	___wmul@multiplicand
  4040  0331  3000               	movlw	0
  4041  0332  00CD               	movwf	___wmul@multiplicand+1
  4042  0333  120A  158A  26A7  120A  118A  	fcall	___wmul
  4043  0338  1283               	bcf	3,5	;RP0=0, select bank0
  4044  0339  1303               	bcf	3,6	;RP1=0, select bank0
  4045  033A  094A               	comf	?___wmul,w
  4046  033B  00E1               	movwf	??_adcConvertMM
  4047  033C  094B               	comf	?___wmul+1,w
  4048  033D  00E2               	movwf	??_adcConvertMM+1
  4049  033E  0AE1               	incf	??_adcConvertMM,f
  4050  033F  1903               	skipnz
  4051  0340  0AE2               	incf	??_adcConvertMM+1,f
  4052  0341  0861               	movf	??_adcConvertMM,w
  4053  0342  3E48               	addlw	72
  4054  0343  00E3               	movwf	??_adcConvertMM+2
  4055  0344  0862               	movf	??_adcConvertMM+1,w
  4056  0345  1803               	skipnc
  4057  0346  3E01               	addlw	1
  4058  0347  3E26               	addlw	38
  4059  0348  00E4               	movwf	??_adcConvertMM+3
  4060  0349  1003               	clrc
  4061  034A  0CE4               	rrf	??_adcConvertMM+3,f
  4062  034B  0CE3               	rrf	??_adcConvertMM+2,f
  4063  034C  1003               	clrc
  4064  034D  0CE4               	rrf	??_adcConvertMM+3,f
  4065  034E  0CE3               	rrf	??_adcConvertMM+2,f
  4066  034F  1003               	clrc
  4067  0350  0CE4               	rrf	??_adcConvertMM+3,f
  4068  0351  0CE3               	rrf	??_adcConvertMM+2,f
  4069  0352  0863               	movf	??_adcConvertMM+2,w
  4070  0353  3EE2               	addlw	226
  4071  0354  00A0               	movwf	_Distance	;volatile
  4072  0355  0864               	movf	??_adcConvertMM+3,w
  4073  0356  1803               	skipnc
  4074  0357  3E01               	addlw	1
  4075  0358  3E04               	addlw	4
  4076  0359  00A1               	movwf	_Distance+1	;volatile
  4077  035A                     l1791:	
  4078                           
  4079                           ;ADC.c: 94: if(adcRAW < 90 || adcRAW >= 517)
  4080  035A  3000               	movlw	0
  4081  035B  0260               	subwf	adcConvertMM@adcRAW+1,w
  4082  035C  305A               	movlw	90
  4083  035D  1903               	skipnz
  4084  035E  025F               	subwf	adcConvertMM@adcRAW,w
  4085  035F  1C03               	skipc
  4086  0360  2B68               	goto	l1795
  4087  0361  3002               	movlw	2
  4088  0362  0260               	subwf	adcConvertMM@adcRAW+1,w
  4089  0363  3005               	movlw	5
  4090  0364  1903               	skipnz
  4091  0365  025F               	subwf	adcConvertMM@adcRAW,w
  4092  0366  1C03               	skipc
  4093  0367  0008               	return
  4094  0368                     l1795:	
  4095                           
  4096                           ;ADC.c: 95: Distance = 0;
  4097  0368  01A0               	clrf	_Distance	;volatile
  4098  0369  01A1               	clrf	_Distance+1	;volatile
  4099  036A  0008               	return
  4100  036B                     __end_of_adcConvertMM:	
  4101                           ;ADC.c: 97: return(Distance);
  4102                           ;	Return value of _adcConvertMM is never used
  4103                           
  4104                           
  4105                           	psect	text19
  4106  0EA7                     __ptext19:	
  4107 ;; *************** function ___wmul *****************
  4108 ;; Defined at:
  4109 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  4110 ;; Parameters:    Size  Location     Type
  4111 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4112 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4113 ;; Auto vars:     Size  Location     Type
  4114 ;;  product         2    4[BANK0 ] unsigned int 
  4115 ;; Return value:  Size  Location     Type
  4116 ;;                  2    0[BANK0 ] unsigned int 
  4117 ;; Registers used:
  4118 ;;		wreg, status,2, status,0
  4119 ;; Tracked objects:
  4120 ;;		On entry : 0/0
  4121 ;;		On exit  : 0/0
  4122 ;;		Unchanged: 0/0
  4123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4124 ;;      Params:         0       4       0       0       0
  4125 ;;      Locals:         0       2       0       0       0
  4126 ;;      Temps:          0       0       0       0       0
  4127 ;;      Totals:         0       6       0       0       0
  4128 ;;Total ram usage:        6 bytes
  4129 ;; Hardware stack levels used:    1
  4130 ;; Hardware stack levels required when called:    3
  4131 ;; This function calls:
  4132 ;;		Nothing
  4133 ;; This function is called by:
  4134 ;;		_adcConvertMM
  4135 ;; This function uses a non-reentrant model
  4136 ;;
  4137                           
  4138                           
  4139                           ;psect for function ___wmul
  4140  0EA7                     ___wmul:	
  4141                           
  4142                           ;incstack = 0
  4143                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4144  0EA7  1283               	bcf	3,5	;RP0=0, select bank0
  4145  0EA8  1303               	bcf	3,6	;RP1=0, select bank0
  4146  0EA9  01CE               	clrf	___wmul@product
  4147  0EAA  01CF               	clrf	___wmul@product+1
  4148  0EAB                     l1577:	
  4149  0EAB  1C4A               	btfss	___wmul@multiplier,0
  4150  0EAC  2EB3               	goto	l553
  4151  0EAD  084C               	movf	___wmul@multiplicand,w
  4152  0EAE  07CE               	addwf	___wmul@product,f
  4153  0EAF  1803               	skipnc
  4154  0EB0  0ACF               	incf	___wmul@product+1,f
  4155  0EB1  084D               	movf	___wmul@multiplicand+1,w
  4156  0EB2  07CF               	addwf	___wmul@product+1,f
  4157  0EB3                     l553:	
  4158  0EB3  3001               	movlw	1
  4159  0EB4                     u985:	
  4160  0EB4  1003               	clrc
  4161  0EB5  0DCC               	rlf	___wmul@multiplicand,f
  4162  0EB6  0DCD               	rlf	___wmul@multiplicand+1,f
  4163  0EB7  3EFF               	addlw	-1
  4164  0EB8  1D03               	skipz
  4165  0EB9  2EB4               	goto	u985
  4166  0EBA  3001               	movlw	1
  4167  0EBB                     u995:	
  4168  0EBB  1003               	clrc
  4169  0EBC  0CCB               	rrf	___wmul@multiplier+1,f
  4170  0EBD  0CCA               	rrf	___wmul@multiplier,f
  4171  0EBE  3EFF               	addlw	-1
  4172  0EBF  1D03               	skipz
  4173  0EC0  2EBB               	goto	u995
  4174  0EC1  084A               	movf	___wmul@multiplier,w
  4175  0EC2  044B               	iorwf	___wmul@multiplier+1,w
  4176  0EC3  1D03               	btfss	3,2
  4177  0EC4  2EAB               	goto	l1577
  4178  0EC5  084F               	movf	___wmul@product+1,w
  4179  0EC6  00CB               	movwf	?___wmul+1
  4180  0EC7  084E               	movf	___wmul@product,w
  4181  0EC8  00CA               	movwf	?___wmul
  4182  0EC9  0008               	return
  4183  0ECA                     __end_of___wmul:	
  4184                           
  4185                           	psect	text20
  4186  0F84                     __ptext20:	
  4187 ;; *************** function ___lwdiv *****************
  4188 ;; Defined at:
  4189 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  4190 ;; Parameters:    Size  Location     Type
  4191 ;;  divisor         2    6[BANK0 ] unsigned int 
  4192 ;;  dividend        2    8[BANK0 ] unsigned int 
  4193 ;; Auto vars:     Size  Location     Type
  4194 ;;  quotient        2   11[BANK0 ] unsigned int 
  4195 ;;  counter         1   13[BANK0 ] unsigned char 
  4196 ;; Return value:  Size  Location     Type
  4197 ;;                  2    6[BANK0 ] unsigned int 
  4198 ;; Registers used:
  4199 ;;		wreg, status,2, status,0
  4200 ;; Tracked objects:
  4201 ;;		On entry : 0/0
  4202 ;;		On exit  : 0/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4205 ;;      Params:         0       4       0       0       0
  4206 ;;      Locals:         0       3       0       0       0
  4207 ;;      Temps:          0       1       0       0       0
  4208 ;;      Totals:         0       8       0       0       0
  4209 ;;Total ram usage:        8 bytes
  4210 ;; Hardware stack levels used:    1
  4211 ;; Hardware stack levels required when called:    3
  4212 ;; This function calls:
  4213 ;;		Nothing
  4214 ;; This function is called by:
  4215 ;;		_adcConvertMM
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219                           
  4220                           ;psect for function ___lwdiv
  4221  0F84                     ___lwdiv:	
  4222                           
  4223                           ;incstack = 0
  4224                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4225  0F84  1283               	bcf	3,5	;RP0=0, select bank0
  4226  0F85  1303               	bcf	3,6	;RP1=0, select bank0
  4227  0F86  01D5               	clrf	___lwdiv@quotient
  4228  0F87  01D6               	clrf	___lwdiv@quotient+1
  4229  0F88  0850               	movf	___lwdiv@divisor,w
  4230  0F89  0451               	iorwf	___lwdiv@divisor+1,w
  4231  0F8A  1903               	btfsc	3,2
  4232  0F8B  2FBD               	goto	l1651
  4233  0F8C  01D7               	clrf	___lwdiv@counter
  4234  0F8D  0AD7               	incf	___lwdiv@counter,f
  4235  0F8E                     l1639:	
  4236  0F8E  1BD1               	btfsc	___lwdiv@divisor+1,7
  4237  0F8F  2F9C               	goto	l1641
  4238  0F90  3001               	movlw	1
  4239  0F91                     u1125:	
  4240  0F91  1003               	clrc
  4241  0F92  0DD0               	rlf	___lwdiv@divisor,f
  4242  0F93  0DD1               	rlf	___lwdiv@divisor+1,f
  4243  0F94  3EFF               	addlw	-1
  4244  0F95  1D03               	skipz
  4245  0F96  2F91               	goto	u1125
  4246  0F97  3001               	movlw	1
  4247  0F98  00D4               	movwf	??___lwdiv
  4248  0F99  0854               	movf	??___lwdiv,w
  4249  0F9A  07D7               	addwf	___lwdiv@counter,f
  4250  0F9B  2F8E               	goto	l1639
  4251  0F9C                     l1641:	
  4252  0F9C  3001               	movlw	1
  4253  0F9D                     u1145:	
  4254  0F9D  1003               	clrc
  4255  0F9E  0DD5               	rlf	___lwdiv@quotient,f
  4256  0F9F  0DD6               	rlf	___lwdiv@quotient+1,f
  4257  0FA0  3EFF               	addlw	-1
  4258  0FA1  1D03               	skipz
  4259  0FA2  2F9D               	goto	u1145
  4260  0FA3  0851               	movf	___lwdiv@divisor+1,w
  4261  0FA4  0253               	subwf	___lwdiv@dividend+1,w
  4262  0FA5  1D03               	skipz
  4263  0FA6  2FA9               	goto	u1155
  4264  0FA7  0850               	movf	___lwdiv@divisor,w
  4265  0FA8  0252               	subwf	___lwdiv@dividend,w
  4266  0FA9                     u1155:	
  4267  0FA9  1C03               	skipc
  4268  0FAA  2FB2               	goto	l1647
  4269  0FAB  0850               	movf	___lwdiv@divisor,w
  4270  0FAC  02D2               	subwf	___lwdiv@dividend,f
  4271  0FAD  0851               	movf	___lwdiv@divisor+1,w
  4272  0FAE  1C03               	skipc
  4273  0FAF  03D3               	decf	___lwdiv@dividend+1,f
  4274  0FB0  02D3               	subwf	___lwdiv@dividend+1,f
  4275  0FB1  1455               	bsf	___lwdiv@quotient,0
  4276  0FB2                     l1647:	
  4277  0FB2  3001               	movlw	1
  4278  0FB3                     u1165:	
  4279  0FB3  1003               	clrc
  4280  0FB4  0CD1               	rrf	___lwdiv@divisor+1,f
  4281  0FB5  0CD0               	rrf	___lwdiv@divisor,f
  4282  0FB6  3EFF               	addlw	-1
  4283  0FB7  1D03               	skipz
  4284  0FB8  2FB3               	goto	u1165
  4285  0FB9  3001               	movlw	1
  4286  0FBA  02D7               	subwf	___lwdiv@counter,f
  4287  0FBB  1D03               	btfss	3,2
  4288  0FBC  2F9C               	goto	l1641
  4289  0FBD                     l1651:	
  4290  0FBD  0856               	movf	___lwdiv@quotient+1,w
  4291  0FBE  00D1               	movwf	?___lwdiv+1
  4292  0FBF  0855               	movf	___lwdiv@quotient,w
  4293  0FC0  00D0               	movwf	?___lwdiv
  4294  0FC1  0008               	return
  4295  0FC2                     __end_of___lwdiv:	
  4296                           
  4297                           	psect	text21
  4298  0618                     __ptext21:	
  4299 ;; *************** function ___aldiv *****************
  4300 ;; Defined at:
  4301 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;  divisor         4    6[BANK0 ] long 
  4304 ;;  dividend        4   10[BANK0 ] long 
  4305 ;; Auto vars:     Size  Location     Type
  4306 ;;  quotient        4   17[BANK0 ] long 
  4307 ;;  sign            1   16[BANK0 ] unsigned char 
  4308 ;;  counter         1   15[BANK0 ] unsigned char 
  4309 ;; Return value:  Size  Location     Type
  4310 ;;                  4    6[BANK0 ] long 
  4311 ;; Registers used:
  4312 ;;		wreg, status,2, status,0
  4313 ;; Tracked objects:
  4314 ;;		On entry : 0/0
  4315 ;;		On exit  : 0/0
  4316 ;;		Unchanged: 0/0
  4317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4318 ;;      Params:         0       8       0       0       0
  4319 ;;      Locals:         0       6       0       0       0
  4320 ;;      Temps:          0       1       0       0       0
  4321 ;;      Totals:         0      15       0       0       0
  4322 ;;Total ram usage:       15 bytes
  4323 ;; Hardware stack levels used:    1
  4324 ;; Hardware stack levels required when called:    3
  4325 ;; This function calls:
  4326 ;;		Nothing
  4327 ;; This function is called by:
  4328 ;;		_adcConvertMM
  4329 ;; This function uses a non-reentrant model
  4330 ;;
  4331                           
  4332                           
  4333                           ;psect for function ___aldiv
  4334  0618                     ___aldiv:	
  4335                           
  4336                           ;incstack = 0
  4337                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4338  0618  1283               	bcf	3,5	;RP0=0, select bank0
  4339  0619  1303               	bcf	3,6	;RP1=0, select bank0
  4340  061A  01DA               	clrf	___aldiv@sign
  4341  061B  1FD3               	btfss	___aldiv@divisor+3,7
  4342  061C  2E2A               	goto	l608
  4343  061D  09D0               	comf	___aldiv@divisor,f
  4344  061E  09D1               	comf	___aldiv@divisor+1,f
  4345  061F  09D2               	comf	___aldiv@divisor+2,f
  4346  0620  09D3               	comf	___aldiv@divisor+3,f
  4347  0621  0AD0               	incf	___aldiv@divisor,f
  4348  0622  1903               	skipnz
  4349  0623  0AD1               	incf	___aldiv@divisor+1,f
  4350  0624  1903               	skipnz
  4351  0625  0AD2               	incf	___aldiv@divisor+2,f
  4352  0626  1903               	skipnz
  4353  0627  0AD3               	incf	___aldiv@divisor+3,f
  4354  0628  01DA               	clrf	___aldiv@sign
  4355  0629  0ADA               	incf	___aldiv@sign,f
  4356  062A                     l608:	
  4357  062A  1FD7               	btfss	___aldiv@dividend+3,7
  4358  062B  2E3B               	goto	l1599
  4359  062C  09D4               	comf	___aldiv@dividend,f
  4360  062D  09D5               	comf	___aldiv@dividend+1,f
  4361  062E  09D6               	comf	___aldiv@dividend+2,f
  4362  062F  09D7               	comf	___aldiv@dividend+3,f
  4363  0630  0AD4               	incf	___aldiv@dividend,f
  4364  0631  1903               	skipnz
  4365  0632  0AD5               	incf	___aldiv@dividend+1,f
  4366  0633  1903               	skipnz
  4367  0634  0AD6               	incf	___aldiv@dividend+2,f
  4368  0635  1903               	skipnz
  4369  0636  0AD7               	incf	___aldiv@dividend+3,f
  4370  0637  3001               	movlw	1
  4371  0638  00D8               	movwf	??___aldiv
  4372  0639  0858               	movf	??___aldiv,w
  4373  063A  06DA               	xorwf	___aldiv@sign,f
  4374  063B                     l1599:	
  4375  063B  3000               	movlw	0
  4376  063C  00DE               	movwf	___aldiv@quotient+3
  4377  063D  3000               	movlw	0
  4378  063E  00DD               	movwf	___aldiv@quotient+2
  4379  063F  3000               	movlw	0
  4380  0640  00DC               	movwf	___aldiv@quotient+1
  4381  0641  3000               	movlw	0
  4382  0642  00DB               	movwf	___aldiv@quotient
  4383  0643  0853               	movf	___aldiv@divisor+3,w
  4384  0644  0452               	iorwf	___aldiv@divisor+2,w
  4385  0645  0451               	iorwf	___aldiv@divisor+1,w
  4386  0646  0450               	iorwf	___aldiv@divisor,w
  4387  0647  1903               	skipnz
  4388  0648  2E90               	goto	l1621
  4389  0649  01D9               	clrf	___aldiv@counter
  4390  064A  0AD9               	incf	___aldiv@counter,f
  4391  064B                     l1607:	
  4392  064B  1BD3               	btfsc	___aldiv@divisor+3,7
  4393  064C  2E5B               	goto	l1609
  4394  064D  3001               	movlw	1
  4395  064E  00D8               	movwf	??___aldiv
  4396  064F                     u1045:	
  4397  064F  1003               	clrc
  4398  0650  0DD0               	rlf	___aldiv@divisor,f
  4399  0651  0DD1               	rlf	___aldiv@divisor+1,f
  4400  0652  0DD2               	rlf	___aldiv@divisor+2,f
  4401  0653  0DD3               	rlf	___aldiv@divisor+3,f
  4402  0654  0BD8               	decfsz	??___aldiv,f
  4403  0655  2E4F               	goto	u1045
  4404  0656  3001               	movlw	1
  4405  0657  00D8               	movwf	??___aldiv
  4406  0658  0858               	movf	??___aldiv,w
  4407  0659  07D9               	addwf	___aldiv@counter,f
  4408  065A  2E4B               	goto	l1607
  4409  065B                     l1609:	
  4410  065B  3001               	movlw	1
  4411  065C  00D8               	movwf	??___aldiv
  4412  065D                     u1065:	
  4413  065D  1003               	clrc
  4414  065E  0DDB               	rlf	___aldiv@quotient,f
  4415  065F  0DDC               	rlf	___aldiv@quotient+1,f
  4416  0660  0DDD               	rlf	___aldiv@quotient+2,f
  4417  0661  0DDE               	rlf	___aldiv@quotient+3,f
  4418  0662  0BD8               	decfsz	??___aldiv,f
  4419  0663  2E5D               	goto	u1065
  4420  0664  0853               	movf	___aldiv@divisor+3,w
  4421  0665  0257               	subwf	___aldiv@dividend+3,w
  4422  0666  1D03               	skipz
  4423  0667  2E72               	goto	u1075
  4424  0668  0852               	movf	___aldiv@divisor+2,w
  4425  0669  0256               	subwf	___aldiv@dividend+2,w
  4426  066A  1D03               	skipz
  4427  066B  2E72               	goto	u1075
  4428  066C  0851               	movf	___aldiv@divisor+1,w
  4429  066D  0255               	subwf	___aldiv@dividend+1,w
  4430  066E  1D03               	skipz
  4431  066F  2E72               	goto	u1075
  4432  0670  0850               	movf	___aldiv@divisor,w
  4433  0671  0254               	subwf	___aldiv@dividend,w
  4434  0672                     u1075:	
  4435  0672  1C03               	skipc
  4436  0673  2E83               	goto	l1617
  4437  0674  0850               	movf	___aldiv@divisor,w
  4438  0675  02D4               	subwf	___aldiv@dividend,f
  4439  0676  0851               	movf	___aldiv@divisor+1,w
  4440  0677  1C03               	skipc
  4441  0678  0F51               	incfsz	___aldiv@divisor+1,w
  4442  0679  02D5               	subwf	___aldiv@dividend+1,f
  4443  067A  0852               	movf	___aldiv@divisor+2,w
  4444  067B  1C03               	skipc
  4445  067C  0F52               	incfsz	___aldiv@divisor+2,w
  4446  067D  02D6               	subwf	___aldiv@dividend+2,f
  4447  067E  0853               	movf	___aldiv@divisor+3,w
  4448  067F  1C03               	skipc
  4449  0680  0F53               	incfsz	___aldiv@divisor+3,w
  4450  0681  02D7               	subwf	___aldiv@dividend+3,f
  4451  0682  145B               	bsf	___aldiv@quotient,0
  4452  0683                     l1617:	
  4453  0683  3001               	movlw	1
  4454  0684                     u1085:	
  4455  0684  1003               	clrc
  4456  0685  0CD3               	rrf	___aldiv@divisor+3,f
  4457  0686  0CD2               	rrf	___aldiv@divisor+2,f
  4458  0687  0CD1               	rrf	___aldiv@divisor+1,f
  4459  0688  0CD0               	rrf	___aldiv@divisor,f
  4460  0689  3EFF               	addlw	-1
  4461  068A  1D03               	skipz
  4462  068B  2E84               	goto	u1085
  4463  068C  3001               	movlw	1
  4464  068D  02D9               	subwf	___aldiv@counter,f
  4465  068E  1D03               	btfss	3,2
  4466  068F  2E5B               	goto	l1609
  4467  0690                     l1621:	
  4468  0690  085A               	movf	___aldiv@sign,w
  4469  0691  1903               	btfsc	3,2
  4470  0692  2E9E               	goto	l1625
  4471  0693  09DB               	comf	___aldiv@quotient,f
  4472  0694  09DC               	comf	___aldiv@quotient+1,f
  4473  0695  09DD               	comf	___aldiv@quotient+2,f
  4474  0696  09DE               	comf	___aldiv@quotient+3,f
  4475  0697  0ADB               	incf	___aldiv@quotient,f
  4476  0698  1903               	skipnz
  4477  0699  0ADC               	incf	___aldiv@quotient+1,f
  4478  069A  1903               	skipnz
  4479  069B  0ADD               	incf	___aldiv@quotient+2,f
  4480  069C  1903               	skipnz
  4481  069D  0ADE               	incf	___aldiv@quotient+3,f
  4482  069E                     l1625:	
  4483  069E  085E               	movf	___aldiv@quotient+3,w
  4484  069F  00D3               	movwf	?___aldiv+3
  4485  06A0  085D               	movf	___aldiv@quotient+2,w
  4486  06A1  00D2               	movwf	?___aldiv+2
  4487  06A2  085C               	movf	___aldiv@quotient+1,w
  4488  06A3  00D1               	movwf	?___aldiv+1
  4489  06A4  085B               	movf	___aldiv@quotient,w
  4490  06A5  00D0               	movwf	?___aldiv
  4491  06A6  0008               	return
  4492  06A7                     __end_of___aldiv:	
  4493                           
  4494                           	psect	text22
  4495  06A7                     __ptext22:	
  4496 ;; *************** function _isr *****************
  4497 ;; Defined at:
  4498 ;;		line 29 in file "main.c"
  4499 ;; Parameters:    Size  Location     Type
  4500 ;;		None
  4501 ;; Auto vars:     Size  Location     Type
  4502 ;;		None
  4503 ;; Return value:  Size  Location     Type
  4504 ;;                  1    wreg      void 
  4505 ;; Registers used:
  4506 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4507 ;; Tracked objects:
  4508 ;;		On entry : 0/0
  4509 ;;		On exit  : 0/0
  4510 ;;		Unchanged: 0/0
  4511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4512 ;;      Params:         0       0       0       0       0
  4513 ;;      Locals:         0       0       0       0       0
  4514 ;;      Temps:          5       0       0       0       0
  4515 ;;      Totals:         5       0       0       0       0
  4516 ;;Total ram usage:        5 bytes
  4517 ;; Hardware stack levels used:    1
  4518 ;; Hardware stack levels required when called:    2
  4519 ;; This function calls:
  4520 ;;		___lwmod
  4521 ;;		i1_getSensorData
  4522 ;; This function is called by:
  4523 ;;		Interrupt level 1
  4524 ;; This function uses a non-reentrant model
  4525 ;;
  4526                           
  4527                           
  4528                           ;psect for function _isr
  4529  06A7                     _isr:	
  4530                           
  4531                           ;main.c: 31: if(TMR0IF){
  4532  06A7  1D0B               	btfss	11,2	;volatile
  4533  06A8  2F1A               	goto	i1l116
  4534                           
  4535                           ;main.c: 32: TMR0IF = 0;
  4536  06A9  110B               	bcf	11,2	;volatile
  4537                           
  4538                           ;main.c: 33: TMR0 = 100;
  4539  06AA  3064               	movlw	100
  4540  06AB  0081               	movwf	1	;volatile
  4541                           
  4542                           ;main.c: 36: if(time_count % 1 == 0) {
  4543  06AC  3001               	movlw	1
  4544  06AD  07B8               	addwf	_time_count,f	;volatile
  4545  06AE  1803               	skipnc
  4546  06AF  0AB9               	incf	_time_count+1,f	;volatile
  4547  06B0  3000               	movlw	0
  4548  06B1  07B9               	addwf	_time_count+1,f	;volatile
  4549                           
  4550                           ;main.c: 38: RC2 = 1; __nop(); RC2 = 0;;
  4551  06B2  1507               	bsf	7,2	;volatile
  4552  06B3  0000               	nop
  4553  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  4554  06B5  1303               	bcf	3,6	;RP1=0, select bank0
  4555  06B6  1107               	bcf	7,2	;volatile
  4556                           
  4557                           ;main.c: 39: }
  4558                           ;main.c: 41: if(time_count % 1000 == 0){
  4559  06B7  30E8               	movlw	232
  4560  06B8  00F0               	movwf	___lwmod@divisor
  4561  06B9  3003               	movlw	3
  4562  06BA  00F1               	movwf	___lwmod@divisor+1
  4563  06BB  0839               	movf	_time_count+1,w	;volatile
  4564  06BC  00F3               	movwf	___lwmod@dividend+1
  4565  06BD  0838               	movf	_time_count,w	;volatile
  4566  06BE  00F2               	movwf	___lwmod@dividend
  4567  06BF  120A  158A  2718  120A  118A  	fcall	___lwmod
  4568  06C4  0870               	movf	?___lwmod,w
  4569  06C5  0471               	iorwf	?___lwmod+1,w
  4570  06C6  1D03               	btfss	3,2
  4571  06C7  2ECE               	goto	i1l2045
  4572                           
  4573                           ;main.c: 42: RB4 = !RB4;
  4574  06C8  3010               	movlw	16
  4575  06C9  1283               	bcf	3,5	;RP0=0, select bank0
  4576  06CA  1303               	bcf	3,6	;RP1=0, select bank0
  4577  06CB  0686               	xorwf	6,f
  4578                           
  4579                           ;main.c: 44: time_count = 0;
  4580  06CC  01B8               	clrf	_time_count	;volatile
  4581  06CD  01B9               	clrf	_time_count+1	;volatile
  4582  06CE                     i1l2045:	
  4583                           
  4584                           ;main.c: 45: }
  4585                           ;main.c: 47: if (!RB0 == 1)
  4586  06CE  1283               	bcf	3,5	;RP0=0, select bank0
  4587  06CF  1303               	bcf	3,6	;RP1=0, select bank0
  4588  06D0  1806               	btfsc	6,0	;volatile
  4589  06D1  2ED6               	goto	i1l2049
  4590                           
  4591                           ;main.c: 48: PB8Counter++;
  4592  06D2  3001               	movlw	1
  4593  06D3  00F9               	movwf	??_isr
  4594  06D4  0879               	movf	??_isr,w
  4595  06D5  07C1               	addwf	_PB8Counter,f
  4596  06D6                     i1l2049:	
  4597                           
  4598                           ;main.c: 49: if (!RB1 == 1)
  4599  06D6  1886               	btfsc	6,1	;volatile
  4600  06D7  2EDC               	goto	i1l2053
  4601                           
  4602                           ;main.c: 50: PB7Counter++;
  4603  06D8  3001               	movlw	1
  4604  06D9  00F9               	movwf	??_isr
  4605  06DA  0879               	movf	??_isr,w
  4606  06DB  07C0               	addwf	_PB7Counter,f
  4607  06DC                     i1l2053:	
  4608                           
  4609                           ;main.c: 51: if (!RB2 == 1)
  4610  06DC  1906               	btfsc	6,2	;volatile
  4611  06DD  2EE2               	goto	i1l2057
  4612                           
  4613                           ;main.c: 52: PB6Counter++;
  4614  06DE  3001               	movlw	1
  4615  06DF  00F9               	movwf	??_isr
  4616  06E0  0879               	movf	??_isr,w
  4617  06E1  07BF               	addwf	_PB6Counter,f
  4618  06E2                     i1l2057:	
  4619                           
  4620                           ;main.c: 54: if(getSensorData(18,1) == 0b00000001)
  4621  06E2  01F2               	clrf	i1getSensorData@bytes
  4622  06E3  0AF2               	incf	i1getSensorData@bytes,f
  4623  06E4  3012               	movlw	18
  4624  06E5  120A  158A  274A  120A  118A  	fcall	i1_getSensorData
  4625  06EA  0372               	decf	?i1_getSensorData,w
  4626  06EB  0473               	iorwf	?i1_getSensorData+1,w
  4627  06EC  1D03               	btfss	3,2
  4628  06ED  2EF4               	goto	i1l2061
  4629                           
  4630                           ;main.c: 55: FLAG_Play++;
  4631  06EE  3001               	movlw	1
  4632  06EF  00F9               	movwf	??_isr
  4633  06F0  0879               	movf	??_isr,w
  4634  06F1  1283               	bcf	3,5	;RP0=0, select bank0
  4635  06F2  1303               	bcf	3,6	;RP1=0, select bank0
  4636  06F3  07BE               	addwf	_FLAG_Play,f	;volatile
  4637  06F4                     i1l2061:	
  4638                           
  4639                           ;main.c: 57: if(getSensorData(18,1) == 0b00000100)
  4640  06F4  01F2               	clrf	i1getSensorData@bytes
  4641  06F5  0AF2               	incf	i1getSensorData@bytes,f
  4642  06F6  3012               	movlw	18
  4643  06F7  120A  158A  274A  120A  118A  	fcall	i1_getSensorData
  4644  06FC  3004               	movlw	4
  4645  06FD  0672               	xorwf	?i1_getSensorData,w
  4646  06FE  0473               	iorwf	?i1_getSensorData+1,w
  4647  06FF  1D03               	btfss	3,2
  4648  0700  2F07               	goto	i1l2065
  4649                           
  4650                           ;main.c: 58: FLAG_Advanced++;
  4651  0701  3001               	movlw	1
  4652  0702  00F9               	movwf	??_isr
  4653  0703  0879               	movf	??_isr,w
  4654  0704  1283               	bcf	3,5	;RP0=0, select bank0
  4655  0705  1303               	bcf	3,6	;RP1=0, select bank0
  4656  0706  07BD               	addwf	_FLAG_Advanced,f	;volatile
  4657  0707                     i1l2065:	
  4658                           
  4659                           ;main.c: 60: if(getSensorData(18,1) == 0b00000101)
  4660  0707  01F2               	clrf	i1getSensorData@bytes
  4661  0708  0AF2               	incf	i1getSensorData@bytes,f
  4662  0709  3012               	movlw	18
  4663  070A  120A  158A  274A  120A  118A  	fcall	i1_getSensorData
  4664  070F  3005               	movlw	5
  4665  0710  0672               	xorwf	?i1_getSensorData,w
  4666  0711  0473               	iorwf	?i1_getSensorData+1,w
  4667  0712  1D03               	btfss	3,2
  4668  0713  2F1A               	goto	i1l116
  4669                           
  4670                           ;main.c: 61: FLAG_AdvPlay++;
  4671  0714  3001               	movlw	1
  4672  0715  00F9               	movwf	??_isr
  4673  0716  0879               	movf	??_isr,w
  4674  0717  1283               	bcf	3,5	;RP0=0, select bank0
  4675  0718  1303               	bcf	3,6	;RP1=0, select bank0
  4676  0719  07BC               	addwf	_FLAG_AdvPlay,f	;volatile
  4677  071A                     i1l116:	
  4678  071A  087D               	movf	??_isr+4,w
  4679  071B  1283               	bcf	3,5	;RP0=0, select bank0
  4680  071C  1303               	bcf	3,6	;RP1=0, select bank0
  4681  071D  00FF               	movwf	127
  4682  071E  087C               	movf	??_isr+3,w
  4683  071F  008A               	movwf	10
  4684  0720  087B               	movf	??_isr+2,w
  4685  0721  0084               	movwf	4
  4686  0722  0E7A               	swapf	(??_isr+1)^(0+-128),w
  4687  0723  0083               	movwf	3
  4688  0724  0EFE               	swapf	126,f
  4689  0725  0E7E               	swapf	126,w
  4690  0726  0009               	retfie
  4691  0727                     __end_of_isr:	
  4692                           
  4693                           	psect	intentry
  4694  0004                     __pintentry:	
  4695                           ;incstack = 0
  4696                           ; Regs used in _isr: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4697                           
  4698  0004                     interrupt_function:	
  4699  007E                     saved_w	set	btemp
  4700  0004  00FE               	movwf	btemp
  4701  0005  0E03               	swapf	3,w
  4702  0006  00FA               	movwf	??_isr+1
  4703  0007  0804               	movf	4,w
  4704  0008  00FB               	movwf	??_isr+2
  4705  0009  080A               	movf	10,w
  4706  000A  00FC               	movwf	??_isr+3
  4707  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4708  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4709  000D  087F               	movf	btemp+1,w
  4710  000E  00FD               	movwf	??_isr+4
  4711  000F  120A  118A  2EA7   	ljmp	_isr
  4712                           
  4713                           	psect	text23
  4714  0F4A                     __ptext23:	
  4715 ;; *************** function i1_getSensorData *****************
  4716 ;; Defined at:
  4717 ;;		line 55 in file "ser.c"
  4718 ;; Parameters:    Size  Location     Type
  4719 ;;  packetID        1    wreg     unsigned char 
  4720 ;;  bytes           1    2[COMMON] unsigned char 
  4721 ;; Auto vars:     Size  Location     Type
  4722 ;;  packetID        1    6[COMMON] unsigned char 
  4723 ;;  getSensorDat    2    7[COMMON] int 
  4724 ;; Return value:  Size  Location     Type
  4725 ;;                  2    2[COMMON] int 
  4726 ;; Registers used:
  4727 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4728 ;; Tracked objects:
  4729 ;;		On entry : 0/0
  4730 ;;		On exit  : 0/0
  4731 ;;		Unchanged: 0/0
  4732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4733 ;;      Params:         2       0       0       0       0
  4734 ;;      Locals:         3       0       0       0       0
  4735 ;;      Temps:          2       0       0       0       0
  4736 ;;      Totals:         7       0       0       0       0
  4737 ;;Total ram usage:        7 bytes
  4738 ;; Hardware stack levels used:    1
  4739 ;; Hardware stack levels required when called:    1
  4740 ;; This function calls:
  4741 ;;		i1_ser_getch
  4742 ;;		i1_ser_putch
  4743 ;; This function is called by:
  4744 ;;		_isr
  4745 ;; This function uses a non-reentrant model
  4746 ;;
  4747                           
  4748                           
  4749                           ;psect for function i1_getSensorData
  4750  0F4A                     i1_getSensorData:	
  4751                           
  4752                           ;incstack = 0
  4753                           ; Regs used in i1_getSensorData: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4754                           ;i1getSensorData@packetID stored from wreg
  4755  0F4A  00F6               	movwf	i1getSensorData@packetID
  4756                           
  4757                           ;ser.c: 56: ser_putch(142);
  4758  0F4B  308E               	movlw	142
  4759  0F4C  120A  158A  25F4  120A  158A  	fcall	i1_ser_putch
  4760                           
  4761                           ;ser.c: 57: ser_putch(packetID);
  4762  0F51  0876               	movf	i1getSensorData@packetID,w
  4763  0F52  120A  158A  25F4  120A  158A  	fcall	i1_ser_putch
  4764                           
  4765                           ;ser.c: 59: if (bytes == 2)
  4766  0F57  3002               	movlw	2
  4767  0F58  0672               	xorwf	i1getSensorData@bytes,w
  4768  0F59  1D03               	btfss	3,2
  4769  0F5A  2F66               	goto	i1l2017
  4770                           
  4771                           ;ser.c: 60: highByte = ser_getch();
  4772  0F5B  120A  158A  25EA  120A  158A  	fcall	i1_ser_getch
  4773  0F60  00F4               	movwf	??i1_getSensorData
  4774  0F61  0874               	movf	??i1_getSensorData,w
  4775  0F62  1283               	bcf	3,5	;RP0=0, select bank0
  4776  0F63  1303               	bcf	3,6	;RP1=0, select bank0
  4777  0F64  00C9               	movwf	_highByte
  4778  0F65  2F69               	goto	i1l2019
  4779  0F66                     i1l2017:	
  4780                           
  4781                           ;ser.c: 61: else
  4782                           ;ser.c: 62: highByte = 0;
  4783  0F66  1283               	bcf	3,5	;RP0=0, select bank0
  4784  0F67  1303               	bcf	3,6	;RP1=0, select bank0
  4785  0F68  01C9               	clrf	_highByte
  4786  0F69                     i1l2019:	
  4787                           
  4788                           ;ser.c: 64: lowByte = ser_getch();
  4789  0F69  120A  158A  25EA   	fcall	i1_ser_getch
  4790  0F6C  00F4               	movwf	??i1_getSensorData
  4791  0F6D  0874               	movf	??i1_getSensorData,w
  4792  0F6E  1283               	bcf	3,5	;RP0=0, select bank0
  4793  0F6F  1303               	bcf	3,6	;RP1=0, select bank0
  4794  0F70  00C5               	movwf	_lowByte
  4795                           
  4796                           ;ser.c: 66: signed int sensor = (256*highByte + lowByte);
  4797  0F71  0849               	movf	_highByte,w
  4798  0F72  00F4               	movwf	??i1_getSensorData
  4799  0F73  01F5               	clrf	??i1_getSensorData+1
  4800  0F74  0874               	movf	??i1_getSensorData,w
  4801  0F75  00F5               	movwf	??i1_getSensorData+1
  4802  0F76  01F4               	clrf	??i1_getSensorData
  4803  0F77  0845               	movf	_lowByte,w
  4804  0F78  0774               	addwf	??i1_getSensorData,w
  4805  0F79  00F7               	movwf	i1getSensorData@sensor
  4806  0F7A  3000               	movlw	0
  4807  0F7B  1803               	skipnc
  4808  0F7C  3001               	movlw	1
  4809  0F7D  0775               	addwf	??i1_getSensorData+1,w
  4810  0F7E  00F8               	movwf	i1getSensorData@sensor+1
  4811                           
  4812                           ;ser.c: 68: return sensor;
  4813  0F7F  0878               	movf	i1getSensorData@sensor+1,w
  4814  0F80  00F3               	movwf	?i1_getSensorData+1
  4815  0F81  0877               	movf	i1getSensorData@sensor,w
  4816  0F82  00F2               	movwf	?i1_getSensorData
  4817  0F83  0008               	return
  4818  0F84                     __end_ofi1_getSensorData:	
  4819                           
  4820                           	psect	text24
  4821  0DF4                     __ptext24:	
  4822 ;; *************** function i1_ser_putch *****************
  4823 ;; Defined at:
  4824 ;;		line 30 in file "ser.c"
  4825 ;; Parameters:    Size  Location     Type
  4826 ;;  c               1    wreg     unsigned char 
  4827 ;; Auto vars:     Size  Location     Type
  4828 ;;  c               1    0[COMMON] unsigned char 
  4829 ;; Return value:  Size  Location     Type
  4830 ;;                  1    wreg      void 
  4831 ;; Registers used:
  4832 ;;		wreg
  4833 ;; Tracked objects:
  4834 ;;		On entry : 0/0
  4835 ;;		On exit  : 0/0
  4836 ;;		Unchanged: 0/0
  4837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4838 ;;      Params:         0       0       0       0       0
  4839 ;;      Locals:         1       0       0       0       0
  4840 ;;      Temps:          0       0       0       0       0
  4841 ;;      Totals:         1       0       0       0       0
  4842 ;;Total ram usage:        1 bytes
  4843 ;; Hardware stack levels used:    1
  4844 ;; This function calls:
  4845 ;;		Nothing
  4846 ;; This function is called by:
  4847 ;;		i1_getSensorData
  4848 ;; This function uses a non-reentrant model
  4849 ;;
  4850                           
  4851                           
  4852                           ;psect for function i1_ser_putch
  4853  0DF4                     i1_ser_putch:	
  4854                           
  4855                           ;incstack = 0
  4856                           ; Regs used in i1_ser_putch: [wreg]
  4857                           ;i1ser_putch@c stored from wreg
  4858  0DF4  00F0               	movwf	i1ser_putch@c
  4859  0DF5                     i1l313:	
  4860                           ;ser.c: 31: while(!TRMT);
  4861                           
  4862  0DF5  1683               	bsf	3,5	;RP0=1, select bank1
  4863  0DF6  1303               	bcf	3,6	;RP1=0, select bank1
  4864  0DF7  1C98               	btfss	24,1	;volatile
  4865  0DF8  2DF5               	goto	i1l313
  4866                           
  4867                           ;ser.c: 32: TXREG=c;
  4868  0DF9  0870               	movf	i1ser_putch@c,w
  4869  0DFA  1283               	bcf	3,5	;RP0=0, select bank0
  4870  0DFB  1303               	bcf	3,6	;RP1=0, select bank0
  4871  0DFC  0099               	movwf	25	;volatile
  4872  0DFD  0008               	return
  4873  0DFE                     __end_ofi1_ser_putch:	
  4874                           
  4875                           	psect	text25
  4876  0DEA                     __ptext25:	
  4877 ;; *************** function i1_ser_getch *****************
  4878 ;; Defined at:
  4879 ;;		line 35 in file "ser.c"
  4880 ;; Parameters:    Size  Location     Type
  4881 ;;		None
  4882 ;; Auto vars:     Size  Location     Type
  4883 ;;  ser_getch       1    1[COMMON] unsigned char 
  4884 ;; Return value:  Size  Location     Type
  4885 ;;                  1    wreg      unsigned char 
  4886 ;; Registers used:
  4887 ;;		wreg
  4888 ;; Tracked objects:
  4889 ;;		On entry : 0/0
  4890 ;;		On exit  : 0/0
  4891 ;;		Unchanged: 0/0
  4892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4893 ;;      Params:         0       0       0       0       0
  4894 ;;      Locals:         1       0       0       0       0
  4895 ;;      Temps:          1       0       0       0       0
  4896 ;;      Totals:         2       0       0       0       0
  4897 ;;Total ram usage:        2 bytes
  4898 ;; Hardware stack levels used:    1
  4899 ;; This function calls:
  4900 ;;		Nothing
  4901 ;; This function is called by:
  4902 ;;		i1_getSensorData
  4903 ;; This function uses a non-reentrant model
  4904 ;;
  4905                           
  4906                           
  4907                           ;psect for function i1_ser_getch
  4908  0DEA                     i1_ser_getch:	
  4909  0DEA                     i1l319:	
  4910                           ;ser.c: 36: while(!RCIF);
  4911                           
  4912                           ;incstack = 0
  4913                           ; Regs used in i1_ser_getch: [wreg]
  4914                           
  4915  0DEA  1283               	bcf	3,5	;RP0=0, select bank0
  4916  0DEB  1303               	bcf	3,6	;RP1=0, select bank0
  4917  0DEC  1E8C               	btfss	12,5	;volatile
  4918  0DED  2DEA               	goto	i1l319
  4919                           
  4920                           ;ser.c: 37: unsigned char rxbyte = RCREG;
  4921  0DEE  081A               	movf	26,w	;volatile
  4922  0DEF  00F0               	movwf	??i1_ser_getch
  4923  0DF0  0870               	movf	??i1_ser_getch,w
  4924  0DF1  00F1               	movwf	i1ser_getch@rxbyte
  4925                           
  4926                           ;ser.c: 38: return rxbyte;
  4927  0DF2  0871               	movf	i1ser_getch@rxbyte,w
  4928  0DF3  0008               	return
  4929  0DF4                     __end_ofi1_ser_getch:	
  4930                           
  4931                           	psect	text26
  4932  0F18                     __ptext26:	
  4933 ;; *************** function ___lwmod *****************
  4934 ;; Defined at:
  4935 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  4936 ;; Parameters:    Size  Location     Type
  4937 ;;  divisor         2    0[COMMON] unsigned int 
  4938 ;;  dividend        2    2[COMMON] unsigned int 
  4939 ;; Auto vars:     Size  Location     Type
  4940 ;;  counter         1    5[COMMON] unsigned char 
  4941 ;; Return value:  Size  Location     Type
  4942 ;;                  2    0[COMMON] unsigned int 
  4943 ;; Registers used:
  4944 ;;		wreg, status,2, status,0
  4945 ;; Tracked objects:
  4946 ;;		On entry : 0/0
  4947 ;;		On exit  : 0/0
  4948 ;;		Unchanged: 0/0
  4949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4950 ;;      Params:         4       0       0       0       0
  4951 ;;      Locals:         1       0       0       0       0
  4952 ;;      Temps:          1       0       0       0       0
  4953 ;;      Totals:         6       0       0       0       0
  4954 ;;Total ram usage:        6 bytes
  4955 ;; Hardware stack levels used:    1
  4956 ;; This function calls:
  4957 ;;		Nothing
  4958 ;; This function is called by:
  4959 ;;		_isr
  4960 ;; This function uses a non-reentrant model
  4961 ;;
  4962                           
  4963                           
  4964                           ;psect for function ___lwmod
  4965  0F18                     ___lwmod:	
  4966                           
  4967                           ;incstack = 0
  4968                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4969  0F18  0870               	movf	___lwmod@divisor,w
  4970  0F19  0471               	iorwf	___lwmod@divisor+1,w
  4971  0F1A  1903               	btfsc	3,2
  4972  0F1B  2F45               	goto	i1l2007
  4973  0F1C  01F5               	clrf	___lwmod@counter
  4974  0F1D  0AF5               	incf	___lwmod@counter,f
  4975  0F1E                     i1l1997:	
  4976  0F1E  1BF1               	btfsc	___lwmod@divisor+1,7
  4977  0F1F  2F2C               	goto	i1l1999
  4978  0F20  3001               	movlw	1
  4979  0F21                     u161_25:	
  4980  0F21  1003               	clrc
  4981  0F22  0DF0               	rlf	___lwmod@divisor,f
  4982  0F23  0DF1               	rlf	___lwmod@divisor+1,f
  4983  0F24  3EFF               	addlw	-1
  4984  0F25  1D03               	skipz
  4985  0F26  2F21               	goto	u161_25
  4986  0F27  3001               	movlw	1
  4987  0F28  00F4               	movwf	??___lwmod
  4988  0F29  0874               	movf	??___lwmod,w
  4989  0F2A  07F5               	addwf	___lwmod@counter,f
  4990  0F2B  2F1E               	goto	i1l1997
  4991  0F2C                     i1l1999:	
  4992  0F2C  0871               	movf	___lwmod@divisor+1,w
  4993  0F2D  0273               	subwf	___lwmod@dividend+1,w
  4994  0F2E  1D03               	skipz
  4995  0F2F  2F32               	goto	u163_25
  4996  0F30  0870               	movf	___lwmod@divisor,w
  4997  0F31  0272               	subwf	___lwmod@dividend,w
  4998  0F32                     u163_25:	
  4999  0F32  1C03               	skipc
  5000  0F33  2F3A               	goto	i1l2003
  5001  0F34  0870               	movf	___lwmod@divisor,w
  5002  0F35  02F2               	subwf	___lwmod@dividend,f
  5003  0F36  0871               	movf	___lwmod@divisor+1,w
  5004  0F37  1C03               	skipc
  5005  0F38  03F3               	decf	___lwmod@dividend+1,f
  5006  0F39  02F3               	subwf	___lwmod@dividend+1,f
  5007  0F3A                     i1l2003:	
  5008  0F3A  3001               	movlw	1
  5009  0F3B                     u164_25:	
  5010  0F3B  1003               	clrc
  5011  0F3C  0CF1               	rrf	___lwmod@divisor+1,f
  5012  0F3D  0CF0               	rrf	___lwmod@divisor,f
  5013  0F3E  3EFF               	addlw	-1
  5014  0F3F  1D03               	skipz
  5015  0F40  2F3B               	goto	u164_25
  5016  0F41  3001               	movlw	1
  5017  0F42  02F5               	subwf	___lwmod@counter,f
  5018  0F43  1D03               	btfss	3,2
  5019  0F44  2F2C               	goto	i1l1999
  5020  0F45                     i1l2007:	
  5021  0F45  0873               	movf	___lwmod@dividend+1,w
  5022  0F46  00F1               	movwf	?___lwmod+1
  5023  0F47  0872               	movf	___lwmod@dividend,w
  5024  0F48  00F0               	movwf	?___lwmod
  5025  0F49  0008               	return
  5026  0F4A                     __end_of___lwmod:	
  5027  007E                     btemp	set	126	;btemp
  5028  007E                     wtemp	set	126
  5029  007E                     wtemp0	set	126
  5030  0080                     wtemp1	set	128
  5031  0082                     wtemp2	set	130
  5032  0084                     wtemp3	set	132
  5033  0086                     wtemp4	set	134
  5034  0088                     wtemp5	set	136
  5035  007F                     wtemp6	set	127
  5036  007E                     ttemp	set	126
  5037  007E                     ttemp0	set	126
  5038  0081                     ttemp1	set	129
  5039  0084                     ttemp2	set	132
  5040  0087                     ttemp3	set	135
  5041  007F                     ttemp4	set	127
  5042  007E                     ltemp	set	126
  5043  007E                     ltemp0	set	126
  5044  0082                     ltemp1	set	130
  5045  0086                     ltemp2	set	134
  5046  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     35      80
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_getSensorData
    i1_getSensorData->i1_ser_getch

Critical Paths under _main in BANK0

    _setupLCD->_lcdWriteControl
    _getSensorData->_ser_getch
    _Drive->_ser_putch
    _ADCMain->_adcConvertMM
    _lcdWriteToDigitBCD->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl
    _adcConvertMM->___aldiv
    ___lwdiv->___wmul
    ___aldiv->___wmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    6669
                                             31 BANK0      4     4      0
                            _ADCMain
                              _Drive
                      _getSensorData
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
                            _moveCCW
                             _moveCW
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      30
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      22
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _moveCW                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _moveCCW                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _getSensorData                                        7     5      2     511
                                              2 BANK0      7     5      2
                          _ser_getch
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _ser_getch                                            2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Drive                                                8     0      8    1170
                                              1 BANK0      8     0      8
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCMain                                              0     0      0    4247
                       _adcConvertMM
                             _getADC
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (1) _lcdWriteToDigitBCD                                  12    10      2     599
                                              3 BANK0     12    10      2
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (2) _lcdWriteData                                         3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcdSetCursor                                         1     1      0      45
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getADC                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _adcConvertMM                                        10     8      2    3603
                                             21 BANK0     10     8      2
                            ___aldiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1258
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     904
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     618
                                              6 BANK0     15     7      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  5     5      0     455
                                              9 COMMON     5     5      0
                            ___lwmod
                    i1_getSensorData
 ---------------------------------------------------------------------------------
 (5) i1_getSensorData                                      7     5      2     190
                                              2 COMMON     7     5      2
                        i1_ser_getch
                        i1_ser_putch
 ---------------------------------------------------------------------------------
 (6) i1_ser_putch                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) i1_ser_getch                                          2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCMain
     _adcConvertMM
       ___aldiv
         ___wmul (ARG)
       ___lwdiv
         ___wmul (ARG)
       ___wmul
     _getADC
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteToDigitBCD
       _lcdWriteData
   _Drive
     _ser_putch
   _getSensorData
     _ser_getch
     _ser_putch
   _lcdSetCursor
     _lcdWriteControl
   _lcdWriteToDigitBCD
     _lcdWriteData
   _moveCCW
   _moveCW
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)
   ___lwmod
   i1_getSensorData
     i1_ser_getch
     i1_ser_putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     23      50       5      100.0%
BITBANK0            50      0       1       4        1.3%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5E      12        0.0%
ABS                  0      0      5E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Sep 07 10:22:50 2016

               ??_getSensorData 004E                     __CFG_CP$OFF 0000                              _GO 00FA  
                            fsr 0004             ___wmul@multiplicand 004C                     Drive@speedH 004B  
                   Drive@speedL 004D                             l212 05FE                             l119 03C0  
                           l313 0E0B                             l319 0DFE                             l258 0E2A  
                           l443 07C3                             l452 07FE                             l608 062A  
                           l553 0EB3                             _GIE 005F                             _RB0 0030  
                           _RB1 0031                             _RB2 0032                             _RC2 003A  
                           _RB4 0034                             _RE0 0048                             _RE1 0049  
                           _RE2 004A                    __CFG_CPD$OFF 0000                             u985 0EB4  
                           u995 0EBB                             _isr 06A7                 __end_of_ADCMain 0EA7  
                           fsr0 0004                             indf 0000                    __CFG_FOSC$HS 0000  
                ??_lcdWriteData 004A                    __CFG_LVP$OFF 0000                            l2103 03F3  
                          l2113 040B                            l2131 0449                            l2115 0421  
                          l2107 0404                            l2133 0482                            l2117 0422  
                          l2151 04D1                            l2153 04F1                            l2137 049A  
                          l2163 0507                            l2171 0555                            l2147 04BB  
                          l1621 0690                            l2165 0540                            l1607 064B  
                          l2175 056D                            l2095 03D6                            l1625 069E  
                          l1617 0683                            l1609 065B                            l1641 0F9C  
                          l1721 07E7                            l1651 0FBD                            l1731 0096  
                          l1723 07F1                            l1717 07D3                            l1647 0FB2  
                          l1639 0F8E                            l1743 0164                            l1719 07DD  
                          l1815 0FE4                            l1911 073B                            l1903 0737  
                          l1577 0EAB                            l1761 0221                            l1737 00FD  
                          l1681 05BB                            l1673 058F                            l1817 0FE5  
                          l1755 01E2                            l1691 05DF                            l1675 05A5  
                          l1923 0744                            l1915 073D                            l1907 0739  
                          l1931 0768                            l1773 029F                            l1749 01A3  
                          l1685 05C9                            l1925 074B                            l1599 063B  
                          l1791 035A                            l1767 0260                            l1687 05D1  
                          l1679 05B3                            l1951 077E                            l1919 073F  
                          l1785 031D                            l1697 05F1                            l1929 074E  
                          l1795 0368                            l1779 02DE                            l1971 0788  
                          l1963 0784                            l1955 0780                            l1947 077C  
                          l1893 072E                            l1975 078F                            l1967 0786  
                          l1959 0782                            l1983 0796                            l1895 0733  
                          l1985 07B0                            l1979 0793                            l1899 0735  
                          ?_isr 0070                            u1045 064F                            u1125 0F91  
                          u1320 00DB                            u1065 065D                            u1145 0F9D  
                          u1321 00DC                            u1322 00E1                            u1075 0672  
                          u1155 0FA9                            u1323 00E2                            u1085 0684  
                          u1165 0FB3                            u1350 0142                            u1351 0143  
                          u1352 0148                            u1353 0149                            u1290 0074  
                          u1291 0075                            u1292 007A                            u1293 007B  
                          u1805 0411                            u1835 0454                            u1775 03D4  
                          u1865 04B9                            u1785 03E8                            u1937 0373  
                          u1875 04DC                            u1795 0402                            u1947 03A8  
                          _PEIE 005E                            u1957 0E6C                            u1885 0512  
                          u1967 076C                            u1895 0553                            u1977 07B4  
                          u1987 0E40                            _RCIF 0065                            u1997 0E53  
                          _TMR0 0001                            _TRMT 04C1                    __CFG_WRT$OFF 0000  
                          _radH 002C                            _radL 002E                            _main 036B  
                          _loop 002A                            btemp 007E                            ltemp 007E  
                          start 0012                            ttemp 007E                            wtemp 007E  
                         ??_isr 0079         __end_ofi1_getSensorData 0F84                 __end_of___aldiv 06A7  
                         ?_main 0070                   __CFG_WDTE$OFF 0000                 __end_of___lwdiv 0FC2  
                         i1l116 071A                           i1l313 0DF5                           i1l319 0DEA  
               __end_of___lwmod 0F4A                   _totalDistTrav 003A                           _RCREG 001A  
                         _RCSTA 0018                           _SPBRG 0099                           _PORTA 0005  
                         _PORTC 0007                           _PORTD 0008                           _PORTE 0009  
                         _TRISA 0085                           _TRISB 0086                           _TRISC 0087  
                         _TRISD 0088                           _TRISE 0089                           _SSPIF 0063  
                         _TXREG 0019                           _TXSTA 0098                           _Drive 0ECA  
    __end_of_lcdWriteToDigitBCD 0618                           _count 0043                 __end_of_moveCCW 07BA  
                __CFG_BOREN$OFF 0000                           pclath 000A                     i1_ser_getch 0DEA  
                         ltemp0 007E                           ltemp1 0082                           ltemp2 0086  
                         ltemp3 0080               i1ser_getch@rxbyte 0071                           ttemp0 007E  
                         ttemp1 0081                           ttemp2 0084                           ttemp3 0087  
                         ttemp4 007F                     i1_ser_putch 0DF4                           status 0003  
                         wtemp0 007E                           wtemp1 0080                           wtemp2 0082  
                         wtemp3 0084                           wtemp4 0086                           wtemp5 0088  
                         wtemp6 007F                 __initialization 0015                    __end_of_main 0581  
                     ??_ADCMain 0069        __size_of_lcdWriteControl 0014                          ??_main 0069  
          __end_of_lcdSetCursor 0DEA                          ?_Drive 004B                          _ADCON0 001F  
                        _ADCON1 009F                          _ADRESH 001E                          _ADRESL 009E  
                        i1l2003 0F3A                          i1l2007 0F45                          i1l2017 0F66  
                        i1l2019 0F69                          i1l2061 06F4                          i1l2053 06DC  
                        i1l2045 06CE                          i1l2065 0707                          i1l2057 06E2  
                        i1l2049 06D6                          i1l1997 0F1E                          i1l1999 0F2C  
                        u161_25 0F21                          u163_25 0F32                          u164_25 0F3B  
                        _TMR0IE 005D                          _TMR0IF 005A                          _SSPCON 0014  
                        _SSPBUF 0013                  __CFG_PWRTE$OFF 0000                          _adcRAW 0022  
                     ??___aldiv 0058                          ___wmul 0EA7                          _getADC 07BA  
          __end_of_lcdWriteData 0E45                       ??___lwdiv 0054                       ??___lwmod 0074  
                        _moveCW 0727                          _speedH 0030                          _speedL 0032  
              ?i1_getSensorData 0072                          _rxbyte 0047                __end_of_ser_init 0E23  
              __end_of_setupADC 0E6F                       ??_moveCCW 004A                __end_of_setupLCD 0F18  
              __end_of_setupSPI 0E87                          saved_w 007E                      _adcClosest 006D  
       __end_of__initialization 0029                   __end_of_Drive 0EEF                  __pcstackCOMMON 0070  
                  __pidataBANK0 0DD7                         ??_Drive 0053               ??_lcdWriteControl 004A  
                    __pbssBANK0 0020                    _FLAG_AdvPlay 003C             lcdSetCursor@address 004D  
                    __pmaintext 036B                         ?___wmul 004A                         ?_getADC 0070  
                    __pintentry 0004           __size_of_lcdSetCursor 0009                         _ADCMain 0E87  
         __end_of_getSensorData 1000                         ?_moveCW 0070              __size_of_ser_getch 000A  
            __size_of_ser_putch 000C                         _SSPSTAT 0094                    ?i1_ser_getch 0070  
                  ?i1_ser_putch 0070           __size_of_lcdWriteData 0013                    _lcdSetCursor 0DE1  
            _lcdWriteToDigitBCD 0581                       ?_ser_init 0070           i1getSensorData@sensor 0077  
                     ?_setupADC 0070                       ?_setupLCD 0070                       ?_setupSPI 0070  
                       ___aldiv 0618                 __size_of___wmul 0023                 __size_of_getADC 0045  
                       ___lwdiv 0F84                         ___lwmod 0F18             ?_lcdWriteToDigitBCD 004D  
                       _degrees 0026                       _FLAG_Play 003E                 __size_of_moveCW 004B  
                       __ptext1 0E23                         __ptext2 0E6F                         __ptext3 0EEF  
                       __ptext4 0E59                         __ptext5 0E14                         __ptext6 0727  
                       __ptext7 0772                         __ptext8 0FC2                         __ptext9 0DFE  
                  __size_of_isr 0080                         _lowByte 0045                         _moveCCW 0772  
              ___aldiv@dividend 0054                         clrloop0 0DDA                    _lcdWriteData 0E32  
          end_of_initialization 0029            ??_lcdWriteToDigitBCD 004F               __end_of_ser_getch 0E08  
             __end_of_ser_putch 0E14                      ??_ser_init 004A                      ??_setupADC 004A  
                    ??_setupLCD 004D                      ??_setupSPI 004A                ___aldiv@quotient 005B  
                    _time_count 0038                    i1ser_putch@c 0070              adcConvertMM@adcRAW 005F  
                     Drive@radH 004F                       Drive@radL 0051                   ?_spi_transfer 0070  
               ser_getch@rxbyte 004B                   ?_adcConvertMM 005F                 _lcdWriteControl 0E45  
                __end_of___wmul 0ECA                  __end_of_getADC 07FF                   __pbitbssBANK0 0378  
                __end_of_moveCW 0772             start_initialization 0015                     __end_of_isr 0727  
      __size_ofi1_getSensorData 003A                  ??_spi_transfer 004A         i1getSensorData@packetID 0076  
          __size_ofi1_ser_getch 000A                  ??_adcConvertMM 0061            __size_ofi1_ser_putch 000A  
                      ??___wmul 004E                        ??_getADC 004A                     __pdataBANK0 006D  
                      ?_ADCMain 0070                        ??_moveCW 004A                    _negativeFlag 0046  
                   _FLAG_1000MS 0378                       ___latbits 0002                   __pcstackBANK0 004A  
                 _FLAG_Advanced 003D         __end_of_lcdWriteControl 0E59                ___lwdiv@dividend 0052  
                   _angleTurned 0024                        ?___aldiv 0050               __size_of_ser_init 000F  
                      ?___lwdiv 0050                        ?___lwmod 0070               __size_of_setupADC 0016  
             __size_of_setupLCD 0029               __size_of_setupSPI 0018                        ?_moveCCW 0070  
          i1getSensorData@bytes 0072                  __size_of_Drive 0025                ___lwdiv@quotient 0055  
               main@controlByte 006C         lcdWriteControl@databyte 004C                 ___aldiv@divisor 0050  
             interrupt_function 0004                 ___aldiv@counter 0059          __size_of_getSensorData 003E  
                ___wmul@product 004E                      ser_putch@c 004A               ??i1_getSensorData 0074  
         getSensorData@packetID 0052                       clear_ram0 0DD9                       _ser_getch 0DFE  
                     _ser_putch 0E08                       _stepCount 0048                __size_of_ADCMain 0020  
          __end_of_spi_transfer 0E32               ___wmul@multiplier 004A                spi_transfer@data 004C  
              spi_transfer@temp 004B            __end_of_adcConvertMM 036B                     _controlByte 0042  
                      _Distance 0020            lcdWriteData@databyte 004C     __size_of_lcdWriteToDigitBCD 0097  
                    ?_ser_getch 0070                ?_lcdWriteControl 0070                      ?_ser_putch 0070  
              __size_of___aldiv 008F                __size_of___lwdiv 003E                __size_of___lwmod 0032  
                 _getSensorData 0FC2                     _currentStep 0044  lcdWriteToDigitBCD@TenThouDigit 0055  
               ___lwdiv@divisor 0050                __size_of_moveCCW 0048                 ___lwdiv@counter 0057  
                      __ptext10 0ECA                        __ptext11 0E08                        __ptext20 0F84  
                      __ptext12 0E87                        __ptext21 0618                        __ptext13 0581  
                      __ptext22 06A7                        __ptext14 0E32                        __ptext23 0F4A  
                      __ptext15 0DE1                        __ptext24 0DF4                        __ptext16 0E45  
                      __ptext25 0DEA                        __ptext17 07BA                        __ptext26 0F18  
                      __ptext18 002D                        __ptext19 0EA7                        _highByte 0049  
                      _distTrav 0028                   __size_of_main 0216                        _ser_init 0E14  
                    _PB6Counter 003F                        _setupADC 0E59                        _setupLCD 0EEF  
                      _setupSPI 0E6F                      _PB7Counter 0040     lcdWriteToDigitBCD@HunsDigit 0051  
                    _PB8Counter 0041     lcdWriteToDigitBCD@OnesDigit 0057                  ?_getSensorData 004C  
   lcdWriteToDigitBCD@TensDigit 004F     lcdWriteToDigitBCD@ThouDigit 0053                   ??i1_ser_getch 0070  
                      intlevel1 0000                   ??i1_ser_putch 0070                ___lwmod@dividend 0072  
                 ?_lcdSetCursor 0070                     ??_ser_getch 004A                     ??_ser_putch 004A  
           getSensorData@sensor 0050           __size_of_spi_transfer 000F           __size_of_adcConvertMM 033E  
                    _OPTION_REG 0081                 ___lwmod@divisor 0070                 ___lwmod@counter 0075  
               i1_getSensorData 0F4A                    ___aldiv@sign 005A              getSensorData@bytes 004C  
                 ?_lcdWriteData 0070          lcdWriteToDigitBCD@data 004D                    _spi_transfer 0E23  
                ??_lcdSetCursor 004D                    _stepCountNeg 0036                     _stepClosest 0034  
           __end_ofi1_ser_getch 0DF4                    _adcConvertMM 002D             __end_ofi1_ser_putch 0DFE  
