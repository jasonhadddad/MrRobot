

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Sep 05 10:29:08 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     	;# 
    41  0001                     	;# 
    42  0002                     	;# 
    43  0003                     	;# 
    44  0004                     	;# 
    45  0005                     	;# 
    46  0006                     	;# 
    47  0007                     	;# 
    48  0008                     	;# 
    49  0009                     	;# 
    50  000A                     	;# 
    51  000B                     	;# 
    52  000C                     	;# 
    53  000D                     	;# 
    54  000E                     	;# 
    55  000E                     	;# 
    56  000F                     	;# 
    57  0010                     	;# 
    58  0011                     	;# 
    59  0012                     	;# 
    60  0013                     	;# 
    61  0014                     	;# 
    62  0015                     	;# 
    63  0015                     	;# 
    64  0016                     	;# 
    65  0017                     	;# 
    66  0018                     	;# 
    67  0019                     	;# 
    68  001A                     	;# 
    69  001B                     	;# 
    70  001B                     	;# 
    71  001C                     	;# 
    72  001D                     	;# 
    73  001E                     	;# 
    74  001F                     	;# 
    75  0081                     	;# 
    76  0085                     	;# 
    77  0086                     	;# 
    78  0087                     	;# 
    79  0088                     	;# 
    80  0089                     	;# 
    81  008C                     	;# 
    82  008D                     	;# 
    83  008E                     	;# 
    84  0091                     	;# 
    85  0092                     	;# 
    86  0093                     	;# 
    87  0094                     	;# 
    88  0098                     	;# 
    89  0099                     	;# 
    90  009C                     	;# 
    91  009D                     	;# 
    92  009E                     	;# 
    93  009F                     	;# 
    94  010C                     	;# 
    95  010D                     	;# 
    96  010E                     	;# 
    97  010F                     	;# 
    98  018C                     	;# 
    99  018D                     	;# 
   100  0000                     	;# 
   101  0001                     	;# 
   102  0002                     	;# 
   103  0003                     	;# 
   104  0004                     	;# 
   105  0005                     	;# 
   106  0006                     	;# 
   107  0007                     	;# 
   108  0008                     	;# 
   109  0009                     	;# 
   110  000A                     	;# 
   111  000B                     	;# 
   112  000C                     	;# 
   113  000D                     	;# 
   114  000E                     	;# 
   115  000E                     	;# 
   116  000F                     	;# 
   117  0010                     	;# 
   118  0011                     	;# 
   119  0012                     	;# 
   120  0013                     	;# 
   121  0014                     	;# 
   122  0015                     	;# 
   123  0015                     	;# 
   124  0016                     	;# 
   125  0017                     	;# 
   126  0018                     	;# 
   127  0019                     	;# 
   128  001A                     	;# 
   129  001B                     	;# 
   130  001B                     	;# 
   131  001C                     	;# 
   132  001D                     	;# 
   133  001E                     	;# 
   134  001F                     	;# 
   135  0081                     	;# 
   136  0085                     	;# 
   137  0086                     	;# 
   138  0087                     	;# 
   139  0088                     	;# 
   140  0089                     	;# 
   141  008C                     	;# 
   142  008D                     	;# 
   143  008E                     	;# 
   144  0091                     	;# 
   145  0092                     	;# 
   146  0093                     	;# 
   147  0094                     	;# 
   148  0098                     	;# 
   149  0099                     	;# 
   150  009C                     	;# 
   151  009D                     	;# 
   152  009E                     	;# 
   153  009F                     	;# 
   154  010C                     	;# 
   155  010D                     	;# 
   156  010E                     	;# 
   157  010F                     	;# 
   158  018C                     	;# 
   159  018D                     	;# 
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0006                     	;# 
   167  0007                     	;# 
   168  0008                     	;# 
   169  0009                     	;# 
   170  000A                     	;# 
   171  000B                     	;# 
   172  000C                     	;# 
   173  000D                     	;# 
   174  000E                     	;# 
   175  000E                     	;# 
   176  000F                     	;# 
   177  0010                     	;# 
   178  0011                     	;# 
   179  0012                     	;# 
   180  0013                     	;# 
   181  0014                     	;# 
   182  0015                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0017                     	;# 
   186  0018                     	;# 
   187  0019                     	;# 
   188  001A                     	;# 
   189  001B                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  001D                     	;# 
   193  001E                     	;# 
   194  001F                     	;# 
   195  0081                     	;# 
   196  0085                     	;# 
   197  0086                     	;# 
   198  0087                     	;# 
   199  0088                     	;# 
   200  0089                     	;# 
   201  008C                     	;# 
   202  008D                     	;# 
   203  008E                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0093                     	;# 
   207  0094                     	;# 
   208  0098                     	;# 
   209  0099                     	;# 
   210  009C                     	;# 
   211  009D                     	;# 
   212  009E                     	;# 
   213  009F                     	;# 
   214  010C                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  010F                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220  0000                     	;# 
   221  0001                     	;# 
   222  0002                     	;# 
   223  0003                     	;# 
   224  0004                     	;# 
   225  0005                     	;# 
   226  0006                     	;# 
   227  0007                     	;# 
   228  0008                     	;# 
   229  0009                     	;# 
   230  000A                     	;# 
   231  000B                     	;# 
   232  000C                     	;# 
   233  000D                     	;# 
   234  000E                     	;# 
   235  000E                     	;# 
   236  000F                     	;# 
   237  0010                     	;# 
   238  0011                     	;# 
   239  0012                     	;# 
   240  0013                     	;# 
   241  0014                     	;# 
   242  0015                     	;# 
   243  0015                     	;# 
   244  0016                     	;# 
   245  0017                     	;# 
   246  0018                     	;# 
   247  0019                     	;# 
   248  001A                     	;# 
   249  001B                     	;# 
   250  001B                     	;# 
   251  001C                     	;# 
   252  001D                     	;# 
   253  001E                     	;# 
   254  001F                     	;# 
   255  0081                     	;# 
   256  0085                     	;# 
   257  0086                     	;# 
   258  0087                     	;# 
   259  0088                     	;# 
   260  0089                     	;# 
   261  008C                     	;# 
   262  008D                     	;# 
   263  008E                     	;# 
   264  0091                     	;# 
   265  0092                     	;# 
   266  0093                     	;# 
   267  0094                     	;# 
   268  0098                     	;# 
   269  0099                     	;# 
   270  009C                     	;# 
   271  009D                     	;# 
   272  009E                     	;# 
   273  009F                     	;# 
   274  010C                     	;# 
   275  010D                     	;# 
   276  010E                     	;# 
   277  010F                     	;# 
   278  018C                     	;# 
   279  018D                     	;# 
   280  0000                     	;# 
   281  0001                     	;# 
   282  0002                     	;# 
   283  0003                     	;# 
   284  0004                     	;# 
   285  0005                     	;# 
   286  0006                     	;# 
   287  0007                     	;# 
   288  0008                     	;# 
   289  0009                     	;# 
   290  000A                     	;# 
   291  000B                     	;# 
   292  000C                     	;# 
   293  000D                     	;# 
   294  000E                     	;# 
   295  000E                     	;# 
   296  000F                     	;# 
   297  0010                     	;# 
   298  0011                     	;# 
   299  0012                     	;# 
   300  0013                     	;# 
   301  0014                     	;# 
   302  0015                     	;# 
   303  0015                     	;# 
   304  0016                     	;# 
   305  0017                     	;# 
   306  0018                     	;# 
   307  0019                     	;# 
   308  001A                     	;# 
   309  001B                     	;# 
   310  001B                     	;# 
   311  001C                     	;# 
   312  001D                     	;# 
   313  001E                     	;# 
   314  001F                     	;# 
   315  0081                     	;# 
   316  0085                     	;# 
   317  0086                     	;# 
   318  0087                     	;# 
   319  0088                     	;# 
   320  0089                     	;# 
   321  008C                     	;# 
   322  008D                     	;# 
   323  008E                     	;# 
   324  0091                     	;# 
   325  0092                     	;# 
   326  0093                     	;# 
   327  0094                     	;# 
   328  0098                     	;# 
   329  0099                     	;# 
   330  009C                     	;# 
   331  009D                     	;# 
   332  009E                     	;# 
   333  009F                     	;# 
   334  010C                     	;# 
   335  010D                     	;# 
   336  010E                     	;# 
   337  010F                     	;# 
   338  018C                     	;# 
   339  018D                     	;# 
   340  0000                     	;# 
   341  0001                     	;# 
   342  0002                     	;# 
   343  0003                     	;# 
   344  0004                     	;# 
   345  0005                     	;# 
   346  0006                     	;# 
   347  0007                     	;# 
   348  0008                     	;# 
   349  0009                     	;# 
   350  000A                     	;# 
   351  000B                     	;# 
   352  000C                     	;# 
   353  000D                     	;# 
   354  000E                     	;# 
   355  000E                     	;# 
   356  000F                     	;# 
   357  0010                     	;# 
   358  0011                     	;# 
   359  0012                     	;# 
   360  0013                     	;# 
   361  0014                     	;# 
   362  0015                     	;# 
   363  0015                     	;# 
   364  0016                     	;# 
   365  0017                     	;# 
   366  0018                     	;# 
   367  0019                     	;# 
   368  001A                     	;# 
   369  001B                     	;# 
   370  001B                     	;# 
   371  001C                     	;# 
   372  001D                     	;# 
   373  001E                     	;# 
   374  001F                     	;# 
   375  0081                     	;# 
   376  0085                     	;# 
   377  0086                     	;# 
   378  0087                     	;# 
   379  0088                     	;# 
   380  0089                     	;# 
   381  008C                     	;# 
   382  008D                     	;# 
   383  008E                     	;# 
   384  0091                     	;# 
   385  0092                     	;# 
   386  0093                     	;# 
   387  0094                     	;# 
   388  0098                     	;# 
   389  0099                     	;# 
   390  009C                     	;# 
   391  009D                     	;# 
   392  009E                     	;# 
   393  009F                     	;# 
   394  010C                     	;# 
   395  010D                     	;# 
   396  010E                     	;# 
   397  010F                     	;# 
   398  018C                     	;# 
   399  018D                     	;# 
   400                           
   401                           	psect	idataBANK0
   402  0E59                     __pidataBANK0:	
   403                           
   404                           ;initializer for _adcClosest
   405  0E59  34E8               	retlw	232
   406  0E5A  3403               	retlw	3
   407  001F                     _ADCON0	set	31
   408  0005                     _PORTA	set	5
   409  0007                     _PORTC	set	7
   410  0008                     _PORTD	set	8
   411  0009                     _PORTE	set	9
   412  001A                     _RCREG	set	26
   413  0018                     _RCSTA	set	24
   414  0013                     _SSPBUF	set	19
   415  0014                     _SSPCON	set	20
   416  0001                     _TMR0	set	1
   417  0019                     _TXREG	set	25
   418  001E                     _ADRESH	set	30
   419  005F                     _GIE	set	95
   420  00FA                     _GO	set	250
   421  005E                     _PEIE	set	94
   422  0030                     _RB0	set	48
   423  0031                     _RB1	set	49
   424  0032                     _RB2	set	50
   425  003A                     _RC2	set	58
   426  0065                     _RCIF	set	101
   427  0048                     _RE0	set	72
   428  0049                     _RE1	set	73
   429  004A                     _RE2	set	74
   430  0063                     _SSPIF	set	99
   431  005D                     _TMR0IE	set	93
   432  005A                     _TMR0IF	set	90
   433  009F                     _ADCON1	set	159
   434  009E                     _ADRESL	set	158
   435  0081                     _OPTION_REG	set	129
   436  0099                     _SPBRG	set	153
   437  0094                     _SSPSTAT	set	148
   438  0085                     _TRISA	set	133
   439  0086                     _TRISB	set	134
   440  0087                     _TRISC	set	135
   441  0088                     _TRISD	set	136
   442  0089                     _TRISE	set	137
   443  0098                     _TXSTA	set	152
   444  04C1                     _TRMT	set	1217
   445                           
   446                           ; #config settings
   447  0000                     
   448                           	psect	cinit
   449  0015                     start_initialization:	
   450  0015                     __initialization:	
   451                           
   452                           ; Initialize objects allocated to BANK0
   453  0015  120A  158A  2659  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   454  001A  00E9               	movwf	__pdataBANK0& (0+127)
   455  001B  120A  158A  265A  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   456  0020  00EA               	movwf	(__pdataBANK0+1)& (0+127)
   457                           
   458                           ; Clear objects allocated to BANK0
   459  0021  1383               	bcf	3,7	;select IRP bank0
   460  0022  3020               	movlw	low __pbssBANK0
   461  0023  0084               	movwf	4
   462  0024  3046               	movlw	low (__pbssBANK0+38)
   463  0025  120A  118A  27F8   	fcall	clear_ram0
   464                           
   465                           ; Clear objects allocated to COMMON
   466  0028  01FB               	clrf	__pbssCOMMON& (0+127)
   467  0029  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   468                           
   469                           ; Clear objects allocated to BITCOMMON
   470  002A  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   471  002B                     end_of_initialization:	
   472                           ;End of C runtime variable initialization code
   473                           
   474  002B                     __end_of__initialization:	
   475  002B  0183               	clrf	3
   476  002C  120A  118A  2B6D   	ljmp	_main	;jump to C main() function
   477                           
   478                           	psect	bitbssCOMMON
   479  03E8                     __pbitbssCOMMON:	
   480  03E8                     _FLAG_1000MS:	
   481  03E8                     	ds	1
   482                           
   483                           	psect	bssCOMMON
   484  007B                     __pbssCOMMON:	
   485  007B                     _currentStep:	
   486  007B                     	ds	1
   487  007C                     _negativeFlag:	
   488  007C                     	ds	1
   489                           
   490                           	psect	bssBANK0
   491  0020                     __pbssBANK0:	
   492  0020                     _Distance:	
   493  0020                     	ds	2
   494  0022                     _adcRAW:	
   495  0022                     	ds	2
   496  0024                     _degrees:	
   497  0024                     	ds	2
   498  0026                     _distTrav:	
   499  0026                     	ds	2
   500  0028                     _loop:	
   501  0028                     	ds	2
   502  002A                     _loop2:	
   503  002A                     	ds	2
   504  002C                     _lowByte:	
   505  002C                     	ds	2
   506  002E                     _radH:	
   507  002E                     	ds	2
   508  0030                     _radL:	
   509  0030                     	ds	2
   510  0032                     _speedH:	
   511  0032                     	ds	2
   512  0034                     _speedL:	
   513  0034                     	ds	2
   514  0036                     _stepClosest:	
   515  0036                     	ds	2
   516  0038                     _stepCountNeg:	
   517  0038                     	ds	2
   518  003A                     _time_count:	
   519  003A                     	ds	2
   520  003C                     _totalDistTrav:	
   521  003C                     	ds	2
   522  003E                     _PB6Counter:	
   523  003E                     	ds	1
   524  003F                     _PB7Counter:	
   525  003F                     	ds	1
   526  0040                     _PB8Counter:	
   527  0040                     	ds	1
   528  0041                     _controlByte:	
   529  0041                     	ds	1
   530  0042                     _rxbyte:	
   531  0042                     	ds	1
   532  0043                     _stepCount:	
   533  0043                     	ds	1
   534  0044                     _highByte:	
   535  0044                     	ds	2
   536                           
   537                           	psect	dataBANK0
   538  0069                     __pdataBANK0:	
   539  0069                     _adcClosest:	
   540  0069                     	ds	2
   541                           
   542                           	psect	clrtext
   543  07F8                     clear_ram0:	
   544                           ;	Called with FSR containing the base address, and
   545                           ;	W with the last address+1
   546                           
   547  07F8  0064               	clrwdt	;clear the watchdog before getting into this loop
   548  07F9                     clrloop0:	
   549  07F9  0180               	clrf	0	;clear RAM location pointed to by FSR
   550  07FA  0A84               	incf	4,f	;increment pointer
   551  07FB  0604               	xorwf	4,w	;XOR with final address
   552  07FC  1903               	btfsc	3,2	;have we reached the end yet?
   553  07FD  3400               	retlw	0	;all done for this memory range, return
   554  07FE  0604               	xorwf	4,w	;XOR again to restore value
   555  07FF  2FF9               	goto	clrloop0	;do the next byte
   556                           
   557                           	psect	cstackCOMMON
   558  0070                     __pcstackCOMMON:	
   559  0070                     ?_setupSPI:	
   560  0070                     ?_ser_init:	
   561                           ; 1 bytes @ 0x0
   562                           
   563  0070                     ?_setupLCD:	
   564                           ; 1 bytes @ 0x0
   565                           
   566  0070                     ?_setupADC:	
   567                           ; 1 bytes @ 0x0
   568                           
   569  0070                     ?_spi_transfer:	
   570                           ; 1 bytes @ 0x0
   571                           
   572  0070                     ?_ser_putch:	
   573                           ; 1 bytes @ 0x0
   574                           
   575  0070                     ?_moveCW:	
   576                           ; 1 bytes @ 0x0
   577                           
   578  0070                     ?_ADCMain:	
   579                           ; 1 bytes @ 0x0
   580                           
   581  0070                     ?_moveCCW:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0070                     ?_getDistTrav:	
   585                           ; 1 bytes @ 0x0
   586                           
   587  0070                     ?_isr:	
   588                           ; 1 bytes @ 0x0
   589                           
   590  0070                     ?_main:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0070                     ?_lcdWriteControl:	
   594                           ; 1 bytes @ 0x0
   595                           
   596  0070                     ?_lcdWriteData:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0070                     ?_lcdSetCursor:	
   600                           ; 1 bytes @ 0x0
   601                           
   602  0070                     ?_ser_getch:	
   603                           ; 1 bytes @ 0x0
   604                           
   605  0070                     ?_getADC:	
   606                           ; 1 bytes @ 0x0
   607                           
   608  0070                     ?___lwmod:	
   609                           ; 2 bytes @ 0x0
   610                           
   611  0070                     ___lwmod@divisor:	
   612                           ; 2 bytes @ 0x0
   613                           
   614                           
   615                           ; 2 bytes @ 0x0
   616  0070                     	ds	2
   617  0072                     ___lwmod@dividend:	
   618                           
   619                           ; 2 bytes @ 0x2
   620  0072                     	ds	2
   621  0074                     ??___lwmod:	
   622                           
   623                           ; 1 bytes @ 0x4
   624  0074                     	ds	1
   625  0075                     ___lwmod@counter:	
   626                           
   627                           ; 1 bytes @ 0x5
   628  0075                     	ds	1
   629  0076                     ??_isr:	
   630                           
   631                           ; 1 bytes @ 0x6
   632  0076                     	ds	5
   633                           
   634                           	psect	cstackBANK0
   635  0046                     __pcstackBANK0:	
   636  0046                     ??_setupSPI:	
   637  0046                     ??_ser_init:	
   638                           ; 1 bytes @ 0x0
   639                           
   640  0046                     ??_setupADC:	
   641                           ; 1 bytes @ 0x0
   642                           
   643  0046                     ??_spi_transfer:	
   644                           ; 1 bytes @ 0x0
   645                           
   646  0046                     ??_ser_putch:	
   647                           ; 1 bytes @ 0x0
   648                           
   649  0046                     ??_moveCW:	
   650                           ; 1 bytes @ 0x0
   651                           
   652  0046                     ??_moveCCW:	
   653                           ; 1 bytes @ 0x0
   654                           
   655  0046                     ??_getADC:	
   656                           ; 1 bytes @ 0x0
   657                           
   658  0046                     ??_lcdWriteControl:	
   659                           ; 1 bytes @ 0x0
   660                           
   661  0046                     ??_lcdWriteData:	
   662                           ; 1 bytes @ 0x0
   663                           
   664  0046                     ??_ser_getch:	
   665                           ; 1 bytes @ 0x0
   666                           
   667  0046                     ?___wmul:	
   668                           ; 1 bytes @ 0x0
   669                           
   670  0046                     ?___awdiv:	
   671                           ; 2 bytes @ 0x0
   672                           
   673  0046                     ser_putch@c:	
   674                           ; 2 bytes @ 0x0
   675                           
   676  0046                     ___wmul@multiplier:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  0046                     ___awdiv@divisor:	
   680                           ; 2 bytes @ 0x0
   681                           
   682                           
   683                           ; 2 bytes @ 0x0
   684  0046                     	ds	1
   685  0047                     ?_Drive:	
   686  0047                     spi_transfer@temp:	
   687                           ; 1 bytes @ 0x1
   688                           
   689  0047                     ser_getch@rxbyte:	
   690                           ; 1 bytes @ 0x1
   691                           
   692  0047                     Drive@speedH:	
   693                           ; 1 bytes @ 0x1
   694                           
   695                           
   696                           ; 2 bytes @ 0x1
   697  0047                     	ds	1
   698  0048                     lcdWriteControl@databyte:	
   699  0048                     lcdWriteData@databyte:	
   700                           ; 1 bytes @ 0x2
   701                           
   702  0048                     spi_transfer@data:	
   703                           ; 1 bytes @ 0x2
   704                           
   705  0048                     ___wmul@multiplicand:	
   706                           ; 1 bytes @ 0x2
   707                           
   708  0048                     ___awdiv@dividend:	
   709                           ; 2 bytes @ 0x2
   710                           
   711                           
   712                           ; 2 bytes @ 0x2
   713  0048                     	ds	1
   714  0049                     ??_setupLCD:	
   715  0049                     ??_lcdSetCursor:	
   716                           ; 1 bytes @ 0x3
   717                           
   718  0049                     ?_lcdWriteToDigitBCD:	
   719                           ; 1 bytes @ 0x3
   720                           
   721  0049                     lcdSetCursor@address:	
   722                           ; 1 bytes @ 0x3
   723                           
   724  0049                     lcdWriteToDigitBCD@data:	
   725                           ; 1 bytes @ 0x3
   726                           
   727  0049                     Drive@speedL:	
   728                           ; 2 bytes @ 0x3
   729                           
   730                           
   731                           ; 2 bytes @ 0x3
   732  0049                     	ds	1
   733  004A                     ??___wmul:	
   734  004A                     ??___awdiv:	
   735                           ; 1 bytes @ 0x4
   736                           
   737  004A                     ___wmul@product:	
   738                           ; 1 bytes @ 0x4
   739                           
   740                           
   741                           ; 2 bytes @ 0x4
   742  004A                     	ds	1
   743  004B                     ??_lcdWriteToDigitBCD:	
   744  004B                     ___awdiv@counter:	
   745                           ; 1 bytes @ 0x5
   746                           
   747  004B                     lcdWriteToDigitBCD@TensDigit:	
   748                           ; 1 bytes @ 0x5
   749                           
   750  004B                     Drive@radH:	
   751                           ; 2 bytes @ 0x5
   752                           
   753                           
   754                           ; 2 bytes @ 0x5
   755  004B                     	ds	1
   756  004C                     ?___lwdiv:	
   757  004C                     ?___aldiv:	
   758                           ; 2 bytes @ 0x6
   759                           
   760  004C                     ___awdiv@sign:	
   761                           ; 4 bytes @ 0x6
   762                           
   763  004C                     ___lwdiv@divisor:	
   764                           ; 1 bytes @ 0x6
   765                           
   766  004C                     ___aldiv@divisor:	
   767                           ; 2 bytes @ 0x6
   768                           
   769                           
   770                           ; 4 bytes @ 0x6
   771  004C                     	ds	1
   772  004D                     lcdWriteToDigitBCD@HunsDigit:	
   773  004D                     Drive@radL:	
   774                           ; 2 bytes @ 0x7
   775                           
   776  004D                     ___awdiv@quotient:	
   777                           ; 2 bytes @ 0x7
   778                           
   779                           
   780                           ; 2 bytes @ 0x7
   781  004D                     	ds	1
   782  004E                     ___lwdiv@dividend:	
   783                           
   784                           ; 2 bytes @ 0x8
   785  004E                     	ds	1
   786  004F                     ??_Drive:	
   787  004F                     lcdWriteToDigitBCD@ThouDigit:	
   788                           ; 1 bytes @ 0x9
   789                           
   790                           
   791                           ; 2 bytes @ 0x9
   792  004F                     	ds	1
   793  0050                     ??___lwdiv:	
   794  0050                     ___aldiv@dividend:	
   795                           ; 1 bytes @ 0xA
   796                           
   797                           
   798                           ; 4 bytes @ 0xA
   799  0050                     	ds	1
   800  0051                     lcdWriteToDigitBCD@TenThouDigit:	
   801  0051                     ___lwdiv@quotient:	
   802                           ; 2 bytes @ 0xB
   803                           
   804                           
   805                           ; 2 bytes @ 0xB
   806  0051                     	ds	2
   807  0053                     ___lwdiv@counter:	
   808  0053                     lcdWriteToDigitBCD@OnesDigit:	
   809                           ; 1 bytes @ 0xD
   810                           
   811                           
   812                           ; 2 bytes @ 0xD
   813  0053                     	ds	1
   814  0054                     ??___aldiv:	
   815                           
   816                           ; 1 bytes @ 0xE
   817  0054                     	ds	1
   818  0055                     ??_getDistTrav:	
   819  0055                     ___aldiv@counter:	
   820                           ; 1 bytes @ 0xF
   821                           
   822                           
   823                           ; 1 bytes @ 0xF
   824  0055                     	ds	1
   825  0056                     ___aldiv@sign:	
   826                           
   827                           ; 1 bytes @ 0x10
   828  0056                     	ds	1
   829  0057                     ___aldiv@quotient:	
   830                           
   831                           ; 4 bytes @ 0x11
   832  0057                     	ds	4
   833  005B                     ?_adcConvertMM:	
   834  005B                     adcConvertMM@adcRAW:	
   835                           ; 2 bytes @ 0x15
   836                           
   837                           
   838                           ; 2 bytes @ 0x15
   839  005B                     	ds	2
   840  005D                     ??_adcConvertMM:	
   841                           
   842                           ; 1 bytes @ 0x17
   843  005D                     	ds	8
   844  0065                     ??_ADCMain:	
   845  0065                     ??_main:	
   846                           ; 1 bytes @ 0x1F
   847                           
   848                           
   849                           ; 1 bytes @ 0x1F
   850  0065                     	ds	3
   851  0068                     main@controlByte:	
   852                           
   853                           ; 1 bytes @ 0x22
   854  0068                     	ds	1
   855                           
   856                           	psect	maintext
   857  036D                     __pmaintext:	
   858 ;;
   859 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   860 ;;
   861 ;; *************** function _main *****************
   862 ;; Defined at:
   863 ;;		line 53 in file "main.c"
   864 ;; Parameters:    Size  Location     Type
   865 ;;		None
   866 ;; Auto vars:     Size  Location     Type
   867 ;;  controlByte     1   34[BANK0 ] unsigned char 
   868 ;; Return value:  Size  Location     Type
   869 ;;                  1    wreg      void 
   870 ;; Registers used:
   871 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   872 ;; Tracked objects:
   873 ;;		On entry : B00/0
   874 ;;		On exit  : 0/0
   875 ;;		Unchanged: 0/0
   876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   877 ;;      Params:         0       0       0       0       0
   878 ;;      Locals:         0       1       0       0       0
   879 ;;      Temps:          0       3       0       0       0
   880 ;;      Totals:         0       4       0       0       0
   881 ;;Total ram usage:        4 bytes
   882 ;; Hardware stack levels required when called:    5
   883 ;; This function calls:
   884 ;;		_ADCMain
   885 ;;		_Drive
   886 ;;		_getDistTrav
   887 ;;		_moveCCW
   888 ;;		_moveCW
   889 ;;		_ser_init
   890 ;;		_ser_putch
   891 ;;		_setupADC
   892 ;;		_setupLCD
   893 ;;		_setupSPI
   894 ;;		_spi_transfer
   895 ;; This function is called by:
   896 ;;		Startup code after reset
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           
   901                           ;psect for function _main
   902  036D                     _main:	
   903                           
   904                           ;main.c: 56: setupSPI();
   905                           
   906                           ;incstack = 0
   907                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   908  036D  120A  158A  26D4  120A  118A  	fcall	_setupSPI
   909                           
   910                           ;main.c: 57: ser_init();
   911  0372  120A  158A  2679  120A  118A  	fcall	_ser_init
   912                           
   913                           ;main.c: 58: setupLCD();
   914  0377  120A  158A  2754  120A  118A  	fcall	_setupLCD
   915                           
   916                           ;main.c: 59: setupADC();
   917  037C  120A  158A  26BE  120A  118A  	fcall	_setupADC
   918                           
   919                           ;main.c: 61: unsigned char controlByte = 0b00001101;
   920  0381  300D               	movlw	13
   921  0382  1283               	bcf	3,5	;RP0=0, select bank0
   922  0383  1303               	bcf	3,6	;RP1=0, select bank0
   923  0384  00E5               	movwf	??_main
   924  0385  0865               	movf	??_main,w
   925  0386  00E8               	movwf	main@controlByte
   926                           
   927                           ;main.c: 62: spi_transfer(controlByte);
   928  0387  0868               	movf	main@controlByte,w
   929  0388  120A  158A  2688  120A  118A  	fcall	_spi_transfer
   930                           
   931                           ;main.c: 64: ser_putch(128);
   932  038D  3080               	movlw	128
   933  038E  120A  158A  266D  120A  118A  	fcall	_ser_putch
   934                           
   935                           ;main.c: 65: ser_putch(132);
   936  0393  3084               	movlw	132
   937  0394  120A  158A  266D  120A  118A  	fcall	_ser_putch
   938  0399                     l102:	
   939                           ;main.c: 67: while(1){
   940                           
   941                           
   942                           ;main.c: 72: if (PB8Counter >= 10 && !RB0 == 0){
   943  0399  300A               	movlw	10
   944  039A  1283               	bcf	3,5	;RP0=0, select bank0
   945  039B  1303               	bcf	3,6	;RP1=0, select bank0
   946  039C  0240               	subwf	_PB8Counter,w
   947  039D  1803               	btfsc	3,0
   948  039E  1C06               	btfss	6,0	;volatile
   949  039F  2BF8               	goto	l2070
   950                           
   951                           ;main.c: 73: for (loop = 0; loop < 400; loop++){
   952  03A0  01A8               	clrf	_loop
   953  03A1  01A9               	clrf	_loop+1
   954  03A2  0829               	movf	_loop+1,w
   955  03A3  3A80               	xorlw	128
   956  03A4  00FF               	movwf	127
   957  03A5  3081               	movlw	129
   958  03A6  027F               	subwf	127,w
   959  03A7  1D03               	skipz
   960  03A8  2BAB               	goto	u1825
   961  03A9  3090               	movlw	144
   962  03AA  0228               	subwf	_loop,w
   963  03AB                     u1825:	
   964  03AB  1803               	btfsc	3,0
   965  03AC  2BDB               	goto	l2062
   966  03AD                     l2050:	
   967                           
   968                           ;main.c: 74: moveCW();
   969  03AD  120A  118A  26ED  120A  118A  	fcall	_moveCW
   970                           
   971                           ;main.c: 75: ADCMain();
   972  03B2  120A  158A  26EC  120A  118A  	fcall	_ADCMain
   973                           
   974                           ;main.c: 76: if (adcRAW > adcClosest){
   975  03B7  1283               	bcf	3,5	;RP0=0, select bank0
   976  03B8  1303               	bcf	3,6	;RP1=0, select bank0
   977  03B9  0823               	movf	_adcRAW+1,w	;volatile
   978  03BA  026A               	subwf	_adcClosest+1,w
   979  03BB  1D03               	skipz
   980  03BC  2BBF               	goto	u1835
   981  03BD  0822               	movf	_adcRAW,w	;volatile
   982  03BE  0269               	subwf	_adcClosest,w
   983  03BF                     u1835:	
   984  03BF  1803               	skipnc
   985  03C0  2BCA               	goto	l2058
   986                           
   987                           ;main.c: 77: adcClosest = adcRAW;
   988  03C1  0823               	movf	_adcRAW+1,w	;volatile
   989  03C2  00EA               	movwf	_adcClosest+1
   990  03C3  0822               	movf	_adcRAW,w	;volatile
   991  03C4  00E9               	movwf	_adcClosest
   992                           
   993                           ;main.c: 78: stepClosest = stepCount;
   994  03C5  0843               	movf	_stepCount,w
   995  03C6  00B6               	movwf	_stepClosest
   996  03C7  01B7               	clrf	_stepClosest+1
   997  03C8  1BB6               	btfsc	_stepClosest,7
   998  03C9  03B7               	decf	_stepClosest+1,f
   999  03CA                     l2058:	
  1000  03CA  3001               	movlw	1
  1001  03CB  07A8               	addwf	_loop,f
  1002  03CC  1803               	skipnc
  1003  03CD  0AA9               	incf	_loop+1,f
  1004  03CE  3000               	movlw	0
  1005  03CF  07A9               	addwf	_loop+1,f
  1006  03D0  0829               	movf	_loop+1,w
  1007  03D1  3A80               	xorlw	128
  1008  03D2  00FF               	movwf	127
  1009  03D3  3081               	movlw	129
  1010  03D4  027F               	subwf	127,w
  1011  03D5  1D03               	skipz
  1012  03D6  2BD9               	goto	u1845
  1013  03D7  3090               	movlw	144
  1014  03D8  0228               	subwf	_loop,w
  1015  03D9                     u1845:	
  1016  03D9  1C03               	skipc
  1017  03DA  2BAD               	goto	l2050
  1018  03DB                     l2062:	
  1019                           
  1020                           ;main.c: 79: }
  1021                           ;main.c: 80: }
  1022                           ;main.c: 83: for (loop = stepCount; loop != stepClosest; loop++){
  1023  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  1024  03DC  1303               	bcf	3,6	;RP1=0, select bank0
  1025  03DD  0843               	movf	_stepCount,w
  1026  03DE  00A8               	movwf	_loop
  1027  03DF  01A9               	clrf	_loop+1
  1028  03E0  1BA8               	btfsc	_loop,7
  1029  03E1  03A9               	decf	_loop+1,f
  1030  03E2                     l2068:	
  1031  03E2  0837               	movf	_stepClosest+1,w
  1032  03E3  0629               	xorwf	_loop+1,w
  1033  03E4  1D03               	skipz
  1034  03E5  2BE8               	goto	u1855
  1035  03E6  0836               	movf	_stepClosest,w
  1036  03E7  0628               	xorwf	_loop,w
  1037  03E8                     u1855:	
  1038  03E8  1903               	btfsc	3,2
  1039  03E9  2BF8               	goto	l2070
  1040                           
  1041                           ;main.c: 84: moveCCW();
  1042  03EA  120A  118A  2738  120A  118A  	fcall	_moveCCW
  1043  03EF  3001               	movlw	1
  1044  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  1045  03F1  1303               	bcf	3,6	;RP1=0, select bank0
  1046  03F2  07A8               	addwf	_loop,f
  1047  03F3  1803               	skipnc
  1048  03F4  0AA9               	incf	_loop+1,f
  1049  03F5  3000               	movlw	0
  1050  03F6  07A9               	addwf	_loop+1,f
  1051  03F7  2BE2               	goto	l2068
  1052  03F8                     l2070:	
  1053                           
  1054                           ;main.c: 85: }
  1055                           ;main.c: 86: }
  1056                           ;main.c: 91: if (PB7Counter >= 10 && !RB1 == 0){
  1057  03F8  300A               	movlw	10
  1058  03F9  023F               	subwf	_PB7Counter,w
  1059  03FA  1803               	btfsc	3,0
  1060  03FB  1C86               	btfss	6,1	;volatile
  1061  03FC  2C5E               	goto	l2094
  1062                           
  1063                           ;main.c: 92: totalDistTrav = 0;
  1064  03FD  01BC               	clrf	_totalDistTrav
  1065  03FE  01BD               	clrf	_totalDistTrav+1
  1066                           
  1067                           ;main.c: 94: Drive(0,250,0x7F,0xFF);
  1068  03FF  3000               	movlw	0
  1069  0400  00C7               	movwf	Drive@speedH
  1070  0401  00C8               	movwf	Drive@speedH+1
  1071  0402  30FA               	movlw	250
  1072  0403  00C9               	movwf	Drive@speedL
  1073  0404  3000               	movlw	0
  1074  0405  00CA               	movwf	Drive@speedL+1
  1075  0406  307F               	movlw	127
  1076  0407  00CB               	movwf	Drive@radH
  1077  0408  3000               	movlw	0
  1078  0409  00CC               	movwf	Drive@radH+1
  1079  040A  30FF               	movlw	255
  1080  040B  00CD               	movwf	Drive@radL
  1081  040C  3000               	movlw	0
  1082  040D  00CE               	movwf	Drive@radL+1
  1083  040E  120A  158A  272F  120A  118A  	fcall	_Drive
  1084                           
  1085                           ;main.c: 97: for (loop = 0; loop < 400; loop++){
  1086  0413  1283               	bcf	3,5	;RP0=0, select bank0
  1087  0414  1303               	bcf	3,6	;RP1=0, select bank0
  1088  0415  01A8               	clrf	_loop
  1089  0416  01A9               	clrf	_loop+1
  1090  0417  0829               	movf	_loop+1,w
  1091  0418  3A80               	xorlw	128
  1092  0419  00FF               	movwf	127
  1093  041A  3081               	movlw	129
  1094  041B  027F               	subwf	127,w
  1095  041C  1D03               	skipz
  1096  041D  2C20               	goto	u1885
  1097  041E  3090               	movlw	144
  1098  041F  0228               	subwf	_loop,w
  1099  0420                     u1885:	
  1100  0420  1803               	btfsc	3,0
  1101  0421  2C49               	goto	l2092
  1102  0422                     l2084:	
  1103                           
  1104                           ;main.c: 98: getDistTrav();
  1105  0422  120A  118A  2634  120A  118A  	fcall	_getDistTrav
  1106                           
  1107                           ;main.c: 99: _delay((unsigned long)((40)*(20000000/4000.0)));
  1108  0427  3002               	movlw	2
  1109  0428  1283               	bcf	3,5	;RP0=0, select bank0
  1110  0429  1303               	bcf	3,6	;RP1=0, select bank0
  1111  042A  00E7               	movwf	??_main+2
  1112  042B  3004               	movlw	4
  1113  042C  00E6               	movwf	??_main+1
  1114  042D  30BA               	movlw	186
  1115  042E  00E5               	movwf	??_main
  1116  042F                     u1977:	
  1117  042F  0BE5               	decfsz	??_main,f
  1118  0430  2C2F               	goto	u1977
  1119  0431  0BE6               	decfsz	??_main+1,f
  1120  0432  2C2F               	goto	u1977
  1121  0433  0BE7               	decfsz	??_main+2,f
  1122  0434  2C2F               	goto	u1977
  1123  0435  0000               	nop
  1124  0436  3001               	movlw	1
  1125  0437  1283               	bcf	3,5	;RP0=0, select bank0
  1126  0438  1303               	bcf	3,6	;RP1=0, select bank0
  1127  0439  07A8               	addwf	_loop,f
  1128  043A  1803               	skipnc
  1129  043B  0AA9               	incf	_loop+1,f
  1130  043C  3000               	movlw	0
  1131  043D  07A9               	addwf	_loop+1,f
  1132  043E  0829               	movf	_loop+1,w
  1133  043F  3A80               	xorlw	128
  1134  0440  00FF               	movwf	127
  1135  0441  3081               	movlw	129
  1136  0442  027F               	subwf	127,w
  1137  0443  1D03               	skipz
  1138  0444  2C47               	goto	u1895
  1139  0445  3090               	movlw	144
  1140  0446  0228               	subwf	_loop,w
  1141  0447                     u1895:	
  1142  0447  1C03               	skipc
  1143  0448  2C22               	goto	l2084
  1144  0449                     l2092:	
  1145                           
  1146                           ;main.c: 100: }
  1147                           ;main.c: 102: Drive(0,0,0x7F,0xFF);
  1148  0449  3000               	movlw	0
  1149  044A  1283               	bcf	3,5	;RP0=0, select bank0
  1150  044B  1303               	bcf	3,6	;RP1=0, select bank0
  1151  044C  00C7               	movwf	Drive@speedH
  1152  044D  00C8               	movwf	Drive@speedH+1
  1153  044E  3000               	movlw	0
  1154  044F  00C9               	movwf	Drive@speedL
  1155  0450  00CA               	movwf	Drive@speedL+1
  1156  0451  307F               	movlw	127
  1157  0452  00CB               	movwf	Drive@radH
  1158  0453  3000               	movlw	0
  1159  0454  00CC               	movwf	Drive@radH+1
  1160  0455  30FF               	movlw	255
  1161  0456  00CD               	movwf	Drive@radL
  1162  0457  3000               	movlw	0
  1163  0458  00CE               	movwf	Drive@radL+1
  1164  0459  120A  158A  272F  120A  118A  	fcall	_Drive
  1165  045E                     l2094:	
  1166                           
  1167                           ;main.c: 103: }
  1168                           ;main.c: 106: if (PB6Counter >= 10 && !RB2 == 0){
  1169  045E  300A               	movlw	10
  1170  045F  1283               	bcf	3,5	;RP0=0, select bank0
  1171  0460  1303               	bcf	3,6	;RP1=0, select bank0
  1172  0461  023E               	subwf	_PB6Counter,w
  1173  0462  1803               	btfsc	3,0
  1174  0463  1D06               	btfss	6,2	;volatile
  1175  0464  2B99               	goto	l102
  1176                           
  1177                           ;main.c: 107: totalDistTrav = 0;
  1178  0465  01BC               	clrf	_totalDistTrav
  1179  0466  01BD               	clrf	_totalDistTrav+1
  1180                           
  1181                           ;main.c: 109: for (loop = 0; loop < 4; loop++){
  1182  0467  01A8               	clrf	_loop
  1183  0468  01A9               	clrf	_loop+1
  1184  0469  0829               	movf	_loop+1,w
  1185  046A  3A80               	xorlw	128
  1186  046B  00FF               	movwf	127
  1187  046C  3080               	movlw	128
  1188  046D  027F               	subwf	127,w
  1189  046E  1D03               	skipz
  1190  046F  2C72               	goto	u1925
  1191  0470  3004               	movlw	4
  1192  0471  0228               	subwf	_loop,w
  1193  0472                     u1925:	
  1194  0472  1803               	btfsc	3,0
  1195  0473  2CF8               	goto	l2128
  1196  0474                     l2104:	
  1197                           
  1198                           ;main.c: 110: Drive(0,250,0xFF,0xFF);
  1199  0474  3000               	movlw	0
  1200  0475  1283               	bcf	3,5	;RP0=0, select bank0
  1201  0476  1303               	bcf	3,6	;RP1=0, select bank0
  1202  0477  00C7               	movwf	Drive@speedH
  1203  0478  00C8               	movwf	Drive@speedH+1
  1204  0479  30FA               	movlw	250
  1205  047A  00C9               	movwf	Drive@speedL
  1206  047B  3000               	movlw	0
  1207  047C  00CA               	movwf	Drive@speedL+1
  1208  047D  30FF               	movlw	255
  1209  047E  00CB               	movwf	Drive@radH
  1210  047F  3000               	movlw	0
  1211  0480  00CC               	movwf	Drive@radH+1
  1212  0481  30FF               	movlw	255
  1213  0482  00CD               	movwf	Drive@radL
  1214  0483  3000               	movlw	0
  1215  0484  00CE               	movwf	Drive@radL+1
  1216  0485  120A  158A  272F  120A  118A  	fcall	_Drive
  1217                           
  1218                           ;main.c: 111: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1219  048A  301A               	movlw	26
  1220  048B  1283               	bcf	3,5	;RP0=0, select bank0
  1221  048C  1303               	bcf	3,6	;RP1=0, select bank0
  1222  048D  00E7               	movwf	??_main+2
  1223  048E  305E               	movlw	94
  1224  048F  00E6               	movwf	??_main+1
  1225  0490  3086               	movlw	134
  1226  0491  00E5               	movwf	??_main
  1227  0492                     u1987:	
  1228  0492  0BE5               	decfsz	??_main,f
  1229  0493  2C92               	goto	u1987
  1230  0494  0BE6               	decfsz	??_main+1,f
  1231  0495  2C92               	goto	u1987
  1232  0496  0BE7               	decfsz	??_main+2,f
  1233  0497  2C92               	goto	u1987
  1234  0498  0000               	nop
  1235                           
  1236                           ;main.c: 113: for (loop2 = 0; loop2 < 100; loop2++){
  1237  0499  1283               	bcf	3,5	;RP0=0, select bank0
  1238  049A  1303               	bcf	3,6	;RP1=0, select bank0
  1239  049B  01AA               	clrf	_loop2
  1240  049C  01AB               	clrf	_loop2+1
  1241  049D  082B               	movf	_loop2+1,w
  1242  049E  3A80               	xorlw	128
  1243  049F  00FF               	movwf	127
  1244  04A0  3080               	movlw	128
  1245  04A1  027F               	subwf	127,w
  1246  04A2  1D03               	skipz
  1247  04A3  2CA6               	goto	u1935
  1248  04A4  3064               	movlw	100
  1249  04A5  022A               	subwf	_loop2,w
  1250  04A6                     u1935:	
  1251  04A6  1803               	btfsc	3,0
  1252  04A7  2CE5               	goto	l2124
  1253  04A8                     l2114:	
  1254                           
  1255                           ;main.c: 114: Drive(0,250,0x7F,0xFF);
  1256  04A8  3000               	movlw	0
  1257  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  1258  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  1259  04AB  00C7               	movwf	Drive@speedH
  1260  04AC  00C8               	movwf	Drive@speedH+1
  1261  04AD  30FA               	movlw	250
  1262  04AE  00C9               	movwf	Drive@speedL
  1263  04AF  3000               	movlw	0
  1264  04B0  00CA               	movwf	Drive@speedL+1
  1265  04B1  307F               	movlw	127
  1266  04B2  00CB               	movwf	Drive@radH
  1267  04B3  3000               	movlw	0
  1268  04B4  00CC               	movwf	Drive@radH+1
  1269  04B5  30FF               	movlw	255
  1270  04B6  00CD               	movwf	Drive@radL
  1271  04B7  3000               	movlw	0
  1272  04B8  00CE               	movwf	Drive@radL+1
  1273  04B9  120A  158A  272F  120A  118A  	fcall	_Drive
  1274                           
  1275                           ;main.c: 115: getDistTrav();
  1276  04BE  120A  118A  2634  120A  118A  	fcall	_getDistTrav
  1277                           
  1278                           ;main.c: 116: _delay((unsigned long)((40)*(20000000/4000.0)));
  1279  04C3  3002               	movlw	2
  1280  04C4  1283               	bcf	3,5	;RP0=0, select bank0
  1281  04C5  1303               	bcf	3,6	;RP1=0, select bank0
  1282  04C6  00E7               	movwf	??_main+2
  1283  04C7  3004               	movlw	4
  1284  04C8  00E6               	movwf	??_main+1
  1285  04C9  30BA               	movlw	186
  1286  04CA  00E5               	movwf	??_main
  1287  04CB                     u1997:	
  1288  04CB  0BE5               	decfsz	??_main,f
  1289  04CC  2CCB               	goto	u1997
  1290  04CD  0BE6               	decfsz	??_main+1,f
  1291  04CE  2CCB               	goto	u1997
  1292  04CF  0BE7               	decfsz	??_main+2,f
  1293  04D0  2CCB               	goto	u1997
  1294  04D1  0000               	nop
  1295  04D2  3001               	movlw	1
  1296  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  1297  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  1298  04D5  07AA               	addwf	_loop2,f
  1299  04D6  1803               	skipnc
  1300  04D7  0AAB               	incf	_loop2+1,f
  1301  04D8  3000               	movlw	0
  1302  04D9  07AB               	addwf	_loop2+1,f
  1303  04DA  082B               	movf	_loop2+1,w
  1304  04DB  3A80               	xorlw	128
  1305  04DC  00FF               	movwf	127
  1306  04DD  3080               	movlw	128
  1307  04DE  027F               	subwf	127,w
  1308  04DF  1D03               	skipz
  1309  04E0  2CE3               	goto	u1945
  1310  04E1  3064               	movlw	100
  1311  04E2  022A               	subwf	_loop2,w
  1312  04E3                     u1945:	
  1313  04E3  1C03               	skipc
  1314  04E4  2CA8               	goto	l2114
  1315  04E5                     l2124:	
  1316  04E5  3001               	movlw	1
  1317  04E6  1283               	bcf	3,5	;RP0=0, select bank0
  1318  04E7  1303               	bcf	3,6	;RP1=0, select bank0
  1319  04E8  07A8               	addwf	_loop,f
  1320  04E9  1803               	skipnc
  1321  04EA  0AA9               	incf	_loop+1,f
  1322  04EB  3000               	movlw	0
  1323  04EC  07A9               	addwf	_loop+1,f
  1324  04ED  0829               	movf	_loop+1,w
  1325  04EE  3A80               	xorlw	128
  1326  04EF  00FF               	movwf	127
  1327  04F0  3080               	movlw	128
  1328  04F1  027F               	subwf	127,w
  1329  04F2  1D03               	skipz
  1330  04F3  2CF6               	goto	u1955
  1331  04F4  3004               	movlw	4
  1332  04F5  0228               	subwf	_loop,w
  1333  04F6                     u1955:	
  1334  04F6  1C03               	skipc
  1335  04F7  2C74               	goto	l2104
  1336  04F8                     l2128:	
  1337                           
  1338                           ;main.c: 117: }
  1339                           ;main.c: 118: }
  1340                           ;main.c: 119: Drive(0,0,0x7F,0xFF);
  1341  04F8  3000               	movlw	0
  1342  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  1343  04FA  1303               	bcf	3,6	;RP1=0, select bank0
  1344  04FB  00C7               	movwf	Drive@speedH
  1345  04FC  00C8               	movwf	Drive@speedH+1
  1346  04FD  3000               	movlw	0
  1347  04FE  00C9               	movwf	Drive@speedL
  1348  04FF  00CA               	movwf	Drive@speedL+1
  1349  0500  307F               	movlw	127
  1350  0501  00CB               	movwf	Drive@radH
  1351  0502  3000               	movlw	0
  1352  0503  00CC               	movwf	Drive@radH+1
  1353  0504  30FF               	movlw	255
  1354  0505  00CD               	movwf	Drive@radL
  1355  0506  3000               	movlw	0
  1356  0507  00CE               	movwf	Drive@radL+1
  1357  0508  120A  158A  272F  120A  118A  	fcall	_Drive
  1358  050D  2B99               	goto	l102
  1359  050E                     __end_of_main:	
  1360                           
  1361                           	psect	text1
  1362  0E88                     __ptext1:	
  1363 ;; *************** function _spi_transfer *****************
  1364 ;; Defined at:
  1365 ;;		line 23 in file "SPI.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;  data            1    wreg     unsigned char 
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;  data            1    2[BANK0 ] unsigned char 
  1370 ;;  temp            1    1[BANK0 ] unsigned char 
  1371 ;; Return value:  Size  Location     Type
  1372 ;;                  1    wreg      unsigned char 
  1373 ;; Registers used:
  1374 ;;		wreg, status,2
  1375 ;; Tracked objects:
  1376 ;;		On entry : 0/0
  1377 ;;		On exit  : 0/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1380 ;;      Params:         0       0       0       0       0
  1381 ;;      Locals:         0       2       0       0       0
  1382 ;;      Temps:          0       1       0       0       0
  1383 ;;      Totals:         0       3       0       0       0
  1384 ;;Total ram usage:        3 bytes
  1385 ;; Hardware stack levels used:    1
  1386 ;; Hardware stack levels required when called:    2
  1387 ;; This function calls:
  1388 ;;		Nothing
  1389 ;; This function is called by:
  1390 ;;		_main
  1391 ;; This function uses a non-reentrant model
  1392 ;;
  1393                           
  1394                           
  1395                           ;psect for function _spi_transfer
  1396  0E88                     _spi_transfer:	
  1397                           
  1398                           ;incstack = 0
  1399                           ; Regs used in _spi_transfer: [wreg+status,2]
  1400                           ;spi_transfer@data stored from wreg
  1401  0E88  1283               	bcf	3,5	;RP0=0, select bank0
  1402  0E89  1303               	bcf	3,6	;RP1=0, select bank0
  1403  0E8A  00C8               	movwf	spi_transfer@data
  1404                           
  1405                           ;SPI.c: 24: unsigned char temp = 0;
  1406  0E8B  01C7               	clrf	spi_transfer@temp
  1407                           
  1408                           ;SPI.c: 26: SSPIF = 0;
  1409  0E8C  118C               	bcf	12,3	;volatile
  1410                           
  1411                           ;SPI.c: 27: SSPBUF = data;
  1412  0E8D  0848               	movf	spi_transfer@data,w
  1413  0E8E  0093               	movwf	19	;volatile
  1414  0E8F                     l231:	
  1415                           ;SPI.c: 29: while (SSPIF == 0);
  1416                           
  1417  0E8F  1D8C               	btfss	12,3	;volatile
  1418  0E90  2E8F               	goto	l231
  1419                           
  1420                           ;SPI.c: 30: temp = SSPBUF;
  1421  0E91  0813               	movf	19,w	;volatile
  1422  0E92  00C6               	movwf	??_spi_transfer
  1423  0E93  0846               	movf	??_spi_transfer,w
  1424  0E94  00C7               	movwf	spi_transfer@temp
  1425                           
  1426                           ;SPI.c: 31: SSPIF = 0;
  1427  0E95  118C               	bcf	12,3	;volatile
  1428  0E96  0008               	return
  1429  0E97                     __end_of_spi_transfer:	
  1430                           ;SPI.c: 33: return temp;
  1431                           ;	Return value of _spi_transfer is never used
  1432                           
  1433                           
  1434                           	psect	text2
  1435  0ED4                     __ptext2:	
  1436 ;; *************** function _setupSPI *****************
  1437 ;; Defined at:
  1438 ;;		line 4 in file "SPI.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;		None
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;		None
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  1    wreg      void 
  1445 ;; Registers used:
  1446 ;;		wreg, status,2
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1452 ;;      Params:         0       0       0       0       0
  1453 ;;      Locals:         0       0       0       0       0
  1454 ;;      Temps:          0       0       0       0       0
  1455 ;;      Totals:         0       0       0       0       0
  1456 ;;Total ram usage:        0 bytes
  1457 ;; Hardware stack levels used:    1
  1458 ;; Hardware stack levels required when called:    2
  1459 ;; This function calls:
  1460 ;;		Nothing
  1461 ;; This function is called by:
  1462 ;;		_main
  1463 ;; This function uses a non-reentrant model
  1464 ;;
  1465                           
  1466                           
  1467                           ;psect for function _setupSPI
  1468  0ED4                     _setupSPI:	
  1469                           
  1470                           ;SPI.c: 6: TRISB = 0b00000000;
  1471                           
  1472                           ;incstack = 0
  1473                           ; Regs used in _setupSPI: [wreg+status,2]
  1474  0ED4  1683               	bsf	3,5	;RP0=1, select bank1
  1475  0ED5  1303               	bcf	3,6	;RP1=0, select bank1
  1476  0ED6  0186               	clrf	6	;volatile
  1477                           
  1478                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  1479  0ED7  3040               	movlw	64
  1480  0ED8  0094               	movwf	20	;volatile
  1481                           
  1482                           ;SPI.c: 9: SSPCON = 0b00100000;
  1483  0ED9  3020               	movlw	32
  1484  0EDA  1283               	bcf	3,5	;RP0=0, select bank0
  1485  0EDB  1303               	bcf	3,6	;RP1=0, select bank0
  1486  0EDC  0094               	movwf	20	;volatile
  1487                           
  1488                           ;SPI.c: 10: TRISC = 0b11010000;
  1489  0EDD  30D0               	movlw	208
  1490  0EDE  1683               	bsf	3,5	;RP0=1, select bank1
  1491  0EDF  1303               	bcf	3,6	;RP1=0, select bank1
  1492  0EE0  0087               	movwf	7	;volatile
  1493                           
  1494                           ;SPI.c: 11: PORTC = 0b00000011;
  1495  0EE1  3003               	movlw	3
  1496  0EE2  1283               	bcf	3,5	;RP0=0, select bank0
  1497  0EE3  1303               	bcf	3,6	;RP1=0, select bank0
  1498  0EE4  0087               	movwf	7	;volatile
  1499                           
  1500                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  1501  0EE5  3004               	movlw	4
  1502  0EE6  1683               	bsf	3,5	;RP0=1, select bank1
  1503  0EE7  1303               	bcf	3,6	;RP1=0, select bank1
  1504  0EE8  0081               	movwf	1	;volatile
  1505                           
  1506                           ;SPI.c: 16: TMR0IE = 1;
  1507  0EE9  168B               	bsf	11,5	;volatile
  1508                           
  1509                           ;SPI.c: 19: (GIE = 1);
  1510  0EEA  178B               	bsf	11,7	;volatile
  1511  0EEB  0008               	return
  1512  0EEC                     __end_of_setupSPI:	
  1513                           
  1514                           	psect	text3
  1515  0F54                     __ptext3:	
  1516 ;; *************** function _setupLCD *****************
  1517 ;; Defined at:
  1518 ;;		line 86 in file "LCD.c"
  1519 ;; Parameters:    Size  Location     Type
  1520 ;;		None
  1521 ;; Auto vars:     Size  Location     Type
  1522 ;;		None
  1523 ;; Return value:  Size  Location     Type
  1524 ;;                  1    wreg      void 
  1525 ;; Registers used:
  1526 ;;		wreg, status,2, status,0, pclath, cstack
  1527 ;; Tracked objects:
  1528 ;;		On entry : 0/0
  1529 ;;		On exit  : 0/0
  1530 ;;		Unchanged: 0/0
  1531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1532 ;;      Params:         0       0       0       0       0
  1533 ;;      Locals:         0       0       0       0       0
  1534 ;;      Temps:          0       0       0       0       0
  1535 ;;      Totals:         0       0       0       0       0
  1536 ;;Total ram usage:        0 bytes
  1537 ;; Hardware stack levels used:    1
  1538 ;; Hardware stack levels required when called:    3
  1539 ;; This function calls:
  1540 ;;		_lcdWriteControl
  1541 ;; This function is called by:
  1542 ;;		_main
  1543 ;; This function uses a non-reentrant model
  1544 ;;
  1545                           
  1546                           
  1547                           ;psect for function _setupLCD
  1548  0F54                     _setupLCD:	
  1549                           
  1550                           ;LCD.c: 88: ADCON1 = 0b00000010;
  1551                           
  1552                           ;incstack = 0
  1553                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  1554  0F54  3002               	movlw	2
  1555  0F55  1683               	bsf	3,5	;RP0=1, select bank1
  1556  0F56  1303               	bcf	3,6	;RP1=0, select bank1
  1557  0F57  009F               	movwf	31	;volatile
  1558                           
  1559                           ;LCD.c: 90: PORTD = 0;
  1560  0F58  1283               	bcf	3,5	;RP0=0, select bank0
  1561  0F59  1303               	bcf	3,6	;RP1=0, select bank0
  1562  0F5A  0188               	clrf	8	;volatile
  1563                           
  1564                           ;LCD.c: 91: PORTE = 0;
  1565  0F5B  0189               	clrf	9	;volatile
  1566                           
  1567                           ;LCD.c: 93: TRISD = 0b00000000;
  1568  0F5C  1683               	bsf	3,5	;RP0=1, select bank1
  1569  0F5D  1303               	bcf	3,6	;RP1=0, select bank1
  1570  0F5E  0188               	clrf	8	;volatile
  1571                           
  1572                           ;LCD.c: 94: TRISE = 0b00000000;
  1573  0F5F  0189               	clrf	9	;volatile
  1574                           
  1575                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  1576  0F60  3001               	movlw	1
  1577  0F61  120A  158A  26AA  120A  158A  	fcall	_lcdWriteControl
  1578                           
  1579                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  1580  0F66  3038               	movlw	56
  1581  0F67  120A  158A  26AA  120A  158A  	fcall	_lcdWriteControl
  1582                           
  1583                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  1584  0F6C  300C               	movlw	12
  1585  0F6D  120A  158A  26AA  120A  158A  	fcall	_lcdWriteControl
  1586                           
  1587                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  1588  0F72  3006               	movlw	6
  1589  0F73  120A  158A  26AA  120A  158A  	fcall	_lcdWriteControl
  1590                           
  1591                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  1592  0F78  3002               	movlw	2
  1593  0F79  120A  158A  26AA   	fcall	_lcdWriteControl
  1594  0F7C  0008               	return
  1595  0F7D                     __end_of_setupLCD:	
  1596                           
  1597                           	psect	text4
  1598  0EBE                     __ptext4:	
  1599 ;; *************** function _setupADC *****************
  1600 ;; Defined at:
  1601 ;;		line 8 in file "ADC.c"
  1602 ;; Parameters:    Size  Location     Type
  1603 ;;		None
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;		None
  1606 ;; Return value:  Size  Location     Type
  1607 ;;                  1    wreg      void 
  1608 ;; Registers used:
  1609 ;;		wreg, status,2
  1610 ;; Tracked objects:
  1611 ;;		On entry : 0/0
  1612 ;;		On exit  : 0/0
  1613 ;;		Unchanged: 0/0
  1614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1615 ;;      Params:         0       0       0       0       0
  1616 ;;      Locals:         0       0       0       0       0
  1617 ;;      Temps:          0       1       0       0       0
  1618 ;;      Totals:         0       1       0       0       0
  1619 ;;Total ram usage:        1 bytes
  1620 ;; Hardware stack levels used:    1
  1621 ;; Hardware stack levels required when called:    2
  1622 ;; This function calls:
  1623 ;;		Nothing
  1624 ;; This function is called by:
  1625 ;;		_main
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           
  1630                           ;psect for function _setupADC
  1631  0EBE                     _setupADC:	
  1632                           
  1633                           ;ADC.c: 9: PORTA = 0;
  1634                           
  1635                           ;incstack = 0
  1636                           ; Regs used in _setupADC: [wreg+status,2]
  1637  0EBE  1283               	bcf	3,5	;RP0=0, select bank0
  1638  0EBF  1303               	bcf	3,6	;RP1=0, select bank0
  1639  0EC0  0185               	clrf	5	;volatile
  1640                           
  1641                           ;ADC.c: 10: TRISA = 0b11111111;
  1642  0EC1  30FF               	movlw	255
  1643  0EC2  1683               	bsf	3,5	;RP0=1, select bank1
  1644  0EC3  1303               	bcf	3,6	;RP1=0, select bank1
  1645  0EC4  0085               	movwf	5	;volatile
  1646                           
  1647                           ;ADC.c: 13: ADCON0 = 0b10001001;
  1648  0EC5  3089               	movlw	137
  1649  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  1650  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  1651  0EC8  009F               	movwf	31	;volatile
  1652                           
  1653                           ;ADC.c: 14: ADCON1 = 0b00000010;
  1654  0EC9  3002               	movlw	2
  1655  0ECA  1683               	bsf	3,5	;RP0=1, select bank1
  1656  0ECB  1303               	bcf	3,6	;RP1=0, select bank1
  1657  0ECC  009F               	movwf	31	;volatile
  1658                           
  1659                           ;ADC.c: 16: _delay((unsigned long)((50)*(20000000/4000000.0)));
  1660  0ECD  3053               	movlw	83
  1661  0ECE  1283               	bcf	3,5	;RP0=0, select bank0
  1662  0ECF  1303               	bcf	3,6	;RP1=0, select bank0
  1663  0ED0  00C6               	movwf	??_setupADC
  1664  0ED1                     u2007:	
  1665  0ED1  0BC6               	decfsz	??_setupADC,f
  1666  0ED2  2ED1               	goto	u2007
  1667  0ED3  0008               	return
  1668  0ED4                     __end_of_setupADC:	
  1669                           
  1670                           	psect	text5
  1671  0E79                     __ptext5:	
  1672 ;; *************** function _ser_init *****************
  1673 ;; Defined at:
  1674 ;;		line 5 in file "ser.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;		None
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;		None
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  1    wreg      void 
  1681 ;; Registers used:
  1682 ;;		wreg
  1683 ;; Tracked objects:
  1684 ;;		On entry : 0/0
  1685 ;;		On exit  : 0/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1688 ;;      Params:         0       0       0       0       0
  1689 ;;      Locals:         0       0       0       0       0
  1690 ;;      Temps:          0       0       0       0       0
  1691 ;;      Totals:         0       0       0       0       0
  1692 ;;Total ram usage:        0 bytes
  1693 ;; Hardware stack levels used:    1
  1694 ;; Hardware stack levels required when called:    2
  1695 ;; This function calls:
  1696 ;;		Nothing
  1697 ;; This function is called by:
  1698 ;;		_main
  1699 ;; This function uses a non-reentrant model
  1700 ;;
  1701                           
  1702                           
  1703                           ;psect for function _ser_init
  1704  0E79                     _ser_init:	
  1705                           
  1706                           ;ser.c: 7: TXSTA = 0b00100100;
  1707                           
  1708                           ;incstack = 0
  1709                           ; Regs used in _ser_init: [wreg]
  1710  0E79  3024               	movlw	36
  1711  0E7A  1683               	bsf	3,5	;RP0=1, select bank1
  1712  0E7B  1303               	bcf	3,6	;RP1=0, select bank1
  1713  0E7C  0098               	movwf	24	;volatile
  1714                           
  1715                           ;ser.c: 8: RCSTA = 0b10011000;
  1716  0E7D  3098               	movlw	152
  1717  0E7E  1283               	bcf	3,5	;RP0=0, select bank0
  1718  0E7F  1303               	bcf	3,6	;RP1=0, select bank0
  1719  0E80  0098               	movwf	24	;volatile
  1720                           
  1721                           ;ser.c: 23: SPBRG = 20;
  1722  0E81  3014               	movlw	20
  1723  0E82  1683               	bsf	3,5	;RP0=1, select bank1
  1724  0E83  1303               	bcf	3,6	;RP1=0, select bank1
  1725  0E84  0099               	movwf	25	;volatile
  1726                           
  1727                           ;ser.c: 25: PEIE = 1;
  1728  0E85  170B               	bsf	11,6	;volatile
  1729                           
  1730                           ;ser.c: 26: (GIE = 1);
  1731  0E86  178B               	bsf	11,7	;volatile
  1732  0E87  0008               	return
  1733  0E88                     __end_of_ser_init:	
  1734                           
  1735                           	psect	text6
  1736  06ED                     __ptext6:	
  1737 ;; *************** function _moveCW *****************
  1738 ;; Defined at:
  1739 ;;		line 5 in file "motor.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;		None
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;		None
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1753 ;;      Params:         0       0       0       0       0
  1754 ;;      Locals:         0       0       0       0       0
  1755 ;;      Temps:          0       2       0       0       0
  1756 ;;      Totals:         0       2       0       0       0
  1757 ;;Total ram usage:        2 bytes
  1758 ;; Hardware stack levels used:    1
  1759 ;; Hardware stack levels required when called:    2
  1760 ;; This function calls:
  1761 ;;		Nothing
  1762 ;; This function is called by:
  1763 ;;		_main
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           
  1768                           ;psect for function _moveCW
  1769  06ED                     _moveCW:	
  1770                           
  1771                           ;motor.c: 8: if (stepCount == 0) negativeFlag = 1;
  1772                           
  1773                           ;incstack = 0
  1774                           ; Regs used in _moveCW: [wreg-fsr0h+status,2+status,0]
  1775  06ED  1283               	bcf	3,5	;RP0=0, select bank0
  1776  06EE  1303               	bcf	3,6	;RP1=0, select bank0
  1777  06EF  0843               	movf	_stepCount,w
  1778  06F0  1D03               	btfss	3,2
  1779  06F1  2EF4               	goto	l1870
  1780  06F2  01FC               	clrf	_negativeFlag
  1781  06F3  0AFC               	incf	_negativeFlag,f
  1782  06F4                     l1870:	
  1783                           
  1784                           ;motor.c: 10: stepCount--;
  1785  06F4  30FF               	movlw	255
  1786  06F5  00C6               	movwf	??_moveCW
  1787  06F6  0846               	movf	??_moveCW,w
  1788  06F7  07C3               	addwf	_stepCount,f
  1789                           
  1790                           ;motor.c: 13: switch(currentStep){
  1791  06F8  2F14               	goto	l1906
  1792  06F9                     l1872:	
  1793                           ;motor.c: 15: case 7: PORTC = 0b00011011;
  1794                           
  1795  06F9  301B               	movlw	27
  1796  06FA  2F06               	goto	L1
  1797  06FB                     l1876:	
  1798                           ;motor.c: 19: case 6: PORTC = 0b00010111;
  1799                           
  1800                           ;motor.c: 17: break;
  1801                           
  1802                           ;motor.c: 16: currentStep--;
  1803                           
  1804  06FB  3017               	movlw	23
  1805  06FC  2F06               	goto	L1
  1806  06FD                     l1880:	
  1807                           ;motor.c: 23: case 5: PORTC = 0b00110101;
  1808                           
  1809                           ;motor.c: 21: break;
  1810                           
  1811                           ;motor.c: 20: currentStep--;
  1812                           
  1813  06FD  3035               	movlw	53
  1814  06FE  2F06               	goto	L1
  1815  06FF                     l1884:	
  1816                           ;motor.c: 27: case 4: PORTC = 0b00100111;
  1817                           
  1818                           ;motor.c: 25: break;
  1819                           
  1820                           ;motor.c: 24: currentStep--;
  1821                           
  1822  06FF  3027               	movlw	39
  1823  0700  2F06               	goto	L1
  1824  0701                     l1888:	
  1825                           ;motor.c: 31: case 3: PORTC = 0b00101011;
  1826                           
  1827                           ;motor.c: 29: break;
  1828                           
  1829                           ;motor.c: 28: currentStep--;
  1830                           
  1831  0701  302B               	movlw	43
  1832  0702  2F06               	goto	L1
  1833  0703                     l1892:	
  1834                           ;motor.c: 35: case 2: PORTC = 0b00101110;
  1835                           
  1836                           ;motor.c: 33: break;
  1837                           
  1838                           ;motor.c: 32: currentStep--;
  1839                           
  1840  0703  302E               	movlw	46
  1841  0704  2F06               	goto	L1
  1842  0705                     l1896:	
  1843                           ;motor.c: 39: case 1: PORTC = 0b00111100;
  1844                           
  1845                           ;motor.c: 37: break;
  1846                           
  1847                           ;motor.c: 36: currentStep--;
  1848                           
  1849  0705  303C               	movlw	60
  1850  0706                     L1:	
  1851  0706  0087               	movwf	7	;volatile
  1852                           
  1853                           ;motor.c: 40: currentStep--;
  1854  0707  3001               	movlw	1
  1855  0708  02FB               	subwf	_currentStep,f
  1856                           
  1857                           ;motor.c: 41: break;
  1858  0709  2F2E               	goto	l1908
  1859  070A                     l1900:	
  1860                           ;motor.c: 43: case 0: PORTC = 0b00011110;
  1861                           
  1862  070A  301E               	movlw	30
  1863  070B  0087               	movwf	7	;volatile
  1864                           
  1865                           ;motor.c: 44: currentStep = 7;
  1866  070C  3007               	movlw	7
  1867  070D  00C6               	movwf	??_moveCW
  1868  070E  0846               	movf	??_moveCW,w
  1869  070F  00FB               	movwf	_currentStep
  1870                           
  1871                           ;motor.c: 45: break;
  1872  0710  2F2E               	goto	l1908
  1873  0711                     l1902:	
  1874                           ;motor.c: 47: default: PORTC = 0b00111001;
  1875                           
  1876  0711  3039               	movlw	57
  1877  0712  0087               	movwf	7	;volatile
  1878                           
  1879                           ;motor.c: 49: }
  1880                           
  1881                           ;motor.c: 48: break;
  1882  0713  2F2E               	goto	l1908
  1883  0714                     l1906:	
  1884  0714  087B               	movf	_currentStep,w
  1885                           
  1886                           ; Switch size 1, requested type "space"
  1887                           ; Number of cases is 8, Range of values is 0 to 7
  1888                           ; switch strategies available:
  1889                           ; Name         Instructions Cycles
  1890                           ; simple_byte           25    13 (average)
  1891                           ; direct_byte           32     8 (fixed)
  1892                           ; jumptable            260     6 (fixed)
  1893                           ;	Chosen strategy is simple_byte
  1894  0715  3A00               	xorlw	0	; case 0
  1895  0716  1903               	skipnz
  1896  0717  2F0A               	goto	l1900
  1897  0718  3A01               	xorlw	1	; case 1
  1898  0719  1903               	skipnz
  1899  071A  2F05               	goto	l1896
  1900  071B  3A03               	xorlw	3	; case 2
  1901  071C  1903               	skipnz
  1902  071D  2F03               	goto	l1892
  1903  071E  3A01               	xorlw	1	; case 3
  1904  071F  1903               	skipnz
  1905  0720  2F01               	goto	l1888
  1906  0721  3A07               	xorlw	7	; case 4
  1907  0722  1903               	skipnz
  1908  0723  2EFF               	goto	l1884
  1909  0724  3A01               	xorlw	1	; case 5
  1910  0725  1903               	skipnz
  1911  0726  2EFD               	goto	l1880
  1912  0727  3A03               	xorlw	3	; case 6
  1913  0728  1903               	skipnz
  1914  0729  2EFB               	goto	l1876
  1915  072A  3A01               	xorlw	1	; case 7
  1916  072B  1903               	skipnz
  1917  072C  2EF9               	goto	l1872
  1918  072D  2F11               	goto	l1902
  1919  072E                     l1908:	
  1920                           
  1921                           ;motor.c: 51: _delay((unsigned long)((3)*(20000000/4000.0)));
  1922  072E  3014               	movlw	20
  1923  072F  00C7               	movwf	??_moveCW+1
  1924  0730  3079               	movlw	121
  1925  0731  00C6               	movwf	??_moveCW
  1926  0732                     u2017:	
  1927  0732  0BC6               	decfsz	??_moveCW,f
  1928  0733  2F32               	goto	u2017
  1929  0734  0BC7               	decfsz	??_moveCW+1,f
  1930  0735  2F32               	goto	u2017
  1931  0736  2F37               	nop2
  1932  0737  0008               	return
  1933  0738                     __end_of_moveCW:	
  1934                           
  1935                           	psect	text7
  1936  0738                     __ptext7:	
  1937 ;; *************** function _moveCCW *****************
  1938 ;; Defined at:
  1939 ;;		line 55 in file "motor.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;		None
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;		None
  1944 ;; Return value:  Size  Location     Type
  1945 ;;                  1    wreg      void 
  1946 ;; Registers used:
  1947 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1948 ;; Tracked objects:
  1949 ;;		On entry : 0/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1953 ;;      Params:         0       0       0       0       0
  1954 ;;      Locals:         0       0       0       0       0
  1955 ;;      Temps:          0       2       0       0       0
  1956 ;;      Totals:         0       2       0       0       0
  1957 ;;Total ram usage:        2 bytes
  1958 ;; Hardware stack levels used:    1
  1959 ;; Hardware stack levels required when called:    2
  1960 ;; This function calls:
  1961 ;;		Nothing
  1962 ;; This function is called by:
  1963 ;;		_main
  1964 ;; This function uses a non-reentrant model
  1965 ;;
  1966                           
  1967                           
  1968                           ;psect for function _moveCCW
  1969  0738                     _moveCCW:	
  1970                           
  1971                           ;motor.c: 57: if (stepCount == (-1)) negativeFlag = 0;
  1972                           
  1973                           ;incstack = 0
  1974                           ; Regs used in _moveCCW: [wreg-fsr0h+status,2+status,0]
  1975  0738  1283               	bcf	3,5	;RP0=0, select bank0
  1976  0739  1303               	bcf	3,6	;RP1=0, select bank0
  1977  073A  0A43               	incf	_stepCount,w
  1978  073B  1903               	btfsc	3,2
  1979  073C  01FC               	clrf	_negativeFlag
  1980                           
  1981                           ;motor.c: 59: stepCount++;
  1982  073D  3001               	movlw	1
  1983  073E  00C6               	movwf	??_moveCCW
  1984  073F  0846               	movf	??_moveCCW,w
  1985  0740  07C3               	addwf	_stepCount,f
  1986                           
  1987                           ;motor.c: 62: switch(currentStep){
  1988  0741  2F5C               	goto	l1960
  1989  0742                     l1924:	
  1990                           ;motor.c: 63: case 0: PORTC = 0b00101110;
  1991                           
  1992  0742  302E               	movlw	46
  1993  0743  2F4F               	goto	L2
  1994  0744                     l1928:	
  1995                           ;motor.c: 67: case 1: PORTC = 0b00101011;
  1996                           
  1997                           ;motor.c: 65: break;
  1998                           
  1999                           ;motor.c: 64: currentStep++;
  2000                           
  2001  0744  302B               	movlw	43
  2002  0745  2F4F               	goto	L2
  2003  0746                     l1932:	
  2004                           ;motor.c: 71: case 2: PORTC = 0b00100111;
  2005                           
  2006                           ;motor.c: 69: break;
  2007                           
  2008                           ;motor.c: 68: currentStep++;
  2009                           
  2010  0746  3027               	movlw	39
  2011  0747  2F4F               	goto	L2
  2012  0748                     l1936:	
  2013                           ;motor.c: 75: case 3: PORTC = 0b00110101;
  2014                           
  2015                           ;motor.c: 73: break;
  2016                           
  2017                           ;motor.c: 72: currentStep++;
  2018                           
  2019  0748  3035               	movlw	53
  2020  0749  2F4F               	goto	L2
  2021  074A                     l1940:	
  2022                           ;motor.c: 79: case 4: PORTC = 0b00010111;
  2023                           
  2024                           ;motor.c: 77: break;
  2025                           
  2026                           ;motor.c: 76: currentStep++;
  2027                           
  2028  074A  3017               	movlw	23
  2029  074B  2F4F               	goto	L2
  2030  074C                     l1944:	
  2031                           ;motor.c: 83: case 5: PORTC = 0b00011011;
  2032                           
  2033                           ;motor.c: 81: break;
  2034                           
  2035                           ;motor.c: 80: currentStep++;
  2036                           
  2037  074C  301B               	movlw	27
  2038  074D  2F4F               	goto	L2
  2039  074E                     l1948:	
  2040                           ;motor.c: 87: case 6: PORTC = 0b00011110;
  2041                           
  2042                           ;motor.c: 85: break;
  2043                           
  2044                           ;motor.c: 84: currentStep++;
  2045                           
  2046  074E  301E               	movlw	30
  2047  074F                     L2:	
  2048  074F  0087               	movwf	7	;volatile
  2049                           
  2050                           ;motor.c: 88: currentStep++;
  2051  0750  3001               	movlw	1
  2052  0751  00C6               	movwf	??_moveCCW
  2053  0752  0846               	movf	??_moveCCW,w
  2054  0753  07FB               	addwf	_currentStep,f
  2055                           
  2056                           ;motor.c: 89: break;
  2057  0754  2F76               	goto	l1962
  2058  0755                     l1952:	
  2059                           ;motor.c: 91: case 7: PORTC = 0b00111100;
  2060                           
  2061  0755  303C               	movlw	60
  2062  0756  0087               	movwf	7	;volatile
  2063                           
  2064                           ;motor.c: 92: currentStep = 0;
  2065  0757  01FB               	clrf	_currentStep
  2066                           
  2067                           ;motor.c: 93: break;
  2068  0758  2F76               	goto	l1962
  2069  0759                     l1956:	
  2070                           ;motor.c: 95: default: PORTC = 0b00111001;
  2071                           
  2072  0759  3039               	movlw	57
  2073  075A  0087               	movwf	7	;volatile
  2074                           
  2075                           ;motor.c: 97: }
  2076                           
  2077                           ;motor.c: 96: break;
  2078  075B  2F76               	goto	l1962
  2079  075C                     l1960:	
  2080  075C  087B               	movf	_currentStep,w
  2081                           
  2082                           ; Switch size 1, requested type "space"
  2083                           ; Number of cases is 8, Range of values is 0 to 7
  2084                           ; switch strategies available:
  2085                           ; Name         Instructions Cycles
  2086                           ; simple_byte           25    13 (average)
  2087                           ; direct_byte           32     8 (fixed)
  2088                           ; jumptable            260     6 (fixed)
  2089                           ;	Chosen strategy is simple_byte
  2090  075D  3A00               	xorlw	0	; case 0
  2091  075E  1903               	skipnz
  2092  075F  2F42               	goto	l1924
  2093  0760  3A01               	xorlw	1	; case 1
  2094  0761  1903               	skipnz
  2095  0762  2F44               	goto	l1928
  2096  0763  3A03               	xorlw	3	; case 2
  2097  0764  1903               	skipnz
  2098  0765  2F46               	goto	l1932
  2099  0766  3A01               	xorlw	1	; case 3
  2100  0767  1903               	skipnz
  2101  0768  2F48               	goto	l1936
  2102  0769  3A07               	xorlw	7	; case 4
  2103  076A  1903               	skipnz
  2104  076B  2F4A               	goto	l1940
  2105  076C  3A01               	xorlw	1	; case 5
  2106  076D  1903               	skipnz
  2107  076E  2F4C               	goto	l1944
  2108  076F  3A03               	xorlw	3	; case 6
  2109  0770  1903               	skipnz
  2110  0771  2F4E               	goto	l1948
  2111  0772  3A01               	xorlw	1	; case 7
  2112  0773  1903               	skipnz
  2113  0774  2F55               	goto	l1952
  2114  0775  2F59               	goto	l1956
  2115  0776                     l1962:	
  2116                           
  2117                           ;motor.c: 99: _delay((unsigned long)((3)*(20000000/4000.0)));
  2118  0776  3014               	movlw	20
  2119  0777  00C7               	movwf	??_moveCCW+1
  2120  0778  3079               	movlw	121
  2121  0779  00C6               	movwf	??_moveCCW
  2122  077A                     u2027:	
  2123  077A  0BC6               	decfsz	??_moveCCW,f
  2124  077B  2F7A               	goto	u2027
  2125  077C  0BC7               	decfsz	??_moveCCW+1,f
  2126  077D  2F7A               	goto	u2027
  2127  077E  2F7F               	nop2
  2128  077F  0008               	return
  2129  0780                     __end_of_moveCCW:	
  2130                           
  2131                           	psect	text8
  2132  0634                     __ptext8:	
  2133 ;; *************** function _getDistTrav *****************
  2134 ;; Defined at:
  2135 ;;		line 51 in file "ser.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;		None
  2138 ;; Auto vars:     Size  Location     Type
  2139 ;;		None
  2140 ;; Return value:  Size  Location     Type
  2141 ;;                  1    wreg      void 
  2142 ;; Registers used:
  2143 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2144 ;; Tracked objects:
  2145 ;;		On entry : 0/0
  2146 ;;		On exit  : 0/0
  2147 ;;		Unchanged: 0/0
  2148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2149 ;;      Params:         0       0       0       0       0
  2150 ;;      Locals:         0       0       0       0       0
  2151 ;;      Temps:          0       2       0       0       0
  2152 ;;      Totals:         0       2       0       0       0
  2153 ;;Total ram usage:        2 bytes
  2154 ;; Hardware stack levels used:    1
  2155 ;; Hardware stack levels required when called:    4
  2156 ;; This function calls:
  2157 ;;		___awdiv
  2158 ;;		_lcdSetCursor
  2159 ;;		_lcdWriteToDigitBCD
  2160 ;;		_ser_getch
  2161 ;;		_ser_putch
  2162 ;; This function is called by:
  2163 ;;		_main
  2164 ;; This function uses a non-reentrant model
  2165 ;;
  2166                           
  2167                           
  2168                           ;psect for function _getDistTrav
  2169  0634                     _getDistTrav:	
  2170                           
  2171                           ;ser.c: 52: ser_putch(142);
  2172                           
  2173                           ;incstack = 0
  2174                           ; Regs used in _getDistTrav: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2175  0634  308E               	movlw	142
  2176  0635  120A  158A  266D  120A  118A  	fcall	_ser_putch
  2177                           
  2178                           ;ser.c: 53: ser_putch(19);
  2179  063A  3013               	movlw	19
  2180  063B  120A  158A  266D  120A  118A  	fcall	_ser_putch
  2181                           
  2182                           ;ser.c: 55: ser_getch();
  2183  0640  120A  158A  2664  120A  118A  	fcall	_ser_getch
  2184                           
  2185                           ;ser.c: 56: highByte = rxbyte;
  2186  0645  1283               	bcf	3,5	;RP0=0, select bank0
  2187  0646  1303               	bcf	3,6	;RP1=0, select bank0
  2188  0647  0842               	movf	_rxbyte,w
  2189  0648  00D5               	movwf	??_getDistTrav
  2190  0649  01D6               	clrf	??_getDistTrav+1
  2191  064A  0855               	movf	??_getDistTrav,w
  2192  064B  00C4               	movwf	_highByte
  2193  064C  0856               	movf	??_getDistTrav+1,w
  2194  064D  00C5               	movwf	_highByte+1
  2195                           
  2196                           ;ser.c: 57: ser_getch();
  2197  064E  120A  158A  2664  120A  118A  	fcall	_ser_getch
  2198                           
  2199                           ;ser.c: 58: lowByte = rxbyte;
  2200  0653  1283               	bcf	3,5	;RP0=0, select bank0
  2201  0654  1303               	bcf	3,6	;RP1=0, select bank0
  2202  0655  0842               	movf	_rxbyte,w
  2203  0656  00D5               	movwf	??_getDistTrav
  2204  0657  01D6               	clrf	??_getDistTrav+1
  2205  0658  0855               	movf	??_getDistTrav,w
  2206  0659  00AC               	movwf	_lowByte
  2207  065A  0856               	movf	??_getDistTrav+1,w
  2208  065B  00AD               	movwf	_lowByte+1
  2209                           
  2210                           ;ser.c: 60: distTrav = (256*highByte + lowByte);
  2211  065C  0845               	movf	_highByte+1,w
  2212  065D  00D6               	movwf	??_getDistTrav+1
  2213  065E  0844               	movf	_highByte,w
  2214  065F  00D5               	movwf	??_getDistTrav
  2215  0660  0855               	movf	??_getDistTrav,w
  2216  0661  00D6               	movwf	??_getDistTrav+1
  2217  0662  01D5               	clrf	??_getDistTrav
  2218  0663  082C               	movf	_lowByte,w
  2219  0664  0755               	addwf	??_getDistTrav,w
  2220  0665  00A6               	movwf	_distTrav
  2221  0666  082D               	movf	_lowByte+1,w
  2222  0667  1803               	skipnc
  2223  0668  0A2D               	incf	_lowByte+1,w
  2224  0669  0756               	addwf	??_getDistTrav+1,w
  2225  066A  00A7               	movwf	_distTrav+1
  2226                           
  2227                           ;ser.c: 61: totalDistTrav = ((totalDistTrav + distTrav)/10);
  2228  066B  300A               	movlw	10
  2229  066C  00C6               	movwf	___awdiv@divisor
  2230  066D  3000               	movlw	0
  2231  066E  00C7               	movwf	___awdiv@divisor+1
  2232  066F  0826               	movf	_distTrav,w
  2233  0670  073C               	addwf	_totalDistTrav,w
  2234  0671  00C8               	movwf	___awdiv@dividend
  2235  0672  0827               	movf	_distTrav+1,w
  2236  0673  1803               	skipnc
  2237  0674  0A27               	incf	_distTrav+1,w
  2238  0675  073D               	addwf	_totalDistTrav+1,w
  2239  0676  00C9               	movwf	___awdiv@dividend+1
  2240  0677  120A  118A  2692  120A  118A  	fcall	___awdiv
  2241  067C  1283               	bcf	3,5	;RP0=0, select bank0
  2242  067D  1303               	bcf	3,6	;RP1=0, select bank0
  2243  067E  0847               	movf	?___awdiv+1,w
  2244  067F  00BD               	movwf	_totalDistTrav+1
  2245  0680  0846               	movf	?___awdiv,w
  2246  0681  00BC               	movwf	_totalDistTrav
  2247                           
  2248                           ;ser.c: 63: lcdSetCursor(0b11000000);
  2249  0682  30C0               	movlw	192
  2250  0683  120A  158A  265B  120A  118A  	fcall	_lcdSetCursor
  2251                           
  2252                           ;ser.c: 64: lcdWriteToDigitBCD(totalDistTrav);
  2253  0688  1283               	bcf	3,5	;RP0=0, select bank0
  2254  0689  1303               	bcf	3,6	;RP1=0, select bank0
  2255  068A  083D               	movf	_totalDistTrav+1,w
  2256  068B  00CA               	movwf	lcdWriteToDigitBCD@data+1
  2257  068C  083C               	movf	_totalDistTrav,w
  2258  068D  00C9               	movwf	lcdWriteToDigitBCD@data
  2259  068E  120A  118A  250E   	fcall	_lcdWriteToDigitBCD
  2260  0691  0008               	return
  2261  0692                     __end_of_getDistTrav:	
  2262                           
  2263                           	psect	text9
  2264  0E64                     __ptext9:	
  2265 ;; *************** function _ser_getch *****************
  2266 ;; Defined at:
  2267 ;;		line 34 in file "ser.c"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;		None
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  2272 ;; Return value:  Size  Location     Type
  2273 ;;                  1    wreg      unsigned char 
  2274 ;; Registers used:
  2275 ;;		wreg
  2276 ;; Tracked objects:
  2277 ;;		On entry : 0/0
  2278 ;;		On exit  : 0/0
  2279 ;;		Unchanged: 0/0
  2280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2281 ;;      Params:         0       0       0       0       0
  2282 ;;      Locals:         0       1       0       0       0
  2283 ;;      Temps:          0       1       0       0       0
  2284 ;;      Totals:         0       2       0       0       0
  2285 ;;Total ram usage:        2 bytes
  2286 ;; Hardware stack levels used:    1
  2287 ;; Hardware stack levels required when called:    2
  2288 ;; This function calls:
  2289 ;;		Nothing
  2290 ;; This function is called by:
  2291 ;;		_getDistTrav
  2292 ;; This function uses a non-reentrant model
  2293 ;;
  2294                           
  2295                           
  2296                           ;psect for function _ser_getch
  2297  0E64                     _ser_getch:	
  2298  0E64                     l294:	
  2299                           ;ser.c: 35: while(!RCIF);
  2300                           
  2301                           ;incstack = 0
  2302                           ; Regs used in _ser_getch: [wreg]
  2303                           
  2304  0E64  1283               	bcf	3,5	;RP0=0, select bank0
  2305  0E65  1303               	bcf	3,6	;RP1=0, select bank0
  2306  0E66  1E8C               	btfss	12,5	;volatile
  2307  0E67  2E64               	goto	l294
  2308                           
  2309                           ;ser.c: 36: unsigned char rxbyte = RCREG;
  2310  0E68  081A               	movf	26,w	;volatile
  2311  0E69  00C6               	movwf	??_ser_getch
  2312  0E6A  0846               	movf	??_ser_getch,w
  2313  0E6B  00C7               	movwf	ser_getch@rxbyte
  2314  0E6C  0008               	return
  2315  0E6D                     __end_of_ser_getch:	
  2316                           ;ser.c: 37: return rxbyte;
  2317                           ;	Return value of _ser_getch is never used
  2318                           
  2319                           
  2320                           	psect	text10
  2321  0692                     __ptext10:	
  2322 ;; *************** function ___awdiv *****************
  2323 ;; Defined at:
  2324 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  2325 ;; Parameters:    Size  Location     Type
  2326 ;;  divisor         2    0[BANK0 ] int 
  2327 ;;  dividend        2    2[BANK0 ] int 
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  quotient        2    7[BANK0 ] int 
  2330 ;;  sign            1    6[BANK0 ] unsigned char 
  2331 ;;  counter         1    5[BANK0 ] unsigned char 
  2332 ;; Return value:  Size  Location     Type
  2333 ;;                  2    0[BANK0 ] int 
  2334 ;; Registers used:
  2335 ;;		wreg, status,2, status,0
  2336 ;; Tracked objects:
  2337 ;;		On entry : 0/0
  2338 ;;		On exit  : 0/0
  2339 ;;		Unchanged: 0/0
  2340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2341 ;;      Params:         0       4       0       0       0
  2342 ;;      Locals:         0       4       0       0       0
  2343 ;;      Temps:          0       1       0       0       0
  2344 ;;      Totals:         0       9       0       0       0
  2345 ;;Total ram usage:        9 bytes
  2346 ;; Hardware stack levels used:    1
  2347 ;; Hardware stack levels required when called:    2
  2348 ;; This function calls:
  2349 ;;		Nothing
  2350 ;; This function is called by:
  2351 ;;		_getDistTrav
  2352 ;; This function uses a non-reentrant model
  2353 ;;
  2354                           
  2355                           
  2356                           ;psect for function ___awdiv
  2357  0692                     ___awdiv:	
  2358                           
  2359                           ;incstack = 0
  2360                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2361  0692  1283               	bcf	3,5	;RP0=0, select bank0
  2362  0693  1303               	bcf	3,6	;RP1=0, select bank0
  2363  0694  01CC               	clrf	___awdiv@sign
  2364  0695  1FC7               	btfss	___awdiv@divisor+1,7
  2365  0696  2E9E               	goto	l1766
  2366  0697  09C6               	comf	___awdiv@divisor,f
  2367  0698  09C7               	comf	___awdiv@divisor+1,f
  2368  0699  0AC6               	incf	___awdiv@divisor,f
  2369  069A  1903               	skipnz
  2370  069B  0AC7               	incf	___awdiv@divisor+1,f
  2371  069C  01CC               	clrf	___awdiv@sign
  2372  069D  0ACC               	incf	___awdiv@sign,f
  2373  069E                     l1766:	
  2374  069E  1FC9               	btfss	___awdiv@dividend+1,7
  2375  069F  2EA9               	goto	l1772
  2376  06A0  09C8               	comf	___awdiv@dividend,f
  2377  06A1  09C9               	comf	___awdiv@dividend+1,f
  2378  06A2  0AC8               	incf	___awdiv@dividend,f
  2379  06A3  1903               	skipnz
  2380  06A4  0AC9               	incf	___awdiv@dividend+1,f
  2381  06A5  3001               	movlw	1
  2382  06A6  00CA               	movwf	??___awdiv
  2383  06A7  084A               	movf	??___awdiv,w
  2384  06A8  06CC               	xorwf	___awdiv@sign,f
  2385  06A9                     l1772:	
  2386  06A9  01CD               	clrf	___awdiv@quotient
  2387  06AA  01CE               	clrf	___awdiv@quotient+1
  2388  06AB  0846               	movf	___awdiv@divisor,w
  2389  06AC  0447               	iorwf	___awdiv@divisor+1,w
  2390  06AD  1903               	btfsc	3,2
  2391  06AE  2EE0               	goto	l1794
  2392  06AF  01CB               	clrf	___awdiv@counter
  2393  06B0  0ACB               	incf	___awdiv@counter,f
  2394  06B1                     l1782:	
  2395  06B1  1BC7               	btfsc	___awdiv@divisor+1,7
  2396  06B2  2EBF               	goto	l1784
  2397  06B3  3001               	movlw	1
  2398  06B4                     u1595:	
  2399  06B4  1003               	clrc
  2400  06B5  0DC6               	rlf	___awdiv@divisor,f
  2401  06B6  0DC7               	rlf	___awdiv@divisor+1,f
  2402  06B7  3EFF               	addlw	-1
  2403  06B8  1D03               	skipz
  2404  06B9  2EB4               	goto	u1595
  2405  06BA  3001               	movlw	1
  2406  06BB  00CA               	movwf	??___awdiv
  2407  06BC  084A               	movf	??___awdiv,w
  2408  06BD  07CB               	addwf	___awdiv@counter,f
  2409  06BE  2EB1               	goto	l1782
  2410  06BF                     l1784:	
  2411  06BF  3001               	movlw	1
  2412  06C0                     u1615:	
  2413  06C0  1003               	clrc
  2414  06C1  0DCD               	rlf	___awdiv@quotient,f
  2415  06C2  0DCE               	rlf	___awdiv@quotient+1,f
  2416  06C3  3EFF               	addlw	-1
  2417  06C4  1D03               	skipz
  2418  06C5  2EC0               	goto	u1615
  2419  06C6  0847               	movf	___awdiv@divisor+1,w
  2420  06C7  0249               	subwf	___awdiv@dividend+1,w
  2421  06C8  1D03               	skipz
  2422  06C9  2ECC               	goto	u1625
  2423  06CA  0846               	movf	___awdiv@divisor,w
  2424  06CB  0248               	subwf	___awdiv@dividend,w
  2425  06CC                     u1625:	
  2426  06CC  1C03               	skipc
  2427  06CD  2ED5               	goto	l1790
  2428  06CE  0846               	movf	___awdiv@divisor,w
  2429  06CF  02C8               	subwf	___awdiv@dividend,f
  2430  06D0  0847               	movf	___awdiv@divisor+1,w
  2431  06D1  1C03               	skipc
  2432  06D2  03C9               	decf	___awdiv@dividend+1,f
  2433  06D3  02C9               	subwf	___awdiv@dividend+1,f
  2434  06D4  144D               	bsf	___awdiv@quotient,0
  2435  06D5                     l1790:	
  2436  06D5  3001               	movlw	1
  2437  06D6                     u1635:	
  2438  06D6  1003               	clrc
  2439  06D7  0CC7               	rrf	___awdiv@divisor+1,f
  2440  06D8  0CC6               	rrf	___awdiv@divisor,f
  2441  06D9  3EFF               	addlw	-1
  2442  06DA  1D03               	skipz
  2443  06DB  2ED6               	goto	u1635
  2444  06DC  3001               	movlw	1
  2445  06DD  02CB               	subwf	___awdiv@counter,f
  2446  06DE  1D03               	btfss	3,2
  2447  06DF  2EBF               	goto	l1784
  2448  06E0                     l1794:	
  2449  06E0  084C               	movf	___awdiv@sign,w
  2450  06E1  1903               	btfsc	3,2
  2451  06E2  2EE8               	goto	l1798
  2452  06E3  09CD               	comf	___awdiv@quotient,f
  2453  06E4  09CE               	comf	___awdiv@quotient+1,f
  2454  06E5  0ACD               	incf	___awdiv@quotient,f
  2455  06E6  1903               	skipnz
  2456  06E7  0ACE               	incf	___awdiv@quotient+1,f
  2457  06E8                     l1798:	
  2458  06E8  084E               	movf	___awdiv@quotient+1,w
  2459  06E9  00C7               	movwf	?___awdiv+1
  2460  06EA  084D               	movf	___awdiv@quotient,w
  2461  06EB  00C6               	movwf	?___awdiv
  2462  06EC  0008               	return
  2463  06ED                     __end_of___awdiv:	
  2464                           
  2465                           	psect	text11
  2466  0F2F                     __ptext11:	
  2467 ;; *************** function _Drive *****************
  2468 ;; Defined at:
  2469 ;;		line 43 in file "ser.c"
  2470 ;; Parameters:    Size  Location     Type
  2471 ;;  speedH          2    1[BANK0 ] int 
  2472 ;;  speedL          2    3[BANK0 ] int 
  2473 ;;  radH            2    5[BANK0 ] int 
  2474 ;;  radL            2    7[BANK0 ] int 
  2475 ;; Auto vars:     Size  Location     Type
  2476 ;;		None
  2477 ;; Return value:  Size  Location     Type
  2478 ;;                  1    wreg      void 
  2479 ;; Registers used:
  2480 ;;		wreg, status,2, status,0, pclath, cstack
  2481 ;; Tracked objects:
  2482 ;;		On entry : 0/0
  2483 ;;		On exit  : 0/0
  2484 ;;		Unchanged: 0/0
  2485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2486 ;;      Params:         0       8       0       0       0
  2487 ;;      Locals:         0       0       0       0       0
  2488 ;;      Temps:          0       0       0       0       0
  2489 ;;      Totals:         0       8       0       0       0
  2490 ;;Total ram usage:        8 bytes
  2491 ;; Hardware stack levels used:    1
  2492 ;; Hardware stack levels required when called:    3
  2493 ;; This function calls:
  2494 ;;		_ser_putch
  2495 ;; This function is called by:
  2496 ;;		_main
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500                           
  2501                           ;psect for function _Drive
  2502  0F2F                     _Drive:	
  2503                           
  2504                           ;ser.c: 44: ser_putch(137);
  2505                           
  2506                           ;incstack = 0
  2507                           ; Regs used in _Drive: [wreg+status,2+status,0+pclath+cstack]
  2508  0F2F  3089               	movlw	137
  2509  0F30  120A  158A  266D  120A  158A  	fcall	_ser_putch
  2510                           
  2511                           ;ser.c: 45: ser_putch(speedH);
  2512  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  2513  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  2514  0F37  0847               	movf	Drive@speedH,w
  2515  0F38  120A  158A  266D  120A  158A  	fcall	_ser_putch
  2516                           
  2517                           ;ser.c: 46: ser_putch(speedL);
  2518  0F3D  1283               	bcf	3,5	;RP0=0, select bank0
  2519  0F3E  1303               	bcf	3,6	;RP1=0, select bank0
  2520  0F3F  0849               	movf	Drive@speedL,w
  2521  0F40  120A  158A  266D  120A  158A  	fcall	_ser_putch
  2522                           
  2523                           ;ser.c: 47: ser_putch(radH);
  2524  0F45  1283               	bcf	3,5	;RP0=0, select bank0
  2525  0F46  1303               	bcf	3,6	;RP1=0, select bank0
  2526  0F47  084B               	movf	Drive@radH,w
  2527  0F48  120A  158A  266D  120A  158A  	fcall	_ser_putch
  2528                           
  2529                           ;ser.c: 48: ser_putch(radL);
  2530  0F4D  1283               	bcf	3,5	;RP0=0, select bank0
  2531  0F4E  1303               	bcf	3,6	;RP1=0, select bank0
  2532  0F4F  084D               	movf	Drive@radL,w
  2533  0F50  120A  158A  266D   	fcall	_ser_putch
  2534  0F53  0008               	return
  2535  0F54                     __end_of_Drive:	
  2536                           
  2537                           	psect	text12
  2538  0E6D                     __ptext12:	
  2539 ;; *************** function _ser_putch *****************
  2540 ;; Defined at:
  2541 ;;		line 29 in file "ser.c"
  2542 ;; Parameters:    Size  Location     Type
  2543 ;;  c               1    wreg     unsigned char 
  2544 ;; Auto vars:     Size  Location     Type
  2545 ;;  c               1    0[BANK0 ] unsigned char 
  2546 ;; Return value:  Size  Location     Type
  2547 ;;                  1    wreg      void 
  2548 ;; Registers used:
  2549 ;;		wreg
  2550 ;; Tracked objects:
  2551 ;;		On entry : 0/0
  2552 ;;		On exit  : 0/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2555 ;;      Params:         0       0       0       0       0
  2556 ;;      Locals:         0       1       0       0       0
  2557 ;;      Temps:          0       0       0       0       0
  2558 ;;      Totals:         0       1       0       0       0
  2559 ;;Total ram usage:        1 bytes
  2560 ;; Hardware stack levels used:    1
  2561 ;; Hardware stack levels required when called:    2
  2562 ;; This function calls:
  2563 ;;		Nothing
  2564 ;; This function is called by:
  2565 ;;		_main
  2566 ;;		_Drive
  2567 ;;		_getDistTrav
  2568 ;; This function uses a non-reentrant model
  2569 ;;
  2570                           
  2571                           
  2572                           ;psect for function _ser_putch
  2573  0E6D                     _ser_putch:	
  2574                           
  2575                           ;incstack = 0
  2576                           ; Regs used in _ser_putch: [wreg]
  2577                           ;ser_putch@c stored from wreg
  2578  0E6D  1283               	bcf	3,5	;RP0=0, select bank0
  2579  0E6E  1303               	bcf	3,6	;RP1=0, select bank0
  2580  0E6F  00C6               	movwf	ser_putch@c
  2581  0E70                     l288:	
  2582                           ;ser.c: 30: while(!TRMT);
  2583                           
  2584  0E70  1683               	bsf	3,5	;RP0=1, select bank1
  2585  0E71  1303               	bcf	3,6	;RP1=0, select bank1
  2586  0E72  1C98               	btfss	24,1	;volatile
  2587  0E73  2E70               	goto	l288
  2588                           
  2589                           ;ser.c: 31: TXREG=c;
  2590  0E74  1283               	bcf	3,5	;RP0=0, select bank0
  2591  0E75  1303               	bcf	3,6	;RP1=0, select bank0
  2592  0E76  0846               	movf	ser_putch@c,w
  2593  0E77  0099               	movwf	25	;volatile
  2594  0E78  0008               	return
  2595  0E79                     __end_of_ser_putch:	
  2596                           
  2597                           	psect	text13
  2598  0EEC                     __ptext13:	
  2599 ;; *************** function _ADCMain *****************
  2600 ;; Defined at:
  2601 ;;		line 19 in file "ADC.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;		None
  2604 ;; Auto vars:     Size  Location     Type
  2605 ;;		None
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  1    wreg      void 
  2608 ;; Registers used:
  2609 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2615 ;;      Params:         0       0       0       0       0
  2616 ;;      Locals:         0       0       0       0       0
  2617 ;;      Temps:          0       0       0       0       0
  2618 ;;      Totals:         0       0       0       0       0
  2619 ;;Total ram usage:        0 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; Hardware stack levels required when called:    4
  2622 ;; This function calls:
  2623 ;;		_adcConvertMM
  2624 ;;		_getADC
  2625 ;;		_lcdSetCursor
  2626 ;;		_lcdWriteToDigitBCD
  2627 ;; This function is called by:
  2628 ;;		_main
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           
  2633                           ;psect for function _ADCMain
  2634  0EEC                     _ADCMain:	
  2635                           
  2636                           ;ADC.c: 21: getADC();
  2637                           
  2638                           ;incstack = 0
  2639                           ; Regs used in _ADCMain: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2640  0EEC  120A  158A  27BB  120A  158A  	fcall	_getADC
  2641                           
  2642                           ;ADC.c: 22: lcdSetCursor(0b10000000);
  2643  0EF1  3080               	movlw	128
  2644  0EF2  120A  158A  265B  120A  158A  	fcall	_lcdSetCursor
  2645                           
  2646                           ;ADC.c: 23: lcdWriteToDigitBCD(adcRAW);
  2647  0EF7  1283               	bcf	3,5	;RP0=0, select bank0
  2648  0EF8  1303               	bcf	3,6	;RP1=0, select bank0
  2649  0EF9  0823               	movf	_adcRAW+1,w	;volatile
  2650  0EFA  00CA               	movwf	lcdWriteToDigitBCD@data+1
  2651  0EFB  0822               	movf	_adcRAW,w	;volatile
  2652  0EFC  00C9               	movwf	lcdWriteToDigitBCD@data
  2653  0EFD  120A  118A  250E  120A  158A  	fcall	_lcdWriteToDigitBCD
  2654                           
  2655                           ;ADC.c: 25: adcConvertMM(adcRAW);
  2656  0F02  1283               	bcf	3,5	;RP0=0, select bank0
  2657  0F03  1303               	bcf	3,6	;RP1=0, select bank0
  2658  0F04  0823               	movf	_adcRAW+1,w	;volatile
  2659  0F05  00DC               	movwf	adcConvertMM@adcRAW+1
  2660  0F06  0822               	movf	_adcRAW,w	;volatile
  2661  0F07  00DB               	movwf	adcConvertMM@adcRAW
  2662  0F08  120A  118A  202F   	fcall	_adcConvertMM
  2663  0F0B  0008               	return
  2664  0F0C                     __end_of_ADCMain:	
  2665                           
  2666                           	psect	text14
  2667  050E                     __ptext14:	
  2668 ;; *************** function _lcdWriteToDigitBCD *****************
  2669 ;; Defined at:
  2670 ;;		line 42 in file "LCD.c"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;  data            2    3[BANK0 ] unsigned int 
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  2675 ;;  TenThouDigit    2   11[BANK0 ] unsigned int 
  2676 ;;  ThouDigit       2    9[BANK0 ] unsigned int 
  2677 ;;  HunsDigit       2    7[BANK0 ] unsigned int 
  2678 ;;  TensDigit       2    5[BANK0 ] unsigned int 
  2679 ;; Return value:  Size  Location     Type
  2680 ;;                  1    wreg      void 
  2681 ;; Registers used:
  2682 ;;		wreg, status,2, status,0, pclath, cstack
  2683 ;; Tracked objects:
  2684 ;;		On entry : 0/0
  2685 ;;		On exit  : 0/0
  2686 ;;		Unchanged: 0/0
  2687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2688 ;;      Params:         0       2       0       0       0
  2689 ;;      Locals:         0      10       0       0       0
  2690 ;;      Temps:          0       0       0       0       0
  2691 ;;      Totals:         0      12       0       0       0
  2692 ;;Total ram usage:       12 bytes
  2693 ;; Hardware stack levels used:    1
  2694 ;; Hardware stack levels required when called:    3
  2695 ;; This function calls:
  2696 ;;		_lcdWriteData
  2697 ;; This function is called by:
  2698 ;;		_getDistTrav
  2699 ;;		_ADCMain
  2700 ;; This function uses a non-reentrant model
  2701 ;;
  2702                           
  2703                           
  2704                           ;psect for function _lcdWriteToDigitBCD
  2705  050E                     _lcdWriteToDigitBCD:	
  2706                           
  2707                           ;LCD.c: 43: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  2708                           ;LCD.c: 46: OnesDigit = data;
  2709                           
  2710                           ;incstack = 0
  2711                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  2712  050E  1283               	bcf	3,5	;RP0=0, select bank0
  2713  050F  1303               	bcf	3,6	;RP1=0, select bank0
  2714  0510  084A               	movf	lcdWriteToDigitBCD@data+1,w
  2715  0511  00D4               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2716  0512  0849               	movf	lcdWriteToDigitBCD@data,w
  2717  0513  00D3               	movwf	lcdWriteToDigitBCD@OnesDigit
  2718                           
  2719                           ;LCD.c: 47: TensDigit = 0;
  2720  0514  01CB               	clrf	lcdWriteToDigitBCD@TensDigit
  2721  0515  01CC               	clrf	lcdWriteToDigitBCD@TensDigit+1
  2722                           
  2723                           ;LCD.c: 48: HunsDigit = 0;
  2724  0516  01CD               	clrf	lcdWriteToDigitBCD@HunsDigit
  2725  0517  01CE               	clrf	lcdWriteToDigitBCD@HunsDigit+1
  2726                           
  2727                           ;LCD.c: 49: ThouDigit = 0;
  2728  0518  01CF               	clrf	lcdWriteToDigitBCD@ThouDigit
  2729  0519  01D0               	clrf	lcdWriteToDigitBCD@ThouDigit+1
  2730                           
  2731                           ;LCD.c: 50: TenThouDigit = 0;
  2732  051A  01D1               	clrf	lcdWriteToDigitBCD@TenThouDigit
  2733  051B  01D2               	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  2734  051C                     l1636:	
  2735                           ;LCD.c: 53: while (OnesDigit >= 10000){
  2736                           
  2737  051C  3027               	movlw	39
  2738  051D  0254               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2739  051E  3010               	movlw	16
  2740  051F  1903               	skipnz
  2741  0520  0253               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2742  0521  1C03               	btfss	3,0
  2743  0522  2D40               	goto	l1642
  2744                           
  2745                           ;LCD.c: 54: OnesDigit = OnesDigit - 10000;
  2746  0523  0853               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2747  0524  3EF0               	addlw	240
  2748  0525  00D3               	movwf	lcdWriteToDigitBCD@OnesDigit
  2749  0526  0854               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2750  0527  1803               	skipnc
  2751  0528  3E01               	addlw	1
  2752  0529  3ED8               	addlw	216
  2753  052A  00D4               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2754                           
  2755                           ;LCD.c: 55: TenThouDigit++;
  2756  052B  3001               	movlw	1
  2757  052C  07D1               	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  2758  052D  1803               	skipnc
  2759  052E  0AD2               	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2760  052F  3000               	movlw	0
  2761  0530  07D2               	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2762  0531  2D1C               	goto	l1636
  2763  0532                     l1638:	
  2764                           ;LCD.c: 56: }
  2765                           ;LCD.c: 58: while (OnesDigit >= 1000){
  2766                           
  2767                           
  2768                           ;LCD.c: 59: OnesDigit = OnesDigit - 1000;
  2769  0532  0853               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2770  0533  3E18               	addlw	24
  2771  0534  00D3               	movwf	lcdWriteToDigitBCD@OnesDigit
  2772  0535  0854               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2773  0536  1803               	skipnc
  2774  0537  3E01               	addlw	1
  2775  0538  3EFC               	addlw	252
  2776  0539  00D4               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2777                           
  2778                           ;LCD.c: 60: ThouDigit++;
  2779  053A  3001               	movlw	1
  2780  053B  07CF               	addwf	lcdWriteToDigitBCD@ThouDigit,f
  2781  053C  1803               	skipnc
  2782  053D  0AD0               	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  2783  053E  3000               	movlw	0
  2784  053F  07D0               	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  2785  0540                     l1642:	
  2786  0540  3003               	movlw	3
  2787  0541  0254               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2788  0542  30E8               	movlw	232
  2789  0543  1903               	skipnz
  2790  0544  0253               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2791  0545  1C03               	btfss	3,0
  2792  0546  2D56               	goto	l1648
  2793  0547  2D32               	goto	l1638
  2794  0548                     l1644:	
  2795                           ;LCD.c: 61: }
  2796                           ;LCD.c: 63: while (OnesDigit >= 100){
  2797                           
  2798                           
  2799                           ;LCD.c: 64: OnesDigit = OnesDigit - 100;
  2800  0548  0853               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2801  0549  3E9C               	addlw	156
  2802  054A  00D3               	movwf	lcdWriteToDigitBCD@OnesDigit
  2803  054B  0854               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2804  054C  1803               	skipnc
  2805  054D  3E01               	addlw	1
  2806  054E  3EFF               	addlw	255
  2807  054F  00D4               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2808                           
  2809                           ;LCD.c: 65: HunsDigit++;
  2810  0550  3001               	movlw	1
  2811  0551  07CD               	addwf	lcdWriteToDigitBCD@HunsDigit,f
  2812  0552  1803               	skipnc
  2813  0553  0ACE               	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  2814  0554  3000               	movlw	0
  2815  0555  07CE               	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  2816  0556                     l1648:	
  2817  0556  3000               	movlw	0
  2818  0557  0254               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2819  0558  3064               	movlw	100
  2820  0559  1903               	skipnz
  2821  055A  0253               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2822  055B  1C03               	btfss	3,0
  2823  055C  2D6C               	goto	l1654
  2824  055D  2D48               	goto	l1644
  2825  055E                     l1650:	
  2826                           ;LCD.c: 66: }
  2827                           ;LCD.c: 68: while (OnesDigit >= 10){
  2828                           
  2829                           
  2830                           ;LCD.c: 69: OnesDigit = OnesDigit - 10;
  2831  055E  0853               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2832  055F  3EF6               	addlw	246
  2833  0560  00D3               	movwf	lcdWriteToDigitBCD@OnesDigit
  2834  0561  0854               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2835  0562  1803               	skipnc
  2836  0563  3E01               	addlw	1
  2837  0564  3EFF               	addlw	255
  2838  0565  00D4               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2839                           
  2840                           ;LCD.c: 70: TensDigit++;
  2841  0566  3001               	movlw	1
  2842  0567  07CB               	addwf	lcdWriteToDigitBCD@TensDigit,f
  2843  0568  1803               	skipnc
  2844  0569  0ACC               	incf	lcdWriteToDigitBCD@TensDigit+1,f
  2845  056A  3000               	movlw	0
  2846  056B  07CC               	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  2847  056C                     l1654:	
  2848  056C  3000               	movlw	0
  2849  056D  0254               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2850  056E  300A               	movlw	10
  2851  056F  1903               	skipnz
  2852  0570  0253               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2853  0571  1803               	skipnc
  2854  0572  2D5E               	goto	l1650
  2855                           
  2856                           ;LCD.c: 71: }
  2857                           ;LCD.c: 73: if (TenThouDigit > 0)
  2858  0573  0851               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  2859  0574  0452               	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  2860  0575  1903               	btfsc	3,2
  2861  0576  2D7E               	goto	l1660
  2862                           
  2863                           ;LCD.c: 74: lcdWriteData((unsigned int)TenThouDigit + 48);
  2864  0577  0851               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  2865  0578  3E30               	addlw	48
  2866  0579  120A  158A  2697  120A  118A  	fcall	_lcdWriteData
  2867  057E                     l1660:	
  2868                           
  2869                           ;LCD.c: 76: if (ThouDigit > 0)
  2870  057E  1283               	bcf	3,5	;RP0=0, select bank0
  2871  057F  1303               	bcf	3,6	;RP1=0, select bank0
  2872  0580  084F               	movf	lcdWriteToDigitBCD@ThouDigit,w
  2873  0581  0450               	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  2874  0582  1903               	btfsc	3,2
  2875  0583  2D8B               	goto	l187
  2876                           
  2877                           ;LCD.c: 77: lcdWriteData((unsigned int)ThouDigit + 48);
  2878  0584  084F               	movf	lcdWriteToDigitBCD@ThouDigit,w
  2879  0585  3E30               	addlw	48
  2880  0586  120A  158A  2697  120A  118A  	fcall	_lcdWriteData
  2881  058B                     l187:	
  2882                           
  2883                           ;LCD.c: 79: lcdWriteData((unsigned int)HunsDigit + 48);
  2884  058B  1283               	bcf	3,5	;RP0=0, select bank0
  2885  058C  1303               	bcf	3,6	;RP1=0, select bank0
  2886  058D  084D               	movf	lcdWriteToDigitBCD@HunsDigit,w
  2887  058E  3E30               	addlw	48
  2888  058F  120A  158A  2697  120A  118A  	fcall	_lcdWriteData
  2889                           
  2890                           ;LCD.c: 80: lcdWriteData((unsigned int)TensDigit + 48);
  2891  0594  1283               	bcf	3,5	;RP0=0, select bank0
  2892  0595  1303               	bcf	3,6	;RP1=0, select bank0
  2893  0596  084B               	movf	lcdWriteToDigitBCD@TensDigit,w
  2894  0597  3E30               	addlw	48
  2895  0598  120A  158A  2697  120A  118A  	fcall	_lcdWriteData
  2896                           
  2897                           ;LCD.c: 81: lcdWriteData((unsigned int)OnesDigit + 48);
  2898  059D  1283               	bcf	3,5	;RP0=0, select bank0
  2899  059E  1303               	bcf	3,6	;RP1=0, select bank0
  2900  059F  0853               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2901  05A0  3E30               	addlw	48
  2902  05A1  120A  158A  2697   	fcall	_lcdWriteData
  2903  05A4  0008               	return
  2904  05A5                     __end_of_lcdWriteToDigitBCD:	
  2905                           
  2906                           	psect	text15
  2907  0E97                     __ptext15:	
  2908 ;; *************** function _lcdWriteData *****************
  2909 ;; Defined at:
  2910 ;;		line 20 in file "LCD.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;  databyte        1    wreg     unsigned char 
  2913 ;; Auto vars:     Size  Location     Type
  2914 ;;  databyte        1    2[BANK0 ] unsigned char 
  2915 ;; Return value:  Size  Location     Type
  2916 ;;                  1    wreg      void 
  2917 ;; Registers used:
  2918 ;;		wreg
  2919 ;; Tracked objects:
  2920 ;;		On entry : 0/0
  2921 ;;		On exit  : 0/0
  2922 ;;		Unchanged: 0/0
  2923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2924 ;;      Params:         0       0       0       0       0
  2925 ;;      Locals:         0       1       0       0       0
  2926 ;;      Temps:          0       2       0       0       0
  2927 ;;      Totals:         0       3       0       0       0
  2928 ;;Total ram usage:        3 bytes
  2929 ;; Hardware stack levels used:    1
  2930 ;; Hardware stack levels required when called:    2
  2931 ;; This function calls:
  2932 ;;		Nothing
  2933 ;; This function is called by:
  2934 ;;		_lcdWriteToDigitBCD
  2935 ;;		_lcdWriteString
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           
  2940                           ;psect for function _lcdWriteData
  2941  0E97                     _lcdWriteData:	
  2942                           
  2943                           ;incstack = 0
  2944                           ; Regs used in _lcdWriteData: [wreg]
  2945                           ;lcdWriteData@databyte stored from wreg
  2946  0E97  1283               	bcf	3,5	;RP0=0, select bank0
  2947  0E98  1303               	bcf	3,6	;RP1=0, select bank0
  2948  0E99  00C8               	movwf	lcdWriteData@databyte
  2949                           
  2950                           ;LCD.c: 21: RE2 = 0;
  2951  0E9A  1109               	bcf	9,2	;volatile
  2952                           
  2953                           ;LCD.c: 22: RE1 = 0;
  2954  0E9B  1089               	bcf	9,1	;volatile
  2955                           
  2956                           ;LCD.c: 23: RE0 = 1;
  2957  0E9C  1409               	bsf	9,0	;volatile
  2958                           
  2959                           ;LCD.c: 24: PORTD = databyte;
  2960  0E9D  0848               	movf	lcdWriteData@databyte,w
  2961  0E9E  0088               	movwf	8	;volatile
  2962                           
  2963                           ;LCD.c: 25: RE2 = 1;
  2964  0E9F  1509               	bsf	9,2	;volatile
  2965                           
  2966                           ;LCD.c: 26: RE2 = 0;
  2967  0EA0  1109               	bcf	9,2	;volatile
  2968                           
  2969                           ;LCD.c: 27: _delay((unsigned long)((1)*(20000000/4000.0)));
  2970  0EA1  3007               	movlw	7
  2971  0EA2  00C7               	movwf	??_lcdWriteData+1
  2972  0EA3  307D               	movlw	125
  2973  0EA4  00C6               	movwf	??_lcdWriteData
  2974  0EA5                     u2037:	
  2975  0EA5  0BC6               	decfsz	??_lcdWriteData,f
  2976  0EA6  2EA5               	goto	u2037
  2977  0EA7  0BC7               	decfsz	??_lcdWriteData+1,f
  2978  0EA8  2EA5               	goto	u2037
  2979  0EA9  0008               	return
  2980  0EAA                     __end_of_lcdWriteData:	
  2981                           
  2982                           	psect	text16
  2983  0E5B                     __ptext16:	
  2984 ;; *************** function _lcdSetCursor *****************
  2985 ;; Defined at:
  2986 ;;		line 31 in file "LCD.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;  address         1    wreg     unsigned char 
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;  address         1    3[BANK0 ] unsigned char 
  2991 ;; Return value:  Size  Location     Type
  2992 ;;                  1    wreg      void 
  2993 ;; Registers used:
  2994 ;;		wreg, status,2, status,0, pclath, cstack
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3000 ;;      Params:         0       0       0       0       0
  3001 ;;      Locals:         0       1       0       0       0
  3002 ;;      Temps:          0       0       0       0       0
  3003 ;;      Totals:         0       1       0       0       0
  3004 ;;Total ram usage:        1 bytes
  3005 ;; Hardware stack levels used:    1
  3006 ;; Hardware stack levels required when called:    3
  3007 ;; This function calls:
  3008 ;;		_lcdWriteControl
  3009 ;; This function is called by:
  3010 ;;		_getDistTrav
  3011 ;;		_ADCMain
  3012 ;; This function uses a non-reentrant model
  3013 ;;
  3014                           
  3015                           
  3016                           ;psect for function _lcdSetCursor
  3017  0E5B                     _lcdSetCursor:	
  3018                           
  3019                           ;incstack = 0
  3020                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  3021                           ;lcdSetCursor@address stored from wreg
  3022  0E5B  1283               	bcf	3,5	;RP0=0, select bank0
  3023  0E5C  1303               	bcf	3,6	;RP1=0, select bank0
  3024  0E5D  00C9               	movwf	lcdSetCursor@address
  3025                           
  3026                           ;LCD.c: 32: address |= 0b10000000;
  3027  0E5E  17C9               	bsf	lcdSetCursor@address,7
  3028                           
  3029                           ;LCD.c: 33: lcdWriteControl(address);
  3030  0E5F  0849               	movf	lcdSetCursor@address,w
  3031  0E60  120A  158A  26AA   	fcall	_lcdWriteControl
  3032  0E63  0008               	return
  3033  0E64                     __end_of_lcdSetCursor:	
  3034                           
  3035                           	psect	text17
  3036  0EAA                     __ptext17:	
  3037 ;; *************** function _lcdWriteControl *****************
  3038 ;; Defined at:
  3039 ;;		line 9 in file "LCD.c"
  3040 ;; Parameters:    Size  Location     Type
  3041 ;;  databyte        1    wreg     unsigned char 
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;  databyte        1    2[BANK0 ] unsigned char 
  3044 ;; Return value:  Size  Location     Type
  3045 ;;                  1    wreg      void 
  3046 ;; Registers used:
  3047 ;;		wreg
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3053 ;;      Params:         0       0       0       0       0
  3054 ;;      Locals:         0       1       0       0       0
  3055 ;;      Temps:          0       2       0       0       0
  3056 ;;      Totals:         0       3       0       0       0
  3057 ;;Total ram usage:        3 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; Hardware stack levels required when called:    2
  3060 ;; This function calls:
  3061 ;;		Nothing
  3062 ;; This function is called by:
  3063 ;;		_lcdSetCursor
  3064 ;;		_setupLCD
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           
  3069                           ;psect for function _lcdWriteControl
  3070  0EAA                     _lcdWriteControl:	
  3071                           
  3072                           ;incstack = 0
  3073                           ; Regs used in _lcdWriteControl: [wreg]
  3074                           ;lcdWriteControl@databyte stored from wreg
  3075  0EAA  1283               	bcf	3,5	;RP0=0, select bank0
  3076  0EAB  1303               	bcf	3,6	;RP1=0, select bank0
  3077  0EAC  00C8               	movwf	lcdWriteControl@databyte
  3078                           
  3079                           ;LCD.c: 10: RE2 = 0;
  3080  0EAD  1109               	bcf	9,2	;volatile
  3081                           
  3082                           ;LCD.c: 11: RE1 = 0;
  3083  0EAE  1089               	bcf	9,1	;volatile
  3084                           
  3085                           ;LCD.c: 12: RE0 = 0;
  3086  0EAF  1009               	bcf	9,0	;volatile
  3087                           
  3088                           ;LCD.c: 13: PORTD = databyte;
  3089  0EB0  0848               	movf	lcdWriteControl@databyte,w
  3090  0EB1  0088               	movwf	8	;volatile
  3091                           
  3092                           ;LCD.c: 14: RE2 = 1;
  3093  0EB2  1509               	bsf	9,2	;volatile
  3094                           
  3095                           ;LCD.c: 15: RE2 = 0;
  3096  0EB3  1109               	bcf	9,2	;volatile
  3097                           
  3098                           ;LCD.c: 16: _delay((unsigned long)((2)*(20000000/4000.0)));
  3099  0EB4  300D               	movlw	13
  3100  0EB5  00C7               	movwf	??_lcdWriteControl+1
  3101  0EB6  30FB               	movlw	251
  3102  0EB7  00C6               	movwf	??_lcdWriteControl
  3103  0EB8                     u2047:	
  3104  0EB8  0BC6               	decfsz	??_lcdWriteControl,f
  3105  0EB9  2EB8               	goto	u2047
  3106  0EBA  0BC7               	decfsz	??_lcdWriteControl+1,f
  3107  0EBB  2EB8               	goto	u2047
  3108  0EBC  2EBD               	nop2
  3109  0EBD  0008               	return
  3110  0EBE                     __end_of_lcdWriteControl:	
  3111                           
  3112                           	psect	text18
  3113  0FBB                     __ptext18:	
  3114 ;; *************** function _getADC *****************
  3115 ;; Defined at:
  3116 ;;		line 29 in file "ADC.c"
  3117 ;; Parameters:    Size  Location     Type
  3118 ;;		None
  3119 ;; Auto vars:     Size  Location     Type
  3120 ;;		None
  3121 ;; Return value:  Size  Location     Type
  3122 ;;                  2  369[None  ] unsigned int 
  3123 ;; Registers used:
  3124 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3125 ;; Tracked objects:
  3126 ;;		On entry : 0/0
  3127 ;;		On exit  : 0/0
  3128 ;;		Unchanged: 0/0
  3129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3130 ;;      Params:         0       0       0       0       0
  3131 ;;      Locals:         0       0       0       0       0
  3132 ;;      Temps:          0       2       0       0       0
  3133 ;;      Totals:         0       2       0       0       0
  3134 ;;Total ram usage:        2 bytes
  3135 ;; Hardware stack levels used:    1
  3136 ;; Hardware stack levels required when called:    2
  3137 ;; This function calls:
  3138 ;;		Nothing
  3139 ;; This function is called by:
  3140 ;;		_ADCMain
  3141 ;; This function uses a non-reentrant model
  3142 ;;
  3143                           
  3144                           
  3145                           ;psect for function _getADC
  3146  0FBB                     _getADC:	
  3147                           
  3148                           ;ADC.c: 31: ADRESH = 0;
  3149                           
  3150                           ;incstack = 0
  3151                           ; Regs used in _getADC: [wreg-fsr0h+status,2+status,0]
  3152  0FBB  1283               	bcf	3,5	;RP0=0, select bank0
  3153  0FBC  1303               	bcf	3,6	;RP1=0, select bank0
  3154  0FBD  019E               	clrf	30	;volatile
  3155                           
  3156                           ;ADC.c: 32: ADRESL = 0;
  3157  0FBE  1683               	bsf	3,5	;RP0=1, select bank1
  3158  0FBF  1303               	bcf	3,6	;RP1=0, select bank1
  3159  0FC0  019E               	clrf	30	;volatile
  3160                           
  3161                           ;ADC.c: 34: GO = 1;
  3162  0FC1  1283               	bcf	3,5	;RP0=0, select bank0
  3163  0FC2  1303               	bcf	3,6	;RP1=0, select bank0
  3164  0FC3  151F               	bsf	31,2	;volatile
  3165  0FC4                     l412:	
  3166                           ;ADC.c: 35: while(GO) continue;
  3167                           
  3168  0FC4  191F               	btfsc	31,2	;volatile
  3169  0FC5  2FC4               	goto	l412
  3170                           
  3171                           ;ADC.c: 39: adcRAW = (4*ADRESH);
  3172  0FC6  081E               	movf	30,w	;volatile
  3173  0FC7  00C6               	movwf	??_getADC
  3174  0FC8  01C7               	clrf	??_getADC+1
  3175  0FC9  1003               	clrc
  3176  0FCA  0DC6               	rlf	??_getADC,f
  3177  0FCB  0DC7               	rlf	??_getADC+1,f
  3178  0FCC  1003               	clrc
  3179  0FCD  0DC6               	rlf	??_getADC,f
  3180  0FCE  0DC7               	rlf	??_getADC+1,f
  3181  0FCF  0846               	movf	??_getADC,w
  3182  0FD0  00A2               	movwf	_adcRAW	;volatile
  3183  0FD1  0847               	movf	??_getADC+1,w
  3184  0FD2  00A3               	movwf	_adcRAW+1	;volatile
  3185                           
  3186                           ;ADC.c: 41: switch(ADRESL){
  3187  0FD3  2FF2               	goto	l1682
  3188  0FD4                     l1676:	
  3189                           ;ADC.c: 42: case 0b01000000: adcRAW = adcRAW + 1;
  3190                           
  3191  0FD4  1283               	bcf	3,5	;RP0=0, select bank0
  3192  0FD5  0822               	movf	_adcRAW,w	;volatile
  3193  0FD6  3E01               	addlw	1
  3194  0FD7  00A2               	movwf	_adcRAW	;volatile
  3195  0FD8  0823               	movf	_adcRAW+1,w	;volatile
  3196  0FD9  1803               	skipnc
  3197  0FDA  3E01               	addlw	1
  3198  0FDB  3E00               	addlw	0
  3199  0FDC  00A3               	movwf	_adcRAW+1	;volatile
  3200                           
  3201                           ;ADC.c: 43: break;
  3202  0FDD  0008               	return
  3203  0FDE                     l1678:	
  3204                           ;ADC.c: 44: case 0b10000000: adcRAW = adcRAW + 2;
  3205                           
  3206  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  3207  0FDF  0822               	movf	_adcRAW,w	;volatile
  3208  0FE0  3E02               	addlw	2
  3209  0FE1  00A2               	movwf	_adcRAW	;volatile
  3210  0FE2  0823               	movf	_adcRAW+1,w	;volatile
  3211  0FE3  1803               	skipnc
  3212  0FE4  3E01               	addlw	1
  3213  0FE5  3E00               	addlw	0
  3214  0FE6  00A3               	movwf	_adcRAW+1	;volatile
  3215                           
  3216                           ;ADC.c: 45: break;
  3217  0FE7  0008               	return
  3218  0FE8                     l1680:	
  3219                           ;ADC.c: 46: case 0b11000000: adcRAW = adcRAW + 3;
  3220                           
  3221  0FE8  1283               	bcf	3,5	;RP0=0, select bank0
  3222  0FE9  0822               	movf	_adcRAW,w	;volatile
  3223  0FEA  3E03               	addlw	3
  3224  0FEB  00A2               	movwf	_adcRAW	;volatile
  3225  0FEC  0823               	movf	_adcRAW+1,w	;volatile
  3226  0FED  1803               	skipnc
  3227  0FEE  3E01               	addlw	1
  3228  0FEF  3E00               	addlw	0
  3229  0FF0  00A3               	movwf	_adcRAW+1	;volatile
  3230                           
  3231                           ;ADC.c: 49: }
  3232                           
  3233                           ;ADC.c: 48: default: adcRAW = adcRAW;
  3234                           
  3235                           ;ADC.c: 47: break;
  3236  0FF1  0008               	return
  3237  0FF2                     l1682:	
  3238  0FF2  1683               	bsf	3,5	;RP0=1, select bank1
  3239  0FF3  1303               	bcf	3,6	;RP1=0, select bank1
  3240  0FF4  081E               	movf	30,w	;volatile
  3241                           
  3242                           ; Switch size 1, requested type "space"
  3243                           ; Number of cases is 3, Range of values is 64 to 192
  3244                           ; switch strategies available:
  3245                           ; Name         Instructions Cycles
  3246                           ; simple_byte           10     6 (average)
  3247                           ; jumptable            263     9 (fixed)
  3248                           ;	Chosen strategy is simple_byte
  3249  0FF5  3A40               	xorlw	64	; case 64
  3250  0FF6  1903               	skipnz
  3251  0FF7  2FD4               	goto	l1676
  3252  0FF8  3AC0               	xorlw	192	; case 128
  3253  0FF9  1903               	skipnz
  3254  0FFA  2FDE               	goto	l1678
  3255  0FFB  3A40               	xorlw	64	; case 192
  3256  0FFC  1903               	skipnz
  3257  0FFD  2FE8               	goto	l1680
  3258  0FFE  2FFF               	goto	l421
  3259  0FFF                     l421:	
  3260                           ;ADC.c: 51: return(adcRAW);
  3261                           ;	Return value of _getADC is never used
  3262                           
  3263  0FFF  0008               	return
  3264  1000                     __end_of_getADC:	
  3265                           
  3266                           	psect	text19
  3267  002F                     __ptext19:	
  3268 ;; *************** function _adcConvertMM *****************
  3269 ;; Defined at:
  3270 ;;		line 59 in file "ADC.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;  adcRAW          2   21[BANK0 ] unsigned int 
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;		None
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  2   21[BANK0 ] unsigned int 
  3277 ;; Registers used:
  3278 ;;		wreg, status,2, status,0, pclath, cstack
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3284 ;;      Params:         0       2       0       0       0
  3285 ;;      Locals:         0       0       0       0       0
  3286 ;;      Temps:          0       8       0       0       0
  3287 ;;      Totals:         0      10       0       0       0
  3288 ;;Total ram usage:       10 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; Hardware stack levels required when called:    3
  3291 ;; This function calls:
  3292 ;;		___aldiv
  3293 ;;		___lwdiv
  3294 ;;		___wmul
  3295 ;; This function is called by:
  3296 ;;		_ADCMain
  3297 ;; This function uses a non-reentrant model
  3298 ;;
  3299                           
  3300                           
  3301                           ;psect for function _adcConvertMM
  3302  002F                     _adcConvertMM:	
  3303                           
  3304                           ;ADC.c: 61: if (adcRAW < 517 && adcRAW >= 513)
  3305                           
  3306                           ;incstack = 0
  3307                           ; Regs used in _adcConvertMM: [wreg+status,2+status,0+pclath+cstack]
  3308  002F  3002               	movlw	2
  3309  0030  1283               	bcf	3,5	;RP0=0, select bank0
  3310  0031  1303               	bcf	3,6	;RP1=0, select bank0
  3311  0032  025C               	subwf	adcConvertMM@adcRAW+1,w
  3312  0033  3005               	movlw	5
  3313  0034  1903               	skipnz
  3314  0035  025B               	subwf	adcConvertMM@adcRAW,w
  3315  0036  1803               	skipnc
  3316  0037  2898               	goto	l1690
  3317  0038  3002               	movlw	2
  3318  0039  025C               	subwf	adcConvertMM@adcRAW+1,w
  3319  003A  3001               	movlw	1
  3320  003B  1903               	skipnz
  3321  003C  025B               	subwf	adcConvertMM@adcRAW,w
  3322  003D  1C03               	skipc
  3323  003E  2898               	goto	l1690
  3324                           
  3325                           ;ADC.c: 62: Distance = (((51700 - adcRAW*100)/4) + 100);
  3326  003F  3000               	movlw	0
  3327  0040  00CF               	movwf	___aldiv@divisor+3
  3328  0041  3000               	movlw	0
  3329  0042  00CE               	movwf	___aldiv@divisor+2
  3330  0043  3000               	movlw	0
  3331  0044  00CD               	movwf	___aldiv@divisor+1
  3332  0045  3004               	movlw	4
  3333  0046  00CC               	movwf	___aldiv@divisor
  3334  0047  30F4               	movlw	244
  3335  0048  00DD               	movwf	??_adcConvertMM
  3336  0049  30C9               	movlw	201
  3337  004A  00DE               	movwf	??_adcConvertMM+1
  3338  004B  3000               	movlw	0
  3339  004C  00DF               	movwf	??_adcConvertMM+2
  3340  004D  3000               	movlw	0
  3341  004E  00E0               	movwf	??_adcConvertMM+3
  3342  004F  085C               	movf	adcConvertMM@adcRAW+1,w
  3343  0050  00C7               	movwf	___wmul@multiplier+1
  3344  0051  085B               	movf	adcConvertMM@adcRAW,w
  3345  0052  00C6               	movwf	___wmul@multiplier
  3346  0053  3064               	movlw	100
  3347  0054  00C8               	movwf	___wmul@multiplicand
  3348  0055  3000               	movlw	0
  3349  0056  00C9               	movwf	___wmul@multiplicand+1
  3350  0057  120A  158A  270C  120A  118A  	fcall	___wmul
  3351  005C  1283               	bcf	3,5	;RP0=0, select bank0
  3352  005D  1303               	bcf	3,6	;RP1=0, select bank0
  3353  005E  0846               	movf	?___wmul,w
  3354  005F  00E1               	movwf	??_adcConvertMM+4
  3355  0060  0847               	movf	?___wmul+1,w
  3356  0061  00E2               	movwf	??_adcConvertMM+5
  3357  0062  01E3               	clrf	??_adcConvertMM+6
  3358  0063  01E4               	clrf	??_adcConvertMM+7
  3359  0064  09E1               	comf	??_adcConvertMM+4,f
  3360  0065  09E2               	comf	??_adcConvertMM+5,f
  3361  0066  09E3               	comf	??_adcConvertMM+6,f
  3362  0067  09E4               	comf	??_adcConvertMM+7,f
  3363  0068  0AE1               	incf	??_adcConvertMM+4,f
  3364  0069  1903               	skipnz
  3365  006A  0AE2               	incf	??_adcConvertMM+5,f
  3366  006B  1903               	skipnz
  3367  006C  0AE3               	incf	??_adcConvertMM+6,f
  3368  006D  1903               	skipnz
  3369  006E  0AE4               	incf	??_adcConvertMM+7,f
  3370  006F  0861               	movf	??_adcConvertMM+4,w
  3371  0070  07DD               	addwf	??_adcConvertMM,f
  3372  0071  0862               	movf	??_adcConvertMM+5,w
  3373  0072  1803               	skipnc
  3374  0073  0F62               	incfsz	??_adcConvertMM+5,w
  3375  0074  2876               	goto	u1310
  3376  0075  2877               	goto	u1311
  3377  0076                     u1310:	
  3378  0076  07DE               	addwf	??_adcConvertMM+1,f
  3379  0077                     u1311:	
  3380  0077  0863               	movf	??_adcConvertMM+6,w
  3381  0078  1803               	skipnc
  3382  0079  0F63               	incfsz	??_adcConvertMM+6,w
  3383  007A  287C               	goto	u1312
  3384  007B  287D               	goto	u1313
  3385  007C                     u1312:	
  3386  007C  07DF               	addwf	??_adcConvertMM+2,f
  3387  007D                     u1313:	
  3388  007D  0864               	movf	??_adcConvertMM+7,w
  3389  007E  1803               	skipnc
  3390  007F  0A64               	incf	??_adcConvertMM+7,w
  3391  0080  07E0               	addwf	??_adcConvertMM+3,f
  3392  0081  0860               	movf	??_adcConvertMM+3,w
  3393  0082  00D3               	movwf	___aldiv@dividend+3
  3394  0083  085F               	movf	??_adcConvertMM+2,w
  3395  0084  00D2               	movwf	___aldiv@dividend+2
  3396  0085  085E               	movf	??_adcConvertMM+1,w
  3397  0086  00D1               	movwf	___aldiv@dividend+1
  3398  0087  085D               	movf	??_adcConvertMM,w
  3399  0088  00D0               	movwf	___aldiv@dividend
  3400  0089  120A  118A  25A5  120A  118A  	fcall	___aldiv
  3401  008E  1283               	bcf	3,5	;RP0=0, select bank0
  3402  008F  1303               	bcf	3,6	;RP1=0, select bank0
  3403  0090  084C               	movf	?___aldiv,w
  3404  0091  3E64               	addlw	100
  3405  0092  00A0               	movwf	_Distance	;volatile
  3406  0093  084D               	movf	?___aldiv+1,w
  3407  0094  1803               	skipnc
  3408  0095  3E01               	addlw	1
  3409  0096  3E00               	addlw	0
  3410  0097  00A1               	movwf	_Distance+1	;volatile
  3411  0098                     l1690:	
  3412                           
  3413                           ;ADC.c: 64: if (adcRAW < 513 && adcRAW >= 393)
  3414  0098  3002               	movlw	2
  3415  0099  025C               	subwf	adcConvertMM@adcRAW+1,w
  3416  009A  3001               	movlw	1
  3417  009B  1903               	skipnz
  3418  009C  025B               	subwf	adcConvertMM@adcRAW,w
  3419  009D  1803               	skipnc
  3420  009E  28FF               	goto	l1696
  3421  009F  3001               	movlw	1
  3422  00A0  025C               	subwf	adcConvertMM@adcRAW+1,w
  3423  00A1  3089               	movlw	137
  3424  00A2  1903               	skipnz
  3425  00A3  025B               	subwf	adcConvertMM@adcRAW,w
  3426  00A4  1C03               	skipc
  3427  00A5  28FF               	goto	l1696
  3428                           
  3429                           ;ADC.c: 65: Distance = (((51300 - adcRAW*100)/120) + 200);
  3430  00A6  3000               	movlw	0
  3431  00A7  00CF               	movwf	___aldiv@divisor+3
  3432  00A8  3000               	movlw	0
  3433  00A9  00CE               	movwf	___aldiv@divisor+2
  3434  00AA  3000               	movlw	0
  3435  00AB  00CD               	movwf	___aldiv@divisor+1
  3436  00AC  3078               	movlw	120
  3437  00AD  00CC               	movwf	___aldiv@divisor
  3438  00AE  3064               	movlw	100
  3439  00AF  00DD               	movwf	??_adcConvertMM
  3440  00B0  30C8               	movlw	200
  3441  00B1  00DE               	movwf	??_adcConvertMM+1
  3442  00B2  3000               	movlw	0
  3443  00B3  00DF               	movwf	??_adcConvertMM+2
  3444  00B4  3000               	movlw	0
  3445  00B5  00E0               	movwf	??_adcConvertMM+3
  3446  00B6  085C               	movf	adcConvertMM@adcRAW+1,w
  3447  00B7  00C7               	movwf	___wmul@multiplier+1
  3448  00B8  085B               	movf	adcConvertMM@adcRAW,w
  3449  00B9  00C6               	movwf	___wmul@multiplier
  3450  00BA  3064               	movlw	100
  3451  00BB  00C8               	movwf	___wmul@multiplicand
  3452  00BC  3000               	movlw	0
  3453  00BD  00C9               	movwf	___wmul@multiplicand+1
  3454  00BE  120A  158A  270C  120A  118A  	fcall	___wmul
  3455  00C3  1283               	bcf	3,5	;RP0=0, select bank0
  3456  00C4  1303               	bcf	3,6	;RP1=0, select bank0
  3457  00C5  0846               	movf	?___wmul,w
  3458  00C6  00E1               	movwf	??_adcConvertMM+4
  3459  00C7  0847               	movf	?___wmul+1,w
  3460  00C8  00E2               	movwf	??_adcConvertMM+5
  3461  00C9  01E3               	clrf	??_adcConvertMM+6
  3462  00CA  01E4               	clrf	??_adcConvertMM+7
  3463  00CB  09E1               	comf	??_adcConvertMM+4,f
  3464  00CC  09E2               	comf	??_adcConvertMM+5,f
  3465  00CD  09E3               	comf	??_adcConvertMM+6,f
  3466  00CE  09E4               	comf	??_adcConvertMM+7,f
  3467  00CF  0AE1               	incf	??_adcConvertMM+4,f
  3468  00D0  1903               	skipnz
  3469  00D1  0AE2               	incf	??_adcConvertMM+5,f
  3470  00D2  1903               	skipnz
  3471  00D3  0AE3               	incf	??_adcConvertMM+6,f
  3472  00D4  1903               	skipnz
  3473  00D5  0AE4               	incf	??_adcConvertMM+7,f
  3474  00D6  0861               	movf	??_adcConvertMM+4,w
  3475  00D7  07DD               	addwf	??_adcConvertMM,f
  3476  00D8  0862               	movf	??_adcConvertMM+5,w
  3477  00D9  1803               	skipnc
  3478  00DA  0F62               	incfsz	??_adcConvertMM+5,w
  3479  00DB  28DD               	goto	u1340
  3480  00DC  28DE               	goto	u1341
  3481  00DD                     u1340:	
  3482  00DD  07DE               	addwf	??_adcConvertMM+1,f
  3483  00DE                     u1341:	
  3484  00DE  0863               	movf	??_adcConvertMM+6,w
  3485  00DF  1803               	skipnc
  3486  00E0  0F63               	incfsz	??_adcConvertMM+6,w
  3487  00E1  28E3               	goto	u1342
  3488  00E2  28E4               	goto	u1343
  3489  00E3                     u1342:	
  3490  00E3  07DF               	addwf	??_adcConvertMM+2,f
  3491  00E4                     u1343:	
  3492  00E4  0864               	movf	??_adcConvertMM+7,w
  3493  00E5  1803               	skipnc
  3494  00E6  0A64               	incf	??_adcConvertMM+7,w
  3495  00E7  07E0               	addwf	??_adcConvertMM+3,f
  3496  00E8  0860               	movf	??_adcConvertMM+3,w
  3497  00E9  00D3               	movwf	___aldiv@dividend+3
  3498  00EA  085F               	movf	??_adcConvertMM+2,w
  3499  00EB  00D2               	movwf	___aldiv@dividend+2
  3500  00EC  085E               	movf	??_adcConvertMM+1,w
  3501  00ED  00D1               	movwf	___aldiv@dividend+1
  3502  00EE  085D               	movf	??_adcConvertMM,w
  3503  00EF  00D0               	movwf	___aldiv@dividend
  3504  00F0  120A  118A  25A5  120A  118A  	fcall	___aldiv
  3505  00F5  1283               	bcf	3,5	;RP0=0, select bank0
  3506  00F6  1303               	bcf	3,6	;RP1=0, select bank0
  3507  00F7  084C               	movf	?___aldiv,w
  3508  00F8  3EC8               	addlw	200
  3509  00F9  00A0               	movwf	_Distance	;volatile
  3510  00FA  084D               	movf	?___aldiv+1,w
  3511  00FB  1803               	skipnc
  3512  00FC  3E01               	addlw	1
  3513  00FD  3E00               	addlw	0
  3514  00FE  00A1               	movwf	_Distance+1	;volatile
  3515  00FF                     l1696:	
  3516                           
  3517                           ;ADC.c: 67: if (adcRAW < 393 && adcRAW >= 298)
  3518  00FF  3001               	movlw	1
  3519  0100  025C               	subwf	adcConvertMM@adcRAW+1,w
  3520  0101  3089               	movlw	137
  3521  0102  1903               	skipnz
  3522  0103  025B               	subwf	adcConvertMM@adcRAW,w
  3523  0104  1803               	skipnc
  3524  0105  2966               	goto	l1702
  3525  0106  3001               	movlw	1
  3526  0107  025C               	subwf	adcConvertMM@adcRAW+1,w
  3527  0108  302A               	movlw	42
  3528  0109  1903               	skipnz
  3529  010A  025B               	subwf	adcConvertMM@adcRAW,w
  3530  010B  1C03               	skipc
  3531  010C  2966               	goto	l1702
  3532                           
  3533                           ;ADC.c: 68: Distance = (((39300 - adcRAW*100)/95) + 300);
  3534  010D  3000               	movlw	0
  3535  010E  00CF               	movwf	___aldiv@divisor+3
  3536  010F  3000               	movlw	0
  3537  0110  00CE               	movwf	___aldiv@divisor+2
  3538  0111  3000               	movlw	0
  3539  0112  00CD               	movwf	___aldiv@divisor+1
  3540  0113  305F               	movlw	95
  3541  0114  00CC               	movwf	___aldiv@divisor
  3542  0115  3084               	movlw	132
  3543  0116  00DD               	movwf	??_adcConvertMM
  3544  0117  3099               	movlw	153
  3545  0118  00DE               	movwf	??_adcConvertMM+1
  3546  0119  3000               	movlw	0
  3547  011A  00DF               	movwf	??_adcConvertMM+2
  3548  011B  3000               	movlw	0
  3549  011C  00E0               	movwf	??_adcConvertMM+3
  3550  011D  085C               	movf	adcConvertMM@adcRAW+1,w
  3551  011E  00C7               	movwf	___wmul@multiplier+1
  3552  011F  085B               	movf	adcConvertMM@adcRAW,w
  3553  0120  00C6               	movwf	___wmul@multiplier
  3554  0121  3064               	movlw	100
  3555  0122  00C8               	movwf	___wmul@multiplicand
  3556  0123  3000               	movlw	0
  3557  0124  00C9               	movwf	___wmul@multiplicand+1
  3558  0125  120A  158A  270C  120A  118A  	fcall	___wmul
  3559  012A  1283               	bcf	3,5	;RP0=0, select bank0
  3560  012B  1303               	bcf	3,6	;RP1=0, select bank0
  3561  012C  0846               	movf	?___wmul,w
  3562  012D  00E1               	movwf	??_adcConvertMM+4
  3563  012E  0847               	movf	?___wmul+1,w
  3564  012F  00E2               	movwf	??_adcConvertMM+5
  3565  0130  01E3               	clrf	??_adcConvertMM+6
  3566  0131  01E4               	clrf	??_adcConvertMM+7
  3567  0132  09E1               	comf	??_adcConvertMM+4,f
  3568  0133  09E2               	comf	??_adcConvertMM+5,f
  3569  0134  09E3               	comf	??_adcConvertMM+6,f
  3570  0135  09E4               	comf	??_adcConvertMM+7,f
  3571  0136  0AE1               	incf	??_adcConvertMM+4,f
  3572  0137  1903               	skipnz
  3573  0138  0AE2               	incf	??_adcConvertMM+5,f
  3574  0139  1903               	skipnz
  3575  013A  0AE3               	incf	??_adcConvertMM+6,f
  3576  013B  1903               	skipnz
  3577  013C  0AE4               	incf	??_adcConvertMM+7,f
  3578  013D  0861               	movf	??_adcConvertMM+4,w
  3579  013E  07DD               	addwf	??_adcConvertMM,f
  3580  013F  0862               	movf	??_adcConvertMM+5,w
  3581  0140  1803               	skipnc
  3582  0141  0F62               	incfsz	??_adcConvertMM+5,w
  3583  0142  2944               	goto	u1370
  3584  0143  2945               	goto	u1371
  3585  0144                     u1370:	
  3586  0144  07DE               	addwf	??_adcConvertMM+1,f
  3587  0145                     u1371:	
  3588  0145  0863               	movf	??_adcConvertMM+6,w
  3589  0146  1803               	skipnc
  3590  0147  0F63               	incfsz	??_adcConvertMM+6,w
  3591  0148  294A               	goto	u1372
  3592  0149  294B               	goto	u1373
  3593  014A                     u1372:	
  3594  014A  07DF               	addwf	??_adcConvertMM+2,f
  3595  014B                     u1373:	
  3596  014B  0864               	movf	??_adcConvertMM+7,w
  3597  014C  1803               	skipnc
  3598  014D  0A64               	incf	??_adcConvertMM+7,w
  3599  014E  07E0               	addwf	??_adcConvertMM+3,f
  3600  014F  0860               	movf	??_adcConvertMM+3,w
  3601  0150  00D3               	movwf	___aldiv@dividend+3
  3602  0151  085F               	movf	??_adcConvertMM+2,w
  3603  0152  00D2               	movwf	___aldiv@dividend+2
  3604  0153  085E               	movf	??_adcConvertMM+1,w
  3605  0154  00D1               	movwf	___aldiv@dividend+1
  3606  0155  085D               	movf	??_adcConvertMM,w
  3607  0156  00D0               	movwf	___aldiv@dividend
  3608  0157  120A  118A  25A5  120A  118A  	fcall	___aldiv
  3609  015C  1283               	bcf	3,5	;RP0=0, select bank0
  3610  015D  1303               	bcf	3,6	;RP1=0, select bank0
  3611  015E  084C               	movf	?___aldiv,w
  3612  015F  3E2C               	addlw	44
  3613  0160  00A0               	movwf	_Distance	;volatile
  3614  0161  084D               	movf	?___aldiv+1,w
  3615  0162  1803               	skipnc
  3616  0163  3E01               	addlw	1
  3617  0164  3E01               	addlw	1
  3618  0165  00A1               	movwf	_Distance+1	;volatile
  3619  0166                     l1702:	
  3620                           
  3621                           ;ADC.c: 70: if (adcRAW < 298 && adcRAW >= 236)
  3622  0166  3001               	movlw	1
  3623  0167  025C               	subwf	adcConvertMM@adcRAW+1,w
  3624  0168  302A               	movlw	42
  3625  0169  1903               	skipnz
  3626  016A  025B               	subwf	adcConvertMM@adcRAW,w
  3627  016B  1803               	skipnc
  3628  016C  29A5               	goto	l1708
  3629  016D  3000               	movlw	0
  3630  016E  025C               	subwf	adcConvertMM@adcRAW+1,w
  3631  016F  30EC               	movlw	236
  3632  0170  1903               	skipnz
  3633  0171  025B               	subwf	adcConvertMM@adcRAW,w
  3634  0172  1C03               	skipc
  3635  0173  29A5               	goto	l1708
  3636                           
  3637                           ;ADC.c: 71: Distance = (((29800 - adcRAW*100)/62) + 400);
  3638  0174  303E               	movlw	62
  3639  0175  00CC               	movwf	___lwdiv@divisor
  3640  0176  3000               	movlw	0
  3641  0177  00CD               	movwf	___lwdiv@divisor+1
  3642  0178  085C               	movf	adcConvertMM@adcRAW+1,w
  3643  0179  00C7               	movwf	___wmul@multiplier+1
  3644  017A  085B               	movf	adcConvertMM@adcRAW,w
  3645  017B  00C6               	movwf	___wmul@multiplier
  3646  017C  3064               	movlw	100
  3647  017D  00C8               	movwf	___wmul@multiplicand
  3648  017E  3000               	movlw	0
  3649  017F  00C9               	movwf	___wmul@multiplicand+1
  3650  0180  120A  158A  270C  120A  118A  	fcall	___wmul
  3651  0185  1283               	bcf	3,5	;RP0=0, select bank0
  3652  0186  1303               	bcf	3,6	;RP1=0, select bank0
  3653  0187  0946               	comf	?___wmul,w
  3654  0188  00DD               	movwf	??_adcConvertMM
  3655  0189  0947               	comf	?___wmul+1,w
  3656  018A  00DE               	movwf	??_adcConvertMM+1
  3657  018B  0ADD               	incf	??_adcConvertMM,f
  3658  018C  1903               	skipnz
  3659  018D  0ADE               	incf	??_adcConvertMM+1,f
  3660  018E  085D               	movf	??_adcConvertMM,w
  3661  018F  3E68               	addlw	104
  3662  0190  00CE               	movwf	___lwdiv@dividend
  3663  0191  085E               	movf	??_adcConvertMM+1,w
  3664  0192  1803               	skipnc
  3665  0193  3E01               	addlw	1
  3666  0194  3E74               	addlw	116
  3667  0195  00CF               	movwf	___lwdiv@dividend+1
  3668  0196  120A  158A  277D  120A  118A  	fcall	___lwdiv
  3669  019B  1283               	bcf	3,5	;RP0=0, select bank0
  3670  019C  1303               	bcf	3,6	;RP1=0, select bank0
  3671  019D  084C               	movf	?___lwdiv,w
  3672  019E  3E90               	addlw	144
  3673  019F  00A0               	movwf	_Distance	;volatile
  3674  01A0  084D               	movf	?___lwdiv+1,w
  3675  01A1  1803               	skipnc
  3676  01A2  3E01               	addlw	1
  3677  01A3  3E01               	addlw	1
  3678  01A4  00A1               	movwf	_Distance+1	;volatile
  3679  01A5                     l1708:	
  3680                           
  3681                           ;ADC.c: 73: if (adcRAW < 236 && adcRAW >= 194)
  3682  01A5  3000               	movlw	0
  3683  01A6  025C               	subwf	adcConvertMM@adcRAW+1,w
  3684  01A7  30EC               	movlw	236
  3685  01A8  1903               	skipnz
  3686  01A9  025B               	subwf	adcConvertMM@adcRAW,w
  3687  01AA  1803               	skipnc
  3688  01AB  29E4               	goto	l1714
  3689  01AC  3000               	movlw	0
  3690  01AD  025C               	subwf	adcConvertMM@adcRAW+1,w
  3691  01AE  30C2               	movlw	194
  3692  01AF  1903               	skipnz
  3693  01B0  025B               	subwf	adcConvertMM@adcRAW,w
  3694  01B1  1C03               	skipc
  3695  01B2  29E4               	goto	l1714
  3696                           
  3697                           ;ADC.c: 74: Distance = (((23600 - adcRAW*100)/42) + 500);
  3698  01B3  302A               	movlw	42
  3699  01B4  00CC               	movwf	___lwdiv@divisor
  3700  01B5  3000               	movlw	0
  3701  01B6  00CD               	movwf	___lwdiv@divisor+1
  3702  01B7  085C               	movf	adcConvertMM@adcRAW+1,w
  3703  01B8  00C7               	movwf	___wmul@multiplier+1
  3704  01B9  085B               	movf	adcConvertMM@adcRAW,w
  3705  01BA  00C6               	movwf	___wmul@multiplier
  3706  01BB  3064               	movlw	100
  3707  01BC  00C8               	movwf	___wmul@multiplicand
  3708  01BD  3000               	movlw	0
  3709  01BE  00C9               	movwf	___wmul@multiplicand+1
  3710  01BF  120A  158A  270C  120A  118A  	fcall	___wmul
  3711  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  3712  01C5  1303               	bcf	3,6	;RP1=0, select bank0
  3713  01C6  0946               	comf	?___wmul,w
  3714  01C7  00DD               	movwf	??_adcConvertMM
  3715  01C8  0947               	comf	?___wmul+1,w
  3716  01C9  00DE               	movwf	??_adcConvertMM+1
  3717  01CA  0ADD               	incf	??_adcConvertMM,f
  3718  01CB  1903               	skipnz
  3719  01CC  0ADE               	incf	??_adcConvertMM+1,f
  3720  01CD  085D               	movf	??_adcConvertMM,w
  3721  01CE  3E30               	addlw	48
  3722  01CF  00CE               	movwf	___lwdiv@dividend
  3723  01D0  085E               	movf	??_adcConvertMM+1,w
  3724  01D1  1803               	skipnc
  3725  01D2  3E01               	addlw	1
  3726  01D3  3E5C               	addlw	92
  3727  01D4  00CF               	movwf	___lwdiv@dividend+1
  3728  01D5  120A  158A  277D  120A  118A  	fcall	___lwdiv
  3729  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  3730  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  3731  01DC  084C               	movf	?___lwdiv,w
  3732  01DD  3EF4               	addlw	244
  3733  01DE  00A0               	movwf	_Distance	;volatile
  3734  01DF  084D               	movf	?___lwdiv+1,w
  3735  01E0  1803               	skipnc
  3736  01E1  3E01               	addlw	1
  3737  01E2  3E01               	addlw	1
  3738  01E3  00A1               	movwf	_Distance+1	;volatile
  3739  01E4                     l1714:	
  3740                           
  3741                           ;ADC.c: 76: if (adcRAW < 194 && adcRAW >= 168)
  3742  01E4  3000               	movlw	0
  3743  01E5  025C               	subwf	adcConvertMM@adcRAW+1,w
  3744  01E6  30C2               	movlw	194
  3745  01E7  1903               	skipnz
  3746  01E8  025B               	subwf	adcConvertMM@adcRAW,w
  3747  01E9  1803               	skipnc
  3748  01EA  2A23               	goto	l1720
  3749  01EB  3000               	movlw	0
  3750  01EC  025C               	subwf	adcConvertMM@adcRAW+1,w
  3751  01ED  30A8               	movlw	168
  3752  01EE  1903               	skipnz
  3753  01EF  025B               	subwf	adcConvertMM@adcRAW,w
  3754  01F0  1C03               	skipc
  3755  01F1  2A23               	goto	l1720
  3756                           
  3757                           ;ADC.c: 77: Distance = (((19400 - adcRAW*100)/26) + 600);
  3758  01F2  301A               	movlw	26
  3759  01F3  00CC               	movwf	___lwdiv@divisor
  3760  01F4  3000               	movlw	0
  3761  01F5  00CD               	movwf	___lwdiv@divisor+1
  3762  01F6  085C               	movf	adcConvertMM@adcRAW+1,w
  3763  01F7  00C7               	movwf	___wmul@multiplier+1
  3764  01F8  085B               	movf	adcConvertMM@adcRAW,w
  3765  01F9  00C6               	movwf	___wmul@multiplier
  3766  01FA  3064               	movlw	100
  3767  01FB  00C8               	movwf	___wmul@multiplicand
  3768  01FC  3000               	movlw	0
  3769  01FD  00C9               	movwf	___wmul@multiplicand+1
  3770  01FE  120A  158A  270C  120A  118A  	fcall	___wmul
  3771  0203  1283               	bcf	3,5	;RP0=0, select bank0
  3772  0204  1303               	bcf	3,6	;RP1=0, select bank0
  3773  0205  0946               	comf	?___wmul,w
  3774  0206  00DD               	movwf	??_adcConvertMM
  3775  0207  0947               	comf	?___wmul+1,w
  3776  0208  00DE               	movwf	??_adcConvertMM+1
  3777  0209  0ADD               	incf	??_adcConvertMM,f
  3778  020A  1903               	skipnz
  3779  020B  0ADE               	incf	??_adcConvertMM+1,f
  3780  020C  085D               	movf	??_adcConvertMM,w
  3781  020D  3EC8               	addlw	200
  3782  020E  00CE               	movwf	___lwdiv@dividend
  3783  020F  085E               	movf	??_adcConvertMM+1,w
  3784  0210  1803               	skipnc
  3785  0211  3E01               	addlw	1
  3786  0212  3E4B               	addlw	75
  3787  0213  00CF               	movwf	___lwdiv@dividend+1
  3788  0214  120A  158A  277D  120A  118A  	fcall	___lwdiv
  3789  0219  1283               	bcf	3,5	;RP0=0, select bank0
  3790  021A  1303               	bcf	3,6	;RP1=0, select bank0
  3791  021B  084C               	movf	?___lwdiv,w
  3792  021C  3E58               	addlw	88
  3793  021D  00A0               	movwf	_Distance	;volatile
  3794  021E  084D               	movf	?___lwdiv+1,w
  3795  021F  1803               	skipnc
  3796  0220  3E01               	addlw	1
  3797  0221  3E02               	addlw	2
  3798  0222  00A1               	movwf	_Distance+1	;volatile
  3799  0223                     l1720:	
  3800                           
  3801                           ;ADC.c: 79: if (adcRAW < 168 && adcRAW >= 144)
  3802  0223  3000               	movlw	0
  3803  0224  025C               	subwf	adcConvertMM@adcRAW+1,w
  3804  0225  30A8               	movlw	168
  3805  0226  1903               	skipnz
  3806  0227  025B               	subwf	adcConvertMM@adcRAW,w
  3807  0228  1803               	skipnc
  3808  0229  2A62               	goto	l1726
  3809  022A  3000               	movlw	0
  3810  022B  025C               	subwf	adcConvertMM@adcRAW+1,w
  3811  022C  3090               	movlw	144
  3812  022D  1903               	skipnz
  3813  022E  025B               	subwf	adcConvertMM@adcRAW,w
  3814  022F  1C03               	skipc
  3815  0230  2A62               	goto	l1726
  3816                           
  3817                           ;ADC.c: 80: Distance = (((16800 - adcRAW*100)/24) + 700);
  3818  0231  3018               	movlw	24
  3819  0232  00CC               	movwf	___lwdiv@divisor
  3820  0233  3000               	movlw	0
  3821  0234  00CD               	movwf	___lwdiv@divisor+1
  3822  0235  085C               	movf	adcConvertMM@adcRAW+1,w
  3823  0236  00C7               	movwf	___wmul@multiplier+1
  3824  0237  085B               	movf	adcConvertMM@adcRAW,w
  3825  0238  00C6               	movwf	___wmul@multiplier
  3826  0239  3064               	movlw	100
  3827  023A  00C8               	movwf	___wmul@multiplicand
  3828  023B  3000               	movlw	0
  3829  023C  00C9               	movwf	___wmul@multiplicand+1
  3830  023D  120A  158A  270C  120A  118A  	fcall	___wmul
  3831  0242  1283               	bcf	3,5	;RP0=0, select bank0
  3832  0243  1303               	bcf	3,6	;RP1=0, select bank0
  3833  0244  0946               	comf	?___wmul,w
  3834  0245  00DD               	movwf	??_adcConvertMM
  3835  0246  0947               	comf	?___wmul+1,w
  3836  0247  00DE               	movwf	??_adcConvertMM+1
  3837  0248  0ADD               	incf	??_adcConvertMM,f
  3838  0249  1903               	skipnz
  3839  024A  0ADE               	incf	??_adcConvertMM+1,f
  3840  024B  085D               	movf	??_adcConvertMM,w
  3841  024C  3EA0               	addlw	160
  3842  024D  00CE               	movwf	___lwdiv@dividend
  3843  024E  085E               	movf	??_adcConvertMM+1,w
  3844  024F  1803               	skipnc
  3845  0250  3E01               	addlw	1
  3846  0251  3E41               	addlw	65
  3847  0252  00CF               	movwf	___lwdiv@dividend+1
  3848  0253  120A  158A  277D  120A  118A  	fcall	___lwdiv
  3849  0258  1283               	bcf	3,5	;RP0=0, select bank0
  3850  0259  1303               	bcf	3,6	;RP1=0, select bank0
  3851  025A  084C               	movf	?___lwdiv,w
  3852  025B  3EBC               	addlw	188
  3853  025C  00A0               	movwf	_Distance	;volatile
  3854  025D  084D               	movf	?___lwdiv+1,w
  3855  025E  1803               	skipnc
  3856  025F  3E01               	addlw	1
  3857  0260  3E02               	addlw	2
  3858  0261  00A1               	movwf	_Distance+1	;volatile
  3859  0262                     l1726:	
  3860                           
  3861                           ;ADC.c: 82: if (adcRAW < 144 && adcRAW >= 129)
  3862  0262  3000               	movlw	0
  3863  0263  025C               	subwf	adcConvertMM@adcRAW+1,w
  3864  0264  3090               	movlw	144
  3865  0265  1903               	skipnz
  3866  0266  025B               	subwf	adcConvertMM@adcRAW,w
  3867  0267  1803               	skipnc
  3868  0268  2AA1               	goto	l1732
  3869  0269  3000               	movlw	0
  3870  026A  025C               	subwf	adcConvertMM@adcRAW+1,w
  3871  026B  3081               	movlw	129
  3872  026C  1903               	skipnz
  3873  026D  025B               	subwf	adcConvertMM@adcRAW,w
  3874  026E  1C03               	skipc
  3875  026F  2AA1               	goto	l1732
  3876                           
  3877                           ;ADC.c: 83: Distance = (((14400 - adcRAW*100)/15) + 800);
  3878  0270  300F               	movlw	15
  3879  0271  00CC               	movwf	___lwdiv@divisor
  3880  0272  3000               	movlw	0
  3881  0273  00CD               	movwf	___lwdiv@divisor+1
  3882  0274  085C               	movf	adcConvertMM@adcRAW+1,w
  3883  0275  00C7               	movwf	___wmul@multiplier+1
  3884  0276  085B               	movf	adcConvertMM@adcRAW,w
  3885  0277  00C6               	movwf	___wmul@multiplier
  3886  0278  3064               	movlw	100
  3887  0279  00C8               	movwf	___wmul@multiplicand
  3888  027A  3000               	movlw	0
  3889  027B  00C9               	movwf	___wmul@multiplicand+1
  3890  027C  120A  158A  270C  120A  118A  	fcall	___wmul
  3891  0281  1283               	bcf	3,5	;RP0=0, select bank0
  3892  0282  1303               	bcf	3,6	;RP1=0, select bank0
  3893  0283  0946               	comf	?___wmul,w
  3894  0284  00DD               	movwf	??_adcConvertMM
  3895  0285  0947               	comf	?___wmul+1,w
  3896  0286  00DE               	movwf	??_adcConvertMM+1
  3897  0287  0ADD               	incf	??_adcConvertMM,f
  3898  0288  1903               	skipnz
  3899  0289  0ADE               	incf	??_adcConvertMM+1,f
  3900  028A  085D               	movf	??_adcConvertMM,w
  3901  028B  3E40               	addlw	64
  3902  028C  00CE               	movwf	___lwdiv@dividend
  3903  028D  085E               	movf	??_adcConvertMM+1,w
  3904  028E  1803               	skipnc
  3905  028F  3E01               	addlw	1
  3906  0290  3E38               	addlw	56
  3907  0291  00CF               	movwf	___lwdiv@dividend+1
  3908  0292  120A  158A  277D  120A  118A  	fcall	___lwdiv
  3909  0297  1283               	bcf	3,5	;RP0=0, select bank0
  3910  0298  1303               	bcf	3,6	;RP1=0, select bank0
  3911  0299  084C               	movf	?___lwdiv,w
  3912  029A  3E20               	addlw	32
  3913  029B  00A0               	movwf	_Distance	;volatile
  3914  029C  084D               	movf	?___lwdiv+1,w
  3915  029D  1803               	skipnc
  3916  029E  3E01               	addlw	1
  3917  029F  3E03               	addlw	3
  3918  02A0  00A1               	movwf	_Distance+1	;volatile
  3919  02A1                     l1732:	
  3920                           
  3921                           ;ADC.c: 85: if (adcRAW < 129 && adcRAW >= 110)
  3922  02A1  3000               	movlw	0
  3923  02A2  025C               	subwf	adcConvertMM@adcRAW+1,w
  3924  02A3  3081               	movlw	129
  3925  02A4  1903               	skipnz
  3926  02A5  025B               	subwf	adcConvertMM@adcRAW,w
  3927  02A6  1803               	skipnc
  3928  02A7  2AE0               	goto	l1738
  3929  02A8  3000               	movlw	0
  3930  02A9  025C               	subwf	adcConvertMM@adcRAW+1,w
  3931  02AA  306E               	movlw	110
  3932  02AB  1903               	skipnz
  3933  02AC  025B               	subwf	adcConvertMM@adcRAW,w
  3934  02AD  1C03               	skipc
  3935  02AE  2AE0               	goto	l1738
  3936                           
  3937                           ;ADC.c: 86: Distance = (((12900 - adcRAW*100)/19) + 900 + 50);
  3938  02AF  3013               	movlw	19
  3939  02B0  00CC               	movwf	___lwdiv@divisor
  3940  02B1  3000               	movlw	0
  3941  02B2  00CD               	movwf	___lwdiv@divisor+1
  3942  02B3  085C               	movf	adcConvertMM@adcRAW+1,w
  3943  02B4  00C7               	movwf	___wmul@multiplier+1
  3944  02B5  085B               	movf	adcConvertMM@adcRAW,w
  3945  02B6  00C6               	movwf	___wmul@multiplier
  3946  02B7  3064               	movlw	100
  3947  02B8  00C8               	movwf	___wmul@multiplicand
  3948  02B9  3000               	movlw	0
  3949  02BA  00C9               	movwf	___wmul@multiplicand+1
  3950  02BB  120A  158A  270C  120A  118A  	fcall	___wmul
  3951  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  3952  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  3953  02C2  0946               	comf	?___wmul,w
  3954  02C3  00DD               	movwf	??_adcConvertMM
  3955  02C4  0947               	comf	?___wmul+1,w
  3956  02C5  00DE               	movwf	??_adcConvertMM+1
  3957  02C6  0ADD               	incf	??_adcConvertMM,f
  3958  02C7  1903               	skipnz
  3959  02C8  0ADE               	incf	??_adcConvertMM+1,f
  3960  02C9  085D               	movf	??_adcConvertMM,w
  3961  02CA  3E64               	addlw	100
  3962  02CB  00CE               	movwf	___lwdiv@dividend
  3963  02CC  085E               	movf	??_adcConvertMM+1,w
  3964  02CD  1803               	skipnc
  3965  02CE  3E01               	addlw	1
  3966  02CF  3E32               	addlw	50
  3967  02D0  00CF               	movwf	___lwdiv@dividend+1
  3968  02D1  120A  158A  277D  120A  118A  	fcall	___lwdiv
  3969  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  3970  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  3971  02D8  084C               	movf	?___lwdiv,w
  3972  02D9  3EB6               	addlw	182
  3973  02DA  00A0               	movwf	_Distance	;volatile
  3974  02DB  084D               	movf	?___lwdiv+1,w
  3975  02DC  1803               	skipnc
  3976  02DD  3E01               	addlw	1
  3977  02DE  3E03               	addlw	3
  3978  02DF  00A1               	movwf	_Distance+1	;volatile
  3979  02E0                     l1738:	
  3980                           
  3981                           ;ADC.c: 88: if (adcRAW < 110 && adcRAW >= 98)
  3982  02E0  3000               	movlw	0
  3983  02E1  025C               	subwf	adcConvertMM@adcRAW+1,w
  3984  02E2  306E               	movlw	110
  3985  02E3  1903               	skipnz
  3986  02E4  025B               	subwf	adcConvertMM@adcRAW,w
  3987  02E5  1803               	skipnc
  3988  02E6  2B1F               	goto	l1744
  3989  02E7  3000               	movlw	0
  3990  02E8  025C               	subwf	adcConvertMM@adcRAW+1,w
  3991  02E9  3062               	movlw	98
  3992  02EA  1903               	skipnz
  3993  02EB  025B               	subwf	adcConvertMM@adcRAW,w
  3994  02EC  1C03               	skipc
  3995  02ED  2B1F               	goto	l1744
  3996                           
  3997                           ;ADC.c: 89: Distance = (((11000 - adcRAW*100)/12) + 1000 + 100);
  3998  02EE  300C               	movlw	12
  3999  02EF  00CC               	movwf	___lwdiv@divisor
  4000  02F0  3000               	movlw	0
  4001  02F1  00CD               	movwf	___lwdiv@divisor+1
  4002  02F2  085C               	movf	adcConvertMM@adcRAW+1,w
  4003  02F3  00C7               	movwf	___wmul@multiplier+1
  4004  02F4  085B               	movf	adcConvertMM@adcRAW,w
  4005  02F5  00C6               	movwf	___wmul@multiplier
  4006  02F6  3064               	movlw	100
  4007  02F7  00C8               	movwf	___wmul@multiplicand
  4008  02F8  3000               	movlw	0
  4009  02F9  00C9               	movwf	___wmul@multiplicand+1
  4010  02FA  120A  158A  270C  120A  118A  	fcall	___wmul
  4011  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  4012  0300  1303               	bcf	3,6	;RP1=0, select bank0
  4013  0301  0946               	comf	?___wmul,w
  4014  0302  00DD               	movwf	??_adcConvertMM
  4015  0303  0947               	comf	?___wmul+1,w
  4016  0304  00DE               	movwf	??_adcConvertMM+1
  4017  0305  0ADD               	incf	??_adcConvertMM,f
  4018  0306  1903               	skipnz
  4019  0307  0ADE               	incf	??_adcConvertMM+1,f
  4020  0308  085D               	movf	??_adcConvertMM,w
  4021  0309  3EF8               	addlw	248
  4022  030A  00CE               	movwf	___lwdiv@dividend
  4023  030B  085E               	movf	??_adcConvertMM+1,w
  4024  030C  1803               	skipnc
  4025  030D  3E01               	addlw	1
  4026  030E  3E2A               	addlw	42
  4027  030F  00CF               	movwf	___lwdiv@dividend+1
  4028  0310  120A  158A  277D  120A  118A  	fcall	___lwdiv
  4029  0315  1283               	bcf	3,5	;RP0=0, select bank0
  4030  0316  1303               	bcf	3,6	;RP1=0, select bank0
  4031  0317  084C               	movf	?___lwdiv,w
  4032  0318  3E4C               	addlw	76
  4033  0319  00A0               	movwf	_Distance	;volatile
  4034  031A  084D               	movf	?___lwdiv+1,w
  4035  031B  1803               	skipnc
  4036  031C  3E01               	addlw	1
  4037  031D  3E04               	addlw	4
  4038  031E  00A1               	movwf	_Distance+1	;volatile
  4039  031F                     l1744:	
  4040                           
  4041                           ;ADC.c: 91: if (adcRAW < 98 && adcRAW >= 90)
  4042  031F  3000               	movlw	0
  4043  0320  025C               	subwf	adcConvertMM@adcRAW+1,w
  4044  0321  3062               	movlw	98
  4045  0322  1903               	skipnz
  4046  0323  025B               	subwf	adcConvertMM@adcRAW,w
  4047  0324  1803               	skipnc
  4048  0325  2B5C               	goto	l1750
  4049  0326  3000               	movlw	0
  4050  0327  025C               	subwf	adcConvertMM@adcRAW+1,w
  4051  0328  305A               	movlw	90
  4052  0329  1903               	skipnz
  4053  032A  025B               	subwf	adcConvertMM@adcRAW,w
  4054  032B  1C03               	skipc
  4055  032C  2B5C               	goto	l1750
  4056                           
  4057                           ;ADC.c: 92: Distance = (((9800 - adcRAW*100)/8) + 1100 + 150);
  4058  032D  085C               	movf	adcConvertMM@adcRAW+1,w
  4059  032E  00C7               	movwf	___wmul@multiplier+1
  4060  032F  085B               	movf	adcConvertMM@adcRAW,w
  4061  0330  00C6               	movwf	___wmul@multiplier
  4062  0331  3064               	movlw	100
  4063  0332  00C8               	movwf	___wmul@multiplicand
  4064  0333  3000               	movlw	0
  4065  0334  00C9               	movwf	___wmul@multiplicand+1
  4066  0335  120A  158A  270C  120A  118A  	fcall	___wmul
  4067  033A  1283               	bcf	3,5	;RP0=0, select bank0
  4068  033B  1303               	bcf	3,6	;RP1=0, select bank0
  4069  033C  0946               	comf	?___wmul,w
  4070  033D  00DD               	movwf	??_adcConvertMM
  4071  033E  0947               	comf	?___wmul+1,w
  4072  033F  00DE               	movwf	??_adcConvertMM+1
  4073  0340  0ADD               	incf	??_adcConvertMM,f
  4074  0341  1903               	skipnz
  4075  0342  0ADE               	incf	??_adcConvertMM+1,f
  4076  0343  085D               	movf	??_adcConvertMM,w
  4077  0344  3E48               	addlw	72
  4078  0345  00DF               	movwf	??_adcConvertMM+2
  4079  0346  085E               	movf	??_adcConvertMM+1,w
  4080  0347  1803               	skipnc
  4081  0348  3E01               	addlw	1
  4082  0349  3E26               	addlw	38
  4083  034A  00E0               	movwf	??_adcConvertMM+3
  4084  034B  1003               	clrc
  4085  034C  0CE0               	rrf	??_adcConvertMM+3,f
  4086  034D  0CDF               	rrf	??_adcConvertMM+2,f
  4087  034E  1003               	clrc
  4088  034F  0CE0               	rrf	??_adcConvertMM+3,f
  4089  0350  0CDF               	rrf	??_adcConvertMM+2,f
  4090  0351  1003               	clrc
  4091  0352  0CE0               	rrf	??_adcConvertMM+3,f
  4092  0353  0CDF               	rrf	??_adcConvertMM+2,f
  4093  0354  085F               	movf	??_adcConvertMM+2,w
  4094  0355  3EE2               	addlw	226
  4095  0356  00A0               	movwf	_Distance	;volatile
  4096  0357  0860               	movf	??_adcConvertMM+3,w
  4097  0358  1803               	skipnc
  4098  0359  3E01               	addlw	1
  4099  035A  3E04               	addlw	4
  4100  035B  00A1               	movwf	_Distance+1	;volatile
  4101  035C                     l1750:	
  4102                           
  4103                           ;ADC.c: 94: if(adcRAW < 90 || adcRAW >= 517)
  4104  035C  3000               	movlw	0
  4105  035D  025C               	subwf	adcConvertMM@adcRAW+1,w
  4106  035E  305A               	movlw	90
  4107  035F  1903               	skipnz
  4108  0360  025B               	subwf	adcConvertMM@adcRAW,w
  4109  0361  1C03               	skipc
  4110  0362  2B6A               	goto	l1754
  4111  0363  3002               	movlw	2
  4112  0364  025C               	subwf	adcConvertMM@adcRAW+1,w
  4113  0365  3005               	movlw	5
  4114  0366  1903               	skipnz
  4115  0367  025B               	subwf	adcConvertMM@adcRAW,w
  4116  0368  1C03               	skipc
  4117  0369  0008               	return
  4118  036A                     l1754:	
  4119                           
  4120                           ;ADC.c: 95: Distance = 0;
  4121  036A  01A0               	clrf	_Distance	;volatile
  4122  036B  01A1               	clrf	_Distance+1	;volatile
  4123  036C  0008               	return
  4124  036D                     __end_of_adcConvertMM:	
  4125                           ;ADC.c: 97: return(Distance);
  4126                           ;	Return value of _adcConvertMM is never used
  4127                           
  4128                           
  4129                           	psect	text20
  4130  0F0C                     __ptext20:	
  4131 ;; *************** function ___wmul *****************
  4132 ;; Defined at:
  4133 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4136 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;  product         2    4[BANK0 ] unsigned int 
  4139 ;; Return value:  Size  Location     Type
  4140 ;;                  2    0[BANK0 ] unsigned int 
  4141 ;; Registers used:
  4142 ;;		wreg, status,2, status,0
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4148 ;;      Params:         0       4       0       0       0
  4149 ;;      Locals:         0       2       0       0       0
  4150 ;;      Temps:          0       0       0       0       0
  4151 ;;      Totals:         0       6       0       0       0
  4152 ;;Total ram usage:        6 bytes
  4153 ;; Hardware stack levels used:    1
  4154 ;; Hardware stack levels required when called:    2
  4155 ;; This function calls:
  4156 ;;		Nothing
  4157 ;; This function is called by:
  4158 ;;		_adcConvertMM
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           
  4163                           ;psect for function ___wmul
  4164  0F0C                     ___wmul:	
  4165                           
  4166                           ;incstack = 0
  4167                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4168  0F0C  1283               	bcf	3,5	;RP0=0, select bank0
  4169  0F0D  1303               	bcf	3,6	;RP1=0, select bank0
  4170  0F0E  01CA               	clrf	___wmul@product
  4171  0F0F  01CB               	clrf	___wmul@product+1
  4172  0F10                     l1536:	
  4173  0F10  1C46               	btfss	___wmul@multiplier,0
  4174  0F11  2F18               	goto	l522
  4175  0F12  0848               	movf	___wmul@multiplicand,w
  4176  0F13  07CA               	addwf	___wmul@product,f
  4177  0F14  1803               	skipnc
  4178  0F15  0ACB               	incf	___wmul@product+1,f
  4179  0F16  0849               	movf	___wmul@multiplicand+1,w
  4180  0F17  07CB               	addwf	___wmul@product+1,f
  4181  0F18                     l522:	
  4182  0F18  3001               	movlw	1
  4183  0F19                     u1005:	
  4184  0F19  1003               	clrc
  4185  0F1A  0DC8               	rlf	___wmul@multiplicand,f
  4186  0F1B  0DC9               	rlf	___wmul@multiplicand+1,f
  4187  0F1C  3EFF               	addlw	-1
  4188  0F1D  1D03               	skipz
  4189  0F1E  2F19               	goto	u1005
  4190  0F1F  3001               	movlw	1
  4191  0F20                     u1015:	
  4192  0F20  1003               	clrc
  4193  0F21  0CC7               	rrf	___wmul@multiplier+1,f
  4194  0F22  0CC6               	rrf	___wmul@multiplier,f
  4195  0F23  3EFF               	addlw	-1
  4196  0F24  1D03               	skipz
  4197  0F25  2F20               	goto	u1015
  4198  0F26  0846               	movf	___wmul@multiplier,w
  4199  0F27  0447               	iorwf	___wmul@multiplier+1,w
  4200  0F28  1D03               	btfss	3,2
  4201  0F29  2F10               	goto	l1536
  4202  0F2A  084B               	movf	___wmul@product+1,w
  4203  0F2B  00C7               	movwf	?___wmul+1
  4204  0F2C  084A               	movf	___wmul@product,w
  4205  0F2D  00C6               	movwf	?___wmul
  4206  0F2E  0008               	return
  4207  0F2F                     __end_of___wmul:	
  4208                           
  4209                           	psect	text21
  4210  0F7D                     __ptext21:	
  4211 ;; *************** function ___lwdiv *****************
  4212 ;; Defined at:
  4213 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  4214 ;; Parameters:    Size  Location     Type
  4215 ;;  divisor         2    6[BANK0 ] unsigned int 
  4216 ;;  dividend        2    8[BANK0 ] unsigned int 
  4217 ;; Auto vars:     Size  Location     Type
  4218 ;;  quotient        2   11[BANK0 ] unsigned int 
  4219 ;;  counter         1   13[BANK0 ] unsigned char 
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  2    6[BANK0 ] unsigned int 
  4222 ;; Registers used:
  4223 ;;		wreg, status,2, status,0
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4229 ;;      Params:         0       4       0       0       0
  4230 ;;      Locals:         0       3       0       0       0
  4231 ;;      Temps:          0       1       0       0       0
  4232 ;;      Totals:         0       8       0       0       0
  4233 ;;Total ram usage:        8 bytes
  4234 ;; Hardware stack levels used:    1
  4235 ;; Hardware stack levels required when called:    2
  4236 ;; This function calls:
  4237 ;;		Nothing
  4238 ;; This function is called by:
  4239 ;;		_adcConvertMM
  4240 ;; This function uses a non-reentrant model
  4241 ;;
  4242                           
  4243                           
  4244                           ;psect for function ___lwdiv
  4245  0F7D                     ___lwdiv:	
  4246                           
  4247                           ;incstack = 0
  4248                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4249  0F7D  1283               	bcf	3,5	;RP0=0, select bank0
  4250  0F7E  1303               	bcf	3,6	;RP1=0, select bank0
  4251  0F7F  01D1               	clrf	___lwdiv@quotient
  4252  0F80  01D2               	clrf	___lwdiv@quotient+1
  4253  0F81  084C               	movf	___lwdiv@divisor,w
  4254  0F82  044D               	iorwf	___lwdiv@divisor+1,w
  4255  0F83  1903               	btfsc	3,2
  4256  0F84  2FB6               	goto	l1610
  4257  0F85  01D3               	clrf	___lwdiv@counter
  4258  0F86  0AD3               	incf	___lwdiv@counter,f
  4259  0F87                     l1598:	
  4260  0F87  1BCD               	btfsc	___lwdiv@divisor+1,7
  4261  0F88  2F95               	goto	l1600
  4262  0F89  3001               	movlw	1
  4263  0F8A                     u1145:	
  4264  0F8A  1003               	clrc
  4265  0F8B  0DCC               	rlf	___lwdiv@divisor,f
  4266  0F8C  0DCD               	rlf	___lwdiv@divisor+1,f
  4267  0F8D  3EFF               	addlw	-1
  4268  0F8E  1D03               	skipz
  4269  0F8F  2F8A               	goto	u1145
  4270  0F90  3001               	movlw	1
  4271  0F91  00D0               	movwf	??___lwdiv
  4272  0F92  0850               	movf	??___lwdiv,w
  4273  0F93  07D3               	addwf	___lwdiv@counter,f
  4274  0F94  2F87               	goto	l1598
  4275  0F95                     l1600:	
  4276  0F95  3001               	movlw	1
  4277  0F96                     u1165:	
  4278  0F96  1003               	clrc
  4279  0F97  0DD1               	rlf	___lwdiv@quotient,f
  4280  0F98  0DD2               	rlf	___lwdiv@quotient+1,f
  4281  0F99  3EFF               	addlw	-1
  4282  0F9A  1D03               	skipz
  4283  0F9B  2F96               	goto	u1165
  4284  0F9C  084D               	movf	___lwdiv@divisor+1,w
  4285  0F9D  024F               	subwf	___lwdiv@dividend+1,w
  4286  0F9E  1D03               	skipz
  4287  0F9F  2FA2               	goto	u1175
  4288  0FA0  084C               	movf	___lwdiv@divisor,w
  4289  0FA1  024E               	subwf	___lwdiv@dividend,w
  4290  0FA2                     u1175:	
  4291  0FA2  1C03               	skipc
  4292  0FA3  2FAB               	goto	l1606
  4293  0FA4  084C               	movf	___lwdiv@divisor,w
  4294  0FA5  02CE               	subwf	___lwdiv@dividend,f
  4295  0FA6  084D               	movf	___lwdiv@divisor+1,w
  4296  0FA7  1C03               	skipc
  4297  0FA8  03CF               	decf	___lwdiv@dividend+1,f
  4298  0FA9  02CF               	subwf	___lwdiv@dividend+1,f
  4299  0FAA  1451               	bsf	___lwdiv@quotient,0
  4300  0FAB                     l1606:	
  4301  0FAB  3001               	movlw	1
  4302  0FAC                     u1185:	
  4303  0FAC  1003               	clrc
  4304  0FAD  0CCD               	rrf	___lwdiv@divisor+1,f
  4305  0FAE  0CCC               	rrf	___lwdiv@divisor,f
  4306  0FAF  3EFF               	addlw	-1
  4307  0FB0  1D03               	skipz
  4308  0FB1  2FAC               	goto	u1185
  4309  0FB2  3001               	movlw	1
  4310  0FB3  02D3               	subwf	___lwdiv@counter,f
  4311  0FB4  1D03               	btfss	3,2
  4312  0FB5  2F95               	goto	l1600
  4313  0FB6                     l1610:	
  4314  0FB6  0852               	movf	___lwdiv@quotient+1,w
  4315  0FB7  00CD               	movwf	?___lwdiv+1
  4316  0FB8  0851               	movf	___lwdiv@quotient,w
  4317  0FB9  00CC               	movwf	?___lwdiv
  4318  0FBA  0008               	return
  4319  0FBB                     __end_of___lwdiv:	
  4320                           
  4321                           	psect	text22
  4322  05A5                     __ptext22:	
  4323 ;; *************** function ___aldiv *****************
  4324 ;; Defined at:
  4325 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;  divisor         4    6[BANK0 ] long 
  4328 ;;  dividend        4   10[BANK0 ] long 
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;  quotient        4   17[BANK0 ] long 
  4331 ;;  sign            1   16[BANK0 ] unsigned char 
  4332 ;;  counter         1   15[BANK0 ] unsigned char 
  4333 ;; Return value:  Size  Location     Type
  4334 ;;                  4    6[BANK0 ] long 
  4335 ;; Registers used:
  4336 ;;		wreg, status,2, status,0
  4337 ;; Tracked objects:
  4338 ;;		On entry : 0/0
  4339 ;;		On exit  : 0/0
  4340 ;;		Unchanged: 0/0
  4341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4342 ;;      Params:         0       8       0       0       0
  4343 ;;      Locals:         0       6       0       0       0
  4344 ;;      Temps:          0       1       0       0       0
  4345 ;;      Totals:         0      15       0       0       0
  4346 ;;Total ram usage:       15 bytes
  4347 ;; Hardware stack levels used:    1
  4348 ;; Hardware stack levels required when called:    2
  4349 ;; This function calls:
  4350 ;;		Nothing
  4351 ;; This function is called by:
  4352 ;;		_adcConvertMM
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356                           
  4357                           ;psect for function ___aldiv
  4358  05A5                     ___aldiv:	
  4359                           
  4360                           ;incstack = 0
  4361                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4362  05A5  1283               	bcf	3,5	;RP0=0, select bank0
  4363  05A6  1303               	bcf	3,6	;RP1=0, select bank0
  4364  05A7  01D6               	clrf	___aldiv@sign
  4365  05A8  1FCF               	btfss	___aldiv@divisor+3,7
  4366  05A9  2DB7               	goto	l577
  4367  05AA  09CC               	comf	___aldiv@divisor,f
  4368  05AB  09CD               	comf	___aldiv@divisor+1,f
  4369  05AC  09CE               	comf	___aldiv@divisor+2,f
  4370  05AD  09CF               	comf	___aldiv@divisor+3,f
  4371  05AE  0ACC               	incf	___aldiv@divisor,f
  4372  05AF  1903               	skipnz
  4373  05B0  0ACD               	incf	___aldiv@divisor+1,f
  4374  05B1  1903               	skipnz
  4375  05B2  0ACE               	incf	___aldiv@divisor+2,f
  4376  05B3  1903               	skipnz
  4377  05B4  0ACF               	incf	___aldiv@divisor+3,f
  4378  05B5  01D6               	clrf	___aldiv@sign
  4379  05B6  0AD6               	incf	___aldiv@sign,f
  4380  05B7                     l577:	
  4381  05B7  1FD3               	btfss	___aldiv@dividend+3,7
  4382  05B8  2DC8               	goto	l1558
  4383  05B9  09D0               	comf	___aldiv@dividend,f
  4384  05BA  09D1               	comf	___aldiv@dividend+1,f
  4385  05BB  09D2               	comf	___aldiv@dividend+2,f
  4386  05BC  09D3               	comf	___aldiv@dividend+3,f
  4387  05BD  0AD0               	incf	___aldiv@dividend,f
  4388  05BE  1903               	skipnz
  4389  05BF  0AD1               	incf	___aldiv@dividend+1,f
  4390  05C0  1903               	skipnz
  4391  05C1  0AD2               	incf	___aldiv@dividend+2,f
  4392  05C2  1903               	skipnz
  4393  05C3  0AD3               	incf	___aldiv@dividend+3,f
  4394  05C4  3001               	movlw	1
  4395  05C5  00D4               	movwf	??___aldiv
  4396  05C6  0854               	movf	??___aldiv,w
  4397  05C7  06D6               	xorwf	___aldiv@sign,f
  4398  05C8                     l1558:	
  4399  05C8  3000               	movlw	0
  4400  05C9  00DA               	movwf	___aldiv@quotient+3
  4401  05CA  3000               	movlw	0
  4402  05CB  00D9               	movwf	___aldiv@quotient+2
  4403  05CC  3000               	movlw	0
  4404  05CD  00D8               	movwf	___aldiv@quotient+1
  4405  05CE  3000               	movlw	0
  4406  05CF  00D7               	movwf	___aldiv@quotient
  4407  05D0  084F               	movf	___aldiv@divisor+3,w
  4408  05D1  044E               	iorwf	___aldiv@divisor+2,w
  4409  05D2  044D               	iorwf	___aldiv@divisor+1,w
  4410  05D3  044C               	iorwf	___aldiv@divisor,w
  4411  05D4  1903               	skipnz
  4412  05D5  2E1D               	goto	l1580
  4413  05D6  01D5               	clrf	___aldiv@counter
  4414  05D7  0AD5               	incf	___aldiv@counter,f
  4415  05D8                     l1566:	
  4416  05D8  1BCF               	btfsc	___aldiv@divisor+3,7
  4417  05D9  2DE8               	goto	l1568
  4418  05DA  3001               	movlw	1
  4419  05DB  00D4               	movwf	??___aldiv
  4420  05DC                     u1065:	
  4421  05DC  1003               	clrc
  4422  05DD  0DCC               	rlf	___aldiv@divisor,f
  4423  05DE  0DCD               	rlf	___aldiv@divisor+1,f
  4424  05DF  0DCE               	rlf	___aldiv@divisor+2,f
  4425  05E0  0DCF               	rlf	___aldiv@divisor+3,f
  4426  05E1  0BD4               	decfsz	??___aldiv,f
  4427  05E2  2DDC               	goto	u1065
  4428  05E3  3001               	movlw	1
  4429  05E4  00D4               	movwf	??___aldiv
  4430  05E5  0854               	movf	??___aldiv,w
  4431  05E6  07D5               	addwf	___aldiv@counter,f
  4432  05E7  2DD8               	goto	l1566
  4433  05E8                     l1568:	
  4434  05E8  3001               	movlw	1
  4435  05E9  00D4               	movwf	??___aldiv
  4436  05EA                     u1085:	
  4437  05EA  1003               	clrc
  4438  05EB  0DD7               	rlf	___aldiv@quotient,f
  4439  05EC  0DD8               	rlf	___aldiv@quotient+1,f
  4440  05ED  0DD9               	rlf	___aldiv@quotient+2,f
  4441  05EE  0DDA               	rlf	___aldiv@quotient+3,f
  4442  05EF  0BD4               	decfsz	??___aldiv,f
  4443  05F0  2DEA               	goto	u1085
  4444  05F1  084F               	movf	___aldiv@divisor+3,w
  4445  05F2  0253               	subwf	___aldiv@dividend+3,w
  4446  05F3  1D03               	skipz
  4447  05F4  2DFF               	goto	u1095
  4448  05F5  084E               	movf	___aldiv@divisor+2,w
  4449  05F6  0252               	subwf	___aldiv@dividend+2,w
  4450  05F7  1D03               	skipz
  4451  05F8  2DFF               	goto	u1095
  4452  05F9  084D               	movf	___aldiv@divisor+1,w
  4453  05FA  0251               	subwf	___aldiv@dividend+1,w
  4454  05FB  1D03               	skipz
  4455  05FC  2DFF               	goto	u1095
  4456  05FD  084C               	movf	___aldiv@divisor,w
  4457  05FE  0250               	subwf	___aldiv@dividend,w
  4458  05FF                     u1095:	
  4459  05FF  1C03               	skipc
  4460  0600  2E10               	goto	l1576
  4461  0601  084C               	movf	___aldiv@divisor,w
  4462  0602  02D0               	subwf	___aldiv@dividend,f
  4463  0603  084D               	movf	___aldiv@divisor+1,w
  4464  0604  1C03               	skipc
  4465  0605  0F4D               	incfsz	___aldiv@divisor+1,w
  4466  0606  02D1               	subwf	___aldiv@dividend+1,f
  4467  0607  084E               	movf	___aldiv@divisor+2,w
  4468  0608  1C03               	skipc
  4469  0609  0F4E               	incfsz	___aldiv@divisor+2,w
  4470  060A  02D2               	subwf	___aldiv@dividend+2,f
  4471  060B  084F               	movf	___aldiv@divisor+3,w
  4472  060C  1C03               	skipc
  4473  060D  0F4F               	incfsz	___aldiv@divisor+3,w
  4474  060E  02D3               	subwf	___aldiv@dividend+3,f
  4475  060F  1457               	bsf	___aldiv@quotient,0
  4476  0610                     l1576:	
  4477  0610  3001               	movlw	1
  4478  0611                     u1105:	
  4479  0611  1003               	clrc
  4480  0612  0CCF               	rrf	___aldiv@divisor+3,f
  4481  0613  0CCE               	rrf	___aldiv@divisor+2,f
  4482  0614  0CCD               	rrf	___aldiv@divisor+1,f
  4483  0615  0CCC               	rrf	___aldiv@divisor,f
  4484  0616  3EFF               	addlw	-1
  4485  0617  1D03               	skipz
  4486  0618  2E11               	goto	u1105
  4487  0619  3001               	movlw	1
  4488  061A  02D5               	subwf	___aldiv@counter,f
  4489  061B  1D03               	btfss	3,2
  4490  061C  2DE8               	goto	l1568
  4491  061D                     l1580:	
  4492  061D  0856               	movf	___aldiv@sign,w
  4493  061E  1903               	btfsc	3,2
  4494  061F  2E2B               	goto	l1584
  4495  0620  09D7               	comf	___aldiv@quotient,f
  4496  0621  09D8               	comf	___aldiv@quotient+1,f
  4497  0622  09D9               	comf	___aldiv@quotient+2,f
  4498  0623  09DA               	comf	___aldiv@quotient+3,f
  4499  0624  0AD7               	incf	___aldiv@quotient,f
  4500  0625  1903               	skipnz
  4501  0626  0AD8               	incf	___aldiv@quotient+1,f
  4502  0627  1903               	skipnz
  4503  0628  0AD9               	incf	___aldiv@quotient+2,f
  4504  0629  1903               	skipnz
  4505  062A  0ADA               	incf	___aldiv@quotient+3,f
  4506  062B                     l1584:	
  4507  062B  085A               	movf	___aldiv@quotient+3,w
  4508  062C  00CF               	movwf	?___aldiv+3
  4509  062D  0859               	movf	___aldiv@quotient+2,w
  4510  062E  00CE               	movwf	?___aldiv+2
  4511  062F  0858               	movf	___aldiv@quotient+1,w
  4512  0630  00CD               	movwf	?___aldiv+1
  4513  0631  0857               	movf	___aldiv@quotient,w
  4514  0632  00CC               	movwf	?___aldiv
  4515  0633  0008               	return
  4516  0634                     __end_of___aldiv:	
  4517                           
  4518                           	psect	text23
  4519  0780                     __ptext23:	
  4520 ;; *************** function _isr *****************
  4521 ;; Defined at:
  4522 ;;		line 26 in file "main.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;		None
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;		None
  4527 ;; Return value:  Size  Location     Type
  4528 ;;                  1    wreg      void 
  4529 ;; Registers used:
  4530 ;;		wreg, status,2, status,0, pclath, cstack
  4531 ;; Tracked objects:
  4532 ;;		On entry : 0/0
  4533 ;;		On exit  : 0/0
  4534 ;;		Unchanged: 0/0
  4535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4536 ;;      Params:         0       0       0       0       0
  4537 ;;      Locals:         0       0       0       0       0
  4538 ;;      Temps:          5       0       0       0       0
  4539 ;;      Totals:         5       0       0       0       0
  4540 ;;Total ram usage:        5 bytes
  4541 ;; Hardware stack levels used:    1
  4542 ;; Hardware stack levels required when called:    1
  4543 ;; This function calls:
  4544 ;;		___lwmod
  4545 ;; This function is called by:
  4546 ;;		Interrupt level 1
  4547 ;; This function uses a non-reentrant model
  4548 ;;
  4549                           
  4550                           
  4551                           ;psect for function _isr
  4552  0780                     _isr:	
  4553                           
  4554                           ;main.c: 28: if(TMR0IF){
  4555  0780  1D0B               	btfss	11,2	;volatile
  4556  0781  2FBB               	goto	i1l99
  4557                           
  4558                           ;main.c: 29: TMR0IF = 0;
  4559  0782  110B               	bcf	11,2	;volatile
  4560                           
  4561                           ;main.c: 30: TMR0 = 100;
  4562  0783  3064               	movlw	100
  4563  0784  0081               	movwf	1	;volatile
  4564                           
  4565                           ;main.c: 33: if(time_count % 1 == 0) {
  4566  0785  3001               	movlw	1
  4567  0786  07BA               	addwf	_time_count,f	;volatile
  4568  0787  1803               	skipnc
  4569  0788  0ABB               	incf	_time_count+1,f	;volatile
  4570  0789  3000               	movlw	0
  4571  078A  07BB               	addwf	_time_count+1,f	;volatile
  4572                           
  4573                           ;main.c: 35: RC2 = 1; __nop(); RC2 = 0;;
  4574  078B  1507               	bsf	7,2	;volatile
  4575  078C  0000               	nop
  4576  078D  1283               	bcf	3,5	;RP0=0, select bank0
  4577  078E  1303               	bcf	3,6	;RP1=0, select bank0
  4578  078F  1107               	bcf	7,2	;volatile
  4579                           
  4580                           ;main.c: 36: }
  4581                           ;main.c: 38: if(time_count % 1000 == 0){
  4582  0790  30E8               	movlw	232
  4583  0791  00F0               	movwf	___lwmod@divisor
  4584  0792  3003               	movlw	3
  4585  0793  00F1               	movwf	___lwmod@divisor+1
  4586  0794  083B               	movf	_time_count+1,w	;volatile
  4587  0795  00F3               	movwf	___lwmod@dividend+1
  4588  0796  083A               	movf	_time_count,w	;volatile
  4589  0797  00F2               	movwf	___lwmod@dividend
  4590  0798  120A  118A  27C6  120A  118A  	fcall	___lwmod
  4591  079D  0870               	movf	?___lwmod,w
  4592  079E  0471               	iorwf	?___lwmod+1,w
  4593  079F  1D03               	btfss	3,2
  4594  07A0  2FA7               	goto	i1l2020
  4595                           
  4596                           ;main.c: 39: RB0 = !RB0;
  4597  07A1  3001               	movlw	1
  4598  07A2  1283               	bcf	3,5	;RP0=0, select bank0
  4599  07A3  1303               	bcf	3,6	;RP1=0, select bank0
  4600  07A4  0686               	xorwf	6,f
  4601                           
  4602                           ;main.c: 41: time_count = 0;
  4603  07A5  01BA               	clrf	_time_count	;volatile
  4604  07A6  01BB               	clrf	_time_count+1	;volatile
  4605  07A7                     i1l2020:	
  4606                           
  4607                           ;main.c: 42: }
  4608                           ;main.c: 43: if (!RB0 == 1)
  4609  07A7  1283               	bcf	3,5	;RP0=0, select bank0
  4610  07A8  1303               	bcf	3,6	;RP1=0, select bank0
  4611  07A9  1806               	btfsc	6,0	;volatile
  4612  07AA  2FAF               	goto	i1l2024
  4613                           
  4614                           ;main.c: 44: PB8Counter++;
  4615  07AB  3001               	movlw	1
  4616  07AC  00F6               	movwf	??_isr
  4617  07AD  0876               	movf	??_isr,w
  4618  07AE  07C0               	addwf	_PB8Counter,f
  4619  07AF                     i1l2024:	
  4620                           
  4621                           ;main.c: 45: if (!RB1 == 1)
  4622  07AF  1886               	btfsc	6,1	;volatile
  4623  07B0  2FB5               	goto	i1l2028
  4624                           
  4625                           ;main.c: 46: PB7Counter++;
  4626  07B1  3001               	movlw	1
  4627  07B2  00F6               	movwf	??_isr
  4628  07B3  0876               	movf	??_isr,w
  4629  07B4  07BF               	addwf	_PB7Counter,f
  4630  07B5                     i1l2028:	
  4631                           
  4632                           ;main.c: 47: if (!RB2 == 1)
  4633  07B5  1906               	btfsc	6,2	;volatile
  4634  07B6  2FBB               	goto	i1l99
  4635                           
  4636                           ;main.c: 48: PB6Counter++;
  4637  07B7  3001               	movlw	1
  4638  07B8  00F6               	movwf	??_isr
  4639  07B9  0876               	movf	??_isr,w
  4640  07BA  07BE               	addwf	_PB6Counter,f
  4641  07BB                     i1l99:	
  4642  07BB  087A               	movf	??_isr+4,w
  4643  07BC  00FF               	movwf	127
  4644  07BD  0879               	movf	??_isr+3,w
  4645  07BE  008A               	movwf	10
  4646  07BF  0878               	movf	??_isr+2,w
  4647  07C0  0084               	movwf	4
  4648  07C1  0E77               	swapf	(??_isr+1)^(0+-128),w
  4649  07C2  0083               	movwf	3
  4650  07C3  0EFE               	swapf	126,f
  4651  07C4  0E7E               	swapf	126,w
  4652  07C5  0009               	retfie
  4653  07C6                     __end_of_isr:	
  4654                           
  4655                           	psect	intentry
  4656  0004                     __pintentry:	
  4657                           ;incstack = 0
  4658                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  4659                           
  4660  0004                     interrupt_function:	
  4661  007E                     saved_w	set	btemp
  4662  0004  00FE               	movwf	btemp
  4663  0005  0E03               	swapf	3,w
  4664  0006  00F7               	movwf	??_isr+1
  4665  0007  0804               	movf	4,w
  4666  0008  00F8               	movwf	??_isr+2
  4667  0009  080A               	movf	10,w
  4668  000A  00F9               	movwf	??_isr+3
  4669  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4670  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4671  000D  087F               	movf	btemp+1,w
  4672  000E  00FA               	movwf	??_isr+4
  4673  000F  120A  118A  2F80   	ljmp	_isr
  4674                           
  4675                           	psect	text24
  4676  07C6                     __ptext24:	
  4677 ;; *************** function ___lwmod *****************
  4678 ;; Defined at:
  4679 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  4680 ;; Parameters:    Size  Location     Type
  4681 ;;  divisor         2    0[COMMON] unsigned int 
  4682 ;;  dividend        2    2[COMMON] unsigned int 
  4683 ;; Auto vars:     Size  Location     Type
  4684 ;;  counter         1    5[COMMON] unsigned char 
  4685 ;; Return value:  Size  Location     Type
  4686 ;;                  2    0[COMMON] unsigned int 
  4687 ;; Registers used:
  4688 ;;		wreg, status,2, status,0
  4689 ;; Tracked objects:
  4690 ;;		On entry : 0/0
  4691 ;;		On exit  : 0/0
  4692 ;;		Unchanged: 0/0
  4693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4694 ;;      Params:         4       0       0       0       0
  4695 ;;      Locals:         1       0       0       0       0
  4696 ;;      Temps:          1       0       0       0       0
  4697 ;;      Totals:         6       0       0       0       0
  4698 ;;Total ram usage:        6 bytes
  4699 ;; Hardware stack levels used:    1
  4700 ;; This function calls:
  4701 ;;		Nothing
  4702 ;; This function is called by:
  4703 ;;		_isr
  4704 ;; This function uses a non-reentrant model
  4705 ;;
  4706                           
  4707                           
  4708                           ;psect for function ___lwmod
  4709  07C6                     ___lwmod:	
  4710                           
  4711                           ;incstack = 0
  4712                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4713  07C6  0870               	movf	___lwmod@divisor,w
  4714  07C7  0471               	iorwf	___lwmod@divisor+1,w
  4715  07C8  1903               	btfsc	3,2
  4716  07C9  2FF3               	goto	i1l1998
  4717  07CA  01F5               	clrf	___lwmod@counter
  4718  07CB  0AF5               	incf	___lwmod@counter,f
  4719  07CC                     i1l1988:	
  4720  07CC  1BF1               	btfsc	___lwmod@divisor+1,7
  4721  07CD  2FDA               	goto	i1l1990
  4722  07CE  3001               	movlw	1
  4723  07CF                     u170_25:	
  4724  07CF  1003               	clrc
  4725  07D0  0DF0               	rlf	___lwmod@divisor,f
  4726  07D1  0DF1               	rlf	___lwmod@divisor+1,f
  4727  07D2  3EFF               	addlw	-1
  4728  07D3  1D03               	skipz
  4729  07D4  2FCF               	goto	u170_25
  4730  07D5  3001               	movlw	1
  4731  07D6  00F4               	movwf	??___lwmod
  4732  07D7  0874               	movf	??___lwmod,w
  4733  07D8  07F5               	addwf	___lwmod@counter,f
  4734  07D9  2FCC               	goto	i1l1988
  4735  07DA                     i1l1990:	
  4736  07DA  0871               	movf	___lwmod@divisor+1,w
  4737  07DB  0273               	subwf	___lwmod@dividend+1,w
  4738  07DC  1D03               	skipz
  4739  07DD  2FE0               	goto	u172_25
  4740  07DE  0870               	movf	___lwmod@divisor,w
  4741  07DF  0272               	subwf	___lwmod@dividend,w
  4742  07E0                     u172_25:	
  4743  07E0  1C03               	skipc
  4744  07E1  2FE8               	goto	i1l1994
  4745  07E2  0870               	movf	___lwmod@divisor,w
  4746  07E3  02F2               	subwf	___lwmod@dividend,f
  4747  07E4  0871               	movf	___lwmod@divisor+1,w
  4748  07E5  1C03               	skipc
  4749  07E6  03F3               	decf	___lwmod@dividend+1,f
  4750  07E7  02F3               	subwf	___lwmod@dividend+1,f
  4751  07E8                     i1l1994:	
  4752  07E8  3001               	movlw	1
  4753  07E9                     u173_25:	
  4754  07E9  1003               	clrc
  4755  07EA  0CF1               	rrf	___lwmod@divisor+1,f
  4756  07EB  0CF0               	rrf	___lwmod@divisor,f
  4757  07EC  3EFF               	addlw	-1
  4758  07ED  1D03               	skipz
  4759  07EE  2FE9               	goto	u173_25
  4760  07EF  3001               	movlw	1
  4761  07F0  02F5               	subwf	___lwmod@counter,f
  4762  07F1  1D03               	btfss	3,2
  4763  07F2  2FDA               	goto	i1l1990
  4764  07F3                     i1l1998:	
  4765  07F3  0873               	movf	___lwmod@dividend+1,w
  4766  07F4  00F1               	movwf	?___lwmod+1
  4767  07F5  0872               	movf	___lwmod@dividend,w
  4768  07F6  00F0               	movwf	?___lwmod
  4769  07F7  0008               	return
  4770  07F8                     __end_of___lwmod:	
  4771  007E                     btemp	set	126	;btemp
  4772  007E                     wtemp	set	126
  4773  007E                     wtemp0	set	126
  4774  0080                     wtemp1	set	128
  4775  0082                     wtemp2	set	130
  4776  0084                     wtemp3	set	132
  4777  0086                     wtemp4	set	134
  4778  0088                     wtemp5	set	136
  4779  007F                     wtemp6	set	127
  4780  007E                     ttemp	set	126
  4781  007E                     ttemp0	set	126
  4782  0081                     ttemp1	set	129
  4783  0084                     ttemp2	set	132
  4784  0087                     ttemp3	set	135
  4785  007F                     ttemp4	set	127
  4786  007E                     ltemp	set	126
  4787  007E                     ltemp0	set	126
  4788  0082                     ltemp1	set	130
  4789  0086                     ltemp2	set	134
  4790  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     35      75
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->___lwmod

Critical Paths under _main in BANK0

    _setupLCD->_lcdWriteControl
    _getDistTrav->_lcdWriteToDigitBCD
    _Drive->_ser_putch
    _ADCMain->_adcConvertMM
    _lcdWriteToDigitBCD->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl
    _adcConvertMM->___aldiv
    ___lwdiv->___wmul
    ___aldiv->___wmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    6381
                                             31 BANK0      4     4      0
                            _ADCMain
                              _Drive
                        _getDistTrav
                            _moveCCW
                             _moveCW
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      30
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      22
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _moveCW                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _moveCCW                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _getDistTrav                                          2     2      0     973
                                             15 BANK0      2     2      0
                            ___awdiv
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
                          _ser_getch
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _ser_getch                                            2     2      0       7
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     406
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _Drive                                                8     0      8    1170
                                              1 BANK0      8     0      8
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCMain                                              0     0      0    4141
                       _adcConvertMM
                             _getADC
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (2) _lcdWriteToDigitBCD                                  12    10      2     493
                                              3 BANK0     12    10      2
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (3) _lcdWriteData                                         3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _lcdSetCursor                                         1     1      0      45
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getADC                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _adcConvertMM                                        10     8      2    3603
                                             21 BANK0     10     8      2
                            ___aldiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1258
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     904
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     618
                                              6 BANK0     15     7      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  5     5      0     265
                                              6 COMMON     5     5      0
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCMain
     _adcConvertMM
       ___aldiv
         ___wmul (ARG)
       ___lwdiv
         ___wmul (ARG)
       ___wmul
     _getADC
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteToDigitBCD
       _lcdWriteData
   _Drive
     _ser_putch
   _getDistTrav
     ___awdiv
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteToDigitBCD
       _lcdWriteData
     _ser_getch
     _ser_putch
   _moveCCW
   _moveCW
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)
   ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     23      4B       5       93.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       E       1      100.0%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      59      12        0.0%
ABS                  0      0      59       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Sep 05 10:29:08 2016

                   __CFG_CP$OFF 0000                              _GO 00FA                    ___awdiv@sign 004C  
                            fsr 0004             ___wmul@multiplicand 0048                     Drive@speedH 0047  
                   Drive@speedL 0049                             l102 0399                             l231 0E8F  
                           l412 0FC4                             l421 0FFF                             l522 0F18  
                           l187 058B                             l294 0E64                             l288 0E70  
                           l577 05B7                             _GIE 005F                             _RB0 0030  
                           _RB1 0031                             _RB2 0032                             _RC2 003A  
                           _RE0 0048                             _RE1 0049                             _RE2 004A  
                  __CFG_CPD$OFF 0000                             _isr 0780                 __end_of_ADCMain 0F0C  
                           fsr0 0004                             indf 0000                    __CFG_FOSC$HS 0000  
                ??_lcdWriteData 0046                    __CFG_LVP$OFF 0000                            l2104 0474  
                          l2114 04A8                            l2050 03AD                            l2124 04E5  
                          l2062 03DB                            l2070 03F8                            l1600 0F95  
                          l2128 04F8                            l1610 0FB6                            l2058 03CA  
                          l2092 0449                            l2084 0422                            l2068 03E2  
                          l1606 0FAB                            l1702 0166                            l2094 045E  
                          l1536 0F10                            l1720 0223                            l1714 01E4  
                          l1650 055E                            l1642 0540                            l1580 061D  
                          l1732 02A1                            l1708 01A5                            l1660 057E  
                          l1644 0548                            l1636 051C                            l1900 070A  
                          l1566 05D8                            l1558 05C8                            l1750 035C  
                          l1726 0262                            l1654 056C                            l1638 0532  
                          l1902 0711                            l1584 062B                            l1576 0610  
                          l1568 05E8                            l1744 031F                            l1680 0FE8  
                          l1648 0556                            l1754 036A                            l1738 02E0  
                          l1690 0098                            l1682 0FF2                            l1906 0714  
                          l1676 0FD4                            l1772 06A9                            l1940 074A  
                          l1932 0746                            l1924 0742                            l1908 072E  
                          l1598 0F87                            l1678 0FDE                            l1790 06D5  
                          l1782 06B1                            l1766 069E                            l1870 06F4  
                          l1696 00FF                            l1784 06BF                            l1952 0755  
                          l1944 074C                            l1936 0748                            l1928 0744  
                          l1960 075C                            l1880 06FD                            l1872 06F9  
                          l1794 06E0                            l1962 0776                            l1956 0759  
                          l1948 074E                            l1892 0703                            l1884 06FF  
                          l1876 06FB                            l1798 06E8                            l1896 0705  
                          l1888 0701                            ?_isr 0070                            u1005 0F19  
                          u1015 0F20                            u1105 0611                            u1310 0076  
                          u1311 0077                            u2007 0ED1                            u1312 007C  
                          u1065 05DC                            u1145 0F8A                            u1313 007D  
                          u2017 0732                            u2027 077A                            u1340 00DD  
                          u1085 05EA                            u1165 0F96                            u1341 00DE  
                          u2037 0EA5                            u1342 00E3                            u1095 05FF  
                          u1175 0FA2                            u1343 00E4                            u2047 0EB8  
                          u1185 0FAC                            u1370 0144                            u1371 0145  
                          u1372 014A                            u1373 014B                            u1615 06C0  
                          u1625 06CC                            u1635 06D6                            u1825 03AB  
                          u1595 06B4                            u1835 03BF                            u1925 0472  
                          u1845 03D9                            u1935 04A6                            u1855 03E8  
                          u1945 04E3                            u1955 04F6                            _PEIE 005E  
                          u1885 0420                            u1895 0447                            u1977 042F  
                          u1987 0492                            _RCIF 0065                            u1997 04CB  
                          i1l99 07BB                            _TMR0 0001                            _TRMT 04C1  
                  __CFG_WRT$OFF 0000                            _radH 002E                            _radL 0030  
                          _main 036D                            _loop 0028                            btemp 007E  
                          ltemp 007E                            start 0012                            ttemp 007E  
                          wtemp 007E                           ??_isr 0076                 __end_of___aldiv 0634  
                         ?_main 0070                 __end_of___awdiv 06ED                   __CFG_WDTE$OFF 0000  
               ___awdiv@divisor 0046                 __end_of___lwdiv 0FBB                 __end_of___lwmod 07F8  
                 _totalDistTrav 003C                 ___awdiv@counter 004B                           _RCREG 001A  
                         _RCSTA 0018                           _SPBRG 0099                           _PORTA 0005  
                         _PORTC 0007                           _PORTD 0008                           _PORTE 0009  
                         _TRISA 0085                           _TRISB 0086                           _TRISC 0087  
                         _TRISD 0088                           _TRISE 0089                           _SSPIF 0063  
                         _TXREG 0019                           _TXSTA 0098                           _Drive 0F2F  
    __end_of_lcdWriteToDigitBCD 05A5                           _loop2 002A                 __end_of_moveCCW 0780  
                __pbitbssCOMMON 03E8                  __CFG_BOREN$OFF 0000                           pclath 000A  
                         ltemp0 007E                           ltemp1 0082                           ltemp2 0086  
                         ltemp3 0080                           ttemp0 007E                           ttemp1 0081  
                         ttemp2 0084                           ttemp3 0087                           ttemp4 007F  
                         status 0003                           wtemp0 007E                           wtemp1 0080  
                         wtemp2 0082                           wtemp3 0084                           wtemp4 0086  
                         wtemp5 0088                           wtemp6 007F                 __initialization 0015  
                  __end_of_main 050E                       ??_ADCMain 0065        __size_of_lcdWriteControl 0014  
          __size_of_getDistTrav 005E                          ??_main 0065            __end_of_lcdSetCursor 0E64  
                        ?_Drive 0047                          _ADCON0 001F                          _ADCON1 009F  
                        _ADRESH 001E                          _ADRESL 009E                ___awdiv@dividend 0048  
                        i1l2020 07A7                          i1l2024 07AF                          i1l2028 07B5  
                        i1l1990 07DA                          i1l1994 07E8                          i1l1988 07CC  
                        i1l1998 07F3                          u170_25 07CF                          u172_25 07E0  
                        u173_25 07E9                          _TMR0IE 005D                          _TMR0IF 005A  
                        _SSPCON 0014                          _SSPBUF 0013                  __CFG_PWRTE$OFF 0000  
                        _adcRAW 0022                       ??___aldiv 0054                          ___wmul 0F0C  
                        _getADC 0FBB                       ??___awdiv 004A            __end_of_lcdWriteData 0EAA  
                     ??___lwdiv 0050                       ??___lwmod 0074                          _moveCW 06ED  
              ___awdiv@quotient 004D                          _speedH 0032                          _speedL 0034  
                        _rxbyte 0042                __end_of_ser_init 0E88                __end_of_setupADC 0ED4  
                     ??_moveCCW 0046                __end_of_setupLCD 0F7D                __end_of_setupSPI 0EEC  
                        saved_w 007E                      _adcClosest 0069         __end_of__initialization 002B  
                 __end_of_Drive 0F54                  __pcstackCOMMON 0070                    __pidataBANK0 0E59  
                       ??_Drive 004F               ??_lcdWriteControl 0046                      __pbssBANK0 0020  
           lcdSetCursor@address 0049                      __pmaintext 036D                         ?___wmul 0046  
                       ?_getADC 0070                      __pintentry 0004           __size_of_lcdSetCursor 0009  
                       _ADCMain 0EEC                         ?_moveCW 0070              __size_of_ser_getch 0009  
            __size_of_ser_putch 000C                         _SSPSTAT 0094           __size_of_lcdWriteData 0013  
                  _lcdSetCursor 0E5B              _lcdWriteToDigitBCD 050E                       ?_ser_init 0070  
                     ?_setupADC 0070                       ?_setupLCD 0070                       ?_setupSPI 0070  
                       ___aldiv 05A5                         ___awdiv 0692                 __size_of___wmul 0023  
               __size_of_getADC 0045                         ___lwdiv 0F7D                         ___lwmod 07C6  
           ?_lcdWriteToDigitBCD 0049                         _degrees 0024                 __size_of_moveCW 004B  
                       __ptext1 0E88                         __ptext2 0ED4                         __ptext3 0F54  
                       __ptext4 0EBE                         __ptext5 0E79                         __ptext6 06ED  
                       __ptext7 0738                         __ptext8 0634                         __ptext9 0E64  
                  __size_of_isr 0046                         _lowByte 002C                         _moveCCW 0738  
              ___aldiv@dividend 0050                         clrloop0 07F9                    _lcdWriteData 0E97  
          end_of_initialization 002B            ??_lcdWriteToDigitBCD 004B               __end_of_ser_getch 0E6D  
             __end_of_ser_putch 0E79                      ??_ser_init 0046                      ??_setupADC 0046  
                    ??_setupLCD 0049                      ??_setupSPI 0046                ___aldiv@quotient 0057  
                 ??_getDistTrav 0055                      _time_count 003A              adcConvertMM@adcRAW 005B  
                     Drive@radH 004B                       Drive@radL 004D                   ?_spi_transfer 0070  
               ser_getch@rxbyte 0047                   ?_adcConvertMM 005B                 _lcdWriteControl 0EAA  
                __end_of___wmul 0F2F                  __end_of_getADC 1000                  __end_of_moveCW 0738  
           __end_of_getDistTrav 0692             start_initialization 0015                     __end_of_isr 07C6  
                ??_spi_transfer 0046                  ??_adcConvertMM 005D                        ??___wmul 004A  
                      ??_getADC 0046                     __pdataBANK0 0069                        ?_ADCMain 0070  
                      ??_moveCW 0046                    _negativeFlag 007C                     _FLAG_1000MS 03E8  
                   __pbssCOMMON 007B                       ___latbits 0002                   __pcstackBANK0 0046  
       __end_of_lcdWriteControl 0EBE                ___lwdiv@dividend 004E                        ?___aldiv 004C  
                      ?___awdiv 0046               __size_of_ser_init 000F                        ?___lwdiv 004C  
                      ?___lwmod 0070                     _getDistTrav 0634               __size_of_setupADC 0016  
             __size_of_setupLCD 0029               __size_of_setupSPI 0018                        ?_moveCCW 0070  
                __size_of_Drive 0025                ___lwdiv@quotient 0051                 main@controlByte 0068  
       lcdWriteControl@databyte 0048                 ___aldiv@divisor 004C               interrupt_function 0004  
               ___aldiv@counter 0055                  ___wmul@product 004A                      ser_putch@c 0046  
                     clear_ram0 07F8                       _ser_getch 0E64                       _ser_putch 0E6D  
                     _stepCount 0043                __size_of_ADCMain 0020            __end_of_spi_transfer 0E97  
             ___wmul@multiplier 0046                spi_transfer@data 0048                spi_transfer@temp 0047  
          __end_of_adcConvertMM 036D                     _controlByte 0041                        _Distance 0020  
          lcdWriteData@databyte 0048     __size_of_lcdWriteToDigitBCD 0097                      ?_ser_getch 0070  
              ?_lcdWriteControl 0070                      ?_ser_putch 0070                __size_of___aldiv 008F  
              __size_of___awdiv 005B                __size_of___lwdiv 003E                __size_of___lwmod 0032  
                   _currentStep 007B  lcdWriteToDigitBCD@TenThouDigit 0051                 ___lwdiv@divisor 004C  
              __size_of_moveCCW 0048                 ___lwdiv@counter 0053                        __ptext10 0692  
                      __ptext11 0F2F                        __ptext20 0F0C                        __ptext12 0E6D  
                      __ptext21 0F7D                        __ptext13 0EEC                        __ptext22 05A5  
                      __ptext14 050E                        __ptext23 0780                        __ptext15 0E97  
                      __ptext24 07C6                        __ptext16 0E5B                        __ptext17 0EAA  
                      __ptext18 0FBB                        __ptext19 002F                        _highByte 0044  
                      _distTrav 0026                   __size_of_main 01A1                        _ser_init 0E79  
                    _PB6Counter 003E                        _setupADC 0EBE                        _setupLCD 0F54  
                      _setupSPI 0ED4                      _PB7Counter 003F     lcdWriteToDigitBCD@HunsDigit 004D  
                    _PB8Counter 0040     lcdWriteToDigitBCD@OnesDigit 0053     lcdWriteToDigitBCD@TensDigit 004B  
   lcdWriteToDigitBCD@ThouDigit 004F                        intlevel1 0000                ___lwmod@dividend 0072  
                 ?_lcdSetCursor 0070                     ??_ser_getch 0046                     ??_ser_putch 0046  
         __size_of_spi_transfer 000F                    ?_getDistTrav 0070           __size_of_adcConvertMM 033E  
                    _OPTION_REG 0081                 ___lwmod@divisor 0070                 ___lwmod@counter 0075  
                  ___aldiv@sign 0056                   ?_lcdWriteData 0070          lcdWriteToDigitBCD@data 0049  
                  _spi_transfer 0E88                  ??_lcdSetCursor 0049                    _stepCountNeg 0038  
                   _stepClosest 0036                    _adcConvertMM 002F  
