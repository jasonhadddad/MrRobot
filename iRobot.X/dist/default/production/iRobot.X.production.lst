

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Sep 18 14:21:50 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     	;# 
    40  0001                     	;# 
    41  0002                     	;# 
    42  0003                     	;# 
    43  0004                     	;# 
    44  0005                     	;# 
    45  0006                     	;# 
    46  0007                     	;# 
    47  0008                     	;# 
    48  0009                     	;# 
    49  000A                     	;# 
    50  000B                     	;# 
    51  000C                     	;# 
    52  000D                     	;# 
    53  000E                     	;# 
    54  000E                     	;# 
    55  000F                     	;# 
    56  0010                     	;# 
    57  0011                     	;# 
    58  0012                     	;# 
    59  0013                     	;# 
    60  0014                     	;# 
    61  0015                     	;# 
    62  0015                     	;# 
    63  0016                     	;# 
    64  0017                     	;# 
    65  0018                     	;# 
    66  0019                     	;# 
    67  001A                     	;# 
    68  001B                     	;# 
    69  001B                     	;# 
    70  001C                     	;# 
    71  001D                     	;# 
    72  001E                     	;# 
    73  001F                     	;# 
    74  0081                     	;# 
    75  0085                     	;# 
    76  0086                     	;# 
    77  0087                     	;# 
    78  0088                     	;# 
    79  0089                     	;# 
    80  008C                     	;# 
    81  008D                     	;# 
    82  008E                     	;# 
    83  0091                     	;# 
    84  0092                     	;# 
    85  0093                     	;# 
    86  0094                     	;# 
    87  0098                     	;# 
    88  0099                     	;# 
    89  009C                     	;# 
    90  009D                     	;# 
    91  009E                     	;# 
    92  009F                     	;# 
    93  010C                     	;# 
    94  010D                     	;# 
    95  010E                     	;# 
    96  010F                     	;# 
    97  018C                     	;# 
    98  018D                     	;# 
    99  0000                     	;# 
   100  0001                     	;# 
   101  0002                     	;# 
   102  0003                     	;# 
   103  0004                     	;# 
   104  0005                     	;# 
   105  0006                     	;# 
   106  0007                     	;# 
   107  0008                     	;# 
   108  0009                     	;# 
   109  000A                     	;# 
   110  000B                     	;# 
   111  000C                     	;# 
   112  000D                     	;# 
   113  000E                     	;# 
   114  000E                     	;# 
   115  000F                     	;# 
   116  0010                     	;# 
   117  0011                     	;# 
   118  0012                     	;# 
   119  0013                     	;# 
   120  0014                     	;# 
   121  0015                     	;# 
   122  0015                     	;# 
   123  0016                     	;# 
   124  0017                     	;# 
   125  0018                     	;# 
   126  0019                     	;# 
   127  001A                     	;# 
   128  001B                     	;# 
   129  001B                     	;# 
   130  001C                     	;# 
   131  001D                     	;# 
   132  001E                     	;# 
   133  001F                     	;# 
   134  0081                     	;# 
   135  0085                     	;# 
   136  0086                     	;# 
   137  0087                     	;# 
   138  0088                     	;# 
   139  0089                     	;# 
   140  008C                     	;# 
   141  008D                     	;# 
   142  008E                     	;# 
   143  0091                     	;# 
   144  0092                     	;# 
   145  0093                     	;# 
   146  0094                     	;# 
   147  0098                     	;# 
   148  0099                     	;# 
   149  009C                     	;# 
   150  009D                     	;# 
   151  009E                     	;# 
   152  009F                     	;# 
   153  010C                     	;# 
   154  010D                     	;# 
   155  010E                     	;# 
   156  010F                     	;# 
   157  018C                     	;# 
   158  018D                     	;# 
   159  0000                     	;# 
   160  0001                     	;# 
   161  0002                     	;# 
   162  0003                     	;# 
   163  0004                     	;# 
   164  0005                     	;# 
   165  0006                     	;# 
   166  0007                     	;# 
   167  0008                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  000E                     	;# 
   175  000F                     	;# 
   176  0010                     	;# 
   177  0011                     	;# 
   178  0012                     	;# 
   179  0013                     	;# 
   180  0014                     	;# 
   181  0015                     	;# 
   182  0015                     	;# 
   183  0016                     	;# 
   184  0017                     	;# 
   185  0018                     	;# 
   186  0019                     	;# 
   187  001A                     	;# 
   188  001B                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  001D                     	;# 
   192  001E                     	;# 
   193  001F                     	;# 
   194  0081                     	;# 
   195  0085                     	;# 
   196  0086                     	;# 
   197  0087                     	;# 
   198  0088                     	;# 
   199  0089                     	;# 
   200  008C                     	;# 
   201  008D                     	;# 
   202  008E                     	;# 
   203  0091                     	;# 
   204  0092                     	;# 
   205  0093                     	;# 
   206  0094                     	;# 
   207  0098                     	;# 
   208  0099                     	;# 
   209  009C                     	;# 
   210  009D                     	;# 
   211  009E                     	;# 
   212  009F                     	;# 
   213  010C                     	;# 
   214  010D                     	;# 
   215  010E                     	;# 
   216  010F                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  0000                     	;# 
   220  0001                     	;# 
   221  0002                     	;# 
   222  0003                     	;# 
   223  0004                     	;# 
   224  0005                     	;# 
   225  0006                     	;# 
   226  0007                     	;# 
   227  0008                     	;# 
   228  0009                     	;# 
   229  000A                     	;# 
   230  000B                     	;# 
   231  000C                     	;# 
   232  000D                     	;# 
   233  000E                     	;# 
   234  000E                     	;# 
   235  000F                     	;# 
   236  0010                     	;# 
   237  0011                     	;# 
   238  0012                     	;# 
   239  0013                     	;# 
   240  0014                     	;# 
   241  0015                     	;# 
   242  0015                     	;# 
   243  0016                     	;# 
   244  0017                     	;# 
   245  0018                     	;# 
   246  0019                     	;# 
   247  001A                     	;# 
   248  001B                     	;# 
   249  001B                     	;# 
   250  001C                     	;# 
   251  001D                     	;# 
   252  001E                     	;# 
   253  001F                     	;# 
   254  0081                     	;# 
   255  0085                     	;# 
   256  0086                     	;# 
   257  0087                     	;# 
   258  0088                     	;# 
   259  0089                     	;# 
   260  008C                     	;# 
   261  008D                     	;# 
   262  008E                     	;# 
   263  0091                     	;# 
   264  0092                     	;# 
   265  0093                     	;# 
   266  0094                     	;# 
   267  0098                     	;# 
   268  0099                     	;# 
   269  009C                     	;# 
   270  009D                     	;# 
   271  009E                     	;# 
   272  009F                     	;# 
   273  010C                     	;# 
   274  010D                     	;# 
   275  010E                     	;# 
   276  010F                     	;# 
   277  018C                     	;# 
   278  018D                     	;# 
   279  0000                     	;# 
   280  0001                     	;# 
   281  0002                     	;# 
   282  0003                     	;# 
   283  0004                     	;# 
   284  0005                     	;# 
   285  0006                     	;# 
   286  0007                     	;# 
   287  0008                     	;# 
   288  0009                     	;# 
   289  000A                     	;# 
   290  000B                     	;# 
   291  000C                     	;# 
   292  000D                     	;# 
   293  000E                     	;# 
   294  000E                     	;# 
   295  000F                     	;# 
   296  0010                     	;# 
   297  0011                     	;# 
   298  0012                     	;# 
   299  0013                     	;# 
   300  0014                     	;# 
   301  0015                     	;# 
   302  0015                     	;# 
   303  0016                     	;# 
   304  0017                     	;# 
   305  0018                     	;# 
   306  0019                     	;# 
   307  001A                     	;# 
   308  001B                     	;# 
   309  001B                     	;# 
   310  001C                     	;# 
   311  001D                     	;# 
   312  001E                     	;# 
   313  001F                     	;# 
   314  0081                     	;# 
   315  0085                     	;# 
   316  0086                     	;# 
   317  0087                     	;# 
   318  0088                     	;# 
   319  0089                     	;# 
   320  008C                     	;# 
   321  008D                     	;# 
   322  008E                     	;# 
   323  0091                     	;# 
   324  0092                     	;# 
   325  0093                     	;# 
   326  0094                     	;# 
   327  0098                     	;# 
   328  0099                     	;# 
   329  009C                     	;# 
   330  009D                     	;# 
   331  009E                     	;# 
   332  009F                     	;# 
   333  010C                     	;# 
   334  010D                     	;# 
   335  010E                     	;# 
   336  010F                     	;# 
   337  018C                     	;# 
   338  018D                     	;# 
   339  0000                     	;# 
   340  0001                     	;# 
   341  0002                     	;# 
   342  0003                     	;# 
   343  0004                     	;# 
   344  0005                     	;# 
   345  0006                     	;# 
   346  0007                     	;# 
   347  0008                     	;# 
   348  0009                     	;# 
   349  000A                     	;# 
   350  000B                     	;# 
   351  000C                     	;# 
   352  000D                     	;# 
   353  000E                     	;# 
   354  000E                     	;# 
   355  000F                     	;# 
   356  0010                     	;# 
   357  0011                     	;# 
   358  0012                     	;# 
   359  0013                     	;# 
   360  0014                     	;# 
   361  0015                     	;# 
   362  0015                     	;# 
   363  0016                     	;# 
   364  0017                     	;# 
   365  0018                     	;# 
   366  0019                     	;# 
   367  001A                     	;# 
   368  001B                     	;# 
   369  001B                     	;# 
   370  001C                     	;# 
   371  001D                     	;# 
   372  001E                     	;# 
   373  001F                     	;# 
   374  0081                     	;# 
   375  0085                     	;# 
   376  0086                     	;# 
   377  0087                     	;# 
   378  0088                     	;# 
   379  0089                     	;# 
   380  008C                     	;# 
   381  008D                     	;# 
   382  008E                     	;# 
   383  0091                     	;# 
   384  0092                     	;# 
   385  0093                     	;# 
   386  0094                     	;# 
   387  0098                     	;# 
   388  0099                     	;# 
   389  009C                     	;# 
   390  009D                     	;# 
   391  009E                     	;# 
   392  009F                     	;# 
   393  010C                     	;# 
   394  010D                     	;# 
   395  010E                     	;# 
   396  010F                     	;# 
   397  018C                     	;# 
   398  018D                     	;# 
   399                           
   400                           	psect	idataBANK1
   401  0CD5                     __pidataBANK1:	
   402                           
   403                           ;initializer for _adcClosest
   404  0CD5  34E8               	retlw	232
   405  0CD6  3403               	retlw	3
   406  001F                     _ADCON0	set	31
   407  0005                     _PORTA	set	5
   408  0007                     _PORTC	set	7
   409  0008                     _PORTD	set	8
   410  0009                     _PORTE	set	9
   411  001A                     _RCREG	set	26
   412  0018                     _RCSTA	set	24
   413  0013                     _SSPBUF	set	19
   414  0014                     _SSPCON	set	20
   415  0001                     _TMR0	set	1
   416  0019                     _TXREG	set	25
   417  001E                     _ADRESH	set	30
   418  005F                     _GIE	set	95
   419  00FA                     _GO	set	250
   420  005E                     _PEIE	set	94
   421  0030                     _RB0	set	48
   422  0031                     _RB1	set	49
   423  0032                     _RB2	set	50
   424  0034                     _RB4	set	52
   425  0065                     _RCIF	set	101
   426  0048                     _RE0	set	72
   427  0049                     _RE1	set	73
   428  004A                     _RE2	set	74
   429  0063                     _SSPIF	set	99
   430  005D                     _TMR0IE	set	93
   431  005A                     _TMR0IF	set	90
   432  009F                     _ADCON1	set	159
   433  009E                     _ADRESL	set	158
   434  0081                     _OPTION_REG	set	129
   435  0099                     _SPBRG	set	153
   436  0094                     _SSPSTAT	set	148
   437  0085                     _TRISA	set	133
   438  0086                     _TRISB	set	134
   439  0087                     _TRISC	set	135
   440  0088                     _TRISD	set	136
   441  0089                     _TRISE	set	137
   442  0098                     _TXSTA	set	152
   443  04C1                     _TRMT	set	1217
   444                           
   445                           ; #config settings
   446  0000                     
   447                           	psect	cinit
   448  0015                     start_initialization:	
   449  0015                     __initialization:	
   450                           
   451                           ; Initialize objects allocated to BANK1
   452  0015  1683               	bsf	3,5	;RP0=1, select bank1
   453  0016  1303               	bcf	3,6	;RP1=0, select bank1
   454  0017  120A  158A  24D5  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   455  001C  00B6               	movwf	__pdataBANK1& (0+127)
   456  001D  120A  158A  24D6  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   457  0022  00B7               	movwf	(__pdataBANK1+1)& (0+127)
   458                           
   459                           ; Clear objects allocated to BANK1
   460  0023  1383               	bcf	3,7	;select IRP bank0
   461  0024  30A0               	movlw	low __pbssBANK1
   462  0025  0084               	movwf	4
   463  0026  30B6               	movlw	low (__pbssBANK1+22)
   464  0027  120A  158A  24D7  120A  118A  	fcall	clear_ram0
   465                           
   466                           ; Clear objects allocated to BANK0
   467  002C  3056               	movlw	low __pbssBANK0
   468  002D  0084               	movwf	4
   469  002E  3070               	movlw	low (__pbssBANK0+26)
   470  002F  120A  158A  24D7   	fcall	clear_ram0
   471                           
   472                           ; Clear objects allocated to COMMON
   473  0032  01FC               	clrf	__pbssCOMMON& (0+127)
   474  0033  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   475                           
   476                           ; Clear objects allocated to BITCOMMON
   477  0034  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   478  0035                     end_of_initialization:	
   479                           ;End of C runtime variable initialization code
   480                           
   481  0035                     __end_of__initialization:	
   482  0035  0183               	clrf	3
   483  0036  120A  118A  2BC6   	ljmp	_main	;jump to C main() function
   484                           
   485                           	psect	bitbssCOMMON
   486  03D8                     __pbitbssCOMMON:	
   487  03D8                     _FLAG_1000MS:	
   488  03D8                     	ds	1
   489  03D9                     _wasRight:	
   490  03D9                     	ds	1
   491                           
   492                           	psect	bssCOMMON
   493  007C                     __pbssCOMMON:	
   494  007C                     _stepState:	
   495  007C                     	ds	2
   496                           
   497                           	psect	bssBANK0
   498  0056                     __pbssBANK0:	
   499  0056                     _adcRAW:	
   500  0056                     	ds	2
   501  0058                     _distTrav:	
   502  0058                     	ds	2
   503  005A                     _loop:	
   504  005A                     	ds	2
   505  005C                     _totalDistTrav:	
   506  005C                     	ds	2
   507  005E                     _LeftSpeedH:	
   508  005E                     	ds	1
   509  005F                     _LeftSpeedL:	
   510  005F                     	ds	1
   511  0060                     _PB6Counter:	
   512  0060                     	ds	1
   513  0061                     _PB7Counter:	
   514  0061                     	ds	1
   515  0062                     _PB8Counter:	
   516  0062                     	ds	1
   517  0063                     _RightSpeedH:	
   518  0063                     	ds	1
   519  0064                     _RightSpeedL:	
   520  0064                     	ds	1
   521  0065                     _controlByte:	
   522  0065                     	ds	1
   523  0066                     _count:	
   524  0066                     	ds	1
   525  0067                     _currentStep:	
   526  0067                     	ds	1
   527  0068                     _lowByte:	
   528  0068                     	ds	1
   529  0069                     _radH:	
   530  0069                     	ds	1
   531  006A                     _radL:	
   532  006A                     	ds	1
   533  006B                     _rxbyte:	
   534  006B                     	ds	1
   535  006C                     _speedH:	
   536  006C                     	ds	1
   537  006D                     _speedL:	
   538  006D                     	ds	1
   539  006E                     _stepCount:	
   540  006E                     	ds	1
   541  006F                     _highByte:	
   542  006F                     	ds	1
   543                           
   544                           	psect	bssBANK1
   545  00A0                     __pbssBANK1:	
   546  00A0                     _Distance:	
   547  00A0                     	ds	2
   548  00A2                     _VelocityLeft:	
   549  00A2                     	ds	2
   550  00A4                     _VelocityRight:	
   551  00A4                     	ds	2
   552  00A6                     _angleTurned:	
   553  00A6                     	ds	2
   554  00A8                     _degrees:	
   555  00A8                     	ds	2
   556  00AA                     _localStepPos:	
   557  00AA                     	ds	2
   558  00AC                     _stepClosest:	
   559  00AC                     	ds	2
   560  00AE                     _stepCountNeg:	
   561  00AE                     	ds	2
   562  00B0                     _time_count:	
   563  00B0                     	ds	2
   564  00B2                     _totalangleTurned:	
   565  00B2                     	ds	2
   566  00B4                     _leftWall:	
   567  00B4                     	ds	1
   568  00B5                     _rightWall:	
   569  00B5                     	ds	1
   570                           
   571                           	psect	dataBANK1
   572  00B6                     __pdataBANK1:	
   573  00B6                     _adcClosest:	
   574  00B6                     	ds	2
   575                           
   576                           	psect	clrtext
   577  0CD7                     clear_ram0:	
   578                           ;	Called with FSR containing the base address, and
   579                           ;	W with the last address+1
   580                           
   581  0CD7  0064               	clrwdt	;clear the watchdog before getting into this loop
   582  0CD8                     clrloop0:	
   583  0CD8  0180               	clrf	0	;clear RAM location pointed to by FSR
   584  0CD9  0A84               	incf	4,f	;increment pointer
   585  0CDA  0604               	xorwf	4,w	;XOR with final address
   586  0CDB  1903               	btfsc	3,2	;have we reached the end yet?
   587  0CDC  3400               	retlw	0	;all done for this memory range, return
   588  0CDD  0604               	xorwf	4,w	;XOR again to restore value
   589  0CDE  2CD8               	goto	clrloop0	;do the next byte
   590                           
   591                           	psect	cstackCOMMON
   592  0070                     __pcstackCOMMON:	
   593  0070                     ?_ADCMain:	
   594  0070                     ?_setupSPI:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  0070                     ?_ser_init:	
   598                           ; 1 bytes @ 0x0
   599                           
   600  0070                     ?_setupLCD:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  0070                     ?_setupADC:	
   604                           ; 1 bytes @ 0x0
   605                           
   606  0070                     ?_spi_transfer:	
   607                           ; 1 bytes @ 0x0
   608                           
   609  0070                     ?_ser_putch:	
   610                           ; 1 bytes @ 0x0
   611                           
   612  0070                     ?_lcdSetCursor:	
   613                           ; 1 bytes @ 0x0
   614                           
   615  0070                     ?_isr:	
   616                           ; 1 bytes @ 0x0
   617                           
   618  0070                     ?_main:	
   619                           ; 1 bytes @ 0x0
   620                           
   621  0070                     ?_lcdWriteControl:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0070                     ?_lcdWriteData:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0070                     ?_ser_getch:	
   628                           ; 1 bytes @ 0x0
   629                           
   630  0070                     ?_getADC:	
   631                           ; 1 bytes @ 0x0
   632                           
   633  0070                     ?___lwmod:	
   634                           ; 2 bytes @ 0x0
   635                           
   636  0070                     ___lwmod@divisor:	
   637                           ; 2 bytes @ 0x0
   638                           
   639                           
   640                           ; 2 bytes @ 0x0
   641  0070                     	ds	2
   642  0072                     ___lwmod@dividend:	
   643                           
   644                           ; 2 bytes @ 0x2
   645  0072                     	ds	2
   646  0074                     ??___lwmod:	
   647                           
   648                           ; 1 bytes @ 0x4
   649  0074                     	ds	1
   650  0075                     ___lwmod@counter:	
   651                           
   652                           ; 1 bytes @ 0x5
   653  0075                     	ds	1
   654  0076                     ??_isr:	
   655                           
   656                           ; 1 bytes @ 0x6
   657  0076                     	ds	5
   658                           
   659                           	psect	cstackBANK0
   660  0020                     __pcstackBANK0:	
   661  0020                     ??_setupSPI:	
   662  0020                     ??_ser_init:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0020                     ??_setupADC:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0020                     ??_spi_transfer:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0020                     ??_ser_putch:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0020                     ??_getADC:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0020                     ??_lcdWriteControl:	
   678                           ; 1 bytes @ 0x0
   679                           
   680  0020                     ??_lcdWriteData:	
   681                           ; 1 bytes @ 0x0
   682                           
   683  0020                     ??_ser_getch:	
   684                           ; 1 bytes @ 0x0
   685                           
   686  0020                     ?___wmul:	
   687                           ; 1 bytes @ 0x0
   688                           
   689  0020                     ser_putch@c:	
   690                           ; 2 bytes @ 0x0
   691                           
   692  0020                     ___wmul@multiplier:	
   693                           ; 1 bytes @ 0x0
   694                           
   695                           
   696                           ; 2 bytes @ 0x0
   697  0020                     	ds	1
   698  0021                     ?_DriveDirect:	
   699  0021                     ?_Drive:	
   700                           ; 1 bytes @ 0x1
   701                           
   702  0021                     spi_transfer@temp:	
   703                           ; 1 bytes @ 0x1
   704                           
   705  0021                     ser_getch@rxbyte:	
   706                           ; 1 bytes @ 0x1
   707                           
   708  0021                     Drive@speedL:	
   709                           ; 1 bytes @ 0x1
   710                           
   711  0021                     DriveDirect@VelocityRight:	
   712                           ; 1 bytes @ 0x1
   713                           
   714                           
   715                           ; 2 bytes @ 0x1
   716  0021                     	ds	1
   717  0022                     ?_getSensorData:	
   718  0022                     lcdWriteControl@databyte:	
   719                           ; 2 bytes @ 0x2
   720                           
   721  0022                     lcdWriteData@databyte:	
   722                           ; 1 bytes @ 0x2
   723                           
   724  0022                     spi_transfer@data:	
   725                           ; 1 bytes @ 0x2
   726                           
   727  0022                     Drive@radH:	
   728                           ; 1 bytes @ 0x2
   729                           
   730  0022                     getSensorData@bytes:	
   731                           ; 1 bytes @ 0x2
   732                           
   733  0022                     ___wmul@multiplicand:	
   734                           ; 1 bytes @ 0x2
   735                           
   736                           
   737                           ; 2 bytes @ 0x2
   738  0022                     	ds	1
   739  0023                     ??_setupLCD:	
   740  0023                     ?_lcdWriteToDigitBCD:	
   741                           ; 1 bytes @ 0x3
   742                           
   743  0023                     ??_lcdSetCursor:	
   744                           ; 1 bytes @ 0x3
   745                           
   746  0023                     lcdSetCursor@address:	
   747                           ; 1 bytes @ 0x3
   748                           
   749  0023                     Drive@radL:	
   750                           ; 1 bytes @ 0x3
   751                           
   752  0023                     lcdWriteToDigitBCD@data:	
   753                           ; 1 bytes @ 0x3
   754                           
   755  0023                     DriveDirect@VelocityLeft:	
   756                           ; 2 bytes @ 0x3
   757                           
   758                           
   759                           ; 2 bytes @ 0x3
   760  0023                     	ds	1
   761  0024                     ??_getSensorData:	
   762  0024                     ??_Drive:	
   763                           ; 1 bytes @ 0x4
   764                           
   765  0024                     ??___wmul:	
   766                           ; 1 bytes @ 0x4
   767                           
   768  0024                     Drive@speedH:	
   769                           ; 1 bytes @ 0x4
   770                           
   771  0024                     ___wmul@product:	
   772                           ; 1 bytes @ 0x4
   773                           
   774                           
   775                           ; 2 bytes @ 0x4
   776  0024                     	ds	1
   777  0025                     ??_lcdWriteToDigitBCD:	
   778  0025                     ??_DriveDirect:	
   779                           ; 1 bytes @ 0x5
   780                           
   781  0025                     lcdWriteToDigitBCD@TensDigit:	
   782                           ; 1 bytes @ 0x5
   783                           
   784                           
   785                           ; 2 bytes @ 0x5
   786  0025                     	ds	1
   787  0026                     ?___lwdiv:	
   788  0026                     ?___aldiv:	
   789                           ; 2 bytes @ 0x6
   790                           
   791  0026                     DriveDirect@data:	
   792                           ; 4 bytes @ 0x6
   793                           
   794  0026                     getSensorData@sensor:	
   795                           ; 2 bytes @ 0x6
   796                           
   797  0026                     ___lwdiv@divisor:	
   798                           ; 2 bytes @ 0x6
   799                           
   800  0026                     ___aldiv@divisor:	
   801                           ; 2 bytes @ 0x6
   802                           
   803                           
   804                           ; 4 bytes @ 0x6
   805  0026                     	ds	1
   806  0027                     lcdWriteToDigitBCD@HunsDigit:	
   807                           
   808                           ; 2 bytes @ 0x7
   809  0027                     	ds	1
   810  0028                     getSensorData@packetID:	
   811  0028                     DriveDirect@data_253:	
   812                           ; 1 bytes @ 0x8
   813                           
   814  0028                     ___lwdiv@dividend:	
   815                           ; 2 bytes @ 0x8
   816                           
   817                           
   818                           ; 2 bytes @ 0x8
   819  0028                     	ds	1
   820  0029                     lcdWriteToDigitBCD@ThouDigit:	
   821                           
   822                           ; 2 bytes @ 0x9
   823  0029                     	ds	1
   824  002A                     ??___lwdiv:	
   825  002A                     ___aldiv@dividend:	
   826                           ; 1 bytes @ 0xA
   827                           
   828                           
   829                           ; 4 bytes @ 0xA
   830  002A                     	ds	1
   831  002B                     lcdWriteToDigitBCD@TenThouDigit:	
   832  002B                     ___lwdiv@quotient:	
   833                           ; 2 bytes @ 0xB
   834                           
   835                           
   836                           ; 2 bytes @ 0xB
   837  002B                     	ds	2
   838  002D                     ___lwdiv@counter:	
   839  002D                     lcdWriteToDigitBCD@OnesDigit:	
   840                           ; 1 bytes @ 0xD
   841                           
   842                           
   843                           ; 2 bytes @ 0xD
   844  002D                     	ds	1
   845  002E                     ??___aldiv:	
   846                           
   847                           ; 1 bytes @ 0xE
   848  002E                     	ds	1
   849  002F                     ___aldiv@counter:	
   850                           
   851                           ; 1 bytes @ 0xF
   852  002F                     	ds	1
   853  0030                     ___aldiv@sign:	
   854                           
   855                           ; 1 bytes @ 0x10
   856  0030                     	ds	1
   857  0031                     ___aldiv@quotient:	
   858                           
   859                           ; 4 bytes @ 0x11
   860  0031                     	ds	4
   861  0035                     ?_adcConvertMM:	
   862  0035                     adcConvertMM@adcRAW:	
   863                           ; 2 bytes @ 0x15
   864                           
   865                           
   866                           ; 2 bytes @ 0x15
   867  0035                     	ds	2
   868  0037                     ??_adcConvertMM:	
   869                           
   870                           ; 1 bytes @ 0x17
   871  0037                     	ds	8
   872  003F                     ??_ADCMain:	
   873  003F                     ??_main:	
   874                           ; 1 bytes @ 0x1F
   875                           
   876                           
   877                           ; 1 bytes @ 0x1F
   878  003F                     	ds	4
   879  0043                     main@ADC_CURRENT:	
   880                           
   881                           ; 2 bytes @ 0x23
   882  0043                     	ds	2
   883  0045                     main@ADJUSTED_SPEED_L:	
   884                           
   885                           ; 2 bytes @ 0x25
   886  0045                     	ds	2
   887  0047                     main@ADJUSTED_SPEED_R:	
   888                           
   889                           ; 2 bytes @ 0x27
   890  0047                     	ds	2
   891  0049                     main@controlByte:	
   892                           
   893                           ; 1 bytes @ 0x29
   894  0049                     	ds	1
   895  004A                     main@timerLoop:	
   896                           
   897                           ; 2 bytes @ 0x2A
   898  004A                     	ds	2
   899  004C                     main@CURRENT_SPEED_L:	
   900                           
   901                           ; 2 bytes @ 0x2C
   902  004C                     	ds	2
   903  004E                     main@CURRENT_SPEED_R:	
   904                           
   905                           ; 2 bytes @ 0x2E
   906  004E                     	ds	2
   907  0050                     main@safetyCount:	
   908                           
   909                           ; 2 bytes @ 0x30
   910  0050                     	ds	2
   911  0052                     main@ADC_ADJUST:	
   912                           
   913                           ; 2 bytes @ 0x32
   914  0052                     	ds	2
   915  0054                     main@setADCdist:	
   916                           
   917                           ; 2 bytes @ 0x34
   918  0054                     	ds	2
   919                           
   920                           	psect	maintext
   921  03C6                     __pmaintext:	
   922 ;;
   923 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   924 ;;
   925 ;; *************** function _main *****************
   926 ;; Defined at:
   927 ;;		line 104 in file "main.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;		None
   930 ;; Auto vars:     Size  Location     Type
   931 ;;  setADCdist      2   52[BANK0 ] unsigned int 
   932 ;;  ADC_ADJUST      2   50[BANK0 ] unsigned int 
   933 ;;  safetyCount     2   48[BANK0 ] unsigned int 
   934 ;;  CURRENT_SPEE    2   46[BANK0 ] unsigned int 
   935 ;;  CURRENT_SPEE    2   44[BANK0 ] unsigned int 
   936 ;;  timerLoop       2   42[BANK0 ] unsigned int 
   937 ;;  ADJUSTED_SPE    2   39[BANK0 ] unsigned int 
   938 ;;  ADJUSTED_SPE    2   37[BANK0 ] unsigned int 
   939 ;;  ADC_CURRENT     2   35[BANK0 ] unsigned int 
   940 ;;  controlByte     1   41[BANK0 ] unsigned char 
   941 ;; Return value:  Size  Location     Type
   942 ;;                  1    wreg      void 
   943 ;; Registers used:
   944 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   945 ;; Tracked objects:
   946 ;;		On entry : B00/0
   947 ;;		On exit  : 0/0
   948 ;;		Unchanged: 0/0
   949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   950 ;;      Params:         0       0       0       0       0
   951 ;;      Locals:         0      19       0       0       0
   952 ;;      Temps:          0       4       0       0       0
   953 ;;      Totals:         0      23       0       0       0
   954 ;;Total ram usage:       23 bytes
   955 ;; Hardware stack levels required when called:    5
   956 ;; This function calls:
   957 ;;		_ADCMain
   958 ;;		_Drive
   959 ;;		_DriveDirect
   960 ;;		___lwdiv
   961 ;;		___wmul
   962 ;;		_getSensorData
   963 ;;		_lcdSetCursor
   964 ;;		_lcdWriteToDigitBCD
   965 ;;		_ser_init
   966 ;;		_ser_putch
   967 ;;		_setupADC
   968 ;;		_setupLCD
   969 ;;		_setupSPI
   970 ;;		_spi_transfer
   971 ;; This function is called by:
   972 ;;		Startup code after reset
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976                           
   977                           ;psect for function _main
   978  03C6                     _main:	
   979                           
   980                           ;main.c: 105: _delay((unsigned long)((5000)*(20000000/4000.0)));
   981                           
   982                           ;incstack = 0
   983                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   984  03C6  307F               	movlw	127
   985  03C7  1283               	bcf	3,5	;RP0=0, select bank0
   986  03C8  1303               	bcf	3,6	;RP1=0, select bank0
   987  03C9  00C1               	movwf	??_main+2
   988  03CA  30D4               	movlw	212
   989  03CB  00C0               	movwf	??_main+1
   990  03CC  30AE               	movlw	174
   991  03CD  00BF               	movwf	??_main
   992  03CE                     u2457:	
   993  03CE  0BBF               	decfsz	??_main,f
   994  03CF  2BCE               	goto	u2457
   995  03D0  0BC0               	decfsz	??_main+1,f
   996  03D1  2BCE               	goto	u2457
   997  03D2  0BC1               	decfsz	??_main+2,f
   998  03D3  2BCE               	goto	u2457
   999  03D4  2BD5               	nop2
  1000                           
  1001                           ;main.c: 108: setupSPI();
  1002  03D5  120A  158A  2545  120A  118A  	fcall	_setupSPI
  1003                           
  1004                           ;main.c: 109: ser_init();
  1005  03DA  120A  158A  24FE  120A  118A  	fcall	_ser_init
  1006                           
  1007                           ;main.c: 110: setupLCD();
  1008  03DF  120A  158A  25C8  120A  118A  	fcall	_setupLCD
  1009                           
  1010                           ;main.c: 111: setupADC();
  1011  03E4  120A  158A  252F  120A  118A  	fcall	_setupADC
  1012                           
  1013                           ;main.c: 113: unsigned char controlByte = 0b00001101;
  1014  03E9  300D               	movlw	13
  1015  03EA  1283               	bcf	3,5	;RP0=0, select bank0
  1016  03EB  1303               	bcf	3,6	;RP1=0, select bank0
  1017  03EC  00BF               	movwf	??_main
  1018  03ED  083F               	movf	??_main,w
  1019  03EE  00C9               	movwf	main@controlByte
  1020                           
  1021                           ;main.c: 114: spi_transfer(controlByte);
  1022  03EF  0849               	movf	main@controlByte,w
  1023  03F0  120A  158A  250D  120A  118A  	fcall	_spi_transfer
  1024                           
  1025                           ;main.c: 116: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1026  03F5  301A               	movlw	26
  1027  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  1028  03F7  1303               	bcf	3,6	;RP1=0, select bank0
  1029  03F8  00C1               	movwf	??_main+2
  1030  03F9  305E               	movlw	94
  1031  03FA  00C0               	movwf	??_main+1
  1032  03FB  3086               	movlw	134
  1033  03FC  00BF               	movwf	??_main
  1034  03FD                     u2467:	
  1035  03FD  0BBF               	decfsz	??_main,f
  1036  03FE  2BFD               	goto	u2467
  1037  03FF  0BC0               	decfsz	??_main+1,f
  1038  0400  2BFD               	goto	u2467
  1039  0401  0BC1               	decfsz	??_main+2,f
  1040  0402  2BFD               	goto	u2467
  1041  0403  0000               	nop
  1042                           
  1043                           ;main.c: 117: ser_putch(128);
  1044  0404  3080               	movlw	128
  1045  0405  120A  158A  24F2  120A  118A  	fcall	_ser_putch
  1046                           
  1047                           ;main.c: 118: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1048  040A  301A               	movlw	26
  1049  040B  1283               	bcf	3,5	;RP0=0, select bank0
  1050  040C  1303               	bcf	3,6	;RP1=0, select bank0
  1051  040D  00C1               	movwf	??_main+2
  1052  040E  305E               	movlw	94
  1053  040F  00C0               	movwf	??_main+1
  1054  0410  3086               	movlw	134
  1055  0411  00BF               	movwf	??_main
  1056  0412                     u2477:	
  1057  0412  0BBF               	decfsz	??_main,f
  1058  0413  2C12               	goto	u2477
  1059  0414  0BC0               	decfsz	??_main+1,f
  1060  0415  2C12               	goto	u2477
  1061  0416  0BC1               	decfsz	??_main+2,f
  1062  0417  2C12               	goto	u2477
  1063  0418  0000               	nop
  1064                           
  1065                           ;main.c: 119: ser_putch(132);
  1066  0419  3084               	movlw	132
  1067  041A  120A  158A  24F2  120A  118A  	fcall	_ser_putch
  1068                           
  1069                           ;main.c: 120: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1070  041F  301A               	movlw	26
  1071  0420  1283               	bcf	3,5	;RP0=0, select bank0
  1072  0421  1303               	bcf	3,6	;RP1=0, select bank0
  1073  0422  00C1               	movwf	??_main+2
  1074  0423  305E               	movlw	94
  1075  0424  00C0               	movwf	??_main+1
  1076  0425  3086               	movlw	134
  1077  0426  00BF               	movwf	??_main
  1078  0427                     u2487:	
  1079  0427  0BBF               	decfsz	??_main,f
  1080  0428  2C27               	goto	u2487
  1081  0429  0BC0               	decfsz	??_main+1,f
  1082  042A  2C27               	goto	u2487
  1083  042B  0BC1               	decfsz	??_main+2,f
  1084  042C  2C27               	goto	u2487
  1085  042D  0000               	nop
  1086                           
  1087                           ;main.c: 122: lcdWriteToDigitBCD(500);
  1088  042E  30F4               	movlw	244
  1089  042F  1283               	bcf	3,5	;RP0=0, select bank0
  1090  0430  1303               	bcf	3,6	;RP1=0, select bank0
  1091  0431  00A3               	movwf	lcdWriteToDigitBCD@data
  1092  0432  3001               	movlw	1
  1093  0433  00A4               	movwf	lcdWriteToDigitBCD@data+1
  1094  0434  120A  118A  270F  120A  118A  	fcall	_lcdWriteToDigitBCD
  1095  0439                     l2291:	
  1096                           ;main.c: 125: while(1){
  1097                           
  1098                           
  1099                           ;main.c: 130: if (getSensorData(18,1) == 0b00000001){
  1100  0439  1283               	bcf	3,5	;RP0=0, select bank0
  1101  043A  1303               	bcf	3,6	;RP1=0, select bank0
  1102  043B  01A2               	clrf	getSensorData@bytes
  1103  043C  0AA2               	incf	getSensorData@bytes,f
  1104  043D  3012               	movlw	18
  1105  043E  120A  158A  2661  120A  118A  	fcall	_getSensorData
  1106  0443  1283               	bcf	3,5	;RP0=0, select bank0
  1107  0444  1303               	bcf	3,6	;RP1=0, select bank0
  1108  0445  0322               	decf	?_getSensorData,w
  1109  0446  0423               	iorwf	?_getSensorData+1,w
  1110  0447  1D03               	btfss	3,2
  1111  0448  2CE6               	goto	l138
  1112                           
  1113                           ;main.c: 131: totalDistTrav = 0;
  1114  0449  01DC               	clrf	_totalDistTrav
  1115  044A  01DD               	clrf	_totalDistTrav+1
  1116                           
  1117                           ;main.c: 132: DriveDirect(200,200);
  1118  044B  30C8               	movlw	200
  1119  044C  00A1               	movwf	DriveDirect@VelocityRight
  1120  044D  3000               	movlw	0
  1121  044E  00A2               	movwf	DriveDirect@VelocityRight+1
  1122  044F  30C8               	movlw	200
  1123  0450  00A3               	movwf	DriveDirect@VelocityLeft
  1124  0451  3000               	movlw	0
  1125  0452  00A4               	movwf	DriveDirect@VelocityLeft+1
  1126  0453  120A  158A  26E4  120A  118A  	fcall	_DriveDirect
  1127  0458                     l2305:	
  1128                           ;main.c: 133: while (totalDistTrav < 2){
  1129                           
  1130  0458  1283               	bcf	3,5	;RP0=0, select bank0
  1131  0459  1303               	bcf	3,6	;RP1=0, select bank0
  1132  045A  085D               	movf	_totalDistTrav+1,w
  1133  045B  3A80               	xorlw	128
  1134  045C  00FF               	movwf	127
  1135  045D  3080               	movlw	128
  1136  045E  027F               	subwf	127,w
  1137  045F  1D03               	skipz
  1138  0460  2C63               	goto	u2285
  1139  0461  3002               	movlw	2
  1140  0462  025C               	subwf	_totalDistTrav,w
  1141  0463                     u2285:	
  1142  0463  1803               	btfsc	3,0
  1143  0464  2C91               	goto	l2307
  1144                           
  1145                           ;main.c: 134: distTrav = getSensorData(19,2);
  1146  0465  3002               	movlw	2
  1147  0466  1283               	bcf	3,5	;RP0=0, select bank0
  1148  0467  1303               	bcf	3,6	;RP1=0, select bank0
  1149  0468  00BF               	movwf	??_main
  1150  0469  083F               	movf	??_main,w
  1151  046A  00A2               	movwf	getSensorData@bytes
  1152  046B  3013               	movlw	19
  1153  046C  120A  158A  2661  120A  118A  	fcall	_getSensorData
  1154  0471  1283               	bcf	3,5	;RP0=0, select bank0
  1155  0472  1303               	bcf	3,6	;RP1=0, select bank0
  1156  0473  0823               	movf	?_getSensorData+1,w
  1157  0474  00D9               	movwf	_distTrav+1
  1158  0475  0822               	movf	?_getSensorData,w
  1159  0476  00D8               	movwf	_distTrav
  1160                           
  1161                           ;main.c: 135: totalDistTrav = (totalDistTrav + distTrav);
  1162  0477  0858               	movf	_distTrav,w
  1163  0478  075C               	addwf	_totalDistTrav,w
  1164  0479  00DC               	movwf	_totalDistTrav
  1165  047A  0859               	movf	_distTrav+1,w
  1166  047B  1803               	skipnc
  1167  047C  0A59               	incf	_distTrav+1,w
  1168  047D  075D               	addwf	_totalDistTrav+1,w
  1169  047E  00DD               	movwf	_totalDistTrav+1
  1170                           
  1171                           ;main.c: 137: lcdSetCursor(0x00);
  1172  047F  3000               	movlw	0
  1173  0480  120A  158A  24DF  120A  118A  	fcall	_lcdSetCursor
  1174                           
  1175                           ;main.c: 138: lcdWriteToDigitBCD(totalDistTrav);
  1176  0485  1283               	bcf	3,5	;RP0=0, select bank0
  1177  0486  1303               	bcf	3,6	;RP1=0, select bank0
  1178  0487  085D               	movf	_totalDistTrav+1,w
  1179  0488  00A4               	movwf	lcdWriteToDigitBCD@data+1
  1180  0489  085C               	movf	_totalDistTrav,w
  1181  048A  00A3               	movwf	lcdWriteToDigitBCD@data
  1182  048B  120A  118A  270F  120A  118A  	fcall	_lcdWriteToDigitBCD
  1183  0490  2C58               	goto	l2305
  1184  0491                     l2307:	
  1185                           
  1186                           ;main.c: 139: }
  1187                           ;main.c: 141: DriveDirect(250,250);
  1188  0491  30FA               	movlw	250
  1189  0492  1283               	bcf	3,5	;RP0=0, select bank0
  1190  0493  1303               	bcf	3,6	;RP1=0, select bank0
  1191  0494  00A1               	movwf	DriveDirect@VelocityRight
  1192  0495  3000               	movlw	0
  1193  0496  00A2               	movwf	DriveDirect@VelocityRight+1
  1194  0497  30FA               	movlw	250
  1195  0498  00A3               	movwf	DriveDirect@VelocityLeft
  1196  0499  3000               	movlw	0
  1197  049A  00A4               	movwf	DriveDirect@VelocityLeft+1
  1198  049B  120A  158A  26E4  120A  118A  	fcall	_DriveDirect
  1199  04A0                     l2317:	
  1200                           ;main.c: 142: while (totalDistTrav < 4000){
  1201                           
  1202  04A0  1283               	bcf	3,5	;RP0=0, select bank0
  1203  04A1  1303               	bcf	3,6	;RP1=0, select bank0
  1204  04A2  085D               	movf	_totalDistTrav+1,w
  1205  04A3  3A80               	xorlw	128
  1206  04A4  00FF               	movwf	127
  1207  04A5  308F               	movlw	143
  1208  04A6  027F               	subwf	127,w
  1209  04A7  1D03               	skipz
  1210  04A8  2CAB               	goto	u2295
  1211  04A9  30A0               	movlw	160
  1212  04AA  025C               	subwf	_totalDistTrav,w
  1213  04AB                     u2295:	
  1214  04AB  1803               	btfsc	3,0
  1215  04AC  2CD9               	goto	l2319
  1216                           
  1217                           ;main.c: 143: distTrav = getSensorData(19,2);
  1218  04AD  3002               	movlw	2
  1219  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  1220  04AF  1303               	bcf	3,6	;RP1=0, select bank0
  1221  04B0  00BF               	movwf	??_main
  1222  04B1  083F               	movf	??_main,w
  1223  04B2  00A2               	movwf	getSensorData@bytes
  1224  04B3  3013               	movlw	19
  1225  04B4  120A  158A  2661  120A  118A  	fcall	_getSensorData
  1226  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  1227  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  1228  04BB  0823               	movf	?_getSensorData+1,w
  1229  04BC  00D9               	movwf	_distTrav+1
  1230  04BD  0822               	movf	?_getSensorData,w
  1231  04BE  00D8               	movwf	_distTrav
  1232                           
  1233                           ;main.c: 144: totalDistTrav = (totalDistTrav + distTrav);
  1234  04BF  0858               	movf	_distTrav,w
  1235  04C0  075C               	addwf	_totalDistTrav,w
  1236  04C1  00DC               	movwf	_totalDistTrav
  1237  04C2  0859               	movf	_distTrav+1,w
  1238  04C3  1803               	skipnc
  1239  04C4  0A59               	incf	_distTrav+1,w
  1240  04C5  075D               	addwf	_totalDistTrav+1,w
  1241  04C6  00DD               	movwf	_totalDistTrav+1
  1242                           
  1243                           ;main.c: 145: lcdSetCursor(0x00);
  1244  04C7  3000               	movlw	0
  1245  04C8  120A  158A  24DF  120A  118A  	fcall	_lcdSetCursor
  1246                           
  1247                           ;main.c: 146: lcdWriteToDigitBCD(totalDistTrav);
  1248  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  1249  04CE  1303               	bcf	3,6	;RP1=0, select bank0
  1250  04CF  085D               	movf	_totalDistTrav+1,w
  1251  04D0  00A4               	movwf	lcdWriteToDigitBCD@data+1
  1252  04D1  085C               	movf	_totalDistTrav,w
  1253  04D2  00A3               	movwf	lcdWriteToDigitBCD@data
  1254  04D3  120A  118A  270F  120A  118A  	fcall	_lcdWriteToDigitBCD
  1255  04D8  2CA0               	goto	l2317
  1256  04D9                     l2319:	
  1257                           
  1258                           ;main.c: 147: }
  1259                           ;main.c: 150: DriveDirect(0,0);
  1260  04D9  3000               	movlw	0
  1261  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  1262  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  1263  04DC  00A1               	movwf	DriveDirect@VelocityRight
  1264  04DD  00A2               	movwf	DriveDirect@VelocityRight+1
  1265  04DE  3000               	movlw	0
  1266  04DF  00A3               	movwf	DriveDirect@VelocityLeft
  1267  04E0  00A4               	movwf	DriveDirect@VelocityLeft+1
  1268  04E1  120A  158A  26E4  120A  118A  	fcall	_DriveDirect
  1269  04E6                     l138:	
  1270                           
  1271                           ;main.c: 152: }
  1272                           ;main.c: 155: if (getSensorData(18,1) == 0b00000100){
  1273  04E6  1283               	bcf	3,5	;RP0=0, select bank0
  1274  04E7  1303               	bcf	3,6	;RP1=0, select bank0
  1275  04E8  01A2               	clrf	getSensorData@bytes
  1276  04E9  0AA2               	incf	getSensorData@bytes,f
  1277  04EA  3012               	movlw	18
  1278  04EB  120A  158A  2661  120A  118A  	fcall	_getSensorData
  1279  04F0  3004               	movlw	4
  1280  04F1  1283               	bcf	3,5	;RP0=0, select bank0
  1281  04F2  1303               	bcf	3,6	;RP1=0, select bank0
  1282  04F3  0622               	xorwf	?_getSensorData,w
  1283  04F4  0423               	iorwf	?_getSensorData+1,w
  1284  04F5  1D03               	btfss	3,2
  1285  04F6  2DBE               	goto	l145
  1286                           
  1287                           ;main.c: 164: totalDistTrav = 0;
  1288  04F7  01DC               	clrf	_totalDistTrav
  1289  04F8  01DD               	clrf	_totalDistTrav+1
  1290                           
  1291                           ;main.c: 166: for (loop = 0; loop < 4; loop++){
  1292  04F9  01DA               	clrf	_loop
  1293  04FA  01DB               	clrf	_loop+1
  1294  04FB  2DA6               	goto	L2
  1295  04FC                     l2333:	
  1296  04FC  1683               	bsf	3,5	;RP0=1, select bank1
  1297  04FD  1303               	bcf	3,6	;RP1=0, select bank1
  1298  04FE  0833               	movf	(_totalangleTurned+1)^(0+128),w
  1299  04FF  3A80               	xorlw	128
  1300  0500  00FF               	movwf	127
  1301  0501  307F               	movlw	127
  1302  0502  027F               	subwf	127,w
  1303  0503  1D03               	skipz
  1304  0504  2D07               	goto	u2325
  1305  0505  30AB               	movlw	171
  1306  0506  0232               	subwf	_totalangleTurned^(0+128),w
  1307  0507                     u2325:	
  1308  0507  1C03               	btfss	3,0
  1309  0508  2D3E               	goto	l2335
  1310                           
  1311                           ;main.c: 169: Drive(0,250,0xFF,0xFF);
  1312                           
  1313                           ;main.c: 168: while (totalangleTurned >= -85){
  1314  0509  30FA               	movlw	250
  1315  050A  1283               	bcf	3,5	;RP0=0, select bank0
  1316  050B  1303               	bcf	3,6	;RP1=0, select bank0
  1317  050C  00BF               	movwf	??_main
  1318  050D  083F               	movf	??_main,w
  1319  050E  00A1               	movwf	Drive@speedL
  1320  050F  30FF               	movlw	255
  1321  0510  00C0               	movwf	??_main+1
  1322  0511  0840               	movf	??_main+1,w
  1323  0512  00A2               	movwf	Drive@radH
  1324  0513  30FF               	movlw	255
  1325  0514  00C1               	movwf	??_main+2
  1326  0515  0841               	movf	??_main+2,w
  1327  0516  00A3               	movwf	Drive@radL
  1328  0517  3000               	movlw	0
  1329  0518  120A  158A  25A0  120A  118A  	fcall	_Drive
  1330                           
  1331                           ;main.c: 170: angleTurned = getSensorData(20,2);
  1332  051D  3002               	movlw	2
  1333  051E  1283               	bcf	3,5	;RP0=0, select bank0
  1334  051F  1303               	bcf	3,6	;RP1=0, select bank0
  1335  0520  00BF               	movwf	??_main
  1336  0521  083F               	movf	??_main,w
  1337  0522  00A2               	movwf	getSensorData@bytes
  1338  0523  3014               	movlw	20
  1339  0524  120A  158A  2661  120A  118A  	fcall	_getSensorData
  1340  0529  1283               	bcf	3,5	;RP0=0, select bank0
  1341  052A  1303               	bcf	3,6	;RP1=0, select bank0
  1342  052B  0823               	movf	?_getSensorData+1,w
  1343  052C  1683               	bsf	3,5	;RP0=1, select bank1
  1344  052D  1303               	bcf	3,6	;RP1=0, select bank1
  1345  052E  00A7               	movwf	(_angleTurned+1)^(0+128)
  1346  052F  1283               	bcf	3,5	;RP0=0, select bank0
  1347  0530  1303               	bcf	3,6	;RP1=0, select bank0
  1348  0531  0822               	movf	?_getSensorData,w
  1349  0532  1683               	bsf	3,5	;RP0=1, select bank1
  1350  0533  1303               	bcf	3,6	;RP1=0, select bank1
  1351  0534  00A6               	movwf	_angleTurned^(0+128)
  1352                           
  1353                           ;main.c: 171: totalangleTurned = (totalangleTurned + angleTurned);
  1354  0535  0826               	movf	_angleTurned^(0+128),w
  1355  0536  0732               	addwf	_totalangleTurned^(0+128),w
  1356  0537  00B2               	movwf	_totalangleTurned^(0+128)
  1357  0538  0827               	movf	(_angleTurned+1)^(0+128),w
  1358  0539  1803               	skipnc
  1359  053A  0A27               	incf	(_angleTurned+1)^(0+128),w
  1360  053B  0733               	addwf	(_totalangleTurned+1)^(0+128),w
  1361  053C  00B3               	movwf	(_totalangleTurned+1)^(0+128)
  1362  053D  2CFC               	goto	l2333
  1363  053E                     l2335:	
  1364                           
  1365                           ;main.c: 172: }
  1366                           ;main.c: 174: totalangleTurned = 0;
  1367  053E  1683               	bsf	3,5	;RP0=1, select bank1
  1368  053F  1303               	bcf	3,6	;RP1=0, select bank1
  1369  0540  01B2               	clrf	_totalangleTurned^(0+128)
  1370  0541  01B3               	clrf	(_totalangleTurned+1)^(0+128)
  1371                           
  1372                           ;main.c: 175: angleTurned = 0;
  1373  0542  01A6               	clrf	_angleTurned^(0+128)
  1374  0543  01A7               	clrf	(_angleTurned+1)^(0+128)
  1375                           
  1376                           ;main.c: 177: Drive(0,250,0x7F,0xFF);
  1377  0544  30FA               	movlw	250
  1378  0545  1283               	bcf	3,5	;RP0=0, select bank0
  1379  0546  1303               	bcf	3,6	;RP1=0, select bank0
  1380  0547  00BF               	movwf	??_main
  1381  0548  083F               	movf	??_main,w
  1382  0549  00A1               	movwf	Drive@speedL
  1383  054A  307F               	movlw	127
  1384  054B  00C0               	movwf	??_main+1
  1385  054C  0840               	movf	??_main+1,w
  1386  054D  00A2               	movwf	Drive@radH
  1387  054E  30FF               	movlw	255
  1388  054F  00C1               	movwf	??_main+2
  1389  0550  0841               	movf	??_main+2,w
  1390  0551  00A3               	movwf	Drive@radL
  1391  0552  3000               	movlw	0
  1392  0553  120A  158A  25A0  120A  118A  	fcall	_Drive
  1393  0558                     l2347:	
  1394                           ;main.c: 179: while (totalDistTrav < 1000){
  1395                           
  1396  0558  1283               	bcf	3,5	;RP0=0, select bank0
  1397  0559  1303               	bcf	3,6	;RP1=0, select bank0
  1398  055A  085D               	movf	_totalDistTrav+1,w
  1399  055B  3A80               	xorlw	128
  1400  055C  00FF               	movwf	127
  1401  055D  3083               	movlw	131
  1402  055E  027F               	subwf	127,w
  1403  055F  1D03               	skipz
  1404  0560  2D63               	goto	u2335
  1405  0561  30E8               	movlw	232
  1406  0562  025C               	subwf	_totalDistTrav,w
  1407  0563                     u2335:	
  1408  0563  1803               	btfsc	3,0
  1409  0564  2D91               	goto	l2349
  1410                           
  1411                           ;main.c: 180: distTrav = getSensorData(19,2);
  1412  0565  3002               	movlw	2
  1413  0566  1283               	bcf	3,5	;RP0=0, select bank0
  1414  0567  1303               	bcf	3,6	;RP1=0, select bank0
  1415  0568  00BF               	movwf	??_main
  1416  0569  083F               	movf	??_main,w
  1417  056A  00A2               	movwf	getSensorData@bytes
  1418  056B  3013               	movlw	19
  1419  056C  120A  158A  2661  120A  118A  	fcall	_getSensorData
  1420  0571  1283               	bcf	3,5	;RP0=0, select bank0
  1421  0572  1303               	bcf	3,6	;RP1=0, select bank0
  1422  0573  0823               	movf	?_getSensorData+1,w
  1423  0574  00D9               	movwf	_distTrav+1
  1424  0575  0822               	movf	?_getSensorData,w
  1425  0576  00D8               	movwf	_distTrav
  1426                           
  1427                           ;main.c: 181: totalDistTrav = (totalDistTrav + distTrav);
  1428  0577  0858               	movf	_distTrav,w
  1429  0578  075C               	addwf	_totalDistTrav,w
  1430  0579  00DC               	movwf	_totalDistTrav
  1431  057A  0859               	movf	_distTrav+1,w
  1432  057B  1803               	skipnc
  1433  057C  0A59               	incf	_distTrav+1,w
  1434  057D  075D               	addwf	_totalDistTrav+1,w
  1435  057E  00DD               	movwf	_totalDistTrav+1
  1436                           
  1437                           ;main.c: 182: lcdSetCursor(0x00);
  1438  057F  3000               	movlw	0
  1439  0580  120A  158A  24DF  120A  118A  	fcall	_lcdSetCursor
  1440                           
  1441                           ;main.c: 183: lcdWriteToDigitBCD(totalDistTrav);
  1442  0585  1283               	bcf	3,5	;RP0=0, select bank0
  1443  0586  1303               	bcf	3,6	;RP1=0, select bank0
  1444  0587  085D               	movf	_totalDistTrav+1,w
  1445  0588  00A4               	movwf	lcdWriteToDigitBCD@data+1
  1446  0589  085C               	movf	_totalDistTrav,w
  1447  058A  00A3               	movwf	lcdWriteToDigitBCD@data
  1448  058B  120A  118A  270F  120A  118A  	fcall	_lcdWriteToDigitBCD
  1449  0590  2D58               	goto	l2347
  1450  0591                     l2349:	
  1451                           
  1452                           ;main.c: 184: }
  1453                           ;main.c: 186: totalDistTrav = 0;
  1454  0591  1283               	bcf	3,5	;RP0=0, select bank0
  1455  0592  1303               	bcf	3,6	;RP1=0, select bank0
  1456  0593  01DC               	clrf	_totalDistTrav
  1457  0594  01DD               	clrf	_totalDistTrav+1
  1458                           
  1459                           ;main.c: 187: Drive(0,0,0,0);
  1460  0595  01A1               	clrf	Drive@speedL
  1461  0596  01A2               	clrf	Drive@radH
  1462  0597  01A3               	clrf	Drive@radL
  1463  0598  3000               	movlw	0
  1464  0599  120A  158A  25A0  120A  118A  	fcall	_Drive
  1465  059E  3001               	movlw	1
  1466  059F  1283               	bcf	3,5	;RP0=0, select bank0
  1467  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  1468  05A1  07DA               	addwf	_loop,f
  1469  05A2  1803               	skipnc
  1470  05A3  0ADB               	incf	_loop+1,f
  1471  05A4  3000               	movlw	0
  1472  05A5  07DB               	addwf	_loop+1,f
  1473  05A6                     L2:	
  1474  05A6  085B               	movf	_loop+1,w
  1475  05A7  3A80               	xorlw	128
  1476  05A8  00FF               	movwf	127
  1477  05A9  3080               	movlw	128
  1478  05AA  027F               	subwf	127,w
  1479  05AB  1D03               	skipz
  1480  05AC  2DAF               	goto	u2345
  1481  05AD  3004               	movlw	4
  1482  05AE  025A               	subwf	_loop,w
  1483  05AF                     u2345:	
  1484  05AF  1C03               	skipc
  1485  05B0  2CFC               	goto	l2333
  1486                           
  1487                           ;main.c: 189: }
  1488                           ;main.c: 191: DriveDirect(0,0);
  1489  05B1  3000               	movlw	0
  1490  05B2  1283               	bcf	3,5	;RP0=0, select bank0
  1491  05B3  1303               	bcf	3,6	;RP1=0, select bank0
  1492  05B4  00A1               	movwf	DriveDirect@VelocityRight
  1493  05B5  00A2               	movwf	DriveDirect@VelocityRight+1
  1494  05B6  3000               	movlw	0
  1495  05B7  00A3               	movwf	DriveDirect@VelocityLeft
  1496  05B8  00A4               	movwf	DriveDirect@VelocityLeft+1
  1497  05B9  120A  158A  26E4  120A  118A  	fcall	_DriveDirect
  1498  05BE                     l145:	
  1499                           
  1500                           ;main.c: 193: }
  1501                           ;main.c: 201: if(getSensorData(18,1) == 0b00000101){
  1502  05BE  1283               	bcf	3,5	;RP0=0, select bank0
  1503  05BF  1303               	bcf	3,6	;RP1=0, select bank0
  1504  05C0  01A2               	clrf	getSensorData@bytes
  1505  05C1  0AA2               	incf	getSensorData@bytes,f
  1506  05C2  3012               	movlw	18
  1507  05C3  120A  158A  2661  120A  118A  	fcall	_getSensorData
  1508  05C8  3005               	movlw	5
  1509  05C9  1283               	bcf	3,5	;RP0=0, select bank0
  1510  05CA  1303               	bcf	3,6	;RP1=0, select bank0
  1511  05CB  0622               	xorwf	?_getSensorData,w
  1512  05CC  0423               	iorwf	?_getSensorData+1,w
  1513  05CD  1D03               	btfss	3,2
  1514  05CE  2C39               	goto	l2291
  1515                           
  1516                           ;main.c: 205: unsigned int ADC_CURRENT = 0;
  1517  05CF  01C3               	clrf	main@ADC_CURRENT
  1518  05D0  01C4               	clrf	main@ADC_CURRENT+1
  1519                           
  1520                           ;main.c: 206: unsigned int ADC_ADJUST = 0;
  1521  05D1  01D2               	clrf	main@ADC_ADJUST
  1522  05D2  01D3               	clrf	main@ADC_ADJUST+1
  1523                           
  1524                           ;main.c: 207: unsigned int CURRENT_SPEED_L = 90;
  1525  05D3  305A               	movlw	90
  1526  05D4  00CC               	movwf	main@CURRENT_SPEED_L
  1527  05D5  3000               	movlw	0
  1528  05D6  00CD               	movwf	main@CURRENT_SPEED_L+1
  1529                           
  1530                           ;main.c: 208: unsigned int ADJUSTED_SPEED_L = 0;
  1531  05D7  01C5               	clrf	main@ADJUSTED_SPEED_L
  1532  05D8  01C6               	clrf	main@ADJUSTED_SPEED_L+1
  1533                           
  1534                           ;main.c: 209: unsigned int CURRENT_SPEED_R = 80;
  1535  05D9  3050               	movlw	80
  1536  05DA  00CE               	movwf	main@CURRENT_SPEED_R
  1537  05DB  3000               	movlw	0
  1538  05DC  00CF               	movwf	main@CURRENT_SPEED_R+1
  1539                           
  1540                           ;main.c: 210: unsigned int ADJUSTED_SPEED_R = 0;
  1541  05DD  01C7               	clrf	main@ADJUSTED_SPEED_R
  1542  05DE  01C8               	clrf	main@ADJUSTED_SPEED_R+1
  1543                           
  1544                           ;main.c: 211: unsigned int timerLoop = 0;
  1545  05DF  01CA               	clrf	main@timerLoop
  1546  05E0  01CB               	clrf	main@timerLoop+1
  1547                           
  1548                           ;main.c: 215: unsigned int setADCdist = 250;
  1549  05E1  30FA               	movlw	250
  1550  05E2  00D4               	movwf	main@setADCdist
  1551  05E3  3000               	movlw	0
  1552  05E4  00D5               	movwf	main@setADCdist+1
  1553                           
  1554                           ;main.c: 216: unsigned int safetyCount = 0;
  1555  05E5  01D0               	clrf	main@safetyCount
  1556  05E6  01D1               	clrf	main@safetyCount+1
  1557                           
  1558                           ;main.c: 218: for(timerLoop = 0; timerLoop < 1200; timerLoop++) {
  1559  05E7  01CA               	clrf	main@timerLoop
  1560  05E8  01CB               	clrf	main@timerLoop+1
  1561  05E9                     L1:	
  1562  05E9  3004               	movlw	4
  1563  05EA  024B               	subwf	main@timerLoop+1,w
  1564  05EB  30B0               	movlw	176
  1565  05EC  1903               	skipnz
  1566  05ED  024A               	subwf	main@timerLoop,w
  1567  05EE  1803               	btfsc	3,0
  1568  05EF  2C39               	goto	l2291
  1569                           
  1570                           ;main.c: 219: ADCMain();
  1571  05F0  120A  158A  255D  120A  118A  	fcall	_ADCMain
  1572                           
  1573                           ;main.c: 221: if(adcRAW > setADCdist){
  1574  05F5  1283               	bcf	3,5	;RP0=0, select bank0
  1575  05F6  1303               	bcf	3,6	;RP1=0, select bank0
  1576  05F7  0857               	movf	_adcRAW+1,w	;volatile
  1577  05F8  0255               	subwf	main@setADCdist+1,w
  1578  05F9  1D03               	skipz
  1579  05FA  2DFD               	goto	u2375
  1580  05FB  0856               	movf	_adcRAW,w	;volatile
  1581  05FC  0254               	subwf	main@setADCdist,w
  1582  05FD                     u2375:	
  1583  05FD  1C03               	btfss	3,0
  1584  05FE  2E6F               	goto	l2393
  1585  05FF  2E7F               	goto	l2399
  1586  0600                     l2381:	
  1587                           ;main.c: 222: while(adcRAW > setADCdist && safetyCount < 20){
  1588                           
  1589                           
  1590                           ;main.c: 223: ADCMain();
  1591  0600  120A  158A  255D  120A  118A  	fcall	_ADCMain
  1592                           
  1593                           ;main.c: 224: ADC_ADJUST = adcRAW - setADCdist;
  1594  0605  1283               	bcf	3,5	;RP0=0, select bank0
  1595  0606  1303               	bcf	3,6	;RP1=0, select bank0
  1596  0607  0954               	comf	main@setADCdist,w
  1597  0608  00BF               	movwf	??_main
  1598  0609  0955               	comf	main@setADCdist+1,w
  1599  060A  00C0               	movwf	??_main+1
  1600  060B  0ABF               	incf	??_main,f
  1601  060C  1903               	skipnz
  1602  060D  0AC0               	incf	??_main+1,f
  1603  060E  0856               	movf	_adcRAW,w	;volatile
  1604  060F  073F               	addwf	??_main,w
  1605  0610  00D2               	movwf	main@ADC_ADJUST
  1606  0611  0857               	movf	_adcRAW+1,w	;volatile
  1607  0612  1803               	skipnc
  1608  0613  0A57               	incf	_adcRAW+1,w	;volatile
  1609  0614  0740               	addwf	??_main+1,w
  1610  0615  00D3               	movwf	main@ADC_ADJUST+1
  1611                           
  1612                           ;main.c: 225: ADJUSTED_SPEED_L = CURRENT_SPEED_L + (7/10)*ADC_ADJUST + (CURRENT_SPEED_L)
      +                          /(ADC_ADJUST+10);
  1613  0616  0853               	movf	main@ADC_ADJUST+1,w
  1614  0617  00A1               	movwf	___wmul@multiplier+1
  1615  0618  0852               	movf	main@ADC_ADJUST,w
  1616  0619  00A0               	movwf	___wmul@multiplier
  1617  061A  3000               	movlw	0
  1618  061B  00A2               	movwf	___wmul@multiplicand
  1619  061C  00A3               	movwf	___wmul@multiplicand+1
  1620  061D  120A  158A  257D  120A  118A  	fcall	___wmul
  1621  0622  1283               	bcf	3,5	;RP0=0, select bank0
  1622  0623  1303               	bcf	3,6	;RP1=0, select bank0
  1623  0624  0820               	movf	?___wmul,w
  1624  0625  00BF               	movwf	??_main
  1625  0626  0821               	movf	?___wmul+1,w
  1626  0627  00C0               	movwf	??_main+1
  1627  0628  0852               	movf	main@ADC_ADJUST,w
  1628  0629  3E0A               	addlw	10
  1629  062A  00A6               	movwf	___lwdiv@divisor
  1630  062B  0853               	movf	main@ADC_ADJUST+1,w
  1631  062C  1803               	skipnc
  1632  062D  3E01               	addlw	1
  1633  062E  3E00               	addlw	0
  1634  062F  00A7               	movwf	___lwdiv@divisor+1
  1635  0630  084D               	movf	main@CURRENT_SPEED_L+1,w
  1636  0631  00A9               	movwf	___lwdiv@dividend+1
  1637  0632  084C               	movf	main@CURRENT_SPEED_L,w
  1638  0633  00A8               	movwf	___lwdiv@dividend
  1639  0634  120A  158A  2623  120A  118A  	fcall	___lwdiv
  1640  0639  1283               	bcf	3,5	;RP0=0, select bank0
  1641  063A  1303               	bcf	3,6	;RP1=0, select bank0
  1642  063B  0826               	movf	?___lwdiv,w
  1643  063C  073F               	addwf	??_main,w
  1644  063D  00C1               	movwf	??_main+2
  1645  063E  0827               	movf	?___lwdiv+1,w
  1646  063F  1803               	skipnc
  1647  0640  0A27               	incf	?___lwdiv+1,w
  1648  0641  0740               	addwf	??_main+1,w
  1649  0642  00C2               	movwf	??_main+3
  1650  0643  084C               	movf	main@CURRENT_SPEED_L,w
  1651  0644  0741               	addwf	??_main+2,w
  1652  0645  00C5               	movwf	main@ADJUSTED_SPEED_L
  1653  0646  084D               	movf	main@CURRENT_SPEED_L+1,w
  1654  0647  1803               	skipnc
  1655  0648  0A4D               	incf	main@CURRENT_SPEED_L+1,w
  1656  0649  0742               	addwf	??_main+3,w
  1657  064A  00C6               	movwf	main@ADJUSTED_SPEED_L+1
  1658                           
  1659                           ;main.c: 226: DriveDirect(CURRENT_SPEED_R,ADJUSTED_SPEED_L);
  1660  064B  084F               	movf	main@CURRENT_SPEED_R+1,w
  1661  064C  00A2               	movwf	DriveDirect@VelocityRight+1
  1662  064D  084E               	movf	main@CURRENT_SPEED_R,w
  1663  064E  00A1               	movwf	DriveDirect@VelocityRight
  1664  064F  0846               	movf	main@ADJUSTED_SPEED_L+1,w
  1665  0650  00A4               	movwf	DriveDirect@VelocityLeft+1
  1666  0651  0845               	movf	main@ADJUSTED_SPEED_L,w
  1667  0652  00A3               	movwf	DriveDirect@VelocityLeft
  1668  0653  120A  158A  26E4  120A  118A  	fcall	_DriveDirect
  1669                           
  1670                           ;main.c: 227: _delay((unsigned long)((100)*(20000000/4000.0)));
  1671  0658  3003               	movlw	3
  1672  0659  1283               	bcf	3,5	;RP0=0, select bank0
  1673  065A  1303               	bcf	3,6	;RP1=0, select bank0
  1674  065B  00C1               	movwf	??_main+2
  1675  065C  308A               	movlw	138
  1676  065D  00C0               	movwf	??_main+1
  1677  065E  3056               	movlw	86
  1678  065F  00BF               	movwf	??_main
  1679  0660                     u2497:	
  1680  0660  0BBF               	decfsz	??_main,f
  1681  0661  2E60               	goto	u2497
  1682  0662  0BC0               	decfsz	??_main+1,f
  1683  0663  2E60               	goto	u2497
  1684  0664  0BC1               	decfsz	??_main+2,f
  1685  0665  2E60               	goto	u2497
  1686  0666  2E67               	nop2
  1687                           
  1688                           ;main.c: 228: safetyCount++;
  1689  0667  3001               	movlw	1
  1690  0668  1283               	bcf	3,5	;RP0=0, select bank0
  1691  0669  1303               	bcf	3,6	;RP1=0, select bank0
  1692  066A  07D0               	addwf	main@safetyCount,f
  1693  066B  1803               	skipnc
  1694  066C  0AD1               	incf	main@safetyCount+1,f
  1695  066D  3000               	movlw	0
  1696  066E  07D1               	addwf	main@safetyCount+1,f
  1697  066F                     l2393:	
  1698  066F  0857               	movf	_adcRAW+1,w	;volatile
  1699  0670  0255               	subwf	main@setADCdist+1,w
  1700  0671  1D03               	skipz
  1701  0672  2E75               	goto	u2385
  1702  0673  0856               	movf	_adcRAW,w	;volatile
  1703  0674  0254               	subwf	main@setADCdist,w
  1704  0675                     u2385:	
  1705  0675  1803               	skipnc
  1706  0676  2F06               	goto	l2419
  1707  0677  3000               	movlw	0
  1708  0678  0251               	subwf	main@safetyCount+1,w
  1709  0679  3014               	movlw	20
  1710  067A  1903               	skipnz
  1711  067B  0250               	subwf	main@safetyCount,w
  1712  067C  1C03               	skipc
  1713  067D  2E00               	goto	l2381
  1714  067E  2F06               	goto	l2419
  1715  067F                     l2399:	
  1716                           ;main.c: 232: } else if (adcRAW < setADCdist){
  1717                           
  1718                           ;main.c: 229: }
  1719                           ;main.c: 230: safetyCount = 0;
  1720                           
  1721  067F  0855               	movf	main@setADCdist+1,w
  1722  0680  0257               	subwf	_adcRAW+1,w	;volatile
  1723  0681  1D03               	skipz
  1724  0682  2E85               	goto	u2405
  1725  0683  0854               	movf	main@setADCdist,w
  1726  0684  0256               	subwf	_adcRAW,w	;volatile
  1727  0685                     u2405:	
  1728  0685  1C03               	btfss	3,0
  1729  0686  2EF7               	goto	l2415
  1730  0687  2F08               	goto	l2421
  1731  0688                     l2403:	
  1732                           ;main.c: 233: while(adcRAW < setADCdist && safetyCount < 20){
  1733                           
  1734                           
  1735                           ;main.c: 234: ADCMain();
  1736  0688  120A  158A  255D  120A  118A  	fcall	_ADCMain
  1737                           
  1738                           ;main.c: 235: ADC_ADJUST = setADCdist - adcRAW;
  1739  068D  1283               	bcf	3,5	;RP0=0, select bank0
  1740  068E  1303               	bcf	3,6	;RP1=0, select bank0
  1741  068F  0956               	comf	_adcRAW,w	;volatile
  1742  0690  00BF               	movwf	??_main
  1743  0691  0957               	comf	_adcRAW+1,w	;volatile
  1744  0692  00C0               	movwf	??_main+1
  1745  0693  0ABF               	incf	??_main,f
  1746  0694  1903               	skipnz
  1747  0695  0AC0               	incf	??_main+1,f
  1748  0696  0854               	movf	main@setADCdist,w
  1749  0697  073F               	addwf	??_main,w
  1750  0698  00D2               	movwf	main@ADC_ADJUST
  1751  0699  0855               	movf	main@setADCdist+1,w
  1752  069A  1803               	skipnc
  1753  069B  0A55               	incf	main@setADCdist+1,w
  1754  069C  0740               	addwf	??_main+1,w
  1755  069D  00D3               	movwf	main@ADC_ADJUST+1
  1756                           
  1757                           ;main.c: 236: ADJUSTED_SPEED_R = CURRENT_SPEED_R + (7/10)*ADC_ADJUST + (CURRENT_SPEED_R)
      +                          /(ADC_ADJUST+10);
  1758  069E  0853               	movf	main@ADC_ADJUST+1,w
  1759  069F  00A1               	movwf	___wmul@multiplier+1
  1760  06A0  0852               	movf	main@ADC_ADJUST,w
  1761  06A1  00A0               	movwf	___wmul@multiplier
  1762  06A2  3000               	movlw	0
  1763  06A3  00A2               	movwf	___wmul@multiplicand
  1764  06A4  00A3               	movwf	___wmul@multiplicand+1
  1765  06A5  120A  158A  257D  120A  118A  	fcall	___wmul
  1766  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  1767  06AB  1303               	bcf	3,6	;RP1=0, select bank0
  1768  06AC  0820               	movf	?___wmul,w
  1769  06AD  00BF               	movwf	??_main
  1770  06AE  0821               	movf	?___wmul+1,w
  1771  06AF  00C0               	movwf	??_main+1
  1772  06B0  0852               	movf	main@ADC_ADJUST,w
  1773  06B1  3E0A               	addlw	10
  1774  06B2  00A6               	movwf	___lwdiv@divisor
  1775  06B3  0853               	movf	main@ADC_ADJUST+1,w
  1776  06B4  1803               	skipnc
  1777  06B5  3E01               	addlw	1
  1778  06B6  3E00               	addlw	0
  1779  06B7  00A7               	movwf	___lwdiv@divisor+1
  1780  06B8  084F               	movf	main@CURRENT_SPEED_R+1,w
  1781  06B9  00A9               	movwf	___lwdiv@dividend+1
  1782  06BA  084E               	movf	main@CURRENT_SPEED_R,w
  1783  06BB  00A8               	movwf	___lwdiv@dividend
  1784  06BC  120A  158A  2623  120A  118A  	fcall	___lwdiv
  1785  06C1  1283               	bcf	3,5	;RP0=0, select bank0
  1786  06C2  1303               	bcf	3,6	;RP1=0, select bank0
  1787  06C3  0826               	movf	?___lwdiv,w
  1788  06C4  073F               	addwf	??_main,w
  1789  06C5  00C1               	movwf	??_main+2
  1790  06C6  0827               	movf	?___lwdiv+1,w
  1791  06C7  1803               	skipnc
  1792  06C8  0A27               	incf	?___lwdiv+1,w
  1793  06C9  0740               	addwf	??_main+1,w
  1794  06CA  00C2               	movwf	??_main+3
  1795  06CB  084E               	movf	main@CURRENT_SPEED_R,w
  1796  06CC  0741               	addwf	??_main+2,w
  1797  06CD  00C7               	movwf	main@ADJUSTED_SPEED_R
  1798  06CE  084F               	movf	main@CURRENT_SPEED_R+1,w
  1799  06CF  1803               	skipnc
  1800  06D0  0A4F               	incf	main@CURRENT_SPEED_R+1,w
  1801  06D1  0742               	addwf	??_main+3,w
  1802  06D2  00C8               	movwf	main@ADJUSTED_SPEED_R+1
  1803                           
  1804                           ;main.c: 237: DriveDirect(ADJUSTED_SPEED_R,CURRENT_SPEED_L);
  1805  06D3  0848               	movf	main@ADJUSTED_SPEED_R+1,w
  1806  06D4  00A2               	movwf	DriveDirect@VelocityRight+1
  1807  06D5  0847               	movf	main@ADJUSTED_SPEED_R,w
  1808  06D6  00A1               	movwf	DriveDirect@VelocityRight
  1809  06D7  084D               	movf	main@CURRENT_SPEED_L+1,w
  1810  06D8  00A4               	movwf	DriveDirect@VelocityLeft+1
  1811  06D9  084C               	movf	main@CURRENT_SPEED_L,w
  1812  06DA  00A3               	movwf	DriveDirect@VelocityLeft
  1813  06DB  120A  158A  26E4  120A  118A  	fcall	_DriveDirect
  1814                           
  1815                           ;main.c: 238: _delay((unsigned long)((100)*(20000000/4000.0)));
  1816  06E0  3003               	movlw	3
  1817  06E1  1283               	bcf	3,5	;RP0=0, select bank0
  1818  06E2  1303               	bcf	3,6	;RP1=0, select bank0
  1819  06E3  00C1               	movwf	??_main+2
  1820  06E4  308A               	movlw	138
  1821  06E5  00C0               	movwf	??_main+1
  1822  06E6  3056               	movlw	86
  1823  06E7  00BF               	movwf	??_main
  1824  06E8                     u2507:	
  1825  06E8  0BBF               	decfsz	??_main,f
  1826  06E9  2EE8               	goto	u2507
  1827  06EA  0BC0               	decfsz	??_main+1,f
  1828  06EB  2EE8               	goto	u2507
  1829  06EC  0BC1               	decfsz	??_main+2,f
  1830  06ED  2EE8               	goto	u2507
  1831  06EE  2EEF               	nop2
  1832                           
  1833                           ;main.c: 239: safetyCount++;
  1834  06EF  3001               	movlw	1
  1835  06F0  1283               	bcf	3,5	;RP0=0, select bank0
  1836  06F1  1303               	bcf	3,6	;RP1=0, select bank0
  1837  06F2  07D0               	addwf	main@safetyCount,f
  1838  06F3  1803               	skipnc
  1839  06F4  0AD1               	incf	main@safetyCount+1,f
  1840  06F5  3000               	movlw	0
  1841  06F6  07D1               	addwf	main@safetyCount+1,f
  1842  06F7                     l2415:	
  1843  06F7  0855               	movf	main@setADCdist+1,w
  1844  06F8  0257               	subwf	_adcRAW+1,w	;volatile
  1845  06F9  1D03               	skipz
  1846  06FA  2EFD               	goto	u2415
  1847  06FB  0854               	movf	main@setADCdist,w
  1848  06FC  0256               	subwf	_adcRAW,w	;volatile
  1849  06FD                     u2415:	
  1850  06FD  1803               	skipnc
  1851  06FE  2F06               	goto	l2419
  1852  06FF  3000               	movlw	0
  1853  0700  0251               	subwf	main@safetyCount+1,w
  1854  0701  3014               	movlw	20
  1855  0702  1903               	skipnz
  1856  0703  0250               	subwf	main@safetyCount,w
  1857  0704  1C03               	skipc
  1858  0705  2E88               	goto	l2403
  1859  0706                     l2419:	
  1860                           
  1861                           ;main.c: 240: }
  1862                           ;main.c: 241: safetyCount = 0;
  1863  0706  01D0               	clrf	main@safetyCount
  1864  0707  01D1               	clrf	main@safetyCount+1
  1865  0708                     l2421:	
  1866  0708  3001               	movlw	1
  1867  0709  07CA               	addwf	main@timerLoop,f
  1868  070A  1803               	skipnc
  1869  070B  0ACB               	incf	main@timerLoop+1,f
  1870  070C  3000               	movlw	0
  1871  070D  07CB               	addwf	main@timerLoop+1,f
  1872  070E  2DE9               	goto	L1
  1873  070F                     __end_of_main:	
  1874                           
  1875                           	psect	text1
  1876  0D0D                     __ptext1:	
  1877 ;; *************** function _spi_transfer *****************
  1878 ;; Defined at:
  1879 ;;		line 23 in file "SPI.c"
  1880 ;; Parameters:    Size  Location     Type
  1881 ;;  data            1    wreg     unsigned char 
  1882 ;; Auto vars:     Size  Location     Type
  1883 ;;  data            1    2[BANK0 ] unsigned char 
  1884 ;;  temp            1    1[BANK0 ] unsigned char 
  1885 ;; Return value:  Size  Location     Type
  1886 ;;                  1    wreg      unsigned char 
  1887 ;; Registers used:
  1888 ;;		wreg, status,2
  1889 ;; Tracked objects:
  1890 ;;		On entry : 0/0
  1891 ;;		On exit  : 0/0
  1892 ;;		Unchanged: 0/0
  1893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1894 ;;      Params:         0       0       0       0       0
  1895 ;;      Locals:         0       2       0       0       0
  1896 ;;      Temps:          0       1       0       0       0
  1897 ;;      Totals:         0       3       0       0       0
  1898 ;;Total ram usage:        3 bytes
  1899 ;; Hardware stack levels used:    1
  1900 ;; Hardware stack levels required when called:    2
  1901 ;; This function calls:
  1902 ;;		Nothing
  1903 ;; This function is called by:
  1904 ;;		_main
  1905 ;; This function uses a non-reentrant model
  1906 ;;
  1907                           
  1908                           
  1909                           ;psect for function _spi_transfer
  1910  0D0D                     _spi_transfer:	
  1911                           
  1912                           ;incstack = 0
  1913                           ; Regs used in _spi_transfer: [wreg+status,2]
  1914                           ;spi_transfer@data stored from wreg
  1915  0D0D  1283               	bcf	3,5	;RP0=0, select bank0
  1916  0D0E  1303               	bcf	3,6	;RP1=0, select bank0
  1917  0D0F  00A2               	movwf	spi_transfer@data
  1918                           
  1919                           ;SPI.c: 24: unsigned char temp = 0;
  1920  0D10  01A1               	clrf	spi_transfer@temp
  1921                           
  1922                           ;SPI.c: 26: SSPIF = 0;
  1923  0D11  118C               	bcf	12,3	;volatile
  1924                           
  1925                           ;SPI.c: 27: SSPBUF = data;
  1926  0D12  0822               	movf	spi_transfer@data,w
  1927  0D13  0093               	movwf	19	;volatile
  1928  0D14                     l291:	
  1929                           ;SPI.c: 29: while (SSPIF == 0);
  1930                           
  1931  0D14  1D8C               	btfss	12,3	;volatile
  1932  0D15  2D14               	goto	l291
  1933                           
  1934                           ;SPI.c: 30: temp = SSPBUF;
  1935  0D16  0813               	movf	19,w	;volatile
  1936  0D17  00A0               	movwf	??_spi_transfer
  1937  0D18  0820               	movf	??_spi_transfer,w
  1938  0D19  00A1               	movwf	spi_transfer@temp
  1939                           
  1940                           ;SPI.c: 31: SSPIF = 0;
  1941  0D1A  118C               	bcf	12,3	;volatile
  1942  0D1B  0008               	return
  1943  0D1C                     __end_of_spi_transfer:	
  1944                           ;SPI.c: 33: return temp;
  1945                           ;	Return value of _spi_transfer is never used
  1946                           
  1947                           
  1948                           	psect	text2
  1949  0D45                     __ptext2:	
  1950 ;; *************** function _setupSPI *****************
  1951 ;; Defined at:
  1952 ;;		line 4 in file "SPI.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;		None
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;		None
  1957 ;; Return value:  Size  Location     Type
  1958 ;;                  1    wreg      void 
  1959 ;; Registers used:
  1960 ;;		wreg, status,2
  1961 ;; Tracked objects:
  1962 ;;		On entry : 0/0
  1963 ;;		On exit  : 0/0
  1964 ;;		Unchanged: 0/0
  1965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1966 ;;      Params:         0       0       0       0       0
  1967 ;;      Locals:         0       0       0       0       0
  1968 ;;      Temps:          0       0       0       0       0
  1969 ;;      Totals:         0       0       0       0       0
  1970 ;;Total ram usage:        0 bytes
  1971 ;; Hardware stack levels used:    1
  1972 ;; Hardware stack levels required when called:    2
  1973 ;; This function calls:
  1974 ;;		Nothing
  1975 ;; This function is called by:
  1976 ;;		_main
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           
  1981                           ;psect for function _setupSPI
  1982  0D45                     _setupSPI:	
  1983                           
  1984                           ;SPI.c: 6: TRISB = 0b00000000;
  1985                           
  1986                           ;incstack = 0
  1987                           ; Regs used in _setupSPI: [wreg+status,2]
  1988  0D45  1683               	bsf	3,5	;RP0=1, select bank1
  1989  0D46  1303               	bcf	3,6	;RP1=0, select bank1
  1990  0D47  0186               	clrf	6	;volatile
  1991                           
  1992                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  1993  0D48  3040               	movlw	64
  1994  0D49  0094               	movwf	20	;volatile
  1995                           
  1996                           ;SPI.c: 9: SSPCON = 0b00100000;
  1997  0D4A  3020               	movlw	32
  1998  0D4B  1283               	bcf	3,5	;RP0=0, select bank0
  1999  0D4C  1303               	bcf	3,6	;RP1=0, select bank0
  2000  0D4D  0094               	movwf	20	;volatile
  2001                           
  2002                           ;SPI.c: 10: TRISC = 0b11010000;
  2003  0D4E  30D0               	movlw	208
  2004  0D4F  1683               	bsf	3,5	;RP0=1, select bank1
  2005  0D50  1303               	bcf	3,6	;RP1=0, select bank1
  2006  0D51  0087               	movwf	7	;volatile
  2007                           
  2008                           ;SPI.c: 11: PORTC = 0b00000011;
  2009  0D52  3003               	movlw	3
  2010  0D53  1283               	bcf	3,5	;RP0=0, select bank0
  2011  0D54  1303               	bcf	3,6	;RP1=0, select bank0
  2012  0D55  0087               	movwf	7	;volatile
  2013                           
  2014                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  2015  0D56  3004               	movlw	4
  2016  0D57  1683               	bsf	3,5	;RP0=1, select bank1
  2017  0D58  1303               	bcf	3,6	;RP1=0, select bank1
  2018  0D59  0081               	movwf	1	;volatile
  2019                           
  2020                           ;SPI.c: 16: TMR0IE = 1;
  2021  0D5A  168B               	bsf	11,5	;volatile
  2022                           
  2023                           ;SPI.c: 19: (GIE = 1);
  2024  0D5B  178B               	bsf	11,7	;volatile
  2025  0D5C  0008               	return
  2026  0D5D                     __end_of_setupSPI:	
  2027                           
  2028                           	psect	text3
  2029  0DC8                     __ptext3:	
  2030 ;; *************** function _setupLCD *****************
  2031 ;; Defined at:
  2032 ;;		line 86 in file "LCD.c"
  2033 ;; Parameters:    Size  Location     Type
  2034 ;;		None
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;		None
  2037 ;; Return value:  Size  Location     Type
  2038 ;;                  1    wreg      void 
  2039 ;; Registers used:
  2040 ;;		wreg, status,2, status,0, pclath, cstack
  2041 ;; Tracked objects:
  2042 ;;		On entry : 0/0
  2043 ;;		On exit  : 0/0
  2044 ;;		Unchanged: 0/0
  2045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2046 ;;      Params:         0       0       0       0       0
  2047 ;;      Locals:         0       0       0       0       0
  2048 ;;      Temps:          0       0       0       0       0
  2049 ;;      Totals:         0       0       0       0       0
  2050 ;;Total ram usage:        0 bytes
  2051 ;; Hardware stack levels used:    1
  2052 ;; Hardware stack levels required when called:    3
  2053 ;; This function calls:
  2054 ;;		_lcdWriteControl
  2055 ;; This function is called by:
  2056 ;;		_main
  2057 ;; This function uses a non-reentrant model
  2058 ;;
  2059                           
  2060                           
  2061                           ;psect for function _setupLCD
  2062  0DC8                     _setupLCD:	
  2063                           
  2064                           ;LCD.c: 88: ADCON1 = 0b00000010;
  2065                           
  2066                           ;incstack = 0
  2067                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  2068  0DC8  3002               	movlw	2
  2069  0DC9  1683               	bsf	3,5	;RP0=1, select bank1
  2070  0DCA  1303               	bcf	3,6	;RP1=0, select bank1
  2071  0DCB  009F               	movwf	31	;volatile
  2072                           
  2073                           ;LCD.c: 90: PORTD = 0;
  2074  0DCC  1283               	bcf	3,5	;RP0=0, select bank0
  2075  0DCD  1303               	bcf	3,6	;RP1=0, select bank0
  2076  0DCE  0188               	clrf	8	;volatile
  2077                           
  2078                           ;LCD.c: 91: PORTE = 0;
  2079  0DCF  0189               	clrf	9	;volatile
  2080                           
  2081                           ;LCD.c: 93: TRISD = 0b00000000;
  2082  0DD0  1683               	bsf	3,5	;RP0=1, select bank1
  2083  0DD1  1303               	bcf	3,6	;RP1=0, select bank1
  2084  0DD2  0188               	clrf	8	;volatile
  2085                           
  2086                           ;LCD.c: 94: TRISE = 0b00000000;
  2087  0DD3  0189               	clrf	9	;volatile
  2088                           
  2089                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  2090  0DD4  3001               	movlw	1
  2091  0DD5  120A  118A  27EB  120A  158A  	fcall	_lcdWriteControl
  2092                           
  2093                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  2094  0DDA  3038               	movlw	56
  2095  0DDB  120A  118A  27EB  120A  158A  	fcall	_lcdWriteControl
  2096                           
  2097                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  2098  0DE0  300C               	movlw	12
  2099  0DE1  120A  118A  27EB  120A  158A  	fcall	_lcdWriteControl
  2100                           
  2101                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  2102  0DE6  3006               	movlw	6
  2103  0DE7  120A  118A  27EB  120A  158A  	fcall	_lcdWriteControl
  2104                           
  2105                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  2106  0DEC  3002               	movlw	2
  2107  0DED  120A  118A  27EB   	fcall	_lcdWriteControl
  2108  0DF0  0008               	return
  2109  0DF1                     __end_of_setupLCD:	
  2110                           
  2111                           	psect	text4
  2112  0D2F                     __ptext4:	
  2113 ;; *************** function _setupADC *****************
  2114 ;; Defined at:
  2115 ;;		line 8 in file "ADC.c"
  2116 ;; Parameters:    Size  Location     Type
  2117 ;;		None
  2118 ;; Auto vars:     Size  Location     Type
  2119 ;;		None
  2120 ;; Return value:  Size  Location     Type
  2121 ;;                  1    wreg      void 
  2122 ;; Registers used:
  2123 ;;		wreg, status,2
  2124 ;; Tracked objects:
  2125 ;;		On entry : 0/0
  2126 ;;		On exit  : 0/0
  2127 ;;		Unchanged: 0/0
  2128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2129 ;;      Params:         0       0       0       0       0
  2130 ;;      Locals:         0       0       0       0       0
  2131 ;;      Temps:          0       1       0       0       0
  2132 ;;      Totals:         0       1       0       0       0
  2133 ;;Total ram usage:        1 bytes
  2134 ;; Hardware stack levels used:    1
  2135 ;; Hardware stack levels required when called:    2
  2136 ;; This function calls:
  2137 ;;		Nothing
  2138 ;; This function is called by:
  2139 ;;		_main
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           
  2144                           ;psect for function _setupADC
  2145  0D2F                     _setupADC:	
  2146                           
  2147                           ;ADC.c: 9: PORTA = 0;
  2148                           
  2149                           ;incstack = 0
  2150                           ; Regs used in _setupADC: [wreg+status,2]
  2151  0D2F  1283               	bcf	3,5	;RP0=0, select bank0
  2152  0D30  1303               	bcf	3,6	;RP1=0, select bank0
  2153  0D31  0185               	clrf	5	;volatile
  2154                           
  2155                           ;ADC.c: 10: TRISA = 0b11111111;
  2156  0D32  30FF               	movlw	255
  2157  0D33  1683               	bsf	3,5	;RP0=1, select bank1
  2158  0D34  1303               	bcf	3,6	;RP1=0, select bank1
  2159  0D35  0085               	movwf	5	;volatile
  2160                           
  2161                           ;ADC.c: 13: ADCON0 = 0b10001001;
  2162  0D36  3089               	movlw	137
  2163  0D37  1283               	bcf	3,5	;RP0=0, select bank0
  2164  0D38  1303               	bcf	3,6	;RP1=0, select bank0
  2165  0D39  009F               	movwf	31	;volatile
  2166                           
  2167                           ;ADC.c: 14: ADCON1 = 0b00000010;
  2168  0D3A  3002               	movlw	2
  2169  0D3B  1683               	bsf	3,5	;RP0=1, select bank1
  2170  0D3C  1303               	bcf	3,6	;RP1=0, select bank1
  2171  0D3D  009F               	movwf	31	;volatile
  2172                           
  2173                           ;ADC.c: 16: _delay((unsigned long)((50)*(20000000/4000000.0)));
  2174  0D3E  3053               	movlw	83
  2175  0D3F  1283               	bcf	3,5	;RP0=0, select bank0
  2176  0D40  1303               	bcf	3,6	;RP1=0, select bank0
  2177  0D41  00A0               	movwf	??_setupADC
  2178  0D42                     u2517:	
  2179  0D42  0BA0               	decfsz	??_setupADC,f
  2180  0D43  2D42               	goto	u2517
  2181  0D44  0008               	return
  2182  0D45                     __end_of_setupADC:	
  2183                           
  2184                           	psect	text5
  2185  0CFE                     __ptext5:	
  2186 ;; *************** function _ser_init *****************
  2187 ;; Defined at:
  2188 ;;		line 5 in file "ser.c"
  2189 ;; Parameters:    Size  Location     Type
  2190 ;;		None
  2191 ;; Auto vars:     Size  Location     Type
  2192 ;;		None
  2193 ;; Return value:  Size  Location     Type
  2194 ;;                  1    wreg      void 
  2195 ;; Registers used:
  2196 ;;		wreg
  2197 ;; Tracked objects:
  2198 ;;		On entry : 0/0
  2199 ;;		On exit  : 0/0
  2200 ;;		Unchanged: 0/0
  2201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2202 ;;      Params:         0       0       0       0       0
  2203 ;;      Locals:         0       0       0       0       0
  2204 ;;      Temps:          0       0       0       0       0
  2205 ;;      Totals:         0       0       0       0       0
  2206 ;;Total ram usage:        0 bytes
  2207 ;; Hardware stack levels used:    1
  2208 ;; Hardware stack levels required when called:    2
  2209 ;; This function calls:
  2210 ;;		Nothing
  2211 ;; This function is called by:
  2212 ;;		_main
  2213 ;; This function uses a non-reentrant model
  2214 ;;
  2215                           
  2216                           
  2217                           ;psect for function _ser_init
  2218  0CFE                     _ser_init:	
  2219                           
  2220                           ;ser.c: 7: TXSTA = 0b00100100;
  2221                           
  2222                           ;incstack = 0
  2223                           ; Regs used in _ser_init: [wreg]
  2224  0CFE  3024               	movlw	36
  2225  0CFF  1683               	bsf	3,5	;RP0=1, select bank1
  2226  0D00  1303               	bcf	3,6	;RP1=0, select bank1
  2227  0D01  0098               	movwf	24	;volatile
  2228                           
  2229                           ;ser.c: 8: RCSTA = 0b10011000;
  2230  0D02  3098               	movlw	152
  2231  0D03  1283               	bcf	3,5	;RP0=0, select bank0
  2232  0D04  1303               	bcf	3,6	;RP1=0, select bank0
  2233  0D05  0098               	movwf	24	;volatile
  2234                           
  2235                           ;ser.c: 24: SPBRG = 20;
  2236  0D06  3014               	movlw	20
  2237  0D07  1683               	bsf	3,5	;RP0=1, select bank1
  2238  0D08  1303               	bcf	3,6	;RP1=0, select bank1
  2239  0D09  0099               	movwf	25	;volatile
  2240                           
  2241                           ;ser.c: 26: PEIE = 1;
  2242  0D0A  170B               	bsf	11,6	;volatile
  2243                           
  2244                           ;ser.c: 27: (GIE = 1);
  2245  0D0B  178B               	bsf	11,7	;volatile
  2246  0D0C  0008               	return
  2247  0D0D                     __end_of_ser_init:	
  2248                           
  2249                           	psect	text6
  2250  0E61                     __ptext6:	
  2251 ;; *************** function _getSensorData *****************
  2252 ;; Defined at:
  2253 ;;		line 85 in file "ser.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;  packetID        1    wreg     unsigned char 
  2256 ;;  bytes           1    2[BANK0 ] unsigned char 
  2257 ;; Auto vars:     Size  Location     Type
  2258 ;;  packetID        1    8[BANK0 ] unsigned char 
  2259 ;;  sensor          2    6[BANK0 ] int 
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  2    2[BANK0 ] int 
  2262 ;; Registers used:
  2263 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2269 ;;      Params:         0       2       0       0       0
  2270 ;;      Locals:         0       3       0       0       0
  2271 ;;      Temps:          0       2       0       0       0
  2272 ;;      Totals:         0       7       0       0       0
  2273 ;;Total ram usage:        7 bytes
  2274 ;; Hardware stack levels used:    1
  2275 ;; Hardware stack levels required when called:    3
  2276 ;; This function calls:
  2277 ;;		_ser_getch
  2278 ;;		_ser_putch
  2279 ;; This function is called by:
  2280 ;;		_main
  2281 ;; This function uses a non-reentrant model
  2282 ;;
  2283                           
  2284                           
  2285                           ;psect for function _getSensorData
  2286  0E61                     _getSensorData:	
  2287                           
  2288                           ;incstack = 0
  2289                           ; Regs used in _getSensorData: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2290                           ;getSensorData@packetID stored from wreg
  2291  0E61  1283               	bcf	3,5	;RP0=0, select bank0
  2292  0E62  1303               	bcf	3,6	;RP1=0, select bank0
  2293  0E63  00A8               	movwf	getSensorData@packetID
  2294                           
  2295                           ;ser.c: 86: ser_putch(142);
  2296  0E64  308E               	movlw	142
  2297  0E65  120A  158A  24F2  120A  158A  	fcall	_ser_putch
  2298                           
  2299                           ;ser.c: 87: ser_putch(packetID);
  2300  0E6A  1283               	bcf	3,5	;RP0=0, select bank0
  2301  0E6B  1303               	bcf	3,6	;RP1=0, select bank0
  2302  0E6C  0828               	movf	getSensorData@packetID,w
  2303  0E6D  120A  158A  24F2  120A  158A  	fcall	_ser_putch
  2304                           
  2305                           ;ser.c: 89: if (bytes == 2)
  2306  0E72  3002               	movlw	2
  2307  0E73  1283               	bcf	3,5	;RP0=0, select bank0
  2308  0E74  1303               	bcf	3,6	;RP1=0, select bank0
  2309  0E75  0622               	xorwf	getSensorData@bytes,w
  2310  0E76  1D03               	btfss	3,2
  2311  0E77  2E83               	goto	l2089
  2312                           
  2313                           ;ser.c: 90: highByte = ser_getch();
  2314  0E78  120A  158A  24E8  120A  158A  	fcall	_ser_getch
  2315  0E7D  1283               	bcf	3,5	;RP0=0, select bank0
  2316  0E7E  1303               	bcf	3,6	;RP1=0, select bank0
  2317  0E7F  00A4               	movwf	??_getSensorData
  2318  0E80  0824               	movf	??_getSensorData,w
  2319  0E81  00EF               	movwf	_highByte
  2320  0E82  2E84               	goto	l2091
  2321  0E83                     l2089:	
  2322                           
  2323                           ;ser.c: 91: else
  2324                           ;ser.c: 92: highByte = 0;
  2325  0E83  01EF               	clrf	_highByte
  2326  0E84                     l2091:	
  2327                           
  2328                           ;ser.c: 94: lowByte = ser_getch();
  2329  0E84  120A  158A  24E8   	fcall	_ser_getch
  2330  0E87  1283               	bcf	3,5	;RP0=0, select bank0
  2331  0E88  1303               	bcf	3,6	;RP1=0, select bank0
  2332  0E89  00A4               	movwf	??_getSensorData
  2333  0E8A  0824               	movf	??_getSensorData,w
  2334  0E8B  00E8               	movwf	_lowByte
  2335                           
  2336                           ;ser.c: 96: signed int sensor = (256*highByte + lowByte);
  2337  0E8C  086F               	movf	_highByte,w
  2338  0E8D  00A4               	movwf	??_getSensorData
  2339  0E8E  01A5               	clrf	??_getSensorData+1
  2340  0E8F  0824               	movf	??_getSensorData,w
  2341  0E90  00A5               	movwf	??_getSensorData+1
  2342  0E91  01A4               	clrf	??_getSensorData
  2343  0E92  0868               	movf	_lowByte,w
  2344  0E93  0724               	addwf	??_getSensorData,w
  2345  0E94  00A6               	movwf	getSensorData@sensor
  2346  0E95  3000               	movlw	0
  2347  0E96  1803               	skipnc
  2348  0E97  3001               	movlw	1
  2349  0E98  0725               	addwf	??_getSensorData+1,w
  2350  0E99  00A7               	movwf	getSensorData@sensor+1
  2351                           
  2352                           ;ser.c: 98: return sensor;
  2353  0E9A  0827               	movf	getSensorData@sensor+1,w
  2354  0E9B  00A3               	movwf	?_getSensorData+1
  2355  0E9C  0826               	movf	getSensorData@sensor,w
  2356  0E9D  00A2               	movwf	?_getSensorData
  2357  0E9E  0008               	return
  2358  0E9F                     __end_of_getSensorData:	
  2359                           
  2360                           	psect	text7
  2361  0CE8                     __ptext7:	
  2362 ;; *************** function _ser_getch *****************
  2363 ;; Defined at:
  2364 ;;		line 35 in file "ser.c"
  2365 ;; Parameters:    Size  Location     Type
  2366 ;;		None
  2367 ;; Auto vars:     Size  Location     Type
  2368 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  2369 ;; Return value:  Size  Location     Type
  2370 ;;                  1    wreg      unsigned char 
  2371 ;; Registers used:
  2372 ;;		wreg
  2373 ;; Tracked objects:
  2374 ;;		On entry : 0/0
  2375 ;;		On exit  : 0/0
  2376 ;;		Unchanged: 0/0
  2377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2378 ;;      Params:         0       0       0       0       0
  2379 ;;      Locals:         0       1       0       0       0
  2380 ;;      Temps:          0       1       0       0       0
  2381 ;;      Totals:         0       2       0       0       0
  2382 ;;Total ram usage:        2 bytes
  2383 ;; Hardware stack levels used:    1
  2384 ;; Hardware stack levels required when called:    2
  2385 ;; This function calls:
  2386 ;;		Nothing
  2387 ;; This function is called by:
  2388 ;;		_getSensorData
  2389 ;; This function uses a non-reentrant model
  2390 ;;
  2391                           
  2392                           
  2393                           ;psect for function _ser_getch
  2394  0CE8                     _ser_getch:	
  2395  0CE8                     l366:	
  2396                           ;ser.c: 36: while(!RCIF);
  2397                           
  2398                           ;incstack = 0
  2399                           ; Regs used in _ser_getch: [wreg]
  2400                           
  2401  0CE8  1283               	bcf	3,5	;RP0=0, select bank0
  2402  0CE9  1303               	bcf	3,6	;RP1=0, select bank0
  2403  0CEA  1E8C               	btfss	12,5	;volatile
  2404  0CEB  2CE8               	goto	l366
  2405                           
  2406                           ;ser.c: 37: unsigned char rxbyte = RCREG;
  2407  0CEC  081A               	movf	26,w	;volatile
  2408  0CED  00A0               	movwf	??_ser_getch
  2409  0CEE  0820               	movf	??_ser_getch,w
  2410  0CEF  00A1               	movwf	ser_getch@rxbyte
  2411                           
  2412                           ;ser.c: 38: return rxbyte;
  2413  0CF0  0821               	movf	ser_getch@rxbyte,w
  2414  0CF1  0008               	return
  2415  0CF2                     __end_of_ser_getch:	
  2416                           
  2417                           	psect	text8
  2418  0EE4                     __ptext8:	
  2419 ;; *************** function _DriveDirect *****************
  2420 ;; Defined at:
  2421 ;;		line 54 in file "ser.c"
  2422 ;; Parameters:    Size  Location     Type
  2423 ;;  VelocityRigh    2    1[BANK0 ] int 
  2424 ;;  VelocityLeft    2    3[BANK0 ] int 
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;  data            2    8[BANK0 ] unsigned int 
  2427 ;;  data            2    6[BANK0 ] unsigned int 
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  1    wreg      void 
  2430 ;; Registers used:
  2431 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2437 ;;      Params:         0       4       0       0       0
  2438 ;;      Locals:         0       4       0       0       0
  2439 ;;      Temps:          0       1       0       0       0
  2440 ;;      Totals:         0       9       0       0       0
  2441 ;;Total ram usage:        9 bytes
  2442 ;; Hardware stack levels used:    1
  2443 ;; Hardware stack levels required when called:    3
  2444 ;; This function calls:
  2445 ;;		_ser_putch
  2446 ;; This function is called by:
  2447 ;;		_main
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           
  2452                           ;psect for function _DriveDirect
  2453  0EE4                     _DriveDirect:	
  2454                           
  2455                           ;ser.c: 55: RightSpeedH = 0;
  2456                           
  2457                           ;incstack = 0
  2458                           ; Regs used in _DriveDirect: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2459  0EE4  1283               	bcf	3,5	;RP0=0, select bank0
  2460  0EE5  1303               	bcf	3,6	;RP1=0, select bank0
  2461  0EE6  01E3               	clrf	_RightSpeedH
  2462                           
  2463                           ;ser.c: 56: LeftSpeedH = 0;
  2464  0EE7  01DE               	clrf	_LeftSpeedH
  2465                           
  2466                           ;ser.c: 58: if(VelocityRight > 255){
  2467  0EE8  0822               	movf	DriveDirect@VelocityRight+1,w
  2468  0EE9  3A80               	xorlw	128
  2469  0EEA  00FF               	movwf	127
  2470  0EEB  3081               	movlw	129
  2471  0EEC  027F               	subwf	127,w
  2472  0EED  1D03               	skipz
  2473  0EEE  2EF1               	goto	u1925
  2474  0EEF  3000               	movlw	0
  2475  0EF0  0221               	subwf	DriveDirect@VelocityRight,w
  2476  0EF1                     u1925:	
  2477  0EF1  1C03               	skipc
  2478  0EF2  2F14               	goto	l2115
  2479                           
  2480                           ;ser.c: 59: unsigned int data = VelocityRight;
  2481  0EF3  1283               	bcf	3,5	;RP0=0, select bank0
  2482  0EF4  1303               	bcf	3,6	;RP1=0, select bank0
  2483  0EF5  0822               	movf	DriveDirect@VelocityRight+1,w
  2484  0EF6  00A7               	movwf	DriveDirect@data+1
  2485  0EF7  0821               	movf	DriveDirect@VelocityRight,w
  2486  0EF8  00A6               	movwf	DriveDirect@data
  2487                           
  2488                           ;ser.c: 60: for (RightSpeedH = 0; data > 255; RightSpeedH++){
  2489  0EF9  01E3               	clrf	_RightSpeedH
  2490  0EFA  3001               	movlw	1
  2491  0EFB  0227               	subwf	DriveDirect@data+1,w
  2492  0EFC  3000               	movlw	0
  2493  0EFD  1903               	skipnz
  2494  0EFE  0226               	subwf	DriveDirect@data,w
  2495  0EFF  1C03               	btfss	3,0
  2496  0F00  2F14               	goto	l2115
  2497  0F01                     l2111:	
  2498                           
  2499                           ;ser.c: 61: data = data - 256;
  2500  0F01  0826               	movf	DriveDirect@data,w
  2501  0F02  3E00               	addlw	0
  2502  0F03  00A6               	movwf	DriveDirect@data
  2503  0F04  0827               	movf	DriveDirect@data+1,w
  2504  0F05  1803               	skipnc
  2505  0F06  3E01               	addlw	1
  2506  0F07  3EFF               	addlw	255
  2507  0F08  00A7               	movwf	DriveDirect@data+1
  2508  0F09  3001               	movlw	1
  2509  0F0A  00A5               	movwf	??_DriveDirect
  2510  0F0B  0825               	movf	??_DriveDirect,w
  2511  0F0C  07E3               	addwf	_RightSpeedH,f
  2512  0F0D  3001               	movlw	1
  2513  0F0E  0227               	subwf	DriveDirect@data+1,w
  2514  0F0F  3000               	movlw	0
  2515  0F10  1903               	skipnz
  2516  0F11  0226               	subwf	DriveDirect@data,w
  2517  0F12  1803               	skipnc
  2518  0F13  2F01               	goto	l2111
  2519  0F14                     l2115:	
  2520                           
  2521                           ;ser.c: 62: }
  2522                           ;ser.c: 63: }
  2523                           ;ser.c: 64: RightSpeedL = VelocityRight;
  2524  0F14  1283               	bcf	3,5	;RP0=0, select bank0
  2525  0F15  1303               	bcf	3,6	;RP1=0, select bank0
  2526  0F16  0821               	movf	DriveDirect@VelocityRight,w
  2527  0F17  00A5               	movwf	??_DriveDirect
  2528  0F18  0825               	movf	??_DriveDirect,w
  2529  0F19  00E4               	movwf	_RightSpeedL
  2530                           
  2531                           ;ser.c: 67: if(VelocityLeft > 255){
  2532  0F1A  0824               	movf	DriveDirect@VelocityLeft+1,w
  2533  0F1B  3A80               	xorlw	128
  2534  0F1C  00FF               	movwf	127
  2535  0F1D  3081               	movlw	129
  2536  0F1E  027F               	subwf	127,w
  2537  0F1F  1D03               	skipz
  2538  0F20  2F23               	goto	u1955
  2539  0F21  3000               	movlw	0
  2540  0F22  0223               	subwf	DriveDirect@VelocityLeft,w
  2541  0F23                     u1955:	
  2542  0F23  1C03               	skipc
  2543  0F24  2F46               	goto	l2131
  2544                           
  2545                           ;ser.c: 68: unsigned int data = VelocityLeft;
  2546  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  2547  0F26  1303               	bcf	3,6	;RP1=0, select bank0
  2548  0F27  0824               	movf	DriveDirect@VelocityLeft+1,w
  2549  0F28  00A9               	movwf	DriveDirect@data_253+1
  2550  0F29  0823               	movf	DriveDirect@VelocityLeft,w
  2551  0F2A  00A8               	movwf	DriveDirect@data_253
  2552                           
  2553                           ;ser.c: 69: for (LeftSpeedH = 0; data > 255; LeftSpeedH++){
  2554  0F2B  01DE               	clrf	_LeftSpeedH
  2555  0F2C  3001               	movlw	1
  2556  0F2D  0229               	subwf	DriveDirect@data_253+1,w
  2557  0F2E  3000               	movlw	0
  2558  0F2F  1903               	skipnz
  2559  0F30  0228               	subwf	DriveDirect@data_253,w
  2560  0F31  1C03               	btfss	3,0
  2561  0F32  2F46               	goto	l2131
  2562  0F33                     l2127:	
  2563                           
  2564                           ;ser.c: 70: data = data - 256;
  2565  0F33  0828               	movf	DriveDirect@data_253,w
  2566  0F34  3E00               	addlw	0
  2567  0F35  00A8               	movwf	DriveDirect@data_253
  2568  0F36  0829               	movf	DriveDirect@data_253+1,w
  2569  0F37  1803               	skipnc
  2570  0F38  3E01               	addlw	1
  2571  0F39  3EFF               	addlw	255
  2572  0F3A  00A9               	movwf	DriveDirect@data_253+1
  2573  0F3B  3001               	movlw	1
  2574  0F3C  00A5               	movwf	??_DriveDirect
  2575  0F3D  0825               	movf	??_DriveDirect,w
  2576  0F3E  07DE               	addwf	_LeftSpeedH,f
  2577  0F3F  3001               	movlw	1
  2578  0F40  0229               	subwf	DriveDirect@data_253+1,w
  2579  0F41  3000               	movlw	0
  2580  0F42  1903               	skipnz
  2581  0F43  0228               	subwf	DriveDirect@data_253,w
  2582  0F44  1803               	skipnc
  2583  0F45  2F33               	goto	l2127
  2584  0F46                     l2131:	
  2585                           
  2586                           ;ser.c: 71: }
  2587                           ;ser.c: 72: }
  2588                           ;ser.c: 73: LeftSpeedL = VelocityLeft;
  2589  0F46  1283               	bcf	3,5	;RP0=0, select bank0
  2590  0F47  1303               	bcf	3,6	;RP1=0, select bank0
  2591  0F48  0823               	movf	DriveDirect@VelocityLeft,w
  2592  0F49  00A5               	movwf	??_DriveDirect
  2593  0F4A  0825               	movf	??_DriveDirect,w
  2594  0F4B  00DF               	movwf	_LeftSpeedL
  2595                           
  2596                           ;ser.c: 76: ser_putch(145);
  2597  0F4C  3091               	movlw	145
  2598  0F4D  120A  158A  24F2  120A  158A  	fcall	_ser_putch
  2599                           
  2600                           ;ser.c: 77: ser_putch(RightSpeedH);
  2601  0F52  1283               	bcf	3,5	;RP0=0, select bank0
  2602  0F53  1303               	bcf	3,6	;RP1=0, select bank0
  2603  0F54  0863               	movf	_RightSpeedH,w
  2604  0F55  120A  158A  24F2  120A  158A  	fcall	_ser_putch
  2605                           
  2606                           ;ser.c: 78: ser_putch(RightSpeedL);
  2607  0F5A  1283               	bcf	3,5	;RP0=0, select bank0
  2608  0F5B  1303               	bcf	3,6	;RP1=0, select bank0
  2609  0F5C  0864               	movf	_RightSpeedL,w
  2610  0F5D  120A  158A  24F2  120A  158A  	fcall	_ser_putch
  2611                           
  2612                           ;ser.c: 79: ser_putch(LeftSpeedH);
  2613  0F62  1283               	bcf	3,5	;RP0=0, select bank0
  2614  0F63  1303               	bcf	3,6	;RP1=0, select bank0
  2615  0F64  085E               	movf	_LeftSpeedH,w
  2616  0F65  120A  158A  24F2  120A  158A  	fcall	_ser_putch
  2617                           
  2618                           ;ser.c: 80: ser_putch(LeftSpeedL);
  2619  0F6A  1283               	bcf	3,5	;RP0=0, select bank0
  2620  0F6B  1303               	bcf	3,6	;RP1=0, select bank0
  2621  0F6C  085F               	movf	_LeftSpeedL,w
  2622  0F6D  120A  158A  24F2   	fcall	_ser_putch
  2623  0F70  0008               	return
  2624  0F71                     __end_of_DriveDirect:	
  2625                           
  2626                           	psect	text9
  2627  0DA0                     __ptext9:	
  2628 ;; *************** function _Drive *****************
  2629 ;; Defined at:
  2630 ;;		line 45 in file "ser.c"
  2631 ;; Parameters:    Size  Location     Type
  2632 ;;  speedH          1    wreg     unsigned char 
  2633 ;;  speedL          1    1[BANK0 ] unsigned char 
  2634 ;;  radH            1    2[BANK0 ] unsigned char 
  2635 ;;  radL            1    3[BANK0 ] unsigned char 
  2636 ;; Auto vars:     Size  Location     Type
  2637 ;;  speedH          1    4[BANK0 ] unsigned char 
  2638 ;; Return value:  Size  Location     Type
  2639 ;;                  1    wreg      void 
  2640 ;; Registers used:
  2641 ;;		wreg, status,2, status,0, pclath, cstack
  2642 ;; Tracked objects:
  2643 ;;		On entry : 0/0
  2644 ;;		On exit  : 0/0
  2645 ;;		Unchanged: 0/0
  2646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2647 ;;      Params:         0       3       0       0       0
  2648 ;;      Locals:         0       1       0       0       0
  2649 ;;      Temps:          0       0       0       0       0
  2650 ;;      Totals:         0       4       0       0       0
  2651 ;;Total ram usage:        4 bytes
  2652 ;; Hardware stack levels used:    1
  2653 ;; Hardware stack levels required when called:    3
  2654 ;; This function calls:
  2655 ;;		_ser_putch
  2656 ;; This function is called by:
  2657 ;;		_main
  2658 ;; This function uses a non-reentrant model
  2659 ;;
  2660                           
  2661                           
  2662                           ;psect for function _Drive
  2663  0DA0                     _Drive:	
  2664                           
  2665                           ;incstack = 0
  2666                           ; Regs used in _Drive: [wreg+status,2+status,0+pclath+cstack]
  2667                           ;Drive@speedH stored from wreg
  2668  0DA0  1283               	bcf	3,5	;RP0=0, select bank0
  2669  0DA1  1303               	bcf	3,6	;RP1=0, select bank0
  2670  0DA2  00A4               	movwf	Drive@speedH
  2671                           
  2672                           ;ser.c: 46: ser_putch(137);
  2673  0DA3  3089               	movlw	137
  2674  0DA4  120A  158A  24F2  120A  158A  	fcall	_ser_putch
  2675                           
  2676                           ;ser.c: 47: ser_putch(speedH);
  2677  0DA9  1283               	bcf	3,5	;RP0=0, select bank0
  2678  0DAA  1303               	bcf	3,6	;RP1=0, select bank0
  2679  0DAB  0824               	movf	Drive@speedH,w
  2680  0DAC  120A  158A  24F2  120A  158A  	fcall	_ser_putch
  2681                           
  2682                           ;ser.c: 48: ser_putch(speedL);
  2683  0DB1  1283               	bcf	3,5	;RP0=0, select bank0
  2684  0DB2  1303               	bcf	3,6	;RP1=0, select bank0
  2685  0DB3  0821               	movf	Drive@speedL,w
  2686  0DB4  120A  158A  24F2  120A  158A  	fcall	_ser_putch
  2687                           
  2688                           ;ser.c: 49: ser_putch(radH);
  2689  0DB9  1283               	bcf	3,5	;RP0=0, select bank0
  2690  0DBA  1303               	bcf	3,6	;RP1=0, select bank0
  2691  0DBB  0822               	movf	Drive@radH,w
  2692  0DBC  120A  158A  24F2  120A  158A  	fcall	_ser_putch
  2693                           
  2694                           ;ser.c: 50: ser_putch(radL);
  2695  0DC1  1283               	bcf	3,5	;RP0=0, select bank0
  2696  0DC2  1303               	bcf	3,6	;RP1=0, select bank0
  2697  0DC3  0823               	movf	Drive@radL,w
  2698  0DC4  120A  158A  24F2   	fcall	_ser_putch
  2699  0DC7  0008               	return
  2700  0DC8                     __end_of_Drive:	
  2701                           
  2702                           	psect	text10
  2703  0CF2                     __ptext10:	
  2704 ;; *************** function _ser_putch *****************
  2705 ;; Defined at:
  2706 ;;		line 30 in file "ser.c"
  2707 ;; Parameters:    Size  Location     Type
  2708 ;;  c               1    wreg     unsigned char 
  2709 ;; Auto vars:     Size  Location     Type
  2710 ;;  c               1    0[BANK0 ] unsigned char 
  2711 ;; Return value:  Size  Location     Type
  2712 ;;                  1    wreg      void 
  2713 ;; Registers used:
  2714 ;;		wreg
  2715 ;; Tracked objects:
  2716 ;;		On entry : 0/0
  2717 ;;		On exit  : 0/0
  2718 ;;		Unchanged: 0/0
  2719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2720 ;;      Params:         0       0       0       0       0
  2721 ;;      Locals:         0       1       0       0       0
  2722 ;;      Temps:          0       0       0       0       0
  2723 ;;      Totals:         0       1       0       0       0
  2724 ;;Total ram usage:        1 bytes
  2725 ;; Hardware stack levels used:    1
  2726 ;; Hardware stack levels required when called:    2
  2727 ;; This function calls:
  2728 ;;		Nothing
  2729 ;; This function is called by:
  2730 ;;		_main
  2731 ;;		_Drive
  2732 ;;		_DriveDirect
  2733 ;;		_getSensorData
  2734 ;; This function uses a non-reentrant model
  2735 ;;
  2736                           
  2737                           
  2738                           ;psect for function _ser_putch
  2739  0CF2                     _ser_putch:	
  2740                           
  2741                           ;incstack = 0
  2742                           ; Regs used in _ser_putch: [wreg]
  2743                           ;ser_putch@c stored from wreg
  2744  0CF2  1283               	bcf	3,5	;RP0=0, select bank0
  2745  0CF3  1303               	bcf	3,6	;RP1=0, select bank0
  2746  0CF4  00A0               	movwf	ser_putch@c
  2747  0CF5                     l360:	
  2748                           ;ser.c: 31: while(!TRMT);
  2749                           
  2750  0CF5  1683               	bsf	3,5	;RP0=1, select bank1
  2751  0CF6  1303               	bcf	3,6	;RP1=0, select bank1
  2752  0CF7  1C98               	btfss	24,1	;volatile
  2753  0CF8  2CF5               	goto	l360
  2754                           
  2755                           ;ser.c: 32: TXREG=c;
  2756  0CF9  1283               	bcf	3,5	;RP0=0, select bank0
  2757  0CFA  1303               	bcf	3,6	;RP1=0, select bank0
  2758  0CFB  0820               	movf	ser_putch@c,w
  2759  0CFC  0099               	movwf	25	;volatile
  2760  0CFD  0008               	return
  2761  0CFE                     __end_of_ser_putch:	
  2762                           
  2763                           	psect	text11
  2764  0D5D                     __ptext11:	
  2765 ;; *************** function _ADCMain *****************
  2766 ;; Defined at:
  2767 ;;		line 19 in file "ADC.c"
  2768 ;; Parameters:    Size  Location     Type
  2769 ;;		None
  2770 ;; Auto vars:     Size  Location     Type
  2771 ;;		None
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  1    wreg      void 
  2774 ;; Registers used:
  2775 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2776 ;; Tracked objects:
  2777 ;;		On entry : 0/0
  2778 ;;		On exit  : 0/0
  2779 ;;		Unchanged: 0/0
  2780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2781 ;;      Params:         0       0       0       0       0
  2782 ;;      Locals:         0       0       0       0       0
  2783 ;;      Temps:          0       0       0       0       0
  2784 ;;      Totals:         0       0       0       0       0
  2785 ;;Total ram usage:        0 bytes
  2786 ;; Hardware stack levels used:    1
  2787 ;; Hardware stack levels required when called:    4
  2788 ;; This function calls:
  2789 ;;		_adcConvertMM
  2790 ;;		_getADC
  2791 ;;		_lcdSetCursor
  2792 ;;		_lcdWriteToDigitBCD
  2793 ;; This function is called by:
  2794 ;;		_main
  2795 ;;		_initWallFollow
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           
  2800                           ;psect for function _ADCMain
  2801  0D5D                     _ADCMain:	
  2802                           
  2803                           ;ADC.c: 21: getADC();
  2804                           
  2805                           ;incstack = 0
  2806                           ; Regs used in _ADCMain: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2807  0D5D  120A  118A  27A6  120A  158A  	fcall	_getADC
  2808                           
  2809                           ;ADC.c: 22: lcdSetCursor(0b10000000);
  2810  0D62  3080               	movlw	128
  2811  0D63  120A  158A  24DF  120A  158A  	fcall	_lcdSetCursor
  2812                           
  2813                           ;ADC.c: 23: lcdWriteToDigitBCD(adcRAW);
  2814  0D68  1283               	bcf	3,5	;RP0=0, select bank0
  2815  0D69  1303               	bcf	3,6	;RP1=0, select bank0
  2816  0D6A  0857               	movf	_adcRAW+1,w	;volatile
  2817  0D6B  00A4               	movwf	lcdWriteToDigitBCD@data+1
  2818  0D6C  0856               	movf	_adcRAW,w	;volatile
  2819  0D6D  00A3               	movwf	lcdWriteToDigitBCD@data
  2820  0D6E  120A  118A  270F  120A  158A  	fcall	_lcdWriteToDigitBCD
  2821                           
  2822                           ;ADC.c: 25: adcConvertMM(adcRAW);
  2823  0D73  1283               	bcf	3,5	;RP0=0, select bank0
  2824  0D74  1303               	bcf	3,6	;RP1=0, select bank0
  2825  0D75  0857               	movf	_adcRAW+1,w	;volatile
  2826  0D76  00B6               	movwf	adcConvertMM@adcRAW+1
  2827  0D77  0856               	movf	_adcRAW,w	;volatile
  2828  0D78  00B5               	movwf	adcConvertMM@adcRAW
  2829  0D79  120A  118A  2039   	fcall	_adcConvertMM
  2830  0D7C  0008               	return
  2831  0D7D                     __end_of_ADCMain:	
  2832                           
  2833                           	psect	text12
  2834  070F                     __ptext12:	
  2835 ;; *************** function _lcdWriteToDigitBCD *****************
  2836 ;; Defined at:
  2837 ;;		line 42 in file "LCD.c"
  2838 ;; Parameters:    Size  Location     Type
  2839 ;;  data            2    3[BANK0 ] unsigned int 
  2840 ;; Auto vars:     Size  Location     Type
  2841 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  2842 ;;  TenThouDigit    2   11[BANK0 ] unsigned int 
  2843 ;;  ThouDigit       2    9[BANK0 ] unsigned int 
  2844 ;;  HunsDigit       2    7[BANK0 ] unsigned int 
  2845 ;;  TensDigit       2    5[BANK0 ] unsigned int 
  2846 ;; Return value:  Size  Location     Type
  2847 ;;                  1    wreg      void 
  2848 ;; Registers used:
  2849 ;;		wreg, status,2, status,0, pclath, cstack
  2850 ;; Tracked objects:
  2851 ;;		On entry : 0/0
  2852 ;;		On exit  : 0/0
  2853 ;;		Unchanged: 0/0
  2854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2855 ;;      Params:         0       2       0       0       0
  2856 ;;      Locals:         0      10       0       0       0
  2857 ;;      Temps:          0       0       0       0       0
  2858 ;;      Totals:         0      12       0       0       0
  2859 ;;Total ram usage:       12 bytes
  2860 ;; Hardware stack levels used:    1
  2861 ;; Hardware stack levels required when called:    3
  2862 ;; This function calls:
  2863 ;;		_lcdWriteData
  2864 ;; This function is called by:
  2865 ;;		_main
  2866 ;;		_ADCMain
  2867 ;; This function uses a non-reentrant model
  2868 ;;
  2869                           
  2870                           
  2871                           ;psect for function _lcdWriteToDigitBCD
  2872  070F                     _lcdWriteToDigitBCD:	
  2873                           
  2874                           ;LCD.c: 43: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  2875                           ;LCD.c: 46: OnesDigit = data;
  2876                           
  2877                           ;incstack = 0
  2878                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  2879  070F  1283               	bcf	3,5	;RP0=0, select bank0
  2880  0710  1303               	bcf	3,6	;RP1=0, select bank0
  2881  0711  0824               	movf	lcdWriteToDigitBCD@data+1,w
  2882  0712  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2883  0713  0823               	movf	lcdWriteToDigitBCD@data,w
  2884  0714  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  2885                           
  2886                           ;LCD.c: 47: TensDigit = 0;
  2887  0715  01A5               	clrf	lcdWriteToDigitBCD@TensDigit
  2888  0716  01A6               	clrf	lcdWriteToDigitBCD@TensDigit+1
  2889                           
  2890                           ;LCD.c: 48: HunsDigit = 0;
  2891  0717  01A7               	clrf	lcdWriteToDigitBCD@HunsDigit
  2892  0718  01A8               	clrf	lcdWriteToDigitBCD@HunsDigit+1
  2893                           
  2894                           ;LCD.c: 49: ThouDigit = 0;
  2895  0719  01A9               	clrf	lcdWriteToDigitBCD@ThouDigit
  2896  071A  01AA               	clrf	lcdWriteToDigitBCD@ThouDigit+1
  2897                           
  2898                           ;LCD.c: 50: TenThouDigit = 0;
  2899  071B  01AB               	clrf	lcdWriteToDigitBCD@TenThouDigit
  2900  071C  01AC               	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  2901  071D                     l1885:	
  2902                           ;LCD.c: 53: while (OnesDigit >= 10000){
  2903                           
  2904  071D  3027               	movlw	39
  2905  071E  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2906  071F  3010               	movlw	16
  2907  0720  1903               	skipnz
  2908  0721  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2909  0722  1C03               	btfss	3,0
  2910  0723  2F41               	goto	l1891
  2911                           
  2912                           ;LCD.c: 54: OnesDigit = OnesDigit - 10000;
  2913  0724  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2914  0725  3EF0               	addlw	240
  2915  0726  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  2916  0727  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2917  0728  1803               	skipnc
  2918  0729  3E01               	addlw	1
  2919  072A  3ED8               	addlw	216
  2920  072B  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2921                           
  2922                           ;LCD.c: 55: TenThouDigit++;
  2923  072C  3001               	movlw	1
  2924  072D  07AB               	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  2925  072E  1803               	skipnc
  2926  072F  0AAC               	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2927  0730  3000               	movlw	0
  2928  0731  07AC               	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2929  0732  2F1D               	goto	l1885
  2930  0733                     l1887:	
  2931                           ;LCD.c: 56: }
  2932                           ;LCD.c: 58: while (OnesDigit >= 1000){
  2933                           
  2934                           
  2935                           ;LCD.c: 59: OnesDigit = OnesDigit - 1000;
  2936  0733  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2937  0734  3E18               	addlw	24
  2938  0735  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  2939  0736  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2940  0737  1803               	skipnc
  2941  0738  3E01               	addlw	1
  2942  0739  3EFC               	addlw	252
  2943  073A  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2944                           
  2945                           ;LCD.c: 60: ThouDigit++;
  2946  073B  3001               	movlw	1
  2947  073C  07A9               	addwf	lcdWriteToDigitBCD@ThouDigit,f
  2948  073D  1803               	skipnc
  2949  073E  0AAA               	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  2950  073F  3000               	movlw	0
  2951  0740  07AA               	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  2952  0741                     l1891:	
  2953  0741  3003               	movlw	3
  2954  0742  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2955  0743  30E8               	movlw	232
  2956  0744  1903               	skipnz
  2957  0745  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2958  0746  1C03               	btfss	3,0
  2959  0747  2F57               	goto	l1897
  2960  0748  2F33               	goto	l1887
  2961  0749                     l1893:	
  2962                           ;LCD.c: 61: }
  2963                           ;LCD.c: 63: while (OnesDigit >= 100){
  2964                           
  2965                           
  2966                           ;LCD.c: 64: OnesDigit = OnesDigit - 100;
  2967  0749  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2968  074A  3E9C               	addlw	156
  2969  074B  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  2970  074C  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2971  074D  1803               	skipnc
  2972  074E  3E01               	addlw	1
  2973  074F  3EFF               	addlw	255
  2974  0750  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2975                           
  2976                           ;LCD.c: 65: HunsDigit++;
  2977  0751  3001               	movlw	1
  2978  0752  07A7               	addwf	lcdWriteToDigitBCD@HunsDigit,f
  2979  0753  1803               	skipnc
  2980  0754  0AA8               	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  2981  0755  3000               	movlw	0
  2982  0756  07A8               	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  2983  0757                     l1897:	
  2984  0757  3000               	movlw	0
  2985  0758  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2986  0759  3064               	movlw	100
  2987  075A  1903               	skipnz
  2988  075B  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2989  075C  1C03               	btfss	3,0
  2990  075D  2F6D               	goto	l1903
  2991  075E  2F49               	goto	l1893
  2992  075F                     l1899:	
  2993                           ;LCD.c: 66: }
  2994                           ;LCD.c: 68: while (OnesDigit >= 10){
  2995                           
  2996                           
  2997                           ;LCD.c: 69: OnesDigit = OnesDigit - 10;
  2998  075F  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2999  0760  3EF6               	addlw	246
  3000  0761  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  3001  0762  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  3002  0763  1803               	skipnc
  3003  0764  3E01               	addlw	1
  3004  0765  3EFF               	addlw	255
  3005  0766  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  3006                           
  3007                           ;LCD.c: 70: TensDigit++;
  3008  0767  3001               	movlw	1
  3009  0768  07A5               	addwf	lcdWriteToDigitBCD@TensDigit,f
  3010  0769  1803               	skipnc
  3011  076A  0AA6               	incf	lcdWriteToDigitBCD@TensDigit+1,f
  3012  076B  3000               	movlw	0
  3013  076C  07A6               	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  3014  076D                     l1903:	
  3015  076D  3000               	movlw	0
  3016  076E  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  3017  076F  300A               	movlw	10
  3018  0770  1903               	skipnz
  3019  0771  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  3020  0772  1803               	skipnc
  3021  0773  2F5F               	goto	l1899
  3022                           
  3023                           ;LCD.c: 71: }
  3024                           ;LCD.c: 73: if (TenThouDigit > 0)
  3025  0774  082B               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  3026  0775  042C               	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  3027  0776  1903               	btfsc	3,2
  3028  0777  2F7F               	goto	l1909
  3029                           
  3030                           ;LCD.c: 74: lcdWriteData((unsigned int)TenThouDigit + 48);
  3031  0778  082B               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  3032  0779  3E30               	addlw	48
  3033  077A  120A  158A  251C  120A  118A  	fcall	_lcdWriteData
  3034  077F                     l1909:	
  3035                           
  3036                           ;LCD.c: 76: if (ThouDigit > 0)
  3037  077F  1283               	bcf	3,5	;RP0=0, select bank0
  3038  0780  1303               	bcf	3,6	;RP1=0, select bank0
  3039  0781  0829               	movf	lcdWriteToDigitBCD@ThouDigit,w
  3040  0782  042A               	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  3041  0783  1903               	btfsc	3,2
  3042  0784  2F8C               	goto	l243
  3043                           
  3044                           ;LCD.c: 77: lcdWriteData((unsigned int)ThouDigit + 48);
  3045  0785  0829               	movf	lcdWriteToDigitBCD@ThouDigit,w
  3046  0786  3E30               	addlw	48
  3047  0787  120A  158A  251C  120A  118A  	fcall	_lcdWriteData
  3048  078C                     l243:	
  3049                           
  3050                           ;LCD.c: 79: lcdWriteData((unsigned int)HunsDigit + 48);
  3051  078C  1283               	bcf	3,5	;RP0=0, select bank0
  3052  078D  1303               	bcf	3,6	;RP1=0, select bank0
  3053  078E  0827               	movf	lcdWriteToDigitBCD@HunsDigit,w
  3054  078F  3E30               	addlw	48
  3055  0790  120A  158A  251C  120A  118A  	fcall	_lcdWriteData
  3056                           
  3057                           ;LCD.c: 80: lcdWriteData((unsigned int)TensDigit + 48);
  3058  0795  1283               	bcf	3,5	;RP0=0, select bank0
  3059  0796  1303               	bcf	3,6	;RP1=0, select bank0
  3060  0797  0825               	movf	lcdWriteToDigitBCD@TensDigit,w
  3061  0798  3E30               	addlw	48
  3062  0799  120A  158A  251C  120A  118A  	fcall	_lcdWriteData
  3063                           
  3064                           ;LCD.c: 81: lcdWriteData((unsigned int)OnesDigit + 48);
  3065  079E  1283               	bcf	3,5	;RP0=0, select bank0
  3066  079F  1303               	bcf	3,6	;RP1=0, select bank0
  3067  07A0  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  3068  07A1  3E30               	addlw	48
  3069  07A2  120A  158A  251C   	fcall	_lcdWriteData
  3070  07A5  0008               	return
  3071  07A6                     __end_of_lcdWriteToDigitBCD:	
  3072                           
  3073                           	psect	text13
  3074  0D1C                     __ptext13:	
  3075 ;; *************** function _lcdWriteData *****************
  3076 ;; Defined at:
  3077 ;;		line 20 in file "LCD.c"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;  databyte        1    wreg     unsigned char 
  3080 ;; Auto vars:     Size  Location     Type
  3081 ;;  databyte        1    2[BANK0 ] unsigned char 
  3082 ;; Return value:  Size  Location     Type
  3083 ;;                  1    wreg      void 
  3084 ;; Registers used:
  3085 ;;		wreg
  3086 ;; Tracked objects:
  3087 ;;		On entry : 0/0
  3088 ;;		On exit  : 0/0
  3089 ;;		Unchanged: 0/0
  3090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3091 ;;      Params:         0       0       0       0       0
  3092 ;;      Locals:         0       1       0       0       0
  3093 ;;      Temps:          0       2       0       0       0
  3094 ;;      Totals:         0       3       0       0       0
  3095 ;;Total ram usage:        3 bytes
  3096 ;; Hardware stack levels used:    1
  3097 ;; Hardware stack levels required when called:    2
  3098 ;; This function calls:
  3099 ;;		Nothing
  3100 ;; This function is called by:
  3101 ;;		_lcdWriteToDigitBCD
  3102 ;;		_lcdWriteString
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106                           
  3107                           ;psect for function _lcdWriteData
  3108  0D1C                     _lcdWriteData:	
  3109                           
  3110                           ;incstack = 0
  3111                           ; Regs used in _lcdWriteData: [wreg]
  3112                           ;lcdWriteData@databyte stored from wreg
  3113  0D1C  1283               	bcf	3,5	;RP0=0, select bank0
  3114  0D1D  1303               	bcf	3,6	;RP1=0, select bank0
  3115  0D1E  00A2               	movwf	lcdWriteData@databyte
  3116                           
  3117                           ;LCD.c: 21: RE2 = 0;
  3118  0D1F  1109               	bcf	9,2	;volatile
  3119                           
  3120                           ;LCD.c: 22: RE1 = 0;
  3121  0D20  1089               	bcf	9,1	;volatile
  3122                           
  3123                           ;LCD.c: 23: RE0 = 1;
  3124  0D21  1409               	bsf	9,0	;volatile
  3125                           
  3126                           ;LCD.c: 24: PORTD = databyte;
  3127  0D22  0822               	movf	lcdWriteData@databyte,w
  3128  0D23  0088               	movwf	8	;volatile
  3129                           
  3130                           ;LCD.c: 25: RE2 = 1;
  3131  0D24  1509               	bsf	9,2	;volatile
  3132                           
  3133                           ;LCD.c: 26: RE2 = 0;
  3134  0D25  1109               	bcf	9,2	;volatile
  3135                           
  3136                           ;LCD.c: 27: _delay((unsigned long)((1)*(20000000/4000.0)));
  3137  0D26  3007               	movlw	7
  3138  0D27  00A1               	movwf	??_lcdWriteData+1
  3139  0D28  307D               	movlw	125
  3140  0D29  00A0               	movwf	??_lcdWriteData
  3141  0D2A                     u2527:	
  3142  0D2A  0BA0               	decfsz	??_lcdWriteData,f
  3143  0D2B  2D2A               	goto	u2527
  3144  0D2C  0BA1               	decfsz	??_lcdWriteData+1,f
  3145  0D2D  2D2A               	goto	u2527
  3146  0D2E  0008               	return
  3147  0D2F                     __end_of_lcdWriteData:	
  3148                           
  3149                           	psect	text14
  3150  0CDF                     __ptext14:	
  3151 ;; *************** function _lcdSetCursor *****************
  3152 ;; Defined at:
  3153 ;;		line 31 in file "LCD.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;  address         1    wreg     unsigned char 
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;  address         1    3[BANK0 ] unsigned char 
  3158 ;; Return value:  Size  Location     Type
  3159 ;;                  1    wreg      void 
  3160 ;; Registers used:
  3161 ;;		wreg, status,2, status,0, pclath, cstack
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 0/0
  3165 ;;		Unchanged: 0/0
  3166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3167 ;;      Params:         0       0       0       0       0
  3168 ;;      Locals:         0       1       0       0       0
  3169 ;;      Temps:          0       0       0       0       0
  3170 ;;      Totals:         0       1       0       0       0
  3171 ;;Total ram usage:        1 bytes
  3172 ;; Hardware stack levels used:    1
  3173 ;; Hardware stack levels required when called:    3
  3174 ;; This function calls:
  3175 ;;		_lcdWriteControl
  3176 ;; This function is called by:
  3177 ;;		_main
  3178 ;;		_ADCMain
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181                           
  3182                           
  3183                           ;psect for function _lcdSetCursor
  3184  0CDF                     _lcdSetCursor:	
  3185                           
  3186                           ;incstack = 0
  3187                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  3188                           ;lcdSetCursor@address stored from wreg
  3189  0CDF  1283               	bcf	3,5	;RP0=0, select bank0
  3190  0CE0  1303               	bcf	3,6	;RP1=0, select bank0
  3191  0CE1  00A3               	movwf	lcdSetCursor@address
  3192                           
  3193                           ;LCD.c: 32: address |= 0b10000000;
  3194  0CE2  17A3               	bsf	lcdSetCursor@address,7
  3195                           
  3196                           ;LCD.c: 33: lcdWriteControl(address);
  3197  0CE3  0823               	movf	lcdSetCursor@address,w
  3198  0CE4  120A  118A  27EB   	fcall	_lcdWriteControl
  3199  0CE7  0008               	return
  3200  0CE8                     __end_of_lcdSetCursor:	
  3201                           
  3202                           	psect	text15
  3203  07EB                     __ptext15:	
  3204 ;; *************** function _lcdWriteControl *****************
  3205 ;; Defined at:
  3206 ;;		line 9 in file "LCD.c"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;  databyte        1    wreg     unsigned char 
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;  databyte        1    2[BANK0 ] unsigned char 
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  1    wreg      void 
  3213 ;; Registers used:
  3214 ;;		wreg
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3220 ;;      Params:         0       0       0       0       0
  3221 ;;      Locals:         0       1       0       0       0
  3222 ;;      Temps:          0       2       0       0       0
  3223 ;;      Totals:         0       3       0       0       0
  3224 ;;Total ram usage:        3 bytes
  3225 ;; Hardware stack levels used:    1
  3226 ;; Hardware stack levels required when called:    2
  3227 ;; This function calls:
  3228 ;;		Nothing
  3229 ;; This function is called by:
  3230 ;;		_lcdSetCursor
  3231 ;;		_setupLCD
  3232 ;; This function uses a non-reentrant model
  3233 ;;
  3234                           
  3235                           
  3236                           ;psect for function _lcdWriteControl
  3237  07EB                     _lcdWriteControl:	
  3238                           
  3239                           ;incstack = 0
  3240                           ; Regs used in _lcdWriteControl: [wreg]
  3241                           ;lcdWriteControl@databyte stored from wreg
  3242  07EB  1283               	bcf	3,5	;RP0=0, select bank0
  3243  07EC  1303               	bcf	3,6	;RP1=0, select bank0
  3244  07ED  00A2               	movwf	lcdWriteControl@databyte
  3245                           
  3246                           ;LCD.c: 10: RE2 = 0;
  3247  07EE  1109               	bcf	9,2	;volatile
  3248                           
  3249                           ;LCD.c: 11: RE1 = 0;
  3250  07EF  1089               	bcf	9,1	;volatile
  3251                           
  3252                           ;LCD.c: 12: RE0 = 0;
  3253  07F0  1009               	bcf	9,0	;volatile
  3254                           
  3255                           ;LCD.c: 13: PORTD = databyte;
  3256  07F1  0822               	movf	lcdWriteControl@databyte,w
  3257  07F2  0088               	movwf	8	;volatile
  3258                           
  3259                           ;LCD.c: 14: RE2 = 1;
  3260  07F3  1509               	bsf	9,2	;volatile
  3261                           
  3262                           ;LCD.c: 15: RE2 = 0;
  3263  07F4  1109               	bcf	9,2	;volatile
  3264                           
  3265                           ;LCD.c: 16: _delay((unsigned long)((2)*(20000000/4000.0)));
  3266  07F5  300D               	movlw	13
  3267  07F6  00A1               	movwf	??_lcdWriteControl+1
  3268  07F7  30FB               	movlw	251
  3269  07F8  00A0               	movwf	??_lcdWriteControl
  3270  07F9                     u2537:	
  3271  07F9  0BA0               	decfsz	??_lcdWriteControl,f
  3272  07FA  2FF9               	goto	u2537
  3273  07FB  0BA1               	decfsz	??_lcdWriteControl+1,f
  3274  07FC  2FF9               	goto	u2537
  3275  07FD  2FFE               	nop2
  3276  07FE  0008               	return
  3277  07FF                     __end_of_lcdWriteControl:	
  3278                           
  3279                           	psect	text16
  3280  07A6                     __ptext16:	
  3281 ;; *************** function _getADC *****************
  3282 ;; Defined at:
  3283 ;;		line 29 in file "ADC.c"
  3284 ;; Parameters:    Size  Location     Type
  3285 ;;		None
  3286 ;; Auto vars:     Size  Location     Type
  3287 ;;		None
  3288 ;; Return value:  Size  Location     Type
  3289 ;;                  2  494[None  ] unsigned int 
  3290 ;; Registers used:
  3291 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3297 ;;      Params:         0       0       0       0       0
  3298 ;;      Locals:         0       0       0       0       0
  3299 ;;      Temps:          0       2       0       0       0
  3300 ;;      Totals:         0       2       0       0       0
  3301 ;;Total ram usage:        2 bytes
  3302 ;; Hardware stack levels used:    1
  3303 ;; Hardware stack levels required when called:    2
  3304 ;; This function calls:
  3305 ;;		Nothing
  3306 ;; This function is called by:
  3307 ;;		_ADCMain
  3308 ;; This function uses a non-reentrant model
  3309 ;;
  3310                           
  3311                           
  3312                           ;psect for function _getADC
  3313  07A6                     _getADC:	
  3314                           
  3315                           ;ADC.c: 31: ADRESH = 0;
  3316                           
  3317                           ;incstack = 0
  3318                           ; Regs used in _getADC: [wreg-fsr0h+status,2+status,0]
  3319  07A6  1283               	bcf	3,5	;RP0=0, select bank0
  3320  07A7  1303               	bcf	3,6	;RP1=0, select bank0
  3321  07A8  019E               	clrf	30	;volatile
  3322                           
  3323                           ;ADC.c: 32: ADRESL = 0;
  3324  07A9  1683               	bsf	3,5	;RP0=1, select bank1
  3325  07AA  1303               	bcf	3,6	;RP1=0, select bank1
  3326  07AB  019E               	clrf	30	;volatile
  3327                           
  3328                           ;ADC.c: 34: GO = 1;
  3329  07AC  1283               	bcf	3,5	;RP0=0, select bank0
  3330  07AD  1303               	bcf	3,6	;RP1=0, select bank0
  3331  07AE  151F               	bsf	31,2	;volatile
  3332  07AF                     l541:	
  3333                           ;ADC.c: 35: while(GO) continue;
  3334                           
  3335  07AF  191F               	btfsc	31,2	;volatile
  3336  07B0  2FAF               	goto	l541
  3337                           
  3338                           ;ADC.c: 39: adcRAW = (4*ADRESH);
  3339  07B1  081E               	movf	30,w	;volatile
  3340  07B2  00A0               	movwf	??_getADC
  3341  07B3  01A1               	clrf	??_getADC+1
  3342  07B4  1003               	clrc
  3343  07B5  0DA0               	rlf	??_getADC,f
  3344  07B6  0DA1               	rlf	??_getADC+1,f
  3345  07B7  1003               	clrc
  3346  07B8  0DA0               	rlf	??_getADC,f
  3347  07B9  0DA1               	rlf	??_getADC+1,f
  3348  07BA  0820               	movf	??_getADC,w
  3349  07BB  00D6               	movwf	_adcRAW	;volatile
  3350  07BC  0821               	movf	??_getADC+1,w
  3351  07BD  00D7               	movwf	_adcRAW+1	;volatile
  3352                           
  3353                           ;ADC.c: 41: switch(ADRESL){
  3354  07BE  2FDD               	goto	l1935
  3355  07BF                     l1929:	
  3356                           ;ADC.c: 42: case 0b01000000: adcRAW = adcRAW + 1;
  3357                           
  3358  07BF  1283               	bcf	3,5	;RP0=0, select bank0
  3359  07C0  0856               	movf	_adcRAW,w	;volatile
  3360  07C1  3E01               	addlw	1
  3361  07C2  00D6               	movwf	_adcRAW	;volatile
  3362  07C3  0857               	movf	_adcRAW+1,w	;volatile
  3363  07C4  1803               	skipnc
  3364  07C5  3E01               	addlw	1
  3365  07C6  3E00               	addlw	0
  3366  07C7  00D7               	movwf	_adcRAW+1	;volatile
  3367                           
  3368                           ;ADC.c: 43: break;
  3369  07C8  0008               	return
  3370  07C9                     l1931:	
  3371                           ;ADC.c: 44: case 0b10000000: adcRAW = adcRAW + 2;
  3372                           
  3373  07C9  1283               	bcf	3,5	;RP0=0, select bank0
  3374  07CA  0856               	movf	_adcRAW,w	;volatile
  3375  07CB  3E02               	addlw	2
  3376  07CC  00D6               	movwf	_adcRAW	;volatile
  3377  07CD  0857               	movf	_adcRAW+1,w	;volatile
  3378  07CE  1803               	skipnc
  3379  07CF  3E01               	addlw	1
  3380  07D0  3E00               	addlw	0
  3381  07D1  00D7               	movwf	_adcRAW+1	;volatile
  3382                           
  3383                           ;ADC.c: 45: break;
  3384  07D2  0008               	return
  3385  07D3                     l1933:	
  3386                           ;ADC.c: 46: case 0b11000000: adcRAW = adcRAW + 3;
  3387                           
  3388  07D3  1283               	bcf	3,5	;RP0=0, select bank0
  3389  07D4  0856               	movf	_adcRAW,w	;volatile
  3390  07D5  3E03               	addlw	3
  3391  07D6  00D6               	movwf	_adcRAW	;volatile
  3392  07D7  0857               	movf	_adcRAW+1,w	;volatile
  3393  07D8  1803               	skipnc
  3394  07D9  3E01               	addlw	1
  3395  07DA  3E00               	addlw	0
  3396  07DB  00D7               	movwf	_adcRAW+1	;volatile
  3397                           
  3398                           ;ADC.c: 49: }
  3399                           
  3400                           ;ADC.c: 48: default: adcRAW = adcRAW;
  3401                           
  3402                           ;ADC.c: 47: break;
  3403  07DC  0008               	return
  3404  07DD                     l1935:	
  3405  07DD  1683               	bsf	3,5	;RP0=1, select bank1
  3406  07DE  1303               	bcf	3,6	;RP1=0, select bank1
  3407  07DF  081E               	movf	30,w	;volatile
  3408                           
  3409                           ; Switch size 1, requested type "space"
  3410                           ; Number of cases is 3, Range of values is 64 to 192
  3411                           ; switch strategies available:
  3412                           ; Name         Instructions Cycles
  3413                           ; simple_byte           10     6 (average)
  3414                           ; jumptable            263     9 (fixed)
  3415                           ;	Chosen strategy is simple_byte
  3416  07E0  3A40               	xorlw	64	; case 64
  3417  07E1  1903               	skipnz
  3418  07E2  2FBF               	goto	l1929
  3419  07E3  3AC0               	xorlw	192	; case 128
  3420  07E4  1903               	skipnz
  3421  07E5  2FC9               	goto	l1931
  3422  07E6  3A40               	xorlw	64	; case 192
  3423  07E7  1903               	skipnz
  3424  07E8  2FD3               	goto	l1933
  3425  07E9  2FEA               	goto	l550
  3426  07EA                     l550:	
  3427                           ;ADC.c: 51: return(adcRAW);
  3428                           ;	Return value of _getADC is never used
  3429                           
  3430  07EA  0008               	return
  3431  07EB                     __end_of_getADC:	
  3432                           
  3433                           	psect	text17
  3434  0039                     __ptext17:	
  3435 ;; *************** function _adcConvertMM *****************
  3436 ;; Defined at:
  3437 ;;		line 59 in file "ADC.c"
  3438 ;; Parameters:    Size  Location     Type
  3439 ;;  adcRAW          2   21[BANK0 ] unsigned int 
  3440 ;; Auto vars:     Size  Location     Type
  3441 ;;		None
  3442 ;; Return value:  Size  Location     Type
  3443 ;;                  2   21[BANK0 ] unsigned int 
  3444 ;; Registers used:
  3445 ;;		wreg, status,2, status,0, pclath, cstack
  3446 ;; Tracked objects:
  3447 ;;		On entry : 0/0
  3448 ;;		On exit  : 0/0
  3449 ;;		Unchanged: 0/0
  3450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3451 ;;      Params:         0       2       0       0       0
  3452 ;;      Locals:         0       0       0       0       0
  3453 ;;      Temps:          0       8       0       0       0
  3454 ;;      Totals:         0      10       0       0       0
  3455 ;;Total ram usage:       10 bytes
  3456 ;; Hardware stack levels used:    1
  3457 ;; Hardware stack levels required when called:    3
  3458 ;; This function calls:
  3459 ;;		___aldiv
  3460 ;;		___lwdiv
  3461 ;;		___wmul
  3462 ;; This function is called by:
  3463 ;;		_ADCMain
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           
  3468                           ;psect for function _adcConvertMM
  3469  0039                     _adcConvertMM:	
  3470                           
  3471                           ;ADC.c: 61: if (adcRAW < 517 && adcRAW >= 513)
  3472                           
  3473                           ;incstack = 0
  3474                           ; Regs used in _adcConvertMM: [wreg+status,2+status,0+pclath+cstack]
  3475  0039  3002               	movlw	2
  3476  003A  1283               	bcf	3,5	;RP0=0, select bank0
  3477  003B  1303               	bcf	3,6	;RP1=0, select bank0
  3478  003C  0236               	subwf	adcConvertMM@adcRAW+1,w
  3479  003D  3005               	movlw	5
  3480  003E  1903               	skipnz
  3481  003F  0235               	subwf	adcConvertMM@adcRAW,w
  3482  0040  1803               	skipnc
  3483  0041  28A8               	goto	l1943
  3484  0042  3002               	movlw	2
  3485  0043  0236               	subwf	adcConvertMM@adcRAW+1,w
  3486  0044  3001               	movlw	1
  3487  0045  1903               	skipnz
  3488  0046  0235               	subwf	adcConvertMM@adcRAW,w
  3489  0047  1C03               	skipc
  3490  0048  28A8               	goto	l1943
  3491                           
  3492                           ;ADC.c: 62: Distance = (((51700 - adcRAW*100)/4) + 100);
  3493  0049  3000               	movlw	0
  3494  004A  00A9               	movwf	___aldiv@divisor+3
  3495  004B  3000               	movlw	0
  3496  004C  00A8               	movwf	___aldiv@divisor+2
  3497  004D  3000               	movlw	0
  3498  004E  00A7               	movwf	___aldiv@divisor+1
  3499  004F  3004               	movlw	4
  3500  0050  00A6               	movwf	___aldiv@divisor
  3501  0051  30F4               	movlw	244
  3502  0052  00B7               	movwf	??_adcConvertMM
  3503  0053  30C9               	movlw	201
  3504  0054  00B8               	movwf	??_adcConvertMM+1
  3505  0055  3000               	movlw	0
  3506  0056  00B9               	movwf	??_adcConvertMM+2
  3507  0057  3000               	movlw	0
  3508  0058  00BA               	movwf	??_adcConvertMM+3
  3509  0059  0836               	movf	adcConvertMM@adcRAW+1,w
  3510  005A  00A1               	movwf	___wmul@multiplier+1
  3511  005B  0835               	movf	adcConvertMM@adcRAW,w
  3512  005C  00A0               	movwf	___wmul@multiplier
  3513  005D  3064               	movlw	100
  3514  005E  00A2               	movwf	___wmul@multiplicand
  3515  005F  3000               	movlw	0
  3516  0060  00A3               	movwf	___wmul@multiplicand+1
  3517  0061  120A  158A  257D  120A  118A  	fcall	___wmul
  3518  0066  1283               	bcf	3,5	;RP0=0, select bank0
  3519  0067  1303               	bcf	3,6	;RP1=0, select bank0
  3520  0068  0820               	movf	?___wmul,w
  3521  0069  00BB               	movwf	??_adcConvertMM+4
  3522  006A  0821               	movf	?___wmul+1,w
  3523  006B  00BC               	movwf	??_adcConvertMM+5
  3524  006C  01BD               	clrf	??_adcConvertMM+6
  3525  006D  01BE               	clrf	??_adcConvertMM+7
  3526  006E  09BB               	comf	??_adcConvertMM+4,f
  3527  006F  09BC               	comf	??_adcConvertMM+5,f
  3528  0070  09BD               	comf	??_adcConvertMM+6,f
  3529  0071  09BE               	comf	??_adcConvertMM+7,f
  3530  0072  0ABB               	incf	??_adcConvertMM+4,f
  3531  0073  1903               	skipnz
  3532  0074  0ABC               	incf	??_adcConvertMM+5,f
  3533  0075  1903               	skipnz
  3534  0076  0ABD               	incf	??_adcConvertMM+6,f
  3535  0077  1903               	skipnz
  3536  0078  0ABE               	incf	??_adcConvertMM+7,f
  3537  0079  083B               	movf	??_adcConvertMM+4,w
  3538  007A  07B7               	addwf	??_adcConvertMM,f
  3539  007B  083C               	movf	??_adcConvertMM+5,w
  3540  007C  1803               	skipnc
  3541  007D  0F3C               	incfsz	??_adcConvertMM+5,w
  3542  007E  2880               	goto	u1650
  3543  007F  2881               	goto	u1651
  3544  0080                     u1650:	
  3545  0080  07B8               	addwf	??_adcConvertMM+1,f
  3546  0081                     u1651:	
  3547  0081  083D               	movf	??_adcConvertMM+6,w
  3548  0082  1803               	skipnc
  3549  0083  0F3D               	incfsz	??_adcConvertMM+6,w
  3550  0084  2886               	goto	u1652
  3551  0085  2887               	goto	u1653
  3552  0086                     u1652:	
  3553  0086  07B9               	addwf	??_adcConvertMM+2,f
  3554  0087                     u1653:	
  3555  0087  083E               	movf	??_adcConvertMM+7,w
  3556  0088  1803               	skipnc
  3557  0089  0A3E               	incf	??_adcConvertMM+7,w
  3558  008A  07BA               	addwf	??_adcConvertMM+3,f
  3559  008B  083A               	movf	??_adcConvertMM+3,w
  3560  008C  00AD               	movwf	___aldiv@dividend+3
  3561  008D  0839               	movf	??_adcConvertMM+2,w
  3562  008E  00AC               	movwf	___aldiv@dividend+2
  3563  008F  0838               	movf	??_adcConvertMM+1,w
  3564  0090  00AB               	movwf	___aldiv@dividend+1
  3565  0091  0837               	movf	??_adcConvertMM,w
  3566  0092  00AA               	movwf	___aldiv@dividend
  3567  0093  120A  158A  2771  120A  118A  	fcall	___aldiv
  3568  0098  1283               	bcf	3,5	;RP0=0, select bank0
  3569  0099  1303               	bcf	3,6	;RP1=0, select bank0
  3570  009A  0826               	movf	?___aldiv,w
  3571  009B  3E64               	addlw	100
  3572  009C  1683               	bsf	3,5	;RP0=1, select bank1
  3573  009D  1303               	bcf	3,6	;RP1=0, select bank1
  3574  009E  00A0               	movwf	_Distance^(0+128)	;volatile
  3575  009F  1283               	bcf	3,5	;RP0=0, select bank0
  3576  00A0  1303               	bcf	3,6	;RP1=0, select bank0
  3577  00A1  0827               	movf	?___aldiv+1,w
  3578  00A2  1803               	skipnc
  3579  00A3  3E01               	addlw	1
  3580  00A4  3E00               	addlw	0
  3581  00A5  1683               	bsf	3,5	;RP0=1, select bank1
  3582  00A6  1303               	bcf	3,6	;RP1=0, select bank1
  3583  00A7  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  3584  00A8                     l1943:	
  3585                           
  3586                           ;ADC.c: 64: if (adcRAW < 513 && adcRAW >= 393)
  3587  00A8  3002               	movlw	2
  3588  00A9  1283               	bcf	3,5	;RP0=0, select bank0
  3589  00AA  0236               	subwf	adcConvertMM@adcRAW+1,w
  3590  00AB  3001               	movlw	1
  3591  00AC  1903               	skipnz
  3592  00AD  0235               	subwf	adcConvertMM@adcRAW,w
  3593  00AE  1803               	skipnc
  3594  00AF  2916               	goto	l1949
  3595  00B0  3001               	movlw	1
  3596  00B1  0236               	subwf	adcConvertMM@adcRAW+1,w
  3597  00B2  3089               	movlw	137
  3598  00B3  1903               	skipnz
  3599  00B4  0235               	subwf	adcConvertMM@adcRAW,w
  3600  00B5  1C03               	skipc
  3601  00B6  2916               	goto	l1949
  3602                           
  3603                           ;ADC.c: 65: Distance = (((51300 - adcRAW*100)/120) + 200);
  3604  00B7  3000               	movlw	0
  3605  00B8  00A9               	movwf	___aldiv@divisor+3
  3606  00B9  3000               	movlw	0
  3607  00BA  00A8               	movwf	___aldiv@divisor+2
  3608  00BB  3000               	movlw	0
  3609  00BC  00A7               	movwf	___aldiv@divisor+1
  3610  00BD  3078               	movlw	120
  3611  00BE  00A6               	movwf	___aldiv@divisor
  3612  00BF  3064               	movlw	100
  3613  00C0  00B7               	movwf	??_adcConvertMM
  3614  00C1  30C8               	movlw	200
  3615  00C2  00B8               	movwf	??_adcConvertMM+1
  3616  00C3  3000               	movlw	0
  3617  00C4  00B9               	movwf	??_adcConvertMM+2
  3618  00C5  3000               	movlw	0
  3619  00C6  00BA               	movwf	??_adcConvertMM+3
  3620  00C7  0836               	movf	adcConvertMM@adcRAW+1,w
  3621  00C8  00A1               	movwf	___wmul@multiplier+1
  3622  00C9  0835               	movf	adcConvertMM@adcRAW,w
  3623  00CA  00A0               	movwf	___wmul@multiplier
  3624  00CB  3064               	movlw	100
  3625  00CC  00A2               	movwf	___wmul@multiplicand
  3626  00CD  3000               	movlw	0
  3627  00CE  00A3               	movwf	___wmul@multiplicand+1
  3628  00CF  120A  158A  257D  120A  118A  	fcall	___wmul
  3629  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  3630  00D5  1303               	bcf	3,6	;RP1=0, select bank0
  3631  00D6  0820               	movf	?___wmul,w
  3632  00D7  00BB               	movwf	??_adcConvertMM+4
  3633  00D8  0821               	movf	?___wmul+1,w
  3634  00D9  00BC               	movwf	??_adcConvertMM+5
  3635  00DA  01BD               	clrf	??_adcConvertMM+6
  3636  00DB  01BE               	clrf	??_adcConvertMM+7
  3637  00DC  09BB               	comf	??_adcConvertMM+4,f
  3638  00DD  09BC               	comf	??_adcConvertMM+5,f
  3639  00DE  09BD               	comf	??_adcConvertMM+6,f
  3640  00DF  09BE               	comf	??_adcConvertMM+7,f
  3641  00E0  0ABB               	incf	??_adcConvertMM+4,f
  3642  00E1  1903               	skipnz
  3643  00E2  0ABC               	incf	??_adcConvertMM+5,f
  3644  00E3  1903               	skipnz
  3645  00E4  0ABD               	incf	??_adcConvertMM+6,f
  3646  00E5  1903               	skipnz
  3647  00E6  0ABE               	incf	??_adcConvertMM+7,f
  3648  00E7  083B               	movf	??_adcConvertMM+4,w
  3649  00E8  07B7               	addwf	??_adcConvertMM,f
  3650  00E9  083C               	movf	??_adcConvertMM+5,w
  3651  00EA  1803               	skipnc
  3652  00EB  0F3C               	incfsz	??_adcConvertMM+5,w
  3653  00EC  28EE               	goto	u1680
  3654  00ED  28EF               	goto	u1681
  3655  00EE                     u1680:	
  3656  00EE  07B8               	addwf	??_adcConvertMM+1,f
  3657  00EF                     u1681:	
  3658  00EF  083D               	movf	??_adcConvertMM+6,w
  3659  00F0  1803               	skipnc
  3660  00F1  0F3D               	incfsz	??_adcConvertMM+6,w
  3661  00F2  28F4               	goto	u1682
  3662  00F3  28F5               	goto	u1683
  3663  00F4                     u1682:	
  3664  00F4  07B9               	addwf	??_adcConvertMM+2,f
  3665  00F5                     u1683:	
  3666  00F5  083E               	movf	??_adcConvertMM+7,w
  3667  00F6  1803               	skipnc
  3668  00F7  0A3E               	incf	??_adcConvertMM+7,w
  3669  00F8  07BA               	addwf	??_adcConvertMM+3,f
  3670  00F9  083A               	movf	??_adcConvertMM+3,w
  3671  00FA  00AD               	movwf	___aldiv@dividend+3
  3672  00FB  0839               	movf	??_adcConvertMM+2,w
  3673  00FC  00AC               	movwf	___aldiv@dividend+2
  3674  00FD  0838               	movf	??_adcConvertMM+1,w
  3675  00FE  00AB               	movwf	___aldiv@dividend+1
  3676  00FF  0837               	movf	??_adcConvertMM,w
  3677  0100  00AA               	movwf	___aldiv@dividend
  3678  0101  120A  158A  2771  120A  118A  	fcall	___aldiv
  3679  0106  1283               	bcf	3,5	;RP0=0, select bank0
  3680  0107  1303               	bcf	3,6	;RP1=0, select bank0
  3681  0108  0826               	movf	?___aldiv,w
  3682  0109  3EC8               	addlw	200
  3683  010A  1683               	bsf	3,5	;RP0=1, select bank1
  3684  010B  1303               	bcf	3,6	;RP1=0, select bank1
  3685  010C  00A0               	movwf	_Distance^(0+128)	;volatile
  3686  010D  1283               	bcf	3,5	;RP0=0, select bank0
  3687  010E  1303               	bcf	3,6	;RP1=0, select bank0
  3688  010F  0827               	movf	?___aldiv+1,w
  3689  0110  1803               	skipnc
  3690  0111  3E01               	addlw	1
  3691  0112  3E00               	addlw	0
  3692  0113  1683               	bsf	3,5	;RP0=1, select bank1
  3693  0114  1303               	bcf	3,6	;RP1=0, select bank1
  3694  0115  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  3695  0116                     l1949:	
  3696                           
  3697                           ;ADC.c: 67: if (adcRAW < 393 && adcRAW >= 298)
  3698  0116  3001               	movlw	1
  3699  0117  1283               	bcf	3,5	;RP0=0, select bank0
  3700  0118  0236               	subwf	adcConvertMM@adcRAW+1,w
  3701  0119  3089               	movlw	137
  3702  011A  1903               	skipnz
  3703  011B  0235               	subwf	adcConvertMM@adcRAW,w
  3704  011C  1803               	skipnc
  3705  011D  2984               	goto	l1955
  3706  011E  3001               	movlw	1
  3707  011F  0236               	subwf	adcConvertMM@adcRAW+1,w
  3708  0120  302A               	movlw	42
  3709  0121  1903               	skipnz
  3710  0122  0235               	subwf	adcConvertMM@adcRAW,w
  3711  0123  1C03               	skipc
  3712  0124  2984               	goto	l1955
  3713                           
  3714                           ;ADC.c: 68: Distance = (((39300 - adcRAW*100)/95) + 300);
  3715  0125  3000               	movlw	0
  3716  0126  00A9               	movwf	___aldiv@divisor+3
  3717  0127  3000               	movlw	0
  3718  0128  00A8               	movwf	___aldiv@divisor+2
  3719  0129  3000               	movlw	0
  3720  012A  00A7               	movwf	___aldiv@divisor+1
  3721  012B  305F               	movlw	95
  3722  012C  00A6               	movwf	___aldiv@divisor
  3723  012D  3084               	movlw	132
  3724  012E  00B7               	movwf	??_adcConvertMM
  3725  012F  3099               	movlw	153
  3726  0130  00B8               	movwf	??_adcConvertMM+1
  3727  0131  3000               	movlw	0
  3728  0132  00B9               	movwf	??_adcConvertMM+2
  3729  0133  3000               	movlw	0
  3730  0134  00BA               	movwf	??_adcConvertMM+3
  3731  0135  0836               	movf	adcConvertMM@adcRAW+1,w
  3732  0136  00A1               	movwf	___wmul@multiplier+1
  3733  0137  0835               	movf	adcConvertMM@adcRAW,w
  3734  0138  00A0               	movwf	___wmul@multiplier
  3735  0139  3064               	movlw	100
  3736  013A  00A2               	movwf	___wmul@multiplicand
  3737  013B  3000               	movlw	0
  3738  013C  00A3               	movwf	___wmul@multiplicand+1
  3739  013D  120A  158A  257D  120A  118A  	fcall	___wmul
  3740  0142  1283               	bcf	3,5	;RP0=0, select bank0
  3741  0143  1303               	bcf	3,6	;RP1=0, select bank0
  3742  0144  0820               	movf	?___wmul,w
  3743  0145  00BB               	movwf	??_adcConvertMM+4
  3744  0146  0821               	movf	?___wmul+1,w
  3745  0147  00BC               	movwf	??_adcConvertMM+5
  3746  0148  01BD               	clrf	??_adcConvertMM+6
  3747  0149  01BE               	clrf	??_adcConvertMM+7
  3748  014A  09BB               	comf	??_adcConvertMM+4,f
  3749  014B  09BC               	comf	??_adcConvertMM+5,f
  3750  014C  09BD               	comf	??_adcConvertMM+6,f
  3751  014D  09BE               	comf	??_adcConvertMM+7,f
  3752  014E  0ABB               	incf	??_adcConvertMM+4,f
  3753  014F  1903               	skipnz
  3754  0150  0ABC               	incf	??_adcConvertMM+5,f
  3755  0151  1903               	skipnz
  3756  0152  0ABD               	incf	??_adcConvertMM+6,f
  3757  0153  1903               	skipnz
  3758  0154  0ABE               	incf	??_adcConvertMM+7,f
  3759  0155  083B               	movf	??_adcConvertMM+4,w
  3760  0156  07B7               	addwf	??_adcConvertMM,f
  3761  0157  083C               	movf	??_adcConvertMM+5,w
  3762  0158  1803               	skipnc
  3763  0159  0F3C               	incfsz	??_adcConvertMM+5,w
  3764  015A  295C               	goto	u1710
  3765  015B  295D               	goto	u1711
  3766  015C                     u1710:	
  3767  015C  07B8               	addwf	??_adcConvertMM+1,f
  3768  015D                     u1711:	
  3769  015D  083D               	movf	??_adcConvertMM+6,w
  3770  015E  1803               	skipnc
  3771  015F  0F3D               	incfsz	??_adcConvertMM+6,w
  3772  0160  2962               	goto	u1712
  3773  0161  2963               	goto	u1713
  3774  0162                     u1712:	
  3775  0162  07B9               	addwf	??_adcConvertMM+2,f
  3776  0163                     u1713:	
  3777  0163  083E               	movf	??_adcConvertMM+7,w
  3778  0164  1803               	skipnc
  3779  0165  0A3E               	incf	??_adcConvertMM+7,w
  3780  0166  07BA               	addwf	??_adcConvertMM+3,f
  3781  0167  083A               	movf	??_adcConvertMM+3,w
  3782  0168  00AD               	movwf	___aldiv@dividend+3
  3783  0169  0839               	movf	??_adcConvertMM+2,w
  3784  016A  00AC               	movwf	___aldiv@dividend+2
  3785  016B  0838               	movf	??_adcConvertMM+1,w
  3786  016C  00AB               	movwf	___aldiv@dividend+1
  3787  016D  0837               	movf	??_adcConvertMM,w
  3788  016E  00AA               	movwf	___aldiv@dividend
  3789  016F  120A  158A  2771  120A  118A  	fcall	___aldiv
  3790  0174  1283               	bcf	3,5	;RP0=0, select bank0
  3791  0175  1303               	bcf	3,6	;RP1=0, select bank0
  3792  0176  0826               	movf	?___aldiv,w
  3793  0177  3E2C               	addlw	44
  3794  0178  1683               	bsf	3,5	;RP0=1, select bank1
  3795  0179  1303               	bcf	3,6	;RP1=0, select bank1
  3796  017A  00A0               	movwf	_Distance^(0+128)	;volatile
  3797  017B  1283               	bcf	3,5	;RP0=0, select bank0
  3798  017C  1303               	bcf	3,6	;RP1=0, select bank0
  3799  017D  0827               	movf	?___aldiv+1,w
  3800  017E  1803               	skipnc
  3801  017F  3E01               	addlw	1
  3802  0180  3E01               	addlw	1
  3803  0181  1683               	bsf	3,5	;RP0=1, select bank1
  3804  0182  1303               	bcf	3,6	;RP1=0, select bank1
  3805  0183  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  3806  0184                     l1955:	
  3807                           
  3808                           ;ADC.c: 70: if (adcRAW < 298 && adcRAW >= 236)
  3809  0184  3001               	movlw	1
  3810  0185  1283               	bcf	3,5	;RP0=0, select bank0
  3811  0186  0236               	subwf	adcConvertMM@adcRAW+1,w
  3812  0187  302A               	movlw	42
  3813  0188  1903               	skipnz
  3814  0189  0235               	subwf	adcConvertMM@adcRAW,w
  3815  018A  1803               	skipnc
  3816  018B  29CA               	goto	l1961
  3817  018C  3000               	movlw	0
  3818  018D  0236               	subwf	adcConvertMM@adcRAW+1,w
  3819  018E  30EC               	movlw	236
  3820  018F  1903               	skipnz
  3821  0190  0235               	subwf	adcConvertMM@adcRAW,w
  3822  0191  1C03               	skipc
  3823  0192  29CA               	goto	l1961
  3824                           
  3825                           ;ADC.c: 71: Distance = (((29800 - adcRAW*100)/62) + 400);
  3826  0193  303E               	movlw	62
  3827  0194  00A6               	movwf	___lwdiv@divisor
  3828  0195  3000               	movlw	0
  3829  0196  00A7               	movwf	___lwdiv@divisor+1
  3830  0197  0836               	movf	adcConvertMM@adcRAW+1,w
  3831  0198  00A1               	movwf	___wmul@multiplier+1
  3832  0199  0835               	movf	adcConvertMM@adcRAW,w
  3833  019A  00A0               	movwf	___wmul@multiplier
  3834  019B  3064               	movlw	100
  3835  019C  00A2               	movwf	___wmul@multiplicand
  3836  019D  3000               	movlw	0
  3837  019E  00A3               	movwf	___wmul@multiplicand+1
  3838  019F  120A  158A  257D  120A  118A  	fcall	___wmul
  3839  01A4  1283               	bcf	3,5	;RP0=0, select bank0
  3840  01A5  1303               	bcf	3,6	;RP1=0, select bank0
  3841  01A6  0920               	comf	?___wmul,w
  3842  01A7  00B7               	movwf	??_adcConvertMM
  3843  01A8  0921               	comf	?___wmul+1,w
  3844  01A9  00B8               	movwf	??_adcConvertMM+1
  3845  01AA  0AB7               	incf	??_adcConvertMM,f
  3846  01AB  1903               	skipnz
  3847  01AC  0AB8               	incf	??_adcConvertMM+1,f
  3848  01AD  0837               	movf	??_adcConvertMM,w
  3849  01AE  3E68               	addlw	104
  3850  01AF  00A8               	movwf	___lwdiv@dividend
  3851  01B0  0838               	movf	??_adcConvertMM+1,w
  3852  01B1  1803               	skipnc
  3853  01B2  3E01               	addlw	1
  3854  01B3  3E74               	addlw	116
  3855  01B4  00A9               	movwf	___lwdiv@dividend+1
  3856  01B5  120A  158A  2623  120A  118A  	fcall	___lwdiv
  3857  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  3858  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  3859  01BC  0826               	movf	?___lwdiv,w
  3860  01BD  3E90               	addlw	144
  3861  01BE  1683               	bsf	3,5	;RP0=1, select bank1
  3862  01BF  1303               	bcf	3,6	;RP1=0, select bank1
  3863  01C0  00A0               	movwf	_Distance^(0+128)	;volatile
  3864  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  3865  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  3866  01C3  0827               	movf	?___lwdiv+1,w
  3867  01C4  1803               	skipnc
  3868  01C5  3E01               	addlw	1
  3869  01C6  3E01               	addlw	1
  3870  01C7  1683               	bsf	3,5	;RP0=1, select bank1
  3871  01C8  1303               	bcf	3,6	;RP1=0, select bank1
  3872  01C9  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  3873  01CA                     l1961:	
  3874                           
  3875                           ;ADC.c: 73: if (adcRAW < 236 && adcRAW >= 194)
  3876  01CA  3000               	movlw	0
  3877  01CB  1283               	bcf	3,5	;RP0=0, select bank0
  3878  01CC  0236               	subwf	adcConvertMM@adcRAW+1,w
  3879  01CD  30EC               	movlw	236
  3880  01CE  1903               	skipnz
  3881  01CF  0235               	subwf	adcConvertMM@adcRAW,w
  3882  01D0  1803               	skipnc
  3883  01D1  2A10               	goto	l1967
  3884  01D2  3000               	movlw	0
  3885  01D3  0236               	subwf	adcConvertMM@adcRAW+1,w
  3886  01D4  30C2               	movlw	194
  3887  01D5  1903               	skipnz
  3888  01D6  0235               	subwf	adcConvertMM@adcRAW,w
  3889  01D7  1C03               	skipc
  3890  01D8  2A10               	goto	l1967
  3891                           
  3892                           ;ADC.c: 74: Distance = (((23600 - adcRAW*100)/42) + 500);
  3893  01D9  302A               	movlw	42
  3894  01DA  00A6               	movwf	___lwdiv@divisor
  3895  01DB  3000               	movlw	0
  3896  01DC  00A7               	movwf	___lwdiv@divisor+1
  3897  01DD  0836               	movf	adcConvertMM@adcRAW+1,w
  3898  01DE  00A1               	movwf	___wmul@multiplier+1
  3899  01DF  0835               	movf	adcConvertMM@adcRAW,w
  3900  01E0  00A0               	movwf	___wmul@multiplier
  3901  01E1  3064               	movlw	100
  3902  01E2  00A2               	movwf	___wmul@multiplicand
  3903  01E3  3000               	movlw	0
  3904  01E4  00A3               	movwf	___wmul@multiplicand+1
  3905  01E5  120A  158A  257D  120A  118A  	fcall	___wmul
  3906  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  3907  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  3908  01EC  0920               	comf	?___wmul,w
  3909  01ED  00B7               	movwf	??_adcConvertMM
  3910  01EE  0921               	comf	?___wmul+1,w
  3911  01EF  00B8               	movwf	??_adcConvertMM+1
  3912  01F0  0AB7               	incf	??_adcConvertMM,f
  3913  01F1  1903               	skipnz
  3914  01F2  0AB8               	incf	??_adcConvertMM+1,f
  3915  01F3  0837               	movf	??_adcConvertMM,w
  3916  01F4  3E30               	addlw	48
  3917  01F5  00A8               	movwf	___lwdiv@dividend
  3918  01F6  0838               	movf	??_adcConvertMM+1,w
  3919  01F7  1803               	skipnc
  3920  01F8  3E01               	addlw	1
  3921  01F9  3E5C               	addlw	92
  3922  01FA  00A9               	movwf	___lwdiv@dividend+1
  3923  01FB  120A  158A  2623  120A  118A  	fcall	___lwdiv
  3924  0200  1283               	bcf	3,5	;RP0=0, select bank0
  3925  0201  1303               	bcf	3,6	;RP1=0, select bank0
  3926  0202  0826               	movf	?___lwdiv,w
  3927  0203  3EF4               	addlw	244
  3928  0204  1683               	bsf	3,5	;RP0=1, select bank1
  3929  0205  1303               	bcf	3,6	;RP1=0, select bank1
  3930  0206  00A0               	movwf	_Distance^(0+128)	;volatile
  3931  0207  1283               	bcf	3,5	;RP0=0, select bank0
  3932  0208  1303               	bcf	3,6	;RP1=0, select bank0
  3933  0209  0827               	movf	?___lwdiv+1,w
  3934  020A  1803               	skipnc
  3935  020B  3E01               	addlw	1
  3936  020C  3E01               	addlw	1
  3937  020D  1683               	bsf	3,5	;RP0=1, select bank1
  3938  020E  1303               	bcf	3,6	;RP1=0, select bank1
  3939  020F  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  3940  0210                     l1967:	
  3941                           
  3942                           ;ADC.c: 76: if (adcRAW < 194 && adcRAW >= 168)
  3943  0210  3000               	movlw	0
  3944  0211  1283               	bcf	3,5	;RP0=0, select bank0
  3945  0212  0236               	subwf	adcConvertMM@adcRAW+1,w
  3946  0213  30C2               	movlw	194
  3947  0214  1903               	skipnz
  3948  0215  0235               	subwf	adcConvertMM@adcRAW,w
  3949  0216  1803               	skipnc
  3950  0217  2A56               	goto	l1973
  3951  0218  3000               	movlw	0
  3952  0219  0236               	subwf	adcConvertMM@adcRAW+1,w
  3953  021A  30A8               	movlw	168
  3954  021B  1903               	skipnz
  3955  021C  0235               	subwf	adcConvertMM@adcRAW,w
  3956  021D  1C03               	skipc
  3957  021E  2A56               	goto	l1973
  3958                           
  3959                           ;ADC.c: 77: Distance = (((19400 - adcRAW*100)/26) + 600);
  3960  021F  301A               	movlw	26
  3961  0220  00A6               	movwf	___lwdiv@divisor
  3962  0221  3000               	movlw	0
  3963  0222  00A7               	movwf	___lwdiv@divisor+1
  3964  0223  0836               	movf	adcConvertMM@adcRAW+1,w
  3965  0224  00A1               	movwf	___wmul@multiplier+1
  3966  0225  0835               	movf	adcConvertMM@adcRAW,w
  3967  0226  00A0               	movwf	___wmul@multiplier
  3968  0227  3064               	movlw	100
  3969  0228  00A2               	movwf	___wmul@multiplicand
  3970  0229  3000               	movlw	0
  3971  022A  00A3               	movwf	___wmul@multiplicand+1
  3972  022B  120A  158A  257D  120A  118A  	fcall	___wmul
  3973  0230  1283               	bcf	3,5	;RP0=0, select bank0
  3974  0231  1303               	bcf	3,6	;RP1=0, select bank0
  3975  0232  0920               	comf	?___wmul,w
  3976  0233  00B7               	movwf	??_adcConvertMM
  3977  0234  0921               	comf	?___wmul+1,w
  3978  0235  00B8               	movwf	??_adcConvertMM+1
  3979  0236  0AB7               	incf	??_adcConvertMM,f
  3980  0237  1903               	skipnz
  3981  0238  0AB8               	incf	??_adcConvertMM+1,f
  3982  0239  0837               	movf	??_adcConvertMM,w
  3983  023A  3EC8               	addlw	200
  3984  023B  00A8               	movwf	___lwdiv@dividend
  3985  023C  0838               	movf	??_adcConvertMM+1,w
  3986  023D  1803               	skipnc
  3987  023E  3E01               	addlw	1
  3988  023F  3E4B               	addlw	75
  3989  0240  00A9               	movwf	___lwdiv@dividend+1
  3990  0241  120A  158A  2623  120A  118A  	fcall	___lwdiv
  3991  0246  1283               	bcf	3,5	;RP0=0, select bank0
  3992  0247  1303               	bcf	3,6	;RP1=0, select bank0
  3993  0248  0826               	movf	?___lwdiv,w
  3994  0249  3E58               	addlw	88
  3995  024A  1683               	bsf	3,5	;RP0=1, select bank1
  3996  024B  1303               	bcf	3,6	;RP1=0, select bank1
  3997  024C  00A0               	movwf	_Distance^(0+128)	;volatile
  3998  024D  1283               	bcf	3,5	;RP0=0, select bank0
  3999  024E  1303               	bcf	3,6	;RP1=0, select bank0
  4000  024F  0827               	movf	?___lwdiv+1,w
  4001  0250  1803               	skipnc
  4002  0251  3E01               	addlw	1
  4003  0252  3E02               	addlw	2
  4004  0253  1683               	bsf	3,5	;RP0=1, select bank1
  4005  0254  1303               	bcf	3,6	;RP1=0, select bank1
  4006  0255  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  4007  0256                     l1973:	
  4008                           
  4009                           ;ADC.c: 79: if (adcRAW < 168 && adcRAW >= 144)
  4010  0256  3000               	movlw	0
  4011  0257  1283               	bcf	3,5	;RP0=0, select bank0
  4012  0258  0236               	subwf	adcConvertMM@adcRAW+1,w
  4013  0259  30A8               	movlw	168
  4014  025A  1903               	skipnz
  4015  025B  0235               	subwf	adcConvertMM@adcRAW,w
  4016  025C  1803               	skipnc
  4017  025D  2A9C               	goto	l1979
  4018  025E  3000               	movlw	0
  4019  025F  0236               	subwf	adcConvertMM@adcRAW+1,w
  4020  0260  3090               	movlw	144
  4021  0261  1903               	skipnz
  4022  0262  0235               	subwf	adcConvertMM@adcRAW,w
  4023  0263  1C03               	skipc
  4024  0264  2A9C               	goto	l1979
  4025                           
  4026                           ;ADC.c: 80: Distance = (((16800 - adcRAW*100)/24) + 700);
  4027  0265  3018               	movlw	24
  4028  0266  00A6               	movwf	___lwdiv@divisor
  4029  0267  3000               	movlw	0
  4030  0268  00A7               	movwf	___lwdiv@divisor+1
  4031  0269  0836               	movf	adcConvertMM@adcRAW+1,w
  4032  026A  00A1               	movwf	___wmul@multiplier+1
  4033  026B  0835               	movf	adcConvertMM@adcRAW,w
  4034  026C  00A0               	movwf	___wmul@multiplier
  4035  026D  3064               	movlw	100
  4036  026E  00A2               	movwf	___wmul@multiplicand
  4037  026F  3000               	movlw	0
  4038  0270  00A3               	movwf	___wmul@multiplicand+1
  4039  0271  120A  158A  257D  120A  118A  	fcall	___wmul
  4040  0276  1283               	bcf	3,5	;RP0=0, select bank0
  4041  0277  1303               	bcf	3,6	;RP1=0, select bank0
  4042  0278  0920               	comf	?___wmul,w
  4043  0279  00B7               	movwf	??_adcConvertMM
  4044  027A  0921               	comf	?___wmul+1,w
  4045  027B  00B8               	movwf	??_adcConvertMM+1
  4046  027C  0AB7               	incf	??_adcConvertMM,f
  4047  027D  1903               	skipnz
  4048  027E  0AB8               	incf	??_adcConvertMM+1,f
  4049  027F  0837               	movf	??_adcConvertMM,w
  4050  0280  3EA0               	addlw	160
  4051  0281  00A8               	movwf	___lwdiv@dividend
  4052  0282  0838               	movf	??_adcConvertMM+1,w
  4053  0283  1803               	skipnc
  4054  0284  3E01               	addlw	1
  4055  0285  3E41               	addlw	65
  4056  0286  00A9               	movwf	___lwdiv@dividend+1
  4057  0287  120A  158A  2623  120A  118A  	fcall	___lwdiv
  4058  028C  1283               	bcf	3,5	;RP0=0, select bank0
  4059  028D  1303               	bcf	3,6	;RP1=0, select bank0
  4060  028E  0826               	movf	?___lwdiv,w
  4061  028F  3EBC               	addlw	188
  4062  0290  1683               	bsf	3,5	;RP0=1, select bank1
  4063  0291  1303               	bcf	3,6	;RP1=0, select bank1
  4064  0292  00A0               	movwf	_Distance^(0+128)	;volatile
  4065  0293  1283               	bcf	3,5	;RP0=0, select bank0
  4066  0294  1303               	bcf	3,6	;RP1=0, select bank0
  4067  0295  0827               	movf	?___lwdiv+1,w
  4068  0296  1803               	skipnc
  4069  0297  3E01               	addlw	1
  4070  0298  3E02               	addlw	2
  4071  0299  1683               	bsf	3,5	;RP0=1, select bank1
  4072  029A  1303               	bcf	3,6	;RP1=0, select bank1
  4073  029B  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  4074  029C                     l1979:	
  4075                           
  4076                           ;ADC.c: 82: if (adcRAW < 144 && adcRAW >= 129)
  4077  029C  3000               	movlw	0
  4078  029D  1283               	bcf	3,5	;RP0=0, select bank0
  4079  029E  0236               	subwf	adcConvertMM@adcRAW+1,w
  4080  029F  3090               	movlw	144
  4081  02A0  1903               	skipnz
  4082  02A1  0235               	subwf	adcConvertMM@adcRAW,w
  4083  02A2  1803               	skipnc
  4084  02A3  2AE2               	goto	l1985
  4085  02A4  3000               	movlw	0
  4086  02A5  0236               	subwf	adcConvertMM@adcRAW+1,w
  4087  02A6  3081               	movlw	129
  4088  02A7  1903               	skipnz
  4089  02A8  0235               	subwf	adcConvertMM@adcRAW,w
  4090  02A9  1C03               	skipc
  4091  02AA  2AE2               	goto	l1985
  4092                           
  4093                           ;ADC.c: 83: Distance = (((14400 - adcRAW*100)/15) + 800);
  4094  02AB  300F               	movlw	15
  4095  02AC  00A6               	movwf	___lwdiv@divisor
  4096  02AD  3000               	movlw	0
  4097  02AE  00A7               	movwf	___lwdiv@divisor+1
  4098  02AF  0836               	movf	adcConvertMM@adcRAW+1,w
  4099  02B0  00A1               	movwf	___wmul@multiplier+1
  4100  02B1  0835               	movf	adcConvertMM@adcRAW,w
  4101  02B2  00A0               	movwf	___wmul@multiplier
  4102  02B3  3064               	movlw	100
  4103  02B4  00A2               	movwf	___wmul@multiplicand
  4104  02B5  3000               	movlw	0
  4105  02B6  00A3               	movwf	___wmul@multiplicand+1
  4106  02B7  120A  158A  257D  120A  118A  	fcall	___wmul
  4107  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  4108  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  4109  02BE  0920               	comf	?___wmul,w
  4110  02BF  00B7               	movwf	??_adcConvertMM
  4111  02C0  0921               	comf	?___wmul+1,w
  4112  02C1  00B8               	movwf	??_adcConvertMM+1
  4113  02C2  0AB7               	incf	??_adcConvertMM,f
  4114  02C3  1903               	skipnz
  4115  02C4  0AB8               	incf	??_adcConvertMM+1,f
  4116  02C5  0837               	movf	??_adcConvertMM,w
  4117  02C6  3E40               	addlw	64
  4118  02C7  00A8               	movwf	___lwdiv@dividend
  4119  02C8  0838               	movf	??_adcConvertMM+1,w
  4120  02C9  1803               	skipnc
  4121  02CA  3E01               	addlw	1
  4122  02CB  3E38               	addlw	56
  4123  02CC  00A9               	movwf	___lwdiv@dividend+1
  4124  02CD  120A  158A  2623  120A  118A  	fcall	___lwdiv
  4125  02D2  1283               	bcf	3,5	;RP0=0, select bank0
  4126  02D3  1303               	bcf	3,6	;RP1=0, select bank0
  4127  02D4  0826               	movf	?___lwdiv,w
  4128  02D5  3E20               	addlw	32
  4129  02D6  1683               	bsf	3,5	;RP0=1, select bank1
  4130  02D7  1303               	bcf	3,6	;RP1=0, select bank1
  4131  02D8  00A0               	movwf	_Distance^(0+128)	;volatile
  4132  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  4133  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  4134  02DB  0827               	movf	?___lwdiv+1,w
  4135  02DC  1803               	skipnc
  4136  02DD  3E01               	addlw	1
  4137  02DE  3E03               	addlw	3
  4138  02DF  1683               	bsf	3,5	;RP0=1, select bank1
  4139  02E0  1303               	bcf	3,6	;RP1=0, select bank1
  4140  02E1  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  4141  02E2                     l1985:	
  4142                           
  4143                           ;ADC.c: 85: if (adcRAW < 129 && adcRAW >= 110)
  4144  02E2  3000               	movlw	0
  4145  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  4146  02E4  0236               	subwf	adcConvertMM@adcRAW+1,w
  4147  02E5  3081               	movlw	129
  4148  02E6  1903               	skipnz
  4149  02E7  0235               	subwf	adcConvertMM@adcRAW,w
  4150  02E8  1803               	skipnc
  4151  02E9  2B28               	goto	l1991
  4152  02EA  3000               	movlw	0
  4153  02EB  0236               	subwf	adcConvertMM@adcRAW+1,w
  4154  02EC  306E               	movlw	110
  4155  02ED  1903               	skipnz
  4156  02EE  0235               	subwf	adcConvertMM@adcRAW,w
  4157  02EF  1C03               	skipc
  4158  02F0  2B28               	goto	l1991
  4159                           
  4160                           ;ADC.c: 86: Distance = (((12900 - adcRAW*100)/19) + 900 + 50);
  4161  02F1  3013               	movlw	19
  4162  02F2  00A6               	movwf	___lwdiv@divisor
  4163  02F3  3000               	movlw	0
  4164  02F4  00A7               	movwf	___lwdiv@divisor+1
  4165  02F5  0836               	movf	adcConvertMM@adcRAW+1,w
  4166  02F6  00A1               	movwf	___wmul@multiplier+1
  4167  02F7  0835               	movf	adcConvertMM@adcRAW,w
  4168  02F8  00A0               	movwf	___wmul@multiplier
  4169  02F9  3064               	movlw	100
  4170  02FA  00A2               	movwf	___wmul@multiplicand
  4171  02FB  3000               	movlw	0
  4172  02FC  00A3               	movwf	___wmul@multiplicand+1
  4173  02FD  120A  158A  257D  120A  118A  	fcall	___wmul
  4174  0302  1283               	bcf	3,5	;RP0=0, select bank0
  4175  0303  1303               	bcf	3,6	;RP1=0, select bank0
  4176  0304  0920               	comf	?___wmul,w
  4177  0305  00B7               	movwf	??_adcConvertMM
  4178  0306  0921               	comf	?___wmul+1,w
  4179  0307  00B8               	movwf	??_adcConvertMM+1
  4180  0308  0AB7               	incf	??_adcConvertMM,f
  4181  0309  1903               	skipnz
  4182  030A  0AB8               	incf	??_adcConvertMM+1,f
  4183  030B  0837               	movf	??_adcConvertMM,w
  4184  030C  3E64               	addlw	100
  4185  030D  00A8               	movwf	___lwdiv@dividend
  4186  030E  0838               	movf	??_adcConvertMM+1,w
  4187  030F  1803               	skipnc
  4188  0310  3E01               	addlw	1
  4189  0311  3E32               	addlw	50
  4190  0312  00A9               	movwf	___lwdiv@dividend+1
  4191  0313  120A  158A  2623  120A  118A  	fcall	___lwdiv
  4192  0318  1283               	bcf	3,5	;RP0=0, select bank0
  4193  0319  1303               	bcf	3,6	;RP1=0, select bank0
  4194  031A  0826               	movf	?___lwdiv,w
  4195  031B  3EB6               	addlw	182
  4196  031C  1683               	bsf	3,5	;RP0=1, select bank1
  4197  031D  1303               	bcf	3,6	;RP1=0, select bank1
  4198  031E  00A0               	movwf	_Distance^(0+128)	;volatile
  4199  031F  1283               	bcf	3,5	;RP0=0, select bank0
  4200  0320  1303               	bcf	3,6	;RP1=0, select bank0
  4201  0321  0827               	movf	?___lwdiv+1,w
  4202  0322  1803               	skipnc
  4203  0323  3E01               	addlw	1
  4204  0324  3E03               	addlw	3
  4205  0325  1683               	bsf	3,5	;RP0=1, select bank1
  4206  0326  1303               	bcf	3,6	;RP1=0, select bank1
  4207  0327  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  4208  0328                     l1991:	
  4209                           
  4210                           ;ADC.c: 88: if (adcRAW < 110 && adcRAW >= 98)
  4211  0328  3000               	movlw	0
  4212  0329  1283               	bcf	3,5	;RP0=0, select bank0
  4213  032A  0236               	subwf	adcConvertMM@adcRAW+1,w
  4214  032B  306E               	movlw	110
  4215  032C  1903               	skipnz
  4216  032D  0235               	subwf	adcConvertMM@adcRAW,w
  4217  032E  1803               	skipnc
  4218  032F  2B6E               	goto	l1997
  4219  0330  3000               	movlw	0
  4220  0331  0236               	subwf	adcConvertMM@adcRAW+1,w
  4221  0332  3062               	movlw	98
  4222  0333  1903               	skipnz
  4223  0334  0235               	subwf	adcConvertMM@adcRAW,w
  4224  0335  1C03               	skipc
  4225  0336  2B6E               	goto	l1997
  4226                           
  4227                           ;ADC.c: 89: Distance = (((11000 - adcRAW*100)/12) + 1000 + 100);
  4228  0337  300C               	movlw	12
  4229  0338  00A6               	movwf	___lwdiv@divisor
  4230  0339  3000               	movlw	0
  4231  033A  00A7               	movwf	___lwdiv@divisor+1
  4232  033B  0836               	movf	adcConvertMM@adcRAW+1,w
  4233  033C  00A1               	movwf	___wmul@multiplier+1
  4234  033D  0835               	movf	adcConvertMM@adcRAW,w
  4235  033E  00A0               	movwf	___wmul@multiplier
  4236  033F  3064               	movlw	100
  4237  0340  00A2               	movwf	___wmul@multiplicand
  4238  0341  3000               	movlw	0
  4239  0342  00A3               	movwf	___wmul@multiplicand+1
  4240  0343  120A  158A  257D  120A  118A  	fcall	___wmul
  4241  0348  1283               	bcf	3,5	;RP0=0, select bank0
  4242  0349  1303               	bcf	3,6	;RP1=0, select bank0
  4243  034A  0920               	comf	?___wmul,w
  4244  034B  00B7               	movwf	??_adcConvertMM
  4245  034C  0921               	comf	?___wmul+1,w
  4246  034D  00B8               	movwf	??_adcConvertMM+1
  4247  034E  0AB7               	incf	??_adcConvertMM,f
  4248  034F  1903               	skipnz
  4249  0350  0AB8               	incf	??_adcConvertMM+1,f
  4250  0351  0837               	movf	??_adcConvertMM,w
  4251  0352  3EF8               	addlw	248
  4252  0353  00A8               	movwf	___lwdiv@dividend
  4253  0354  0838               	movf	??_adcConvertMM+1,w
  4254  0355  1803               	skipnc
  4255  0356  3E01               	addlw	1
  4256  0357  3E2A               	addlw	42
  4257  0358  00A9               	movwf	___lwdiv@dividend+1
  4258  0359  120A  158A  2623  120A  118A  	fcall	___lwdiv
  4259  035E  1283               	bcf	3,5	;RP0=0, select bank0
  4260  035F  1303               	bcf	3,6	;RP1=0, select bank0
  4261  0360  0826               	movf	?___lwdiv,w
  4262  0361  3E4C               	addlw	76
  4263  0362  1683               	bsf	3,5	;RP0=1, select bank1
  4264  0363  1303               	bcf	3,6	;RP1=0, select bank1
  4265  0364  00A0               	movwf	_Distance^(0+128)	;volatile
  4266  0365  1283               	bcf	3,5	;RP0=0, select bank0
  4267  0366  1303               	bcf	3,6	;RP1=0, select bank0
  4268  0367  0827               	movf	?___lwdiv+1,w
  4269  0368  1803               	skipnc
  4270  0369  3E01               	addlw	1
  4271  036A  3E04               	addlw	4
  4272  036B  1683               	bsf	3,5	;RP0=1, select bank1
  4273  036C  1303               	bcf	3,6	;RP1=0, select bank1
  4274  036D  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  4275  036E                     l1997:	
  4276                           
  4277                           ;ADC.c: 91: if (adcRAW < 98 && adcRAW >= 90)
  4278  036E  3000               	movlw	0
  4279  036F  1283               	bcf	3,5	;RP0=0, select bank0
  4280  0370  0236               	subwf	adcConvertMM@adcRAW+1,w
  4281  0371  3062               	movlw	98
  4282  0372  1903               	skipnz
  4283  0373  0235               	subwf	adcConvertMM@adcRAW,w
  4284  0374  1803               	skipnc
  4285  0375  2BB2               	goto	l2003
  4286  0376  3000               	movlw	0
  4287  0377  0236               	subwf	adcConvertMM@adcRAW+1,w
  4288  0378  305A               	movlw	90
  4289  0379  1903               	skipnz
  4290  037A  0235               	subwf	adcConvertMM@adcRAW,w
  4291  037B  1C03               	skipc
  4292  037C  2BB2               	goto	l2003
  4293                           
  4294                           ;ADC.c: 92: Distance = (((9800 - adcRAW*100)/8) + 1100 + 150);
  4295  037D  0836               	movf	adcConvertMM@adcRAW+1,w
  4296  037E  00A1               	movwf	___wmul@multiplier+1
  4297  037F  0835               	movf	adcConvertMM@adcRAW,w
  4298  0380  00A0               	movwf	___wmul@multiplier
  4299  0381  3064               	movlw	100
  4300  0382  00A2               	movwf	___wmul@multiplicand
  4301  0383  3000               	movlw	0
  4302  0384  00A3               	movwf	___wmul@multiplicand+1
  4303  0385  120A  158A  257D  120A  118A  	fcall	___wmul
  4304  038A  1283               	bcf	3,5	;RP0=0, select bank0
  4305  038B  1303               	bcf	3,6	;RP1=0, select bank0
  4306  038C  0920               	comf	?___wmul,w
  4307  038D  00B7               	movwf	??_adcConvertMM
  4308  038E  0921               	comf	?___wmul+1,w
  4309  038F  00B8               	movwf	??_adcConvertMM+1
  4310  0390  0AB7               	incf	??_adcConvertMM,f
  4311  0391  1903               	skipnz
  4312  0392  0AB8               	incf	??_adcConvertMM+1,f
  4313  0393  0837               	movf	??_adcConvertMM,w
  4314  0394  3E48               	addlw	72
  4315  0395  00B9               	movwf	??_adcConvertMM+2
  4316  0396  0838               	movf	??_adcConvertMM+1,w
  4317  0397  1803               	skipnc
  4318  0398  3E01               	addlw	1
  4319  0399  3E26               	addlw	38
  4320  039A  00BA               	movwf	??_adcConvertMM+3
  4321  039B  1003               	clrc
  4322  039C  0CBA               	rrf	??_adcConvertMM+3,f
  4323  039D  0CB9               	rrf	??_adcConvertMM+2,f
  4324  039E  1003               	clrc
  4325  039F  0CBA               	rrf	??_adcConvertMM+3,f
  4326  03A0  0CB9               	rrf	??_adcConvertMM+2,f
  4327  03A1  1003               	clrc
  4328  03A2  0CBA               	rrf	??_adcConvertMM+3,f
  4329  03A3  0CB9               	rrf	??_adcConvertMM+2,f
  4330  03A4  0839               	movf	??_adcConvertMM+2,w
  4331  03A5  3EE2               	addlw	226
  4332  03A6  1683               	bsf	3,5	;RP0=1, select bank1
  4333  03A7  1303               	bcf	3,6	;RP1=0, select bank1
  4334  03A8  00A0               	movwf	_Distance^(0+128)	;volatile
  4335  03A9  1283               	bcf	3,5	;RP0=0, select bank0
  4336  03AA  1303               	bcf	3,6	;RP1=0, select bank0
  4337  03AB  083A               	movf	??_adcConvertMM+3,w
  4338  03AC  1803               	skipnc
  4339  03AD  3E01               	addlw	1
  4340  03AE  3E04               	addlw	4
  4341  03AF  1683               	bsf	3,5	;RP0=1, select bank1
  4342  03B0  1303               	bcf	3,6	;RP1=0, select bank1
  4343  03B1  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  4344  03B2                     l2003:	
  4345                           
  4346                           ;ADC.c: 94: if(adcRAW < 90 || adcRAW >= 517)
  4347  03B2  3000               	movlw	0
  4348  03B3  1283               	bcf	3,5	;RP0=0, select bank0
  4349  03B4  0236               	subwf	adcConvertMM@adcRAW+1,w
  4350  03B5  305A               	movlw	90
  4351  03B6  1903               	skipnz
  4352  03B7  0235               	subwf	adcConvertMM@adcRAW,w
  4353  03B8  1C03               	skipc
  4354  03B9  2BC1               	goto	l2007
  4355  03BA  3002               	movlw	2
  4356  03BB  0236               	subwf	adcConvertMM@adcRAW+1,w
  4357  03BC  3005               	movlw	5
  4358  03BD  1903               	skipnz
  4359  03BE  0235               	subwf	adcConvertMM@adcRAW,w
  4360  03BF  1C03               	skipc
  4361  03C0  0008               	return
  4362  03C1                     l2007:	
  4363                           
  4364                           ;ADC.c: 95: Distance = 0;
  4365  03C1  1683               	bsf	3,5	;RP0=1, select bank1
  4366  03C2  1303               	bcf	3,6	;RP1=0, select bank1
  4367  03C3  01A0               	clrf	_Distance^(0+128)	;volatile
  4368  03C4  01A1               	clrf	(_Distance+1)^(0+128)	;volatile
  4369  03C5  0008               	return
  4370  03C6                     __end_of_adcConvertMM:	
  4371                           ;ADC.c: 97: return(Distance);
  4372                           ;	Return value of _adcConvertMM is never used
  4373                           
  4374                           
  4375                           	psect	text18
  4376  0D7D                     __ptext18:	
  4377 ;; *************** function ___wmul *****************
  4378 ;; Defined at:
  4379 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4382 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;  product         2    4[BANK0 ] unsigned int 
  4385 ;; Return value:  Size  Location     Type
  4386 ;;                  2    0[BANK0 ] unsigned int 
  4387 ;; Registers used:
  4388 ;;		wreg, status,2, status,0
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4394 ;;      Params:         0       4       0       0       0
  4395 ;;      Locals:         0       2       0       0       0
  4396 ;;      Temps:          0       0       0       0       0
  4397 ;;      Totals:         0       6       0       0       0
  4398 ;;Total ram usage:        6 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; Hardware stack levels required when called:    2
  4401 ;; This function calls:
  4402 ;;		Nothing
  4403 ;; This function is called by:
  4404 ;;		_main
  4405 ;;		_adcConvertMM
  4406 ;; This function uses a non-reentrant model
  4407 ;;
  4408                           
  4409                           
  4410                           ;psect for function ___wmul
  4411  0D7D                     ___wmul:	
  4412                           
  4413                           ;incstack = 0
  4414                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4415  0D7D  1283               	bcf	3,5	;RP0=0, select bank0
  4416  0D7E  1303               	bcf	3,6	;RP1=0, select bank0
  4417  0D7F  01A4               	clrf	___wmul@product
  4418  0D80  01A5               	clrf	___wmul@product+1
  4419  0D81                     l1789:	
  4420  0D81  1C20               	btfss	___wmul@multiplier,0
  4421  0D82  2D89               	goto	l651
  4422  0D83  0822               	movf	___wmul@multiplicand,w
  4423  0D84  07A4               	addwf	___wmul@product,f
  4424  0D85  1803               	skipnc
  4425  0D86  0AA5               	incf	___wmul@product+1,f
  4426  0D87  0823               	movf	___wmul@multiplicand+1,w
  4427  0D88  07A5               	addwf	___wmul@product+1,f
  4428  0D89                     l651:	
  4429  0D89  3001               	movlw	1
  4430  0D8A                     u1345:	
  4431  0D8A  1003               	clrc
  4432  0D8B  0DA2               	rlf	___wmul@multiplicand,f
  4433  0D8C  0DA3               	rlf	___wmul@multiplicand+1,f
  4434  0D8D  3EFF               	addlw	-1
  4435  0D8E  1D03               	skipz
  4436  0D8F  2D8A               	goto	u1345
  4437  0D90  3001               	movlw	1
  4438  0D91                     u1355:	
  4439  0D91  1003               	clrc
  4440  0D92  0CA1               	rrf	___wmul@multiplier+1,f
  4441  0D93  0CA0               	rrf	___wmul@multiplier,f
  4442  0D94  3EFF               	addlw	-1
  4443  0D95  1D03               	skipz
  4444  0D96  2D91               	goto	u1355
  4445  0D97  0820               	movf	___wmul@multiplier,w
  4446  0D98  0421               	iorwf	___wmul@multiplier+1,w
  4447  0D99  1D03               	btfss	3,2
  4448  0D9A  2D81               	goto	l1789
  4449  0D9B  0825               	movf	___wmul@product+1,w
  4450  0D9C  00A1               	movwf	?___wmul+1
  4451  0D9D  0824               	movf	___wmul@product,w
  4452  0D9E  00A0               	movwf	?___wmul
  4453  0D9F  0008               	return
  4454  0DA0                     __end_of___wmul:	
  4455                           
  4456                           	psect	text19
  4457  0E23                     __ptext19:	
  4458 ;; *************** function ___lwdiv *****************
  4459 ;; Defined at:
  4460 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  4461 ;; Parameters:    Size  Location     Type
  4462 ;;  divisor         2    6[BANK0 ] unsigned int 
  4463 ;;  dividend        2    8[BANK0 ] unsigned int 
  4464 ;; Auto vars:     Size  Location     Type
  4465 ;;  quotient        2   11[BANK0 ] unsigned int 
  4466 ;;  counter         1   13[BANK0 ] unsigned char 
  4467 ;; Return value:  Size  Location     Type
  4468 ;;                  2    6[BANK0 ] unsigned int 
  4469 ;; Registers used:
  4470 ;;		wreg, status,2, status,0
  4471 ;; Tracked objects:
  4472 ;;		On entry : 0/0
  4473 ;;		On exit  : 0/0
  4474 ;;		Unchanged: 0/0
  4475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4476 ;;      Params:         0       4       0       0       0
  4477 ;;      Locals:         0       3       0       0       0
  4478 ;;      Temps:          0       1       0       0       0
  4479 ;;      Totals:         0       8       0       0       0
  4480 ;;Total ram usage:        8 bytes
  4481 ;; Hardware stack levels used:    1
  4482 ;; Hardware stack levels required when called:    2
  4483 ;; This function calls:
  4484 ;;		Nothing
  4485 ;; This function is called by:
  4486 ;;		_main
  4487 ;;		_adcConvertMM
  4488 ;; This function uses a non-reentrant model
  4489 ;;
  4490                           
  4491                           
  4492                           ;psect for function ___lwdiv
  4493  0E23                     ___lwdiv:	
  4494                           
  4495                           ;incstack = 0
  4496                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4497  0E23  1283               	bcf	3,5	;RP0=0, select bank0
  4498  0E24  1303               	bcf	3,6	;RP1=0, select bank0
  4499  0E25  01AB               	clrf	___lwdiv@quotient
  4500  0E26  01AC               	clrf	___lwdiv@quotient+1
  4501  0E27  0826               	movf	___lwdiv@divisor,w
  4502  0E28  0427               	iorwf	___lwdiv@divisor+1,w
  4503  0E29  1903               	btfsc	3,2
  4504  0E2A  2E5C               	goto	l1863
  4505  0E2B  01AD               	clrf	___lwdiv@counter
  4506  0E2C  0AAD               	incf	___lwdiv@counter,f
  4507  0E2D                     l1851:	
  4508  0E2D  1BA7               	btfsc	___lwdiv@divisor+1,7
  4509  0E2E  2E3B               	goto	l1853
  4510  0E2F  3001               	movlw	1
  4511  0E30                     u1485:	
  4512  0E30  1003               	clrc
  4513  0E31  0DA6               	rlf	___lwdiv@divisor,f
  4514  0E32  0DA7               	rlf	___lwdiv@divisor+1,f
  4515  0E33  3EFF               	addlw	-1
  4516  0E34  1D03               	skipz
  4517  0E35  2E30               	goto	u1485
  4518  0E36  3001               	movlw	1
  4519  0E37  00AA               	movwf	??___lwdiv
  4520  0E38  082A               	movf	??___lwdiv,w
  4521  0E39  07AD               	addwf	___lwdiv@counter,f
  4522  0E3A  2E2D               	goto	l1851
  4523  0E3B                     l1853:	
  4524  0E3B  3001               	movlw	1
  4525  0E3C                     u1505:	
  4526  0E3C  1003               	clrc
  4527  0E3D  0DAB               	rlf	___lwdiv@quotient,f
  4528  0E3E  0DAC               	rlf	___lwdiv@quotient+1,f
  4529  0E3F  3EFF               	addlw	-1
  4530  0E40  1D03               	skipz
  4531  0E41  2E3C               	goto	u1505
  4532  0E42  0827               	movf	___lwdiv@divisor+1,w
  4533  0E43  0229               	subwf	___lwdiv@dividend+1,w
  4534  0E44  1D03               	skipz
  4535  0E45  2E48               	goto	u1515
  4536  0E46  0826               	movf	___lwdiv@divisor,w
  4537  0E47  0228               	subwf	___lwdiv@dividend,w
  4538  0E48                     u1515:	
  4539  0E48  1C03               	skipc
  4540  0E49  2E51               	goto	l1859
  4541  0E4A  0826               	movf	___lwdiv@divisor,w
  4542  0E4B  02A8               	subwf	___lwdiv@dividend,f
  4543  0E4C  0827               	movf	___lwdiv@divisor+1,w
  4544  0E4D  1C03               	skipc
  4545  0E4E  03A9               	decf	___lwdiv@dividend+1,f
  4546  0E4F  02A9               	subwf	___lwdiv@dividend+1,f
  4547  0E50  142B               	bsf	___lwdiv@quotient,0
  4548  0E51                     l1859:	
  4549  0E51  3001               	movlw	1
  4550  0E52                     u1525:	
  4551  0E52  1003               	clrc
  4552  0E53  0CA7               	rrf	___lwdiv@divisor+1,f
  4553  0E54  0CA6               	rrf	___lwdiv@divisor,f
  4554  0E55  3EFF               	addlw	-1
  4555  0E56  1D03               	skipz
  4556  0E57  2E52               	goto	u1525
  4557  0E58  3001               	movlw	1
  4558  0E59  02AD               	subwf	___lwdiv@counter,f
  4559  0E5A  1D03               	btfss	3,2
  4560  0E5B  2E3B               	goto	l1853
  4561  0E5C                     l1863:	
  4562  0E5C  082C               	movf	___lwdiv@quotient+1,w
  4563  0E5D  00A7               	movwf	?___lwdiv+1
  4564  0E5E  082B               	movf	___lwdiv@quotient,w
  4565  0E5F  00A6               	movwf	?___lwdiv
  4566  0E60  0008               	return
  4567  0E61                     __end_of___lwdiv:	
  4568                           
  4569                           	psect	text20
  4570  0F71                     __ptext20:	
  4571 ;; *************** function ___aldiv *****************
  4572 ;; Defined at:
  4573 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
  4574 ;; Parameters:    Size  Location     Type
  4575 ;;  divisor         4    6[BANK0 ] long 
  4576 ;;  dividend        4   10[BANK0 ] long 
  4577 ;; Auto vars:     Size  Location     Type
  4578 ;;  quotient        4   17[BANK0 ] long 
  4579 ;;  sign            1   16[BANK0 ] unsigned char 
  4580 ;;  counter         1   15[BANK0 ] unsigned char 
  4581 ;; Return value:  Size  Location     Type
  4582 ;;                  4    6[BANK0 ] long 
  4583 ;; Registers used:
  4584 ;;		wreg, status,2, status,0
  4585 ;; Tracked objects:
  4586 ;;		On entry : 0/0
  4587 ;;		On exit  : 0/0
  4588 ;;		Unchanged: 0/0
  4589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4590 ;;      Params:         0       8       0       0       0
  4591 ;;      Locals:         0       6       0       0       0
  4592 ;;      Temps:          0       1       0       0       0
  4593 ;;      Totals:         0      15       0       0       0
  4594 ;;Total ram usage:       15 bytes
  4595 ;; Hardware stack levels used:    1
  4596 ;; Hardware stack levels required when called:    2
  4597 ;; This function calls:
  4598 ;;		Nothing
  4599 ;; This function is called by:
  4600 ;;		_adcConvertMM
  4601 ;; This function uses a non-reentrant model
  4602 ;;
  4603                           
  4604                           
  4605                           ;psect for function ___aldiv
  4606  0F71                     ___aldiv:	
  4607                           
  4608                           ;incstack = 0
  4609                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4610  0F71  1283               	bcf	3,5	;RP0=0, select bank0
  4611  0F72  1303               	bcf	3,6	;RP1=0, select bank0
  4612  0F73  01B0               	clrf	___aldiv@sign
  4613  0F74  1FA9               	btfss	___aldiv@divisor+3,7
  4614  0F75  2F83               	goto	l706
  4615  0F76  09A6               	comf	___aldiv@divisor,f
  4616  0F77  09A7               	comf	___aldiv@divisor+1,f
  4617  0F78  09A8               	comf	___aldiv@divisor+2,f
  4618  0F79  09A9               	comf	___aldiv@divisor+3,f
  4619  0F7A  0AA6               	incf	___aldiv@divisor,f
  4620  0F7B  1903               	skipnz
  4621  0F7C  0AA7               	incf	___aldiv@divisor+1,f
  4622  0F7D  1903               	skipnz
  4623  0F7E  0AA8               	incf	___aldiv@divisor+2,f
  4624  0F7F  1903               	skipnz
  4625  0F80  0AA9               	incf	___aldiv@divisor+3,f
  4626  0F81  01B0               	clrf	___aldiv@sign
  4627  0F82  0AB0               	incf	___aldiv@sign,f
  4628  0F83                     l706:	
  4629  0F83  1FAD               	btfss	___aldiv@dividend+3,7
  4630  0F84  2F94               	goto	l1811
  4631  0F85  09AA               	comf	___aldiv@dividend,f
  4632  0F86  09AB               	comf	___aldiv@dividend+1,f
  4633  0F87  09AC               	comf	___aldiv@dividend+2,f
  4634  0F88  09AD               	comf	___aldiv@dividend+3,f
  4635  0F89  0AAA               	incf	___aldiv@dividend,f
  4636  0F8A  1903               	skipnz
  4637  0F8B  0AAB               	incf	___aldiv@dividend+1,f
  4638  0F8C  1903               	skipnz
  4639  0F8D  0AAC               	incf	___aldiv@dividend+2,f
  4640  0F8E  1903               	skipnz
  4641  0F8F  0AAD               	incf	___aldiv@dividend+3,f
  4642  0F90  3001               	movlw	1
  4643  0F91  00AE               	movwf	??___aldiv
  4644  0F92  082E               	movf	??___aldiv,w
  4645  0F93  06B0               	xorwf	___aldiv@sign,f
  4646  0F94                     l1811:	
  4647  0F94  3000               	movlw	0
  4648  0F95  00B4               	movwf	___aldiv@quotient+3
  4649  0F96  3000               	movlw	0
  4650  0F97  00B3               	movwf	___aldiv@quotient+2
  4651  0F98  3000               	movlw	0
  4652  0F99  00B2               	movwf	___aldiv@quotient+1
  4653  0F9A  3000               	movlw	0
  4654  0F9B  00B1               	movwf	___aldiv@quotient
  4655  0F9C  0829               	movf	___aldiv@divisor+3,w
  4656  0F9D  0428               	iorwf	___aldiv@divisor+2,w
  4657  0F9E  0427               	iorwf	___aldiv@divisor+1,w
  4658  0F9F  0426               	iorwf	___aldiv@divisor,w
  4659  0FA0  1903               	skipnz
  4660  0FA1  2FE9               	goto	l1833
  4661  0FA2  01AF               	clrf	___aldiv@counter
  4662  0FA3  0AAF               	incf	___aldiv@counter,f
  4663  0FA4                     l1819:	
  4664  0FA4  1BA9               	btfsc	___aldiv@divisor+3,7
  4665  0FA5  2FB4               	goto	l1821
  4666  0FA6  3001               	movlw	1
  4667  0FA7  00AE               	movwf	??___aldiv
  4668  0FA8                     u1405:	
  4669  0FA8  1003               	clrc
  4670  0FA9  0DA6               	rlf	___aldiv@divisor,f
  4671  0FAA  0DA7               	rlf	___aldiv@divisor+1,f
  4672  0FAB  0DA8               	rlf	___aldiv@divisor+2,f
  4673  0FAC  0DA9               	rlf	___aldiv@divisor+3,f
  4674  0FAD  0BAE               	decfsz	??___aldiv,f
  4675  0FAE  2FA8               	goto	u1405
  4676  0FAF  3001               	movlw	1
  4677  0FB0  00AE               	movwf	??___aldiv
  4678  0FB1  082E               	movf	??___aldiv,w
  4679  0FB2  07AF               	addwf	___aldiv@counter,f
  4680  0FB3  2FA4               	goto	l1819
  4681  0FB4                     l1821:	
  4682  0FB4  3001               	movlw	1
  4683  0FB5  00AE               	movwf	??___aldiv
  4684  0FB6                     u1425:	
  4685  0FB6  1003               	clrc
  4686  0FB7  0DB1               	rlf	___aldiv@quotient,f
  4687  0FB8  0DB2               	rlf	___aldiv@quotient+1,f
  4688  0FB9  0DB3               	rlf	___aldiv@quotient+2,f
  4689  0FBA  0DB4               	rlf	___aldiv@quotient+3,f
  4690  0FBB  0BAE               	decfsz	??___aldiv,f
  4691  0FBC  2FB6               	goto	u1425
  4692  0FBD  0829               	movf	___aldiv@divisor+3,w
  4693  0FBE  022D               	subwf	___aldiv@dividend+3,w
  4694  0FBF  1D03               	skipz
  4695  0FC0  2FCB               	goto	u1435
  4696  0FC1  0828               	movf	___aldiv@divisor+2,w
  4697  0FC2  022C               	subwf	___aldiv@dividend+2,w
  4698  0FC3  1D03               	skipz
  4699  0FC4  2FCB               	goto	u1435
  4700  0FC5  0827               	movf	___aldiv@divisor+1,w
  4701  0FC6  022B               	subwf	___aldiv@dividend+1,w
  4702  0FC7  1D03               	skipz
  4703  0FC8  2FCB               	goto	u1435
  4704  0FC9  0826               	movf	___aldiv@divisor,w
  4705  0FCA  022A               	subwf	___aldiv@dividend,w
  4706  0FCB                     u1435:	
  4707  0FCB  1C03               	skipc
  4708  0FCC  2FDC               	goto	l1829
  4709  0FCD  0826               	movf	___aldiv@divisor,w
  4710  0FCE  02AA               	subwf	___aldiv@dividend,f
  4711  0FCF  0827               	movf	___aldiv@divisor+1,w
  4712  0FD0  1C03               	skipc
  4713  0FD1  0F27               	incfsz	___aldiv@divisor+1,w
  4714  0FD2  02AB               	subwf	___aldiv@dividend+1,f
  4715  0FD3  0828               	movf	___aldiv@divisor+2,w
  4716  0FD4  1C03               	skipc
  4717  0FD5  0F28               	incfsz	___aldiv@divisor+2,w
  4718  0FD6  02AC               	subwf	___aldiv@dividend+2,f
  4719  0FD7  0829               	movf	___aldiv@divisor+3,w
  4720  0FD8  1C03               	skipc
  4721  0FD9  0F29               	incfsz	___aldiv@divisor+3,w
  4722  0FDA  02AD               	subwf	___aldiv@dividend+3,f
  4723  0FDB  1431               	bsf	___aldiv@quotient,0
  4724  0FDC                     l1829:	
  4725  0FDC  3001               	movlw	1
  4726  0FDD                     u1445:	
  4727  0FDD  1003               	clrc
  4728  0FDE  0CA9               	rrf	___aldiv@divisor+3,f
  4729  0FDF  0CA8               	rrf	___aldiv@divisor+2,f
  4730  0FE0  0CA7               	rrf	___aldiv@divisor+1,f
  4731  0FE1  0CA6               	rrf	___aldiv@divisor,f
  4732  0FE2  3EFF               	addlw	-1
  4733  0FE3  1D03               	skipz
  4734  0FE4  2FDD               	goto	u1445
  4735  0FE5  3001               	movlw	1
  4736  0FE6  02AF               	subwf	___aldiv@counter,f
  4737  0FE7  1D03               	btfss	3,2
  4738  0FE8  2FB4               	goto	l1821
  4739  0FE9                     l1833:	
  4740  0FE9  0830               	movf	___aldiv@sign,w
  4741  0FEA  1903               	btfsc	3,2
  4742  0FEB  2FF7               	goto	l1837
  4743  0FEC  09B1               	comf	___aldiv@quotient,f
  4744  0FED  09B2               	comf	___aldiv@quotient+1,f
  4745  0FEE  09B3               	comf	___aldiv@quotient+2,f
  4746  0FEF  09B4               	comf	___aldiv@quotient+3,f
  4747  0FF0  0AB1               	incf	___aldiv@quotient,f
  4748  0FF1  1903               	skipnz
  4749  0FF2  0AB2               	incf	___aldiv@quotient+1,f
  4750  0FF3  1903               	skipnz
  4751  0FF4  0AB3               	incf	___aldiv@quotient+2,f
  4752  0FF5  1903               	skipnz
  4753  0FF6  0AB4               	incf	___aldiv@quotient+3,f
  4754  0FF7                     l1837:	
  4755  0FF7  0834               	movf	___aldiv@quotient+3,w
  4756  0FF8  00A9               	movwf	?___aldiv+3
  4757  0FF9  0833               	movf	___aldiv@quotient+2,w
  4758  0FFA  00A8               	movwf	?___aldiv+2
  4759  0FFB  0832               	movf	___aldiv@quotient+1,w
  4760  0FFC  00A7               	movwf	?___aldiv+1
  4761  0FFD  0831               	movf	___aldiv@quotient,w
  4762  0FFE  00A6               	movwf	?___aldiv
  4763  0FFF  0008               	return
  4764  1000                     __end_of___aldiv:	
  4765                           
  4766                           	psect	text21
  4767  0E9F                     __ptext21:	
  4768 ;; *************** function _isr *****************
  4769 ;; Defined at:
  4770 ;;		line 30 in file "main.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;		None
  4773 ;; Auto vars:     Size  Location     Type
  4774 ;;		None
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  1    wreg      void 
  4777 ;; Registers used:
  4778 ;;		wreg, status,2, status,0, pclath, cstack
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 0/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4784 ;;      Params:         0       0       0       0       0
  4785 ;;      Locals:         0       0       0       0       0
  4786 ;;      Temps:          5       0       0       0       0
  4787 ;;      Totals:         5       0       0       0       0
  4788 ;;Total ram usage:        5 bytes
  4789 ;; Hardware stack levels used:    1
  4790 ;; Hardware stack levels required when called:    1
  4791 ;; This function calls:
  4792 ;;		___lwmod
  4793 ;; This function is called by:
  4794 ;;		Interrupt level 1
  4795 ;; This function uses a non-reentrant model
  4796 ;;
  4797                           
  4798                           
  4799                           ;psect for function _isr
  4800  0E9F                     _isr:	
  4801                           
  4802                           ;main.c: 32: if(TMR0IF){
  4803  0E9F  1D0B               	btfss	11,2	;volatile
  4804  0EA0  2ED9               	goto	i1l123
  4805                           
  4806                           ;main.c: 33: TMR0IF = 0;
  4807  0EA1  110B               	bcf	11,2	;volatile
  4808                           
  4809                           ;main.c: 34: TMR0 = 100;
  4810  0EA2  3064               	movlw	100
  4811  0EA3  0081               	movwf	1	;volatile
  4812                           
  4813                           ;main.c: 37: if(time_count % 1 == 0) {
  4814  0EA4  3001               	movlw	1
  4815  0EA5  1683               	bsf	3,5	;RP0=1, select bank1
  4816  0EA6  1303               	bcf	3,6	;RP1=0, select bank1
  4817  0EA7  07B0               	addwf	_time_count^(0+128),f	;volatile
  4818  0EA8  1803               	skipnc
  4819  0EA9  0AB1               	incf	(_time_count+1)^(0+128),f	;volatile
  4820  0EAA  3000               	movlw	0
  4821  0EAB  07B1               	addwf	(_time_count+1)^(0+128),f	;volatile
  4822                           
  4823                           ;main.c: 40: }
  4824                           ;main.c: 42: if(time_count % 1000 == 0){
  4825  0EAC  30E8               	movlw	232
  4826  0EAD  00F0               	movwf	___lwmod@divisor
  4827  0EAE  3003               	movlw	3
  4828  0EAF  00F1               	movwf	___lwmod@divisor+1
  4829  0EB0  0831               	movf	(_time_count+1)^(0+128),w	;volatile
  4830  0EB1  00F3               	movwf	___lwmod@dividend+1
  4831  0EB2  0830               	movf	_time_count^(0+128),w	;volatile
  4832  0EB3  00F2               	movwf	___lwmod@dividend
  4833  0EB4  120A  158A  25F1  120A  158A  	fcall	___lwmod
  4834  0EB9  0870               	movf	?___lwmod,w
  4835  0EBA  0471               	iorwf	?___lwmod+1,w
  4836  0EBB  1D03               	btfss	3,2
  4837  0EBC  2EC5               	goto	i1l2179
  4838                           
  4839                           ;main.c: 43: RB4 = !RB4;
  4840  0EBD  3010               	movlw	16
  4841  0EBE  1283               	bcf	3,5	;RP0=0, select bank0
  4842  0EBF  1303               	bcf	3,6	;RP1=0, select bank0
  4843  0EC0  0686               	xorwf	6,f
  4844                           
  4845                           ;main.c: 45: time_count = 0;
  4846  0EC1  1683               	bsf	3,5	;RP0=1, select bank1
  4847  0EC2  1303               	bcf	3,6	;RP1=0, select bank1
  4848  0EC3  01B0               	clrf	_time_count^(0+128)	;volatile
  4849  0EC4  01B1               	clrf	(_time_count+1)^(0+128)	;volatile
  4850  0EC5                     i1l2179:	
  4851                           
  4852                           ;main.c: 46: }
  4853                           ;main.c: 48: if (!RB0 == 1)
  4854  0EC5  1283               	bcf	3,5	;RP0=0, select bank0
  4855  0EC6  1303               	bcf	3,6	;RP1=0, select bank0
  4856  0EC7  1806               	btfsc	6,0	;volatile
  4857  0EC8  2ECD               	goto	i1l2183
  4858                           
  4859                           ;main.c: 49: PB8Counter++;
  4860  0EC9  3001               	movlw	1
  4861  0ECA  00F6               	movwf	??_isr
  4862  0ECB  0876               	movf	??_isr,w
  4863  0ECC  07E2               	addwf	_PB8Counter,f
  4864  0ECD                     i1l2183:	
  4865                           
  4866                           ;main.c: 50: if (!RB1 == 1)
  4867  0ECD  1886               	btfsc	6,1	;volatile
  4868  0ECE  2ED3               	goto	i1l2187
  4869                           
  4870                           ;main.c: 51: PB7Counter++;
  4871  0ECF  3001               	movlw	1
  4872  0ED0  00F6               	movwf	??_isr
  4873  0ED1  0876               	movf	??_isr,w
  4874  0ED2  07E1               	addwf	_PB7Counter,f
  4875  0ED3                     i1l2187:	
  4876                           
  4877                           ;main.c: 52: if (!RB2 == 1)
  4878  0ED3  1906               	btfsc	6,2	;volatile
  4879  0ED4  2ED9               	goto	i1l123
  4880                           
  4881                           ;main.c: 53: PB6Counter++;
  4882  0ED5  3001               	movlw	1
  4883  0ED6  00F6               	movwf	??_isr
  4884  0ED7  0876               	movf	??_isr,w
  4885  0ED8  07E0               	addwf	_PB6Counter,f
  4886  0ED9                     i1l123:	
  4887  0ED9  087A               	movf	??_isr+4,w
  4888  0EDA  00FF               	movwf	127
  4889  0EDB  0879               	movf	??_isr+3,w
  4890  0EDC  008A               	movwf	10
  4891  0EDD  0878               	movf	??_isr+2,w
  4892  0EDE  0084               	movwf	4
  4893  0EDF  0E77               	swapf	(??_isr+1)^(0+-128),w
  4894  0EE0  0083               	movwf	3
  4895  0EE1  0EFE               	swapf	126,f
  4896  0EE2  0E7E               	swapf	126,w
  4897  0EE3  0009               	retfie
  4898  0EE4                     __end_of_isr:	
  4899                           
  4900                           	psect	intentry
  4901  0004                     __pintentry:	
  4902                           ;incstack = 0
  4903                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  4904                           
  4905  0004                     interrupt_function:	
  4906  007E                     saved_w	set	btemp
  4907  0004  00FE               	movwf	btemp
  4908  0005  0E03               	swapf	3,w
  4909  0006  00F7               	movwf	??_isr+1
  4910  0007  0804               	movf	4,w
  4911  0008  00F8               	movwf	??_isr+2
  4912  0009  080A               	movf	10,w
  4913  000A  00F9               	movwf	??_isr+3
  4914  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4915  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4916  000D  087F               	movf	btemp+1,w
  4917  000E  00FA               	movwf	??_isr+4
  4918  000F  120A  158A  2E9F   	ljmp	_isr
  4919                           
  4920                           	psect	text22
  4921  0DF1                     __ptext22:	
  4922 ;; *************** function ___lwmod *****************
  4923 ;; Defined at:
  4924 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  4925 ;; Parameters:    Size  Location     Type
  4926 ;;  divisor         2    0[COMMON] unsigned int 
  4927 ;;  dividend        2    2[COMMON] unsigned int 
  4928 ;; Auto vars:     Size  Location     Type
  4929 ;;  counter         1    5[COMMON] unsigned char 
  4930 ;; Return value:  Size  Location     Type
  4931 ;;                  2    0[COMMON] unsigned int 
  4932 ;; Registers used:
  4933 ;;		wreg, status,2, status,0
  4934 ;; Tracked objects:
  4935 ;;		On entry : 0/0
  4936 ;;		On exit  : 0/0
  4937 ;;		Unchanged: 0/0
  4938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4939 ;;      Params:         4       0       0       0       0
  4940 ;;      Locals:         1       0       0       0       0
  4941 ;;      Temps:          1       0       0       0       0
  4942 ;;      Totals:         6       0       0       0       0
  4943 ;;Total ram usage:        6 bytes
  4944 ;; Hardware stack levels used:    1
  4945 ;; This function calls:
  4946 ;;		Nothing
  4947 ;; This function is called by:
  4948 ;;		_isr
  4949 ;; This function uses a non-reentrant model
  4950 ;;
  4951                           
  4952                           
  4953                           ;psect for function ___lwmod
  4954  0DF1                     ___lwmod:	
  4955                           
  4956                           ;incstack = 0
  4957                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4958  0DF1  0870               	movf	___lwmod@divisor,w
  4959  0DF2  0471               	iorwf	___lwmod@divisor+1,w
  4960  0DF3  1903               	btfsc	3,2
  4961  0DF4  2E1E               	goto	i1l2163
  4962  0DF5  01F5               	clrf	___lwmod@counter
  4963  0DF6  0AF5               	incf	___lwmod@counter,f
  4964  0DF7                     i1l2153:	
  4965  0DF7  1BF1               	btfsc	___lwmod@divisor+1,7
  4966  0DF8  2E05               	goto	i1l2155
  4967  0DF9  3001               	movlw	1
  4968  0DFA                     u199_25:	
  4969  0DFA  1003               	clrc
  4970  0DFB  0DF0               	rlf	___lwmod@divisor,f
  4971  0DFC  0DF1               	rlf	___lwmod@divisor+1,f
  4972  0DFD  3EFF               	addlw	-1
  4973  0DFE  1D03               	skipz
  4974  0DFF  2DFA               	goto	u199_25
  4975  0E00  3001               	movlw	1
  4976  0E01  00F4               	movwf	??___lwmod
  4977  0E02  0874               	movf	??___lwmod,w
  4978  0E03  07F5               	addwf	___lwmod@counter,f
  4979  0E04  2DF7               	goto	i1l2153
  4980  0E05                     i1l2155:	
  4981  0E05  0871               	movf	___lwmod@divisor+1,w
  4982  0E06  0273               	subwf	___lwmod@dividend+1,w
  4983  0E07  1D03               	skipz
  4984  0E08  2E0B               	goto	u201_25
  4985  0E09  0870               	movf	___lwmod@divisor,w
  4986  0E0A  0272               	subwf	___lwmod@dividend,w
  4987  0E0B                     u201_25:	
  4988  0E0B  1C03               	skipc
  4989  0E0C  2E13               	goto	i1l2159
  4990  0E0D  0870               	movf	___lwmod@divisor,w
  4991  0E0E  02F2               	subwf	___lwmod@dividend,f
  4992  0E0F  0871               	movf	___lwmod@divisor+1,w
  4993  0E10  1C03               	skipc
  4994  0E11  03F3               	decf	___lwmod@dividend+1,f
  4995  0E12  02F3               	subwf	___lwmod@dividend+1,f
  4996  0E13                     i1l2159:	
  4997  0E13  3001               	movlw	1
  4998  0E14                     u202_25:	
  4999  0E14  1003               	clrc
  5000  0E15  0CF1               	rrf	___lwmod@divisor+1,f
  5001  0E16  0CF0               	rrf	___lwmod@divisor,f
  5002  0E17  3EFF               	addlw	-1
  5003  0E18  1D03               	skipz
  5004  0E19  2E14               	goto	u202_25
  5005  0E1A  3001               	movlw	1
  5006  0E1B  02F5               	subwf	___lwmod@counter,f
  5007  0E1C  1D03               	btfss	3,2
  5008  0E1D  2E05               	goto	i1l2155
  5009  0E1E                     i1l2163:	
  5010  0E1E  0873               	movf	___lwmod@dividend+1,w
  5011  0E1F  00F1               	movwf	?___lwmod+1
  5012  0E20  0872               	movf	___lwmod@dividend,w
  5013  0E21  00F0               	movwf	?___lwmod
  5014  0E22  0008               	return
  5015  0E23                     __end_of___lwmod:	
  5016  007E                     btemp	set	126	;btemp
  5017  007E                     wtemp	set	126
  5018  007E                     wtemp0	set	126
  5019  0080                     wtemp1	set	128
  5020  0082                     wtemp2	set	130
  5021  0084                     wtemp3	set	132
  5022  0086                     wtemp4	set	134
  5023  0088                     wtemp5	set	136
  5024  007F                     wtemp6	set	127
  5025  007E                     ttemp	set	126
  5026  007E                     ttemp0	set	126
  5027  0081                     ttemp1	set	129
  5028  0084                     ttemp2	set	132
  5029  0087                     ttemp3	set	135
  5030  007F                     ttemp4	set	127
  5031  007E                     ltemp	set	126
  5032  007E                     ltemp0	set	126
  5033  0082                     ltemp1	set	130
  5034  0086                     ltemp2	set	134
  5035  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     54      80
    BANK1            80      0      24
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->___lwmod

Critical Paths under _main in BANK0

    _setupLCD->_lcdWriteControl
    _getSensorData->_ser_getch
    _DriveDirect->_ser_putch
    _Drive->_ser_putch
    _ADCMain->_adcConvertMM
    _lcdWriteToDigitBCD->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl
    _adcConvertMM->___aldiv
    ___lwdiv->___wmul
    ___aldiv->___wmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0   10603
                                             31 BANK0     23    23      0
                            _ADCMain
                              _Drive
                        _DriveDirect
                            ___lwdiv
                             ___wmul
                      _getSensorData
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      30
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      22
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getSensorData                                        7     5      2     483
                                              2 BANK0      7     5      2
                          _ser_getch
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _ser_getch                                            2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DriveDirect                                          9     5      4     926
                                              1 BANK0      9     5      4
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _Drive                                                4     1      3     587
                                              1 BANK0      4     1      3
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCMain                                              0     0      0    4724
                       _adcConvertMM
                             _getADC
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (1) _lcdWriteToDigitBCD                                  12    10      2     652
                                              3 BANK0     12    10      2
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (2) _lcdWriteData                                         3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcdSetCursor                                         1     1      0      45
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getADC                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _adcConvertMM                                        10     8      2    4027
                                             21 BANK0     10     8      2
                            ___aldiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    1470
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              8     4      4    1116
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     618
                                              6 BANK0     15     7      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  5     5      0     265
                                              6 COMMON     5     5      0
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCMain
     _adcConvertMM
       ___aldiv
         ___wmul (ARG)
       ___lwdiv
         ___wmul (ARG)
       ___wmul
     _getADC
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteToDigitBCD
       _lcdWriteData
   _Drive
     _ser_putch
   _DriveDirect
     _ser_putch
   ___lwdiv
     ___wmul (ARG)
   ___wmul
   _getSensorData
     _ser_getch
     _ser_putch
   _lcdSetCursor
     _lcdWriteControl
   _lcdWriteToDigitBCD
     _lcdWriteData
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)
   ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      18       7       30.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     36      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       E       1      100.0%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      76      12        0.0%
ABS                  0      0      76       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Sep 18 14:21:50 2016

               ??_getSensorData 0024                     __CFG_CP$OFF 0000                              _GO 00FA  
                            fsr 0004             ___wmul@multiplicand 0022                     Drive@speedH 0024  
                   Drive@speedL 0021                             l145 05BE                             l138 04E6  
                           l243 078C                             l360 0CF5                             l291 0D14  
                           l541 07AF                             l550 07EA                             l366 0CE8  
                           l706 0F83                             l651 0D89                             _GIE 005F  
                           _RB0 0030                             _RB1 0031                             _RB2 0032  
                 ??_DriveDirect 0025                             _RB4 0034                             _RE0 0048  
                           _RE1 0049                             _RE2 004A                    __CFG_CPD$OFF 0000  
                           _isr 0E9F                 __end_of_ADCMain 0D7D                             fsr0 0004  
                           indf 0000                    __CFG_FOSC$HS 0000                  ??_lcdWriteData 0020  
                  __CFG_LVP$OFF 0000                            l2003 03B2                            l2007 03C1  
                          l2111 0F01                            l2131 0F46                            l2115 0F14  
                          l2127 0F33                            l2305 0458                            l2091 0E84  
                          l2403 0688                            l2307 0491                            l2421 0708  
                          l2333 04FC                            l2317 04A0                            l2415 06F7  
                          l2335 053E                            l2319 04D9                            l2089 0E83  
                          l1811 0F94                            l2419 0706                            l2347 0558  
                          l2291 0439                            l1821 0FB4                            l2381 0600  
                          l2349 0591                            l1903 076D                            l1833 0FE9  
                          l2393 066F                            l1819 0FA4                            l1851 0E2D  
                          l1931 07C9                            l1837 0FF7                            l1829 0FDC  
                          l1853 0E3B                            l1933 07D3                            l1909 077F  
                          l1863 0E5C                            l1943 00A8                            l1935 07DD  
                          l2399 067F                            l1961 01CA                            l1929 07BF  
                          l1859 0E51                            l1955 0184                            l1891 0741  
                          l1789 0D81                            l1973 0256                            l1949 0116  
                          l1893 0749                            l1885 071D                            l1991 0328  
                          l1967 0210                            l1887 0733                            l1985 02E2  
                          l1897 0757                            l1979 029C                            l1899 075F  
                          l1997 036E                            ?_isr 0070                            u1405 0FA8  
                          u1425 0FB6                            u1505 0E3C                            u1345 0D8A  
                          u1435 0FCB                            u1515 0E48                            u1355 0D91  
                          u1445 0FDD                            u1525 0E52                            u2405 0685  
                          u2325 0507                            u1710 015C                            u1711 015D  
                          u2415 06FD                            u2335 0563                            u1712 0162  
                          u1713 0163                            u2345 05AF                            u1650 0080  
                          u1651 0081                            u2507 06E8                            u1652 0086  
                          u1485 0E30                            u1653 0087                            u2517 0D42  
                          u2285 0463                            u2527 0D2A                            u2375 05FD  
                          u2295 04AB                            u1680 00EE                            u1681 00EF  
                          u2537 07F9                            u2385 0675                            u2457 03CE  
                          u1682 00F4                            u1683 00F5                            u2467 03FD  
                          u1925 0EF1                            u2477 0412                            u2487 0427  
                          u2497 0660                            u1955 0F23                            _PEIE 005E  
                          _RCIF 0065                            _TMR0 0001                            _TRMT 04C1  
                  __CFG_WRT$OFF 0000                            _radH 0069                            _radL 006A  
                          _main 03C6                            _loop 005A                            btemp 007E  
                          ltemp 007E                            start 0012                            ttemp 007E  
                          wtemp 007E                           ??_isr 0076                 __end_of___aldiv 1000  
                         ?_main 0070                   __CFG_WDTE$OFF 0000                 __end_of___lwdiv 0E61  
                         i1l123 0ED9                 __end_of___lwmod 0E23                   _totalDistTrav 005C  
                         _RCREG 001A                           _RCSTA 0018                           _SPBRG 0099  
                         _PORTA 0005                           _PORTC 0007                           _PORTD 0008  
                         _PORTE 0009                           _TRISA 0085                           _TRISB 0086  
                         _TRISC 0087                           _TRISD 0088                           _TRISE 0089  
                         _SSPIF 0063                           _TXREG 0019                           _TXSTA 0098  
                         _Drive 0DA0      __end_of_lcdWriteToDigitBCD 07A6                           _count 0066  
           __end_of_DriveDirect 0F71                  __pbitbssCOMMON 03D8                  __CFG_BOREN$OFF 0000  
                         pclath 000A                           ltemp0 007E                           ltemp1 0082  
                         ltemp2 0086                           ltemp3 0080                      _LeftSpeedH 005E  
                    _LeftSpeedL 005F                           ttemp0 007E                           ttemp1 0081  
                         ttemp2 0084                           ttemp3 0087                           ttemp4 007F  
                         status 0003                           wtemp0 007E                           wtemp1 0080  
                         wtemp2 0082                           wtemp3 0084                           wtemp4 0086  
                         wtemp5 0088                           wtemp6 007F                 __initialization 0015  
                  __end_of_main 070F                       ??_ADCMain 003F        __size_of_lcdWriteControl 0014  
                        ??_main 003F            __end_of_lcdSetCursor 0CE8                          ?_Drive 0021  
                        _ADCON0 001F                          _ADCON1 009F                          _ADRESH 001E  
                        _ADRESL 009E                          i1l2153 0DF7                          i1l2155 0E05  
                        i1l2163 0E1E                          i1l2159 0E13                          i1l2183 0ECD  
                        i1l2187 0ED3                          i1l2179 0EC5                          u201_25 0E0B  
                        u202_25 0E14                          u199_25 0DFA                          _TMR0IE 005D  
                        _TMR0IF 005A                          _SSPCON 0014                          _SSPBUF 0013  
                __CFG_PWRTE$OFF 0000                _totalangleTurned 00B2                          _adcRAW 0056  
                     ??___aldiv 002E                          ___wmul 0D7D                          _getADC 07A6  
          __end_of_lcdWriteData 0D2F                       ??___lwdiv 002A                       ??___lwmod 0074  
                        _speedH 006C                          _speedL 006D                          _rxbyte 006B  
                 main@timerLoop 004A                     _DriveDirect 0EE4                __end_of_ser_init 0D0D  
              __end_of_setupADC 0D45                __end_of_setupLCD 0DF1                __end_of_setupSPI 0D5D  
                        saved_w 007E                      _adcClosest 00B6         __end_of__initialization 0035  
                 __end_of_Drive 0DC8                  __pcstackCOMMON 0070                    __pidataBANK1 0CD5  
               DriveDirect@data 0026                         ??_Drive 0024               ??_lcdWriteControl 0020  
                    __pbssBANK0 0056                      __pbssBANK1 00A0             lcdSetCursor@address 0023  
                    __pmaintext 03C6                         ?___wmul 0020                         ?_getADC 0070  
                    __pintentry 0004           __size_of_lcdSetCursor 0009                         _ADCMain 0D5D  
         __end_of_getSensorData 0E9F              __size_of_ser_getch 000A              __size_of_ser_putch 000C  
                main@setADCdist 0054                     _RightSpeedH 0063                     _RightSpeedL 0064  
                       _SSPSTAT 0094         DriveDirect@VelocityLeft 0023           __size_of_lcdWriteData 0013  
                  _lcdSetCursor 0CDF              _lcdWriteToDigitBCD 070F                       ?_ser_init 0070  
                     ?_setupADC 0070                       ?_setupLCD 0070                       ?_setupSPI 0070  
                       ___aldiv 0F71                 __size_of___wmul 0023                 __size_of_getADC 0045  
                       ___lwdiv 0E23                         ___lwmod 0DF1             ?_lcdWriteToDigitBCD 0023  
                       _degrees 00A8                         __ptext1 0D0D                         __ptext2 0D45  
                       __ptext3 0DC8                         __ptext4 0D2F                         __ptext5 0CFE  
                       __ptext6 0E61                         __ptext7 0CE8                         __ptext8 0EE4  
                       __ptext9 0DA0                    __size_of_isr 0045                         _lowByte 0068  
              ___aldiv@dividend 002A                         clrloop0 0CD8                    _lcdWriteData 0D1C  
          end_of_initialization 0035            ??_lcdWriteToDigitBCD 0025               __end_of_ser_getch 0CF2  
             __end_of_ser_putch 0CFE                      ??_ser_init 0020                 main@ADC_CURRENT 0043  
                    ??_setupADC 0020                      ??_setupLCD 0023                      ??_setupSPI 0020  
              ___aldiv@quotient 0031                      _time_count 00B0                    ?_DriveDirect 0021  
            adcConvertMM@adcRAW 0035                       Drive@radH 0022                       Drive@radL 0023  
                 ?_spi_transfer 0070                 ser_getch@rxbyte 0021                   ?_adcConvertMM 0035  
           DriveDirect@data_253 0028                 _lcdWriteControl 07EB                  __end_of___wmul 0DA0  
                __end_of_getADC 07EB             start_initialization 0015                     __end_of_isr 0EE4  
                ??_spi_transfer 0020                  ??_adcConvertMM 0037                        ??___wmul 0024  
                      ??_getADC 0020                     __pdataBANK1 00B6                        ?_ADCMain 0070  
                   _FLAG_1000MS 03D8                     __pbssCOMMON 007C                       ___latbits 0002  
                 __pcstackBANK0 0020            main@ADJUSTED_SPEED_L 0045            main@ADJUSTED_SPEED_R 0047  
                  _localStepPos 00AA         __end_of_lcdWriteControl 07FF                ___lwdiv@dividend 0028  
                   _angleTurned 00A6                        ?___aldiv 0026               __size_of_ser_init 000F  
                      ?___lwdiv 0026                        ?___lwmod 0070               __size_of_setupADC 0016  
             __size_of_setupLCD 0029               __size_of_setupSPI 0018                  __size_of_Drive 0028  
          __size_of_DriveDirect 008D                ___lwdiv@quotient 002B                 main@controlByte 0049  
       lcdWriteControl@databyte 0022                 ___aldiv@divisor 0026               interrupt_function 0004  
               ___aldiv@counter 002F          __size_of_getSensorData 003E                  ___wmul@product 0024  
                    ser_putch@c 0020           getSensorData@packetID 0028                       clear_ram0 0CD7  
                main@ADC_ADJUST 0052                       _rightWall 00B5                       _ser_getch 0CE8  
                     _ser_putch 0CF2                       _stepCount 006E                __size_of_ADCMain 0020  
                 _VelocityRight 00A4            __end_of_spi_transfer 0D1C                       _stepState 007C  
             ___wmul@multiplier 0020                spi_transfer@data 0022                spi_transfer@temp 0021  
          __end_of_adcConvertMM 03C6                     _controlByte 0065                        _Distance 00A0  
          lcdWriteData@databyte 0022     __size_of_lcdWriteToDigitBCD 0097        DriveDirect@VelocityRight 0021  
               main@safetyCount 0050                      ?_ser_getch 0070                ?_lcdWriteControl 0070  
                    ?_ser_putch 0070                __size_of___aldiv 008F                __size_of___lwdiv 003E  
              __size_of___lwmod 0032                   _getSensorData 0E61                     _currentStep 0067  
lcdWriteToDigitBCD@TenThouDigit 002B                 ___lwdiv@divisor 0026                 ___lwdiv@counter 002D  
                      __ptext10 0CF2                        __ptext11 0D5D                        __ptext20 0F71  
                      __ptext12 070F                        __ptext21 0E9F                        __ptext13 0D1C  
                      __ptext22 0DF1                        __ptext14 0CDF                        __ptext15 07EB  
                      __ptext16 07A6                        __ptext17 0039                        __ptext18 0D7D  
                      __ptext19 0E23                        _highByte 006F                        _distTrav 0058  
                      _leftWall 00B4                   __size_of_main 0349                        _ser_init 0CFE  
                      _wasRight 03D9                      _PB6Counter 0060                        _setupADC 0D2F  
                      _setupLCD 0DC8                        _setupSPI 0D45                      _PB7Counter 0061  
   lcdWriteToDigitBCD@HunsDigit 0027                      _PB8Counter 0062                    _VelocityLeft 00A2  
   lcdWriteToDigitBCD@OnesDigit 002D                  ?_getSensorData 0022     lcdWriteToDigitBCD@TensDigit 0025  
   lcdWriteToDigitBCD@ThouDigit 0029                        intlevel1 0000                ___lwmod@dividend 0072  
           main@CURRENT_SPEED_L 004C             main@CURRENT_SPEED_R 004E                   ?_lcdSetCursor 0070  
                   ??_ser_getch 0020                     ??_ser_putch 0020             getSensorData@sensor 0026  
         __size_of_spi_transfer 000F           __size_of_adcConvertMM 038D                      _OPTION_REG 0081  
               ___lwmod@divisor 0070                 ___lwmod@counter 0075                    ___aldiv@sign 0030  
            getSensorData@bytes 0022                   ?_lcdWriteData 0070          lcdWriteToDigitBCD@data 0023  
                  _spi_transfer 0D0D                  ??_lcdSetCursor 0023                    _stepCountNeg 00AE  
                   _stepClosest 00AC                    _adcConvertMM 0039  
