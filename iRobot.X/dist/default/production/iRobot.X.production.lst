

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Sep 08 19:45:02 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     	;# 
    41  0001                     	;# 
    42  0002                     	;# 
    43  0003                     	;# 
    44  0004                     	;# 
    45  0005                     	;# 
    46  0006                     	;# 
    47  0007                     	;# 
    48  0008                     	;# 
    49  0009                     	;# 
    50  000A                     	;# 
    51  000B                     	;# 
    52  000C                     	;# 
    53  000D                     	;# 
    54  000E                     	;# 
    55  000E                     	;# 
    56  000F                     	;# 
    57  0010                     	;# 
    58  0011                     	;# 
    59  0012                     	;# 
    60  0013                     	;# 
    61  0014                     	;# 
    62  0015                     	;# 
    63  0015                     	;# 
    64  0016                     	;# 
    65  0017                     	;# 
    66  0018                     	;# 
    67  0019                     	;# 
    68  001A                     	;# 
    69  001B                     	;# 
    70  001B                     	;# 
    71  001C                     	;# 
    72  001D                     	;# 
    73  001E                     	;# 
    74  001F                     	;# 
    75  0081                     	;# 
    76  0085                     	;# 
    77  0086                     	;# 
    78  0087                     	;# 
    79  0088                     	;# 
    80  0089                     	;# 
    81  008C                     	;# 
    82  008D                     	;# 
    83  008E                     	;# 
    84  0091                     	;# 
    85  0092                     	;# 
    86  0093                     	;# 
    87  0094                     	;# 
    88  0098                     	;# 
    89  0099                     	;# 
    90  009C                     	;# 
    91  009D                     	;# 
    92  009E                     	;# 
    93  009F                     	;# 
    94  010C                     	;# 
    95  010D                     	;# 
    96  010E                     	;# 
    97  010F                     	;# 
    98  018C                     	;# 
    99  018D                     	;# 
   100  0000                     	;# 
   101  0001                     	;# 
   102  0002                     	;# 
   103  0003                     	;# 
   104  0004                     	;# 
   105  0005                     	;# 
   106  0006                     	;# 
   107  0007                     	;# 
   108  0008                     	;# 
   109  0009                     	;# 
   110  000A                     	;# 
   111  000B                     	;# 
   112  000C                     	;# 
   113  000D                     	;# 
   114  000E                     	;# 
   115  000E                     	;# 
   116  000F                     	;# 
   117  0010                     	;# 
   118  0011                     	;# 
   119  0012                     	;# 
   120  0013                     	;# 
   121  0014                     	;# 
   122  0015                     	;# 
   123  0015                     	;# 
   124  0016                     	;# 
   125  0017                     	;# 
   126  0018                     	;# 
   127  0019                     	;# 
   128  001A                     	;# 
   129  001B                     	;# 
   130  001B                     	;# 
   131  001C                     	;# 
   132  001D                     	;# 
   133  001E                     	;# 
   134  001F                     	;# 
   135  0081                     	;# 
   136  0085                     	;# 
   137  0086                     	;# 
   138  0087                     	;# 
   139  0088                     	;# 
   140  0089                     	;# 
   141  008C                     	;# 
   142  008D                     	;# 
   143  008E                     	;# 
   144  0091                     	;# 
   145  0092                     	;# 
   146  0093                     	;# 
   147  0094                     	;# 
   148  0098                     	;# 
   149  0099                     	;# 
   150  009C                     	;# 
   151  009D                     	;# 
   152  009E                     	;# 
   153  009F                     	;# 
   154  010C                     	;# 
   155  010D                     	;# 
   156  010E                     	;# 
   157  010F                     	;# 
   158  018C                     	;# 
   159  018D                     	;# 
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0006                     	;# 
   167  0007                     	;# 
   168  0008                     	;# 
   169  0009                     	;# 
   170  000A                     	;# 
   171  000B                     	;# 
   172  000C                     	;# 
   173  000D                     	;# 
   174  000E                     	;# 
   175  000E                     	;# 
   176  000F                     	;# 
   177  0010                     	;# 
   178  0011                     	;# 
   179  0012                     	;# 
   180  0013                     	;# 
   181  0014                     	;# 
   182  0015                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0017                     	;# 
   186  0018                     	;# 
   187  0019                     	;# 
   188  001A                     	;# 
   189  001B                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  001D                     	;# 
   193  001E                     	;# 
   194  001F                     	;# 
   195  0081                     	;# 
   196  0085                     	;# 
   197  0086                     	;# 
   198  0087                     	;# 
   199  0088                     	;# 
   200  0089                     	;# 
   201  008C                     	;# 
   202  008D                     	;# 
   203  008E                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0093                     	;# 
   207  0094                     	;# 
   208  0098                     	;# 
   209  0099                     	;# 
   210  009C                     	;# 
   211  009D                     	;# 
   212  009E                     	;# 
   213  009F                     	;# 
   214  010C                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  010F                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220  0000                     	;# 
   221  0001                     	;# 
   222  0002                     	;# 
   223  0003                     	;# 
   224  0004                     	;# 
   225  0005                     	;# 
   226  0006                     	;# 
   227  0007                     	;# 
   228  0008                     	;# 
   229  0009                     	;# 
   230  000A                     	;# 
   231  000B                     	;# 
   232  000C                     	;# 
   233  000D                     	;# 
   234  000E                     	;# 
   235  000E                     	;# 
   236  000F                     	;# 
   237  0010                     	;# 
   238  0011                     	;# 
   239  0012                     	;# 
   240  0013                     	;# 
   241  0014                     	;# 
   242  0015                     	;# 
   243  0015                     	;# 
   244  0016                     	;# 
   245  0017                     	;# 
   246  0018                     	;# 
   247  0019                     	;# 
   248  001A                     	;# 
   249  001B                     	;# 
   250  001B                     	;# 
   251  001C                     	;# 
   252  001D                     	;# 
   253  001E                     	;# 
   254  001F                     	;# 
   255  0081                     	;# 
   256  0085                     	;# 
   257  0086                     	;# 
   258  0087                     	;# 
   259  0088                     	;# 
   260  0089                     	;# 
   261  008C                     	;# 
   262  008D                     	;# 
   263  008E                     	;# 
   264  0091                     	;# 
   265  0092                     	;# 
   266  0093                     	;# 
   267  0094                     	;# 
   268  0098                     	;# 
   269  0099                     	;# 
   270  009C                     	;# 
   271  009D                     	;# 
   272  009E                     	;# 
   273  009F                     	;# 
   274  010C                     	;# 
   275  010D                     	;# 
   276  010E                     	;# 
   277  010F                     	;# 
   278  018C                     	;# 
   279  018D                     	;# 
   280  0000                     	;# 
   281  0001                     	;# 
   282  0002                     	;# 
   283  0003                     	;# 
   284  0004                     	;# 
   285  0005                     	;# 
   286  0006                     	;# 
   287  0007                     	;# 
   288  0008                     	;# 
   289  0009                     	;# 
   290  000A                     	;# 
   291  000B                     	;# 
   292  000C                     	;# 
   293  000D                     	;# 
   294  000E                     	;# 
   295  000E                     	;# 
   296  000F                     	;# 
   297  0010                     	;# 
   298  0011                     	;# 
   299  0012                     	;# 
   300  0013                     	;# 
   301  0014                     	;# 
   302  0015                     	;# 
   303  0015                     	;# 
   304  0016                     	;# 
   305  0017                     	;# 
   306  0018                     	;# 
   307  0019                     	;# 
   308  001A                     	;# 
   309  001B                     	;# 
   310  001B                     	;# 
   311  001C                     	;# 
   312  001D                     	;# 
   313  001E                     	;# 
   314  001F                     	;# 
   315  0081                     	;# 
   316  0085                     	;# 
   317  0086                     	;# 
   318  0087                     	;# 
   319  0088                     	;# 
   320  0089                     	;# 
   321  008C                     	;# 
   322  008D                     	;# 
   323  008E                     	;# 
   324  0091                     	;# 
   325  0092                     	;# 
   326  0093                     	;# 
   327  0094                     	;# 
   328  0098                     	;# 
   329  0099                     	;# 
   330  009C                     	;# 
   331  009D                     	;# 
   332  009E                     	;# 
   333  009F                     	;# 
   334  010C                     	;# 
   335  010D                     	;# 
   336  010E                     	;# 
   337  010F                     	;# 
   338  018C                     	;# 
   339  018D                     	;# 
   340  0000                     	;# 
   341  0001                     	;# 
   342  0002                     	;# 
   343  0003                     	;# 
   344  0004                     	;# 
   345  0005                     	;# 
   346  0006                     	;# 
   347  0007                     	;# 
   348  0008                     	;# 
   349  0009                     	;# 
   350  000A                     	;# 
   351  000B                     	;# 
   352  000C                     	;# 
   353  000D                     	;# 
   354  000E                     	;# 
   355  000E                     	;# 
   356  000F                     	;# 
   357  0010                     	;# 
   358  0011                     	;# 
   359  0012                     	;# 
   360  0013                     	;# 
   361  0014                     	;# 
   362  0015                     	;# 
   363  0015                     	;# 
   364  0016                     	;# 
   365  0017                     	;# 
   366  0018                     	;# 
   367  0019                     	;# 
   368  001A                     	;# 
   369  001B                     	;# 
   370  001B                     	;# 
   371  001C                     	;# 
   372  001D                     	;# 
   373  001E                     	;# 
   374  001F                     	;# 
   375  0081                     	;# 
   376  0085                     	;# 
   377  0086                     	;# 
   378  0087                     	;# 
   379  0088                     	;# 
   380  0089                     	;# 
   381  008C                     	;# 
   382  008D                     	;# 
   383  008E                     	;# 
   384  0091                     	;# 
   385  0092                     	;# 
   386  0093                     	;# 
   387  0094                     	;# 
   388  0098                     	;# 
   389  0099                     	;# 
   390  009C                     	;# 
   391  009D                     	;# 
   392  009E                     	;# 
   393  009F                     	;# 
   394  010C                     	;# 
   395  010D                     	;# 
   396  010E                     	;# 
   397  010F                     	;# 
   398  018C                     	;# 
   399  018D                     	;# 
   400                           
   401                           	psect	idataBANK0
   402  07FC                     __pidataBANK0:	
   403                           
   404                           ;initializer for _adcClosest
   405  07FC  34E8               	retlw	232
   406  07FD  3403               	retlw	3
   407  001F                     _ADCON0	set	31
   408  0005                     _PORTA	set	5
   409  0007                     _PORTC	set	7
   410  0008                     _PORTD	set	8
   411  0009                     _PORTE	set	9
   412  001A                     _RCREG	set	26
   413  0018                     _RCSTA	set	24
   414  0013                     _SSPBUF	set	19
   415  0014                     _SSPCON	set	20
   416  0001                     _TMR0	set	1
   417  0019                     _TXREG	set	25
   418  001E                     _ADRESH	set	30
   419  005F                     _GIE	set	95
   420  00FA                     _GO	set	250
   421  005E                     _PEIE	set	94
   422  0030                     _RB0	set	48
   423  0031                     _RB1	set	49
   424  0032                     _RB2	set	50
   425  0034                     _RB4	set	52
   426  003A                     _RC2	set	58
   427  0065                     _RCIF	set	101
   428  0048                     _RE0	set	72
   429  0049                     _RE1	set	73
   430  004A                     _RE2	set	74
   431  0063                     _SSPIF	set	99
   432  005D                     _TMR0IE	set	93
   433  005A                     _TMR0IF	set	90
   434  009F                     _ADCON1	set	159
   435  009E                     _ADRESL	set	158
   436  0081                     _OPTION_REG	set	129
   437  0099                     _SPBRG	set	153
   438  0094                     _SSPSTAT	set	148
   439  0085                     _TRISA	set	133
   440  0086                     _TRISB	set	134
   441  0087                     _TRISC	set	135
   442  0088                     _TRISD	set	136
   443  0089                     _TRISE	set	137
   444  0098                     _TXSTA	set	152
   445  04C1                     _TRMT	set	1217
   446                           
   447                           ; #config settings
   448  0000                     
   449                           	psect	cinit
   450  0015                     start_initialization:	
   451  0015                     __initialization:	
   452                           
   453                           ; Initialize objects allocated to BANK0
   454  0015  120A  118A  27FC  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   455  001A  00EA               	movwf	__pdataBANK0& (0+127)
   456  001B  120A  118A  27FD  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   457  0020  00EB               	movwf	(__pdataBANK0+1)& (0+127)
   458                           
   459                           ; Clear objects allocated to BANK0
   460  0021  1383               	bcf	3,7	;select IRP bank0
   461  0022  3020               	movlw	low __pbssBANK0
   462  0023  0084               	movwf	4
   463  0024  3047               	movlw	low (__pbssBANK0+39)
   464  0025  120A  158A  263A   	fcall	clear_ram0
   465                           
   466                           ; Clear objects allocated to COMMON
   467  0028  01FB               	clrf	__pbssCOMMON& (0+127)
   468  0029  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   469                           
   470                           ; Clear objects allocated to BITCOMMON
   471  002A  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   472  002B                     end_of_initialization:	
   473                           ;End of C runtime variable initialization code
   474                           
   475  002B                     __end_of__initialization:	
   476  002B  0183               	clrf	3
   477  002C  120A  118A  2B6D   	ljmp	_main	;jump to C main() function
   478                           
   479                           	psect	bitbssCOMMON
   480  03E8                     __pbitbssCOMMON:	
   481  03E8                     _FLAG_1000MS:	
   482  03E8                     	ds	1
   483                           
   484                           	psect	bssCOMMON
   485  007B                     __pbssCOMMON:	
   486  007B                     _currentStep:	
   487  007B                     	ds	1
   488  007C                     _rxbyte:	
   489  007C                     	ds	1
   490                           
   491                           	psect	bssBANK0
   492  0020                     __pbssBANK0:	
   493  0020                     _Distance:	
   494  0020                     	ds	2
   495  0022                     _adcRAW:	
   496  0022                     	ds	2
   497  0024                     _angleTurned:	
   498  0024                     	ds	2
   499  0026                     _degrees:	
   500  0026                     	ds	2
   501  0028                     _distTrav:	
   502  0028                     	ds	2
   503  002A                     _loop:	
   504  002A                     	ds	2
   505  002C                     _stepClosest:	
   506  002C                     	ds	2
   507  002E                     _stepCountNeg:	
   508  002E                     	ds	2
   509  0030                     _time_count:	
   510  0030                     	ds	2
   511  0032                     _totalDistTrav:	
   512  0032                     	ds	2
   513  0034                     _totalangleTurned:	
   514  0034                     	ds	2
   515  0036                     _LeftSpeedH:	
   516  0036                     	ds	1
   517  0037                     _LeftSpeedL:	
   518  0037                     	ds	1
   519  0038                     _PB6Counter:	
   520  0038                     	ds	1
   521  0039                     _PB7Counter:	
   522  0039                     	ds	1
   523  003A                     _PB8Counter:	
   524  003A                     	ds	1
   525  003B                     _RightSpeedH:	
   526  003B                     	ds	1
   527  003C                     _RightSpeedL:	
   528  003C                     	ds	1
   529  003D                     _controlByte:	
   530  003D                     	ds	1
   531  003E                     _count:	
   532  003E                     	ds	1
   533  003F                     _lowByte:	
   534  003F                     	ds	1
   535  0040                     _negativeFlag:	
   536  0040                     	ds	1
   537  0041                     _radH:	
   538  0041                     	ds	1
   539  0042                     _radL:	
   540  0042                     	ds	1
   541  0043                     _speedH:	
   542  0043                     	ds	1
   543  0044                     _speedL:	
   544  0044                     	ds	1
   545  0045                     _stepCount:	
   546  0045                     	ds	1
   547  0046                     _highByte:	
   548  0046                     	ds	1
   549                           
   550                           	psect	dataBANK0
   551  006A                     __pdataBANK0:	
   552  006A                     _adcClosest:	
   553  006A                     	ds	2
   554                           
   555                           	psect	clrtext
   556  0E3A                     clear_ram0:	
   557                           ;	Called with FSR containing the base address, and
   558                           ;	W with the last address+1
   559                           
   560  0E3A  0064               	clrwdt	;clear the watchdog before getting into this loop
   561  0E3B                     clrloop0:	
   562  0E3B  0180               	clrf	0	;clear RAM location pointed to by FSR
   563  0E3C  0A84               	incf	4,f	;increment pointer
   564  0E3D  0604               	xorwf	4,w	;XOR with final address
   565  0E3E  1903               	btfsc	3,2	;have we reached the end yet?
   566  0E3F  3400               	retlw	0	;all done for this memory range, return
   567  0E40  0604               	xorwf	4,w	;XOR again to restore value
   568  0E41  2E3B               	goto	clrloop0	;do the next byte
   569                           
   570                           	psect	cstackCOMMON
   571  0070                     __pcstackCOMMON:	
   572  0070                     ?_setupSPI:	
   573  0070                     ?_ser_init:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0070                     ?_setupLCD:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0070                     ?_setupADC:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0070                     ?_spi_transfer:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0070                     ?_ser_putch:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0070                     ?_moveCW:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0070                     ?_ADCMain:	
   592                           ; 1 bytes @ 0x0
   593                           
   594  0070                     ?_moveCCW:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  0070                     ?_lcdSetCursor:	
   598                           ; 1 bytes @ 0x0
   599                           
   600  0070                     ?_isr:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  0070                     ?_main:	
   604                           ; 1 bytes @ 0x0
   605                           
   606  0070                     ?_lcdWriteControl:	
   607                           ; 1 bytes @ 0x0
   608                           
   609  0070                     ?_lcdWriteData:	
   610                           ; 1 bytes @ 0x0
   611                           
   612  0070                     ?_ser_getch:	
   613                           ; 1 bytes @ 0x0
   614                           
   615  0070                     ?_getADC:	
   616                           ; 1 bytes @ 0x0
   617                           
   618  0070                     ?___lwmod:	
   619                           ; 2 bytes @ 0x0
   620                           
   621  0070                     ___lwmod@divisor:	
   622                           ; 2 bytes @ 0x0
   623                           
   624                           
   625                           ; 2 bytes @ 0x0
   626  0070                     	ds	2
   627  0072                     ___lwmod@dividend:	
   628                           
   629                           ; 2 bytes @ 0x2
   630  0072                     	ds	2
   631  0074                     ??___lwmod:	
   632                           
   633                           ; 1 bytes @ 0x4
   634  0074                     	ds	1
   635  0075                     ___lwmod@counter:	
   636                           
   637                           ; 1 bytes @ 0x5
   638  0075                     	ds	1
   639  0076                     ??_isr:	
   640                           
   641                           ; 1 bytes @ 0x6
   642  0076                     	ds	5
   643                           
   644                           	psect	cstackBANK0
   645  0047                     __pcstackBANK0:	
   646  0047                     ??_setupSPI:	
   647  0047                     ??_ser_init:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  0047                     ??_setupADC:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0047                     ??_spi_transfer:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0047                     ??_ser_putch:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0047                     ??_moveCW:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0047                     ??_moveCCW:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0047                     ??_getADC:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0047                     ??_lcdWriteControl:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0047                     ??_lcdWriteData:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0047                     ??_ser_getch:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0047                     ?___wmul:	
   678                           ; 1 bytes @ 0x0
   679                           
   680  0047                     ser_putch@c:	
   681                           ; 2 bytes @ 0x0
   682                           
   683  0047                     ___wmul@multiplier:	
   684                           ; 1 bytes @ 0x0
   685                           
   686                           
   687                           ; 2 bytes @ 0x0
   688  0047                     	ds	1
   689  0048                     ?_DriveDirect:	
   690  0048                     ?_Drive:	
   691                           ; 1 bytes @ 0x1
   692                           
   693  0048                     spi_transfer@temp:	
   694                           ; 1 bytes @ 0x1
   695                           
   696  0048                     ser_getch@rxbyte:	
   697                           ; 1 bytes @ 0x1
   698                           
   699  0048                     Drive@speedL:	
   700                           ; 1 bytes @ 0x1
   701                           
   702  0048                     DriveDirect@RightSpeedL:	
   703                           ; 1 bytes @ 0x1
   704                           
   705                           
   706                           ; 1 bytes @ 0x1
   707  0048                     	ds	1
   708  0049                     ?_getSensorData:	
   709  0049                     lcdWriteControl@databyte:	
   710                           ; 2 bytes @ 0x2
   711                           
   712  0049                     lcdWriteData@databyte:	
   713                           ; 1 bytes @ 0x2
   714                           
   715  0049                     spi_transfer@data:	
   716                           ; 1 bytes @ 0x2
   717                           
   718  0049                     Drive@radH:	
   719                           ; 1 bytes @ 0x2
   720                           
   721  0049                     DriveDirect@LeftSpeedH:	
   722                           ; 1 bytes @ 0x2
   723                           
   724  0049                     getSensorData@bytes:	
   725                           ; 1 bytes @ 0x2
   726                           
   727  0049                     ___wmul@multiplicand:	
   728                           ; 1 bytes @ 0x2
   729                           
   730                           
   731                           ; 2 bytes @ 0x2
   732  0049                     	ds	1
   733  004A                     ??_setupLCD:	
   734  004A                     ?_lcdWriteToDigitBCD:	
   735                           ; 1 bytes @ 0x3
   736                           
   737  004A                     ??_lcdSetCursor:	
   738                           ; 1 bytes @ 0x3
   739                           
   740  004A                     lcdSetCursor@address:	
   741                           ; 1 bytes @ 0x3
   742                           
   743  004A                     Drive@radL:	
   744                           ; 1 bytes @ 0x3
   745                           
   746  004A                     DriveDirect@LeftSpeedL:	
   747                           ; 1 bytes @ 0x3
   748                           
   749  004A                     lcdWriteToDigitBCD@data:	
   750                           ; 1 bytes @ 0x3
   751                           
   752                           
   753                           ; 2 bytes @ 0x3
   754  004A                     	ds	1
   755  004B                     ??_getSensorData:	
   756  004B                     ??_DriveDirect:	
   757                           ; 1 bytes @ 0x4
   758                           
   759  004B                     ??_Drive:	
   760                           ; 1 bytes @ 0x4
   761                           
   762  004B                     ??___wmul:	
   763                           ; 1 bytes @ 0x4
   764                           
   765  004B                     Drive@speedH:	
   766                           ; 1 bytes @ 0x4
   767                           
   768  004B                     DriveDirect@RightSpeedH:	
   769                           ; 1 bytes @ 0x4
   770                           
   771  004B                     ___wmul@product:	
   772                           ; 1 bytes @ 0x4
   773                           
   774                           
   775                           ; 2 bytes @ 0x4
   776  004B                     	ds	1
   777  004C                     ??_lcdWriteToDigitBCD:	
   778  004C                     lcdWriteToDigitBCD@TensDigit:	
   779                           ; 1 bytes @ 0x5
   780                           
   781                           
   782                           ; 2 bytes @ 0x5
   783  004C                     	ds	1
   784  004D                     ?___lwdiv:	
   785  004D                     ?___aldiv:	
   786                           ; 2 bytes @ 0x6
   787                           
   788  004D                     getSensorData@sensor:	
   789                           ; 4 bytes @ 0x6
   790                           
   791  004D                     ___lwdiv@divisor:	
   792                           ; 2 bytes @ 0x6
   793                           
   794  004D                     ___aldiv@divisor:	
   795                           ; 2 bytes @ 0x6
   796                           
   797                           
   798                           ; 4 bytes @ 0x6
   799  004D                     	ds	1
   800  004E                     lcdWriteToDigitBCD@HunsDigit:	
   801                           
   802                           ; 2 bytes @ 0x7
   803  004E                     	ds	1
   804  004F                     getSensorData@packetID:	
   805  004F                     ___lwdiv@dividend:	
   806                           ; 1 bytes @ 0x8
   807                           
   808                           
   809                           ; 2 bytes @ 0x8
   810  004F                     	ds	1
   811  0050                     lcdWriteToDigitBCD@ThouDigit:	
   812                           
   813                           ; 2 bytes @ 0x9
   814  0050                     	ds	1
   815  0051                     ??___lwdiv:	
   816  0051                     ___aldiv@dividend:	
   817                           ; 1 bytes @ 0xA
   818                           
   819                           
   820                           ; 4 bytes @ 0xA
   821  0051                     	ds	1
   822  0052                     lcdWriteToDigitBCD@TenThouDigit:	
   823  0052                     ___lwdiv@quotient:	
   824                           ; 2 bytes @ 0xB
   825                           
   826                           
   827                           ; 2 bytes @ 0xB
   828  0052                     	ds	2
   829  0054                     ___lwdiv@counter:	
   830  0054                     lcdWriteToDigitBCD@OnesDigit:	
   831                           ; 1 bytes @ 0xD
   832                           
   833                           
   834                           ; 2 bytes @ 0xD
   835  0054                     	ds	1
   836  0055                     ??___aldiv:	
   837                           
   838                           ; 1 bytes @ 0xE
   839  0055                     	ds	1
   840  0056                     ___aldiv@counter:	
   841                           
   842                           ; 1 bytes @ 0xF
   843  0056                     	ds	1
   844  0057                     ___aldiv@sign:	
   845                           
   846                           ; 1 bytes @ 0x10
   847  0057                     	ds	1
   848  0058                     ___aldiv@quotient:	
   849                           
   850                           ; 4 bytes @ 0x11
   851  0058                     	ds	4
   852  005C                     ?_adcConvertMM:	
   853  005C                     adcConvertMM@adcRAW:	
   854                           ; 2 bytes @ 0x15
   855                           
   856                           
   857                           ; 2 bytes @ 0x15
   858  005C                     	ds	2
   859  005E                     ??_adcConvertMM:	
   860                           
   861                           ; 1 bytes @ 0x17
   862  005E                     	ds	8
   863  0066                     ??_ADCMain:	
   864  0066                     ??_main:	
   865                           ; 1 bytes @ 0x1F
   866                           
   867                           
   868                           ; 1 bytes @ 0x1F
   869  0066                     	ds	3
   870  0069                     main@controlByte:	
   871                           
   872                           ; 1 bytes @ 0x22
   873  0069                     	ds	1
   874                           
   875                           	psect	maintext
   876  036D                     __pmaintext:	
   877 ;;
   878 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   879 ;;
   880 ;; *************** function _main *****************
   881 ;; Defined at:
   882 ;;		line 69 in file "main.c"
   883 ;; Parameters:    Size  Location     Type
   884 ;;		None
   885 ;; Auto vars:     Size  Location     Type
   886 ;;  controlByte     1   34[BANK0 ] unsigned char 
   887 ;; Return value:  Size  Location     Type
   888 ;;                  1    wreg      void 
   889 ;; Registers used:
   890 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   891 ;; Tracked objects:
   892 ;;		On entry : B00/0
   893 ;;		On exit  : 0/0
   894 ;;		Unchanged: 0/0
   895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   896 ;;      Params:         0       0       0       0       0
   897 ;;      Locals:         0       1       0       0       0
   898 ;;      Temps:          0       3       0       0       0
   899 ;;      Totals:         0       4       0       0       0
   900 ;;Total ram usage:        4 bytes
   901 ;; Hardware stack levels required when called:    5
   902 ;; This function calls:
   903 ;;		_ADCMain
   904 ;;		_Drive
   905 ;;		_DriveDirect
   906 ;;		_getSensorData
   907 ;;		_lcdSetCursor
   908 ;;		_lcdWriteToDigitBCD
   909 ;;		_moveCCW
   910 ;;		_moveCW
   911 ;;		_ser_init
   912 ;;		_ser_putch
   913 ;;		_setupADC
   914 ;;		_setupLCD
   915 ;;		_setupSPI
   916 ;;		_spi_transfer
   917 ;; This function is called by:
   918 ;;		Startup code after reset
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922                           
   923                           ;psect for function _main
   924  036D                     _main:	
   925                           
   926                           ;main.c: 70: _delay((unsigned long)((5000)*(20000000/4000.0)));
   927                           
   928                           ;incstack = 0
   929                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   930  036D  307F               	movlw	127
   931  036E  1283               	bcf	3,5	;RP0=0, select bank0
   932  036F  1303               	bcf	3,6	;RP1=0, select bank0
   933  0370  00E8               	movwf	??_main+2
   934  0371  30D4               	movlw	212
   935  0372  00E7               	movwf	??_main+1
   936  0373  30AE               	movlw	174
   937  0374  00E6               	movwf	??_main
   938  0375                     u1737:	
   939  0375  0BE6               	decfsz	??_main,f
   940  0376  2B75               	goto	u1737
   941  0377  0BE7               	decfsz	??_main+1,f
   942  0378  2B75               	goto	u1737
   943  0379  0BE8               	decfsz	??_main+2,f
   944  037A  2B75               	goto	u1737
   945  037B  2B7C               	nop2
   946                           
   947                           ;main.c: 73: setupSPI();
   948  037C  120A  158A  26BC  120A  118A  	fcall	_setupSPI
   949                           
   950                           ;main.c: 74: ser_init();
   951  0381  120A  158A  2661  120A  118A  	fcall	_ser_init
   952                           
   953                           ;main.c: 75: setupLCD();
   954  0386  120A  158A  2767  120A  118A  	fcall	_setupLCD
   955                           
   956                           ;main.c: 76: setupADC();
   957  038B  120A  158A  26A6  120A  118A  	fcall	_setupADC
   958                           
   959                           ;main.c: 78: unsigned char controlByte = 0b00001101;
   960  0390  300D               	movlw	13
   961  0391  1283               	bcf	3,5	;RP0=0, select bank0
   962  0392  1303               	bcf	3,6	;RP1=0, select bank0
   963  0393  00E6               	movwf	??_main
   964  0394  0866               	movf	??_main,w
   965  0395  00E9               	movwf	main@controlByte
   966                           
   967                           ;main.c: 79: spi_transfer(controlByte);
   968  0396  0869               	movf	main@controlByte,w
   969  0397  120A  158A  2670  120A  118A  	fcall	_spi_transfer
   970                           
   971                           ;main.c: 81: _delay((unsigned long)((1000)*(20000000/4000.0)));
   972  039C  301A               	movlw	26
   973  039D  1283               	bcf	3,5	;RP0=0, select bank0
   974  039E  1303               	bcf	3,6	;RP1=0, select bank0
   975  039F  00E8               	movwf	??_main+2
   976  03A0  305E               	movlw	94
   977  03A1  00E7               	movwf	??_main+1
   978  03A2  3086               	movlw	134
   979  03A3  00E6               	movwf	??_main
   980  03A4                     u1747:	
   981  03A4  0BE6               	decfsz	??_main,f
   982  03A5  2BA4               	goto	u1747
   983  03A6  0BE7               	decfsz	??_main+1,f
   984  03A7  2BA4               	goto	u1747
   985  03A8  0BE8               	decfsz	??_main+2,f
   986  03A9  2BA4               	goto	u1747
   987  03AA  0000               	nop
   988                           
   989                           ;main.c: 82: ser_putch(128);
   990  03AB  3080               	movlw	128
   991  03AC  120A  158A  2655  120A  118A  	fcall	_ser_putch
   992                           
   993                           ;main.c: 83: _delay((unsigned long)((1000)*(20000000/4000.0)));
   994  03B1  301A               	movlw	26
   995  03B2  1283               	bcf	3,5	;RP0=0, select bank0
   996  03B3  1303               	bcf	3,6	;RP1=0, select bank0
   997  03B4  00E8               	movwf	??_main+2
   998  03B5  305E               	movlw	94
   999  03B6  00E7               	movwf	??_main+1
  1000  03B7  3086               	movlw	134
  1001  03B8  00E6               	movwf	??_main
  1002  03B9                     u1757:	
  1003  03B9  0BE6               	decfsz	??_main,f
  1004  03BA  2BB9               	goto	u1757
  1005  03BB  0BE7               	decfsz	??_main+1,f
  1006  03BC  2BB9               	goto	u1757
  1007  03BD  0BE8               	decfsz	??_main+2,f
  1008  03BE  2BB9               	goto	u1757
  1009  03BF  0000               	nop
  1010                           
  1011                           ;main.c: 84: ser_putch(132);
  1012  03C0  3084               	movlw	132
  1013  03C1  120A  158A  2655  120A  118A  	fcall	_ser_putch
  1014                           
  1015                           ;main.c: 85: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1016  03C6  301A               	movlw	26
  1017  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  1018  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  1019  03C9  00E8               	movwf	??_main+2
  1020  03CA  305E               	movlw	94
  1021  03CB  00E7               	movwf	??_main+1
  1022  03CC  3086               	movlw	134
  1023  03CD  00E6               	movwf	??_main
  1024  03CE                     u1767:	
  1025  03CE  0BE6               	decfsz	??_main,f
  1026  03CF  2BCE               	goto	u1767
  1027  03D0  0BE7               	decfsz	??_main+1,f
  1028  03D1  2BCE               	goto	u1767
  1029  03D2  0BE8               	decfsz	??_main+2,f
  1030  03D3  2BCE               	goto	u1767
  1031  03D4  0000               	nop
  1032                           
  1033                           ;main.c: 86: lcdWriteToDigitBCD(totalDistTrav);
  1034  03D5  1283               	bcf	3,5	;RP0=0, select bank0
  1035  03D6  1303               	bcf	3,6	;RP1=0, select bank0
  1036  03D7  0833               	movf	_totalDistTrav+1,w
  1037  03D8  00CB               	movwf	lcdWriteToDigitBCD@data+1
  1038  03D9  0832               	movf	_totalDistTrav,w
  1039  03DA  00CA               	movwf	lcdWriteToDigitBCD@data
  1040  03DB  120A  118A  257A  120A  118A  	fcall	_lcdWriteToDigitBCD
  1041  03E0                     l2037:	
  1042                           ;main.c: 89: while(1){
  1043                           
  1044                           
  1045                           ;main.c: 94: if (PB8Counter >= 10 && !RB0 == 0){
  1046  03E0  300A               	movlw	10
  1047  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  1048  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  1049  03E3  023A               	subwf	_PB8Counter,w
  1050  03E4  1803               	btfsc	3,0
  1051  03E5  1C06               	btfss	6,0	;volatile
  1052  03E6  2C42               	goto	l2069
  1053                           
  1054                           ;main.c: 95: adcClosest = 0;
  1055  03E7  01EA               	clrf	_adcClosest
  1056  03E8  01EB               	clrf	_adcClosest+1
  1057                           
  1058                           ;main.c: 96: for (loop = 0; loop < 400; loop++){
  1059  03E9  01AA               	clrf	_loop
  1060  03EA  01AB               	clrf	_loop+1
  1061  03EB  082B               	movf	_loop+1,w
  1062  03EC  3A80               	xorlw	128
  1063  03ED  00FF               	movwf	127
  1064  03EE  3081               	movlw	129
  1065  03EF  027F               	subwf	127,w
  1066  03F0  1D03               	skipz
  1067  03F1  2BF4               	goto	u1615
  1068  03F2  3090               	movlw	144
  1069  03F3  022A               	subwf	_loop,w
  1070  03F4                     u1615:	
  1071  03F4  1803               	btfsc	3,0
  1072  03F5  2C24               	goto	l2059
  1073  03F6                     l2047:	
  1074                           
  1075                           ;main.c: 97: moveCW();
  1076  03F6  120A  118A  26A0  120A  118A  	fcall	_moveCW
  1077                           
  1078                           ;main.c: 98: ADCMain();
  1079  03FB  120A  158A  26D4  120A  118A  	fcall	_ADCMain
  1080                           
  1081                           ;main.c: 99: if (adcRAW > adcClosest){
  1082  0400  1283               	bcf	3,5	;RP0=0, select bank0
  1083  0401  1303               	bcf	3,6	;RP1=0, select bank0
  1084  0402  0823               	movf	_adcRAW+1,w	;volatile
  1085  0403  026B               	subwf	_adcClosest+1,w
  1086  0404  1D03               	skipz
  1087  0405  2C08               	goto	u1625
  1088  0406  0822               	movf	_adcRAW,w	;volatile
  1089  0407  026A               	subwf	_adcClosest,w
  1090  0408                     u1625:	
  1091  0408  1803               	skipnc
  1092  0409  2C13               	goto	l2055
  1093                           
  1094                           ;main.c: 100: adcClosest = adcRAW;
  1095  040A  0823               	movf	_adcRAW+1,w	;volatile
  1096  040B  00EB               	movwf	_adcClosest+1
  1097  040C  0822               	movf	_adcRAW,w	;volatile
  1098  040D  00EA               	movwf	_adcClosest
  1099                           
  1100                           ;main.c: 101: stepClosest = stepCount;
  1101  040E  0845               	movf	_stepCount,w
  1102  040F  00AC               	movwf	_stepClosest
  1103  0410  01AD               	clrf	_stepClosest+1
  1104  0411  1BAC               	btfsc	_stepClosest,7
  1105  0412  03AD               	decf	_stepClosest+1,f
  1106  0413                     l2055:	
  1107  0413  3001               	movlw	1
  1108  0414  07AA               	addwf	_loop,f
  1109  0415  1803               	skipnc
  1110  0416  0AAB               	incf	_loop+1,f
  1111  0417  3000               	movlw	0
  1112  0418  07AB               	addwf	_loop+1,f
  1113  0419  082B               	movf	_loop+1,w
  1114  041A  3A80               	xorlw	128
  1115  041B  00FF               	movwf	127
  1116  041C  3081               	movlw	129
  1117  041D  027F               	subwf	127,w
  1118  041E  1D03               	skipz
  1119  041F  2C22               	goto	u1635
  1120  0420  3090               	movlw	144
  1121  0421  022A               	subwf	_loop,w
  1122  0422                     u1635:	
  1123  0422  1C03               	skipc
  1124  0423  2BF6               	goto	l2047
  1125  0424                     l2059:	
  1126                           
  1127                           ;main.c: 102: }
  1128                           ;main.c: 103: }
  1129                           ;main.c: 105: for (loop = stepCount; loop != stepClosest; loop++){
  1130  0424  1283               	bcf	3,5	;RP0=0, select bank0
  1131  0425  1303               	bcf	3,6	;RP1=0, select bank0
  1132  0426  0845               	movf	_stepCount,w
  1133  0427  00AA               	movwf	_loop
  1134  0428  01AB               	clrf	_loop+1
  1135  0429  1BAA               	btfsc	_loop,7
  1136  042A  03AB               	decf	_loop+1,f
  1137  042B                     l2065:	
  1138  042B  082D               	movf	_stepClosest+1,w
  1139  042C  062B               	xorwf	_loop+1,w
  1140  042D  1D03               	skipz
  1141  042E  2C31               	goto	u1645
  1142  042F  082C               	movf	_stepClosest,w
  1143  0430  062A               	xorwf	_loop,w
  1144  0431                     u1645:	
  1145  0431  1903               	btfsc	3,2
  1146  0432  2C41               	goto	l2067
  1147                           
  1148                           ;main.c: 106: moveCCW();
  1149  0433  120A  118A  26EB  120A  118A  	fcall	_moveCCW
  1150  0438  3001               	movlw	1
  1151  0439  1283               	bcf	3,5	;RP0=0, select bank0
  1152  043A  1303               	bcf	3,6	;RP1=0, select bank0
  1153  043B  07AA               	addwf	_loop,f
  1154  043C  1803               	skipnc
  1155  043D  0AAB               	incf	_loop+1,f
  1156  043E  3000               	movlw	0
  1157  043F  07AB               	addwf	_loop+1,f
  1158  0440  2C2B               	goto	l2065
  1159  0441                     l2067:	
  1160                           
  1161                           ;main.c: 107: }
  1162                           ;main.c: 108: PB8Counter = 0;
  1163  0441  01BA               	clrf	_PB8Counter
  1164  0442                     l2069:	
  1165                           
  1166                           ;main.c: 109: }
  1167                           ;main.c: 114: if (getSensorData(18,1) == 0b00000001){
  1168  0442  01C9               	clrf	getSensorData@bytes
  1169  0443  0AC9               	incf	getSensorData@bytes,f
  1170  0444  3012               	movlw	18
  1171  0445  120A  118A  27BE  120A  118A  	fcall	_getSensorData
  1172  044A  1283               	bcf	3,5	;RP0=0, select bank0
  1173  044B  1303               	bcf	3,6	;RP1=0, select bank0
  1174  044C  0349               	decf	?_getSensorData,w
  1175  044D  044A               	iorwf	?_getSensorData+1,w
  1176  044E  1D03               	btfss	3,2
  1177  044F  2CA3               	goto	l2085
  1178                           
  1179                           ;main.c: 115: DriveDirect(0,250,0,250);
  1180  0450  30FA               	movlw	250
  1181  0451  00E6               	movwf	??_main
  1182  0452  0866               	movf	??_main,w
  1183  0453  00C8               	movwf	DriveDirect@RightSpeedL
  1184  0454  01C9               	clrf	DriveDirect@LeftSpeedH
  1185  0455  30FA               	movlw	250
  1186  0456  00E7               	movwf	??_main+1
  1187  0457  0867               	movf	??_main+1,w
  1188  0458  00CA               	movwf	DriveDirect@LeftSpeedL
  1189  0459  3000               	movlw	0
  1190  045A  120A  158A  273F  120A  118A  	fcall	_DriveDirect
  1191  045F                     l2081:	
  1192                           ;main.c: 116: while (totalDistTrav < 4000){
  1193                           
  1194  045F  1283               	bcf	3,5	;RP0=0, select bank0
  1195  0460  1303               	bcf	3,6	;RP1=0, select bank0
  1196  0461  0833               	movf	_totalDistTrav+1,w
  1197  0462  3A80               	xorlw	128
  1198  0463  00FF               	movwf	127
  1199  0464  308F               	movlw	143
  1200  0465  027F               	subwf	127,w
  1201  0466  1D03               	skipz
  1202  0467  2C6A               	goto	u1665
  1203  0468  30A0               	movlw	160
  1204  0469  0232               	subwf	_totalDistTrav,w
  1205  046A                     u1665:	
  1206  046A  1803               	btfsc	3,0
  1207  046B  2C98               	goto	l2083
  1208                           
  1209                           ;main.c: 117: distTrav = getSensorData(19,2);
  1210  046C  3002               	movlw	2
  1211  046D  1283               	bcf	3,5	;RP0=0, select bank0
  1212  046E  1303               	bcf	3,6	;RP1=0, select bank0
  1213  046F  00E6               	movwf	??_main
  1214  0470  0866               	movf	??_main,w
  1215  0471  00C9               	movwf	getSensorData@bytes
  1216  0472  3013               	movlw	19
  1217  0473  120A  118A  27BE  120A  118A  	fcall	_getSensorData
  1218  0478  1283               	bcf	3,5	;RP0=0, select bank0
  1219  0479  1303               	bcf	3,6	;RP1=0, select bank0
  1220  047A  084A               	movf	?_getSensorData+1,w
  1221  047B  00A9               	movwf	_distTrav+1
  1222  047C  0849               	movf	?_getSensorData,w
  1223  047D  00A8               	movwf	_distTrav
  1224                           
  1225                           ;main.c: 118: totalDistTrav = (totalDistTrav + distTrav);
  1226  047E  0828               	movf	_distTrav,w
  1227  047F  0732               	addwf	_totalDistTrav,w
  1228  0480  00B2               	movwf	_totalDistTrav
  1229  0481  0829               	movf	_distTrav+1,w
  1230  0482  1803               	skipnc
  1231  0483  0A29               	incf	_distTrav+1,w
  1232  0484  0733               	addwf	_totalDistTrav+1,w
  1233  0485  00B3               	movwf	_totalDistTrav+1
  1234                           
  1235                           ;main.c: 119: lcdSetCursor(0x00);
  1236  0486  3000               	movlw	0
  1237  0487  120A  158A  2642  120A  118A  	fcall	_lcdSetCursor
  1238                           
  1239                           ;main.c: 120: lcdWriteToDigitBCD(totalDistTrav);
  1240  048C  1283               	bcf	3,5	;RP0=0, select bank0
  1241  048D  1303               	bcf	3,6	;RP1=0, select bank0
  1242  048E  0833               	movf	_totalDistTrav+1,w
  1243  048F  00CB               	movwf	lcdWriteToDigitBCD@data+1
  1244  0490  0832               	movf	_totalDistTrav,w
  1245  0491  00CA               	movwf	lcdWriteToDigitBCD@data
  1246  0492  120A  118A  257A  120A  118A  	fcall	_lcdWriteToDigitBCD
  1247  0497  2C5F               	goto	l2081
  1248  0498                     l2083:	
  1249                           
  1250                           ;main.c: 121: }
  1251                           ;main.c: 123: DriveDirect(0,0,0,0);
  1252  0498  1283               	bcf	3,5	;RP0=0, select bank0
  1253  0499  1303               	bcf	3,6	;RP1=0, select bank0
  1254  049A  01C8               	clrf	DriveDirect@RightSpeedL
  1255  049B  01C9               	clrf	DriveDirect@LeftSpeedH
  1256  049C  01CA               	clrf	DriveDirect@LeftSpeedL
  1257  049D  3000               	movlw	0
  1258  049E  120A  158A  273F  120A  118A  	fcall	_DriveDirect
  1259  04A3                     l2085:	
  1260                           
  1261                           ;main.c: 125: }
  1262                           ;main.c: 128: if (getSensorData(18,1) == 0b00000100){
  1263  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  1264  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  1265  04A5  01C9               	clrf	getSensorData@bytes
  1266  04A6  0AC9               	incf	getSensorData@bytes,f
  1267  04A7  3012               	movlw	18
  1268  04A8  120A  118A  27BE  120A  118A  	fcall	_getSensorData
  1269  04AD  3004               	movlw	4
  1270  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  1271  04AF  1303               	bcf	3,6	;RP1=0, select bank0
  1272  04B0  0649               	xorwf	?_getSensorData,w
  1273  04B1  044A               	iorwf	?_getSensorData+1,w
  1274  04B2  1D03               	btfss	3,2
  1275  04B3  2D6F               	goto	l2123
  1276                           
  1277                           ;main.c: 130: totalDistTrav = 0;
  1278  04B4  01B2               	clrf	_totalDistTrav
  1279  04B5  01B3               	clrf	_totalDistTrav+1
  1280                           
  1281                           ;main.c: 132: for (loop = 0; loop < 4; loop++){
  1282  04B6  01AA               	clrf	_loop
  1283  04B7  01AB               	clrf	_loop+1
  1284  04B8  2D59               	goto	L1
  1285  04B9                     l2099:	
  1286  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  1287  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  1288  04BB  0835               	movf	_totalangleTurned+1,w
  1289  04BC  3A80               	xorlw	128
  1290  04BD  00FF               	movwf	127
  1291  04BE  307F               	movlw	127
  1292  04BF  027F               	subwf	127,w
  1293  04C0  1D03               	skipz
  1294  04C1  2CC4               	goto	u1695
  1295  04C2  30AC               	movlw	172
  1296  04C3  0234               	subwf	_totalangleTurned,w
  1297  04C4                     u1695:	
  1298  04C4  1C03               	btfss	3,0
  1299  04C5  2CF5               	goto	l2101
  1300                           
  1301                           ;main.c: 135: Drive(0,250,0xFF,0xFF);
  1302                           
  1303                           ;main.c: 134: while (totalangleTurned > -85){
  1304  04C6  30FA               	movlw	250
  1305  04C7  1283               	bcf	3,5	;RP0=0, select bank0
  1306  04C8  1303               	bcf	3,6	;RP1=0, select bank0
  1307  04C9  00E6               	movwf	??_main
  1308  04CA  0866               	movf	??_main,w
  1309  04CB  00C8               	movwf	Drive@speedL
  1310  04CC  30FF               	movlw	255
  1311  04CD  00E7               	movwf	??_main+1
  1312  04CE  0867               	movf	??_main+1,w
  1313  04CF  00C9               	movwf	Drive@radH
  1314  04D0  30FF               	movlw	255
  1315  04D1  00E8               	movwf	??_main+2
  1316  04D2  0868               	movf	??_main+2,w
  1317  04D3  00CA               	movwf	Drive@radL
  1318  04D4  3000               	movlw	0
  1319  04D5  120A  158A  2717  120A  118A  	fcall	_Drive
  1320                           
  1321                           ;main.c: 136: angleTurned = getSensorData(20,2);
  1322  04DA  3002               	movlw	2
  1323  04DB  1283               	bcf	3,5	;RP0=0, select bank0
  1324  04DC  1303               	bcf	3,6	;RP1=0, select bank0
  1325  04DD  00E6               	movwf	??_main
  1326  04DE  0866               	movf	??_main,w
  1327  04DF  00C9               	movwf	getSensorData@bytes
  1328  04E0  3014               	movlw	20
  1329  04E1  120A  118A  27BE  120A  118A  	fcall	_getSensorData
  1330  04E6  1283               	bcf	3,5	;RP0=0, select bank0
  1331  04E7  1303               	bcf	3,6	;RP1=0, select bank0
  1332  04E8  084A               	movf	?_getSensorData+1,w
  1333  04E9  00A5               	movwf	_angleTurned+1
  1334  04EA  0849               	movf	?_getSensorData,w
  1335  04EB  00A4               	movwf	_angleTurned
  1336                           
  1337                           ;main.c: 137: totalangleTurned = (totalangleTurned + angleTurned);
  1338  04EC  0824               	movf	_angleTurned,w
  1339  04ED  0734               	addwf	_totalangleTurned,w
  1340  04EE  00B4               	movwf	_totalangleTurned
  1341  04EF  0825               	movf	_angleTurned+1,w
  1342  04F0  1803               	skipnc
  1343  04F1  0A25               	incf	_angleTurned+1,w
  1344  04F2  0735               	addwf	_totalangleTurned+1,w
  1345  04F3  00B5               	movwf	_totalangleTurned+1
  1346  04F4  2CB9               	goto	l2099
  1347  04F5                     l2101:	
  1348                           
  1349                           ;main.c: 138: }
  1350                           ;main.c: 139: totalangleTurned = 0;
  1351  04F5  1283               	bcf	3,5	;RP0=0, select bank0
  1352  04F6  1303               	bcf	3,6	;RP1=0, select bank0
  1353  04F7  01B4               	clrf	_totalangleTurned
  1354  04F8  01B5               	clrf	_totalangleTurned+1
  1355                           
  1356                           ;main.c: 140: angleTurned = 0;
  1357  04F9  01A4               	clrf	_angleTurned
  1358  04FA  01A5               	clrf	_angleTurned+1
  1359                           
  1360                           ;main.c: 141: Drive(0,250,0x7F,0xFF);
  1361  04FB  30FA               	movlw	250
  1362  04FC  00E6               	movwf	??_main
  1363  04FD  0866               	movf	??_main,w
  1364  04FE  00C8               	movwf	Drive@speedL
  1365  04FF  307F               	movlw	127
  1366  0500  00E7               	movwf	??_main+1
  1367  0501  0867               	movf	??_main+1,w
  1368  0502  00C9               	movwf	Drive@radH
  1369  0503  30FF               	movlw	255
  1370  0504  00E8               	movwf	??_main+2
  1371  0505  0868               	movf	??_main+2,w
  1372  0506  00CA               	movwf	Drive@radL
  1373  0507  3000               	movlw	0
  1374  0508  120A  158A  2717  120A  118A  	fcall	_Drive
  1375  050D                     l2113:	
  1376                           ;main.c: 143: while (totalDistTrav < 1000){
  1377                           
  1378  050D  1283               	bcf	3,5	;RP0=0, select bank0
  1379  050E  1303               	bcf	3,6	;RP1=0, select bank0
  1380  050F  0833               	movf	_totalDistTrav+1,w
  1381  0510  3A80               	xorlw	128
  1382  0511  00FF               	movwf	127
  1383  0512  3083               	movlw	131
  1384  0513  027F               	subwf	127,w
  1385  0514  1D03               	skipz
  1386  0515  2D18               	goto	u1705
  1387  0516  30E8               	movlw	232
  1388  0517  0232               	subwf	_totalDistTrav,w
  1389  0518                     u1705:	
  1390  0518  1803               	btfsc	3,0
  1391  0519  2D46               	goto	l2115
  1392                           
  1393                           ;main.c: 144: distTrav = getSensorData(19,2);
  1394  051A  3002               	movlw	2
  1395  051B  1283               	bcf	3,5	;RP0=0, select bank0
  1396  051C  1303               	bcf	3,6	;RP1=0, select bank0
  1397  051D  00E6               	movwf	??_main
  1398  051E  0866               	movf	??_main,w
  1399  051F  00C9               	movwf	getSensorData@bytes
  1400  0520  3013               	movlw	19
  1401  0521  120A  118A  27BE  120A  118A  	fcall	_getSensorData
  1402  0526  1283               	bcf	3,5	;RP0=0, select bank0
  1403  0527  1303               	bcf	3,6	;RP1=0, select bank0
  1404  0528  084A               	movf	?_getSensorData+1,w
  1405  0529  00A9               	movwf	_distTrav+1
  1406  052A  0849               	movf	?_getSensorData,w
  1407  052B  00A8               	movwf	_distTrav
  1408                           
  1409                           ;main.c: 145: totalDistTrav = (totalDistTrav + distTrav);
  1410  052C  0828               	movf	_distTrav,w
  1411  052D  0732               	addwf	_totalDistTrav,w
  1412  052E  00B2               	movwf	_totalDistTrav
  1413  052F  0829               	movf	_distTrav+1,w
  1414  0530  1803               	skipnc
  1415  0531  0A29               	incf	_distTrav+1,w
  1416  0532  0733               	addwf	_totalDistTrav+1,w
  1417  0533  00B3               	movwf	_totalDistTrav+1
  1418                           
  1419                           ;main.c: 146: lcdSetCursor(0x00);
  1420  0534  3000               	movlw	0
  1421  0535  120A  158A  2642  120A  118A  	fcall	_lcdSetCursor
  1422                           
  1423                           ;main.c: 147: lcdWriteToDigitBCD(totalDistTrav);
  1424  053A  1283               	bcf	3,5	;RP0=0, select bank0
  1425  053B  1303               	bcf	3,6	;RP1=0, select bank0
  1426  053C  0833               	movf	_totalDistTrav+1,w
  1427  053D  00CB               	movwf	lcdWriteToDigitBCD@data+1
  1428  053E  0832               	movf	_totalDistTrav,w
  1429  053F  00CA               	movwf	lcdWriteToDigitBCD@data
  1430  0540  120A  118A  257A  120A  118A  	fcall	_lcdWriteToDigitBCD
  1431  0545  2D0D               	goto	l2113
  1432  0546                     l2115:	
  1433                           
  1434                           ;main.c: 148: }
  1435                           ;main.c: 149: DriveDirect(0,0,0,0);
  1436  0546  1283               	bcf	3,5	;RP0=0, select bank0
  1437  0547  1303               	bcf	3,6	;RP1=0, select bank0
  1438  0548  01C8               	clrf	DriveDirect@RightSpeedL
  1439  0549  01C9               	clrf	DriveDirect@LeftSpeedH
  1440  054A  01CA               	clrf	DriveDirect@LeftSpeedL
  1441  054B  3000               	movlw	0
  1442  054C  120A  158A  273F  120A  118A  	fcall	_DriveDirect
  1443  0551  3001               	movlw	1
  1444  0552  1283               	bcf	3,5	;RP0=0, select bank0
  1445  0553  1303               	bcf	3,6	;RP1=0, select bank0
  1446  0554  07AA               	addwf	_loop,f
  1447  0555  1803               	skipnc
  1448  0556  0AAB               	incf	_loop+1,f
  1449  0557  3000               	movlw	0
  1450  0558  07AB               	addwf	_loop+1,f
  1451  0559                     L1:	
  1452  0559  082B               	movf	_loop+1,w
  1453  055A  3A80               	xorlw	128
  1454  055B  00FF               	movwf	127
  1455  055C  3080               	movlw	128
  1456  055D  027F               	subwf	127,w
  1457  055E  1D03               	skipz
  1458  055F  2D62               	goto	u1715
  1459  0560  3004               	movlw	4
  1460  0561  022A               	subwf	_loop,w
  1461  0562                     u1715:	
  1462  0562  1C03               	skipc
  1463  0563  2CB9               	goto	l2099
  1464                           
  1465                           ;main.c: 151: }
  1466                           ;main.c: 153: DriveDirect(0,0,0,0);
  1467  0564  1283               	bcf	3,5	;RP0=0, select bank0
  1468  0565  1303               	bcf	3,6	;RP1=0, select bank0
  1469  0566  01C8               	clrf	DriveDirect@RightSpeedL
  1470  0567  01C9               	clrf	DriveDirect@LeftSpeedH
  1471  0568  01CA               	clrf	DriveDirect@LeftSpeedL
  1472  0569  3000               	movlw	0
  1473  056A  120A  158A  273F  120A  118A  	fcall	_DriveDirect
  1474  056F                     l2123:	
  1475                           
  1476                           ;main.c: 155: }
  1477                           ;main.c: 158: if(getSensorData(18,1) == 0b00000101){
  1478  056F  1283               	bcf	3,5	;RP0=0, select bank0
  1479  0570  1303               	bcf	3,6	;RP1=0, select bank0
  1480  0571  01C9               	clrf	getSensorData@bytes
  1481  0572  0AC9               	incf	getSensorData@bytes,f
  1482  0573  3012               	movlw	18
  1483  0574  120A  118A  27BE  120A  118A  	fcall	_getSensorData
  1484  0579  2BE0               	goto	l2037
  1485  057A                     __end_of_main:	
  1486                           
  1487                           	psect	text1
  1488  0E70                     __ptext1:	
  1489 ;; *************** function _spi_transfer *****************
  1490 ;; Defined at:
  1491 ;;		line 23 in file "SPI.c"
  1492 ;; Parameters:    Size  Location     Type
  1493 ;;  data            1    wreg     unsigned char 
  1494 ;; Auto vars:     Size  Location     Type
  1495 ;;  data            1    2[BANK0 ] unsigned char 
  1496 ;;  temp            1    1[BANK0 ] unsigned char 
  1497 ;; Return value:  Size  Location     Type
  1498 ;;                  1    wreg      unsigned char 
  1499 ;; Registers used:
  1500 ;;		wreg, status,2
  1501 ;; Tracked objects:
  1502 ;;		On entry : 0/0
  1503 ;;		On exit  : 0/0
  1504 ;;		Unchanged: 0/0
  1505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1506 ;;      Params:         0       0       0       0       0
  1507 ;;      Locals:         0       2       0       0       0
  1508 ;;      Temps:          0       1       0       0       0
  1509 ;;      Totals:         0       3       0       0       0
  1510 ;;Total ram usage:        3 bytes
  1511 ;; Hardware stack levels used:    1
  1512 ;; Hardware stack levels required when called:    2
  1513 ;; This function calls:
  1514 ;;		Nothing
  1515 ;; This function is called by:
  1516 ;;		_main
  1517 ;; This function uses a non-reentrant model
  1518 ;;
  1519                           
  1520                           
  1521                           ;psect for function _spi_transfer
  1522  0E70                     _spi_transfer:	
  1523                           
  1524                           ;incstack = 0
  1525                           ; Regs used in _spi_transfer: [wreg+status,2]
  1526                           ;spi_transfer@data stored from wreg
  1527  0E70  1283               	bcf	3,5	;RP0=0, select bank0
  1528  0E71  1303               	bcf	3,6	;RP1=0, select bank0
  1529  0E72  00C9               	movwf	spi_transfer@data
  1530                           
  1531                           ;SPI.c: 24: unsigned char temp = 0;
  1532  0E73  01C8               	clrf	spi_transfer@temp
  1533                           
  1534                           ;SPI.c: 26: SSPIF = 0;
  1535  0E74  118C               	bcf	12,3	;volatile
  1536                           
  1537                           ;SPI.c: 27: SSPBUF = data;
  1538  0E75  0849               	movf	spi_transfer@data,w
  1539  0E76  0093               	movwf	19	;volatile
  1540  0E77                     l265:	
  1541                           ;SPI.c: 29: while (SSPIF == 0);
  1542                           
  1543  0E77  1D8C               	btfss	12,3	;volatile
  1544  0E78  2E77               	goto	l265
  1545                           
  1546                           ;SPI.c: 30: temp = SSPBUF;
  1547  0E79  0813               	movf	19,w	;volatile
  1548  0E7A  00C7               	movwf	??_spi_transfer
  1549  0E7B  0847               	movf	??_spi_transfer,w
  1550  0E7C  00C8               	movwf	spi_transfer@temp
  1551                           
  1552                           ;SPI.c: 31: SSPIF = 0;
  1553  0E7D  118C               	bcf	12,3	;volatile
  1554  0E7E  0008               	return
  1555  0E7F                     __end_of_spi_transfer:	
  1556                           ;SPI.c: 33: return temp;
  1557                           ;	Return value of _spi_transfer is never used
  1558                           
  1559                           
  1560                           	psect	text2
  1561  0EBC                     __ptext2:	
  1562 ;; *************** function _setupSPI *****************
  1563 ;; Defined at:
  1564 ;;		line 4 in file "SPI.c"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;		None
  1567 ;; Auto vars:     Size  Location     Type
  1568 ;;		None
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  1    wreg      void 
  1571 ;; Registers used:
  1572 ;;		wreg, status,2
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1578 ;;      Params:         0       0       0       0       0
  1579 ;;      Locals:         0       0       0       0       0
  1580 ;;      Temps:          0       0       0       0       0
  1581 ;;      Totals:         0       0       0       0       0
  1582 ;;Total ram usage:        0 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; Hardware stack levels required when called:    2
  1585 ;; This function calls:
  1586 ;;		Nothing
  1587 ;; This function is called by:
  1588 ;;		_main
  1589 ;; This function uses a non-reentrant model
  1590 ;;
  1591                           
  1592                           
  1593                           ;psect for function _setupSPI
  1594  0EBC                     _setupSPI:	
  1595                           
  1596                           ;SPI.c: 6: TRISB = 0b00000000;
  1597                           
  1598                           ;incstack = 0
  1599                           ; Regs used in _setupSPI: [wreg+status,2]
  1600  0EBC  1683               	bsf	3,5	;RP0=1, select bank1
  1601  0EBD  1303               	bcf	3,6	;RP1=0, select bank1
  1602  0EBE  0186               	clrf	6	;volatile
  1603                           
  1604                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  1605  0EBF  3040               	movlw	64
  1606  0EC0  0094               	movwf	20	;volatile
  1607                           
  1608                           ;SPI.c: 9: SSPCON = 0b00100000;
  1609  0EC1  3020               	movlw	32
  1610  0EC2  1283               	bcf	3,5	;RP0=0, select bank0
  1611  0EC3  1303               	bcf	3,6	;RP1=0, select bank0
  1612  0EC4  0094               	movwf	20	;volatile
  1613                           
  1614                           ;SPI.c: 10: TRISC = 0b11010000;
  1615  0EC5  30D0               	movlw	208
  1616  0EC6  1683               	bsf	3,5	;RP0=1, select bank1
  1617  0EC7  1303               	bcf	3,6	;RP1=0, select bank1
  1618  0EC8  0087               	movwf	7	;volatile
  1619                           
  1620                           ;SPI.c: 11: PORTC = 0b00000011;
  1621  0EC9  3003               	movlw	3
  1622  0ECA  1283               	bcf	3,5	;RP0=0, select bank0
  1623  0ECB  1303               	bcf	3,6	;RP1=0, select bank0
  1624  0ECC  0087               	movwf	7	;volatile
  1625                           
  1626                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  1627  0ECD  3004               	movlw	4
  1628  0ECE  1683               	bsf	3,5	;RP0=1, select bank1
  1629  0ECF  1303               	bcf	3,6	;RP1=0, select bank1
  1630  0ED0  0081               	movwf	1	;volatile
  1631                           
  1632                           ;SPI.c: 16: TMR0IE = 1;
  1633  0ED1  168B               	bsf	11,5	;volatile
  1634                           
  1635                           ;SPI.c: 19: (GIE = 1);
  1636  0ED2  178B               	bsf	11,7	;volatile
  1637  0ED3  0008               	return
  1638  0ED4                     __end_of_setupSPI:	
  1639                           
  1640                           	psect	text3
  1641  0F67                     __ptext3:	
  1642 ;; *************** function _setupLCD *****************
  1643 ;; Defined at:
  1644 ;;		line 86 in file "LCD.c"
  1645 ;; Parameters:    Size  Location     Type
  1646 ;;		None
  1647 ;; Auto vars:     Size  Location     Type
  1648 ;;		None
  1649 ;; Return value:  Size  Location     Type
  1650 ;;                  1    wreg      void 
  1651 ;; Registers used:
  1652 ;;		wreg, status,2, status,0, pclath, cstack
  1653 ;; Tracked objects:
  1654 ;;		On entry : 0/0
  1655 ;;		On exit  : 0/0
  1656 ;;		Unchanged: 0/0
  1657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1658 ;;      Params:         0       0       0       0       0
  1659 ;;      Locals:         0       0       0       0       0
  1660 ;;      Temps:          0       0       0       0       0
  1661 ;;      Totals:         0       0       0       0       0
  1662 ;;Total ram usage:        0 bytes
  1663 ;; Hardware stack levels used:    1
  1664 ;; Hardware stack levels required when called:    3
  1665 ;; This function calls:
  1666 ;;		_lcdWriteControl
  1667 ;; This function is called by:
  1668 ;;		_main
  1669 ;; This function uses a non-reentrant model
  1670 ;;
  1671                           
  1672                           
  1673                           ;psect for function _setupLCD
  1674  0F67                     _setupLCD:	
  1675                           
  1676                           ;LCD.c: 88: ADCON1 = 0b00000010;
  1677                           
  1678                           ;incstack = 0
  1679                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  1680  0F67  3002               	movlw	2
  1681  0F68  1683               	bsf	3,5	;RP0=1, select bank1
  1682  0F69  1303               	bcf	3,6	;RP1=0, select bank1
  1683  0F6A  009F               	movwf	31	;volatile
  1684                           
  1685                           ;LCD.c: 90: PORTD = 0;
  1686  0F6B  1283               	bcf	3,5	;RP0=0, select bank0
  1687  0F6C  1303               	bcf	3,6	;RP1=0, select bank0
  1688  0F6D  0188               	clrf	8	;volatile
  1689                           
  1690                           ;LCD.c: 91: PORTE = 0;
  1691  0F6E  0189               	clrf	9	;volatile
  1692                           
  1693                           ;LCD.c: 93: TRISD = 0b00000000;
  1694  0F6F  1683               	bsf	3,5	;RP0=1, select bank1
  1695  0F70  1303               	bcf	3,6	;RP1=0, select bank1
  1696  0F71  0188               	clrf	8	;volatile
  1697                           
  1698                           ;LCD.c: 94: TRISE = 0b00000000;
  1699  0F72  0189               	clrf	9	;volatile
  1700                           
  1701                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  1702  0F73  3001               	movlw	1
  1703  0F74  120A  158A  2692  120A  158A  	fcall	_lcdWriteControl
  1704                           
  1705                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  1706  0F79  3038               	movlw	56
  1707  0F7A  120A  158A  2692  120A  158A  	fcall	_lcdWriteControl
  1708                           
  1709                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  1710  0F7F  300C               	movlw	12
  1711  0F80  120A  158A  2692  120A  158A  	fcall	_lcdWriteControl
  1712                           
  1713                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  1714  0F85  3006               	movlw	6
  1715  0F86  120A  158A  2692  120A  158A  	fcall	_lcdWriteControl
  1716                           
  1717                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  1718  0F8B  3002               	movlw	2
  1719  0F8C  120A  158A  2692   	fcall	_lcdWriteControl
  1720  0F8F  0008               	return
  1721  0F90                     __end_of_setupLCD:	
  1722                           
  1723                           	psect	text4
  1724  0EA6                     __ptext4:	
  1725 ;; *************** function _setupADC *****************
  1726 ;; Defined at:
  1727 ;;		line 8 in file "ADC.c"
  1728 ;; Parameters:    Size  Location     Type
  1729 ;;		None
  1730 ;; Auto vars:     Size  Location     Type
  1731 ;;		None
  1732 ;; Return value:  Size  Location     Type
  1733 ;;                  1    wreg      void 
  1734 ;; Registers used:
  1735 ;;		wreg, status,2
  1736 ;; Tracked objects:
  1737 ;;		On entry : 0/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1741 ;;      Params:         0       0       0       0       0
  1742 ;;      Locals:         0       0       0       0       0
  1743 ;;      Temps:          0       1       0       0       0
  1744 ;;      Totals:         0       1       0       0       0
  1745 ;;Total ram usage:        1 bytes
  1746 ;; Hardware stack levels used:    1
  1747 ;; Hardware stack levels required when called:    2
  1748 ;; This function calls:
  1749 ;;		Nothing
  1750 ;; This function is called by:
  1751 ;;		_main
  1752 ;; This function uses a non-reentrant model
  1753 ;;
  1754                           
  1755                           
  1756                           ;psect for function _setupADC
  1757  0EA6                     _setupADC:	
  1758                           
  1759                           ;ADC.c: 9: PORTA = 0;
  1760                           
  1761                           ;incstack = 0
  1762                           ; Regs used in _setupADC: [wreg+status,2]
  1763  0EA6  1283               	bcf	3,5	;RP0=0, select bank0
  1764  0EA7  1303               	bcf	3,6	;RP1=0, select bank0
  1765  0EA8  0185               	clrf	5	;volatile
  1766                           
  1767                           ;ADC.c: 10: TRISA = 0b11111111;
  1768  0EA9  30FF               	movlw	255
  1769  0EAA  1683               	bsf	3,5	;RP0=1, select bank1
  1770  0EAB  1303               	bcf	3,6	;RP1=0, select bank1
  1771  0EAC  0085               	movwf	5	;volatile
  1772                           
  1773                           ;ADC.c: 13: ADCON0 = 0b10001001;
  1774  0EAD  3089               	movlw	137
  1775  0EAE  1283               	bcf	3,5	;RP0=0, select bank0
  1776  0EAF  1303               	bcf	3,6	;RP1=0, select bank0
  1777  0EB0  009F               	movwf	31	;volatile
  1778                           
  1779                           ;ADC.c: 14: ADCON1 = 0b00000010;
  1780  0EB1  3002               	movlw	2
  1781  0EB2  1683               	bsf	3,5	;RP0=1, select bank1
  1782  0EB3  1303               	bcf	3,6	;RP1=0, select bank1
  1783  0EB4  009F               	movwf	31	;volatile
  1784                           
  1785                           ;ADC.c: 16: _delay((unsigned long)((50)*(20000000/4000000.0)));
  1786  0EB5  3053               	movlw	83
  1787  0EB6  1283               	bcf	3,5	;RP0=0, select bank0
  1788  0EB7  1303               	bcf	3,6	;RP1=0, select bank0
  1789  0EB8  00C7               	movwf	??_setupADC
  1790  0EB9                     u1777:	
  1791  0EB9  0BC7               	decfsz	??_setupADC,f
  1792  0EBA  2EB9               	goto	u1777
  1793  0EBB  0008               	return
  1794  0EBC                     __end_of_setupADC:	
  1795                           
  1796                           	psect	text5
  1797  0E61                     __ptext5:	
  1798 ;; *************** function _ser_init *****************
  1799 ;; Defined at:
  1800 ;;		line 5 in file "ser.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;		None
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;		None
  1805 ;; Return value:  Size  Location     Type
  1806 ;;                  1    wreg      void 
  1807 ;; Registers used:
  1808 ;;		wreg
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1814 ;;      Params:         0       0       0       0       0
  1815 ;;      Locals:         0       0       0       0       0
  1816 ;;      Temps:          0       0       0       0       0
  1817 ;;      Totals:         0       0       0       0       0
  1818 ;;Total ram usage:        0 bytes
  1819 ;; Hardware stack levels used:    1
  1820 ;; Hardware stack levels required when called:    2
  1821 ;; This function calls:
  1822 ;;		Nothing
  1823 ;; This function is called by:
  1824 ;;		_main
  1825 ;; This function uses a non-reentrant model
  1826 ;;
  1827                           
  1828                           
  1829                           ;psect for function _ser_init
  1830  0E61                     _ser_init:	
  1831                           
  1832                           ;ser.c: 7: TXSTA = 0b00100100;
  1833                           
  1834                           ;incstack = 0
  1835                           ; Regs used in _ser_init: [wreg]
  1836  0E61  3024               	movlw	36
  1837  0E62  1683               	bsf	3,5	;RP0=1, select bank1
  1838  0E63  1303               	bcf	3,6	;RP1=0, select bank1
  1839  0E64  0098               	movwf	24	;volatile
  1840                           
  1841                           ;ser.c: 8: RCSTA = 0b10011000;
  1842  0E65  3098               	movlw	152
  1843  0E66  1283               	bcf	3,5	;RP0=0, select bank0
  1844  0E67  1303               	bcf	3,6	;RP1=0, select bank0
  1845  0E68  0098               	movwf	24	;volatile
  1846                           
  1847                           ;ser.c: 24: SPBRG = 20;
  1848  0E69  3014               	movlw	20
  1849  0E6A  1683               	bsf	3,5	;RP0=1, select bank1
  1850  0E6B  1303               	bcf	3,6	;RP1=0, select bank1
  1851  0E6C  0099               	movwf	25	;volatile
  1852                           
  1853                           ;ser.c: 26: PEIE = 1;
  1854  0E6D  170B               	bsf	11,6	;volatile
  1855                           
  1856                           ;ser.c: 27: (GIE = 1);
  1857  0E6E  178B               	bsf	11,7	;volatile
  1858  0E6F  0008               	return
  1859  0E70                     __end_of_ser_init:	
  1860                           
  1861                           	psect	text6
  1862  06A0                     __ptext6:	
  1863 ;; *************** function _moveCW *****************
  1864 ;; Defined at:
  1865 ;;		line 5 in file "motor.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;		None
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;		None
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  1    wreg      void 
  1872 ;; Registers used:
  1873 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1879 ;;      Params:         0       0       0       0       0
  1880 ;;      Locals:         0       0       0       0       0
  1881 ;;      Temps:          0       2       0       0       0
  1882 ;;      Totals:         0       2       0       0       0
  1883 ;;Total ram usage:        2 bytes
  1884 ;; Hardware stack levels used:    1
  1885 ;; Hardware stack levels required when called:    2
  1886 ;; This function calls:
  1887 ;;		Nothing
  1888 ;; This function is called by:
  1889 ;;		_main
  1890 ;; This function uses a non-reentrant model
  1891 ;;
  1892                           
  1893                           
  1894                           ;psect for function _moveCW
  1895  06A0                     _moveCW:	
  1896                           
  1897                           ;motor.c: 8: if (stepCount == 0) negativeFlag = 1;
  1898                           
  1899                           ;incstack = 0
  1900                           ; Regs used in _moveCW: [wreg-fsr0h+status,2+status,0]
  1901  06A0  1283               	bcf	3,5	;RP0=0, select bank0
  1902  06A1  1303               	bcf	3,6	;RP1=0, select bank0
  1903  06A2  0845               	movf	_stepCount,w
  1904  06A3  1D03               	btfss	3,2
  1905  06A4  2EA7               	goto	l1851
  1906  06A5  01C0               	clrf	_negativeFlag
  1907  06A6  0AC0               	incf	_negativeFlag,f
  1908  06A7                     l1851:	
  1909                           
  1910                           ;motor.c: 10: stepCount--;
  1911  06A7  30FF               	movlw	255
  1912  06A8  00C7               	movwf	??_moveCW
  1913  06A9  0847               	movf	??_moveCW,w
  1914  06AA  07C5               	addwf	_stepCount,f
  1915                           
  1916                           ;motor.c: 13: switch(currentStep){
  1917  06AB  2EC7               	goto	l1887
  1918  06AC                     l1853:	
  1919                           ;motor.c: 15: case 7: PORTC = 0b00011011;
  1920                           
  1921  06AC  301B               	movlw	27
  1922  06AD  2EB9               	goto	L2
  1923  06AE                     l1857:	
  1924                           ;motor.c: 19: case 6: PORTC = 0b00010111;
  1925                           
  1926                           ;motor.c: 17: break;
  1927                           
  1928                           ;motor.c: 16: currentStep--;
  1929                           
  1930  06AE  3017               	movlw	23
  1931  06AF  2EB9               	goto	L2
  1932  06B0                     l1861:	
  1933                           ;motor.c: 23: case 5: PORTC = 0b00110101;
  1934                           
  1935                           ;motor.c: 21: break;
  1936                           
  1937                           ;motor.c: 20: currentStep--;
  1938                           
  1939  06B0  3035               	movlw	53
  1940  06B1  2EB9               	goto	L2
  1941  06B2                     l1865:	
  1942                           ;motor.c: 27: case 4: PORTC = 0b00100111;
  1943                           
  1944                           ;motor.c: 25: break;
  1945                           
  1946                           ;motor.c: 24: currentStep--;
  1947                           
  1948  06B2  3027               	movlw	39
  1949  06B3  2EB9               	goto	L2
  1950  06B4                     l1869:	
  1951                           ;motor.c: 31: case 3: PORTC = 0b00101011;
  1952                           
  1953                           ;motor.c: 29: break;
  1954                           
  1955                           ;motor.c: 28: currentStep--;
  1956                           
  1957  06B4  302B               	movlw	43
  1958  06B5  2EB9               	goto	L2
  1959  06B6                     l1873:	
  1960                           ;motor.c: 35: case 2: PORTC = 0b00101110;
  1961                           
  1962                           ;motor.c: 33: break;
  1963                           
  1964                           ;motor.c: 32: currentStep--;
  1965                           
  1966  06B6  302E               	movlw	46
  1967  06B7  2EB9               	goto	L2
  1968  06B8                     l1877:	
  1969                           ;motor.c: 39: case 1: PORTC = 0b00111100;
  1970                           
  1971                           ;motor.c: 37: break;
  1972                           
  1973                           ;motor.c: 36: currentStep--;
  1974                           
  1975  06B8  303C               	movlw	60
  1976  06B9                     L2:	
  1977  06B9  0087               	movwf	7	;volatile
  1978                           
  1979                           ;motor.c: 40: currentStep--;
  1980  06BA  3001               	movlw	1
  1981  06BB  02FB               	subwf	_currentStep,f
  1982                           
  1983                           ;motor.c: 41: break;
  1984  06BC  2EE1               	goto	l1889
  1985  06BD                     l1881:	
  1986                           ;motor.c: 43: case 0: PORTC = 0b00011110;
  1987                           
  1988  06BD  301E               	movlw	30
  1989  06BE  0087               	movwf	7	;volatile
  1990                           
  1991                           ;motor.c: 44: currentStep = 7;
  1992  06BF  3007               	movlw	7
  1993  06C0  00C7               	movwf	??_moveCW
  1994  06C1  0847               	movf	??_moveCW,w
  1995  06C2  00FB               	movwf	_currentStep
  1996                           
  1997                           ;motor.c: 45: break;
  1998  06C3  2EE1               	goto	l1889
  1999  06C4                     l1883:	
  2000                           ;motor.c: 47: default: PORTC = 0b00111001;
  2001                           
  2002  06C4  3039               	movlw	57
  2003  06C5  0087               	movwf	7	;volatile
  2004                           
  2005                           ;motor.c: 49: }
  2006                           
  2007                           ;motor.c: 48: break;
  2008  06C6  2EE1               	goto	l1889
  2009  06C7                     l1887:	
  2010  06C7  087B               	movf	_currentStep,w
  2011                           
  2012                           ; Switch size 1, requested type "space"
  2013                           ; Number of cases is 8, Range of values is 0 to 7
  2014                           ; switch strategies available:
  2015                           ; Name         Instructions Cycles
  2016                           ; simple_byte           25    13 (average)
  2017                           ; direct_byte           32     8 (fixed)
  2018                           ; jumptable            260     6 (fixed)
  2019                           ;	Chosen strategy is simple_byte
  2020  06C8  3A00               	xorlw	0	; case 0
  2021  06C9  1903               	skipnz
  2022  06CA  2EBD               	goto	l1881
  2023  06CB  3A01               	xorlw	1	; case 1
  2024  06CC  1903               	skipnz
  2025  06CD  2EB8               	goto	l1877
  2026  06CE  3A03               	xorlw	3	; case 2
  2027  06CF  1903               	skipnz
  2028  06D0  2EB6               	goto	l1873
  2029  06D1  3A01               	xorlw	1	; case 3
  2030  06D2  1903               	skipnz
  2031  06D3  2EB4               	goto	l1869
  2032  06D4  3A07               	xorlw	7	; case 4
  2033  06D5  1903               	skipnz
  2034  06D6  2EB2               	goto	l1865
  2035  06D7  3A01               	xorlw	1	; case 5
  2036  06D8  1903               	skipnz
  2037  06D9  2EB0               	goto	l1861
  2038  06DA  3A03               	xorlw	3	; case 6
  2039  06DB  1903               	skipnz
  2040  06DC  2EAE               	goto	l1857
  2041  06DD  3A01               	xorlw	1	; case 7
  2042  06DE  1903               	skipnz
  2043  06DF  2EAC               	goto	l1853
  2044  06E0  2EC4               	goto	l1883
  2045  06E1                     l1889:	
  2046                           
  2047                           ;motor.c: 51: _delay((unsigned long)((3)*(20000000/4000.0)));
  2048  06E1  3014               	movlw	20
  2049  06E2  00C8               	movwf	??_moveCW+1
  2050  06E3  3079               	movlw	121
  2051  06E4  00C7               	movwf	??_moveCW
  2052  06E5                     u1787:	
  2053  06E5  0BC7               	decfsz	??_moveCW,f
  2054  06E6  2EE5               	goto	u1787
  2055  06E7  0BC8               	decfsz	??_moveCW+1,f
  2056  06E8  2EE5               	goto	u1787
  2057  06E9  2EEA               	nop2
  2058  06EA  0008               	return
  2059  06EB                     __end_of_moveCW:	
  2060                           
  2061                           	psect	text7
  2062  06EB                     __ptext7:	
  2063 ;; *************** function _moveCCW *****************
  2064 ;; Defined at:
  2065 ;;		line 55 in file "motor.c"
  2066 ;; Parameters:    Size  Location     Type
  2067 ;;		None
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;		None
  2070 ;; Return value:  Size  Location     Type
  2071 ;;                  1    wreg      void 
  2072 ;; Registers used:
  2073 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2074 ;; Tracked objects:
  2075 ;;		On entry : 0/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2079 ;;      Params:         0       0       0       0       0
  2080 ;;      Locals:         0       0       0       0       0
  2081 ;;      Temps:          0       2       0       0       0
  2082 ;;      Totals:         0       2       0       0       0
  2083 ;;Total ram usage:        2 bytes
  2084 ;; Hardware stack levels used:    1
  2085 ;; Hardware stack levels required when called:    2
  2086 ;; This function calls:
  2087 ;;		Nothing
  2088 ;; This function is called by:
  2089 ;;		_main
  2090 ;; This function uses a non-reentrant model
  2091 ;;
  2092                           
  2093                           
  2094                           ;psect for function _moveCCW
  2095  06EB                     _moveCCW:	
  2096                           
  2097                           ;motor.c: 57: if (stepCount == (-1)) negativeFlag = 0;
  2098                           
  2099                           ;incstack = 0
  2100                           ; Regs used in _moveCCW: [wreg-fsr0h+status,2+status,0]
  2101  06EB  1283               	bcf	3,5	;RP0=0, select bank0
  2102  06EC  1303               	bcf	3,6	;RP1=0, select bank0
  2103  06ED  0A45               	incf	_stepCount,w
  2104  06EE  1903               	btfsc	3,2
  2105  06EF  01C0               	clrf	_negativeFlag
  2106                           
  2107                           ;motor.c: 59: stepCount++;
  2108  06F0  3001               	movlw	1
  2109  06F1  00C7               	movwf	??_moveCCW
  2110  06F2  0847               	movf	??_moveCCW,w
  2111  06F3  07C5               	addwf	_stepCount,f
  2112                           
  2113                           ;motor.c: 62: switch(currentStep){
  2114  06F4  2F0F               	goto	l1941
  2115  06F5                     l1905:	
  2116                           ;motor.c: 63: case 0: PORTC = 0b00101110;
  2117                           
  2118  06F5  302E               	movlw	46
  2119  06F6  2F02               	goto	L3
  2120  06F7                     l1909:	
  2121                           ;motor.c: 67: case 1: PORTC = 0b00101011;
  2122                           
  2123                           ;motor.c: 65: break;
  2124                           
  2125                           ;motor.c: 64: currentStep++;
  2126                           
  2127  06F7  302B               	movlw	43
  2128  06F8  2F02               	goto	L3
  2129  06F9                     l1913:	
  2130                           ;motor.c: 71: case 2: PORTC = 0b00100111;
  2131                           
  2132                           ;motor.c: 69: break;
  2133                           
  2134                           ;motor.c: 68: currentStep++;
  2135                           
  2136  06F9  3027               	movlw	39
  2137  06FA  2F02               	goto	L3
  2138  06FB                     l1917:	
  2139                           ;motor.c: 75: case 3: PORTC = 0b00110101;
  2140                           
  2141                           ;motor.c: 73: break;
  2142                           
  2143                           ;motor.c: 72: currentStep++;
  2144                           
  2145  06FB  3035               	movlw	53
  2146  06FC  2F02               	goto	L3
  2147  06FD                     l1921:	
  2148                           ;motor.c: 79: case 4: PORTC = 0b00010111;
  2149                           
  2150                           ;motor.c: 77: break;
  2151                           
  2152                           ;motor.c: 76: currentStep++;
  2153                           
  2154  06FD  3017               	movlw	23
  2155  06FE  2F02               	goto	L3
  2156  06FF                     l1925:	
  2157                           ;motor.c: 83: case 5: PORTC = 0b00011011;
  2158                           
  2159                           ;motor.c: 81: break;
  2160                           
  2161                           ;motor.c: 80: currentStep++;
  2162                           
  2163  06FF  301B               	movlw	27
  2164  0700  2F02               	goto	L3
  2165  0701                     l1929:	
  2166                           ;motor.c: 87: case 6: PORTC = 0b00011110;
  2167                           
  2168                           ;motor.c: 85: break;
  2169                           
  2170                           ;motor.c: 84: currentStep++;
  2171                           
  2172  0701  301E               	movlw	30
  2173  0702                     L3:	
  2174  0702  0087               	movwf	7	;volatile
  2175                           
  2176                           ;motor.c: 88: currentStep++;
  2177  0703  3001               	movlw	1
  2178  0704  00C7               	movwf	??_moveCCW
  2179  0705  0847               	movf	??_moveCCW,w
  2180  0706  07FB               	addwf	_currentStep,f
  2181                           
  2182                           ;motor.c: 89: break;
  2183  0707  2F29               	goto	l1943
  2184  0708                     l1933:	
  2185                           ;motor.c: 91: case 7: PORTC = 0b00111100;
  2186                           
  2187  0708  303C               	movlw	60
  2188  0709  0087               	movwf	7	;volatile
  2189                           
  2190                           ;motor.c: 92: currentStep = 0;
  2191  070A  01FB               	clrf	_currentStep
  2192                           
  2193                           ;motor.c: 93: break;
  2194  070B  2F29               	goto	l1943
  2195  070C                     l1937:	
  2196                           ;motor.c: 95: default: PORTC = 0b00111001;
  2197                           
  2198  070C  3039               	movlw	57
  2199  070D  0087               	movwf	7	;volatile
  2200                           
  2201                           ;motor.c: 97: }
  2202                           
  2203                           ;motor.c: 96: break;
  2204  070E  2F29               	goto	l1943
  2205  070F                     l1941:	
  2206  070F  087B               	movf	_currentStep,w
  2207                           
  2208                           ; Switch size 1, requested type "space"
  2209                           ; Number of cases is 8, Range of values is 0 to 7
  2210                           ; switch strategies available:
  2211                           ; Name         Instructions Cycles
  2212                           ; simple_byte           25    13 (average)
  2213                           ; direct_byte           32     8 (fixed)
  2214                           ; jumptable            260     6 (fixed)
  2215                           ;	Chosen strategy is simple_byte
  2216  0710  3A00               	xorlw	0	; case 0
  2217  0711  1903               	skipnz
  2218  0712  2EF5               	goto	l1905
  2219  0713  3A01               	xorlw	1	; case 1
  2220  0714  1903               	skipnz
  2221  0715  2EF7               	goto	l1909
  2222  0716  3A03               	xorlw	3	; case 2
  2223  0717  1903               	skipnz
  2224  0718  2EF9               	goto	l1913
  2225  0719  3A01               	xorlw	1	; case 3
  2226  071A  1903               	skipnz
  2227  071B  2EFB               	goto	l1917
  2228  071C  3A07               	xorlw	7	; case 4
  2229  071D  1903               	skipnz
  2230  071E  2EFD               	goto	l1921
  2231  071F  3A01               	xorlw	1	; case 5
  2232  0720  1903               	skipnz
  2233  0721  2EFF               	goto	l1925
  2234  0722  3A03               	xorlw	3	; case 6
  2235  0723  1903               	skipnz
  2236  0724  2F01               	goto	l1929
  2237  0725  3A01               	xorlw	1	; case 7
  2238  0726  1903               	skipnz
  2239  0727  2F08               	goto	l1933
  2240  0728  2F0C               	goto	l1937
  2241  0729                     l1943:	
  2242                           
  2243                           ;motor.c: 99: _delay((unsigned long)((3)*(20000000/4000.0)));
  2244  0729  3014               	movlw	20
  2245  072A  00C8               	movwf	??_moveCCW+1
  2246  072B  3079               	movlw	121
  2247  072C  00C7               	movwf	??_moveCCW
  2248  072D                     u1797:	
  2249  072D  0BC7               	decfsz	??_moveCCW,f
  2250  072E  2F2D               	goto	u1797
  2251  072F  0BC8               	decfsz	??_moveCCW+1,f
  2252  0730  2F2D               	goto	u1797
  2253  0731  2F32               	nop2
  2254  0732  0008               	return
  2255  0733                     __end_of_moveCCW:	
  2256                           
  2257                           	psect	text8
  2258  07BE                     __ptext8:	
  2259 ;; *************** function _getSensorData *****************
  2260 ;; Defined at:
  2261 ;;		line 62 in file "ser.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;  packetID        1    wreg     unsigned char 
  2264 ;;  bytes           1    2[BANK0 ] unsigned char 
  2265 ;; Auto vars:     Size  Location     Type
  2266 ;;  packetID        1    8[BANK0 ] unsigned char 
  2267 ;;  sensor          2    6[BANK0 ] int 
  2268 ;; Return value:  Size  Location     Type
  2269 ;;                  2    2[BANK0 ] int 
  2270 ;; Registers used:
  2271 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2272 ;; Tracked objects:
  2273 ;;		On entry : 0/0
  2274 ;;		On exit  : 0/0
  2275 ;;		Unchanged: 0/0
  2276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2277 ;;      Params:         0       2       0       0       0
  2278 ;;      Locals:         0       3       0       0       0
  2279 ;;      Temps:          0       2       0       0       0
  2280 ;;      Totals:         0       7       0       0       0
  2281 ;;Total ram usage:        7 bytes
  2282 ;; Hardware stack levels used:    1
  2283 ;; Hardware stack levels required when called:    3
  2284 ;; This function calls:
  2285 ;;		_ser_getch
  2286 ;;		_ser_putch
  2287 ;; This function is called by:
  2288 ;;		_main
  2289 ;; This function uses a non-reentrant model
  2290 ;;
  2291                           
  2292                           
  2293                           ;psect for function _getSensorData
  2294  07BE                     _getSensorData:	
  2295                           
  2296                           ;incstack = 0
  2297                           ; Regs used in _getSensorData: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2298                           ;getSensorData@packetID stored from wreg
  2299  07BE  1283               	bcf	3,5	;RP0=0, select bank0
  2300  07BF  1303               	bcf	3,6	;RP1=0, select bank0
  2301  07C0  00CF               	movwf	getSensorData@packetID
  2302                           
  2303                           ;ser.c: 63: ser_putch(142);
  2304  07C1  308E               	movlw	142
  2305  07C2  120A  158A  2655  120A  118A  	fcall	_ser_putch
  2306                           
  2307                           ;ser.c: 64: ser_putch(packetID);
  2308  07C7  1283               	bcf	3,5	;RP0=0, select bank0
  2309  07C8  1303               	bcf	3,6	;RP1=0, select bank0
  2310  07C9  084F               	movf	getSensorData@packetID,w
  2311  07CA  120A  158A  2655  120A  118A  	fcall	_ser_putch
  2312                           
  2313                           ;ser.c: 66: if (bytes == 2)
  2314  07CF  3002               	movlw	2
  2315  07D0  1283               	bcf	3,5	;RP0=0, select bank0
  2316  07D1  1303               	bcf	3,6	;RP1=0, select bank0
  2317  07D2  0649               	xorwf	getSensorData@bytes,w
  2318  07D3  1D03               	btfss	3,2
  2319  07D4  2FE0               	goto	l1951
  2320                           
  2321                           ;ser.c: 67: highByte = ser_getch();
  2322  07D5  120A  158A  264B  120A  118A  	fcall	_ser_getch
  2323  07DA  1283               	bcf	3,5	;RP0=0, select bank0
  2324  07DB  1303               	bcf	3,6	;RP1=0, select bank0
  2325  07DC  00CB               	movwf	??_getSensorData
  2326  07DD  084B               	movf	??_getSensorData,w
  2327  07DE  00C6               	movwf	_highByte
  2328  07DF  2FE1               	goto	l1953
  2329  07E0                     l1951:	
  2330                           
  2331                           ;ser.c: 68: else
  2332                           ;ser.c: 69: highByte = 0;
  2333  07E0  01C6               	clrf	_highByte
  2334  07E1                     l1953:	
  2335                           
  2336                           ;ser.c: 71: lowByte = ser_getch();
  2337  07E1  120A  158A  264B   	fcall	_ser_getch
  2338  07E4  1283               	bcf	3,5	;RP0=0, select bank0
  2339  07E5  1303               	bcf	3,6	;RP1=0, select bank0
  2340  07E6  00CB               	movwf	??_getSensorData
  2341  07E7  084B               	movf	??_getSensorData,w
  2342  07E8  00BF               	movwf	_lowByte
  2343                           
  2344                           ;ser.c: 73: signed int sensor = (256*highByte + lowByte);
  2345  07E9  0846               	movf	_highByte,w
  2346  07EA  00CB               	movwf	??_getSensorData
  2347  07EB  01CC               	clrf	??_getSensorData+1
  2348  07EC  084B               	movf	??_getSensorData,w
  2349  07ED  00CC               	movwf	??_getSensorData+1
  2350  07EE  01CB               	clrf	??_getSensorData
  2351  07EF  083F               	movf	_lowByte,w
  2352  07F0  074B               	addwf	??_getSensorData,w
  2353  07F1  00CD               	movwf	getSensorData@sensor
  2354  07F2  3000               	movlw	0
  2355  07F3  1803               	skipnc
  2356  07F4  3001               	movlw	1
  2357  07F5  074C               	addwf	??_getSensorData+1,w
  2358  07F6  00CE               	movwf	getSensorData@sensor+1
  2359                           
  2360                           ;ser.c: 75: return sensor;
  2361  07F7  084E               	movf	getSensorData@sensor+1,w
  2362  07F8  00CA               	movwf	?_getSensorData+1
  2363  07F9  084D               	movf	getSensorData@sensor,w
  2364  07FA  00C9               	movwf	?_getSensorData
  2365  07FB  0008               	return
  2366  07FC                     __end_of_getSensorData:	
  2367                           
  2368                           	psect	text9
  2369  0E4B                     __ptext9:	
  2370 ;; *************** function _ser_getch *****************
  2371 ;; Defined at:
  2372 ;;		line 35 in file "ser.c"
  2373 ;; Parameters:    Size  Location     Type
  2374 ;;		None
  2375 ;; Auto vars:     Size  Location     Type
  2376 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  2377 ;; Return value:  Size  Location     Type
  2378 ;;                  1    wreg      unsigned char 
  2379 ;; Registers used:
  2380 ;;		wreg
  2381 ;; Tracked objects:
  2382 ;;		On entry : 0/0
  2383 ;;		On exit  : 0/0
  2384 ;;		Unchanged: 0/0
  2385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2386 ;;      Params:         0       0       0       0       0
  2387 ;;      Locals:         0       1       0       0       0
  2388 ;;      Temps:          0       1       0       0       0
  2389 ;;      Totals:         0       2       0       0       0
  2390 ;;Total ram usage:        2 bytes
  2391 ;; Hardware stack levels used:    1
  2392 ;; Hardware stack levels required when called:    2
  2393 ;; This function calls:
  2394 ;;		Nothing
  2395 ;; This function is called by:
  2396 ;;		_getSensorData
  2397 ;; This function uses a non-reentrant model
  2398 ;;
  2399                           
  2400                           
  2401                           ;psect for function _ser_getch
  2402  0E4B                     _ser_getch:	
  2403  0E4B                     l336:	
  2404                           ;ser.c: 36: while(!RCIF);
  2405                           
  2406                           ;incstack = 0
  2407                           ; Regs used in _ser_getch: [wreg]
  2408                           
  2409  0E4B  1283               	bcf	3,5	;RP0=0, select bank0
  2410  0E4C  1303               	bcf	3,6	;RP1=0, select bank0
  2411  0E4D  1E8C               	btfss	12,5	;volatile
  2412  0E4E  2E4B               	goto	l336
  2413                           
  2414                           ;ser.c: 37: unsigned char rxbyte = RCREG;
  2415  0E4F  081A               	movf	26,w	;volatile
  2416  0E50  00C7               	movwf	??_ser_getch
  2417  0E51  0847               	movf	??_ser_getch,w
  2418  0E52  00C8               	movwf	ser_getch@rxbyte
  2419                           
  2420                           ;ser.c: 38: return rxbyte;
  2421  0E53  0848               	movf	ser_getch@rxbyte,w
  2422  0E54  0008               	return
  2423  0E55                     __end_of_ser_getch:	
  2424                           
  2425                           	psect	text10
  2426  0F3F                     __ptext10:	
  2427 ;; *************** function _DriveDirect *****************
  2428 ;; Defined at:
  2429 ;;		line 53 in file "ser.c"
  2430 ;; Parameters:    Size  Location     Type
  2431 ;;  RightSpeedH     1    wreg     unsigned char 
  2432 ;;  RightSpeedL     1    1[BANK0 ] unsigned char 
  2433 ;;  LeftSpeedH      1    2[BANK0 ] unsigned char 
  2434 ;;  LeftSpeedL      1    3[BANK0 ] unsigned char 
  2435 ;; Auto vars:     Size  Location     Type
  2436 ;;  RightSpeedH     1    4[BANK0 ] unsigned char 
  2437 ;; Return value:  Size  Location     Type
  2438 ;;                  1    wreg      void 
  2439 ;; Registers used:
  2440 ;;		wreg, status,2, status,0, pclath, cstack
  2441 ;; Tracked objects:
  2442 ;;		On entry : 0/0
  2443 ;;		On exit  : 0/0
  2444 ;;		Unchanged: 0/0
  2445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2446 ;;      Params:         0       3       0       0       0
  2447 ;;      Locals:         0       1       0       0       0
  2448 ;;      Temps:          0       0       0       0       0
  2449 ;;      Totals:         0       4       0       0       0
  2450 ;;Total ram usage:        4 bytes
  2451 ;; Hardware stack levels used:    1
  2452 ;; Hardware stack levels required when called:    3
  2453 ;; This function calls:
  2454 ;;		_ser_putch
  2455 ;; This function is called by:
  2456 ;;		_main
  2457 ;; This function uses a non-reentrant model
  2458 ;;
  2459                           
  2460                           
  2461                           ;psect for function _DriveDirect
  2462  0F3F                     _DriveDirect:	
  2463                           
  2464                           ;incstack = 0
  2465                           ; Regs used in _DriveDirect: [wreg+status,2+status,0+pclath+cstack]
  2466                           ;DriveDirect@RightSpeedH stored from wreg
  2467  0F3F  1283               	bcf	3,5	;RP0=0, select bank0
  2468  0F40  1303               	bcf	3,6	;RP1=0, select bank0
  2469  0F41  00CB               	movwf	DriveDirect@RightSpeedH
  2470                           
  2471                           ;ser.c: 54: ser_putch(145);
  2472  0F42  3091               	movlw	145
  2473  0F43  120A  158A  2655  120A  158A  	fcall	_ser_putch
  2474                           
  2475                           ;ser.c: 55: ser_putch(RightSpeedH);
  2476  0F48  1283               	bcf	3,5	;RP0=0, select bank0
  2477  0F49  1303               	bcf	3,6	;RP1=0, select bank0
  2478  0F4A  084B               	movf	DriveDirect@RightSpeedH,w
  2479  0F4B  120A  158A  2655  120A  158A  	fcall	_ser_putch
  2480                           
  2481                           ;ser.c: 56: ser_putch(RightSpeedL);
  2482  0F50  1283               	bcf	3,5	;RP0=0, select bank0
  2483  0F51  1303               	bcf	3,6	;RP1=0, select bank0
  2484  0F52  0848               	movf	DriveDirect@RightSpeedL,w
  2485  0F53  120A  158A  2655  120A  158A  	fcall	_ser_putch
  2486                           
  2487                           ;ser.c: 57: ser_putch(LeftSpeedH);
  2488  0F58  1283               	bcf	3,5	;RP0=0, select bank0
  2489  0F59  1303               	bcf	3,6	;RP1=0, select bank0
  2490  0F5A  0849               	movf	DriveDirect@LeftSpeedH,w
  2491  0F5B  120A  158A  2655  120A  158A  	fcall	_ser_putch
  2492                           
  2493                           ;ser.c: 58: ser_putch(LeftSpeedL);
  2494  0F60  1283               	bcf	3,5	;RP0=0, select bank0
  2495  0F61  1303               	bcf	3,6	;RP1=0, select bank0
  2496  0F62  084A               	movf	DriveDirect@LeftSpeedL,w
  2497  0F63  120A  158A  2655   	fcall	_ser_putch
  2498  0F66  0008               	return
  2499  0F67                     __end_of_DriveDirect:	
  2500                           
  2501                           	psect	text11
  2502  0F17                     __ptext11:	
  2503 ;; *************** function _Drive *****************
  2504 ;; Defined at:
  2505 ;;		line 45 in file "ser.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;  speedH          1    wreg     unsigned char 
  2508 ;;  speedL          1    1[BANK0 ] unsigned char 
  2509 ;;  radH            1    2[BANK0 ] unsigned char 
  2510 ;;  radL            1    3[BANK0 ] unsigned char 
  2511 ;; Auto vars:     Size  Location     Type
  2512 ;;  speedH          1    4[BANK0 ] unsigned char 
  2513 ;; Return value:  Size  Location     Type
  2514 ;;                  1    wreg      void 
  2515 ;; Registers used:
  2516 ;;		wreg, status,2, status,0, pclath, cstack
  2517 ;; Tracked objects:
  2518 ;;		On entry : 0/0
  2519 ;;		On exit  : 0/0
  2520 ;;		Unchanged: 0/0
  2521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2522 ;;      Params:         0       3       0       0       0
  2523 ;;      Locals:         0       1       0       0       0
  2524 ;;      Temps:          0       0       0       0       0
  2525 ;;      Totals:         0       4       0       0       0
  2526 ;;Total ram usage:        4 bytes
  2527 ;; Hardware stack levels used:    1
  2528 ;; Hardware stack levels required when called:    3
  2529 ;; This function calls:
  2530 ;;		_ser_putch
  2531 ;; This function is called by:
  2532 ;;		_main
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           
  2537                           ;psect for function _Drive
  2538  0F17                     _Drive:	
  2539                           
  2540                           ;incstack = 0
  2541                           ; Regs used in _Drive: [wreg+status,2+status,0+pclath+cstack]
  2542                           ;Drive@speedH stored from wreg
  2543  0F17  1283               	bcf	3,5	;RP0=0, select bank0
  2544  0F18  1303               	bcf	3,6	;RP1=0, select bank0
  2545  0F19  00CB               	movwf	Drive@speedH
  2546                           
  2547                           ;ser.c: 46: ser_putch(137);
  2548  0F1A  3089               	movlw	137
  2549  0F1B  120A  158A  2655  120A  158A  	fcall	_ser_putch
  2550                           
  2551                           ;ser.c: 47: ser_putch(speedH);
  2552  0F20  1283               	bcf	3,5	;RP0=0, select bank0
  2553  0F21  1303               	bcf	3,6	;RP1=0, select bank0
  2554  0F22  084B               	movf	Drive@speedH,w
  2555  0F23  120A  158A  2655  120A  158A  	fcall	_ser_putch
  2556                           
  2557                           ;ser.c: 48: ser_putch(speedL);
  2558  0F28  1283               	bcf	3,5	;RP0=0, select bank0
  2559  0F29  1303               	bcf	3,6	;RP1=0, select bank0
  2560  0F2A  0848               	movf	Drive@speedL,w
  2561  0F2B  120A  158A  2655  120A  158A  	fcall	_ser_putch
  2562                           
  2563                           ;ser.c: 49: ser_putch(radH);
  2564  0F30  1283               	bcf	3,5	;RP0=0, select bank0
  2565  0F31  1303               	bcf	3,6	;RP1=0, select bank0
  2566  0F32  0849               	movf	Drive@radH,w
  2567  0F33  120A  158A  2655  120A  158A  	fcall	_ser_putch
  2568                           
  2569                           ;ser.c: 50: ser_putch(radL);
  2570  0F38  1283               	bcf	3,5	;RP0=0, select bank0
  2571  0F39  1303               	bcf	3,6	;RP1=0, select bank0
  2572  0F3A  084A               	movf	Drive@radL,w
  2573  0F3B  120A  158A  2655   	fcall	_ser_putch
  2574  0F3E  0008               	return
  2575  0F3F                     __end_of_Drive:	
  2576                           
  2577                           	psect	text12
  2578  0E55                     __ptext12:	
  2579 ;; *************** function _ser_putch *****************
  2580 ;; Defined at:
  2581 ;;		line 30 in file "ser.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;  c               1    wreg     unsigned char 
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;  c               1    0[BANK0 ] unsigned char 
  2586 ;; Return value:  Size  Location     Type
  2587 ;;                  1    wreg      void 
  2588 ;; Registers used:
  2589 ;;		wreg
  2590 ;; Tracked objects:
  2591 ;;		On entry : 0/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2595 ;;      Params:         0       0       0       0       0
  2596 ;;      Locals:         0       1       0       0       0
  2597 ;;      Temps:          0       0       0       0       0
  2598 ;;      Totals:         0       1       0       0       0
  2599 ;;Total ram usage:        1 bytes
  2600 ;; Hardware stack levels used:    1
  2601 ;; Hardware stack levels required when called:    2
  2602 ;; This function calls:
  2603 ;;		Nothing
  2604 ;; This function is called by:
  2605 ;;		_main
  2606 ;;		_Drive
  2607 ;;		_DriveDirect
  2608 ;;		_getSensorData
  2609 ;; This function uses a non-reentrant model
  2610 ;;
  2611                           
  2612                           
  2613                           ;psect for function _ser_putch
  2614  0E55                     _ser_putch:	
  2615                           
  2616                           ;incstack = 0
  2617                           ; Regs used in _ser_putch: [wreg]
  2618                           ;ser_putch@c stored from wreg
  2619  0E55  1283               	bcf	3,5	;RP0=0, select bank0
  2620  0E56  1303               	bcf	3,6	;RP1=0, select bank0
  2621  0E57  00C7               	movwf	ser_putch@c
  2622  0E58                     l330:	
  2623                           ;ser.c: 31: while(!TRMT);
  2624                           
  2625  0E58  1683               	bsf	3,5	;RP0=1, select bank1
  2626  0E59  1303               	bcf	3,6	;RP1=0, select bank1
  2627  0E5A  1C98               	btfss	24,1	;volatile
  2628  0E5B  2E58               	goto	l330
  2629                           
  2630                           ;ser.c: 32: TXREG=c;
  2631  0E5C  1283               	bcf	3,5	;RP0=0, select bank0
  2632  0E5D  1303               	bcf	3,6	;RP1=0, select bank0
  2633  0E5E  0847               	movf	ser_putch@c,w
  2634  0E5F  0099               	movwf	25	;volatile
  2635  0E60  0008               	return
  2636  0E61                     __end_of_ser_putch:	
  2637                           
  2638                           	psect	text13
  2639  0ED4                     __ptext13:	
  2640 ;; *************** function _ADCMain *****************
  2641 ;; Defined at:
  2642 ;;		line 19 in file "ADC.c"
  2643 ;; Parameters:    Size  Location     Type
  2644 ;;		None
  2645 ;; Auto vars:     Size  Location     Type
  2646 ;;		None
  2647 ;; Return value:  Size  Location     Type
  2648 ;;                  1    wreg      void 
  2649 ;; Registers used:
  2650 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2651 ;; Tracked objects:
  2652 ;;		On entry : 0/0
  2653 ;;		On exit  : 0/0
  2654 ;;		Unchanged: 0/0
  2655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2656 ;;      Params:         0       0       0       0       0
  2657 ;;      Locals:         0       0       0       0       0
  2658 ;;      Temps:          0       0       0       0       0
  2659 ;;      Totals:         0       0       0       0       0
  2660 ;;Total ram usage:        0 bytes
  2661 ;; Hardware stack levels used:    1
  2662 ;; Hardware stack levels required when called:    4
  2663 ;; This function calls:
  2664 ;;		_adcConvertMM
  2665 ;;		_getADC
  2666 ;;		_lcdSetCursor
  2667 ;;		_lcdWriteToDigitBCD
  2668 ;; This function is called by:
  2669 ;;		_main
  2670 ;; This function uses a non-reentrant model
  2671 ;;
  2672                           
  2673                           
  2674                           ;psect for function _ADCMain
  2675  0ED4                     _ADCMain:	
  2676                           
  2677                           ;ADC.c: 21: getADC();
  2678                           
  2679                           ;incstack = 0
  2680                           ; Regs used in _ADCMain: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2681  0ED4  120A  118A  2779  120A  158A  	fcall	_getADC
  2682                           
  2683                           ;ADC.c: 22: lcdSetCursor(0b10000000);
  2684  0ED9  3080               	movlw	128
  2685  0EDA  120A  158A  2642  120A  158A  	fcall	_lcdSetCursor
  2686                           
  2687                           ;ADC.c: 23: lcdWriteToDigitBCD(adcRAW);
  2688  0EDF  1283               	bcf	3,5	;RP0=0, select bank0
  2689  0EE0  1303               	bcf	3,6	;RP1=0, select bank0
  2690  0EE1  0823               	movf	_adcRAW+1,w	;volatile
  2691  0EE2  00CB               	movwf	lcdWriteToDigitBCD@data+1
  2692  0EE3  0822               	movf	_adcRAW,w	;volatile
  2693  0EE4  00CA               	movwf	lcdWriteToDigitBCD@data
  2694  0EE5  120A  118A  257A  120A  158A  	fcall	_lcdWriteToDigitBCD
  2695                           
  2696                           ;ADC.c: 25: adcConvertMM(adcRAW);
  2697  0EEA  1283               	bcf	3,5	;RP0=0, select bank0
  2698  0EEB  1303               	bcf	3,6	;RP1=0, select bank0
  2699  0EEC  0823               	movf	_adcRAW+1,w	;volatile
  2700  0EED  00DD               	movwf	adcConvertMM@adcRAW+1
  2701  0EEE  0822               	movf	_adcRAW,w	;volatile
  2702  0EEF  00DC               	movwf	adcConvertMM@adcRAW
  2703  0EF0  120A  118A  202F   	fcall	_adcConvertMM
  2704  0EF3  0008               	return
  2705  0EF4                     __end_of_ADCMain:	
  2706                           
  2707                           	psect	text14
  2708  057A                     __ptext14:	
  2709 ;; *************** function _lcdWriteToDigitBCD *****************
  2710 ;; Defined at:
  2711 ;;		line 42 in file "LCD.c"
  2712 ;; Parameters:    Size  Location     Type
  2713 ;;  data            2    3[BANK0 ] unsigned int 
  2714 ;; Auto vars:     Size  Location     Type
  2715 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  2716 ;;  TenThouDigit    2   11[BANK0 ] unsigned int 
  2717 ;;  ThouDigit       2    9[BANK0 ] unsigned int 
  2718 ;;  HunsDigit       2    7[BANK0 ] unsigned int 
  2719 ;;  TensDigit       2    5[BANK0 ] unsigned int 
  2720 ;; Return value:  Size  Location     Type
  2721 ;;                  1    wreg      void 
  2722 ;; Registers used:
  2723 ;;		wreg, status,2, status,0, pclath, cstack
  2724 ;; Tracked objects:
  2725 ;;		On entry : 0/0
  2726 ;;		On exit  : 0/0
  2727 ;;		Unchanged: 0/0
  2728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2729 ;;      Params:         0       2       0       0       0
  2730 ;;      Locals:         0      10       0       0       0
  2731 ;;      Temps:          0       0       0       0       0
  2732 ;;      Totals:         0      12       0       0       0
  2733 ;;Total ram usage:       12 bytes
  2734 ;; Hardware stack levels used:    1
  2735 ;; Hardware stack levels required when called:    3
  2736 ;; This function calls:
  2737 ;;		_lcdWriteData
  2738 ;; This function is called by:
  2739 ;;		_main
  2740 ;;		_ADCMain
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           
  2745                           ;psect for function _lcdWriteToDigitBCD
  2746  057A                     _lcdWriteToDigitBCD:	
  2747                           
  2748                           ;LCD.c: 43: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  2749                           ;LCD.c: 46: OnesDigit = data;
  2750                           
  2751                           ;incstack = 0
  2752                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  2753  057A  1283               	bcf	3,5	;RP0=0, select bank0
  2754  057B  1303               	bcf	3,6	;RP1=0, select bank0
  2755  057C  084B               	movf	lcdWriteToDigitBCD@data+1,w
  2756  057D  00D5               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2757  057E  084A               	movf	lcdWriteToDigitBCD@data,w
  2758  057F  00D4               	movwf	lcdWriteToDigitBCD@OnesDigit
  2759                           
  2760                           ;LCD.c: 47: TensDigit = 0;
  2761  0580  01CC               	clrf	lcdWriteToDigitBCD@TensDigit
  2762  0581  01CD               	clrf	lcdWriteToDigitBCD@TensDigit+1
  2763                           
  2764                           ;LCD.c: 48: HunsDigit = 0;
  2765  0582  01CE               	clrf	lcdWriteToDigitBCD@HunsDigit
  2766  0583  01CF               	clrf	lcdWriteToDigitBCD@HunsDigit+1
  2767                           
  2768                           ;LCD.c: 49: ThouDigit = 0;
  2769  0584  01D0               	clrf	lcdWriteToDigitBCD@ThouDigit
  2770  0585  01D1               	clrf	lcdWriteToDigitBCD@ThouDigit+1
  2771                           
  2772                           ;LCD.c: 50: TenThouDigit = 0;
  2773  0586  01D2               	clrf	lcdWriteToDigitBCD@TenThouDigit
  2774  0587  01D3               	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  2775  0588                     l1657:	
  2776                           ;LCD.c: 53: while (OnesDigit >= 10000){
  2777                           
  2778  0588  3027               	movlw	39
  2779  0589  0255               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2780  058A  3010               	movlw	16
  2781  058B  1903               	skipnz
  2782  058C  0254               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2783  058D  1C03               	btfss	3,0
  2784  058E  2DAC               	goto	l1663
  2785                           
  2786                           ;LCD.c: 54: OnesDigit = OnesDigit - 10000;
  2787  058F  0854               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2788  0590  3EF0               	addlw	240
  2789  0591  00D4               	movwf	lcdWriteToDigitBCD@OnesDigit
  2790  0592  0855               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2791  0593  1803               	skipnc
  2792  0594  3E01               	addlw	1
  2793  0595  3ED8               	addlw	216
  2794  0596  00D5               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2795                           
  2796                           ;LCD.c: 55: TenThouDigit++;
  2797  0597  3001               	movlw	1
  2798  0598  07D2               	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  2799  0599  1803               	skipnc
  2800  059A  0AD3               	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2801  059B  3000               	movlw	0
  2802  059C  07D3               	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2803  059D  2D88               	goto	l1657
  2804  059E                     l1659:	
  2805                           ;LCD.c: 56: }
  2806                           ;LCD.c: 58: while (OnesDigit >= 1000){
  2807                           
  2808                           
  2809                           ;LCD.c: 59: OnesDigit = OnesDigit - 1000;
  2810  059E  0854               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2811  059F  3E18               	addlw	24
  2812  05A0  00D4               	movwf	lcdWriteToDigitBCD@OnesDigit
  2813  05A1  0855               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2814  05A2  1803               	skipnc
  2815  05A3  3E01               	addlw	1
  2816  05A4  3EFC               	addlw	252
  2817  05A5  00D5               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2818                           
  2819                           ;LCD.c: 60: ThouDigit++;
  2820  05A6  3001               	movlw	1
  2821  05A7  07D0               	addwf	lcdWriteToDigitBCD@ThouDigit,f
  2822  05A8  1803               	skipnc
  2823  05A9  0AD1               	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  2824  05AA  3000               	movlw	0
  2825  05AB  07D1               	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  2826  05AC                     l1663:	
  2827  05AC  3003               	movlw	3
  2828  05AD  0255               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2829  05AE  30E8               	movlw	232
  2830  05AF  1903               	skipnz
  2831  05B0  0254               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2832  05B1  1C03               	btfss	3,0
  2833  05B2  2DC2               	goto	l1669
  2834  05B3  2D9E               	goto	l1659
  2835  05B4                     l1665:	
  2836                           ;LCD.c: 61: }
  2837                           ;LCD.c: 63: while (OnesDigit >= 100){
  2838                           
  2839                           
  2840                           ;LCD.c: 64: OnesDigit = OnesDigit - 100;
  2841  05B4  0854               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2842  05B5  3E9C               	addlw	156
  2843  05B6  00D4               	movwf	lcdWriteToDigitBCD@OnesDigit
  2844  05B7  0855               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2845  05B8  1803               	skipnc
  2846  05B9  3E01               	addlw	1
  2847  05BA  3EFF               	addlw	255
  2848  05BB  00D5               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2849                           
  2850                           ;LCD.c: 65: HunsDigit++;
  2851  05BC  3001               	movlw	1
  2852  05BD  07CE               	addwf	lcdWriteToDigitBCD@HunsDigit,f
  2853  05BE  1803               	skipnc
  2854  05BF  0ACF               	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  2855  05C0  3000               	movlw	0
  2856  05C1  07CF               	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  2857  05C2                     l1669:	
  2858  05C2  3000               	movlw	0
  2859  05C3  0255               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2860  05C4  3064               	movlw	100
  2861  05C5  1903               	skipnz
  2862  05C6  0254               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2863  05C7  1C03               	btfss	3,0
  2864  05C8  2DD8               	goto	l1675
  2865  05C9  2DB4               	goto	l1665
  2866  05CA                     l1671:	
  2867                           ;LCD.c: 66: }
  2868                           ;LCD.c: 68: while (OnesDigit >= 10){
  2869                           
  2870                           
  2871                           ;LCD.c: 69: OnesDigit = OnesDigit - 10;
  2872  05CA  0854               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2873  05CB  3EF6               	addlw	246
  2874  05CC  00D4               	movwf	lcdWriteToDigitBCD@OnesDigit
  2875  05CD  0855               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2876  05CE  1803               	skipnc
  2877  05CF  3E01               	addlw	1
  2878  05D0  3EFF               	addlw	255
  2879  05D1  00D5               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2880                           
  2881                           ;LCD.c: 70: TensDigit++;
  2882  05D2  3001               	movlw	1
  2883  05D3  07CC               	addwf	lcdWriteToDigitBCD@TensDigit,f
  2884  05D4  1803               	skipnc
  2885  05D5  0ACD               	incf	lcdWriteToDigitBCD@TensDigit+1,f
  2886  05D6  3000               	movlw	0
  2887  05D7  07CD               	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  2888  05D8                     l1675:	
  2889  05D8  3000               	movlw	0
  2890  05D9  0255               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2891  05DA  300A               	movlw	10
  2892  05DB  1903               	skipnz
  2893  05DC  0254               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2894  05DD  1803               	skipnc
  2895  05DE  2DCA               	goto	l1671
  2896                           
  2897                           ;LCD.c: 71: }
  2898                           ;LCD.c: 73: if (TenThouDigit > 0)
  2899  05DF  0852               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  2900  05E0  0453               	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  2901  05E1  1903               	btfsc	3,2
  2902  05E2  2DEA               	goto	l1681
  2903                           
  2904                           ;LCD.c: 74: lcdWriteData((unsigned int)TenThouDigit + 48);
  2905  05E3  0852               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  2906  05E4  3E30               	addlw	48
  2907  05E5  120A  158A  267F  120A  118A  	fcall	_lcdWriteData
  2908  05EA                     l1681:	
  2909                           
  2910                           ;LCD.c: 76: if (ThouDigit > 0)
  2911  05EA  1283               	bcf	3,5	;RP0=0, select bank0
  2912  05EB  1303               	bcf	3,6	;RP1=0, select bank0
  2913  05EC  0850               	movf	lcdWriteToDigitBCD@ThouDigit,w
  2914  05ED  0451               	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  2915  05EE  1903               	btfsc	3,2
  2916  05EF  2DF7               	goto	l217
  2917                           
  2918                           ;LCD.c: 77: lcdWriteData((unsigned int)ThouDigit + 48);
  2919  05F0  0850               	movf	lcdWriteToDigitBCD@ThouDigit,w
  2920  05F1  3E30               	addlw	48
  2921  05F2  120A  158A  267F  120A  118A  	fcall	_lcdWriteData
  2922  05F7                     l217:	
  2923                           
  2924                           ;LCD.c: 79: lcdWriteData((unsigned int)HunsDigit + 48);
  2925  05F7  1283               	bcf	3,5	;RP0=0, select bank0
  2926  05F8  1303               	bcf	3,6	;RP1=0, select bank0
  2927  05F9  084E               	movf	lcdWriteToDigitBCD@HunsDigit,w
  2928  05FA  3E30               	addlw	48
  2929  05FB  120A  158A  267F  120A  118A  	fcall	_lcdWriteData
  2930                           
  2931                           ;LCD.c: 80: lcdWriteData((unsigned int)TensDigit + 48);
  2932  0600  1283               	bcf	3,5	;RP0=0, select bank0
  2933  0601  1303               	bcf	3,6	;RP1=0, select bank0
  2934  0602  084C               	movf	lcdWriteToDigitBCD@TensDigit,w
  2935  0603  3E30               	addlw	48
  2936  0604  120A  158A  267F  120A  118A  	fcall	_lcdWriteData
  2937                           
  2938                           ;LCD.c: 81: lcdWriteData((unsigned int)OnesDigit + 48);
  2939  0609  1283               	bcf	3,5	;RP0=0, select bank0
  2940  060A  1303               	bcf	3,6	;RP1=0, select bank0
  2941  060B  0854               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2942  060C  3E30               	addlw	48
  2943  060D  120A  158A  267F   	fcall	_lcdWriteData
  2944  0610  0008               	return
  2945  0611                     __end_of_lcdWriteToDigitBCD:	
  2946                           
  2947                           	psect	text15
  2948  0E7F                     __ptext15:	
  2949 ;; *************** function _lcdWriteData *****************
  2950 ;; Defined at:
  2951 ;;		line 20 in file "LCD.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;  databyte        1    wreg     unsigned char 
  2954 ;; Auto vars:     Size  Location     Type
  2955 ;;  databyte        1    2[BANK0 ] unsigned char 
  2956 ;; Return value:  Size  Location     Type
  2957 ;;                  1    wreg      void 
  2958 ;; Registers used:
  2959 ;;		wreg
  2960 ;; Tracked objects:
  2961 ;;		On entry : 0/0
  2962 ;;		On exit  : 0/0
  2963 ;;		Unchanged: 0/0
  2964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2965 ;;      Params:         0       0       0       0       0
  2966 ;;      Locals:         0       1       0       0       0
  2967 ;;      Temps:          0       2       0       0       0
  2968 ;;      Totals:         0       3       0       0       0
  2969 ;;Total ram usage:        3 bytes
  2970 ;; Hardware stack levels used:    1
  2971 ;; Hardware stack levels required when called:    2
  2972 ;; This function calls:
  2973 ;;		Nothing
  2974 ;; This function is called by:
  2975 ;;		_lcdWriteToDigitBCD
  2976 ;;		_lcdWriteString
  2977 ;; This function uses a non-reentrant model
  2978 ;;
  2979                           
  2980                           
  2981                           ;psect for function _lcdWriteData
  2982  0E7F                     _lcdWriteData:	
  2983                           
  2984                           ;incstack = 0
  2985                           ; Regs used in _lcdWriteData: [wreg]
  2986                           ;lcdWriteData@databyte stored from wreg
  2987  0E7F  1283               	bcf	3,5	;RP0=0, select bank0
  2988  0E80  1303               	bcf	3,6	;RP1=0, select bank0
  2989  0E81  00C9               	movwf	lcdWriteData@databyte
  2990                           
  2991                           ;LCD.c: 21: RE2 = 0;
  2992  0E82  1109               	bcf	9,2	;volatile
  2993                           
  2994                           ;LCD.c: 22: RE1 = 0;
  2995  0E83  1089               	bcf	9,1	;volatile
  2996                           
  2997                           ;LCD.c: 23: RE0 = 1;
  2998  0E84  1409               	bsf	9,0	;volatile
  2999                           
  3000                           ;LCD.c: 24: PORTD = databyte;
  3001  0E85  0849               	movf	lcdWriteData@databyte,w
  3002  0E86  0088               	movwf	8	;volatile
  3003                           
  3004                           ;LCD.c: 25: RE2 = 1;
  3005  0E87  1509               	bsf	9,2	;volatile
  3006                           
  3007                           ;LCD.c: 26: RE2 = 0;
  3008  0E88  1109               	bcf	9,2	;volatile
  3009                           
  3010                           ;LCD.c: 27: _delay((unsigned long)((1)*(20000000/4000.0)));
  3011  0E89  3007               	movlw	7
  3012  0E8A  00C8               	movwf	??_lcdWriteData+1
  3013  0E8B  307D               	movlw	125
  3014  0E8C  00C7               	movwf	??_lcdWriteData
  3015  0E8D                     u1807:	
  3016  0E8D  0BC7               	decfsz	??_lcdWriteData,f
  3017  0E8E  2E8D               	goto	u1807
  3018  0E8F  0BC8               	decfsz	??_lcdWriteData+1,f
  3019  0E90  2E8D               	goto	u1807
  3020  0E91  0008               	return
  3021  0E92                     __end_of_lcdWriteData:	
  3022                           
  3023                           	psect	text16
  3024  0E42                     __ptext16:	
  3025 ;; *************** function _lcdSetCursor *****************
  3026 ;; Defined at:
  3027 ;;		line 31 in file "LCD.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;  address         1    wreg     unsigned char 
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;  address         1    3[BANK0 ] unsigned char 
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  1    wreg      void 
  3034 ;; Registers used:
  3035 ;;		wreg, status,2, status,0, pclath, cstack
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3041 ;;      Params:         0       0       0       0       0
  3042 ;;      Locals:         0       1       0       0       0
  3043 ;;      Temps:          0       0       0       0       0
  3044 ;;      Totals:         0       1       0       0       0
  3045 ;;Total ram usage:        1 bytes
  3046 ;; Hardware stack levels used:    1
  3047 ;; Hardware stack levels required when called:    3
  3048 ;; This function calls:
  3049 ;;		_lcdWriteControl
  3050 ;; This function is called by:
  3051 ;;		_main
  3052 ;;		_ADCMain
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           
  3057                           ;psect for function _lcdSetCursor
  3058  0E42                     _lcdSetCursor:	
  3059                           
  3060                           ;incstack = 0
  3061                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  3062                           ;lcdSetCursor@address stored from wreg
  3063  0E42  1283               	bcf	3,5	;RP0=0, select bank0
  3064  0E43  1303               	bcf	3,6	;RP1=0, select bank0
  3065  0E44  00CA               	movwf	lcdSetCursor@address
  3066                           
  3067                           ;LCD.c: 32: address |= 0b10000000;
  3068  0E45  17CA               	bsf	lcdSetCursor@address,7
  3069                           
  3070                           ;LCD.c: 33: lcdWriteControl(address);
  3071  0E46  084A               	movf	lcdSetCursor@address,w
  3072  0E47  120A  158A  2692   	fcall	_lcdWriteControl
  3073  0E4A  0008               	return
  3074  0E4B                     __end_of_lcdSetCursor:	
  3075                           
  3076                           	psect	text17
  3077  0E92                     __ptext17:	
  3078 ;; *************** function _lcdWriteControl *****************
  3079 ;; Defined at:
  3080 ;;		line 9 in file "LCD.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;  databyte        1    wreg     unsigned char 
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;  databyte        1    2[BANK0 ] unsigned char 
  3085 ;; Return value:  Size  Location     Type
  3086 ;;                  1    wreg      void 
  3087 ;; Registers used:
  3088 ;;		wreg
  3089 ;; Tracked objects:
  3090 ;;		On entry : 0/0
  3091 ;;		On exit  : 0/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3094 ;;      Params:         0       0       0       0       0
  3095 ;;      Locals:         0       1       0       0       0
  3096 ;;      Temps:          0       2       0       0       0
  3097 ;;      Totals:         0       3       0       0       0
  3098 ;;Total ram usage:        3 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; Hardware stack levels required when called:    2
  3101 ;; This function calls:
  3102 ;;		Nothing
  3103 ;; This function is called by:
  3104 ;;		_lcdSetCursor
  3105 ;;		_setupLCD
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109                           
  3110                           ;psect for function _lcdWriteControl
  3111  0E92                     _lcdWriteControl:	
  3112                           
  3113                           ;incstack = 0
  3114                           ; Regs used in _lcdWriteControl: [wreg]
  3115                           ;lcdWriteControl@databyte stored from wreg
  3116  0E92  1283               	bcf	3,5	;RP0=0, select bank0
  3117  0E93  1303               	bcf	3,6	;RP1=0, select bank0
  3118  0E94  00C9               	movwf	lcdWriteControl@databyte
  3119                           
  3120                           ;LCD.c: 10: RE2 = 0;
  3121  0E95  1109               	bcf	9,2	;volatile
  3122                           
  3123                           ;LCD.c: 11: RE1 = 0;
  3124  0E96  1089               	bcf	9,1	;volatile
  3125                           
  3126                           ;LCD.c: 12: RE0 = 0;
  3127  0E97  1009               	bcf	9,0	;volatile
  3128                           
  3129                           ;LCD.c: 13: PORTD = databyte;
  3130  0E98  0849               	movf	lcdWriteControl@databyte,w
  3131  0E99  0088               	movwf	8	;volatile
  3132                           
  3133                           ;LCD.c: 14: RE2 = 1;
  3134  0E9A  1509               	bsf	9,2	;volatile
  3135                           
  3136                           ;LCD.c: 15: RE2 = 0;
  3137  0E9B  1109               	bcf	9,2	;volatile
  3138                           
  3139                           ;LCD.c: 16: _delay((unsigned long)((2)*(20000000/4000.0)));
  3140  0E9C  300D               	movlw	13
  3141  0E9D  00C8               	movwf	??_lcdWriteControl+1
  3142  0E9E  30FB               	movlw	251
  3143  0E9F  00C7               	movwf	??_lcdWriteControl
  3144  0EA0                     u1817:	
  3145  0EA0  0BC7               	decfsz	??_lcdWriteControl,f
  3146  0EA1  2EA0               	goto	u1817
  3147  0EA2  0BC8               	decfsz	??_lcdWriteControl+1,f
  3148  0EA3  2EA0               	goto	u1817
  3149  0EA4  2EA5               	nop2
  3150  0EA5  0008               	return
  3151  0EA6                     __end_of_lcdWriteControl:	
  3152                           
  3153                           	psect	text18
  3154  0779                     __ptext18:	
  3155 ;; *************** function _getADC *****************
  3156 ;; Defined at:
  3157 ;;		line 29 in file "ADC.c"
  3158 ;; Parameters:    Size  Location     Type
  3159 ;;		None
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;		None
  3162 ;; Return value:  Size  Location     Type
  3163 ;;                  2  420[None  ] unsigned int 
  3164 ;; Registers used:
  3165 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3166 ;; Tracked objects:
  3167 ;;		On entry : 0/0
  3168 ;;		On exit  : 0/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3171 ;;      Params:         0       0       0       0       0
  3172 ;;      Locals:         0       0       0       0       0
  3173 ;;      Temps:          0       2       0       0       0
  3174 ;;      Totals:         0       2       0       0       0
  3175 ;;Total ram usage:        2 bytes
  3176 ;; Hardware stack levels used:    1
  3177 ;; Hardware stack levels required when called:    2
  3178 ;; This function calls:
  3179 ;;		Nothing
  3180 ;; This function is called by:
  3181 ;;		_ADCMain
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           
  3186                           ;psect for function _getADC
  3187  0779                     _getADC:	
  3188                           
  3189                           ;ADC.c: 31: ADRESH = 0;
  3190                           
  3191                           ;incstack = 0
  3192                           ; Regs used in _getADC: [wreg-fsr0h+status,2+status,0]
  3193  0779  1283               	bcf	3,5	;RP0=0, select bank0
  3194  077A  1303               	bcf	3,6	;RP1=0, select bank0
  3195  077B  019E               	clrf	30	;volatile
  3196                           
  3197                           ;ADC.c: 32: ADRESL = 0;
  3198  077C  1683               	bsf	3,5	;RP0=1, select bank1
  3199  077D  1303               	bcf	3,6	;RP1=0, select bank1
  3200  077E  019E               	clrf	30	;volatile
  3201                           
  3202                           ;ADC.c: 34: GO = 1;
  3203  077F  1283               	bcf	3,5	;RP0=0, select bank0
  3204  0780  1303               	bcf	3,6	;RP1=0, select bank0
  3205  0781  151F               	bsf	31,2	;volatile
  3206  0782                     l467:	
  3207                           ;ADC.c: 35: while(GO) continue;
  3208                           
  3209  0782  191F               	btfsc	31,2	;volatile
  3210  0783  2F82               	goto	l467
  3211                           
  3212                           ;ADC.c: 39: adcRAW = (4*ADRESH);
  3213  0784  081E               	movf	30,w	;volatile
  3214  0785  00C7               	movwf	??_getADC
  3215  0786  01C8               	clrf	??_getADC+1
  3216  0787  1003               	clrc
  3217  0788  0DC7               	rlf	??_getADC,f
  3218  0789  0DC8               	rlf	??_getADC+1,f
  3219  078A  1003               	clrc
  3220  078B  0DC7               	rlf	??_getADC,f
  3221  078C  0DC8               	rlf	??_getADC+1,f
  3222  078D  0847               	movf	??_getADC,w
  3223  078E  00A2               	movwf	_adcRAW	;volatile
  3224  078F  0848               	movf	??_getADC+1,w
  3225  0790  00A3               	movwf	_adcRAW+1	;volatile
  3226                           
  3227                           ;ADC.c: 41: switch(ADRESL){
  3228  0791  2FB0               	goto	l1707
  3229  0792                     l1701:	
  3230                           ;ADC.c: 42: case 0b01000000: adcRAW = adcRAW + 1;
  3231                           
  3232  0792  1283               	bcf	3,5	;RP0=0, select bank0
  3233  0793  0822               	movf	_adcRAW,w	;volatile
  3234  0794  3E01               	addlw	1
  3235  0795  00A2               	movwf	_adcRAW	;volatile
  3236  0796  0823               	movf	_adcRAW+1,w	;volatile
  3237  0797  1803               	skipnc
  3238  0798  3E01               	addlw	1
  3239  0799  3E00               	addlw	0
  3240  079A  00A3               	movwf	_adcRAW+1	;volatile
  3241                           
  3242                           ;ADC.c: 43: break;
  3243  079B  0008               	return
  3244  079C                     l1703:	
  3245                           ;ADC.c: 44: case 0b10000000: adcRAW = adcRAW + 2;
  3246                           
  3247  079C  1283               	bcf	3,5	;RP0=0, select bank0
  3248  079D  0822               	movf	_adcRAW,w	;volatile
  3249  079E  3E02               	addlw	2
  3250  079F  00A2               	movwf	_adcRAW	;volatile
  3251  07A0  0823               	movf	_adcRAW+1,w	;volatile
  3252  07A1  1803               	skipnc
  3253  07A2  3E01               	addlw	1
  3254  07A3  3E00               	addlw	0
  3255  07A4  00A3               	movwf	_adcRAW+1	;volatile
  3256                           
  3257                           ;ADC.c: 45: break;
  3258  07A5  0008               	return
  3259  07A6                     l1705:	
  3260                           ;ADC.c: 46: case 0b11000000: adcRAW = adcRAW + 3;
  3261                           
  3262  07A6  1283               	bcf	3,5	;RP0=0, select bank0
  3263  07A7  0822               	movf	_adcRAW,w	;volatile
  3264  07A8  3E03               	addlw	3
  3265  07A9  00A2               	movwf	_adcRAW	;volatile
  3266  07AA  0823               	movf	_adcRAW+1,w	;volatile
  3267  07AB  1803               	skipnc
  3268  07AC  3E01               	addlw	1
  3269  07AD  3E00               	addlw	0
  3270  07AE  00A3               	movwf	_adcRAW+1	;volatile
  3271                           
  3272                           ;ADC.c: 49: }
  3273                           
  3274                           ;ADC.c: 48: default: adcRAW = adcRAW;
  3275                           
  3276                           ;ADC.c: 47: break;
  3277  07AF  0008               	return
  3278  07B0                     l1707:	
  3279  07B0  1683               	bsf	3,5	;RP0=1, select bank1
  3280  07B1  1303               	bcf	3,6	;RP1=0, select bank1
  3281  07B2  081E               	movf	30,w	;volatile
  3282                           
  3283                           ; Switch size 1, requested type "space"
  3284                           ; Number of cases is 3, Range of values is 64 to 192
  3285                           ; switch strategies available:
  3286                           ; Name         Instructions Cycles
  3287                           ; simple_byte           10     6 (average)
  3288                           ; jumptable            263     9 (fixed)
  3289                           ;	Chosen strategy is simple_byte
  3290  07B3  3A40               	xorlw	64	; case 64
  3291  07B4  1903               	skipnz
  3292  07B5  2F92               	goto	l1701
  3293  07B6  3AC0               	xorlw	192	; case 128
  3294  07B7  1903               	skipnz
  3295  07B8  2F9C               	goto	l1703
  3296  07B9  3A40               	xorlw	64	; case 192
  3297  07BA  1903               	skipnz
  3298  07BB  2FA6               	goto	l1705
  3299  07BC  2FBD               	goto	l476
  3300  07BD                     l476:	
  3301                           ;ADC.c: 51: return(adcRAW);
  3302                           ;	Return value of _getADC is never used
  3303                           
  3304  07BD  0008               	return
  3305  07BE                     __end_of_getADC:	
  3306                           
  3307                           	psect	text19
  3308  002F                     __ptext19:	
  3309 ;; *************** function _adcConvertMM *****************
  3310 ;; Defined at:
  3311 ;;		line 59 in file "ADC.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;  adcRAW          2   21[BANK0 ] unsigned int 
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;		None
  3316 ;; Return value:  Size  Location     Type
  3317 ;;                  2   21[BANK0 ] unsigned int 
  3318 ;; Registers used:
  3319 ;;		wreg, status,2, status,0, pclath, cstack
  3320 ;; Tracked objects:
  3321 ;;		On entry : 0/0
  3322 ;;		On exit  : 0/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3325 ;;      Params:         0       2       0       0       0
  3326 ;;      Locals:         0       0       0       0       0
  3327 ;;      Temps:          0       8       0       0       0
  3328 ;;      Totals:         0      10       0       0       0
  3329 ;;Total ram usage:       10 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:    3
  3332 ;; This function calls:
  3333 ;;		___aldiv
  3334 ;;		___lwdiv
  3335 ;;		___wmul
  3336 ;; This function is called by:
  3337 ;;		_ADCMain
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           
  3342                           ;psect for function _adcConvertMM
  3343  002F                     _adcConvertMM:	
  3344                           
  3345                           ;ADC.c: 61: if (adcRAW < 517 && adcRAW >= 513)
  3346                           
  3347                           ;incstack = 0
  3348                           ; Regs used in _adcConvertMM: [wreg+status,2+status,0+pclath+cstack]
  3349  002F  3002               	movlw	2
  3350  0030  1283               	bcf	3,5	;RP0=0, select bank0
  3351  0031  1303               	bcf	3,6	;RP1=0, select bank0
  3352  0032  025D               	subwf	adcConvertMM@adcRAW+1,w
  3353  0033  3005               	movlw	5
  3354  0034  1903               	skipnz
  3355  0035  025C               	subwf	adcConvertMM@adcRAW,w
  3356  0036  1803               	skipnc
  3357  0037  2898               	goto	l1715
  3358  0038  3002               	movlw	2
  3359  0039  025D               	subwf	adcConvertMM@adcRAW+1,w
  3360  003A  3001               	movlw	1
  3361  003B  1903               	skipnz
  3362  003C  025C               	subwf	adcConvertMM@adcRAW,w
  3363  003D  1C03               	skipc
  3364  003E  2898               	goto	l1715
  3365                           
  3366                           ;ADC.c: 62: Distance = (((51700 - adcRAW*100)/4) + 100);
  3367  003F  3000               	movlw	0
  3368  0040  00D0               	movwf	___aldiv@divisor+3
  3369  0041  3000               	movlw	0
  3370  0042  00CF               	movwf	___aldiv@divisor+2
  3371  0043  3000               	movlw	0
  3372  0044  00CE               	movwf	___aldiv@divisor+1
  3373  0045  3004               	movlw	4
  3374  0046  00CD               	movwf	___aldiv@divisor
  3375  0047  30F4               	movlw	244
  3376  0048  00DE               	movwf	??_adcConvertMM
  3377  0049  30C9               	movlw	201
  3378  004A  00DF               	movwf	??_adcConvertMM+1
  3379  004B  3000               	movlw	0
  3380  004C  00E0               	movwf	??_adcConvertMM+2
  3381  004D  3000               	movlw	0
  3382  004E  00E1               	movwf	??_adcConvertMM+3
  3383  004F  085D               	movf	adcConvertMM@adcRAW+1,w
  3384  0050  00C8               	movwf	___wmul@multiplier+1
  3385  0051  085C               	movf	adcConvertMM@adcRAW,w
  3386  0052  00C7               	movwf	___wmul@multiplier
  3387  0053  3064               	movlw	100
  3388  0054  00C9               	movwf	___wmul@multiplicand
  3389  0055  3000               	movlw	0
  3390  0056  00CA               	movwf	___wmul@multiplicand+1
  3391  0057  120A  158A  26F4  120A  118A  	fcall	___wmul
  3392  005C  1283               	bcf	3,5	;RP0=0, select bank0
  3393  005D  1303               	bcf	3,6	;RP1=0, select bank0
  3394  005E  0847               	movf	?___wmul,w
  3395  005F  00E2               	movwf	??_adcConvertMM+4
  3396  0060  0848               	movf	?___wmul+1,w
  3397  0061  00E3               	movwf	??_adcConvertMM+5
  3398  0062  01E4               	clrf	??_adcConvertMM+6
  3399  0063  01E5               	clrf	??_adcConvertMM+7
  3400  0064  09E2               	comf	??_adcConvertMM+4,f
  3401  0065  09E3               	comf	??_adcConvertMM+5,f
  3402  0066  09E4               	comf	??_adcConvertMM+6,f
  3403  0067  09E5               	comf	??_adcConvertMM+7,f
  3404  0068  0AE2               	incf	??_adcConvertMM+4,f
  3405  0069  1903               	skipnz
  3406  006A  0AE3               	incf	??_adcConvertMM+5,f
  3407  006B  1903               	skipnz
  3408  006C  0AE4               	incf	??_adcConvertMM+6,f
  3409  006D  1903               	skipnz
  3410  006E  0AE5               	incf	??_adcConvertMM+7,f
  3411  006F  0862               	movf	??_adcConvertMM+4,w
  3412  0070  07DE               	addwf	??_adcConvertMM,f
  3413  0071  0863               	movf	??_adcConvertMM+5,w
  3414  0072  1803               	skipnc
  3415  0073  0F63               	incfsz	??_adcConvertMM+5,w
  3416  0074  2876               	goto	u1190
  3417  0075  2877               	goto	u1191
  3418  0076                     u1190:	
  3419  0076  07DF               	addwf	??_adcConvertMM+1,f
  3420  0077                     u1191:	
  3421  0077  0864               	movf	??_adcConvertMM+6,w
  3422  0078  1803               	skipnc
  3423  0079  0F64               	incfsz	??_adcConvertMM+6,w
  3424  007A  287C               	goto	u1192
  3425  007B  287D               	goto	u1193
  3426  007C                     u1192:	
  3427  007C  07E0               	addwf	??_adcConvertMM+2,f
  3428  007D                     u1193:	
  3429  007D  0865               	movf	??_adcConvertMM+7,w
  3430  007E  1803               	skipnc
  3431  007F  0A65               	incf	??_adcConvertMM+7,w
  3432  0080  07E1               	addwf	??_adcConvertMM+3,f
  3433  0081  0861               	movf	??_adcConvertMM+3,w
  3434  0082  00D4               	movwf	___aldiv@dividend+3
  3435  0083  0860               	movf	??_adcConvertMM+2,w
  3436  0084  00D3               	movwf	___aldiv@dividend+2
  3437  0085  085F               	movf	??_adcConvertMM+1,w
  3438  0086  00D2               	movwf	___aldiv@dividend+1
  3439  0087  085E               	movf	??_adcConvertMM,w
  3440  0088  00D1               	movwf	___aldiv@dividend
  3441  0089  120A  118A  2611  120A  118A  	fcall	___aldiv
  3442  008E  1283               	bcf	3,5	;RP0=0, select bank0
  3443  008F  1303               	bcf	3,6	;RP1=0, select bank0
  3444  0090  084D               	movf	?___aldiv,w
  3445  0091  3E64               	addlw	100
  3446  0092  00A0               	movwf	_Distance	;volatile
  3447  0093  084E               	movf	?___aldiv+1,w
  3448  0094  1803               	skipnc
  3449  0095  3E01               	addlw	1
  3450  0096  3E00               	addlw	0
  3451  0097  00A1               	movwf	_Distance+1	;volatile
  3452  0098                     l1715:	
  3453                           
  3454                           ;ADC.c: 64: if (adcRAW < 513 && adcRAW >= 393)
  3455  0098  3002               	movlw	2
  3456  0099  025D               	subwf	adcConvertMM@adcRAW+1,w
  3457  009A  3001               	movlw	1
  3458  009B  1903               	skipnz
  3459  009C  025C               	subwf	adcConvertMM@adcRAW,w
  3460  009D  1803               	skipnc
  3461  009E  28FF               	goto	l1721
  3462  009F  3001               	movlw	1
  3463  00A0  025D               	subwf	adcConvertMM@adcRAW+1,w
  3464  00A1  3089               	movlw	137
  3465  00A2  1903               	skipnz
  3466  00A3  025C               	subwf	adcConvertMM@adcRAW,w
  3467  00A4  1C03               	skipc
  3468  00A5  28FF               	goto	l1721
  3469                           
  3470                           ;ADC.c: 65: Distance = (((51300 - adcRAW*100)/120) + 200);
  3471  00A6  3000               	movlw	0
  3472  00A7  00D0               	movwf	___aldiv@divisor+3
  3473  00A8  3000               	movlw	0
  3474  00A9  00CF               	movwf	___aldiv@divisor+2
  3475  00AA  3000               	movlw	0
  3476  00AB  00CE               	movwf	___aldiv@divisor+1
  3477  00AC  3078               	movlw	120
  3478  00AD  00CD               	movwf	___aldiv@divisor
  3479  00AE  3064               	movlw	100
  3480  00AF  00DE               	movwf	??_adcConvertMM
  3481  00B0  30C8               	movlw	200
  3482  00B1  00DF               	movwf	??_adcConvertMM+1
  3483  00B2  3000               	movlw	0
  3484  00B3  00E0               	movwf	??_adcConvertMM+2
  3485  00B4  3000               	movlw	0
  3486  00B5  00E1               	movwf	??_adcConvertMM+3
  3487  00B6  085D               	movf	adcConvertMM@adcRAW+1,w
  3488  00B7  00C8               	movwf	___wmul@multiplier+1
  3489  00B8  085C               	movf	adcConvertMM@adcRAW,w
  3490  00B9  00C7               	movwf	___wmul@multiplier
  3491  00BA  3064               	movlw	100
  3492  00BB  00C9               	movwf	___wmul@multiplicand
  3493  00BC  3000               	movlw	0
  3494  00BD  00CA               	movwf	___wmul@multiplicand+1
  3495  00BE  120A  158A  26F4  120A  118A  	fcall	___wmul
  3496  00C3  1283               	bcf	3,5	;RP0=0, select bank0
  3497  00C4  1303               	bcf	3,6	;RP1=0, select bank0
  3498  00C5  0847               	movf	?___wmul,w
  3499  00C6  00E2               	movwf	??_adcConvertMM+4
  3500  00C7  0848               	movf	?___wmul+1,w
  3501  00C8  00E3               	movwf	??_adcConvertMM+5
  3502  00C9  01E4               	clrf	??_adcConvertMM+6
  3503  00CA  01E5               	clrf	??_adcConvertMM+7
  3504  00CB  09E2               	comf	??_adcConvertMM+4,f
  3505  00CC  09E3               	comf	??_adcConvertMM+5,f
  3506  00CD  09E4               	comf	??_adcConvertMM+6,f
  3507  00CE  09E5               	comf	??_adcConvertMM+7,f
  3508  00CF  0AE2               	incf	??_adcConvertMM+4,f
  3509  00D0  1903               	skipnz
  3510  00D1  0AE3               	incf	??_adcConvertMM+5,f
  3511  00D2  1903               	skipnz
  3512  00D3  0AE4               	incf	??_adcConvertMM+6,f
  3513  00D4  1903               	skipnz
  3514  00D5  0AE5               	incf	??_adcConvertMM+7,f
  3515  00D6  0862               	movf	??_adcConvertMM+4,w
  3516  00D7  07DE               	addwf	??_adcConvertMM,f
  3517  00D8  0863               	movf	??_adcConvertMM+5,w
  3518  00D9  1803               	skipnc
  3519  00DA  0F63               	incfsz	??_adcConvertMM+5,w
  3520  00DB  28DD               	goto	u1220
  3521  00DC  28DE               	goto	u1221
  3522  00DD                     u1220:	
  3523  00DD  07DF               	addwf	??_adcConvertMM+1,f
  3524  00DE                     u1221:	
  3525  00DE  0864               	movf	??_adcConvertMM+6,w
  3526  00DF  1803               	skipnc
  3527  00E0  0F64               	incfsz	??_adcConvertMM+6,w
  3528  00E1  28E3               	goto	u1222
  3529  00E2  28E4               	goto	u1223
  3530  00E3                     u1222:	
  3531  00E3  07E0               	addwf	??_adcConvertMM+2,f
  3532  00E4                     u1223:	
  3533  00E4  0865               	movf	??_adcConvertMM+7,w
  3534  00E5  1803               	skipnc
  3535  00E6  0A65               	incf	??_adcConvertMM+7,w
  3536  00E7  07E1               	addwf	??_adcConvertMM+3,f
  3537  00E8  0861               	movf	??_adcConvertMM+3,w
  3538  00E9  00D4               	movwf	___aldiv@dividend+3
  3539  00EA  0860               	movf	??_adcConvertMM+2,w
  3540  00EB  00D3               	movwf	___aldiv@dividend+2
  3541  00EC  085F               	movf	??_adcConvertMM+1,w
  3542  00ED  00D2               	movwf	___aldiv@dividend+1
  3543  00EE  085E               	movf	??_adcConvertMM,w
  3544  00EF  00D1               	movwf	___aldiv@dividend
  3545  00F0  120A  118A  2611  120A  118A  	fcall	___aldiv
  3546  00F5  1283               	bcf	3,5	;RP0=0, select bank0
  3547  00F6  1303               	bcf	3,6	;RP1=0, select bank0
  3548  00F7  084D               	movf	?___aldiv,w
  3549  00F8  3EC8               	addlw	200
  3550  00F9  00A0               	movwf	_Distance	;volatile
  3551  00FA  084E               	movf	?___aldiv+1,w
  3552  00FB  1803               	skipnc
  3553  00FC  3E01               	addlw	1
  3554  00FD  3E00               	addlw	0
  3555  00FE  00A1               	movwf	_Distance+1	;volatile
  3556  00FF                     l1721:	
  3557                           
  3558                           ;ADC.c: 67: if (adcRAW < 393 && adcRAW >= 298)
  3559  00FF  3001               	movlw	1
  3560  0100  025D               	subwf	adcConvertMM@adcRAW+1,w
  3561  0101  3089               	movlw	137
  3562  0102  1903               	skipnz
  3563  0103  025C               	subwf	adcConvertMM@adcRAW,w
  3564  0104  1803               	skipnc
  3565  0105  2966               	goto	l1727
  3566  0106  3001               	movlw	1
  3567  0107  025D               	subwf	adcConvertMM@adcRAW+1,w
  3568  0108  302A               	movlw	42
  3569  0109  1903               	skipnz
  3570  010A  025C               	subwf	adcConvertMM@adcRAW,w
  3571  010B  1C03               	skipc
  3572  010C  2966               	goto	l1727
  3573                           
  3574                           ;ADC.c: 68: Distance = (((39300 - adcRAW*100)/95) + 300);
  3575  010D  3000               	movlw	0
  3576  010E  00D0               	movwf	___aldiv@divisor+3
  3577  010F  3000               	movlw	0
  3578  0110  00CF               	movwf	___aldiv@divisor+2
  3579  0111  3000               	movlw	0
  3580  0112  00CE               	movwf	___aldiv@divisor+1
  3581  0113  305F               	movlw	95
  3582  0114  00CD               	movwf	___aldiv@divisor
  3583  0115  3084               	movlw	132
  3584  0116  00DE               	movwf	??_adcConvertMM
  3585  0117  3099               	movlw	153
  3586  0118  00DF               	movwf	??_adcConvertMM+1
  3587  0119  3000               	movlw	0
  3588  011A  00E0               	movwf	??_adcConvertMM+2
  3589  011B  3000               	movlw	0
  3590  011C  00E1               	movwf	??_adcConvertMM+3
  3591  011D  085D               	movf	adcConvertMM@adcRAW+1,w
  3592  011E  00C8               	movwf	___wmul@multiplier+1
  3593  011F  085C               	movf	adcConvertMM@adcRAW,w
  3594  0120  00C7               	movwf	___wmul@multiplier
  3595  0121  3064               	movlw	100
  3596  0122  00C9               	movwf	___wmul@multiplicand
  3597  0123  3000               	movlw	0
  3598  0124  00CA               	movwf	___wmul@multiplicand+1
  3599  0125  120A  158A  26F4  120A  118A  	fcall	___wmul
  3600  012A  1283               	bcf	3,5	;RP0=0, select bank0
  3601  012B  1303               	bcf	3,6	;RP1=0, select bank0
  3602  012C  0847               	movf	?___wmul,w
  3603  012D  00E2               	movwf	??_adcConvertMM+4
  3604  012E  0848               	movf	?___wmul+1,w
  3605  012F  00E3               	movwf	??_adcConvertMM+5
  3606  0130  01E4               	clrf	??_adcConvertMM+6
  3607  0131  01E5               	clrf	??_adcConvertMM+7
  3608  0132  09E2               	comf	??_adcConvertMM+4,f
  3609  0133  09E3               	comf	??_adcConvertMM+5,f
  3610  0134  09E4               	comf	??_adcConvertMM+6,f
  3611  0135  09E5               	comf	??_adcConvertMM+7,f
  3612  0136  0AE2               	incf	??_adcConvertMM+4,f
  3613  0137  1903               	skipnz
  3614  0138  0AE3               	incf	??_adcConvertMM+5,f
  3615  0139  1903               	skipnz
  3616  013A  0AE4               	incf	??_adcConvertMM+6,f
  3617  013B  1903               	skipnz
  3618  013C  0AE5               	incf	??_adcConvertMM+7,f
  3619  013D  0862               	movf	??_adcConvertMM+4,w
  3620  013E  07DE               	addwf	??_adcConvertMM,f
  3621  013F  0863               	movf	??_adcConvertMM+5,w
  3622  0140  1803               	skipnc
  3623  0141  0F63               	incfsz	??_adcConvertMM+5,w
  3624  0142  2944               	goto	u1250
  3625  0143  2945               	goto	u1251
  3626  0144                     u1250:	
  3627  0144  07DF               	addwf	??_adcConvertMM+1,f
  3628  0145                     u1251:	
  3629  0145  0864               	movf	??_adcConvertMM+6,w
  3630  0146  1803               	skipnc
  3631  0147  0F64               	incfsz	??_adcConvertMM+6,w
  3632  0148  294A               	goto	u1252
  3633  0149  294B               	goto	u1253
  3634  014A                     u1252:	
  3635  014A  07E0               	addwf	??_adcConvertMM+2,f
  3636  014B                     u1253:	
  3637  014B  0865               	movf	??_adcConvertMM+7,w
  3638  014C  1803               	skipnc
  3639  014D  0A65               	incf	??_adcConvertMM+7,w
  3640  014E  07E1               	addwf	??_adcConvertMM+3,f
  3641  014F  0861               	movf	??_adcConvertMM+3,w
  3642  0150  00D4               	movwf	___aldiv@dividend+3
  3643  0151  0860               	movf	??_adcConvertMM+2,w
  3644  0152  00D3               	movwf	___aldiv@dividend+2
  3645  0153  085F               	movf	??_adcConvertMM+1,w
  3646  0154  00D2               	movwf	___aldiv@dividend+1
  3647  0155  085E               	movf	??_adcConvertMM,w
  3648  0156  00D1               	movwf	___aldiv@dividend
  3649  0157  120A  118A  2611  120A  118A  	fcall	___aldiv
  3650  015C  1283               	bcf	3,5	;RP0=0, select bank0
  3651  015D  1303               	bcf	3,6	;RP1=0, select bank0
  3652  015E  084D               	movf	?___aldiv,w
  3653  015F  3E2C               	addlw	44
  3654  0160  00A0               	movwf	_Distance	;volatile
  3655  0161  084E               	movf	?___aldiv+1,w
  3656  0162  1803               	skipnc
  3657  0163  3E01               	addlw	1
  3658  0164  3E01               	addlw	1
  3659  0165  00A1               	movwf	_Distance+1	;volatile
  3660  0166                     l1727:	
  3661                           
  3662                           ;ADC.c: 70: if (adcRAW < 298 && adcRAW >= 236)
  3663  0166  3001               	movlw	1
  3664  0167  025D               	subwf	adcConvertMM@adcRAW+1,w
  3665  0168  302A               	movlw	42
  3666  0169  1903               	skipnz
  3667  016A  025C               	subwf	adcConvertMM@adcRAW,w
  3668  016B  1803               	skipnc
  3669  016C  29A5               	goto	l1733
  3670  016D  3000               	movlw	0
  3671  016E  025D               	subwf	adcConvertMM@adcRAW+1,w
  3672  016F  30EC               	movlw	236
  3673  0170  1903               	skipnz
  3674  0171  025C               	subwf	adcConvertMM@adcRAW,w
  3675  0172  1C03               	skipc
  3676  0173  29A5               	goto	l1733
  3677                           
  3678                           ;ADC.c: 71: Distance = (((29800 - adcRAW*100)/62) + 400);
  3679  0174  303E               	movlw	62
  3680  0175  00CD               	movwf	___lwdiv@divisor
  3681  0176  3000               	movlw	0
  3682  0177  00CE               	movwf	___lwdiv@divisor+1
  3683  0178  085D               	movf	adcConvertMM@adcRAW+1,w
  3684  0179  00C8               	movwf	___wmul@multiplier+1
  3685  017A  085C               	movf	adcConvertMM@adcRAW,w
  3686  017B  00C7               	movwf	___wmul@multiplier
  3687  017C  3064               	movlw	100
  3688  017D  00C9               	movwf	___wmul@multiplicand
  3689  017E  3000               	movlw	0
  3690  017F  00CA               	movwf	___wmul@multiplicand+1
  3691  0180  120A  158A  26F4  120A  118A  	fcall	___wmul
  3692  0185  1283               	bcf	3,5	;RP0=0, select bank0
  3693  0186  1303               	bcf	3,6	;RP1=0, select bank0
  3694  0187  0947               	comf	?___wmul,w
  3695  0188  00DE               	movwf	??_adcConvertMM
  3696  0189  0948               	comf	?___wmul+1,w
  3697  018A  00DF               	movwf	??_adcConvertMM+1
  3698  018B  0ADE               	incf	??_adcConvertMM,f
  3699  018C  1903               	skipnz
  3700  018D  0ADF               	incf	??_adcConvertMM+1,f
  3701  018E  085E               	movf	??_adcConvertMM,w
  3702  018F  3E68               	addlw	104
  3703  0190  00CF               	movwf	___lwdiv@dividend
  3704  0191  085F               	movf	??_adcConvertMM+1,w
  3705  0192  1803               	skipnc
  3706  0193  3E01               	addlw	1
  3707  0194  3E74               	addlw	116
  3708  0195  00D0               	movwf	___lwdiv@dividend+1
  3709  0196  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  3710  019B  1283               	bcf	3,5	;RP0=0, select bank0
  3711  019C  1303               	bcf	3,6	;RP1=0, select bank0
  3712  019D  084D               	movf	?___lwdiv,w
  3713  019E  3E90               	addlw	144
  3714  019F  00A0               	movwf	_Distance	;volatile
  3715  01A0  084E               	movf	?___lwdiv+1,w
  3716  01A1  1803               	skipnc
  3717  01A2  3E01               	addlw	1
  3718  01A3  3E01               	addlw	1
  3719  01A4  00A1               	movwf	_Distance+1	;volatile
  3720  01A5                     l1733:	
  3721                           
  3722                           ;ADC.c: 73: if (adcRAW < 236 && adcRAW >= 194)
  3723  01A5  3000               	movlw	0
  3724  01A6  025D               	subwf	adcConvertMM@adcRAW+1,w
  3725  01A7  30EC               	movlw	236
  3726  01A8  1903               	skipnz
  3727  01A9  025C               	subwf	adcConvertMM@adcRAW,w
  3728  01AA  1803               	skipnc
  3729  01AB  29E4               	goto	l1739
  3730  01AC  3000               	movlw	0
  3731  01AD  025D               	subwf	adcConvertMM@adcRAW+1,w
  3732  01AE  30C2               	movlw	194
  3733  01AF  1903               	skipnz
  3734  01B0  025C               	subwf	adcConvertMM@adcRAW,w
  3735  01B1  1C03               	skipc
  3736  01B2  29E4               	goto	l1739
  3737                           
  3738                           ;ADC.c: 74: Distance = (((23600 - adcRAW*100)/42) + 500);
  3739  01B3  302A               	movlw	42
  3740  01B4  00CD               	movwf	___lwdiv@divisor
  3741  01B5  3000               	movlw	0
  3742  01B6  00CE               	movwf	___lwdiv@divisor+1
  3743  01B7  085D               	movf	adcConvertMM@adcRAW+1,w
  3744  01B8  00C8               	movwf	___wmul@multiplier+1
  3745  01B9  085C               	movf	adcConvertMM@adcRAW,w
  3746  01BA  00C7               	movwf	___wmul@multiplier
  3747  01BB  3064               	movlw	100
  3748  01BC  00C9               	movwf	___wmul@multiplicand
  3749  01BD  3000               	movlw	0
  3750  01BE  00CA               	movwf	___wmul@multiplicand+1
  3751  01BF  120A  158A  26F4  120A  118A  	fcall	___wmul
  3752  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  3753  01C5  1303               	bcf	3,6	;RP1=0, select bank0
  3754  01C6  0947               	comf	?___wmul,w
  3755  01C7  00DE               	movwf	??_adcConvertMM
  3756  01C8  0948               	comf	?___wmul+1,w
  3757  01C9  00DF               	movwf	??_adcConvertMM+1
  3758  01CA  0ADE               	incf	??_adcConvertMM,f
  3759  01CB  1903               	skipnz
  3760  01CC  0ADF               	incf	??_adcConvertMM+1,f
  3761  01CD  085E               	movf	??_adcConvertMM,w
  3762  01CE  3E30               	addlw	48
  3763  01CF  00CF               	movwf	___lwdiv@dividend
  3764  01D0  085F               	movf	??_adcConvertMM+1,w
  3765  01D1  1803               	skipnc
  3766  01D2  3E01               	addlw	1
  3767  01D3  3E5C               	addlw	92
  3768  01D4  00D0               	movwf	___lwdiv@dividend+1
  3769  01D5  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  3770  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  3771  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  3772  01DC  084D               	movf	?___lwdiv,w
  3773  01DD  3EF4               	addlw	244
  3774  01DE  00A0               	movwf	_Distance	;volatile
  3775  01DF  084E               	movf	?___lwdiv+1,w
  3776  01E0  1803               	skipnc
  3777  01E1  3E01               	addlw	1
  3778  01E2  3E01               	addlw	1
  3779  01E3  00A1               	movwf	_Distance+1	;volatile
  3780  01E4                     l1739:	
  3781                           
  3782                           ;ADC.c: 76: if (adcRAW < 194 && adcRAW >= 168)
  3783  01E4  3000               	movlw	0
  3784  01E5  025D               	subwf	adcConvertMM@adcRAW+1,w
  3785  01E6  30C2               	movlw	194
  3786  01E7  1903               	skipnz
  3787  01E8  025C               	subwf	adcConvertMM@adcRAW,w
  3788  01E9  1803               	skipnc
  3789  01EA  2A23               	goto	l1745
  3790  01EB  3000               	movlw	0
  3791  01EC  025D               	subwf	adcConvertMM@adcRAW+1,w
  3792  01ED  30A8               	movlw	168
  3793  01EE  1903               	skipnz
  3794  01EF  025C               	subwf	adcConvertMM@adcRAW,w
  3795  01F0  1C03               	skipc
  3796  01F1  2A23               	goto	l1745
  3797                           
  3798                           ;ADC.c: 77: Distance = (((19400 - adcRAW*100)/26) + 600);
  3799  01F2  301A               	movlw	26
  3800  01F3  00CD               	movwf	___lwdiv@divisor
  3801  01F4  3000               	movlw	0
  3802  01F5  00CE               	movwf	___lwdiv@divisor+1
  3803  01F6  085D               	movf	adcConvertMM@adcRAW+1,w
  3804  01F7  00C8               	movwf	___wmul@multiplier+1
  3805  01F8  085C               	movf	adcConvertMM@adcRAW,w
  3806  01F9  00C7               	movwf	___wmul@multiplier
  3807  01FA  3064               	movlw	100
  3808  01FB  00C9               	movwf	___wmul@multiplicand
  3809  01FC  3000               	movlw	0
  3810  01FD  00CA               	movwf	___wmul@multiplicand+1
  3811  01FE  120A  158A  26F4  120A  118A  	fcall	___wmul
  3812  0203  1283               	bcf	3,5	;RP0=0, select bank0
  3813  0204  1303               	bcf	3,6	;RP1=0, select bank0
  3814  0205  0947               	comf	?___wmul,w
  3815  0206  00DE               	movwf	??_adcConvertMM
  3816  0207  0948               	comf	?___wmul+1,w
  3817  0208  00DF               	movwf	??_adcConvertMM+1
  3818  0209  0ADE               	incf	??_adcConvertMM,f
  3819  020A  1903               	skipnz
  3820  020B  0ADF               	incf	??_adcConvertMM+1,f
  3821  020C  085E               	movf	??_adcConvertMM,w
  3822  020D  3EC8               	addlw	200
  3823  020E  00CF               	movwf	___lwdiv@dividend
  3824  020F  085F               	movf	??_adcConvertMM+1,w
  3825  0210  1803               	skipnc
  3826  0211  3E01               	addlw	1
  3827  0212  3E4B               	addlw	75
  3828  0213  00D0               	movwf	___lwdiv@dividend+1
  3829  0214  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  3830  0219  1283               	bcf	3,5	;RP0=0, select bank0
  3831  021A  1303               	bcf	3,6	;RP1=0, select bank0
  3832  021B  084D               	movf	?___lwdiv,w
  3833  021C  3E58               	addlw	88
  3834  021D  00A0               	movwf	_Distance	;volatile
  3835  021E  084E               	movf	?___lwdiv+1,w
  3836  021F  1803               	skipnc
  3837  0220  3E01               	addlw	1
  3838  0221  3E02               	addlw	2
  3839  0222  00A1               	movwf	_Distance+1	;volatile
  3840  0223                     l1745:	
  3841                           
  3842                           ;ADC.c: 79: if (adcRAW < 168 && adcRAW >= 144)
  3843  0223  3000               	movlw	0
  3844  0224  025D               	subwf	adcConvertMM@adcRAW+1,w
  3845  0225  30A8               	movlw	168
  3846  0226  1903               	skipnz
  3847  0227  025C               	subwf	adcConvertMM@adcRAW,w
  3848  0228  1803               	skipnc
  3849  0229  2A62               	goto	l1751
  3850  022A  3000               	movlw	0
  3851  022B  025D               	subwf	adcConvertMM@adcRAW+1,w
  3852  022C  3090               	movlw	144
  3853  022D  1903               	skipnz
  3854  022E  025C               	subwf	adcConvertMM@adcRAW,w
  3855  022F  1C03               	skipc
  3856  0230  2A62               	goto	l1751
  3857                           
  3858                           ;ADC.c: 80: Distance = (((16800 - adcRAW*100)/24) + 700);
  3859  0231  3018               	movlw	24
  3860  0232  00CD               	movwf	___lwdiv@divisor
  3861  0233  3000               	movlw	0
  3862  0234  00CE               	movwf	___lwdiv@divisor+1
  3863  0235  085D               	movf	adcConvertMM@adcRAW+1,w
  3864  0236  00C8               	movwf	___wmul@multiplier+1
  3865  0237  085C               	movf	adcConvertMM@adcRAW,w
  3866  0238  00C7               	movwf	___wmul@multiplier
  3867  0239  3064               	movlw	100
  3868  023A  00C9               	movwf	___wmul@multiplicand
  3869  023B  3000               	movlw	0
  3870  023C  00CA               	movwf	___wmul@multiplicand+1
  3871  023D  120A  158A  26F4  120A  118A  	fcall	___wmul
  3872  0242  1283               	bcf	3,5	;RP0=0, select bank0
  3873  0243  1303               	bcf	3,6	;RP1=0, select bank0
  3874  0244  0947               	comf	?___wmul,w
  3875  0245  00DE               	movwf	??_adcConvertMM
  3876  0246  0948               	comf	?___wmul+1,w
  3877  0247  00DF               	movwf	??_adcConvertMM+1
  3878  0248  0ADE               	incf	??_adcConvertMM,f
  3879  0249  1903               	skipnz
  3880  024A  0ADF               	incf	??_adcConvertMM+1,f
  3881  024B  085E               	movf	??_adcConvertMM,w
  3882  024C  3EA0               	addlw	160
  3883  024D  00CF               	movwf	___lwdiv@dividend
  3884  024E  085F               	movf	??_adcConvertMM+1,w
  3885  024F  1803               	skipnc
  3886  0250  3E01               	addlw	1
  3887  0251  3E41               	addlw	65
  3888  0252  00D0               	movwf	___lwdiv@dividend+1
  3889  0253  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  3890  0258  1283               	bcf	3,5	;RP0=0, select bank0
  3891  0259  1303               	bcf	3,6	;RP1=0, select bank0
  3892  025A  084D               	movf	?___lwdiv,w
  3893  025B  3EBC               	addlw	188
  3894  025C  00A0               	movwf	_Distance	;volatile
  3895  025D  084E               	movf	?___lwdiv+1,w
  3896  025E  1803               	skipnc
  3897  025F  3E01               	addlw	1
  3898  0260  3E02               	addlw	2
  3899  0261  00A1               	movwf	_Distance+1	;volatile
  3900  0262                     l1751:	
  3901                           
  3902                           ;ADC.c: 82: if (adcRAW < 144 && adcRAW >= 129)
  3903  0262  3000               	movlw	0
  3904  0263  025D               	subwf	adcConvertMM@adcRAW+1,w
  3905  0264  3090               	movlw	144
  3906  0265  1903               	skipnz
  3907  0266  025C               	subwf	adcConvertMM@adcRAW,w
  3908  0267  1803               	skipnc
  3909  0268  2AA1               	goto	l1757
  3910  0269  3000               	movlw	0
  3911  026A  025D               	subwf	adcConvertMM@adcRAW+1,w
  3912  026B  3081               	movlw	129
  3913  026C  1903               	skipnz
  3914  026D  025C               	subwf	adcConvertMM@adcRAW,w
  3915  026E  1C03               	skipc
  3916  026F  2AA1               	goto	l1757
  3917                           
  3918                           ;ADC.c: 83: Distance = (((14400 - adcRAW*100)/15) + 800);
  3919  0270  300F               	movlw	15
  3920  0271  00CD               	movwf	___lwdiv@divisor
  3921  0272  3000               	movlw	0
  3922  0273  00CE               	movwf	___lwdiv@divisor+1
  3923  0274  085D               	movf	adcConvertMM@adcRAW+1,w
  3924  0275  00C8               	movwf	___wmul@multiplier+1
  3925  0276  085C               	movf	adcConvertMM@adcRAW,w
  3926  0277  00C7               	movwf	___wmul@multiplier
  3927  0278  3064               	movlw	100
  3928  0279  00C9               	movwf	___wmul@multiplicand
  3929  027A  3000               	movlw	0
  3930  027B  00CA               	movwf	___wmul@multiplicand+1
  3931  027C  120A  158A  26F4  120A  118A  	fcall	___wmul
  3932  0281  1283               	bcf	3,5	;RP0=0, select bank0
  3933  0282  1303               	bcf	3,6	;RP1=0, select bank0
  3934  0283  0947               	comf	?___wmul,w
  3935  0284  00DE               	movwf	??_adcConvertMM
  3936  0285  0948               	comf	?___wmul+1,w
  3937  0286  00DF               	movwf	??_adcConvertMM+1
  3938  0287  0ADE               	incf	??_adcConvertMM,f
  3939  0288  1903               	skipnz
  3940  0289  0ADF               	incf	??_adcConvertMM+1,f
  3941  028A  085E               	movf	??_adcConvertMM,w
  3942  028B  3E40               	addlw	64
  3943  028C  00CF               	movwf	___lwdiv@dividend
  3944  028D  085F               	movf	??_adcConvertMM+1,w
  3945  028E  1803               	skipnc
  3946  028F  3E01               	addlw	1
  3947  0290  3E38               	addlw	56
  3948  0291  00D0               	movwf	___lwdiv@dividend+1
  3949  0292  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  3950  0297  1283               	bcf	3,5	;RP0=0, select bank0
  3951  0298  1303               	bcf	3,6	;RP1=0, select bank0
  3952  0299  084D               	movf	?___lwdiv,w
  3953  029A  3E20               	addlw	32
  3954  029B  00A0               	movwf	_Distance	;volatile
  3955  029C  084E               	movf	?___lwdiv+1,w
  3956  029D  1803               	skipnc
  3957  029E  3E01               	addlw	1
  3958  029F  3E03               	addlw	3
  3959  02A0  00A1               	movwf	_Distance+1	;volatile
  3960  02A1                     l1757:	
  3961                           
  3962                           ;ADC.c: 85: if (adcRAW < 129 && adcRAW >= 110)
  3963  02A1  3000               	movlw	0
  3964  02A2  025D               	subwf	adcConvertMM@adcRAW+1,w
  3965  02A3  3081               	movlw	129
  3966  02A4  1903               	skipnz
  3967  02A5  025C               	subwf	adcConvertMM@adcRAW,w
  3968  02A6  1803               	skipnc
  3969  02A7  2AE0               	goto	l1763
  3970  02A8  3000               	movlw	0
  3971  02A9  025D               	subwf	adcConvertMM@adcRAW+1,w
  3972  02AA  306E               	movlw	110
  3973  02AB  1903               	skipnz
  3974  02AC  025C               	subwf	adcConvertMM@adcRAW,w
  3975  02AD  1C03               	skipc
  3976  02AE  2AE0               	goto	l1763
  3977                           
  3978                           ;ADC.c: 86: Distance = (((12900 - adcRAW*100)/19) + 900 + 50);
  3979  02AF  3013               	movlw	19
  3980  02B0  00CD               	movwf	___lwdiv@divisor
  3981  02B1  3000               	movlw	0
  3982  02B2  00CE               	movwf	___lwdiv@divisor+1
  3983  02B3  085D               	movf	adcConvertMM@adcRAW+1,w
  3984  02B4  00C8               	movwf	___wmul@multiplier+1
  3985  02B5  085C               	movf	adcConvertMM@adcRAW,w
  3986  02B6  00C7               	movwf	___wmul@multiplier
  3987  02B7  3064               	movlw	100
  3988  02B8  00C9               	movwf	___wmul@multiplicand
  3989  02B9  3000               	movlw	0
  3990  02BA  00CA               	movwf	___wmul@multiplicand+1
  3991  02BB  120A  158A  26F4  120A  118A  	fcall	___wmul
  3992  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  3993  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  3994  02C2  0947               	comf	?___wmul,w
  3995  02C3  00DE               	movwf	??_adcConvertMM
  3996  02C4  0948               	comf	?___wmul+1,w
  3997  02C5  00DF               	movwf	??_adcConvertMM+1
  3998  02C6  0ADE               	incf	??_adcConvertMM,f
  3999  02C7  1903               	skipnz
  4000  02C8  0ADF               	incf	??_adcConvertMM+1,f
  4001  02C9  085E               	movf	??_adcConvertMM,w
  4002  02CA  3E64               	addlw	100
  4003  02CB  00CF               	movwf	___lwdiv@dividend
  4004  02CC  085F               	movf	??_adcConvertMM+1,w
  4005  02CD  1803               	skipnc
  4006  02CE  3E01               	addlw	1
  4007  02CF  3E32               	addlw	50
  4008  02D0  00D0               	movwf	___lwdiv@dividend+1
  4009  02D1  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  4010  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  4011  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  4012  02D8  084D               	movf	?___lwdiv,w
  4013  02D9  3EB6               	addlw	182
  4014  02DA  00A0               	movwf	_Distance	;volatile
  4015  02DB  084E               	movf	?___lwdiv+1,w
  4016  02DC  1803               	skipnc
  4017  02DD  3E01               	addlw	1
  4018  02DE  3E03               	addlw	3
  4019  02DF  00A1               	movwf	_Distance+1	;volatile
  4020  02E0                     l1763:	
  4021                           
  4022                           ;ADC.c: 88: if (adcRAW < 110 && adcRAW >= 98)
  4023  02E0  3000               	movlw	0
  4024  02E1  025D               	subwf	adcConvertMM@adcRAW+1,w
  4025  02E2  306E               	movlw	110
  4026  02E3  1903               	skipnz
  4027  02E4  025C               	subwf	adcConvertMM@adcRAW,w
  4028  02E5  1803               	skipnc
  4029  02E6  2B1F               	goto	l1769
  4030  02E7  3000               	movlw	0
  4031  02E8  025D               	subwf	adcConvertMM@adcRAW+1,w
  4032  02E9  3062               	movlw	98
  4033  02EA  1903               	skipnz
  4034  02EB  025C               	subwf	adcConvertMM@adcRAW,w
  4035  02EC  1C03               	skipc
  4036  02ED  2B1F               	goto	l1769
  4037                           
  4038                           ;ADC.c: 89: Distance = (((11000 - adcRAW*100)/12) + 1000 + 100);
  4039  02EE  300C               	movlw	12
  4040  02EF  00CD               	movwf	___lwdiv@divisor
  4041  02F0  3000               	movlw	0
  4042  02F1  00CE               	movwf	___lwdiv@divisor+1
  4043  02F2  085D               	movf	adcConvertMM@adcRAW+1,w
  4044  02F3  00C8               	movwf	___wmul@multiplier+1
  4045  02F4  085C               	movf	adcConvertMM@adcRAW,w
  4046  02F5  00C7               	movwf	___wmul@multiplier
  4047  02F6  3064               	movlw	100
  4048  02F7  00C9               	movwf	___wmul@multiplicand
  4049  02F8  3000               	movlw	0
  4050  02F9  00CA               	movwf	___wmul@multiplicand+1
  4051  02FA  120A  158A  26F4  120A  118A  	fcall	___wmul
  4052  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  4053  0300  1303               	bcf	3,6	;RP1=0, select bank0
  4054  0301  0947               	comf	?___wmul,w
  4055  0302  00DE               	movwf	??_adcConvertMM
  4056  0303  0948               	comf	?___wmul+1,w
  4057  0304  00DF               	movwf	??_adcConvertMM+1
  4058  0305  0ADE               	incf	??_adcConvertMM,f
  4059  0306  1903               	skipnz
  4060  0307  0ADF               	incf	??_adcConvertMM+1,f
  4061  0308  085E               	movf	??_adcConvertMM,w
  4062  0309  3EF8               	addlw	248
  4063  030A  00CF               	movwf	___lwdiv@dividend
  4064  030B  085F               	movf	??_adcConvertMM+1,w
  4065  030C  1803               	skipnc
  4066  030D  3E01               	addlw	1
  4067  030E  3E2A               	addlw	42
  4068  030F  00D0               	movwf	___lwdiv@dividend+1
  4069  0310  120A  158A  27C2  120A  118A  	fcall	___lwdiv
  4070  0315  1283               	bcf	3,5	;RP0=0, select bank0
  4071  0316  1303               	bcf	3,6	;RP1=0, select bank0
  4072  0317  084D               	movf	?___lwdiv,w
  4073  0318  3E4C               	addlw	76
  4074  0319  00A0               	movwf	_Distance	;volatile
  4075  031A  084E               	movf	?___lwdiv+1,w
  4076  031B  1803               	skipnc
  4077  031C  3E01               	addlw	1
  4078  031D  3E04               	addlw	4
  4079  031E  00A1               	movwf	_Distance+1	;volatile
  4080  031F                     l1769:	
  4081                           
  4082                           ;ADC.c: 91: if (adcRAW < 98 && adcRAW >= 90)
  4083  031F  3000               	movlw	0
  4084  0320  025D               	subwf	adcConvertMM@adcRAW+1,w
  4085  0321  3062               	movlw	98
  4086  0322  1903               	skipnz
  4087  0323  025C               	subwf	adcConvertMM@adcRAW,w
  4088  0324  1803               	skipnc
  4089  0325  2B5C               	goto	l1775
  4090  0326  3000               	movlw	0
  4091  0327  025D               	subwf	adcConvertMM@adcRAW+1,w
  4092  0328  305A               	movlw	90
  4093  0329  1903               	skipnz
  4094  032A  025C               	subwf	adcConvertMM@adcRAW,w
  4095  032B  1C03               	skipc
  4096  032C  2B5C               	goto	l1775
  4097                           
  4098                           ;ADC.c: 92: Distance = (((9800 - adcRAW*100)/8) + 1100 + 150);
  4099  032D  085D               	movf	adcConvertMM@adcRAW+1,w
  4100  032E  00C8               	movwf	___wmul@multiplier+1
  4101  032F  085C               	movf	adcConvertMM@adcRAW,w
  4102  0330  00C7               	movwf	___wmul@multiplier
  4103  0331  3064               	movlw	100
  4104  0332  00C9               	movwf	___wmul@multiplicand
  4105  0333  3000               	movlw	0
  4106  0334  00CA               	movwf	___wmul@multiplicand+1
  4107  0335  120A  158A  26F4  120A  118A  	fcall	___wmul
  4108  033A  1283               	bcf	3,5	;RP0=0, select bank0
  4109  033B  1303               	bcf	3,6	;RP1=0, select bank0
  4110  033C  0947               	comf	?___wmul,w
  4111  033D  00DE               	movwf	??_adcConvertMM
  4112  033E  0948               	comf	?___wmul+1,w
  4113  033F  00DF               	movwf	??_adcConvertMM+1
  4114  0340  0ADE               	incf	??_adcConvertMM,f
  4115  0341  1903               	skipnz
  4116  0342  0ADF               	incf	??_adcConvertMM+1,f
  4117  0343  085E               	movf	??_adcConvertMM,w
  4118  0344  3E48               	addlw	72
  4119  0345  00E0               	movwf	??_adcConvertMM+2
  4120  0346  085F               	movf	??_adcConvertMM+1,w
  4121  0347  1803               	skipnc
  4122  0348  3E01               	addlw	1
  4123  0349  3E26               	addlw	38
  4124  034A  00E1               	movwf	??_adcConvertMM+3
  4125  034B  1003               	clrc
  4126  034C  0CE1               	rrf	??_adcConvertMM+3,f
  4127  034D  0CE0               	rrf	??_adcConvertMM+2,f
  4128  034E  1003               	clrc
  4129  034F  0CE1               	rrf	??_adcConvertMM+3,f
  4130  0350  0CE0               	rrf	??_adcConvertMM+2,f
  4131  0351  1003               	clrc
  4132  0352  0CE1               	rrf	??_adcConvertMM+3,f
  4133  0353  0CE0               	rrf	??_adcConvertMM+2,f
  4134  0354  0860               	movf	??_adcConvertMM+2,w
  4135  0355  3EE2               	addlw	226
  4136  0356  00A0               	movwf	_Distance	;volatile
  4137  0357  0861               	movf	??_adcConvertMM+3,w
  4138  0358  1803               	skipnc
  4139  0359  3E01               	addlw	1
  4140  035A  3E04               	addlw	4
  4141  035B  00A1               	movwf	_Distance+1	;volatile
  4142  035C                     l1775:	
  4143                           
  4144                           ;ADC.c: 94: if(adcRAW < 90 || adcRAW >= 517)
  4145  035C  3000               	movlw	0
  4146  035D  025D               	subwf	adcConvertMM@adcRAW+1,w
  4147  035E  305A               	movlw	90
  4148  035F  1903               	skipnz
  4149  0360  025C               	subwf	adcConvertMM@adcRAW,w
  4150  0361  1C03               	skipc
  4151  0362  2B6A               	goto	l1779
  4152  0363  3002               	movlw	2
  4153  0364  025D               	subwf	adcConvertMM@adcRAW+1,w
  4154  0365  3005               	movlw	5
  4155  0366  1903               	skipnz
  4156  0367  025C               	subwf	adcConvertMM@adcRAW,w
  4157  0368  1C03               	skipc
  4158  0369  0008               	return
  4159  036A                     l1779:	
  4160                           
  4161                           ;ADC.c: 95: Distance = 0;
  4162  036A  01A0               	clrf	_Distance	;volatile
  4163  036B  01A1               	clrf	_Distance+1	;volatile
  4164  036C  0008               	return
  4165  036D                     __end_of_adcConvertMM:	
  4166                           ;ADC.c: 97: return(Distance);
  4167                           ;	Return value of _adcConvertMM is never used
  4168                           
  4169                           
  4170                           	psect	text20
  4171  0EF4                     __ptext20:	
  4172 ;; *************** function ___wmul *****************
  4173 ;; Defined at:
  4174 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  4175 ;; Parameters:    Size  Location     Type
  4176 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4177 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4178 ;; Auto vars:     Size  Location     Type
  4179 ;;  product         2    4[BANK0 ] unsigned int 
  4180 ;; Return value:  Size  Location     Type
  4181 ;;                  2    0[BANK0 ] unsigned int 
  4182 ;; Registers used:
  4183 ;;		wreg, status,2, status,0
  4184 ;; Tracked objects:
  4185 ;;		On entry : 0/0
  4186 ;;		On exit  : 0/0
  4187 ;;		Unchanged: 0/0
  4188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4189 ;;      Params:         0       4       0       0       0
  4190 ;;      Locals:         0       2       0       0       0
  4191 ;;      Temps:          0       0       0       0       0
  4192 ;;      Totals:         0       6       0       0       0
  4193 ;;Total ram usage:        6 bytes
  4194 ;; Hardware stack levels used:    1
  4195 ;; Hardware stack levels required when called:    2
  4196 ;; This function calls:
  4197 ;;		Nothing
  4198 ;; This function is called by:
  4199 ;;		_adcConvertMM
  4200 ;; This function uses a non-reentrant model
  4201 ;;
  4202                           
  4203                           
  4204                           ;psect for function ___wmul
  4205  0EF4                     ___wmul:	
  4206                           
  4207                           ;incstack = 0
  4208                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4209  0EF4  1283               	bcf	3,5	;RP0=0, select bank0
  4210  0EF5  1303               	bcf	3,6	;RP1=0, select bank0
  4211  0EF6  01CB               	clrf	___wmul@product
  4212  0EF7  01CC               	clrf	___wmul@product+1
  4213  0EF8                     l1561:	
  4214  0EF8  1C47               	btfss	___wmul@multiplier,0
  4215  0EF9  2F00               	goto	l577
  4216  0EFA  0849               	movf	___wmul@multiplicand,w
  4217  0EFB  07CB               	addwf	___wmul@product,f
  4218  0EFC  1803               	skipnc
  4219  0EFD  0ACC               	incf	___wmul@product+1,f
  4220  0EFE  084A               	movf	___wmul@multiplicand+1,w
  4221  0EFF  07CC               	addwf	___wmul@product+1,f
  4222  0F00                     l577:	
  4223  0F00  3001               	movlw	1
  4224  0F01                     u885:	
  4225  0F01  1003               	clrc
  4226  0F02  0DC9               	rlf	___wmul@multiplicand,f
  4227  0F03  0DCA               	rlf	___wmul@multiplicand+1,f
  4228  0F04  3EFF               	addlw	-1
  4229  0F05  1D03               	skipz
  4230  0F06  2F01               	goto	u885
  4231  0F07  3001               	movlw	1
  4232  0F08                     u895:	
  4233  0F08  1003               	clrc
  4234  0F09  0CC8               	rrf	___wmul@multiplier+1,f
  4235  0F0A  0CC7               	rrf	___wmul@multiplier,f
  4236  0F0B  3EFF               	addlw	-1
  4237  0F0C  1D03               	skipz
  4238  0F0D  2F08               	goto	u895
  4239  0F0E  0847               	movf	___wmul@multiplier,w
  4240  0F0F  0448               	iorwf	___wmul@multiplier+1,w
  4241  0F10  1D03               	btfss	3,2
  4242  0F11  2EF8               	goto	l1561
  4243  0F12  084C               	movf	___wmul@product+1,w
  4244  0F13  00C8               	movwf	?___wmul+1
  4245  0F14  084B               	movf	___wmul@product,w
  4246  0F15  00C7               	movwf	?___wmul
  4247  0F16  0008               	return
  4248  0F17                     __end_of___wmul:	
  4249                           
  4250                           	psect	text21
  4251  0FC2                     __ptext21:	
  4252 ;; *************** function ___lwdiv *****************
  4253 ;; Defined at:
  4254 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  4255 ;; Parameters:    Size  Location     Type
  4256 ;;  divisor         2    6[BANK0 ] unsigned int 
  4257 ;;  dividend        2    8[BANK0 ] unsigned int 
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;  quotient        2   11[BANK0 ] unsigned int 
  4260 ;;  counter         1   13[BANK0 ] unsigned char 
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  2    6[BANK0 ] unsigned int 
  4263 ;; Registers used:
  4264 ;;		wreg, status,2, status,0
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4270 ;;      Params:         0       4       0       0       0
  4271 ;;      Locals:         0       3       0       0       0
  4272 ;;      Temps:          0       1       0       0       0
  4273 ;;      Totals:         0       8       0       0       0
  4274 ;;Total ram usage:        8 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    2
  4277 ;; This function calls:
  4278 ;;		Nothing
  4279 ;; This function is called by:
  4280 ;;		_adcConvertMM
  4281 ;; This function uses a non-reentrant model
  4282 ;;
  4283                           
  4284                           
  4285                           ;psect for function ___lwdiv
  4286  0FC2                     ___lwdiv:	
  4287                           
  4288                           ;incstack = 0
  4289                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4290  0FC2  1283               	bcf	3,5	;RP0=0, select bank0
  4291  0FC3  1303               	bcf	3,6	;RP1=0, select bank0
  4292  0FC4  01D2               	clrf	___lwdiv@quotient
  4293  0FC5  01D3               	clrf	___lwdiv@quotient+1
  4294  0FC6  084D               	movf	___lwdiv@divisor,w
  4295  0FC7  044E               	iorwf	___lwdiv@divisor+1,w
  4296  0FC8  1903               	btfsc	3,2
  4297  0FC9  2FFB               	goto	l1635
  4298  0FCA  01D4               	clrf	___lwdiv@counter
  4299  0FCB  0AD4               	incf	___lwdiv@counter,f
  4300  0FCC                     l1623:	
  4301  0FCC  1BCE               	btfsc	___lwdiv@divisor+1,7
  4302  0FCD  2FDA               	goto	l1625
  4303  0FCE  3001               	movlw	1
  4304  0FCF                     u1025:	
  4305  0FCF  1003               	clrc
  4306  0FD0  0DCD               	rlf	___lwdiv@divisor,f
  4307  0FD1  0DCE               	rlf	___lwdiv@divisor+1,f
  4308  0FD2  3EFF               	addlw	-1
  4309  0FD3  1D03               	skipz
  4310  0FD4  2FCF               	goto	u1025
  4311  0FD5  3001               	movlw	1
  4312  0FD6  00D1               	movwf	??___lwdiv
  4313  0FD7  0851               	movf	??___lwdiv,w
  4314  0FD8  07D4               	addwf	___lwdiv@counter,f
  4315  0FD9  2FCC               	goto	l1623
  4316  0FDA                     l1625:	
  4317  0FDA  3001               	movlw	1
  4318  0FDB                     u1045:	
  4319  0FDB  1003               	clrc
  4320  0FDC  0DD2               	rlf	___lwdiv@quotient,f
  4321  0FDD  0DD3               	rlf	___lwdiv@quotient+1,f
  4322  0FDE  3EFF               	addlw	-1
  4323  0FDF  1D03               	skipz
  4324  0FE0  2FDB               	goto	u1045
  4325  0FE1  084E               	movf	___lwdiv@divisor+1,w
  4326  0FE2  0250               	subwf	___lwdiv@dividend+1,w
  4327  0FE3  1D03               	skipz
  4328  0FE4  2FE7               	goto	u1055
  4329  0FE5  084D               	movf	___lwdiv@divisor,w
  4330  0FE6  024F               	subwf	___lwdiv@dividend,w
  4331  0FE7                     u1055:	
  4332  0FE7  1C03               	skipc
  4333  0FE8  2FF0               	goto	l1631
  4334  0FE9  084D               	movf	___lwdiv@divisor,w
  4335  0FEA  02CF               	subwf	___lwdiv@dividend,f
  4336  0FEB  084E               	movf	___lwdiv@divisor+1,w
  4337  0FEC  1C03               	skipc
  4338  0FED  03D0               	decf	___lwdiv@dividend+1,f
  4339  0FEE  02D0               	subwf	___lwdiv@dividend+1,f
  4340  0FEF  1452               	bsf	___lwdiv@quotient,0
  4341  0FF0                     l1631:	
  4342  0FF0  3001               	movlw	1
  4343  0FF1                     u1065:	
  4344  0FF1  1003               	clrc
  4345  0FF2  0CCE               	rrf	___lwdiv@divisor+1,f
  4346  0FF3  0CCD               	rrf	___lwdiv@divisor,f
  4347  0FF4  3EFF               	addlw	-1
  4348  0FF5  1D03               	skipz
  4349  0FF6  2FF1               	goto	u1065
  4350  0FF7  3001               	movlw	1
  4351  0FF8  02D4               	subwf	___lwdiv@counter,f
  4352  0FF9  1D03               	btfss	3,2
  4353  0FFA  2FDA               	goto	l1625
  4354  0FFB                     l1635:	
  4355  0FFB  0853               	movf	___lwdiv@quotient+1,w
  4356  0FFC  00CE               	movwf	?___lwdiv+1
  4357  0FFD  0852               	movf	___lwdiv@quotient,w
  4358  0FFE  00CD               	movwf	?___lwdiv
  4359  0FFF  0008               	return
  4360  1000                     __end_of___lwdiv:	
  4361                           
  4362                           	psect	text22
  4363  0611                     __ptext22:	
  4364 ;; *************** function ___aldiv *****************
  4365 ;; Defined at:
  4366 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;  divisor         4    6[BANK0 ] long 
  4369 ;;  dividend        4   10[BANK0 ] long 
  4370 ;; Auto vars:     Size  Location     Type
  4371 ;;  quotient        4   17[BANK0 ] long 
  4372 ;;  sign            1   16[BANK0 ] unsigned char 
  4373 ;;  counter         1   15[BANK0 ] unsigned char 
  4374 ;; Return value:  Size  Location     Type
  4375 ;;                  4    6[BANK0 ] long 
  4376 ;; Registers used:
  4377 ;;		wreg, status,2, status,0
  4378 ;; Tracked objects:
  4379 ;;		On entry : 0/0
  4380 ;;		On exit  : 0/0
  4381 ;;		Unchanged: 0/0
  4382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4383 ;;      Params:         0       8       0       0       0
  4384 ;;      Locals:         0       6       0       0       0
  4385 ;;      Temps:          0       1       0       0       0
  4386 ;;      Totals:         0      15       0       0       0
  4387 ;;Total ram usage:       15 bytes
  4388 ;; Hardware stack levels used:    1
  4389 ;; Hardware stack levels required when called:    2
  4390 ;; This function calls:
  4391 ;;		Nothing
  4392 ;; This function is called by:
  4393 ;;		_adcConvertMM
  4394 ;; This function uses a non-reentrant model
  4395 ;;
  4396                           
  4397                           
  4398                           ;psect for function ___aldiv
  4399  0611                     ___aldiv:	
  4400                           
  4401                           ;incstack = 0
  4402                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4403  0611  1283               	bcf	3,5	;RP0=0, select bank0
  4404  0612  1303               	bcf	3,6	;RP1=0, select bank0
  4405  0613  01D7               	clrf	___aldiv@sign
  4406  0614  1FD0               	btfss	___aldiv@divisor+3,7
  4407  0615  2E23               	goto	l632
  4408  0616  09CD               	comf	___aldiv@divisor,f
  4409  0617  09CE               	comf	___aldiv@divisor+1,f
  4410  0618  09CF               	comf	___aldiv@divisor+2,f
  4411  0619  09D0               	comf	___aldiv@divisor+3,f
  4412  061A  0ACD               	incf	___aldiv@divisor,f
  4413  061B  1903               	skipnz
  4414  061C  0ACE               	incf	___aldiv@divisor+1,f
  4415  061D  1903               	skipnz
  4416  061E  0ACF               	incf	___aldiv@divisor+2,f
  4417  061F  1903               	skipnz
  4418  0620  0AD0               	incf	___aldiv@divisor+3,f
  4419  0621  01D7               	clrf	___aldiv@sign
  4420  0622  0AD7               	incf	___aldiv@sign,f
  4421  0623                     l632:	
  4422  0623  1FD4               	btfss	___aldiv@dividend+3,7
  4423  0624  2E34               	goto	l1583
  4424  0625  09D1               	comf	___aldiv@dividend,f
  4425  0626  09D2               	comf	___aldiv@dividend+1,f
  4426  0627  09D3               	comf	___aldiv@dividend+2,f
  4427  0628  09D4               	comf	___aldiv@dividend+3,f
  4428  0629  0AD1               	incf	___aldiv@dividend,f
  4429  062A  1903               	skipnz
  4430  062B  0AD2               	incf	___aldiv@dividend+1,f
  4431  062C  1903               	skipnz
  4432  062D  0AD3               	incf	___aldiv@dividend+2,f
  4433  062E  1903               	skipnz
  4434  062F  0AD4               	incf	___aldiv@dividend+3,f
  4435  0630  3001               	movlw	1
  4436  0631  00D5               	movwf	??___aldiv
  4437  0632  0855               	movf	??___aldiv,w
  4438  0633  06D7               	xorwf	___aldiv@sign,f
  4439  0634                     l1583:	
  4440  0634  3000               	movlw	0
  4441  0635  00DB               	movwf	___aldiv@quotient+3
  4442  0636  3000               	movlw	0
  4443  0637  00DA               	movwf	___aldiv@quotient+2
  4444  0638  3000               	movlw	0
  4445  0639  00D9               	movwf	___aldiv@quotient+1
  4446  063A  3000               	movlw	0
  4447  063B  00D8               	movwf	___aldiv@quotient
  4448  063C  0850               	movf	___aldiv@divisor+3,w
  4449  063D  044F               	iorwf	___aldiv@divisor+2,w
  4450  063E  044E               	iorwf	___aldiv@divisor+1,w
  4451  063F  044D               	iorwf	___aldiv@divisor,w
  4452  0640  1903               	skipnz
  4453  0641  2E89               	goto	l1605
  4454  0642  01D6               	clrf	___aldiv@counter
  4455  0643  0AD6               	incf	___aldiv@counter,f
  4456  0644                     l1591:	
  4457  0644  1BD0               	btfsc	___aldiv@divisor+3,7
  4458  0645  2E54               	goto	l1593
  4459  0646  3001               	movlw	1
  4460  0647  00D5               	movwf	??___aldiv
  4461  0648                     u945:	
  4462  0648  1003               	clrc
  4463  0649  0DCD               	rlf	___aldiv@divisor,f
  4464  064A  0DCE               	rlf	___aldiv@divisor+1,f
  4465  064B  0DCF               	rlf	___aldiv@divisor+2,f
  4466  064C  0DD0               	rlf	___aldiv@divisor+3,f
  4467  064D  0BD5               	decfsz	??___aldiv,f
  4468  064E  2E48               	goto	u945
  4469  064F  3001               	movlw	1
  4470  0650  00D5               	movwf	??___aldiv
  4471  0651  0855               	movf	??___aldiv,w
  4472  0652  07D6               	addwf	___aldiv@counter,f
  4473  0653  2E44               	goto	l1591
  4474  0654                     l1593:	
  4475  0654  3001               	movlw	1
  4476  0655  00D5               	movwf	??___aldiv
  4477  0656                     u965:	
  4478  0656  1003               	clrc
  4479  0657  0DD8               	rlf	___aldiv@quotient,f
  4480  0658  0DD9               	rlf	___aldiv@quotient+1,f
  4481  0659  0DDA               	rlf	___aldiv@quotient+2,f
  4482  065A  0DDB               	rlf	___aldiv@quotient+3,f
  4483  065B  0BD5               	decfsz	??___aldiv,f
  4484  065C  2E56               	goto	u965
  4485  065D  0850               	movf	___aldiv@divisor+3,w
  4486  065E  0254               	subwf	___aldiv@dividend+3,w
  4487  065F  1D03               	skipz
  4488  0660  2E6B               	goto	u975
  4489  0661  084F               	movf	___aldiv@divisor+2,w
  4490  0662  0253               	subwf	___aldiv@dividend+2,w
  4491  0663  1D03               	skipz
  4492  0664  2E6B               	goto	u975
  4493  0665  084E               	movf	___aldiv@divisor+1,w
  4494  0666  0252               	subwf	___aldiv@dividend+1,w
  4495  0667  1D03               	skipz
  4496  0668  2E6B               	goto	u975
  4497  0669  084D               	movf	___aldiv@divisor,w
  4498  066A  0251               	subwf	___aldiv@dividend,w
  4499  066B                     u975:	
  4500  066B  1C03               	skipc
  4501  066C  2E7C               	goto	l1601
  4502  066D  084D               	movf	___aldiv@divisor,w
  4503  066E  02D1               	subwf	___aldiv@dividend,f
  4504  066F  084E               	movf	___aldiv@divisor+1,w
  4505  0670  1C03               	skipc
  4506  0671  0F4E               	incfsz	___aldiv@divisor+1,w
  4507  0672  02D2               	subwf	___aldiv@dividend+1,f
  4508  0673  084F               	movf	___aldiv@divisor+2,w
  4509  0674  1C03               	skipc
  4510  0675  0F4F               	incfsz	___aldiv@divisor+2,w
  4511  0676  02D3               	subwf	___aldiv@dividend+2,f
  4512  0677  0850               	movf	___aldiv@divisor+3,w
  4513  0678  1C03               	skipc
  4514  0679  0F50               	incfsz	___aldiv@divisor+3,w
  4515  067A  02D4               	subwf	___aldiv@dividend+3,f
  4516  067B  1458               	bsf	___aldiv@quotient,0
  4517  067C                     l1601:	
  4518  067C  3001               	movlw	1
  4519  067D                     u985:	
  4520  067D  1003               	clrc
  4521  067E  0CD0               	rrf	___aldiv@divisor+3,f
  4522  067F  0CCF               	rrf	___aldiv@divisor+2,f
  4523  0680  0CCE               	rrf	___aldiv@divisor+1,f
  4524  0681  0CCD               	rrf	___aldiv@divisor,f
  4525  0682  3EFF               	addlw	-1
  4526  0683  1D03               	skipz
  4527  0684  2E7D               	goto	u985
  4528  0685  3001               	movlw	1
  4529  0686  02D6               	subwf	___aldiv@counter,f
  4530  0687  1D03               	btfss	3,2
  4531  0688  2E54               	goto	l1593
  4532  0689                     l1605:	
  4533  0689  0857               	movf	___aldiv@sign,w
  4534  068A  1903               	btfsc	3,2
  4535  068B  2E97               	goto	l1609
  4536  068C  09D8               	comf	___aldiv@quotient,f
  4537  068D  09D9               	comf	___aldiv@quotient+1,f
  4538  068E  09DA               	comf	___aldiv@quotient+2,f
  4539  068F  09DB               	comf	___aldiv@quotient+3,f
  4540  0690  0AD8               	incf	___aldiv@quotient,f
  4541  0691  1903               	skipnz
  4542  0692  0AD9               	incf	___aldiv@quotient+1,f
  4543  0693  1903               	skipnz
  4544  0694  0ADA               	incf	___aldiv@quotient+2,f
  4545  0695  1903               	skipnz
  4546  0696  0ADB               	incf	___aldiv@quotient+3,f
  4547  0697                     l1609:	
  4548  0697  085B               	movf	___aldiv@quotient+3,w
  4549  0698  00D0               	movwf	?___aldiv+3
  4550  0699  085A               	movf	___aldiv@quotient+2,w
  4551  069A  00CF               	movwf	?___aldiv+2
  4552  069B  0859               	movf	___aldiv@quotient+1,w
  4553  069C  00CE               	movwf	?___aldiv+1
  4554  069D  0858               	movf	___aldiv@quotient,w
  4555  069E  00CD               	movwf	?___aldiv
  4556  069F  0008               	return
  4557  06A0                     __end_of___aldiv:	
  4558                           
  4559                           	psect	text23
  4560  0733                     __ptext23:	
  4561 ;; *************** function _isr *****************
  4562 ;; Defined at:
  4563 ;;		line 26 in file "main.c"
  4564 ;; Parameters:    Size  Location     Type
  4565 ;;		None
  4566 ;; Auto vars:     Size  Location     Type
  4567 ;;		None
  4568 ;; Return value:  Size  Location     Type
  4569 ;;                  1    wreg      void 
  4570 ;; Registers used:
  4571 ;;		wreg, status,2, status,0, pclath, cstack
  4572 ;; Tracked objects:
  4573 ;;		On entry : 0/0
  4574 ;;		On exit  : 0/0
  4575 ;;		Unchanged: 0/0
  4576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4577 ;;      Params:         0       0       0       0       0
  4578 ;;      Locals:         0       0       0       0       0
  4579 ;;      Temps:          5       0       0       0       0
  4580 ;;      Totals:         5       0       0       0       0
  4581 ;;Total ram usage:        5 bytes
  4582 ;; Hardware stack levels used:    1
  4583 ;; Hardware stack levels required when called:    1
  4584 ;; This function calls:
  4585 ;;		___lwmod
  4586 ;; This function is called by:
  4587 ;;		Interrupt level 1
  4588 ;; This function uses a non-reentrant model
  4589 ;;
  4590                           
  4591                           
  4592                           ;psect for function _isr
  4593  0733                     _isr:	
  4594                           
  4595                           ;main.c: 28: if(TMR0IF){
  4596  0733  1D0B               	btfss	11,2	;volatile
  4597  0734  2F6E               	goto	i1l119
  4598                           
  4599                           ;main.c: 29: TMR0IF = 0;
  4600  0735  110B               	bcf	11,2	;volatile
  4601                           
  4602                           ;main.c: 30: TMR0 = 100;
  4603  0736  3064               	movlw	100
  4604  0737  0081               	movwf	1	;volatile
  4605                           
  4606                           ;main.c: 33: if(time_count % 1 == 0) {
  4607  0738  3001               	movlw	1
  4608  0739  07B0               	addwf	_time_count,f	;volatile
  4609  073A  1803               	skipnc
  4610  073B  0AB1               	incf	_time_count+1,f	;volatile
  4611  073C  3000               	movlw	0
  4612  073D  07B1               	addwf	_time_count+1,f	;volatile
  4613                           
  4614                           ;main.c: 35: RC2 = 1; __nop(); RC2 = 0;;
  4615  073E  1507               	bsf	7,2	;volatile
  4616  073F  0000               	nop
  4617  0740  1283               	bcf	3,5	;RP0=0, select bank0
  4618  0741  1303               	bcf	3,6	;RP1=0, select bank0
  4619  0742  1107               	bcf	7,2	;volatile
  4620                           
  4621                           ;main.c: 36: }
  4622                           ;main.c: 38: if(time_count % 1000 == 0){
  4623  0743  30E8               	movlw	232
  4624  0744  00F0               	movwf	___lwmod@divisor
  4625  0745  3003               	movlw	3
  4626  0746  00F1               	movwf	___lwmod@divisor+1
  4627  0747  0831               	movf	_time_count+1,w	;volatile
  4628  0748  00F3               	movwf	___lwmod@dividend+1
  4629  0749  0830               	movf	_time_count,w	;volatile
  4630  074A  00F2               	movwf	___lwmod@dividend
  4631  074B  120A  158A  2790  120A  118A  	fcall	___lwmod
  4632  0750  0870               	movf	?___lwmod,w
  4633  0751  0471               	iorwf	?___lwmod+1,w
  4634  0752  1D03               	btfss	3,2
  4635  0753  2F5A               	goto	i1l2005
  4636                           
  4637                           ;main.c: 39: RB4 = !RB4;
  4638  0754  3010               	movlw	16
  4639  0755  1283               	bcf	3,5	;RP0=0, select bank0
  4640  0756  1303               	bcf	3,6	;RP1=0, select bank0
  4641  0757  0686               	xorwf	6,f
  4642                           
  4643                           ;main.c: 41: time_count = 0;
  4644  0758  01B0               	clrf	_time_count	;volatile
  4645  0759  01B1               	clrf	_time_count+1	;volatile
  4646  075A                     i1l2005:	
  4647                           
  4648                           ;main.c: 42: }
  4649                           ;main.c: 44: if (!RB0 == 1)
  4650  075A  1283               	bcf	3,5	;RP0=0, select bank0
  4651  075B  1303               	bcf	3,6	;RP1=0, select bank0
  4652  075C  1806               	btfsc	6,0	;volatile
  4653  075D  2F62               	goto	i1l2009
  4654                           
  4655                           ;main.c: 45: PB8Counter++;
  4656  075E  3001               	movlw	1
  4657  075F  00F6               	movwf	??_isr
  4658  0760  0876               	movf	??_isr,w
  4659  0761  07BA               	addwf	_PB8Counter,f
  4660  0762                     i1l2009:	
  4661                           
  4662                           ;main.c: 46: if (!RB1 == 1)
  4663  0762  1886               	btfsc	6,1	;volatile
  4664  0763  2F68               	goto	i1l2013
  4665                           
  4666                           ;main.c: 47: PB7Counter++;
  4667  0764  3001               	movlw	1
  4668  0765  00F6               	movwf	??_isr
  4669  0766  0876               	movf	??_isr,w
  4670  0767  07B9               	addwf	_PB7Counter,f
  4671  0768                     i1l2013:	
  4672                           
  4673                           ;main.c: 48: if (!RB2 == 1)
  4674  0768  1906               	btfsc	6,2	;volatile
  4675  0769  2F6E               	goto	i1l119
  4676                           
  4677                           ;main.c: 49: PB6Counter++;
  4678  076A  3001               	movlw	1
  4679  076B  00F6               	movwf	??_isr
  4680  076C  0876               	movf	??_isr,w
  4681  076D  07B8               	addwf	_PB6Counter,f
  4682  076E                     i1l119:	
  4683  076E  087A               	movf	??_isr+4,w
  4684  076F  00FF               	movwf	127
  4685  0770  0879               	movf	??_isr+3,w
  4686  0771  008A               	movwf	10
  4687  0772  0878               	movf	??_isr+2,w
  4688  0773  0084               	movwf	4
  4689  0774  0E77               	swapf	(??_isr+1)^(0+-128),w
  4690  0775  0083               	movwf	3
  4691  0776  0EFE               	swapf	126,f
  4692  0777  0E7E               	swapf	126,w
  4693  0778  0009               	retfie
  4694  0779                     __end_of_isr:	
  4695                           
  4696                           	psect	intentry
  4697  0004                     __pintentry:	
  4698                           ;incstack = 0
  4699                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  4700                           
  4701  0004                     interrupt_function:	
  4702  007E                     saved_w	set	btemp
  4703  0004  00FE               	movwf	btemp
  4704  0005  0E03               	swapf	3,w
  4705  0006  00F7               	movwf	??_isr+1
  4706  0007  0804               	movf	4,w
  4707  0008  00F8               	movwf	??_isr+2
  4708  0009  080A               	movf	10,w
  4709  000A  00F9               	movwf	??_isr+3
  4710  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4711  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4712  000D  087F               	movf	btemp+1,w
  4713  000E  00FA               	movwf	??_isr+4
  4714  000F  120A  118A  2F33   	ljmp	_isr
  4715                           
  4716                           	psect	text24
  4717  0F90                     __ptext24:	
  4718 ;; *************** function ___lwmod *****************
  4719 ;; Defined at:
  4720 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;  divisor         2    0[COMMON] unsigned int 
  4723 ;;  dividend        2    2[COMMON] unsigned int 
  4724 ;; Auto vars:     Size  Location     Type
  4725 ;;  counter         1    5[COMMON] unsigned char 
  4726 ;; Return value:  Size  Location     Type
  4727 ;;                  2    0[COMMON] unsigned int 
  4728 ;; Registers used:
  4729 ;;		wreg, status,2, status,0
  4730 ;; Tracked objects:
  4731 ;;		On entry : 0/0
  4732 ;;		On exit  : 0/0
  4733 ;;		Unchanged: 0/0
  4734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4735 ;;      Params:         4       0       0       0       0
  4736 ;;      Locals:         1       0       0       0       0
  4737 ;;      Temps:          1       0       0       0       0
  4738 ;;      Totals:         6       0       0       0       0
  4739 ;;Total ram usage:        6 bytes
  4740 ;; Hardware stack levels used:    1
  4741 ;; This function calls:
  4742 ;;		Nothing
  4743 ;; This function is called by:
  4744 ;;		_isr
  4745 ;; This function uses a non-reentrant model
  4746 ;;
  4747                           
  4748                           
  4749                           ;psect for function ___lwmod
  4750  0F90                     ___lwmod:	
  4751                           
  4752                           ;incstack = 0
  4753                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4754  0F90  0870               	movf	___lwmod@divisor,w
  4755  0F91  0471               	iorwf	___lwmod@divisor+1,w
  4756  0F92  1903               	btfsc	3,2
  4757  0F93  2FBD               	goto	i1l1983
  4758  0F94  01F5               	clrf	___lwmod@counter
  4759  0F95  0AF5               	incf	___lwmod@counter,f
  4760  0F96                     i1l1973:	
  4761  0F96  1BF1               	btfsc	___lwmod@divisor+1,7
  4762  0F97  2FA4               	goto	i1l1975
  4763  0F98  3001               	movlw	1
  4764  0F99                     u149_25:	
  4765  0F99  1003               	clrc
  4766  0F9A  0DF0               	rlf	___lwmod@divisor,f
  4767  0F9B  0DF1               	rlf	___lwmod@divisor+1,f
  4768  0F9C  3EFF               	addlw	-1
  4769  0F9D  1D03               	skipz
  4770  0F9E  2F99               	goto	u149_25
  4771  0F9F  3001               	movlw	1
  4772  0FA0  00F4               	movwf	??___lwmod
  4773  0FA1  0874               	movf	??___lwmod,w
  4774  0FA2  07F5               	addwf	___lwmod@counter,f
  4775  0FA3  2F96               	goto	i1l1973
  4776  0FA4                     i1l1975:	
  4777  0FA4  0871               	movf	___lwmod@divisor+1,w
  4778  0FA5  0273               	subwf	___lwmod@dividend+1,w
  4779  0FA6  1D03               	skipz
  4780  0FA7  2FAA               	goto	u151_25
  4781  0FA8  0870               	movf	___lwmod@divisor,w
  4782  0FA9  0272               	subwf	___lwmod@dividend,w
  4783  0FAA                     u151_25:	
  4784  0FAA  1C03               	skipc
  4785  0FAB  2FB2               	goto	i1l1979
  4786  0FAC  0870               	movf	___lwmod@divisor,w
  4787  0FAD  02F2               	subwf	___lwmod@dividend,f
  4788  0FAE  0871               	movf	___lwmod@divisor+1,w
  4789  0FAF  1C03               	skipc
  4790  0FB0  03F3               	decf	___lwmod@dividend+1,f
  4791  0FB1  02F3               	subwf	___lwmod@dividend+1,f
  4792  0FB2                     i1l1979:	
  4793  0FB2  3001               	movlw	1
  4794  0FB3                     u152_25:	
  4795  0FB3  1003               	clrc
  4796  0FB4  0CF1               	rrf	___lwmod@divisor+1,f
  4797  0FB5  0CF0               	rrf	___lwmod@divisor,f
  4798  0FB6  3EFF               	addlw	-1
  4799  0FB7  1D03               	skipz
  4800  0FB8  2FB3               	goto	u152_25
  4801  0FB9  3001               	movlw	1
  4802  0FBA  02F5               	subwf	___lwmod@counter,f
  4803  0FBB  1D03               	btfss	3,2
  4804  0FBC  2FA4               	goto	i1l1975
  4805  0FBD                     i1l1983:	
  4806  0FBD  0873               	movf	___lwmod@dividend+1,w
  4807  0FBE  00F1               	movwf	?___lwmod+1
  4808  0FBF  0872               	movf	___lwmod@dividend,w
  4809  0FC0  00F0               	movwf	?___lwmod
  4810  0FC1  0008               	return
  4811  0FC2                     __end_of___lwmod:	
  4812  007E                     btemp	set	126	;btemp
  4813  007E                     wtemp	set	126
  4814  007E                     wtemp0	set	126
  4815  0080                     wtemp1	set	128
  4816  0082                     wtemp2	set	130
  4817  0084                     wtemp3	set	132
  4818  0086                     wtemp4	set	134
  4819  0088                     wtemp5	set	136
  4820  007F                     wtemp6	set	127
  4821  007E                     ttemp	set	126
  4822  007E                     ttemp0	set	126
  4823  0081                     ttemp1	set	129
  4824  0084                     ttemp2	set	132
  4825  0087                     ttemp3	set	135
  4826  007F                     ttemp4	set	127
  4827  007E                     ltemp	set	126
  4828  007E                     ltemp0	set	126
  4829  0082                     ltemp1	set	130
  4830  0086                     ltemp2	set	134
  4831  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     35      76
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->___lwmod

Critical Paths under _main in BANK0

    _setupLCD->_lcdWriteControl
    _getSensorData->_ser_getch
    _DriveDirect->_ser_putch
    _Drive->_ser_putch
    _ADCMain->_adcConvertMM
    _lcdWriteToDigitBCD->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl
    _adcConvertMM->___aldiv
    ___lwdiv->___wmul
    ___aldiv->___wmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    6592
                                             31 BANK0      4     4      0
                            _ADCMain
                              _Drive
                        _DriveDirect
                      _getSensorData
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
                            _moveCCW
                             _moveCW
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      30
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      22
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _moveCW                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _moveCCW                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _getSensorData                                        7     5      2     430
                                              2 BANK0      7     5      2
                          _ser_getch
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _ser_getch                                            2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DriveDirect                                          4     1      3     746
                                              1 BANK0      4     1      3
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _Drive                                                4     1      3     428
                                              1 BANK0      4     1      3
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCMain                                              0     0      0    4247
                       _adcConvertMM
                             _getADC
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (1) _lcdWriteToDigitBCD                                  12    10      2     599
                                              3 BANK0     12    10      2
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (2) _lcdWriteData                                         3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcdSetCursor                                         1     1      0      45
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getADC                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _adcConvertMM                                        10     8      2    3603
                                             21 BANK0     10     8      2
                            ___aldiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1258
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     904
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     618
                                              6 BANK0     15     7      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  5     5      0     265
                                              6 COMMON     5     5      0
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCMain
     _adcConvertMM
       ___aldiv
         ___wmul (ARG)
       ___lwdiv
         ___wmul (ARG)
       ___wmul
     _getADC
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteToDigitBCD
       _lcdWriteData
   _Drive
     _ser_putch
   _DriveDirect
     _ser_putch
   _getSensorData
     _ser_getch
     _ser_putch
   _lcdSetCursor
     _lcdWriteControl
   _lcdWriteToDigitBCD
     _lcdWriteData
   _moveCCW
   _moveCW
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)
   ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     23      4C       5       95.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       E       1      100.0%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5A      12        0.0%
ABS                  0      0      5A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Sep 08 19:45:02 2016

               ??_getSensorData 004B                     __CFG_CP$OFF 0000                              _GO 00FA  
                            fsr 0004             ___wmul@multiplicand 0049                     Drive@speedH 004B  
                   Drive@speedL 0048                             l217 05F7                             l330 0E58  
                           l336 0E4B                             l265 0E77                             l632 0623  
                           l467 0782                             l476 07BD                             l577 0F00  
                           _GIE 005F                             _RB0 0030                             _RB1 0031  
                           _RB2 0032                   ??_DriveDirect 004B                             _RC2 003A  
                           _RB4 0034                             _RE0 0048                             _RE1 0049  
                           _RE2 004A                    __CFG_CPD$OFF 0000                             u945 0648  
                           u965 0656                             u885 0F01                             u975 066B  
                           u895 0F08                             u985 067D                             _isr 0733  
               __end_of_ADCMain 0EF4                             fsr0 0004                             indf 0000  
                  __CFG_FOSC$HS 0000                  ??_lcdWriteData 0047                    __CFG_LVP$OFF 0000  
                          l2101 04F5                            l2113 050D                            l2115 0546  
                          l2123 056F                            l2037 03E0                            l2055 0413  
                          l2047 03F6                            l1601 067C                            l2081 045F  
                          l2065 042B                            l2083 0498                            l2067 0441  
                          l2059 0424                            l1605 0689                            l1701 0792  
                          l2085 04A3                            l2069 0442                            l1631 0FF0  
                          l1623 0FCC                            l1703 079C                            l1609 0697  
                          l1625 0FDA                            l1561 0EF8                            l1721 00FF  
                          l1705 07A6                            l1635 0FFB                            l1715 0098  
                          l1707 07B0                            l2099 04B9                            l1733 01A5  
                          l1591 0644                            l1583 0634                            l1751 0262  
                          l1727 0166                            l1671 05CA                            l1663 05AC  
                          l1593 0654                            l1745 0223                            l1681 05EA  
                          l1665 05B4                            l1657 0588                            l1921 06FD  
                          l1913 06F9                            l1905 06F5                            l1763 02E0  
                          l1739 01E4                            l1675 05D8                            l1659 059E  
                          l1851 06A7                            l1757 02A1                            l1669 05C2  
                          l1933 0708                            l1925 06FF                            l1917 06FB  
                          l1909 06F7                            l1941 070F                            l1861 06B0  
                          l1853 06AC                            l1775 035C                            l1951 07E0  
                          l1943 0729                            l1769 031F                            l1953 07E1  
                          l1937 070C                            l1929 0701                            l1881 06BD  
                          l1873 06B6                            l1865 06B2                            l1857 06AE  
                          l1779 036A                            l1883 06C4                            l1877 06B8  
                          l1869 06B4                            l1887 06C7                            l1889 06E1  
                          ?_isr 0070                            u1025 0FCF                            u1220 00DD  
                          u1045 0FDB                            u1221 00DE                            u1222 00E3  
                          u1055 0FE7                            u1223 00E4                            u1065 0FF1  
                          u1250 0144                            u1251 0145                            u1252 014A  
                          u1253 014B                            u1190 0076                            u1191 0077  
                          u1192 007C                            u1193 007D                            u1615 03F4  
                          u1705 0518                            u1625 0408                            u1715 0562  
                          u1635 0422                            u1645 0431                            u1807 0E8D  
                          u1817 0EA0                            u1665 046A                            u1737 0375  
                          u1747 03A4                            u1757 03B9                            u1695 04C4  
                          u1767 03CE                            u1777 0EB9                            u1787 06E5  
                          _PEIE 005E                            u1797 072D                            _RCIF 0065  
                          _TMR0 0001                            _TRMT 04C1                    __CFG_WRT$OFF 0000  
                          _radH 0041                            _radL 0042                            _main 036D  
                          _loop 002A                            btemp 007E                            ltemp 007E  
                          start 0012                            ttemp 007E                            wtemp 007E  
                         ??_isr 0076                 __end_of___aldiv 06A0                           ?_main 0070  
                 __CFG_WDTE$OFF 0000                 __end_of___lwdiv 1000                           i1l119 076E  
               __end_of___lwmod 0FC2                   _totalDistTrav 0032                           _RCREG 001A  
                         _RCSTA 0018                           _SPBRG 0099                           _PORTA 0005  
                         _PORTC 0007                           _PORTD 0008                           _PORTE 0009  
                         _TRISA 0085                           _TRISB 0086                           _TRISC 0087  
                         _TRISD 0088                           _TRISE 0089                           _SSPIF 0063  
                         _TXREG 0019                           _TXSTA 0098                           _Drive 0F17  
    __end_of_lcdWriteToDigitBCD 0611                           _count 003E             __end_of_DriveDirect 0F67  
               __end_of_moveCCW 0733                  __pbitbssCOMMON 03E8                  __CFG_BOREN$OFF 0000  
                         pclath 000A                           ltemp0 007E                           ltemp1 0082  
                         ltemp2 0086                           ltemp3 0080                      _LeftSpeedH 0036  
                    _LeftSpeedL 0037                           ttemp0 007E                           ttemp1 0081  
                         ttemp2 0084                           ttemp3 0087                           ttemp4 007F  
                         status 0003                           wtemp0 007E                           wtemp1 0080  
                         wtemp2 0082                           wtemp3 0084                           wtemp4 0086  
                         wtemp5 0088                           wtemp6 007F          DriveDirect@RightSpeedH 004B  
        DriveDirect@RightSpeedL 0048                 __initialization 0015                    __end_of_main 057A  
                     ??_ADCMain 0066        __size_of_lcdWriteControl 0014                          ??_main 0066  
          __end_of_lcdSetCursor 0E4B                          ?_Drive 0048                          _ADCON0 001F  
                        _ADCON1 009F                          _ADRESH 001E                          _ADRESL 009E  
                        i1l2013 0768                          i1l2005 075A                          i1l2009 0762  
                        i1l1973 0F96                          i1l1975 0FA4                          i1l1983 0FBD  
                        i1l1979 0FB2                          u151_25 0FAA                          u152_25 0FB3  
                        u149_25 0F99                          _TMR0IE 005D                          _TMR0IF 005A  
                        _SSPCON 0014                          _SSPBUF 0013                  __CFG_PWRTE$OFF 0000  
              _totalangleTurned 0034                          _adcRAW 0022                       ??___aldiv 0055  
                        ___wmul 0EF4                          _getADC 0779            __end_of_lcdWriteData 0E92  
                     ??___lwdiv 0051                       ??___lwmod 0074                          _moveCW 06A0  
                        _speedH 0043                          _speedL 0044                          _rxbyte 007C  
                   _DriveDirect 0F3F                __end_of_ser_init 0E70                __end_of_setupADC 0EBC  
                     ??_moveCCW 0047                __end_of_setupLCD 0F90                __end_of_setupSPI 0ED4  
                        saved_w 007E                      _adcClosest 006A         __end_of__initialization 002B  
                 __end_of_Drive 0F3F                  __pcstackCOMMON 0070                    __pidataBANK0 07FC  
                       ??_Drive 004B               ??_lcdWriteControl 0047                      __pbssBANK0 0020  
           lcdSetCursor@address 004A                      __pmaintext 036D                         ?___wmul 0047  
                       ?_getADC 0070                      __pintentry 0004           __size_of_lcdSetCursor 0009  
                       _ADCMain 0ED4           __end_of_getSensorData 07FC                         ?_moveCW 0070  
            __size_of_ser_getch 000A              __size_of_ser_putch 000C                     _RightSpeedH 003B  
                   _RightSpeedL 003C                         _SSPSTAT 0094           __size_of_lcdWriteData 0013  
                  _lcdSetCursor 0E42              _lcdWriteToDigitBCD 057A                       ?_ser_init 0070  
                     ?_setupADC 0070                       ?_setupLCD 0070                       ?_setupSPI 0070  
                       ___aldiv 0611                 __size_of___wmul 0023                 __size_of_getADC 0045  
                       ___lwdiv 0FC2                         ___lwmod 0F90             ?_lcdWriteToDigitBCD 004A  
                       _degrees 0026                 __size_of_moveCW 004B                         __ptext1 0E70  
                       __ptext2 0EBC                         __ptext3 0F67                         __ptext4 0EA6  
                       __ptext5 0E61                         __ptext6 06A0                         __ptext7 06EB  
                       __ptext8 07BE                         __ptext9 0E4B                    __size_of_isr 0046  
                       _lowByte 003F                         _moveCCW 06EB                ___aldiv@dividend 0051  
                       clrloop0 0E3B                    _lcdWriteData 0E7F            end_of_initialization 002B  
          ??_lcdWriteToDigitBCD 004C               __end_of_ser_getch 0E55               __end_of_ser_putch 0E61  
                    ??_ser_init 0047                      ??_setupADC 0047                      ??_setupLCD 004A  
                    ??_setupSPI 0047                ___aldiv@quotient 0058                      _time_count 0030  
                  ?_DriveDirect 0048              adcConvertMM@adcRAW 005C                       Drive@radH 0049  
                     Drive@radL 004A                   ?_spi_transfer 0070                 ser_getch@rxbyte 0048  
                 ?_adcConvertMM 005C                 _lcdWriteControl 0E92                  __end_of___wmul 0F17  
                __end_of_getADC 07BE                  __end_of_moveCW 06EB             start_initialization 0015  
                   __end_of_isr 0779                  ??_spi_transfer 0047                  ??_adcConvertMM 005E  
                      ??___wmul 004B                        ??_getADC 0047                     __pdataBANK0 006A  
                      ?_ADCMain 0070                        ??_moveCW 0047                    _negativeFlag 0040  
                   _FLAG_1000MS 03E8                     __pbssCOMMON 007B                       ___latbits 0002  
                 __pcstackBANK0 0047         __end_of_lcdWriteControl 0EA6                ___lwdiv@dividend 004F  
                   _angleTurned 0024                        ?___aldiv 004D               __size_of_ser_init 000F  
                      ?___lwdiv 004D                        ?___lwmod 0070               __size_of_setupADC 0016  
             __size_of_setupLCD 0029               __size_of_setupSPI 0018                        ?_moveCCW 0070  
                __size_of_Drive 0028            __size_of_DriveDirect 0028                ___lwdiv@quotient 0052  
               main@controlByte 0069         lcdWriteControl@databyte 0049                 ___aldiv@divisor 004D  
             interrupt_function 0004                 ___aldiv@counter 0056          __size_of_getSensorData 003E  
                ___wmul@product 004B                      ser_putch@c 0047           getSensorData@packetID 004F  
                     clear_ram0 0E3A                       _ser_getch 0E4B                       _ser_putch 0E55  
                     _stepCount 0045                __size_of_ADCMain 0020            __end_of_spi_transfer 0E7F  
             ___wmul@multiplier 0047                spi_transfer@data 0049                spi_transfer@temp 0048  
          __end_of_adcConvertMM 036D                     _controlByte 003D                        _Distance 0020  
          lcdWriteData@databyte 0049     __size_of_lcdWriteToDigitBCD 0097                      ?_ser_getch 0070  
              ?_lcdWriteControl 0070                      ?_ser_putch 0070                __size_of___aldiv 008F  
              __size_of___lwdiv 003E                __size_of___lwmod 0032                   _getSensorData 07BE  
                   _currentStep 007B  lcdWriteToDigitBCD@TenThouDigit 0052                 ___lwdiv@divisor 004D  
              __size_of_moveCCW 0048                 ___lwdiv@counter 0054                        __ptext10 0F3F  
                      __ptext11 0F17                        __ptext20 0EF4                        __ptext12 0E55  
                      __ptext21 0FC2                        __ptext13 0ED4                        __ptext22 0611  
                      __ptext14 057A                        __ptext23 0733                        __ptext15 0E7F  
                      __ptext24 0F90                        __ptext16 0E42                        __ptext17 0E92  
                      __ptext18 0779                        __ptext19 002F                        _highByte 0046  
                      _distTrav 0028                   __size_of_main 020D                        _ser_init 0E61  
                    _PB6Counter 0038                        _setupADC 0EA6                        _setupLCD 0F67  
                      _setupSPI 0EBC                      _PB7Counter 0039     lcdWriteToDigitBCD@HunsDigit 004E  
                    _PB8Counter 003A     lcdWriteToDigitBCD@OnesDigit 0054                  ?_getSensorData 0049  
   lcdWriteToDigitBCD@TensDigit 004C     lcdWriteToDigitBCD@ThouDigit 0050                        intlevel1 0000  
              ___lwmod@dividend 0072                   ?_lcdSetCursor 0070                     ??_ser_getch 0047  
                   ??_ser_putch 0047             getSensorData@sensor 004D           __size_of_spi_transfer 000F  
         __size_of_adcConvertMM 033E                      _OPTION_REG 0081                 ___lwmod@divisor 0070  
               ___lwmod@counter 0075                    ___aldiv@sign 0057              getSensorData@bytes 0049  
                 ?_lcdWriteData 0070          lcdWriteToDigitBCD@data 004A                    _spi_transfer 0E70  
                ??_lcdSetCursor 004A                    _stepCountNeg 002E                     _stepClosest 002C  
         DriveDirect@LeftSpeedH 0049           DriveDirect@LeftSpeedL 004A                    _adcConvertMM 002F  
