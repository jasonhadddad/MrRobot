

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Wed Aug 31 19:53:35 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     	;# 
    28  0001                     	;# 
    29  0002                     	;# 
    30  0003                     	;# 
    31  0004                     	;# 
    32  0005                     	;# 
    33  0006                     	;# 
    34  0007                     	;# 
    35  0008                     	;# 
    36  0009                     	;# 
    37  000A                     	;# 
    38  000B                     	;# 
    39  000C                     	;# 
    40  000D                     	;# 
    41  000E                     	;# 
    42  000E                     	;# 
    43  000F                     	;# 
    44  0010                     	;# 
    45  0011                     	;# 
    46  0012                     	;# 
    47  0013                     	;# 
    48  0014                     	;# 
    49  0015                     	;# 
    50  0015                     	;# 
    51  0016                     	;# 
    52  0017                     	;# 
    53  0018                     	;# 
    54  0019                     	;# 
    55  001A                     	;# 
    56  001B                     	;# 
    57  001B                     	;# 
    58  001C                     	;# 
    59  001D                     	;# 
    60  001E                     	;# 
    61  001F                     	;# 
    62  0081                     	;# 
    63  0085                     	;# 
    64  0086                     	;# 
    65  0087                     	;# 
    66  0088                     	;# 
    67  0089                     	;# 
    68  008C                     	;# 
    69  008D                     	;# 
    70  008E                     	;# 
    71  0091                     	;# 
    72  0092                     	;# 
    73  0093                     	;# 
    74  0094                     	;# 
    75  0098                     	;# 
    76  0099                     	;# 
    77  009C                     	;# 
    78  009D                     	;# 
    79  009E                     	;# 
    80  009F                     	;# 
    81  010C                     	;# 
    82  010D                     	;# 
    83  010E                     	;# 
    84  010F                     	;# 
    85  018C                     	;# 
    86  018D                     	;# 
    87  0000                     	;# 
    88  0001                     	;# 
    89  0002                     	;# 
    90  0003                     	;# 
    91  0004                     	;# 
    92  0005                     	;# 
    93  0006                     	;# 
    94  0007                     	;# 
    95  0008                     	;# 
    96  0009                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000D                     	;# 
   101  000E                     	;# 
   102  000E                     	;# 
   103  000F                     	;# 
   104  0010                     	;# 
   105  0011                     	;# 
   106  0012                     	;# 
   107  0013                     	;# 
   108  0014                     	;# 
   109  0015                     	;# 
   110  0015                     	;# 
   111  0016                     	;# 
   112  0017                     	;# 
   113  0018                     	;# 
   114  0019                     	;# 
   115  001A                     	;# 
   116  001B                     	;# 
   117  001B                     	;# 
   118  001C                     	;# 
   119  001D                     	;# 
   120  001E                     	;# 
   121  001F                     	;# 
   122  0081                     	;# 
   123  0085                     	;# 
   124  0086                     	;# 
   125  0087                     	;# 
   126  0088                     	;# 
   127  0089                     	;# 
   128  008C                     	;# 
   129  008D                     	;# 
   130  008E                     	;# 
   131  0091                     	;# 
   132  0092                     	;# 
   133  0093                     	;# 
   134  0094                     	;# 
   135  0098                     	;# 
   136  0099                     	;# 
   137  009C                     	;# 
   138  009D                     	;# 
   139  009E                     	;# 
   140  009F                     	;# 
   141  010C                     	;# 
   142  010D                     	;# 
   143  010E                     	;# 
   144  010F                     	;# 
   145  018C                     	;# 
   146  018D                     	;# 
   147  0000                     	;# 
   148  0001                     	;# 
   149  0002                     	;# 
   150  0003                     	;# 
   151  0004                     	;# 
   152  0005                     	;# 
   153  0006                     	;# 
   154  0007                     	;# 
   155  0008                     	;# 
   156  0009                     	;# 
   157  000A                     	;# 
   158  000B                     	;# 
   159  000C                     	;# 
   160  000D                     	;# 
   161  000E                     	;# 
   162  000E                     	;# 
   163  000F                     	;# 
   164  0010                     	;# 
   165  0011                     	;# 
   166  0012                     	;# 
   167  0013                     	;# 
   168  0014                     	;# 
   169  0015                     	;# 
   170  0015                     	;# 
   171  0016                     	;# 
   172  0017                     	;# 
   173  0018                     	;# 
   174  0019                     	;# 
   175  001A                     	;# 
   176  001B                     	;# 
   177  001B                     	;# 
   178  001C                     	;# 
   179  001D                     	;# 
   180  001E                     	;# 
   181  001F                     	;# 
   182  0081                     	;# 
   183  0085                     	;# 
   184  0086                     	;# 
   185  0087                     	;# 
   186  0088                     	;# 
   187  0089                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0093                     	;# 
   194  0094                     	;# 
   195  0098                     	;# 
   196  0099                     	;# 
   197  009C                     	;# 
   198  009D                     	;# 
   199  009E                     	;# 
   200  009F                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  010F                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207  0000                     	;# 
   208  0001                     	;# 
   209  0002                     	;# 
   210  0003                     	;# 
   211  0004                     	;# 
   212  0005                     	;# 
   213  0006                     	;# 
   214  0007                     	;# 
   215  0008                     	;# 
   216  0009                     	;# 
   217  000A                     	;# 
   218  000B                     	;# 
   219  000C                     	;# 
   220  000D                     	;# 
   221  000E                     	;# 
   222  000E                     	;# 
   223  000F                     	;# 
   224  0010                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0013                     	;# 
   228  0014                     	;# 
   229  0015                     	;# 
   230  0015                     	;# 
   231  0016                     	;# 
   232  0017                     	;# 
   233  0018                     	;# 
   234  0019                     	;# 
   235  001A                     	;# 
   236  001B                     	;# 
   237  001B                     	;# 
   238  001C                     	;# 
   239  001D                     	;# 
   240  001E                     	;# 
   241  001F                     	;# 
   242  0081                     	;# 
   243  0085                     	;# 
   244  0086                     	;# 
   245  0087                     	;# 
   246  0088                     	;# 
   247  0089                     	;# 
   248  008C                     	;# 
   249  008D                     	;# 
   250  008E                     	;# 
   251  0091                     	;# 
   252  0092                     	;# 
   253  0093                     	;# 
   254  0094                     	;# 
   255  0098                     	;# 
   256  0099                     	;# 
   257  009C                     	;# 
   258  009D                     	;# 
   259  009E                     	;# 
   260  009F                     	;# 
   261  010C                     	;# 
   262  010D                     	;# 
   263  010E                     	;# 
   264  010F                     	;# 
   265  018C                     	;# 
   266  018D                     	;# 
   267                           
   268                           	psect	idataBANK0
   269  0000'                    __pidataBANK0:	
   270                           
   271                           ;initializer for _adcClosest
   272  0000' 34E8               	retlw	232
   273  0001' 3403               	retlw	3
   274  0007                     _PORTC	set	7
   275  0008                     _PORTD	set	8
   276  0009                     _PORTE	set	9
   277  001A                     _RCREG	set	26
   278  0018                     _RCSTA	set	24
   279  0013                     _SSPBUF	set	19
   280  0014                     _SSPCON	set	20
   281  0001                     _TMR0	set	1
   282  0019                     _TXREG	set	25
   283  005F                     _GIE	set	95
   284  005E                     _PEIE	set	94
   285  0030                     _RB0	set	48
   286  0031                     _RB1	set	49
   287  003A                     _RC2	set	58
   288  0065                     _RCIF	set	101
   289  0048                     _RE0	set	72
   290  0049                     _RE1	set	73
   291  004A                     _RE2	set	74
   292  0063                     _SSPIF	set	99
   293  005D                     _TMR0IE	set	93
   294  005A                     _TMR0IF	set	90
   295  009F                     _ADCON1	set	159
   296  0081                     _OPTION_REG	set	129
   297  0099                     _SPBRG	set	153
   298  0094                     _SSPSTAT	set	148
   299  0086                     _TRISB	set	134
   300  0087                     _TRISC	set	135
   301  0088                     _TRISD	set	136
   302  0089                     _TRISE	set	137
   303  0098                     _TXSTA	set	152
   304  04C1                     _TRMT	set	1217
   305                           
   306                           ; #config settings
   307  0000                     
   308                           	psect	cinit
   309  0000'                    start_initialization:	
   310  0000'                    __initialization:	
   311                           
   312                           ; Initialize objects allocated to BANK0
   313  0000' 120A' 118A' 2000' 120A' 118A' 	fcall	__pidataBANK0	;fetch initializer
   314  0005' 0080'              	movwf	__pdataBANK0& (0+127)
   315  0006' 120A' 118A' 2000' 120A' 118A' 	fcall	__pidataBANK0+1	;fetch initializer
   316  000B' 0080'              	movwf	(__pdataBANK0+1)& (0+127)
   317                           
   318                           ; Clear objects allocated to BANK0
   319  000C' 1383               	bcf	3,7	;select IRP bank0
   320  000D' 3000'              	movlw	low __pbssBANK0
   321  000E' 0084               	movwf	4
   322  000F' 3000'              	movlw	low (__pbssBANK0+25)
   323  0010' 120A' 118A' 2000'  	fcall	clear_ram0
   324                           
   325                           ; Clear objects allocated to COMMON
   326  0013' 0180'              	clrf	__pbssCOMMON& (0+127)
   327  0014' 0180'              	clrf	(__pbssCOMMON+1)& (0+127)
   328                           
   329                           ; Clear objects allocated to BITCOMMON
   330  0015' 0180'              	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   331  0016'                    end_of_initialization:	
   332                           ;End of C runtime variable initialization code
   333                           
   334  0016'                    __end_of__initialization:	
   335  0016' 0183               	clrf	3
   336  0017' 120A' 118A' 2800'  	ljmp	_main	;jump to C main() function
   337                           
   338                           	psect	bitbssCOMMON
   339  0000'                    __pbitbssCOMMON:	
   340  0000'                    _FLAG_1000MS:	
   341  0000'                    	ds	1
   342                           
   343                           	psect	bssCOMMON
   344  0000'                    __pbssCOMMON:	
   345  0000'                    _currentStep:	
   346  0000'                    	ds	1
   347  0001'                    _negativeFlag:	
   348  0001'                    	ds	1
   349                           
   350                           	psect	bssBANK0
   351  0000'                    __pbssBANK0:	
   352  0000'                    _Distance:	
   353  0000'                    	ds	2
   354  0002'                    _adcRAW:	
   355  0002'                    	ds	2
   356  0004'                    _degrees:	
   357  0004'                    	ds	2
   358  0006'                    _distTrav:	
   359  0006'                    	ds	2
   360  0008'                    _lowByte:	
   361  0008'                    	ds	2
   362  000A'                    _stepClosest:	
   363  000A'                    	ds	2
   364  000C'                    _stepCountNeg:	
   365  000C'                    	ds	2
   366  000E'                    _time_count:	
   367  000E'                    	ds	2
   368  0010'                    _x:	
   369  0010'                    	ds	2
   370  0012'                    _PB7Counter:	
   371  0012'                    	ds	1
   372  0013'                    _PB8Counter:	
   373  0013'                    	ds	1
   374  0014'                    _controlByte:	
   375  0014'                    	ds	1
   376  0015'                    _rxbyte:	
   377  0015'                    	ds	1
   378  0016'                    _stepCount:	
   379  0016'                    	ds	1
   380  0017'                    _highByte:	
   381  0017'                    	ds	2
   382                           
   383                           	psect	dataBANK0
   384  0000'                    __pdataBANK0:	
   385  0000'                    _adcClosest:	
   386  0000'                    	ds	2
   387                           
   388                           	psect	clrtext
   389  0000'                    clear_ram0:	
   390                           ;	Called with FSR containing the base address, and
   391                           ;	W with the last address+1
   392                           
   393  0000' 0064               	clrwdt	;clear the watchdog before getting into this loop
   394  0001'                    clrloop0:	
   395  0001' 0180               	clrf	0	;clear RAM location pointed to by FSR
   396  0002' 0A84               	incf	4,f	;increment pointer
   397  0003' 0604               	xorwf	4,w	;XOR with final address
   398  0004' 1903               	btfsc	3,2	;have we reached the end yet?
   399  0005' 3400               	retlw	0	;all done for this memory range, return
   400  0006' 0604               	xorwf	4,w	;XOR again to restore value
   401  0007' 2800'              	goto	clrloop0	;do the next byte
   402                           
   403                           	psect	cstackCOMMON
   404  0000'                    __pcstackCOMMON:	
   405  0000'                    ?_setupSPI:	
   406  0000'                    ?_ser_init:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0000'                    ?_setupLCD:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0000'                    ?_setupADC:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0000'                    ?_spi_transfer:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0000'                    ?_ser_putch:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0000'                    ?_ser_getch:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0000'                    ?_moveCW:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0000'                    ?_ADCMain:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0000'                    ?_moveCCW:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0000'                    ?_isr:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  0000'                    ?_main:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0000'                    ?_lcdWriteControl:	
   440                           ; 1 bytes @ 0x0
   441                           
   442  0000'                    ?_lcdWriteData:	
   443                           ; 1 bytes @ 0x0
   444                           
   445  0000'                    ?___lwmod:	
   446                           ; 1 bytes @ 0x0
   447                           
   448  0000'                    ___lwmod@divisor:	
   449                           ; 2 bytes @ 0x0
   450                           
   451                           
   452                           ; 2 bytes @ 0x0
   453  0000'                    	ds	2
   454  0002'                    ___lwmod@dividend:	
   455                           
   456                           ; 2 bytes @ 0x2
   457  0002'                    	ds	2
   458  0004'                    ??___lwmod:	
   459                           
   460                           ; 1 bytes @ 0x4
   461  0004'                    	ds	1
   462  0005'                    ___lwmod@counter:	
   463                           
   464                           ; 1 bytes @ 0x5
   465  0005'                    	ds	1
   466  0006'                    ??_isr:	
   467                           
   468                           ; 1 bytes @ 0x6
   469  0006'                    	ds	5
   470                           
   471                           	psect	cstackBANK0
   472  0000'                    __pcstackBANK0:	
   473  0000'                    ??_setupSPI:	
   474  0000'                    ??_ser_init:	
   475                           ; 1 bytes @ 0x0
   476                           
   477  0000'                    ??_setupADC:	
   478                           ; 1 bytes @ 0x0
   479                           
   480  0000'                    ??_spi_transfer:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  0000'                    ??_ser_putch:	
   484                           ; 1 bytes @ 0x0
   485                           
   486  0000'                    ??_ser_getch:	
   487                           ; 1 bytes @ 0x0
   488                           
   489  0000'                    ??_moveCW:	
   490                           ; 1 bytes @ 0x0
   491                           
   492  0000'                    ??_ADCMain:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0000'                    ??_moveCCW:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0000'                    ??_lcdWriteControl:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  0000'                    ??_lcdWriteData:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  0000'                    ser_putch@c:	
   505                           ; 1 bytes @ 0x0
   506                           
   507                           
   508                           ; 1 bytes @ 0x0
   509  0000'                    	ds	1
   510  0001'                    spi_transfer@temp:	
   511  0001'                    ser_getch@rxbyte:	
   512                           ; 1 bytes @ 0x1
   513                           
   514                           
   515                           ; 1 bytes @ 0x1
   516  0001'                    	ds	1
   517  0002'                    lcdWriteControl@databyte:	
   518  0002'                    lcdWriteData@databyte:	
   519                           ; 1 bytes @ 0x2
   520                           
   521  0002'                    spi_transfer@data:	
   522                           ; 1 bytes @ 0x2
   523                           
   524                           
   525                           ; 1 bytes @ 0x2
   526  0002'                    	ds	1
   527  0003'                    ??_setupLCD:	
   528  0003'                    ?_lcdWriteToDigitBCD:	
   529                           ; 1 bytes @ 0x3
   530                           
   531  0003'                    lcdWriteToDigitBCD@data:	
   532                           ; 1 bytes @ 0x3
   533                           
   534                           
   535                           ; 2 bytes @ 0x3
   536  0003'                    	ds	2
   537  0005'                    ??_lcdWriteToDigitBCD:	
   538  0005'                    lcdWriteToDigitBCD@TensDigit:	
   539                           ; 1 bytes @ 0x5
   540                           
   541                           
   542                           ; 2 bytes @ 0x5
   543  0005'                    	ds	2
   544  0007'                    lcdWriteToDigitBCD@HunsDigit:	
   545                           
   546                           ; 2 bytes @ 0x7
   547  0007'                    	ds	2
   548  0009'                    lcdWriteToDigitBCD@ThouDigit:	
   549                           
   550                           ; 2 bytes @ 0x9
   551  0009'                    	ds	2
   552  000B'                    lcdWriteToDigitBCD@TenThouDigit:	
   553                           
   554                           ; 2 bytes @ 0xB
   555  000B'                    	ds	2
   556  000D'                    lcdWriteToDigitBCD@OnesDigit:	
   557                           
   558                           ; 2 bytes @ 0xD
   559  000D'                    	ds	2
   560  000F'                    ??_main:	
   561                           
   562                           ; 1 bytes @ 0xF
   563  000F'                    	ds	3
   564  0012'                    main@controlByte:	
   565                           
   566                           ; 1 bytes @ 0x12
   567  0012'                    	ds	1
   568                           
   569                           	psect	maintext
   570  0000'                    __pmaintext:	
   571 ;;
   572 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   573 ;;
   574 ;; *************** function _main *****************
   575 ;; Defined at:
   576 ;;		line 54 in file "main.c"
   577 ;; Parameters:    Size  Location     Type
   578 ;;		None
   579 ;; Auto vars:     Size  Location     Type
   580 ;;  controlByte     1   18[BANK0 ] unsigned char 
   581 ;; Return value:  Size  Location     Type
   582 ;;                  1    wreg      void 
   583 ;; Registers used:
   584 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
   585 ;; Tracked objects:
   586 ;;		On entry : B00/0
   587 ;;		On exit  : 0/0
   588 ;;		Unchanged: 0/0
   589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   590 ;;      Params:         0       0       0       0       0
   591 ;;      Locals:         0       1       0       0       0
   592 ;;      Temps:          0       3       0       0       0
   593 ;;      Totals:         0       4       0       0       0
   594 ;;Total ram usage:        4 bytes
   595 ;; Hardware stack levels required when called:    4
   596 ;; This function calls:
   597 ;;		_ADCMain
   598 ;;		_lcdWriteToDigitBCD
   599 ;;		_moveCCW
   600 ;;		_moveCW
   601 ;;		_ser_getch
   602 ;;		_ser_init
   603 ;;		_ser_putch
   604 ;;		_setupADC
   605 ;;		_setupLCD
   606 ;;		_setupSPI
   607 ;;		_spi_transfer
   608 ;; This function is called by:
   609 ;;		Startup code after reset
   610 ;; This function uses a non-reentrant model
   611 ;;
   612                           
   613                           
   614                           ;psect for function _main
   615  0000'                    _main:	
   616                           
   617                           ;main.c: 57: setupSPI();
   618                           
   619                           ;incstack = 0
   620                           ; Regs used in _main: [allreg]
   621  0000' 120A' 118A' 2000' 120A' 118A' 	fcall	_setupSPI
   622                           
   623                           ;main.c: 58: ser_init();
   624  0005' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_init
   625                           
   626                           ;main.c: 59: setupLCD();
   627  000A' 120A' 118A' 2000' 120A' 118A' 	fcall	_setupLCD
   628                           
   629                           ;main.c: 60: setupADC();
   630  000F' 120A' 118A' 2000' 120A' 118A' 	fcall	_setupADC
   631                           
   632                           ;main.c: 62: unsigned char controlByte = 0b00001101;
   633  0014' 300D               	movlw	13
   634  0015' 1283               	bcf	3,5	;RP0=0, select bank0
   635  0016' 1303               	bcf	3,6	;RP1=0, select bank0
   636  0017' 008F'              	movwf	??_main
   637  0018' 080F'              	movf	??_main,w
   638  0019' 0092'              	movwf	main@controlByte
   639                           
   640                           ;main.c: 63: spi_transfer(controlByte);
   641  001A' 0812'              	movf	main@controlByte,w
   642  001B' 120A' 118A' 2000' 120A' 118A' 	fcall	_spi_transfer
   643                           
   644                           ;main.c: 66: ser_putch(128);
   645  0020' 3080               	movlw	128
   646  0021' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   647                           
   648                           ;main.c: 67: ser_putch(132);
   649  0026' 3084               	movlw	132
   650  0027' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   651                           
   652                           ;main.c: 69: ser_putch(136);
   653  002C' 3088               	movlw	136
   654  002D' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   655                           
   656                           ;main.c: 70: ser_putch(4);
   657  0032' 3004               	movlw	4
   658  0033' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   659                           
   660                           ;main.c: 73: _delay((unsigned long)((10000)*(20000000/4000.0)));
   661  0038' 30FE               	movlw	254
   662  0039' 1283               	bcf	3,5	;RP0=0, select bank0
   663  003A' 1303               	bcf	3,6	;RP1=0, select bank0
   664  003B' 0091'              	movwf	??_main+2
   665  003C' 30A8               	movlw	168
   666  003D' 0090'              	movwf	??_main+1
   667  003E' 3061               	movlw	97
   668  003F' 008F'              	movwf	??_main
   669  0040'                    u597:	
   670  0040' 0B8F'              	decfsz	??_main,f
   671  0041' 2800'              	goto	u597
   672  0042' 0B90'              	decfsz	??_main+1,f
   673  0043' 2800'              	goto	u597
   674  0044' 0B91'              	decfsz	??_main+2,f
   675  0045' 2800'              	goto	u597
   676                           
   677                           ;main.c: 74: ser_putch(142);
   678  0046' 308E               	movlw	142
   679  0047' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   680                           
   681                           ;main.c: 75: ser_putch(19);
   682  004C' 3013               	movlw	19
   683  004D' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   684                           
   685                           ;main.c: 77: ser_getch();
   686  0052' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_getch
   687                           
   688                           ;main.c: 78: highByte = rxbyte;
   689  0057' 1283               	bcf	3,5	;RP0=0, select bank0
   690  0058' 1303               	bcf	3,6	;RP1=0, select bank0
   691  0059' 0815'              	movf	_rxbyte,w
   692  005A' 008F'              	movwf	??_main
   693  005B' 0190'              	clrf	??_main+1
   694  005C' 080F'              	movf	??_main,w
   695  005D' 0097'              	movwf	_highByte
   696  005E' 0810'              	movf	??_main+1,w
   697  005F' 0098'              	movwf	_highByte+1
   698                           
   699                           ;main.c: 79: ser_getch();
   700  0060' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_getch
   701                           
   702                           ;main.c: 80: lowByte = rxbyte;
   703  0065' 1283               	bcf	3,5	;RP0=0, select bank0
   704  0066' 1303               	bcf	3,6	;RP1=0, select bank0
   705  0067' 0815'              	movf	_rxbyte,w
   706  0068' 008F'              	movwf	??_main
   707  0069' 0190'              	clrf	??_main+1
   708  006A' 080F'              	movf	??_main,w
   709  006B' 0088'              	movwf	_lowByte
   710  006C' 0810'              	movf	??_main+1,w
   711  006D' 0089'              	movwf	_lowByte+1
   712                           
   713                           ;main.c: 82: distTrav = (256*highByte + lowByte);
   714  006E' 0818'              	movf	_highByte+1,w
   715  006F' 0090'              	movwf	??_main+1
   716  0070' 0817'              	movf	_highByte,w
   717  0071' 008F'              	movwf	??_main
   718  0072' 080F'              	movf	??_main,w
   719  0073' 0090'              	movwf	??_main+1
   720  0074' 018F'              	clrf	??_main
   721  0075' 0808'              	movf	_lowByte,w
   722  0076' 070F'              	addwf	??_main,w
   723  0077' 0086'              	movwf	_distTrav
   724  0078' 0809'              	movf	_lowByte+1,w
   725  0079' 1803               	skipnc
   726  007A' 0A09'              	incf	_lowByte+1,w
   727  007B' 0710'              	addwf	??_main+1,w
   728  007C' 0087'              	movwf	_distTrav+1
   729                           
   730                           ;main.c: 84: lcdWriteToDigitBCD(distTrav);
   731  007D' 0807'              	movf	_distTrav+1,w
   732  007E' 0084'              	movwf	lcdWriteToDigitBCD@data+1
   733  007F' 0806'              	movf	_distTrav,w
   734  0080' 0083'              	movwf	lcdWriteToDigitBCD@data
   735  0081' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteToDigitBCD
   736  0086'                    l1136:	
   737                           ;main.c: 87: while(1){
   738                           
   739                           
   740                           ;main.c: 88: if(FLAG_1000MS){
   741  0086' 1C00'              	btfss	_FLAG_1000MS/(0+8),_FLAG_1000MS& (0+7)	;volatile
   742  0087' 2800'              	goto	l86
   743                           
   744                           ;main.c: 89: RB0 = !RB0;
   745  0088' 3001               	movlw	1
   746  0089' 1283               	bcf	3,5	;RP0=0, select bank0
   747  008A' 1303               	bcf	3,6	;RP1=0, select bank0
   748  008B' 0686               	xorwf	6,f
   749                           
   750                           ;main.c: 90: FLAG_1000MS = 0;
   751  008C' 1000'              	bcf	_FLAG_1000MS/(0+8),_FLAG_1000MS& (0+7)	;volatile
   752  008D'                    l86:	
   753                           
   754                           ;main.c: 91: }
   755                           ;main.c: 96: if (PB8Counter >= 10 && !RB0 == 0){
   756  008D' 300A               	movlw	10
   757  008E' 1283               	bcf	3,5	;RP0=0, select bank0
   758  008F' 1303               	bcf	3,6	;RP1=0, select bank0
   759  0090' 0213'              	subwf	_PB8Counter,w
   760  0091' 1803               	btfsc	3,0
   761  0092' 1C06               	btfss	6,0	;volatile
   762  0093' 2800'              	goto	l1170
   763                           
   764                           ;main.c: 97: for (x = 0; x<400; x++){
   765  0094' 0190'              	clrf	_x
   766  0095' 0191'              	clrf	_x+1
   767  0096' 0811'              	movf	_x+1,w
   768  0097' 3A80               	xorlw	128
   769  0098' 00FF               	movwf	127
   770  0099' 3081               	movlw	129
   771  009A' 027F               	subwf	127,w
   772  009B' 1D03               	skipz
   773  009C' 2800'              	goto	u525
   774  009D' 3090               	movlw	144
   775  009E' 0210'              	subwf	_x,w
   776  009F'                    u525:	
   777  009F' 1803               	btfsc	3,0
   778  00A0' 2800'              	goto	l1162
   779  00A1'                    l1150:	
   780                           
   781                           ;main.c: 98: moveCW();
   782  00A1' 120A' 118A' 2000' 120A' 118A' 	fcall	_moveCW
   783                           
   784                           ;main.c: 99: ADCMain();
   785  00A6' 120A' 118A' 2000' 120A' 118A' 	fcall	_ADCMain
   786                           
   787                           ;main.c: 100: if (adcRAW < adcClosest){
   788  00AB' 1283               	bcf	3,5	;RP0=0, select bank0
   789  00AC' 1303               	bcf	3,6	;RP1=0, select bank0
   790  00AD' 0801'              	movf	_adcClosest+1,w
   791  00AE' 0203'              	subwf	_adcRAW+1,w	;volatile
   792  00AF' 1D03               	skipz
   793  00B0' 2800'              	goto	u535
   794  00B1' 0800'              	movf	_adcClosest,w
   795  00B2' 0202'              	subwf	_adcRAW,w	;volatile
   796  00B3'                    u535:	
   797  00B3' 1803               	skipnc
   798  00B4' 2800'              	goto	l1158
   799                           
   800                           ;main.c: 101: adcClosest = adcRAW;
   801  00B5' 0803'              	movf	_adcRAW+1,w	;volatile
   802  00B6' 0081'              	movwf	_adcClosest+1
   803  00B7' 0802'              	movf	_adcRAW,w	;volatile
   804  00B8' 0080'              	movwf	_adcClosest
   805                           
   806                           ;main.c: 102: stepClosest = stepCount;
   807  00B9' 0816'              	movf	_stepCount,w
   808  00BA' 008A'              	movwf	_stepClosest
   809  00BB' 018B'              	clrf	_stepClosest+1
   810  00BC' 1B8A'              	btfsc	_stepClosest,7
   811  00BD' 038B'              	decf	_stepClosest+1,f
   812  00BE'                    l1158:	
   813  00BE' 3001               	movlw	1
   814  00BF' 0790'              	addwf	_x,f
   815  00C0' 1803               	skipnc
   816  00C1' 0A91'              	incf	_x+1,f
   817  00C2' 3000               	movlw	0
   818  00C3' 0791'              	addwf	_x+1,f
   819  00C4' 0811'              	movf	_x+1,w
   820  00C5' 3A80               	xorlw	128
   821  00C6' 00FF               	movwf	127
   822  00C7' 3081               	movlw	129
   823  00C8' 027F               	subwf	127,w
   824  00C9' 1D03               	skipz
   825  00CA' 2800'              	goto	u545
   826  00CB' 3090               	movlw	144
   827  00CC' 0210'              	subwf	_x,w
   828  00CD'                    u545:	
   829  00CD' 1C03               	skipc
   830  00CE' 2800'              	goto	l1150
   831  00CF'                    l1162:	
   832                           
   833                           ;main.c: 103: }
   834                           ;main.c: 104: }
   835                           ;main.c: 107: for (x=stepCount; x=stepClosest; x++){
   836  00CF' 1283               	bcf	3,5	;RP0=0, select bank0
   837  00D0' 1303               	bcf	3,6	;RP1=0, select bank0
   838  00D1' 0816'              	movf	_stepCount,w
   839  00D2' 0090'              	movwf	_x
   840  00D3' 0191'              	clrf	_x+1
   841  00D4' 1B90'              	btfsc	_x,7
   842  00D5' 0391'              	decf	_x+1,f
   843  00D6'                    l1168:	
   844  00D6' 080B'              	movf	_stepClosest+1,w
   845  00D7' 0091'              	movwf	_x+1
   846  00D8' 080A'              	movf	_stepClosest,w
   847  00D9' 0090'              	movwf	_x
   848  00DA' 0810'              	movf	_x,w
   849  00DB' 0411'              	iorwf	_x+1,w
   850  00DC' 1903               	btfsc	3,2
   851  00DD' 2800'              	goto	l1170
   852                           
   853                           ;main.c: 108: moveCCW();
   854  00DE' 120A' 118A' 2000' 120A' 118A' 	fcall	_moveCCW
   855  00E3' 3001               	movlw	1
   856  00E4' 1283               	bcf	3,5	;RP0=0, select bank0
   857  00E5' 1303               	bcf	3,6	;RP1=0, select bank0
   858  00E6' 0790'              	addwf	_x,f
   859  00E7' 1803               	skipnc
   860  00E8' 0A91'              	incf	_x+1,f
   861  00E9' 3000               	movlw	0
   862  00EA' 0791'              	addwf	_x+1,f
   863  00EB' 2800'              	goto	l1168
   864  00EC'                    l1170:	
   865                           
   866                           ;main.c: 109: }
   867                           ;main.c: 110: }
   868                           ;main.c: 115: if (PB7Counter >= 10 && !RB1 == 0){
   869  00EC' 300A               	movlw	10
   870  00ED' 0212'              	subwf	_PB7Counter,w
   871  00EE' 1803               	btfsc	3,0
   872  00EF' 1C86               	btfss	6,1	;volatile
   873  00F0' 2800'              	goto	l1136
   874                           
   875                           ;main.c: 116: ser_putch(137);
   876  00F1' 3089               	movlw	137
   877  00F2' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   878                           
   879                           ;main.c: 117: ser_putch(0x00);
   880  00F7' 3000               	movlw	0
   881  00F8' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   882                           
   883                           ;main.c: 118: ser_putch(0b11111010);
   884  00FD' 30FA               	movlw	250
   885  00FE' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   886                           
   887                           ;main.c: 119: ser_putch(0xFF);
   888  0103' 30FF               	movlw	255
   889  0104' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   890                           
   891                           ;main.c: 120: ser_putch(0xFF);
   892  0109' 30FF               	movlw	255
   893  010A' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   894                           
   895                           ;main.c: 124: ser_putch(137);
   896  010F' 3089               	movlw	137
   897  0110' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   898                           
   899                           ;main.c: 125: ser_putch(0x00);
   900  0115' 3000               	movlw	0
   901  0116' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   902                           
   903                           ;main.c: 126: ser_putch(0x00);
   904  011B' 3000               	movlw	0
   905  011C' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   906                           
   907                           ;main.c: 127: ser_putch(0xFF);
   908  0121' 30FF               	movlw	255
   909  0122' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   910                           
   911                           ;main.c: 128: ser_putch(0xFF);
   912  0127' 30FF               	movlw	255
   913  0128' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   914  012D' 2800'              	goto	l1136
   915  012E'                    __end_of_main:	
   916                           
   917                           	psect	text1
   918  0000'                    __ptext1:	
   919 ;; *************** function _spi_transfer *****************
   920 ;; Defined at:
   921 ;;		line 23 in file "SPI.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;  data            1    wreg     unsigned char 
   924 ;; Auto vars:     Size  Location     Type
   925 ;;  data            1    2[BANK0 ] unsigned char 
   926 ;;  temp            1    1[BANK0 ] unsigned char 
   927 ;; Return value:  Size  Location     Type
   928 ;;                  1    wreg      unsigned char 
   929 ;; Registers used:
   930 ;;		wreg, status,2
   931 ;; Tracked objects:
   932 ;;		On entry : 0/0
   933 ;;		On exit  : 0/0
   934 ;;		Unchanged: 0/0
   935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   936 ;;      Params:         0       0       0       0       0
   937 ;;      Locals:         0       2       0       0       0
   938 ;;      Temps:          0       1       0       0       0
   939 ;;      Totals:         0       3       0       0       0
   940 ;;Total ram usage:        3 bytes
   941 ;; Hardware stack levels used:    1
   942 ;; Hardware stack levels required when called:    2
   943 ;; This function calls:
   944 ;;		Nothing
   945 ;; This function is called by:
   946 ;;		_main
   947 ;; This function uses a non-reentrant model
   948 ;;
   949                           
   950                           
   951                           ;psect for function _spi_transfer
   952  0000'                    _spi_transfer:	
   953                           
   954                           ;incstack = 0
   955                           ; Regs used in _spi_transfer: [wreg+status,2]
   956                           ;spi_transfer@data stored from wreg
   957  0000' 1283               	bcf	3,5	;RP0=0, select bank0
   958  0001' 1303               	bcf	3,6	;RP1=0, select bank0
   959  0002' 0082'              	movwf	spi_transfer@data
   960                           
   961                           ;SPI.c: 24: unsigned char temp = 0;
   962  0003' 0181'              	clrf	spi_transfer@temp
   963                           
   964                           ;SPI.c: 26: SSPIF = 0;
   965  0004' 118C               	bcf	12,3	;volatile
   966                           
   967                           ;SPI.c: 27: SSPBUF = data;
   968  0005' 0802'              	movf	spi_transfer@data,w
   969  0006' 0093               	movwf	19	;volatile
   970  0007'                    l180:	
   971                           ;SPI.c: 29: while (SSPIF == 0);
   972                           
   973  0007' 1D8C               	btfss	12,3	;volatile
   974  0008' 2800'              	goto	l180
   975                           
   976                           ;SPI.c: 30: temp = SSPBUF;
   977  0009' 0813               	movf	19,w	;volatile
   978  000A' 0080'              	movwf	??_spi_transfer
   979  000B' 0800'              	movf	??_spi_transfer,w
   980  000C' 0081'              	movwf	spi_transfer@temp
   981                           
   982                           ;SPI.c: 31: SSPIF = 0;
   983  000D' 118C               	bcf	12,3	;volatile
   984  000E' 0008               	return
   985  000F'                    __end_of_spi_transfer:	
   986                           ;SPI.c: 33: return temp;
   987                           ;	Return value of _spi_transfer is never used
   988                           
   989                           
   990                           	psect	text2
   991  0000'                    __ptext2:	
   992 ;; *************** function _setupSPI *****************
   993 ;; Defined at:
   994 ;;		line 4 in file "SPI.c"
   995 ;; Parameters:    Size  Location     Type
   996 ;;		None
   997 ;; Auto vars:     Size  Location     Type
   998 ;;		None
   999 ;; Return value:  Size  Location     Type
  1000 ;;                  1    wreg      void 
  1001 ;; Registers used:
  1002 ;;		wreg, status,2
  1003 ;; Tracked objects:
  1004 ;;		On entry : 0/0
  1005 ;;		On exit  : 0/0
  1006 ;;		Unchanged: 0/0
  1007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1008 ;;      Params:         0       0       0       0       0
  1009 ;;      Locals:         0       0       0       0       0
  1010 ;;      Temps:          0       0       0       0       0
  1011 ;;      Totals:         0       0       0       0       0
  1012 ;;Total ram usage:        0 bytes
  1013 ;; Hardware stack levels used:    1
  1014 ;; Hardware stack levels required when called:    2
  1015 ;; This function calls:
  1016 ;;		Nothing
  1017 ;; This function is called by:
  1018 ;;		_main
  1019 ;; This function uses a non-reentrant model
  1020 ;;
  1021                           
  1022                           
  1023                           ;psect for function _setupSPI
  1024  0000'                    _setupSPI:	
  1025                           
  1026                           ;SPI.c: 6: TRISB = 0b00000000;
  1027                           
  1028                           ;incstack = 0
  1029                           ; Regs used in _setupSPI: [wreg+status,2]
  1030  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  1031  0001' 1303               	bcf	3,6	;RP1=0, select bank1
  1032  0002' 0186               	clrf	6	;volatile
  1033                           
  1034                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  1035  0003' 3040               	movlw	64
  1036  0004' 0094               	movwf	20	;volatile
  1037                           
  1038                           ;SPI.c: 9: SSPCON = 0b00100000;
  1039  0005' 3020               	movlw	32
  1040  0006' 1283               	bcf	3,5	;RP0=0, select bank0
  1041  0007' 1303               	bcf	3,6	;RP1=0, select bank0
  1042  0008' 0094               	movwf	20	;volatile
  1043                           
  1044                           ;SPI.c: 10: TRISC = 0b11010000;
  1045  0009' 30D0               	movlw	208
  1046  000A' 1683               	bsf	3,5	;RP0=1, select bank1
  1047  000B' 1303               	bcf	3,6	;RP1=0, select bank1
  1048  000C' 0087               	movwf	7	;volatile
  1049                           
  1050                           ;SPI.c: 11: PORTC = 0b00000011;
  1051  000D' 3003               	movlw	3
  1052  000E' 1283               	bcf	3,5	;RP0=0, select bank0
  1053  000F' 1303               	bcf	3,6	;RP1=0, select bank0
  1054  0010' 0087               	movwf	7	;volatile
  1055                           
  1056                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  1057  0011' 3004               	movlw	4
  1058  0012' 1683               	bsf	3,5	;RP0=1, select bank1
  1059  0013' 1303               	bcf	3,6	;RP1=0, select bank1
  1060  0014' 0081               	movwf	1	;volatile
  1061                           
  1062                           ;SPI.c: 16: TMR0IE = 1;
  1063  0015' 168B               	bsf	11,5	;volatile
  1064                           
  1065                           ;SPI.c: 19: (GIE = 1);
  1066  0016' 178B               	bsf	11,7	;volatile
  1067  0017' 0008               	return
  1068  0018'                    __end_of_setupSPI:	
  1069                           
  1070                           	psect	text3
  1071  0000'                    __ptext3:	
  1072 ;; *************** function _setupLCD *****************
  1073 ;; Defined at:
  1074 ;;		line 86 in file "LCD.c"
  1075 ;; Parameters:    Size  Location     Type
  1076 ;;		None
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;		None
  1079 ;; Return value:  Size  Location     Type
  1080 ;;                  1    wreg      void 
  1081 ;; Registers used:
  1082 ;;		wreg, status,2, status,0, pclath, cstack
  1083 ;; Tracked objects:
  1084 ;;		On entry : 0/0
  1085 ;;		On exit  : 0/0
  1086 ;;		Unchanged: 0/0
  1087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1088 ;;      Params:         0       0       0       0       0
  1089 ;;      Locals:         0       0       0       0       0
  1090 ;;      Temps:          0       0       0       0       0
  1091 ;;      Totals:         0       0       0       0       0
  1092 ;;Total ram usage:        0 bytes
  1093 ;; Hardware stack levels used:    1
  1094 ;; Hardware stack levels required when called:    3
  1095 ;; This function calls:
  1096 ;;		_lcdWriteControl
  1097 ;; This function is called by:
  1098 ;;		_main
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102                           
  1103                           ;psect for function _setupLCD
  1104  0000'                    _setupLCD:	
  1105                           
  1106                           ;LCD.c: 88: ADCON1 = 0b00000010;
  1107                           
  1108                           ;incstack = 0
  1109                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  1110  0000' 3002               	movlw	2
  1111  0001' 1683               	bsf	3,5	;RP0=1, select bank1
  1112  0002' 1303               	bcf	3,6	;RP1=0, select bank1
  1113  0003' 009F               	movwf	31	;volatile
  1114                           
  1115                           ;LCD.c: 90: PORTD = 0;
  1116  0004' 1283               	bcf	3,5	;RP0=0, select bank0
  1117  0005' 1303               	bcf	3,6	;RP1=0, select bank0
  1118  0006' 0188               	clrf	8	;volatile
  1119                           
  1120                           ;LCD.c: 91: PORTE = 0;
  1121  0007' 0189               	clrf	9	;volatile
  1122                           
  1123                           ;LCD.c: 93: TRISD = 0b00000000;
  1124  0008' 1683               	bsf	3,5	;RP0=1, select bank1
  1125  0009' 1303               	bcf	3,6	;RP1=0, select bank1
  1126  000A' 0188               	clrf	8	;volatile
  1127                           
  1128                           ;LCD.c: 94: TRISE = 0b00000000;
  1129  000B' 0189               	clrf	9	;volatile
  1130                           
  1131                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  1132  000C' 3001               	movlw	1
  1133  000D' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteControl
  1134                           
  1135                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  1136  0012' 3038               	movlw	56
  1137  0013' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteControl
  1138                           
  1139                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  1140  0018' 300C               	movlw	12
  1141  0019' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteControl
  1142                           
  1143                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  1144  001E' 3006               	movlw	6
  1145  001F' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteControl
  1146                           
  1147                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  1148  0024' 3002               	movlw	2
  1149  0025' 120A' 118A' 2000'  	fcall	_lcdWriteControl
  1150  0028' 0008               	return
  1151  0029'                    __end_of_setupLCD:	
  1152                           
  1153                           	psect	text4
  1154  0000'                    __ptext4:	
  1155 ;; *************** function _lcdWriteControl *****************
  1156 ;; Defined at:
  1157 ;;		line 9 in file "LCD.c"
  1158 ;; Parameters:    Size  Location     Type
  1159 ;;  databyte        1    wreg     unsigned char 
  1160 ;; Auto vars:     Size  Location     Type
  1161 ;;  databyte        1    2[BANK0 ] unsigned char 
  1162 ;; Return value:  Size  Location     Type
  1163 ;;                  1    wreg      void 
  1164 ;; Registers used:
  1165 ;;		wreg
  1166 ;; Tracked objects:
  1167 ;;		On entry : 0/0
  1168 ;;		On exit  : 0/0
  1169 ;;		Unchanged: 0/0
  1170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1171 ;;      Params:         0       0       0       0       0
  1172 ;;      Locals:         0       1       0       0       0
  1173 ;;      Temps:          0       2       0       0       0
  1174 ;;      Totals:         0       3       0       0       0
  1175 ;;Total ram usage:        3 bytes
  1176 ;; Hardware stack levels used:    1
  1177 ;; Hardware stack levels required when called:    2
  1178 ;; This function calls:
  1179 ;;		Nothing
  1180 ;; This function is called by:
  1181 ;;		_setupLCD
  1182 ;;		_lcdSetCursor
  1183 ;; This function uses a non-reentrant model
  1184 ;;
  1185                           
  1186                           
  1187                           ;psect for function _lcdWriteControl
  1188  0000'                    _lcdWriteControl:	
  1189                           
  1190                           ;incstack = 0
  1191                           ; Regs used in _lcdWriteControl: [wreg]
  1192                           ;lcdWriteControl@databyte stored from wreg
  1193  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1194  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1195  0002' 0082'              	movwf	lcdWriteControl@databyte
  1196                           
  1197                           ;LCD.c: 10: RE2 = 0;
  1198  0003' 1109               	bcf	9,2	;volatile
  1199                           
  1200                           ;LCD.c: 11: RE1 = 0;
  1201  0004' 1089               	bcf	9,1	;volatile
  1202                           
  1203                           ;LCD.c: 12: RE0 = 0;
  1204  0005' 1009               	bcf	9,0	;volatile
  1205                           
  1206                           ;LCD.c: 13: PORTD = databyte;
  1207  0006' 0802'              	movf	lcdWriteControl@databyte,w
  1208  0007' 0088               	movwf	8	;volatile
  1209                           
  1210                           ;LCD.c: 14: RE2 = 1;
  1211  0008' 1509               	bsf	9,2	;volatile
  1212                           
  1213                           ;LCD.c: 15: RE2 = 0;
  1214  0009' 1109               	bcf	9,2	;volatile
  1215                           
  1216                           ;LCD.c: 16: _delay((unsigned long)((2)*(20000000/4000.0)));
  1217  000A' 300D               	movlw	13
  1218  000B' 0081'              	movwf	??_lcdWriteControl+1
  1219  000C' 30FB               	movlw	251
  1220  000D' 0080'              	movwf	??_lcdWriteControl
  1221  000E'                    u607:	
  1222  000E' 0B80'              	decfsz	??_lcdWriteControl,f
  1223  000F' 2800'              	goto	u607
  1224  0010' 0B81'              	decfsz	??_lcdWriteControl+1,f
  1225  0011' 2800'              	goto	u607
  1226  0012' 2800'              	nop2
  1227  0013' 0008               	return
  1228  0014'                    __end_of_lcdWriteControl:	
  1229                           
  1230                           	psect	text5
  1231  0000'                    __ptext5:	
  1232 ;; *************** function _ser_putch *****************
  1233 ;; Defined at:
  1234 ;;		line 28 in file "ser.c"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;  c               1    wreg     unsigned char 
  1237 ;; Auto vars:     Size  Location     Type
  1238 ;;  c               1    0[BANK0 ] unsigned char 
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  1    wreg      void 
  1241 ;; Registers used:
  1242 ;;		wreg
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1248 ;;      Params:         0       0       0       0       0
  1249 ;;      Locals:         0       1       0       0       0
  1250 ;;      Temps:          0       0       0       0       0
  1251 ;;      Totals:         0       1       0       0       0
  1252 ;;Total ram usage:        1 bytes
  1253 ;; Hardware stack levels used:    1
  1254 ;; Hardware stack levels required when called:    2
  1255 ;; This function calls:
  1256 ;;		Nothing
  1257 ;; This function is called by:
  1258 ;;		_main
  1259 ;; This function uses a non-reentrant model
  1260 ;;
  1261                           
  1262                           
  1263                           ;psect for function _ser_putch
  1264  0000'                    _ser_putch:	
  1265                           
  1266                           ;incstack = 0
  1267                           ; Regs used in _ser_putch: [wreg]
  1268                           ;ser_putch@c stored from wreg
  1269  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1270  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1271  0002' 0080'              	movwf	ser_putch@c
  1272  0003'                    l207:	
  1273                           ;ser.c: 29: while(!TRMT);
  1274                           
  1275  0003' 1683               	bsf	3,5	;RP0=1, select bank1
  1276  0004' 1303               	bcf	3,6	;RP1=0, select bank1
  1277  0005' 1C98               	btfss	24,1	;volatile
  1278  0006' 2800'              	goto	l207
  1279                           
  1280                           ;ser.c: 30: TXREG=c;
  1281  0007' 1283               	bcf	3,5	;RP0=0, select bank0
  1282  0008' 1303               	bcf	3,6	;RP1=0, select bank0
  1283  0009' 0800'              	movf	ser_putch@c,w
  1284  000A' 0099               	movwf	25	;volatile
  1285  000B' 0008               	return
  1286  000C'                    __end_of_ser_putch:	
  1287                           
  1288                           	psect	text6
  1289  0000'                    __ptext6:	
  1290 ;; *************** function _ser_init *****************
  1291 ;; Defined at:
  1292 ;;		line 4 in file "ser.c"
  1293 ;; Parameters:    Size  Location     Type
  1294 ;;		None
  1295 ;; Auto vars:     Size  Location     Type
  1296 ;;		None
  1297 ;; Return value:  Size  Location     Type
  1298 ;;                  1    wreg      void 
  1299 ;; Registers used:
  1300 ;;		wreg
  1301 ;; Tracked objects:
  1302 ;;		On entry : 0/0
  1303 ;;		On exit  : 0/0
  1304 ;;		Unchanged: 0/0
  1305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1306 ;;      Params:         0       0       0       0       0
  1307 ;;      Locals:         0       0       0       0       0
  1308 ;;      Temps:          0       0       0       0       0
  1309 ;;      Totals:         0       0       0       0       0
  1310 ;;Total ram usage:        0 bytes
  1311 ;; Hardware stack levels used:    1
  1312 ;; Hardware stack levels required when called:    2
  1313 ;; This function calls:
  1314 ;;		Nothing
  1315 ;; This function is called by:
  1316 ;;		_main
  1317 ;; This function uses a non-reentrant model
  1318 ;;
  1319                           
  1320                           
  1321                           ;psect for function _ser_init
  1322  0000'                    _ser_init:	
  1323                           
  1324                           ;ser.c: 6: TXSTA = 0b00100100;
  1325                           
  1326                           ;incstack = 0
  1327                           ; Regs used in _ser_init: [wreg]
  1328  0000' 3024               	movlw	36
  1329  0001' 1683               	bsf	3,5	;RP0=1, select bank1
  1330  0002' 1303               	bcf	3,6	;RP1=0, select bank1
  1331  0003' 0098               	movwf	24	;volatile
  1332                           
  1333                           ;ser.c: 7: RCSTA = 0b10011000;
  1334  0004' 3098               	movlw	152
  1335  0005' 1283               	bcf	3,5	;RP0=0, select bank0
  1336  0006' 1303               	bcf	3,6	;RP1=0, select bank0
  1337  0007' 0098               	movwf	24	;volatile
  1338                           
  1339                           ;ser.c: 22: SPBRG = 20;
  1340  0008' 3014               	movlw	20
  1341  0009' 1683               	bsf	3,5	;RP0=1, select bank1
  1342  000A' 1303               	bcf	3,6	;RP1=0, select bank1
  1343  000B' 0099               	movwf	25	;volatile
  1344                           
  1345                           ;ser.c: 24: PEIE = 1;
  1346  000C' 170B               	bsf	11,6	;volatile
  1347                           
  1348                           ;ser.c: 25: (GIE = 1);
  1349  000D' 178B               	bsf	11,7	;volatile
  1350  000E' 0008               	return
  1351  000F'                    __end_of_ser_init:	
  1352                           
  1353                           	psect	text7
  1354  0000'                    __ptext7:	
  1355 ;; *************** function _ser_getch *****************
  1356 ;; Defined at:
  1357 ;;		line 33 in file "ser.c"
  1358 ;; Parameters:    Size  Location     Type
  1359 ;;		None
  1360 ;; Auto vars:     Size  Location     Type
  1361 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  1362 ;; Return value:  Size  Location     Type
  1363 ;;                  1    wreg      unsigned char 
  1364 ;; Registers used:
  1365 ;;		wreg
  1366 ;; Tracked objects:
  1367 ;;		On entry : 0/0
  1368 ;;		On exit  : 0/0
  1369 ;;		Unchanged: 0/0
  1370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1371 ;;      Params:         0       0       0       0       0
  1372 ;;      Locals:         0       1       0       0       0
  1373 ;;      Temps:          0       1       0       0       0
  1374 ;;      Totals:         0       2       0       0       0
  1375 ;;Total ram usage:        2 bytes
  1376 ;; Hardware stack levels used:    1
  1377 ;; Hardware stack levels required when called:    2
  1378 ;; This function calls:
  1379 ;;		Nothing
  1380 ;; This function is called by:
  1381 ;;		_main
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           
  1386                           ;psect for function _ser_getch
  1387  0000'                    _ser_getch:	
  1388  0000'                    l213:	
  1389                           ;ser.c: 34: while(!RCIF);
  1390                           
  1391                           ;incstack = 0
  1392                           ; Regs used in _ser_getch: [wreg]
  1393                           
  1394  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1395  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1396  0002' 1E8C               	btfss	12,5	;volatile
  1397  0003' 2800'              	goto	l213
  1398                           
  1399                           ;ser.c: 35: unsigned char rxbyte = RCREG;
  1400  0004' 081A               	movf	26,w	;volatile
  1401  0005' 0080'              	movwf	??_ser_getch
  1402  0006' 0800'              	movf	??_ser_getch,w
  1403  0007' 0081'              	movwf	ser_getch@rxbyte
  1404  0008' 0008               	return
  1405  0009'                    __end_of_ser_getch:	
  1406                           ;ser.c: 36: return rxbyte;
  1407                           ;	Return value of _ser_getch is never used
  1408                           
  1409                           
  1410                           	psect	text8
  1411  0000'                    __ptext8:	
  1412 ;; *************** function _lcdWriteToDigitBCD *****************
  1413 ;; Defined at:
  1414 ;;		line 42 in file "LCD.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;  data            2    3[BANK0 ] unsigned int 
  1417 ;; Auto vars:     Size  Location     Type
  1418 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  1419 ;;  TenThouDigit    2   11[BANK0 ] unsigned int 
  1420 ;;  ThouDigit       2    9[BANK0 ] unsigned int 
  1421 ;;  HunsDigit       2    7[BANK0 ] unsigned int 
  1422 ;;  TensDigit       2    5[BANK0 ] unsigned int 
  1423 ;; Return value:  Size  Location     Type
  1424 ;;                  1    wreg      void 
  1425 ;; Registers used:
  1426 ;;		wreg, status,2, status,0, pclath, cstack
  1427 ;; Tracked objects:
  1428 ;;		On entry : 0/0
  1429 ;;		On exit  : 0/0
  1430 ;;		Unchanged: 0/0
  1431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1432 ;;      Params:         0       2       0       0       0
  1433 ;;      Locals:         0      10       0       0       0
  1434 ;;      Temps:          0       0       0       0       0
  1435 ;;      Totals:         0      12       0       0       0
  1436 ;;Total ram usage:       12 bytes
  1437 ;; Hardware stack levels used:    1
  1438 ;; Hardware stack levels required when called:    3
  1439 ;; This function calls:
  1440 ;;		_lcdWriteData
  1441 ;; This function is called by:
  1442 ;;		_main
  1443 ;; This function uses a non-reentrant model
  1444 ;;
  1445                           
  1446                           
  1447                           ;psect for function _lcdWriteToDigitBCD
  1448  0000'                    _lcdWriteToDigitBCD:	
  1449                           
  1450                           ;LCD.c: 43: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  1451                           ;LCD.c: 46: OnesDigit = data;
  1452                           
  1453                           ;incstack = 0
  1454                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  1455  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1456  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1457  0002' 0804'              	movf	lcdWriteToDigitBCD@data+1,w
  1458  0003' 008E'              	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1459  0004' 0803'              	movf	lcdWriteToDigitBCD@data,w
  1460  0005' 008D'              	movwf	lcdWriteToDigitBCD@OnesDigit
  1461                           
  1462                           ;LCD.c: 47: TensDigit = 0;
  1463  0006' 0185'              	clrf	lcdWriteToDigitBCD@TensDigit
  1464  0007' 0186'              	clrf	lcdWriteToDigitBCD@TensDigit+1
  1465                           
  1466                           ;LCD.c: 48: HunsDigit = 0;
  1467  0008' 0187'              	clrf	lcdWriteToDigitBCD@HunsDigit
  1468  0009' 0188'              	clrf	lcdWriteToDigitBCD@HunsDigit+1
  1469                           
  1470                           ;LCD.c: 49: ThouDigit = 0;
  1471  000A' 0189'              	clrf	lcdWriteToDigitBCD@ThouDigit
  1472  000B' 018A'              	clrf	lcdWriteToDigitBCD@ThouDigit+1
  1473                           
  1474                           ;LCD.c: 50: TenThouDigit = 0;
  1475  000C' 018B'              	clrf	lcdWriteToDigitBCD@TenThouDigit
  1476  000D' 018C'              	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  1477  000E'                    l1026:	
  1478                           ;LCD.c: 53: while (OnesDigit >= 10000){
  1479                           
  1480  000E' 3027               	movlw	39
  1481  000F' 020E'              	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1482  0010' 3010               	movlw	16
  1483  0011' 1903               	skipnz
  1484  0012' 020D'              	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1485  0013' 1C03               	btfss	3,0
  1486  0014' 2800'              	goto	l1032
  1487                           
  1488                           ;LCD.c: 54: OnesDigit = OnesDigit - 10000;
  1489  0015' 080D'              	movf	lcdWriteToDigitBCD@OnesDigit,w
  1490  0016' 3EF0               	addlw	240
  1491  0017' 008D'              	movwf	lcdWriteToDigitBCD@OnesDigit
  1492  0018' 080E'              	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1493  0019' 1803               	skipnc
  1494  001A' 3E01               	addlw	1
  1495  001B' 3ED8               	addlw	216
  1496  001C' 008E'              	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1497                           
  1498                           ;LCD.c: 55: TenThouDigit++;
  1499  001D' 3001               	movlw	1
  1500  001E' 078B'              	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  1501  001F' 1803               	skipnc
  1502  0020' 0A8C'              	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  1503  0021' 3000               	movlw	0
  1504  0022' 078C'              	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  1505  0023' 2800'              	goto	l1026
  1506  0024'                    l1028:	
  1507                           ;LCD.c: 56: }
  1508                           ;LCD.c: 58: while (OnesDigit >= 1000){
  1509                           
  1510                           
  1511                           ;LCD.c: 59: OnesDigit = OnesDigit - 1000;
  1512  0024' 080D'              	movf	lcdWriteToDigitBCD@OnesDigit,w
  1513  0025' 3E18               	addlw	24
  1514  0026' 008D'              	movwf	lcdWriteToDigitBCD@OnesDigit
  1515  0027' 080E'              	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1516  0028' 1803               	skipnc
  1517  0029' 3E01               	addlw	1
  1518  002A' 3EFC               	addlw	252
  1519  002B' 008E'              	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1520                           
  1521                           ;LCD.c: 60: ThouDigit++;
  1522  002C' 3001               	movlw	1
  1523  002D' 0789'              	addwf	lcdWriteToDigitBCD@ThouDigit,f
  1524  002E' 1803               	skipnc
  1525  002F' 0A8A'              	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  1526  0030' 3000               	movlw	0
  1527  0031' 078A'              	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  1528  0032'                    l1032:	
  1529  0032' 3003               	movlw	3
  1530  0033' 020E'              	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1531  0034' 30E8               	movlw	232
  1532  0035' 1903               	skipnz
  1533  0036' 020D'              	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1534  0037' 1C03               	btfss	3,0
  1535  0038' 2800'              	goto	l1038
  1536  0039' 2800'              	goto	l1028
  1537  003A'                    l1034:	
  1538                           ;LCD.c: 61: }
  1539                           ;LCD.c: 63: while (OnesDigit >= 100){
  1540                           
  1541                           
  1542                           ;LCD.c: 64: OnesDigit = OnesDigit - 100;
  1543  003A' 080D'              	movf	lcdWriteToDigitBCD@OnesDigit,w
  1544  003B' 3E9C               	addlw	156
  1545  003C' 008D'              	movwf	lcdWriteToDigitBCD@OnesDigit
  1546  003D' 080E'              	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1547  003E' 1803               	skipnc
  1548  003F' 3E01               	addlw	1
  1549  0040' 3EFF               	addlw	255
  1550  0041' 008E'              	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1551                           
  1552                           ;LCD.c: 65: HunsDigit++;
  1553  0042' 3001               	movlw	1
  1554  0043' 0787'              	addwf	lcdWriteToDigitBCD@HunsDigit,f
  1555  0044' 1803               	skipnc
  1556  0045' 0A88'              	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  1557  0046' 3000               	movlw	0
  1558  0047' 0788'              	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  1559  0048'                    l1038:	
  1560  0048' 3000               	movlw	0
  1561  0049' 020E'              	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1562  004A' 3064               	movlw	100
  1563  004B' 1903               	skipnz
  1564  004C' 020D'              	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1565  004D' 1C03               	btfss	3,0
  1566  004E' 2800'              	goto	l1044
  1567  004F' 2800'              	goto	l1034
  1568  0050'                    l1040:	
  1569                           ;LCD.c: 66: }
  1570                           ;LCD.c: 68: while (OnesDigit >= 10){
  1571                           
  1572                           
  1573                           ;LCD.c: 69: OnesDigit = OnesDigit - 10;
  1574  0050' 080D'              	movf	lcdWriteToDigitBCD@OnesDigit,w
  1575  0051' 3EF6               	addlw	246
  1576  0052' 008D'              	movwf	lcdWriteToDigitBCD@OnesDigit
  1577  0053' 080E'              	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1578  0054' 1803               	skipnc
  1579  0055' 3E01               	addlw	1
  1580  0056' 3EFF               	addlw	255
  1581  0057' 008E'              	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1582                           
  1583                           ;LCD.c: 70: TensDigit++;
  1584  0058' 3001               	movlw	1
  1585  0059' 0785'              	addwf	lcdWriteToDigitBCD@TensDigit,f
  1586  005A' 1803               	skipnc
  1587  005B' 0A86'              	incf	lcdWriteToDigitBCD@TensDigit+1,f
  1588  005C' 3000               	movlw	0
  1589  005D' 0786'              	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  1590  005E'                    l1044:	
  1591  005E' 3000               	movlw	0
  1592  005F' 020E'              	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1593  0060' 300A               	movlw	10
  1594  0061' 1903               	skipnz
  1595  0062' 020D'              	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1596  0063' 1803               	skipnc
  1597  0064' 2800'              	goto	l1040
  1598                           
  1599                           ;LCD.c: 71: }
  1600                           ;LCD.c: 73: if (TenThouDigit > 0)
  1601  0065' 080B'              	movf	lcdWriteToDigitBCD@TenThouDigit,w
  1602  0066' 040C'              	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  1603  0067' 1903               	btfsc	3,2
  1604  0068' 2800'              	goto	l1050
  1605                           
  1606                           ;LCD.c: 74: lcdWriteData((unsigned int)TenThouDigit + 48);
  1607  0069' 080B'              	movf	lcdWriteToDigitBCD@TenThouDigit,w
  1608  006A' 3E30               	addlw	48
  1609  006B' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteData
  1610  0070'                    l1050:	
  1611                           
  1612                           ;LCD.c: 76: if (ThouDigit > 0)
  1613  0070' 1283               	bcf	3,5	;RP0=0, select bank0
  1614  0071' 1303               	bcf	3,6	;RP1=0, select bank0
  1615  0072' 0809'              	movf	lcdWriteToDigitBCD@ThouDigit,w
  1616  0073' 040A'              	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  1617  0074' 1903               	btfsc	3,2
  1618  0075' 2800'              	goto	l150
  1619                           
  1620                           ;LCD.c: 77: lcdWriteData((unsigned int)ThouDigit + 48);
  1621  0076' 0809'              	movf	lcdWriteToDigitBCD@ThouDigit,w
  1622  0077' 3E30               	addlw	48
  1623  0078' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteData
  1624  007D'                    l150:	
  1625                           
  1626                           ;LCD.c: 79: lcdWriteData((unsigned int)HunsDigit + 48);
  1627  007D' 1283               	bcf	3,5	;RP0=0, select bank0
  1628  007E' 1303               	bcf	3,6	;RP1=0, select bank0
  1629  007F' 0807'              	movf	lcdWriteToDigitBCD@HunsDigit,w
  1630  0080' 3E30               	addlw	48
  1631  0081' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteData
  1632                           
  1633                           ;LCD.c: 80: lcdWriteData((unsigned int)TensDigit + 48);
  1634  0086' 1283               	bcf	3,5	;RP0=0, select bank0
  1635  0087' 1303               	bcf	3,6	;RP1=0, select bank0
  1636  0088' 0805'              	movf	lcdWriteToDigitBCD@TensDigit,w
  1637  0089' 3E30               	addlw	48
  1638  008A' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteData
  1639                           
  1640                           ;LCD.c: 81: lcdWriteData((unsigned int)OnesDigit + 48);
  1641  008F' 1283               	bcf	3,5	;RP0=0, select bank0
  1642  0090' 1303               	bcf	3,6	;RP1=0, select bank0
  1643  0091' 080D'              	movf	lcdWriteToDigitBCD@OnesDigit,w
  1644  0092' 3E30               	addlw	48
  1645  0093' 120A' 118A' 2000'  	fcall	_lcdWriteData
  1646  0096' 0008               	return
  1647  0097'                    __end_of_lcdWriteToDigitBCD:	
  1648                           
  1649                           	psect	text9
  1650  0000'                    __ptext9:	
  1651 ;; *************** function _lcdWriteData *****************
  1652 ;; Defined at:
  1653 ;;		line 20 in file "LCD.c"
  1654 ;; Parameters:    Size  Location     Type
  1655 ;;  databyte        1    wreg     unsigned char 
  1656 ;; Auto vars:     Size  Location     Type
  1657 ;;  databyte        1    2[BANK0 ] unsigned char 
  1658 ;; Return value:  Size  Location     Type
  1659 ;;                  1    wreg      void 
  1660 ;; Registers used:
  1661 ;;		wreg
  1662 ;; Tracked objects:
  1663 ;;		On entry : 0/0
  1664 ;;		On exit  : 0/0
  1665 ;;		Unchanged: 0/0
  1666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1667 ;;      Params:         0       0       0       0       0
  1668 ;;      Locals:         0       1       0       0       0
  1669 ;;      Temps:          0       2       0       0       0
  1670 ;;      Totals:         0       3       0       0       0
  1671 ;;Total ram usage:        3 bytes
  1672 ;; Hardware stack levels used:    1
  1673 ;; Hardware stack levels required when called:    2
  1674 ;; This function calls:
  1675 ;;		Nothing
  1676 ;; This function is called by:
  1677 ;;		_lcdWriteToDigitBCD
  1678 ;;		_lcdWriteString
  1679 ;; This function uses a non-reentrant model
  1680 ;;
  1681                           
  1682                           
  1683                           ;psect for function _lcdWriteData
  1684  0000'                    _lcdWriteData:	
  1685                           
  1686                           ;incstack = 0
  1687                           ; Regs used in _lcdWriteData: [wreg]
  1688                           ;lcdWriteData@databyte stored from wreg
  1689  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1690  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1691  0002' 0082'              	movwf	lcdWriteData@databyte
  1692                           
  1693                           ;LCD.c: 21: RE2 = 0;
  1694  0003' 1109               	bcf	9,2	;volatile
  1695                           
  1696                           ;LCD.c: 22: RE1 = 0;
  1697  0004' 1089               	bcf	9,1	;volatile
  1698                           
  1699                           ;LCD.c: 23: RE0 = 1;
  1700  0005' 1409               	bsf	9,0	;volatile
  1701                           
  1702                           ;LCD.c: 24: PORTD = databyte;
  1703  0006' 0802'              	movf	lcdWriteData@databyte,w
  1704  0007' 0088               	movwf	8	;volatile
  1705                           
  1706                           ;LCD.c: 25: RE2 = 1;
  1707  0008' 1509               	bsf	9,2	;volatile
  1708                           
  1709                           ;LCD.c: 26: RE2 = 0;
  1710  0009' 1109               	bcf	9,2	;volatile
  1711                           
  1712                           ;LCD.c: 27: _delay((unsigned long)((1)*(20000000/4000.0)));
  1713  000A' 3007               	movlw	7
  1714  000B' 0081'              	movwf	??_lcdWriteData+1
  1715  000C' 307D               	movlw	125
  1716  000D' 0080'              	movwf	??_lcdWriteData
  1717  000E'                    u617:	
  1718  000E' 0B80'              	decfsz	??_lcdWriteData,f
  1719  000F' 2800'              	goto	u617
  1720  0010' 0B81'              	decfsz	??_lcdWriteData+1,f
  1721  0011' 2800'              	goto	u617
  1722  0012' 0008               	return
  1723  0013'                    __end_of_lcdWriteData:	
  1724                           
  1725                           	psect	text10
  1726  0000'                    __ptext10:	
  1727 ;; *************** function _isr *****************
  1728 ;; Defined at:
  1729 ;;		line 29 in file "main.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;		None
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;		None
  1734 ;; Return value:  Size  Location     Type
  1735 ;;                  1    wreg      void 
  1736 ;; Registers used:
  1737 ;;		wreg, status,2, status,0, pclath, cstack
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : 0/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1743 ;;      Params:         0       0       0       0       0
  1744 ;;      Locals:         0       0       0       0       0
  1745 ;;      Temps:          5       0       0       0       0
  1746 ;;      Totals:         5       0       0       0       0
  1747 ;;Total ram usage:        5 bytes
  1748 ;; Hardware stack levels used:    1
  1749 ;; Hardware stack levels required when called:    1
  1750 ;; This function calls:
  1751 ;;		___lwmod
  1752 ;; This function is called by:
  1753 ;;		Interrupt level 1
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757                           
  1758                           ;psect for function _isr
  1759  0000'                    _isr:	
  1760                           
  1761                           ;main.c: 31: if(TMR0IF){
  1762  0000' 1D0B               	btfss	11,2	;volatile
  1763  0001' 2800'              	goto	i1l82
  1764                           
  1765                           ;main.c: 32: TMR0IF = 0;
  1766  0002' 110B               	bcf	11,2	;volatile
  1767                           
  1768                           ;main.c: 33: TMR0 = 100;
  1769  0003' 3064               	movlw	100
  1770  0004' 0081               	movwf	1	;volatile
  1771                           
  1772                           ;main.c: 36: if(time_count % 1 == 0) {
  1773  0005' 3001               	movlw	1
  1774  0006' 078E'              	addwf	_time_count,f	;volatile
  1775  0007' 1803               	skipnc
  1776  0008' 0A8F'              	incf	_time_count+1,f	;volatile
  1777  0009' 3000               	movlw	0
  1778  000A' 078F'              	addwf	_time_count+1,f	;volatile
  1779                           
  1780                           ;main.c: 38: RC2 = 1; __nop(); RC2 = 0;;
  1781  000B' 1507               	bsf	7,2	;volatile
  1782  000C' 0000               	nop
  1783  000D' 1283               	bcf	3,5	;RP0=0, select bank0
  1784  000E' 1303               	bcf	3,6	;RP1=0, select bank0
  1785  000F' 1107               	bcf	7,2	;volatile
  1786                           
  1787                           ;main.c: 39: }
  1788                           ;main.c: 41: if(time_count % 1000 == 0){
  1789  0010' 30E8               	movlw	232
  1790  0011' 0080'              	movwf	___lwmod@divisor
  1791  0012' 3003               	movlw	3
  1792  0013' 0081'              	movwf	___lwmod@divisor+1
  1793  0014' 080F'              	movf	_time_count+1,w	;volatile
  1794  0015' 0083'              	movwf	___lwmod@dividend+1
  1795  0016' 080E'              	movf	_time_count,w	;volatile
  1796  0017' 0082'              	movwf	___lwmod@dividend
  1797  0018' 120A' 118A' 2000' 120A' 118A' 	fcall	___lwmod
  1798  001D' 0800'              	movf	?___lwmod,w
  1799  001E' 0401'              	iorwf	?___lwmod+1,w
  1800  001F' 1D03               	btfss	3,2
  1801  0020' 2800'              	goto	i1l1094
  1802                           
  1803                           ;main.c: 42: FLAG_1000MS = 1;
  1804  0021' 1400'              	bsf	_FLAG_1000MS/(0+8),_FLAG_1000MS& (0+7)	;volatile
  1805                           
  1806                           ;main.c: 43: time_count = 0;
  1807  0022' 1283               	bcf	3,5	;RP0=0, select bank0
  1808  0023' 1303               	bcf	3,6	;RP1=0, select bank0
  1809  0024' 018E'              	clrf	_time_count	;volatile
  1810  0025' 018F'              	clrf	_time_count+1	;volatile
  1811  0026'                    i1l1094:	
  1812                           
  1813                           ;main.c: 44: }
  1814                           ;main.c: 45: if (!RB0 == 1)
  1815  0026' 1283               	bcf	3,5	;RP0=0, select bank0
  1816  0027' 1303               	bcf	3,6	;RP1=0, select bank0
  1817  0028' 1806               	btfsc	6,0	;volatile
  1818  0029' 2800'              	goto	i1l1098
  1819                           
  1820                           ;main.c: 46: PB8Counter++;
  1821  002A' 3001               	movlw	1
  1822  002B' 0086'              	movwf	??_isr
  1823  002C' 0806'              	movf	??_isr,w
  1824  002D' 0793'              	addwf	_PB8Counter,f
  1825  002E'                    i1l1098:	
  1826                           
  1827                           ;main.c: 47: if (!RB1 == 1)
  1828  002E' 1886               	btfsc	6,1	;volatile
  1829  002F' 2800'              	goto	i1l82
  1830                           
  1831                           ;main.c: 48: PB7Counter++;
  1832  0030' 3001               	movlw	1
  1833  0031' 0086'              	movwf	??_isr
  1834  0032' 0806'              	movf	??_isr,w
  1835  0033' 0792'              	addwf	_PB7Counter,f
  1836  0034'                    i1l82:	
  1837  0034' 080A'              	movf	??_isr+4,w
  1838  0035' 00FF               	movwf	127
  1839  0036' 0809'              	movf	??_isr+3,w
  1840  0037' 008A               	movwf	10
  1841  0038' 0808'              	movf	??_isr+2,w
  1842  0039' 0084               	movwf	4
  1843  003A' 0E00'              	swapf	(??_isr+1)^(0+-128),w
  1844  003B' 0083               	movwf	3
  1845  003C' 0EFE               	swapf	126,f
  1846  003D' 0E7E               	swapf	126,w
  1847  003E' 0009               	retfie
  1848  003F'                    __end_of_isr:	
  1849                           
  1850                           	psect	intentry
  1851  0000'                    __pintentry:	
  1852                           ;incstack = 0
  1853                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  1854                           
  1855  0000'                    interrupt_function:	
  1856  007E                     saved_w	set	btemp
  1857  0000' 00FE               	movwf	btemp
  1858  0001' 0E03               	swapf	3,w
  1859  0002' 0087'              	movwf	??_isr+1
  1860  0003' 0804               	movf	4,w
  1861  0004' 0088'              	movwf	??_isr+2
  1862  0005' 080A               	movf	10,w
  1863  0006' 0089'              	movwf	??_isr+3
  1864  0007' 1283               	bcf	3,5	;RP0=0, select bank0
  1865  0008' 1303               	bcf	3,6	;RP1=0, select bank0
  1866  0009' 087F               	movf	btemp+1,w
  1867  000A' 008A'              	movwf	??_isr+4
  1868  000B' 120A' 118A' 2800'  	ljmp	_isr
  1869                           
  1870                           	psect	text11
  1871  0000'                    __ptext11:	
  1872 ;; *************** function ___lwmod *****************
  1873 ;; Defined at:
  1874 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  1875 ;; Parameters:    Size  Location     Type
  1876 ;;  divisor         2    0[COMMON] unsigned int 
  1877 ;;  dividend        2    2[COMMON] unsigned int 
  1878 ;; Auto vars:     Size  Location     Type
  1879 ;;  counter         1    5[COMMON] unsigned char 
  1880 ;; Return value:  Size  Location     Type
  1881 ;;                  2    0[COMMON] unsigned int 
  1882 ;; Registers used:
  1883 ;;		wreg, status,2, status,0
  1884 ;; Tracked objects:
  1885 ;;		On entry : 0/0
  1886 ;;		On exit  : 0/0
  1887 ;;		Unchanged: 0/0
  1888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1889 ;;      Params:         4       0       0       0       0
  1890 ;;      Locals:         1       0       0       0       0
  1891 ;;      Temps:          1       0       0       0       0
  1892 ;;      Totals:         6       0       0       0       0
  1893 ;;Total ram usage:        6 bytes
  1894 ;; Hardware stack levels used:    1
  1895 ;; This function calls:
  1896 ;;		Nothing
  1897 ;; This function is called by:
  1898 ;;		_isr
  1899 ;; This function uses a non-reentrant model
  1900 ;;
  1901                           
  1902                           
  1903                           ;psect for function ___lwmod
  1904  0000'                    ___lwmod:	
  1905                           
  1906                           ;incstack = 0
  1907                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1908  0000' 0800'              	movf	___lwmod@divisor,w
  1909  0001' 0401'              	iorwf	___lwmod@divisor+1,w
  1910  0002' 1903               	btfsc	3,2
  1911  0003' 2800'              	goto	i1l1072
  1912  0004' 0185'              	clrf	___lwmod@counter
  1913  0005' 0A85'              	incf	___lwmod@counter,f
  1914  0006'                    i1l1062:	
  1915  0006' 1B81'              	btfsc	___lwmod@divisor+1,7
  1916  0007' 2800'              	goto	i1l1064
  1917  0008' 3001               	movlw	1
  1918  0009'                    u40_25:	
  1919  0009' 1003               	clrc
  1920  000A' 0D80'              	rlf	___lwmod@divisor,f
  1921  000B' 0D81'              	rlf	___lwmod@divisor+1,f
  1922  000C' 3EFF               	addlw	-1
  1923  000D' 1D03               	skipz
  1924  000E' 2800'              	goto	u40_25
  1925  000F' 3001               	movlw	1
  1926  0010' 0084'              	movwf	??___lwmod
  1927  0011' 0804'              	movf	??___lwmod,w
  1928  0012' 0785'              	addwf	___lwmod@counter,f
  1929  0013' 2800'              	goto	i1l1062
  1930  0014'                    i1l1064:	
  1931  0014' 0801'              	movf	___lwmod@divisor+1,w
  1932  0015' 0203'              	subwf	___lwmod@dividend+1,w
  1933  0016' 1D03               	skipz
  1934  0017' 2800'              	goto	u42_25
  1935  0018' 0800'              	movf	___lwmod@divisor,w
  1936  0019' 0202'              	subwf	___lwmod@dividend,w
  1937  001A'                    u42_25:	
  1938  001A' 1C03               	skipc
  1939  001B' 2800'              	goto	i1l1068
  1940  001C' 0800'              	movf	___lwmod@divisor,w
  1941  001D' 0282'              	subwf	___lwmod@dividend,f
  1942  001E' 0801'              	movf	___lwmod@divisor+1,w
  1943  001F' 1C03               	skipc
  1944  0020' 0383'              	decf	___lwmod@dividend+1,f
  1945  0021' 0283'              	subwf	___lwmod@dividend+1,f
  1946  0022'                    i1l1068:	
  1947  0022' 3001               	movlw	1
  1948  0023'                    u43_25:	
  1949  0023' 1003               	clrc
  1950  0024' 0C81'              	rrf	___lwmod@divisor+1,f
  1951  0025' 0C80'              	rrf	___lwmod@divisor,f
  1952  0026' 3EFF               	addlw	-1
  1953  0027' 1D03               	skipz
  1954  0028' 2800'              	goto	u43_25
  1955  0029' 3001               	movlw	1
  1956  002A' 0285'              	subwf	___lwmod@counter,f
  1957  002B' 1D03               	btfss	3,2
  1958  002C' 2800'              	goto	i1l1064
  1959  002D'                    i1l1072:	
  1960  002D' 0803'              	movf	___lwmod@dividend+1,w
  1961  002E' 0081'              	movwf	?___lwmod+1
  1962  002F' 0802'              	movf	___lwmod@dividend,w
  1963  0030' 0080'              	movwf	?___lwmod
  1964  0031' 0008               	return
  1965  0032'                    __end_of___lwmod:	
  1966  007E                     btemp	set	126	;btemp
  1967  007E                     wtemp	set	126
  1968  007E                     wtemp0	set	126
  1969  0080                     wtemp1	set	128
  1970  0082                     wtemp2	set	130
  1971  0084                     wtemp3	set	132
  1972  0086                     wtemp4	set	134
  1973  0088                     wtemp5	set	136
  1974  007F                     wtemp6	set	127
  1975  007E                     ttemp	set	126
  1976  007E                     ttemp0	set	126
  1977  0081                     ttemp1	set	129
  1978  0084                     ttemp2	set	132
  1979  0087                     ttemp3	set	135
  1980  007F                     ttemp4	set	127
  1981  007E                     ltemp	set	126
  1982  007E                     ltemp0	set	126
  1983  0082                     ltemp1	set	130
  1984  0086                     ltemp2	set	134
  1985  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     19      46
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->___lwmod

Critical Paths under _main in BANK0

    _main->_lcdWriteToDigitBCD
    _setupLCD->_lcdWriteControl
    _lcdWriteToDigitBCD->_lcdWriteData

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     544
                                             15 BANK0      4     4      0
                            _ADCMain
                 _lcdWriteToDigitBCD
                            _moveCCW
                             _moveCW
                          _ser_getch
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      30
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      22
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ser_getch                                            2     2      0       7
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _moveCW                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _moveCCW                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdWriteToDigitBCD                                  12    10      2     440
                                              3 BANK0     12    10      2
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (2) _lcdWriteData                                         3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADCMain                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  5     5      0     265
                                              6 COMMON     5     5      0
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCMain
   _lcdWriteToDigitBCD
     _lcdWriteData
   _moveCCW
   _moveCW
   _ser_getch
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)
   ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     13      2E       5       57.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       E       1      100.0%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3C      12        0.0%
ABS                  0      0      3C       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Aug 31 19:53:35 2016

                             _x 0010                     __CFG_CP$OFF 0000                              l86 008D  
                            fsr 0004                             l213 0000                             l150 007D  
                           l207 0003                             l180 0007                             _GIE 005F  
                           _RB0 0030                             _RB1 0031                             _RC2 003A  
                           _RE0 0048                             _RE1 0049                             _RE2 004A  
                  __CFG_CPD$OFF 0000                             u525 009F                             u607 000E  
                           u535 00B3                             u617 000E                             u545 00CD  
                           u597 0040                             _isr 0000                             fsr0 0004  
                           indf 0000                    __CFG_FOSC$HS 0000                  ??_lcdWriteData 0000  
                  __CFG_LVP$OFF 0000                            l1040 0050                            l1032 0032  
                          l1050 0070                            l1034 003A                            l1026 000E  
                          l1044 005E                            l1028 0024                            l1038 0048  
                          l1150 00A1                            l1136 0086                            l1162 00CF  
                          l1170 00EC                            l1158 00BE                            l1168 00D6  
                          ?_isr 0000                            _PEIE 005E                            _RCIF 0065  
                          i1l82 0034                            _TMR0 0001                            _TRMT 04C1  
                  __CFG_WRT$OFF 0000                            _main 0000                            btemp 007E  
                          ltemp 007E                            start 0000*                           ttemp 007E  
                          wtemp 007E                           ??_isr 0006                           ?_main 0000  
                 __CFG_WDTE$OFF 0000                 __end_of___lwmod 0032                           _RCREG 001A  
                         _RCSTA 0018                           u40_25 0009                           _SPBRG 0099  
                         u42_25 001A                           _PORTC 0007                           _PORTD 0008  
                         u43_25 0023                           _PORTE 0009                           _TRISB 0086  
                         _TRISC 0087                           _TRISD 0088                           _TRISE 0089  
                         _SSPIF 0063                           _TXREG 0019                           _TXSTA 0098  
    __end_of_lcdWriteToDigitBCD 0097                  __pbitbssCOMMON 0000                  __CFG_BOREN$OFF 0000  
                         pclath 000A                           ltemp0 007E                           ltemp1 0082  
                         ltemp2 0086                           ltemp3 0080                           ttemp0 007E  
                         ttemp1 0081                           ttemp2 0084                           ttemp3 0087  
                         ttemp4 007F                           status 0003                           wtemp0 007E  
                         wtemp1 0080                           wtemp2 0082                           wtemp3 0084  
                         wtemp4 0086                           wtemp5 0088                           wtemp6 007F  
               __initialization 0000                    __end_of_main 012E                       ??_ADCMain 0000  
      __size_of_lcdWriteControl 0014                          ??_main 000F                          _ADCON1 009F  
                        i1l1062 0006                          i1l1064 0014                          i1l1072 002D  
                        i1l1068 0022                          i1l1094 0026                          i1l1098 002E  
                        _TMR0IE 005D                          _TMR0IF 005A                          _SSPCON 0014  
                        _SSPBUF 0013                  __CFG_PWRTE$OFF 0000                          _adcRAW 0002  
          __end_of_lcdWriteData 0013                       ??___lwmod 0004                          _moveCW 0000* 
                        _rxbyte 0015                __end_of_ser_init 000F                       ??_moveCCW 0000  
              __end_of_setupLCD 0029                __end_of_setupSPI 0018                          saved_w 007E  
                    _adcClosest 0000         __end_of__initialization 0016                  __pcstackCOMMON 0000  
                  __pidataBANK0 0000               ??_lcdWriteControl 0000                      __pbssBANK0 0000  
                    __pmaintext 0000                      __pintentry 0000                         _ADCMain 0000* 
                       ?_moveCW 0000              __size_of_ser_getch 0009              __size_of_ser_putch 000C  
                       _SSPSTAT 0094           __size_of_lcdWriteData 0013              _lcdWriteToDigitBCD 0000  
                     ?_ser_init 0000                       ?_setupADC 0000                       ?_setupLCD 0000  
                     ?_setupSPI 0000                         ___lwmod 0000             ?_lcdWriteToDigitBCD 0003  
                       _degrees 0004                         __ptext1 0000                         __ptext2 0000  
                       __ptext3 0000                         __ptext4 0000                         __ptext5 0000  
                       __ptext6 0000                         __ptext7 0000                         __ptext8 0000  
                       __ptext9 0000                    __size_of_isr 003F                         _lowByte 0008  
                       _moveCCW 0000*                        clrloop0 0001                    _lcdWriteData 0000  
          end_of_initialization 0016            ??_lcdWriteToDigitBCD 0005               __end_of_ser_getch 0009  
             __end_of_ser_putch 000C                      ??_ser_init 0000                      ??_setupADC 0000  
                    ??_setupLCD 0003                      ??_setupSPI 0000                      _time_count 000E  
                 ?_spi_transfer 0000                 ser_getch@rxbyte 0001                 _lcdWriteControl 0000  
           start_initialization 0000                     __end_of_isr 003F                  ??_spi_transfer 0000  
                   __pdataBANK0 0000                        ?_ADCMain 0000                        ??_moveCW 0000  
                  _negativeFlag 0001                     _FLAG_1000MS 0000                     __pbssCOMMON 0000  
                     ___latbits 0002                   __pcstackBANK0 0000         __end_of_lcdWriteControl 0014  
             __size_of_ser_init 000F                        ?___lwmod 0000               __size_of_setupLCD 0029  
             __size_of_setupSPI 0018                        ?_moveCCW 0000                 main@controlByte 0012  
       lcdWriteControl@databyte 0002               interrupt_function 0000                      ser_putch@c 0000  
                     clear_ram0 0000                       _ser_getch 0000                       _ser_putch 0000  
                     _stepCount 0016            __end_of_spi_transfer 000F                spi_transfer@data 0002  
              spi_transfer@temp 0001                     _controlByte 0014                        _Distance 0000  
          lcdWriteData@databyte 0002     __size_of_lcdWriteToDigitBCD 0097                      ?_ser_getch 0000  
              ?_lcdWriteControl 0000                      ?_ser_putch 0000                __size_of___lwmod 0032  
                   _currentStep 0000  lcdWriteToDigitBCD@TenThouDigit 000B                        __ptext10 0000  
                      __ptext11 0000                        _highByte 0017                        _distTrav 0006  
                 __size_of_main 012E                        _ser_init 0000                        _setupADC 0000* 
                      _setupLCD 0000                        _setupSPI 0000                      _PB7Counter 0012  
   lcdWriteToDigitBCD@HunsDigit 0007                      _PB8Counter 0013     lcdWriteToDigitBCD@OnesDigit 000D  
   lcdWriteToDigitBCD@TensDigit 0005     lcdWriteToDigitBCD@ThouDigit 0009                        intlevel1 0000* 
              ___lwmod@dividend 0002                     ??_ser_getch 0000                     ??_ser_putch 0000  
         __size_of_spi_transfer 000F                      _OPTION_REG 0081                 ___lwmod@divisor 0000  
               ___lwmod@counter 0005                   ?_lcdWriteData 0000          lcdWriteToDigitBCD@data 0003  
                  _spi_transfer 0000                    _stepCountNeg 000C                     _stepClosest 000A  
