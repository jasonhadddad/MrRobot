

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sat Sep 17 14:03:06 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	dabs	1,0x7E,2
    42  0000                     	;# 
    43  0001                     	;# 
    44  0002                     	;# 
    45  0003                     	;# 
    46  0004                     	;# 
    47  0005                     	;# 
    48  0006                     	;# 
    49  0007                     	;# 
    50  0008                     	;# 
    51  0009                     	;# 
    52  000A                     	;# 
    53  000B                     	;# 
    54  000C                     	;# 
    55  000D                     	;# 
    56  000E                     	;# 
    57  000E                     	;# 
    58  000F                     	;# 
    59  0010                     	;# 
    60  0011                     	;# 
    61  0012                     	;# 
    62  0013                     	;# 
    63  0014                     	;# 
    64  0015                     	;# 
    65  0015                     	;# 
    66  0016                     	;# 
    67  0017                     	;# 
    68  0018                     	;# 
    69  0019                     	;# 
    70  001A                     	;# 
    71  001B                     	;# 
    72  001B                     	;# 
    73  001C                     	;# 
    74  001D                     	;# 
    75  001E                     	;# 
    76  001F                     	;# 
    77  0081                     	;# 
    78  0085                     	;# 
    79  0086                     	;# 
    80  0087                     	;# 
    81  0088                     	;# 
    82  0089                     	;# 
    83  008C                     	;# 
    84  008D                     	;# 
    85  008E                     	;# 
    86  0091                     	;# 
    87  0092                     	;# 
    88  0093                     	;# 
    89  0094                     	;# 
    90  0098                     	;# 
    91  0099                     	;# 
    92  009C                     	;# 
    93  009D                     	;# 
    94  009E                     	;# 
    95  009F                     	;# 
    96  010C                     	;# 
    97  010D                     	;# 
    98  010E                     	;# 
    99  010F                     	;# 
   100  018C                     	;# 
   101  018D                     	;# 
   102  0000                     	;# 
   103  0001                     	;# 
   104  0002                     	;# 
   105  0003                     	;# 
   106  0004                     	;# 
   107  0005                     	;# 
   108  0006                     	;# 
   109  0007                     	;# 
   110  0008                     	;# 
   111  0009                     	;# 
   112  000A                     	;# 
   113  000B                     	;# 
   114  000C                     	;# 
   115  000D                     	;# 
   116  000E                     	;# 
   117  000E                     	;# 
   118  000F                     	;# 
   119  0010                     	;# 
   120  0011                     	;# 
   121  0012                     	;# 
   122  0013                     	;# 
   123  0014                     	;# 
   124  0015                     	;# 
   125  0015                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  001A                     	;# 
   131  001B                     	;# 
   132  001B                     	;# 
   133  001C                     	;# 
   134  001D                     	;# 
   135  001E                     	;# 
   136  001F                     	;# 
   137  0081                     	;# 
   138  0085                     	;# 
   139  0086                     	;# 
   140  0087                     	;# 
   141  0088                     	;# 
   142  0089                     	;# 
   143  008C                     	;# 
   144  008D                     	;# 
   145  008E                     	;# 
   146  0091                     	;# 
   147  0092                     	;# 
   148  0093                     	;# 
   149  0094                     	;# 
   150  0098                     	;# 
   151  0099                     	;# 
   152  009C                     	;# 
   153  009D                     	;# 
   154  009E                     	;# 
   155  009F                     	;# 
   156  010C                     	;# 
   157  010D                     	;# 
   158  010E                     	;# 
   159  010F                     	;# 
   160  018C                     	;# 
   161  018D                     	;# 
   162  0000                     	;# 
   163  0001                     	;# 
   164  0002                     	;# 
   165  0003                     	;# 
   166  0004                     	;# 
   167  0005                     	;# 
   168  0006                     	;# 
   169  0007                     	;# 
   170  0008                     	;# 
   171  0009                     	;# 
   172  000A                     	;# 
   173  000B                     	;# 
   174  000C                     	;# 
   175  000D                     	;# 
   176  000E                     	;# 
   177  000E                     	;# 
   178  000F                     	;# 
   179  0010                     	;# 
   180  0011                     	;# 
   181  0012                     	;# 
   182  0013                     	;# 
   183  0014                     	;# 
   184  0015                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0017                     	;# 
   188  0018                     	;# 
   189  0019                     	;# 
   190  001A                     	;# 
   191  001B                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  001D                     	;# 
   195  001E                     	;# 
   196  001F                     	;# 
   197  0081                     	;# 
   198  0085                     	;# 
   199  0086                     	;# 
   200  0087                     	;# 
   201  0088                     	;# 
   202  0089                     	;# 
   203  008C                     	;# 
   204  008D                     	;# 
   205  008E                     	;# 
   206  0091                     	;# 
   207  0092                     	;# 
   208  0093                     	;# 
   209  0094                     	;# 
   210  0098                     	;# 
   211  0099                     	;# 
   212  009C                     	;# 
   213  009D                     	;# 
   214  009E                     	;# 
   215  009F                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  010F                     	;# 
   220  018C                     	;# 
   221  018D                     	;# 
   222  0000                     	;# 
   223  0001                     	;# 
   224  0002                     	;# 
   225  0003                     	;# 
   226  0004                     	;# 
   227  0005                     	;# 
   228  0006                     	;# 
   229  0007                     	;# 
   230  0008                     	;# 
   231  0009                     	;# 
   232  000A                     	;# 
   233  000B                     	;# 
   234  000C                     	;# 
   235  000D                     	;# 
   236  000E                     	;# 
   237  000E                     	;# 
   238  000F                     	;# 
   239  0010                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0014                     	;# 
   244  0015                     	;# 
   245  0015                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001B                     	;# 
   253  001C                     	;# 
   254  001D                     	;# 
   255  001E                     	;# 
   256  001F                     	;# 
   257  0081                     	;# 
   258  0085                     	;# 
   259  0086                     	;# 
   260  0087                     	;# 
   261  0088                     	;# 
   262  0089                     	;# 
   263  008C                     	;# 
   264  008D                     	;# 
   265  008E                     	;# 
   266  0091                     	;# 
   267  0092                     	;# 
   268  0093                     	;# 
   269  0094                     	;# 
   270  0098                     	;# 
   271  0099                     	;# 
   272  009C                     	;# 
   273  009D                     	;# 
   274  009E                     	;# 
   275  009F                     	;# 
   276  010C                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  010F                     	;# 
   280  018C                     	;# 
   281  018D                     	;# 
   282  0000                     	;# 
   283  0001                     	;# 
   284  0002                     	;# 
   285  0003                     	;# 
   286  0004                     	;# 
   287  0005                     	;# 
   288  0006                     	;# 
   289  0007                     	;# 
   290  0008                     	;# 
   291  0009                     	;# 
   292  000A                     	;# 
   293  000B                     	;# 
   294  000C                     	;# 
   295  000D                     	;# 
   296  000E                     	;# 
   297  000E                     	;# 
   298  000F                     	;# 
   299  0010                     	;# 
   300  0011                     	;# 
   301  0012                     	;# 
   302  0013                     	;# 
   303  0014                     	;# 
   304  0015                     	;# 
   305  0015                     	;# 
   306  0016                     	;# 
   307  0017                     	;# 
   308  0018                     	;# 
   309  0019                     	;# 
   310  001A                     	;# 
   311  001B                     	;# 
   312  001B                     	;# 
   313  001C                     	;# 
   314  001D                     	;# 
   315  001E                     	;# 
   316  001F                     	;# 
   317  0081                     	;# 
   318  0085                     	;# 
   319  0086                     	;# 
   320  0087                     	;# 
   321  0088                     	;# 
   322  0089                     	;# 
   323  008C                     	;# 
   324  008D                     	;# 
   325  008E                     	;# 
   326  0091                     	;# 
   327  0092                     	;# 
   328  0093                     	;# 
   329  0094                     	;# 
   330  0098                     	;# 
   331  0099                     	;# 
   332  009C                     	;# 
   333  009D                     	;# 
   334  009E                     	;# 
   335  009F                     	;# 
   336  010C                     	;# 
   337  010D                     	;# 
   338  010E                     	;# 
   339  010F                     	;# 
   340  018C                     	;# 
   341  018D                     	;# 
   342  0000                     	;# 
   343  0001                     	;# 
   344  0002                     	;# 
   345  0003                     	;# 
   346  0004                     	;# 
   347  0005                     	;# 
   348  0006                     	;# 
   349  0007                     	;# 
   350  0008                     	;# 
   351  0009                     	;# 
   352  000A                     	;# 
   353  000B                     	;# 
   354  000C                     	;# 
   355  000D                     	;# 
   356  000E                     	;# 
   357  000E                     	;# 
   358  000F                     	;# 
   359  0010                     	;# 
   360  0011                     	;# 
   361  0012                     	;# 
   362  0013                     	;# 
   363  0014                     	;# 
   364  0015                     	;# 
   365  0015                     	;# 
   366  0016                     	;# 
   367  0017                     	;# 
   368  0018                     	;# 
   369  0019                     	;# 
   370  001A                     	;# 
   371  001B                     	;# 
   372  001B                     	;# 
   373  001C                     	;# 
   374  001D                     	;# 
   375  001E                     	;# 
   376  001F                     	;# 
   377  0081                     	;# 
   378  0085                     	;# 
   379  0086                     	;# 
   380  0087                     	;# 
   381  0088                     	;# 
   382  0089                     	;# 
   383  008C                     	;# 
   384  008D                     	;# 
   385  008E                     	;# 
   386  0091                     	;# 
   387  0092                     	;# 
   388  0093                     	;# 
   389  0094                     	;# 
   390  0098                     	;# 
   391  0099                     	;# 
   392  009C                     	;# 
   393  009D                     	;# 
   394  009E                     	;# 
   395  009F                     	;# 
   396  010C                     	;# 
   397  010D                     	;# 
   398  010E                     	;# 
   399  010F                     	;# 
   400  018C                     	;# 
   401  018D                     	;# 
   402                           
   403                           	psect	idataBANK0
   404  0D6A                     __pidataBANK0:	
   405                           
   406                           ;initializer for _adcClosest
   407  0D6A  34E8               	retlw	232
   408  0D6B  3403               	retlw	3
   409  001F                     _ADCON0	set	31
   410  0005                     _PORTA	set	5
   411  0007                     _PORTC	set	7
   412  0008                     _PORTD	set	8
   413  0009                     _PORTE	set	9
   414  001A                     _RCREG	set	26
   415  0018                     _RCSTA	set	24
   416  0013                     _SSPBUF	set	19
   417  0014                     _SSPCON	set	20
   418  0001                     _TMR0	set	1
   419  0019                     _TXREG	set	25
   420  001E                     _ADRESH	set	30
   421  005F                     _GIE	set	95
   422  00FA                     _GO	set	250
   423  005E                     _PEIE	set	94
   424  0030                     _RB0	set	48
   425  0031                     _RB1	set	49
   426  0032                     _RB2	set	50
   427  0034                     _RB4	set	52
   428  0065                     _RCIF	set	101
   429  0048                     _RE0	set	72
   430  0049                     _RE1	set	73
   431  004A                     _RE2	set	74
   432  0063                     _SSPIF	set	99
   433  005D                     _TMR0IE	set	93
   434  005A                     _TMR0IF	set	90
   435  009F                     _ADCON1	set	159
   436  009E                     _ADRESL	set	158
   437  0081                     _OPTION_REG	set	129
   438  0099                     _SPBRG	set	153
   439  0094                     _SSPSTAT	set	148
   440  0085                     _TRISA	set	133
   441  0086                     _TRISB	set	134
   442  0087                     _TRISC	set	135
   443  0088                     _TRISD	set	136
   444  0089                     _TRISE	set	137
   445  0098                     _TXSTA	set	152
   446  04C1                     _TRMT	set	1217
   447                           
   448                           	psect	strings
   449  0800                     __pstrings:	
   450  0800                     stringtab:	
   451  0800                     __stringtab:	
   452  0800                     stringcode:	
   453                           ;	String table - string pointers are 1 byte each
   454                           
   455  0800                     stringdir:	
   456  0800  3008               	movlw	high stringdir
   457  0801  008A               	movwf	10
   458  0802  0804               	movf	4,w
   459  0803  0A84               	incf	4,f
   460  0804  0782               	addwf	2,f
   461  0805                     __stringbase:	
   462  0805  3400               	retlw	0
   463  0806                     __end_of__stringtab:	
   464  0806                     STR_1:	
   465  0806  3461               	retlw	97	;'a'
   466  0807  3472               	retlw	114	;'r'
   467  0808  3472               	retlw	114	;'r'
   468  0809  3469               	retlw	105	;'i'
   469  080A  3476               	retlw	118	;'v'
   470  080B  3465               	retlw	101	;'e'
   471  080C  3464               	retlw	100	;'d'
   472  080D  3420               	retlw	32	;' '
   473  080E  3461               	retlw	97	;'a'
   474  080F  3474               	retlw	116	;'t'
   475  0810  3420               	retlw	32	;' '
   476  0811  3463               	retlw	99	;'c'
   477  0812  346C               	retlw	108	;'l'
   478  0813  346F               	retlw	111	;'o'
   479  0814  3473               	retlw	115	;'s'
   480  0815  3465               	retlw	101	;'e'
   481  0816  3473               	retlw	115	;'s'
   482  0817  3474               	retlw	116	;'t'
   483  0818  3420               	retlw	32	;' '
   484  0819  3470               	retlw	112	;'p'
   485  081A  346F               	retlw	111	;'o'
   486  081B  3469               	retlw	105	;'i'
   487  081C  346E               	retlw	110	;'n'
   488  081D  3474               	retlw	116	;'t'
   489  081E  3400               	retlw	0
   490                           
   491                           ; #config settings
   492  0000                     
   493                           	psect	cinit
   494  0015                     start_initialization:	
   495  0015                     __initialization:	
   496                           
   497                           ; Initialize objects allocated to BANK0
   498  0015  120A  158A  256A  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   499  001A  00ED               	movwf	__pdataBANK0& (0+127)
   500  001B  120A  158A  256B  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   501  0020  00EE               	movwf	(__pdataBANK0+1)& (0+127)
   502                           
   503                           ; Clear objects allocated to BANK1
   504  0021  1383               	bcf	3,7	;select IRP bank0
   505  0022  30A0               	movlw	low __pbssBANK1
   506  0023  0084               	movwf	4
   507  0024  30B6               	movlw	low (__pbssBANK1+22)
   508  0025  120A  118A  27F8  120A  118A  	fcall	clear_ram0
   509                           
   510                           ; Clear objects allocated to BANK0
   511  002A  3057               	movlw	low __pbssBANK0
   512  002B  0084               	movwf	4
   513  002C  306D               	movlw	low (__pbssBANK0+22)
   514  002D  120A  118A  27F8   	fcall	clear_ram0
   515                           
   516                           ; Clear objects allocated to COMMON
   517  0030  01FB               	clrf	__pbssCOMMON& (0+127)
   518  0031  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   519                           
   520                           ; Clear objects allocated to BITCOMMON
   521  0032  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   522  0033                     end_of_initialization:	
   523                           ;End of C runtime variable initialization code
   524                           
   525  0033                     __end_of__initialization:	
   526  0033  0183               	clrf	3
   527  0034  120A  118A  2BC4   	ljmp	_main	;jump to C main() function
   528                           
   529                           	psect	bitbssCOMMON
   530  03E8                     __pbitbssCOMMON:	
   531  03E8                     _FLAG_1000MS:	
   532  03E8                     	ds	1
   533                           
   534                           	psect	bssCOMMON
   535  007B                     __pbssCOMMON:	
   536  007B                     _rxbyte:	
   537  007B                     	ds	1
   538  007C                     _speedH:	
   539  007C                     	ds	1
   540                           
   541                           	psect	bssBANK0
   542  0057                     __pbssBANK0:	
   543  0057                     _adcRAW:	
   544  0057                     	ds	2
   545  0059                     _stepState:	
   546  0059                     	ds	2
   547  005B                     _totalDistTrav:	
   548  005B                     	ds	2
   549  005D                     _LeftSpeedH:	
   550  005D                     	ds	1
   551  005E                     _LeftSpeedL:	
   552  005E                     	ds	1
   553  005F                     _PB6Counter:	
   554  005F                     	ds	1
   555  0060                     _PB7Counter:	
   556  0060                     	ds	1
   557  0061                     _PB8Counter:	
   558  0061                     	ds	1
   559  0062                     _RightSpeedH:	
   560  0062                     	ds	1
   561  0063                     _RightSpeedL:	
   562  0063                     	ds	1
   563  0064                     _controlByte:	
   564  0064                     	ds	1
   565  0065                     _count:	
   566  0065                     	ds	1
   567  0066                     _currentStep:	
   568  0066                     	ds	1
   569  0067                     _lowByte:	
   570  0067                     	ds	1
   571  0068                     _radH:	
   572  0068                     	ds	1
   573  0069                     _radL:	
   574  0069                     	ds	1
   575  006A                     _speedL:	
   576  006A                     	ds	1
   577  006B                     _stepCount:	
   578  006B                     	ds	1
   579  006C                     _highByte:	
   580  006C                     	ds	1
   581                           
   582                           	psect	dataBANK0
   583  006D                     __pdataBANK0:	
   584  006D                     _adcClosest:	
   585  006D                     	ds	2
   586                           
   587                           	psect	bssBANK1
   588  00A0                     __pbssBANK1:	
   589  00A0                     _Distance:	
   590  00A0                     	ds	2
   591  00A2                     _VelocityLeft:	
   592  00A2                     	ds	2
   593  00A4                     _VelocityRight:	
   594  00A4                     	ds	2
   595  00A6                     _angleTurned:	
   596  00A6                     	ds	2
   597  00A8                     _degrees:	
   598  00A8                     	ds	2
   599  00AA                     _distTrav:	
   600  00AA                     	ds	2
   601  00AC                     _loop:	
   602  00AC                     	ds	2
   603  00AE                     _stepClosest:	
   604  00AE                     	ds	2
   605  00B0                     _stepCountNeg:	
   606  00B0                     	ds	2
   607  00B2                     _time_count:	
   608  00B2                     	ds	2
   609  00B4                     _totalangleTurned:	
   610  00B4                     	ds	2
   611                           
   612                           	psect	clrtext
   613  07F8                     clear_ram0:	
   614                           ;	Called with FSR containing the base address, and
   615                           ;	W with the last address+1
   616                           
   617  07F8  0064               	clrwdt	;clear the watchdog before getting into this loop
   618  07F9                     clrloop0:	
   619  07F9  0180               	clrf	0	;clear RAM location pointed to by FSR
   620  07FA  0A84               	incf	4,f	;increment pointer
   621  07FB  0604               	xorwf	4,w	;XOR with final address
   622  07FC  1903               	btfsc	3,2	;have we reached the end yet?
   623  07FD  3400               	retlw	0	;all done for this memory range, return
   624  07FE  0604               	xorwf	4,w	;XOR again to restore value
   625  07FF  2FF9               	goto	clrloop0	;do the next byte
   626                           
   627                           	psect	cstackCOMMON
   628  0070                     __pcstackCOMMON:	
   629  0070                     ?_ADCMain:	
   630  0070                     ?_lcdWriteString:	
   631                           ; 1 bytes @ 0x0
   632                           
   633  0070                     ?_setupSPI:	
   634                           ; 1 bytes @ 0x0
   635                           
   636  0070                     ?_ser_init:	
   637                           ; 1 bytes @ 0x0
   638                           
   639  0070                     ?_setupLCD:	
   640                           ; 1 bytes @ 0x0
   641                           
   642  0070                     ?_setupADC:	
   643                           ; 1 bytes @ 0x0
   644                           
   645  0070                     ?_spi_transfer:	
   646                           ; 1 bytes @ 0x0
   647                           
   648  0070                     ?_ser_putch:	
   649                           ; 1 bytes @ 0x0
   650                           
   651  0070                     ?_lcdSetCursor:	
   652                           ; 1 bytes @ 0x0
   653                           
   654  0070                     ?_isr:	
   655                           ; 1 bytes @ 0x0
   656                           
   657  0070                     ?_initWallFollow:	
   658                           ; 1 bytes @ 0x0
   659                           
   660  0070                     ?_main:	
   661                           ; 1 bytes @ 0x0
   662                           
   663  0070                     ?_lcdWriteControl:	
   664                           ; 1 bytes @ 0x0
   665                           
   666  0070                     ?_lcdWriteData:	
   667                           ; 1 bytes @ 0x0
   668                           
   669  0070                     ?_ser_getch:	
   670                           ; 1 bytes @ 0x0
   671                           
   672  0070                     ?_getADC:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0070                     ?___lwmod:	
   676                           ; 2 bytes @ 0x0
   677                           
   678  0070                     ___lwmod@divisor:	
   679                           ; 2 bytes @ 0x0
   680                           
   681                           
   682                           ; 2 bytes @ 0x0
   683  0070                     	ds	2
   684  0072                     ___lwmod@dividend:	
   685                           
   686                           ; 2 bytes @ 0x2
   687  0072                     	ds	2
   688  0074                     ??___lwmod:	
   689                           
   690                           ; 1 bytes @ 0x4
   691  0074                     	ds	1
   692  0075                     ___lwmod@counter:	
   693                           
   694                           ; 1 bytes @ 0x5
   695  0075                     	ds	1
   696  0076                     ??_isr:	
   697                           
   698                           ; 1 bytes @ 0x6
   699  0076                     	ds	5
   700                           
   701                           	psect	cstackBANK0
   702  0020                     __pcstackBANK0:	
   703  0020                     ?_moveCCW:	
   704  0020                     ??_setupSPI:	
   705                           ; 1 bytes @ 0x0
   706                           
   707  0020                     ??_ser_init:	
   708                           ; 1 bytes @ 0x0
   709                           
   710  0020                     ??_setupADC:	
   711                           ; 1 bytes @ 0x0
   712                           
   713  0020                     ??_spi_transfer:	
   714                           ; 1 bytes @ 0x0
   715                           
   716  0020                     ??_ser_putch:	
   717                           ; 1 bytes @ 0x0
   718                           
   719  0020                     ??_getADC:	
   720                           ; 1 bytes @ 0x0
   721                           
   722  0020                     ??_lcdWriteControl:	
   723                           ; 1 bytes @ 0x0
   724                           
   725  0020                     ??_lcdWriteData:	
   726                           ; 1 bytes @ 0x0
   727                           
   728  0020                     ??_ser_getch:	
   729                           ; 1 bytes @ 0x0
   730                           
   731  0020                     ?___wmul:	
   732                           ; 1 bytes @ 0x0
   733                           
   734  0020                     ser_putch@c:	
   735                           ; 2 bytes @ 0x0
   736                           
   737  0020                     moveCCW@numberOfSteps:	
   738                           ; 1 bytes @ 0x0
   739                           
   740  0020                     ___wmul@multiplier:	
   741                           ; 2 bytes @ 0x0
   742                           
   743                           
   744                           ; 2 bytes @ 0x0
   745  0020                     	ds	1
   746  0021                     ?_DriveDirect:	
   747  0021                     spi_transfer@temp:	
   748                           ; 1 bytes @ 0x1
   749                           
   750  0021                     ser_getch@rxbyte:	
   751                           ; 1 bytes @ 0x1
   752                           
   753  0021                     DriveDirect@VelocityRight:	
   754                           ; 1 bytes @ 0x1
   755                           
   756                           
   757                           ; 2 bytes @ 0x1
   758  0021                     	ds	1
   759  0022                     ??_moveCCW:	
   760  0022                     ?_getSensorData:	
   761                           ; 1 bytes @ 0x2
   762                           
   763  0022                     lcdWriteControl@databyte:	
   764                           ; 2 bytes @ 0x2
   765                           
   766  0022                     lcdWriteData@databyte:	
   767                           ; 1 bytes @ 0x2
   768                           
   769  0022                     spi_transfer@data:	
   770                           ; 1 bytes @ 0x2
   771                           
   772  0022                     getSensorData@bytes:	
   773                           ; 1 bytes @ 0x2
   774                           
   775  0022                     ___wmul@multiplicand:	
   776                           ; 1 bytes @ 0x2
   777                           
   778                           
   779                           ; 2 bytes @ 0x2
   780  0022                     	ds	1
   781  0023                     ??_lcdWriteString:	
   782  0023                     ??_setupLCD:	
   783                           ; 1 bytes @ 0x3
   784                           
   785  0023                     ?_lcdWriteToDigitBCD:	
   786                           ; 1 bytes @ 0x3
   787                           
   788  0023                     ??_lcdSetCursor:	
   789                           ; 1 bytes @ 0x3
   790                           
   791  0023                     lcdSetCursor@address:	
   792                           ; 1 bytes @ 0x3
   793                           
   794  0023                     lcdWriteToDigitBCD@data:	
   795                           ; 1 bytes @ 0x3
   796                           
   797  0023                     DriveDirect@VelocityLeft:	
   798                           ; 2 bytes @ 0x3
   799                           
   800                           
   801                           ; 2 bytes @ 0x3
   802  0023                     	ds	1
   803  0024                     ??_getSensorData:	
   804  0024                     ??___wmul:	
   805                           ; 1 bytes @ 0x4
   806                           
   807  0024                     lcdWriteString@s:	
   808                           ; 1 bytes @ 0x4
   809                           
   810  0024                     moveCCW@stepsRemaining:	
   811                           ; 1 bytes @ 0x4
   812                           
   813  0024                     ___wmul@product:	
   814                           ; 2 bytes @ 0x4
   815                           
   816                           
   817                           ; 2 bytes @ 0x4
   818  0024                     	ds	1
   819  0025                     ??_DriveDirect:	
   820  0025                     ??_lcdWriteToDigitBCD:	
   821                           ; 1 bytes @ 0x5
   822                           
   823  0025                     lcdWriteToDigitBCD@TensDigit:	
   824                           ; 1 bytes @ 0x5
   825                           
   826                           
   827                           ; 2 bytes @ 0x5
   828  0025                     	ds	1
   829  0026                     ?___lwdiv:	
   830  0026                     ?___aldiv:	
   831                           ; 2 bytes @ 0x6
   832                           
   833  0026                     DriveDirect@data:	
   834                           ; 4 bytes @ 0x6
   835                           
   836  0026                     getSensorData@sensor:	
   837                           ; 2 bytes @ 0x6
   838                           
   839  0026                     moveCCW@i:	
   840                           ; 2 bytes @ 0x6
   841                           
   842  0026                     ___lwdiv@divisor:	
   843                           ; 2 bytes @ 0x6
   844                           
   845  0026                     ___aldiv@divisor:	
   846                           ; 2 bytes @ 0x6
   847                           
   848                           
   849                           ; 4 bytes @ 0x6
   850  0026                     	ds	1
   851  0027                     lcdWriteToDigitBCD@HunsDigit:	
   852                           
   853                           ; 2 bytes @ 0x7
   854  0027                     	ds	1
   855  0028                     getSensorData@packetID:	
   856  0028                     DriveDirect@data_248:	
   857                           ; 1 bytes @ 0x8
   858                           
   859  0028                     ___lwdiv@dividend:	
   860                           ; 2 bytes @ 0x8
   861                           
   862                           
   863                           ; 2 bytes @ 0x8
   864  0028                     	ds	1
   865  0029                     lcdWriteToDigitBCD@ThouDigit:	
   866                           
   867                           ; 2 bytes @ 0x9
   868  0029                     	ds	1
   869  002A                     ??___lwdiv:	
   870  002A                     ___aldiv@dividend:	
   871                           ; 1 bytes @ 0xA
   872                           
   873                           
   874                           ; 4 bytes @ 0xA
   875  002A                     	ds	1
   876  002B                     lcdWriteToDigitBCD@TenThouDigit:	
   877  002B                     ___lwdiv@quotient:	
   878                           ; 2 bytes @ 0xB
   879                           
   880                           
   881                           ; 2 bytes @ 0xB
   882  002B                     	ds	2
   883  002D                     ___lwdiv@counter:	
   884  002D                     lcdWriteToDigitBCD@OnesDigit:	
   885                           ; 1 bytes @ 0xD
   886                           
   887                           
   888                           ; 2 bytes @ 0xD
   889  002D                     	ds	1
   890  002E                     ??___aldiv:	
   891                           
   892                           ; 1 bytes @ 0xE
   893  002E                     	ds	1
   894  002F                     ___aldiv@counter:	
   895                           
   896                           ; 1 bytes @ 0xF
   897  002F                     	ds	1
   898  0030                     ___aldiv@sign:	
   899                           
   900                           ; 1 bytes @ 0x10
   901  0030                     	ds	1
   902  0031                     ___aldiv@quotient:	
   903                           
   904                           ; 4 bytes @ 0x11
   905  0031                     	ds	4
   906  0035                     ?_adcConvertMM:	
   907  0035                     adcConvertMM@adcRAW:	
   908                           ; 2 bytes @ 0x15
   909                           
   910                           
   911                           ; 2 bytes @ 0x15
   912  0035                     	ds	2
   913  0037                     ??_adcConvertMM:	
   914                           
   915                           ; 1 bytes @ 0x17
   916  0037                     	ds	8
   917  003F                     ??_ADCMain:	
   918  003F                     ??_initWallFollow:	
   919                           ; 1 bytes @ 0x1F
   920                           
   921                           
   922                           ; 1 bytes @ 0x1F
   923  003F                     	ds	2
   924  0041                     ??_main:	
   925                           
   926                           ; 1 bytes @ 0x21
   927  0041                     	ds	3
   928  0044                     main@ADC_CURRENT:	
   929                           
   930                           ; 2 bytes @ 0x24
   931  0044                     	ds	2
   932  0046                     main@CURRENT_SPEED_L:	
   933                           
   934                           ; 2 bytes @ 0x26
   935  0046                     	ds	2
   936  0048                     main@CURRENT_SPEED_R:	
   937                           
   938                           ; 2 bytes @ 0x28
   939  0048                     	ds	2
   940  004A                     main@correctionFactor_R:	
   941                           
   942                           ; 2 bytes @ 0x2A
   943  004A                     	ds	2
   944  004C                     main@correctionFactor_L:	
   945                           
   946                           ; 2 bytes @ 0x2C
   947  004C                     	ds	2
   948  004E                     main@ADC_ADJUST:	
   949                           
   950                           ; 2 bytes @ 0x2E
   951  004E                     	ds	2
   952  0050                     main@ADJUSTED_SPEED_L:	
   953                           
   954                           ; 2 bytes @ 0x30
   955  0050                     	ds	2
   956  0052                     main@ADJUSTED_SPEED_R:	
   957                           
   958                           ; 2 bytes @ 0x32
   959  0052                     	ds	2
   960  0054                     main@controlByte:	
   961                           
   962                           ; 1 bytes @ 0x34
   963  0054                     	ds	1
   964  0055                     main@ADC_SET:	
   965                           
   966                           ; 2 bytes @ 0x35
   967  0055                     	ds	2
   968                           
   969                           	psect	maintext
   970  03C4                     __pmaintext:	
   971 ;;
   972 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   973 ;;
   974 ;; *************** function _main *****************
   975 ;; Defined at:
   976 ;;		line 93 in file "main.c"
   977 ;; Parameters:    Size  Location     Type
   978 ;;		None
   979 ;; Auto vars:     Size  Location     Type
   980 ;;  ADC_SET         2   53[BANK0 ] unsigned int 
   981 ;;  ADJUSTED_SPE    2   50[BANK0 ] unsigned int 
   982 ;;  ADJUSTED_SPE    2   48[BANK0 ] unsigned int 
   983 ;;  ADC_ADJUST      2   46[BANK0 ] unsigned int 
   984 ;;  correctionFa    2   44[BANK0 ] unsigned int 
   985 ;;  correctionFa    2   42[BANK0 ] unsigned int 
   986 ;;  CURRENT_SPEE    2   40[BANK0 ] unsigned int 
   987 ;;  CURRENT_SPEE    2   38[BANK0 ] unsigned int 
   988 ;;  ADC_CURRENT     2   36[BANK0 ] unsigned int 
   989 ;;  controlByte     1   52[BANK0 ] unsigned char 
   990 ;; Return value:  Size  Location     Type
   991 ;;                  1    wreg      void 
   992 ;; Registers used:
   993 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   994 ;; Tracked objects:
   995 ;;		On entry : B00/0
   996 ;;		On exit  : 0/0
   997 ;;		Unchanged: 0/0
   998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   999 ;;      Params:         0       0       0       0       0
  1000 ;;      Locals:         0      19       0       0       0
  1001 ;;      Temps:          0       3       0       0       0
  1002 ;;      Totals:         0      22       0       0       0
  1003 ;;Total ram usage:       22 bytes
  1004 ;; Hardware stack levels required when called:    6
  1005 ;; This function calls:
  1006 ;;		_ADCMain
  1007 ;;		_DriveDirect
  1008 ;;		_getSensorData
  1009 ;;		_initWallFollow
  1010 ;;		_lcdSetCursor
  1011 ;;		_lcdWriteToDigitBCD
  1012 ;;		_ser_init
  1013 ;;		_ser_putch
  1014 ;;		_setupADC
  1015 ;;		_setupLCD
  1016 ;;		_setupSPI
  1017 ;;		_spi_transfer
  1018 ;; This function is called by:
  1019 ;;		Startup code after reset
  1020 ;; This function uses a non-reentrant model
  1021 ;;
  1022                           
  1023                           
  1024                           ;psect for function _main
  1025  03C4                     _main:	
  1026                           
  1027                           ;main.c: 94: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1028                           
  1029                           ;incstack = 0
  1030                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1031  03C4  307F               	movlw	127
  1032  03C5  1283               	bcf	3,5	;RP0=0, select bank0
  1033  03C6  1303               	bcf	3,6	;RP1=0, select bank0
  1034  03C7  00C3               	movwf	??_main+2
  1035  03C8  30D4               	movlw	212
  1036  03C9  00C2               	movwf	??_main+1
  1037  03CA  30AE               	movlw	174
  1038  03CB  00C1               	movwf	??_main
  1039  03CC                     u2437:	
  1040  03CC  0BC1               	decfsz	??_main,f
  1041  03CD  2BCC               	goto	u2437
  1042  03CE  0BC2               	decfsz	??_main+1,f
  1043  03CF  2BCC               	goto	u2437
  1044  03D0  0BC3               	decfsz	??_main+2,f
  1045  03D1  2BCC               	goto	u2437
  1046  03D2  2BD3               	nop2
  1047                           
  1048                           ;main.c: 97: setupSPI();
  1049  03D3  120A  158A  25E6  120A  118A  	fcall	_setupSPI
  1050                           
  1051                           ;main.c: 98: ser_init();
  1052  03D8  120A  158A  258B  120A  118A  	fcall	_ser_init
  1053                           
  1054                           ;main.c: 99: setupLCD();
  1055  03DD  120A  118A  27CF  120A  118A  	fcall	_setupLCD
  1056                           
  1057                           ;main.c: 100: setupADC();
  1058  03E2  120A  158A  25D0  120A  118A  	fcall	_setupADC
  1059                           
  1060                           ;main.c: 102: unsigned char controlByte = 0b00001101;
  1061  03E7  300D               	movlw	13
  1062  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  1063  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  1064  03EA  00C1               	movwf	??_main
  1065  03EB  0841               	movf	??_main,w
  1066  03EC  00D4               	movwf	main@controlByte
  1067                           
  1068                           ;main.c: 103: spi_transfer(controlByte);
  1069  03ED  0854               	movf	main@controlByte,w
  1070  03EE  120A  158A  259A  120A  118A  	fcall	_spi_transfer
  1071                           
  1072                           ;main.c: 105: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1073  03F3  301A               	movlw	26
  1074  03F4  1283               	bcf	3,5	;RP0=0, select bank0
  1075  03F5  1303               	bcf	3,6	;RP1=0, select bank0
  1076  03F6  00C3               	movwf	??_main+2
  1077  03F7  305E               	movlw	94
  1078  03F8  00C2               	movwf	??_main+1
  1079  03F9  3086               	movlw	134
  1080  03FA  00C1               	movwf	??_main
  1081  03FB                     u2447:	
  1082  03FB  0BC1               	decfsz	??_main,f
  1083  03FC  2BFB               	goto	u2447
  1084  03FD  0BC2               	decfsz	??_main+1,f
  1085  03FE  2BFB               	goto	u2447
  1086  03FF  0BC3               	decfsz	??_main+2,f
  1087  0400  2BFB               	goto	u2447
  1088  0401  0000               	nop
  1089                           
  1090                           ;main.c: 106: ser_putch(128);
  1091  0402  3080               	movlw	128
  1092  0403  120A  158A  257F  120A  118A  	fcall	_ser_putch
  1093                           
  1094                           ;main.c: 107: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1095  0408  301A               	movlw	26
  1096  0409  1283               	bcf	3,5	;RP0=0, select bank0
  1097  040A  1303               	bcf	3,6	;RP1=0, select bank0
  1098  040B  00C3               	movwf	??_main+2
  1099  040C  305E               	movlw	94
  1100  040D  00C2               	movwf	??_main+1
  1101  040E  3086               	movlw	134
  1102  040F  00C1               	movwf	??_main
  1103  0410                     u2457:	
  1104  0410  0BC1               	decfsz	??_main,f
  1105  0411  2C10               	goto	u2457
  1106  0412  0BC2               	decfsz	??_main+1,f
  1107  0413  2C10               	goto	u2457
  1108  0414  0BC3               	decfsz	??_main+2,f
  1109  0415  2C10               	goto	u2457
  1110  0416  0000               	nop
  1111                           
  1112                           ;main.c: 108: ser_putch(132);
  1113  0417  3084               	movlw	132
  1114  0418  120A  158A  257F  120A  118A  	fcall	_ser_putch
  1115                           
  1116                           ;main.c: 109: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1117  041D  301A               	movlw	26
  1118  041E  1283               	bcf	3,5	;RP0=0, select bank0
  1119  041F  1303               	bcf	3,6	;RP1=0, select bank0
  1120  0420  00C3               	movwf	??_main+2
  1121  0421  305E               	movlw	94
  1122  0422  00C2               	movwf	??_main+1
  1123  0423  3086               	movlw	134
  1124  0424  00C1               	movwf	??_main
  1125  0425                     u2467:	
  1126  0425  0BC1               	decfsz	??_main,f
  1127  0426  2C25               	goto	u2467
  1128  0427  0BC2               	decfsz	??_main+1,f
  1129  0428  2C25               	goto	u2467
  1130  0429  0BC3               	decfsz	??_main+2,f
  1131  042A  2C25               	goto	u2467
  1132  042B  0000               	nop
  1133                           
  1134                           ;main.c: 111: lcdWriteToDigitBCD(500);
  1135  042C  30F4               	movlw	244
  1136  042D  1283               	bcf	3,5	;RP0=0, select bank0
  1137  042E  1303               	bcf	3,6	;RP1=0, select bank0
  1138  042F  00A3               	movwf	lcdWriteToDigitBCD@data
  1139  0430  3001               	movlw	1
  1140  0431  00A4               	movwf	lcdWriteToDigitBCD@data+1
  1141  0432  120A  118A  258B  120A  118A  	fcall	_lcdWriteToDigitBCD
  1142  0437                     l2192:	
  1143                           ;main.c: 114: while(1){
  1144                           
  1145                           
  1146                           ;main.c: 119: if (getSensorData(18,1) == 0b00000001){
  1147  0437  1283               	bcf	3,5	;RP0=0, select bank0
  1148  0438  1303               	bcf	3,6	;RP1=0, select bank0
  1149  0439  01A2               	clrf	getSensorData@bytes
  1150  043A  0AA2               	incf	getSensorData@bytes,f
  1151  043B  3012               	movlw	18
  1152  043C  120A  158A  2693  120A  118A  	fcall	_getSensorData
  1153  0441  1283               	bcf	3,5	;RP0=0, select bank0
  1154  0442  1303               	bcf	3,6	;RP1=0, select bank0
  1155  0443  0322               	decf	?_getSensorData,w
  1156  0444  0423               	iorwf	?_getSensorData+1,w
  1157  0445  1D03               	btfss	3,2
  1158  0446  2CFC               	goto	l128
  1159                           
  1160                           ;main.c: 120: totalDistTrav = 0;
  1161  0447  01DB               	clrf	_totalDistTrav
  1162  0448  01DC               	clrf	_totalDistTrav+1
  1163                           
  1164                           ;main.c: 121: DriveDirect(200,200);
  1165  0449  30C8               	movlw	200
  1166  044A  00A1               	movwf	DriveDirect@VelocityRight
  1167  044B  3000               	movlw	0
  1168  044C  00A2               	movwf	DriveDirect@VelocityRight+1
  1169  044D  30C8               	movlw	200
  1170  044E  00A3               	movwf	DriveDirect@VelocityLeft
  1171  044F  3000               	movlw	0
  1172  0450  00A4               	movwf	DriveDirect@VelocityLeft+1
  1173  0451  120A  118A  2742  120A  118A  	fcall	_DriveDirect
  1174  0456                     l2206:	
  1175                           ;main.c: 122: while (totalDistTrav < 2){
  1176                           
  1177  0456  1283               	bcf	3,5	;RP0=0, select bank0
  1178  0457  1303               	bcf	3,6	;RP1=0, select bank0
  1179  0458  085C               	movf	_totalDistTrav+1,w
  1180  0459  3A80               	xorlw	128
  1181  045A  00FF               	movwf	127
  1182  045B  3080               	movlw	128
  1183  045C  027F               	subwf	127,w
  1184  045D  1D03               	skipz
  1185  045E  2C61               	goto	u2165
  1186  045F  3002               	movlw	2
  1187  0460  025B               	subwf	_totalDistTrav,w
  1188  0461                     u2165:	
  1189  0461  1803               	btfsc	3,0
  1190  0462  2C9B               	goto	l2208
  1191                           
  1192                           ;main.c: 123: distTrav = getSensorData(19,2);
  1193  0463  3002               	movlw	2
  1194  0464  1283               	bcf	3,5	;RP0=0, select bank0
  1195  0465  1303               	bcf	3,6	;RP1=0, select bank0
  1196  0466  00C1               	movwf	??_main
  1197  0467  0841               	movf	??_main,w
  1198  0468  00A2               	movwf	getSensorData@bytes
  1199  0469  3013               	movlw	19
  1200  046A  120A  158A  2693  120A  118A  	fcall	_getSensorData
  1201  046F  1283               	bcf	3,5	;RP0=0, select bank0
  1202  0470  1303               	bcf	3,6	;RP1=0, select bank0
  1203  0471  0823               	movf	?_getSensorData+1,w
  1204  0472  1683               	bsf	3,5	;RP0=1, select bank1
  1205  0473  1303               	bcf	3,6	;RP1=0, select bank1
  1206  0474  00AB               	movwf	(_distTrav+1)^(0+128)
  1207  0475  1283               	bcf	3,5	;RP0=0, select bank0
  1208  0476  1303               	bcf	3,6	;RP1=0, select bank0
  1209  0477  0822               	movf	?_getSensorData,w
  1210  0478  1683               	bsf	3,5	;RP0=1, select bank1
  1211  0479  1303               	bcf	3,6	;RP1=0, select bank1
  1212  047A  00AA               	movwf	_distTrav^(0+128)
  1213                           
  1214                           ;main.c: 124: totalDistTrav = (totalDistTrav + distTrav);
  1215  047B  082A               	movf	_distTrav^(0+128),w
  1216  047C  1283               	bcf	3,5	;RP0=0, select bank0
  1217  047D  1303               	bcf	3,6	;RP1=0, select bank0
  1218  047E  075B               	addwf	_totalDistTrav,w
  1219  047F  00DB               	movwf	_totalDistTrav
  1220  0480  1683               	bsf	3,5	;RP0=1, select bank1
  1221  0481  1303               	bcf	3,6	;RP1=0, select bank1
  1222  0482  082B               	movf	(_distTrav+1)^(0+128),w
  1223  0483  1803               	skipnc
  1224  0484  0A2B               	incf	(_distTrav+1)^(0+128),w
  1225  0485  1283               	bcf	3,5	;RP0=0, select bank0
  1226  0486  1303               	bcf	3,6	;RP1=0, select bank0
  1227  0487  075C               	addwf	_totalDistTrav+1,w
  1228  0488  00DC               	movwf	_totalDistTrav+1
  1229                           
  1230                           ;main.c: 126: lcdSetCursor(0x00);
  1231  0489  3000               	movlw	0
  1232  048A  120A  158A  256C  120A  118A  	fcall	_lcdSetCursor
  1233                           
  1234                           ;main.c: 127: lcdWriteToDigitBCD(totalDistTrav);
  1235  048F  1283               	bcf	3,5	;RP0=0, select bank0
  1236  0490  1303               	bcf	3,6	;RP1=0, select bank0
  1237  0491  085C               	movf	_totalDistTrav+1,w
  1238  0492  00A4               	movwf	lcdWriteToDigitBCD@data+1
  1239  0493  085B               	movf	_totalDistTrav,w
  1240  0494  00A3               	movwf	lcdWriteToDigitBCD@data
  1241  0495  120A  118A  258B  120A  118A  	fcall	_lcdWriteToDigitBCD
  1242  049A  2C56               	goto	l2206
  1243  049B                     l2208:	
  1244                           
  1245                           ;main.c: 128: }
  1246                           ;main.c: 130: DriveDirect(250,250);
  1247  049B  30FA               	movlw	250
  1248  049C  1283               	bcf	3,5	;RP0=0, select bank0
  1249  049D  1303               	bcf	3,6	;RP1=0, select bank0
  1250  049E  00A1               	movwf	DriveDirect@VelocityRight
  1251  049F  3000               	movlw	0
  1252  04A0  00A2               	movwf	DriveDirect@VelocityRight+1
  1253  04A1  30FA               	movlw	250
  1254  04A2  00A3               	movwf	DriveDirect@VelocityLeft
  1255  04A3  3000               	movlw	0
  1256  04A4  00A4               	movwf	DriveDirect@VelocityLeft+1
  1257  04A5  120A  118A  2742  120A  118A  	fcall	_DriveDirect
  1258  04AA                     l2218:	
  1259                           ;main.c: 131: while (totalDistTrav < 4000){
  1260                           
  1261  04AA  1283               	bcf	3,5	;RP0=0, select bank0
  1262  04AB  1303               	bcf	3,6	;RP1=0, select bank0
  1263  04AC  085C               	movf	_totalDistTrav+1,w
  1264  04AD  3A80               	xorlw	128
  1265  04AE  00FF               	movwf	127
  1266  04AF  308F               	movlw	143
  1267  04B0  027F               	subwf	127,w
  1268  04B1  1D03               	skipz
  1269  04B2  2CB5               	goto	u2175
  1270  04B3  30A0               	movlw	160
  1271  04B4  025B               	subwf	_totalDistTrav,w
  1272  04B5                     u2175:	
  1273  04B5  1803               	btfsc	3,0
  1274  04B6  2CEF               	goto	l2220
  1275                           
  1276                           ;main.c: 132: distTrav = getSensorData(19,2);
  1277  04B7  3002               	movlw	2
  1278  04B8  1283               	bcf	3,5	;RP0=0, select bank0
  1279  04B9  1303               	bcf	3,6	;RP1=0, select bank0
  1280  04BA  00C1               	movwf	??_main
  1281  04BB  0841               	movf	??_main,w
  1282  04BC  00A2               	movwf	getSensorData@bytes
  1283  04BD  3013               	movlw	19
  1284  04BE  120A  158A  2693  120A  118A  	fcall	_getSensorData
  1285  04C3  1283               	bcf	3,5	;RP0=0, select bank0
  1286  04C4  1303               	bcf	3,6	;RP1=0, select bank0
  1287  04C5  0823               	movf	?_getSensorData+1,w
  1288  04C6  1683               	bsf	3,5	;RP0=1, select bank1
  1289  04C7  1303               	bcf	3,6	;RP1=0, select bank1
  1290  04C8  00AB               	movwf	(_distTrav+1)^(0+128)
  1291  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  1292  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  1293  04CB  0822               	movf	?_getSensorData,w
  1294  04CC  1683               	bsf	3,5	;RP0=1, select bank1
  1295  04CD  1303               	bcf	3,6	;RP1=0, select bank1
  1296  04CE  00AA               	movwf	_distTrav^(0+128)
  1297                           
  1298                           ;main.c: 133: totalDistTrav = (totalDistTrav + distTrav);
  1299  04CF  082A               	movf	_distTrav^(0+128),w
  1300  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  1301  04D1  1303               	bcf	3,6	;RP1=0, select bank0
  1302  04D2  075B               	addwf	_totalDistTrav,w
  1303  04D3  00DB               	movwf	_totalDistTrav
  1304  04D4  1683               	bsf	3,5	;RP0=1, select bank1
  1305  04D5  1303               	bcf	3,6	;RP1=0, select bank1
  1306  04D6  082B               	movf	(_distTrav+1)^(0+128),w
  1307  04D7  1803               	skipnc
  1308  04D8  0A2B               	incf	(_distTrav+1)^(0+128),w
  1309  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  1310  04DA  1303               	bcf	3,6	;RP1=0, select bank0
  1311  04DB  075C               	addwf	_totalDistTrav+1,w
  1312  04DC  00DC               	movwf	_totalDistTrav+1
  1313                           
  1314                           ;main.c: 134: lcdSetCursor(0x00);
  1315  04DD  3000               	movlw	0
  1316  04DE  120A  158A  256C  120A  118A  	fcall	_lcdSetCursor
  1317                           
  1318                           ;main.c: 135: lcdWriteToDigitBCD(totalDistTrav);
  1319  04E3  1283               	bcf	3,5	;RP0=0, select bank0
  1320  04E4  1303               	bcf	3,6	;RP1=0, select bank0
  1321  04E5  085C               	movf	_totalDistTrav+1,w
  1322  04E6  00A4               	movwf	lcdWriteToDigitBCD@data+1
  1323  04E7  085B               	movf	_totalDistTrav,w
  1324  04E8  00A3               	movwf	lcdWriteToDigitBCD@data
  1325  04E9  120A  118A  258B  120A  118A  	fcall	_lcdWriteToDigitBCD
  1326  04EE  2CAA               	goto	l2218
  1327  04EF                     l2220:	
  1328                           
  1329                           ;main.c: 136: }
  1330                           ;main.c: 139: DriveDirect(0,0);
  1331  04EF  3000               	movlw	0
  1332  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  1333  04F1  1303               	bcf	3,6	;RP1=0, select bank0
  1334  04F2  00A1               	movwf	DriveDirect@VelocityRight
  1335  04F3  00A2               	movwf	DriveDirect@VelocityRight+1
  1336  04F4  3000               	movlw	0
  1337  04F5  00A3               	movwf	DriveDirect@VelocityLeft
  1338  04F6  00A4               	movwf	DriveDirect@VelocityLeft+1
  1339  04F7  120A  118A  2742  120A  118A  	fcall	_DriveDirect
  1340  04FC                     l128:	
  1341                           
  1342                           ;main.c: 141: }
  1343                           ;main.c: 144: if (getSensorData(18,1) == 0b00000100){
  1344  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  1345  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  1346  04FE  01A2               	clrf	getSensorData@bytes
  1347  04FF  0AA2               	incf	getSensorData@bytes,f
  1348  0500  3012               	movlw	18
  1349  0501  120A  158A  2693  120A  118A  	fcall	_getSensorData
  1350  0506  3004               	movlw	4
  1351  0507  1283               	bcf	3,5	;RP0=0, select bank0
  1352  0508  1303               	bcf	3,6	;RP1=0, select bank0
  1353  0509  0622               	xorwf	?_getSensorData,w
  1354  050A  0423               	iorwf	?_getSensorData+1,w
  1355  050B  1D03               	btfss	3,2
  1356  050C  2D12               	goto	l2224
  1357                           
  1358                           ;main.c: 146: initWallFollow();
  1359  050D  120A  118A  2622  120A  118A  	fcall	_initWallFollow
  1360  0512                     l2224:	
  1361                           
  1362                           ;main.c: 178: }
  1363                           ;main.c: 186: if(getSensorData(18,1) == 0b00000101){
  1364  0512  1283               	bcf	3,5	;RP0=0, select bank0
  1365  0513  1303               	bcf	3,6	;RP1=0, select bank0
  1366  0514  01A2               	clrf	getSensorData@bytes
  1367  0515  0AA2               	incf	getSensorData@bytes,f
  1368  0516  3012               	movlw	18
  1369  0517  120A  158A  2693  120A  118A  	fcall	_getSensorData
  1370  051C  3005               	movlw	5
  1371  051D  1283               	bcf	3,5	;RP0=0, select bank0
  1372  051E  1303               	bcf	3,6	;RP1=0, select bank0
  1373  051F  0622               	xorwf	?_getSensorData,w
  1374  0520  0423               	iorwf	?_getSensorData+1,w
  1375  0521  1D03               	btfss	3,2
  1376  0522  2C37               	goto	l2192
  1377                           
  1378                           ;main.c: 188: unsigned int ADC_SET = 250;
  1379  0523  30FA               	movlw	250
  1380  0524  00D5               	movwf	main@ADC_SET
  1381  0525  3000               	movlw	0
  1382  0526  00D6               	movwf	main@ADC_SET+1
  1383                           
  1384                           ;main.c: 189: unsigned int ADC_CURRENT = 0;
  1385  0527  01C4               	clrf	main@ADC_CURRENT
  1386  0528  01C5               	clrf	main@ADC_CURRENT+1
  1387                           
  1388                           ;main.c: 190: unsigned int ADC_ADJUST = 0;
  1389  0529  01CE               	clrf	main@ADC_ADJUST
  1390  052A  01CF               	clrf	main@ADC_ADJUST+1
  1391                           
  1392                           ;main.c: 191: unsigned int CURRENT_SPEED_L = 0;
  1393  052B  01C6               	clrf	main@CURRENT_SPEED_L
  1394  052C  01C7               	clrf	main@CURRENT_SPEED_L+1
  1395                           
  1396                           ;main.c: 192: unsigned int ADJUSTED_SPEED_L = 0;
  1397  052D  01D0               	clrf	main@ADJUSTED_SPEED_L
  1398  052E  01D1               	clrf	main@ADJUSTED_SPEED_L+1
  1399                           
  1400                           ;main.c: 193: unsigned int CURRENT_SPEED_R = 0;
  1401  052F  01C8               	clrf	main@CURRENT_SPEED_R
  1402  0530  01C9               	clrf	main@CURRENT_SPEED_R+1
  1403                           
  1404                           ;main.c: 194: unsigned int ADJUSTED_SPEED_R = 0;
  1405  0531  01D2               	clrf	main@ADJUSTED_SPEED_R
  1406  0532  01D3               	clrf	main@ADJUSTED_SPEED_R+1
  1407                           
  1408                           ;main.c: 195: unsigned int correctionFactor_R = 0;
  1409  0533  01CA               	clrf	main@correctionFactor_R
  1410  0534  01CB               	clrf	main@correctionFactor_R+1
  1411                           
  1412                           ;main.c: 196: unsigned int correctionFactor_L = 0;
  1413  0535  01CC               	clrf	main@correctionFactor_L
  1414  0536  01CD               	clrf	main@correctionFactor_L+1
  1415                           
  1416                           ;main.c: 198: initWallFollow();
  1417  0537  120A  118A  2622  120A  118A  	fcall	_initWallFollow
  1418  053C  2D5A               	goto	l2246
  1419  053D                     l2252:	
  1420                           
  1421                           ;main.c: 205: ADC_ADJUST = adcRAW - ADC_SET;
  1422  053D  0955               	comf	main@ADC_SET,w
  1423  053E  00C1               	movwf	??_main
  1424  053F  0956               	comf	main@ADC_SET+1,w
  1425  0540  00C2               	movwf	??_main+1
  1426  0541  0AC1               	incf	??_main,f
  1427  0542  1903               	skipnz
  1428  0543  0AC2               	incf	??_main+1,f
  1429  0544  0857               	movf	_adcRAW,w	;volatile
  1430  0545  0741               	addwf	??_main,w
  1431  0546  00CE               	movwf	main@ADC_ADJUST
  1432  0547  0858               	movf	_adcRAW+1,w	;volatile
  1433  0548  1803               	skipnc
  1434  0549  0A58               	incf	_adcRAW+1,w	;volatile
  1435  054A  2D58               	goto	L1
  1436  054B                     l2256:	
  1437                           ;main.c: 206: } else if(adcRAW < ADC_SET) {
  1438                           
  1439                           
  1440                           ;main.c: 207: ADC_ADJUST = ADC_SET - adcRAW;
  1441  054B  0957               	comf	_adcRAW,w	;volatile
  1442  054C  00C1               	movwf	??_main
  1443  054D  0958               	comf	_adcRAW+1,w	;volatile
  1444  054E  00C2               	movwf	??_main+1
  1445  054F  0AC1               	incf	??_main,f
  1446  0550  1903               	skipnz
  1447  0551  0AC2               	incf	??_main+1,f
  1448  0552  0855               	movf	main@ADC_SET,w
  1449  0553  0741               	addwf	??_main,w
  1450  0554  00CE               	movwf	main@ADC_ADJUST
  1451  0555  0856               	movf	main@ADC_SET+1,w
  1452  0556  1803               	skipnc
  1453  0557  0A56               	incf	main@ADC_SET+1,w
  1454  0558                     L1:	
  1455  0558  0742               	addwf	??_main+1,w
  1456  0559  00CF               	movwf	main@ADC_ADJUST+1
  1457  055A                     l2246:	
  1458                           ;main.c: 200: while(1){
  1459                           
  1460                           ;main.c: 208: } else if(adcRAW = ADC_SET){
  1461                           
  1462                           
  1463                           ;main.c: 201: ADCMain();
  1464  055A  120A  158A  25FE  120A  118A  	fcall	_ADCMain
  1465                           
  1466                           ;main.c: 202: DriveDirect(ADJUSTED_SPEED_R,ADJUSTED_SPEED_L);
  1467  055F  1283               	bcf	3,5	;RP0=0, select bank0
  1468  0560  1303               	bcf	3,6	;RP1=0, select bank0
  1469  0561  0853               	movf	main@ADJUSTED_SPEED_R+1,w
  1470  0562  00A2               	movwf	DriveDirect@VelocityRight+1
  1471  0563  0852               	movf	main@ADJUSTED_SPEED_R,w
  1472  0564  00A1               	movwf	DriveDirect@VelocityRight
  1473  0565  0851               	movf	main@ADJUSTED_SPEED_L+1,w
  1474  0566  00A4               	movwf	DriveDirect@VelocityLeft+1
  1475  0567  0850               	movf	main@ADJUSTED_SPEED_L,w
  1476  0568  00A3               	movwf	DriveDirect@VelocityLeft
  1477  0569  120A  118A  2742  120A  118A  	fcall	_DriveDirect
  1478                           
  1479                           ;main.c: 204: if (adcRAW > ADC_SET ) {
  1480  056E  1283               	bcf	3,5	;RP0=0, select bank0
  1481  056F  1303               	bcf	3,6	;RP1=0, select bank0
  1482  0570  0858               	movf	_adcRAW+1,w	;volatile
  1483  0571  0256               	subwf	main@ADC_SET+1,w
  1484  0572  1D03               	skipz
  1485  0573  2D76               	goto	u2205
  1486  0574  0857               	movf	_adcRAW,w	;volatile
  1487  0575  0255               	subwf	main@ADC_SET,w
  1488  0576                     u2205:	
  1489  0576  1C03               	btfss	3,0
  1490  0577  2D3D               	goto	l2252
  1491  0578  0856               	movf	main@ADC_SET+1,w
  1492  0579  0258               	subwf	_adcRAW+1,w	;volatile
  1493  057A  1D03               	skipz
  1494  057B  2D7E               	goto	u2215
  1495  057C  0855               	movf	main@ADC_SET,w
  1496  057D  0257               	subwf	_adcRAW,w	;volatile
  1497  057E                     u2215:	
  1498  057E  1C03               	btfss	3,0
  1499  057F  2D4B               	goto	l2256
  1500  0580  0856               	movf	main@ADC_SET+1,w
  1501  0581  00D8               	movwf	_adcRAW+1	;volatile
  1502  0582  0855               	movf	main@ADC_SET,w
  1503  0583  00D7               	movwf	_adcRAW	;volatile
  1504  0584  0857               	movf	_adcRAW,w	;volatile
  1505  0585  0458               	iorwf	_adcRAW+1,w	;volatile
  1506  0586  1903               	btfsc	3,2
  1507  0587  2D5A               	goto	l2246
  1508                           
  1509                           ;main.c: 209: ADC_ADJUST = 0;
  1510  0588  01CE               	clrf	main@ADC_ADJUST
  1511  0589  01CF               	clrf	main@ADC_ADJUST+1
  1512  058A  2D5A               	goto	l2246
  1513  058B                     __end_of_main:	
  1514                           
  1515                           	psect	text1
  1516  0D9A                     __ptext1:	
  1517 ;; *************** function _spi_transfer *****************
  1518 ;; Defined at:
  1519 ;;		line 23 in file "SPI.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;  data            1    wreg     unsigned char 
  1522 ;; Auto vars:     Size  Location     Type
  1523 ;;  data            1    2[BANK0 ] unsigned char 
  1524 ;;  temp            1    1[BANK0 ] unsigned char 
  1525 ;; Return value:  Size  Location     Type
  1526 ;;                  1    wreg      unsigned char 
  1527 ;; Registers used:
  1528 ;;		wreg, status,2
  1529 ;; Tracked objects:
  1530 ;;		On entry : 0/0
  1531 ;;		On exit  : 0/0
  1532 ;;		Unchanged: 0/0
  1533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1534 ;;      Params:         0       0       0       0       0
  1535 ;;      Locals:         0       2       0       0       0
  1536 ;;      Temps:          0       1       0       0       0
  1537 ;;      Totals:         0       3       0       0       0
  1538 ;;Total ram usage:        3 bytes
  1539 ;; Hardware stack levels used:    1
  1540 ;; Hardware stack levels required when called:    2
  1541 ;; This function calls:
  1542 ;;		Nothing
  1543 ;; This function is called by:
  1544 ;;		_main
  1545 ;; This function uses a non-reentrant model
  1546 ;;
  1547                           
  1548                           
  1549                           ;psect for function _spi_transfer
  1550  0D9A                     _spi_transfer:	
  1551                           
  1552                           ;incstack = 0
  1553                           ; Regs used in _spi_transfer: [wreg+status,2]
  1554                           ;spi_transfer@data stored from wreg
  1555  0D9A  1283               	bcf	3,5	;RP0=0, select bank0
  1556  0D9B  1303               	bcf	3,6	;RP1=0, select bank0
  1557  0D9C  00A2               	movwf	spi_transfer@data
  1558                           
  1559                           ;SPI.c: 24: unsigned char temp = 0;
  1560  0D9D  01A1               	clrf	spi_transfer@temp
  1561                           
  1562                           ;SPI.c: 26: SSPIF = 0;
  1563  0D9E  118C               	bcf	12,3	;volatile
  1564                           
  1565                           ;SPI.c: 27: SSPBUF = data;
  1566  0D9F  0822               	movf	spi_transfer@data,w
  1567  0DA0  0093               	movwf	19	;volatile
  1568  0DA1                     l266:	
  1569                           ;SPI.c: 29: while (SSPIF == 0);
  1570                           
  1571  0DA1  1D8C               	btfss	12,3	;volatile
  1572  0DA2  2DA1               	goto	l266
  1573                           
  1574                           ;SPI.c: 30: temp = SSPBUF;
  1575  0DA3  0813               	movf	19,w	;volatile
  1576  0DA4  00A0               	movwf	??_spi_transfer
  1577  0DA5  0820               	movf	??_spi_transfer,w
  1578  0DA6  00A1               	movwf	spi_transfer@temp
  1579                           
  1580                           ;SPI.c: 31: SSPIF = 0;
  1581  0DA7  118C               	bcf	12,3	;volatile
  1582  0DA8  0008               	return
  1583  0DA9                     __end_of_spi_transfer:	
  1584                           ;SPI.c: 33: return temp;
  1585                           ;	Return value of _spi_transfer is never used
  1586                           
  1587                           
  1588                           	psect	text2
  1589  0DE6                     __ptext2:	
  1590 ;; *************** function _setupSPI *****************
  1591 ;; Defined at:
  1592 ;;		line 4 in file "SPI.c"
  1593 ;; Parameters:    Size  Location     Type
  1594 ;;		None
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;		None
  1597 ;; Return value:  Size  Location     Type
  1598 ;;                  1    wreg      void 
  1599 ;; Registers used:
  1600 ;;		wreg, status,2
  1601 ;; Tracked objects:
  1602 ;;		On entry : 0/0
  1603 ;;		On exit  : 0/0
  1604 ;;		Unchanged: 0/0
  1605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1606 ;;      Params:         0       0       0       0       0
  1607 ;;      Locals:         0       0       0       0       0
  1608 ;;      Temps:          0       0       0       0       0
  1609 ;;      Totals:         0       0       0       0       0
  1610 ;;Total ram usage:        0 bytes
  1611 ;; Hardware stack levels used:    1
  1612 ;; Hardware stack levels required when called:    2
  1613 ;; This function calls:
  1614 ;;		Nothing
  1615 ;; This function is called by:
  1616 ;;		_main
  1617 ;; This function uses a non-reentrant model
  1618 ;;
  1619                           
  1620                           
  1621                           ;psect for function _setupSPI
  1622  0DE6                     _setupSPI:	
  1623                           
  1624                           ;SPI.c: 6: TRISB = 0b00000000;
  1625                           
  1626                           ;incstack = 0
  1627                           ; Regs used in _setupSPI: [wreg+status,2]
  1628  0DE6  1683               	bsf	3,5	;RP0=1, select bank1
  1629  0DE7  1303               	bcf	3,6	;RP1=0, select bank1
  1630  0DE8  0186               	clrf	6	;volatile
  1631                           
  1632                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  1633  0DE9  3040               	movlw	64
  1634  0DEA  0094               	movwf	20	;volatile
  1635                           
  1636                           ;SPI.c: 9: SSPCON = 0b00100000;
  1637  0DEB  3020               	movlw	32
  1638  0DEC  1283               	bcf	3,5	;RP0=0, select bank0
  1639  0DED  1303               	bcf	3,6	;RP1=0, select bank0
  1640  0DEE  0094               	movwf	20	;volatile
  1641                           
  1642                           ;SPI.c: 10: TRISC = 0b11010000;
  1643  0DEF  30D0               	movlw	208
  1644  0DF0  1683               	bsf	3,5	;RP0=1, select bank1
  1645  0DF1  1303               	bcf	3,6	;RP1=0, select bank1
  1646  0DF2  0087               	movwf	7	;volatile
  1647                           
  1648                           ;SPI.c: 11: PORTC = 0b00000011;
  1649  0DF3  3003               	movlw	3
  1650  0DF4  1283               	bcf	3,5	;RP0=0, select bank0
  1651  0DF5  1303               	bcf	3,6	;RP1=0, select bank0
  1652  0DF6  0087               	movwf	7	;volatile
  1653                           
  1654                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  1655  0DF7  3004               	movlw	4
  1656  0DF8  1683               	bsf	3,5	;RP0=1, select bank1
  1657  0DF9  1303               	bcf	3,6	;RP1=0, select bank1
  1658  0DFA  0081               	movwf	1	;volatile
  1659                           
  1660                           ;SPI.c: 16: TMR0IE = 1;
  1661  0DFB  168B               	bsf	11,5	;volatile
  1662                           
  1663                           ;SPI.c: 19: (GIE = 1);
  1664  0DFC  178B               	bsf	11,7	;volatile
  1665  0DFD  0008               	return
  1666  0DFE                     __end_of_setupSPI:	
  1667                           
  1668                           	psect	text3
  1669  07CF                     __ptext3:	
  1670 ;; *************** function _setupLCD *****************
  1671 ;; Defined at:
  1672 ;;		line 86 in file "LCD.c"
  1673 ;; Parameters:    Size  Location     Type
  1674 ;;		None
  1675 ;; Auto vars:     Size  Location     Type
  1676 ;;		None
  1677 ;; Return value:  Size  Location     Type
  1678 ;;                  1    wreg      void 
  1679 ;; Registers used:
  1680 ;;		wreg, status,2, status,0, pclath, cstack
  1681 ;; Tracked objects:
  1682 ;;		On entry : 0/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1686 ;;      Params:         0       0       0       0       0
  1687 ;;      Locals:         0       0       0       0       0
  1688 ;;      Temps:          0       0       0       0       0
  1689 ;;      Totals:         0       0       0       0       0
  1690 ;;Total ram usage:        0 bytes
  1691 ;; Hardware stack levels used:    1
  1692 ;; Hardware stack levels required when called:    3
  1693 ;; This function calls:
  1694 ;;		_lcdWriteControl
  1695 ;; This function is called by:
  1696 ;;		_main
  1697 ;; This function uses a non-reentrant model
  1698 ;;
  1699                           
  1700                           
  1701                           ;psect for function _setupLCD
  1702  07CF                     _setupLCD:	
  1703                           
  1704                           ;LCD.c: 88: ADCON1 = 0b00000010;
  1705                           
  1706                           ;incstack = 0
  1707                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  1708  07CF  3002               	movlw	2
  1709  07D0  1683               	bsf	3,5	;RP0=1, select bank1
  1710  07D1  1303               	bcf	3,6	;RP1=0, select bank1
  1711  07D2  009F               	movwf	31	;volatile
  1712                           
  1713                           ;LCD.c: 90: PORTD = 0;
  1714  07D3  1283               	bcf	3,5	;RP0=0, select bank0
  1715  07D4  1303               	bcf	3,6	;RP1=0, select bank0
  1716  07D5  0188               	clrf	8	;volatile
  1717                           
  1718                           ;LCD.c: 91: PORTE = 0;
  1719  07D6  0189               	clrf	9	;volatile
  1720                           
  1721                           ;LCD.c: 93: TRISD = 0b00000000;
  1722  07D7  1683               	bsf	3,5	;RP0=1, select bank1
  1723  07D8  1303               	bcf	3,6	;RP1=0, select bank1
  1724  07D9  0188               	clrf	8	;volatile
  1725                           
  1726                           ;LCD.c: 94: TRISE = 0b00000000;
  1727  07DA  0189               	clrf	9	;volatile
  1728                           
  1729                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  1730  07DB  3001               	movlw	1
  1731  07DC  120A  158A  25BC  120A  118A  	fcall	_lcdWriteControl
  1732                           
  1733                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  1734  07E1  3038               	movlw	56
  1735  07E2  120A  158A  25BC  120A  118A  	fcall	_lcdWriteControl
  1736                           
  1737                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  1738  07E7  300C               	movlw	12
  1739  07E8  120A  158A  25BC  120A  118A  	fcall	_lcdWriteControl
  1740                           
  1741                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  1742  07ED  3006               	movlw	6
  1743  07EE  120A  158A  25BC  120A  118A  	fcall	_lcdWriteControl
  1744                           
  1745                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  1746  07F3  3002               	movlw	2
  1747  07F4  120A  158A  25BC   	fcall	_lcdWriteControl
  1748  07F7  0008               	return
  1749  07F8                     __end_of_setupLCD:	
  1750                           
  1751                           	psect	text4
  1752  0DD0                     __ptext4:	
  1753 ;; *************** function _setupADC *****************
  1754 ;; Defined at:
  1755 ;;		line 8 in file "ADC.c"
  1756 ;; Parameters:    Size  Location     Type
  1757 ;;		None
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;		None
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  1    wreg      void 
  1762 ;; Registers used:
  1763 ;;		wreg, status,2
  1764 ;; Tracked objects:
  1765 ;;		On entry : 0/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1769 ;;      Params:         0       0       0       0       0
  1770 ;;      Locals:         0       0       0       0       0
  1771 ;;      Temps:          0       1       0       0       0
  1772 ;;      Totals:         0       1       0       0       0
  1773 ;;Total ram usage:        1 bytes
  1774 ;; Hardware stack levels used:    1
  1775 ;; Hardware stack levels required when called:    2
  1776 ;; This function calls:
  1777 ;;		Nothing
  1778 ;; This function is called by:
  1779 ;;		_main
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782                           
  1783                           
  1784                           ;psect for function _setupADC
  1785  0DD0                     _setupADC:	
  1786                           
  1787                           ;ADC.c: 9: PORTA = 0;
  1788                           
  1789                           ;incstack = 0
  1790                           ; Regs used in _setupADC: [wreg+status,2]
  1791  0DD0  1283               	bcf	3,5	;RP0=0, select bank0
  1792  0DD1  1303               	bcf	3,6	;RP1=0, select bank0
  1793  0DD2  0185               	clrf	5	;volatile
  1794                           
  1795                           ;ADC.c: 10: TRISA = 0b11111111;
  1796  0DD3  30FF               	movlw	255
  1797  0DD4  1683               	bsf	3,5	;RP0=1, select bank1
  1798  0DD5  1303               	bcf	3,6	;RP1=0, select bank1
  1799  0DD6  0085               	movwf	5	;volatile
  1800                           
  1801                           ;ADC.c: 13: ADCON0 = 0b10001001;
  1802  0DD7  3089               	movlw	137
  1803  0DD8  1283               	bcf	3,5	;RP0=0, select bank0
  1804  0DD9  1303               	bcf	3,6	;RP1=0, select bank0
  1805  0DDA  009F               	movwf	31	;volatile
  1806                           
  1807                           ;ADC.c: 14: ADCON1 = 0b00000010;
  1808  0DDB  3002               	movlw	2
  1809  0DDC  1683               	bsf	3,5	;RP0=1, select bank1
  1810  0DDD  1303               	bcf	3,6	;RP1=0, select bank1
  1811  0DDE  009F               	movwf	31	;volatile
  1812                           
  1813                           ;ADC.c: 16: _delay((unsigned long)((50)*(20000000/4000000.0)));
  1814  0DDF  3053               	movlw	83
  1815  0DE0  1283               	bcf	3,5	;RP0=0, select bank0
  1816  0DE1  1303               	bcf	3,6	;RP1=0, select bank0
  1817  0DE2  00A0               	movwf	??_setupADC
  1818  0DE3                     u2477:	
  1819  0DE3  0BA0               	decfsz	??_setupADC,f
  1820  0DE4  2DE3               	goto	u2477
  1821  0DE5  0008               	return
  1822  0DE6                     __end_of_setupADC:	
  1823                           
  1824                           	psect	text5
  1825  0D8B                     __ptext5:	
  1826 ;; *************** function _ser_init *****************
  1827 ;; Defined at:
  1828 ;;		line 5 in file "ser.c"
  1829 ;; Parameters:    Size  Location     Type
  1830 ;;		None
  1831 ;; Auto vars:     Size  Location     Type
  1832 ;;		None
  1833 ;; Return value:  Size  Location     Type
  1834 ;;                  1    wreg      void 
  1835 ;; Registers used:
  1836 ;;		wreg
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1842 ;;      Params:         0       0       0       0       0
  1843 ;;      Locals:         0       0       0       0       0
  1844 ;;      Temps:          0       0       0       0       0
  1845 ;;      Totals:         0       0       0       0       0
  1846 ;;Total ram usage:        0 bytes
  1847 ;; Hardware stack levels used:    1
  1848 ;; Hardware stack levels required when called:    2
  1849 ;; This function calls:
  1850 ;;		Nothing
  1851 ;; This function is called by:
  1852 ;;		_main
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           
  1857                           ;psect for function _ser_init
  1858  0D8B                     _ser_init:	
  1859                           
  1860                           ;ser.c: 7: TXSTA = 0b00100100;
  1861                           
  1862                           ;incstack = 0
  1863                           ; Regs used in _ser_init: [wreg]
  1864  0D8B  3024               	movlw	36
  1865  0D8C  1683               	bsf	3,5	;RP0=1, select bank1
  1866  0D8D  1303               	bcf	3,6	;RP1=0, select bank1
  1867  0D8E  0098               	movwf	24	;volatile
  1868                           
  1869                           ;ser.c: 8: RCSTA = 0b10011000;
  1870  0D8F  3098               	movlw	152
  1871  0D90  1283               	bcf	3,5	;RP0=0, select bank0
  1872  0D91  1303               	bcf	3,6	;RP1=0, select bank0
  1873  0D92  0098               	movwf	24	;volatile
  1874                           
  1875                           ;ser.c: 24: SPBRG = 20;
  1876  0D93  3014               	movlw	20
  1877  0D94  1683               	bsf	3,5	;RP0=1, select bank1
  1878  0D95  1303               	bcf	3,6	;RP1=0, select bank1
  1879  0D96  0099               	movwf	25	;volatile
  1880                           
  1881                           ;ser.c: 26: PEIE = 1;
  1882  0D97  170B               	bsf	11,6	;volatile
  1883                           
  1884                           ;ser.c: 27: (GIE = 1);
  1885  0D98  178B               	bsf	11,7	;volatile
  1886  0D99  0008               	return
  1887  0D9A                     __end_of_ser_init:	
  1888                           
  1889                           	psect	text6
  1890  0622                     __ptext6:	
  1891 ;; *************** function _initWallFollow *****************
  1892 ;; Defined at:
  1893 ;;		line 67 in file "main.c"
  1894 ;; Parameters:    Size  Location     Type
  1895 ;;		None
  1896 ;; Auto vars:     Size  Location     Type
  1897 ;;		None
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  1    wreg      void 
  1900 ;; Registers used:
  1901 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1907 ;;      Params:         0       0       0       0       0
  1908 ;;      Locals:         0       0       0       0       0
  1909 ;;      Temps:          0       2       0       0       0
  1910 ;;      Totals:         0       2       0       0       0
  1911 ;;Total ram usage:        2 bytes
  1912 ;; Hardware stack levels used:    1
  1913 ;; Hardware stack levels required when called:    5
  1914 ;; This function calls:
  1915 ;;		_ADCMain
  1916 ;;		_DriveDirect
  1917 ;;		_lcdWriteString
  1918 ;;		_moveCCW
  1919 ;; This function is called by:
  1920 ;;		_main
  1921 ;; This function uses a non-reentrant model
  1922 ;;
  1923                           
  1924                           
  1925                           ;psect for function _initWallFollow
  1926  0622                     _initWallFollow:	
  1927                           
  1928                           ;main.c: 69: adcClosest = 0;
  1929                           
  1930                           ;incstack = 0
  1931                           ; Regs used in _initWallFollow: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1932  0622  1283               	bcf	3,5	;RP0=0, select bank0
  1933  0623  1303               	bcf	3,6	;RP1=0, select bank0
  1934  0624  01ED               	clrf	_adcClosest
  1935  0625  01EE               	clrf	_adcClosest+1
  1936                           
  1937                           ;main.c: 71: for (loop = 0; loop < 400; loop++){
  1938  0626  1683               	bsf	3,5	;RP0=1, select bank1
  1939  0627  1303               	bcf	3,6	;RP1=0, select bank1
  1940  0628  01AC               	clrf	_loop^(0+128)
  1941  0629  01AD               	clrf	(_loop+1)^(0+128)
  1942  062A  082D               	movf	(_loop+1)^(0+128),w
  1943  062B  3A80               	xorlw	128
  1944  062C  00FF               	movwf	127
  1945  062D  3081               	movlw	129
  1946  062E  027F               	subwf	127,w
  1947  062F  1D03               	skipz
  1948  0630  2E33               	goto	u1965
  1949  0631  3090               	movlw	144
  1950  0632  022C               	subwf	_loop^(0+128),w
  1951  0633                     u1965:	
  1952  0633  1803               	btfsc	3,0
  1953  0634  2E66               	goto	l2032
  1954  0635                     l2022:	
  1955                           
  1956                           ;main.c: 72: moveCCW(1);
  1957  0635  3001               	movlw	1
  1958  0636  1283               	bcf	3,5	;RP0=0, select bank0
  1959  0637  1303               	bcf	3,6	;RP1=0, select bank0
  1960  0638  00A0               	movwf	moveCCW@numberOfSteps
  1961  0639  3000               	movlw	0
  1962  063A  00A1               	movwf	moveCCW@numberOfSteps+1
  1963  063B  120A  158A  2799  120A  118A  	fcall	_moveCCW
  1964                           
  1965                           ;main.c: 73: ADCMain();
  1966  0640  120A  158A  25FE  120A  118A  	fcall	_ADCMain
  1967                           
  1968                           ;main.c: 75: if (adcRAW > adcClosest){
  1969  0645  1283               	bcf	3,5	;RP0=0, select bank0
  1970  0646  1303               	bcf	3,6	;RP1=0, select bank0
  1971  0647  0858               	movf	_adcRAW+1,w	;volatile
  1972  0648  026E               	subwf	_adcClosest+1,w
  1973  0649  1D03               	skipz
  1974  064A  2E4D               	goto	u1975
  1975  064B  0857               	movf	_adcRAW,w	;volatile
  1976  064C  026D               	subwf	_adcClosest,w
  1977  064D                     u1975:	
  1978  064D  1803               	skipnc
  1979  064E  2E53               	goto	l120
  1980                           
  1981                           ;main.c: 76: adcClosest = adcRAW;
  1982  064F  0858               	movf	_adcRAW+1,w	;volatile
  1983  0650  00EE               	movwf	_adcClosest+1
  1984  0651  0857               	movf	_adcRAW,w	;volatile
  1985  0652  00ED               	movwf	_adcClosest
  1986  0653                     l120:	
  1987  0653  3001               	movlw	1
  1988  0654  1683               	bsf	3,5	;RP0=1, select bank1
  1989  0655  1303               	bcf	3,6	;RP1=0, select bank1
  1990  0656  07AC               	addwf	_loop^(0+128),f
  1991  0657  1803               	skipnc
  1992  0658  0AAD               	incf	(_loop+1)^(0+128),f
  1993  0659  3000               	movlw	0
  1994  065A  07AD               	addwf	(_loop+1)^(0+128),f
  1995  065B  082D               	movf	(_loop+1)^(0+128),w
  1996  065C  3A80               	xorlw	128
  1997  065D  00FF               	movwf	127
  1998  065E  3081               	movlw	129
  1999  065F  027F               	subwf	127,w
  2000  0660  1D03               	skipz
  2001  0661  2E64               	goto	u1985
  2002  0662  3090               	movlw	144
  2003  0663  022C               	subwf	_loop^(0+128),w
  2004  0664                     u1985:	
  2005  0664  1C03               	skipc
  2006  0665  2E35               	goto	l2022
  2007  0666                     l2032:	
  2008                           
  2009                           ;main.c: 77: }
  2010                           ;main.c: 78: }
  2011                           ;main.c: 80: if(adcRAW != adcClosest){
  2012  0666  1283               	bcf	3,5	;RP0=0, select bank0
  2013  0667  1303               	bcf	3,6	;RP1=0, select bank0
  2014  0668  0858               	movf	_adcRAW+1,w	;volatile
  2015  0669  066E               	xorwf	_adcClosest+1,w
  2016  066A  1D03               	skipz
  2017  066B  2E6E               	goto	u1995
  2018  066C  0857               	movf	_adcRAW,w	;volatile
  2019  066D  066D               	xorwf	_adcClosest,w
  2020  066E                     u1995:	
  2021  066E  1903               	skipnz
  2022  066F  2E80               	goto	l2038
  2023                           
  2024                           ;main.c: 81: DriveDirect(20,0);
  2025  0670  3014               	movlw	20
  2026  0671  00A1               	movwf	DriveDirect@VelocityRight
  2027  0672  3000               	movlw	0
  2028  0673  00A2               	movwf	DriveDirect@VelocityRight+1
  2029  0674  3000               	movlw	0
  2030  0675  00A3               	movwf	DriveDirect@VelocityLeft
  2031  0676  00A4               	movwf	DriveDirect@VelocityLeft+1
  2032  0677  120A  118A  2742  120A  118A  	fcall	_DriveDirect
  2033                           
  2034                           ;main.c: 82: ADCMain();
  2035  067C  120A  158A  25FE   	fcall	_ADCMain
  2036                           
  2037                           ;main.c: 84: } else if((adcRAW-20) < adcClosest && (adcRAW+20) > adcClosest){
  2038  067F  0008               	return
  2039  0680                     l2038:	
  2040  0680  1283               	bcf	3,5	;RP0=0, select bank0
  2041  0681  1303               	bcf	3,6	;RP1=0, select bank0
  2042  0682  0857               	movf	_adcRAW,w	;volatile
  2043  0683  3EEC               	addlw	236
  2044  0684  00BF               	movwf	??_initWallFollow
  2045  0685  0858               	movf	_adcRAW+1,w	;volatile
  2046  0686  1803               	skipnc
  2047  0687  3E01               	addlw	1
  2048  0688  3EFF               	addlw	255
  2049  0689  00C0               	movwf	??_initWallFollow+1
  2050  068A  086E               	movf	_adcClosest+1,w
  2051  068B  0240               	subwf	??_initWallFollow+1,w
  2052  068C  1D03               	skipz
  2053  068D  2E90               	goto	u2005
  2054  068E  086D               	movf	_adcClosest,w
  2055  068F  023F               	subwf	??_initWallFollow,w
  2056  0690                     u2005:	
  2057  0690  1803               	skipnc
  2058  0691  0008               	return
  2059  0692  0857               	movf	_adcRAW,w	;volatile
  2060  0693  3E14               	addlw	20
  2061  0694  00BF               	movwf	??_initWallFollow
  2062  0695  0858               	movf	_adcRAW+1,w	;volatile
  2063  0696  1803               	skipnc
  2064  0697  3E01               	addlw	1
  2065  0698  3E00               	addlw	0
  2066  0699  00C0               	movwf	??_initWallFollow+1
  2067  069A  0840               	movf	??_initWallFollow+1,w
  2068  069B  026E               	subwf	_adcClosest+1,w
  2069  069C  1D03               	skipz
  2070  069D  2EA0               	goto	u2015
  2071  069E  083F               	movf	??_initWallFollow,w
  2072  069F  026D               	subwf	_adcClosest,w
  2073  06A0                     u2015:	
  2074  06A0  1803               	skipnc
  2075  06A1  0008               	return
  2076                           
  2077                           ;main.c: 85: DriveDirect(20,0);
  2078  06A2  3014               	movlw	20
  2079  06A3  00A1               	movwf	DriveDirect@VelocityRight
  2080  06A4  3000               	movlw	0
  2081  06A5  00A2               	movwf	DriveDirect@VelocityRight+1
  2082  06A6  3000               	movlw	0
  2083  06A7  00A3               	movwf	DriveDirect@VelocityLeft
  2084  06A8  00A4               	movwf	DriveDirect@VelocityLeft+1
  2085  06A9  120A  118A  2742  120A  118A  	fcall	_DriveDirect
  2086                           
  2087                           ;main.c: 86: lcdWriteString("arrived at closest point");
  2088  06AE  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2089  06AF  120A  158A  261E   	fcall	_lcdWriteString
  2090  06B2  0008               	return
  2091  06B3                     __end_of_initWallFollow:	
  2092                           
  2093                           	psect	text7
  2094  0F99                     __ptext7:	
  2095 ;; *************** function _moveCCW *****************
  2096 ;; Defined at:
  2097 ;;		line 45 in file "motor.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;  numberOfStep    2    0[BANK0 ] unsigned int 
  2100 ;; Auto vars:     Size  Location     Type
  2101 ;;  i               2    6[BANK0 ] volatile unsigned int 
  2102 ;;  stepsRemaini    2    4[BANK0 ] volatile unsigned int 
  2103 ;; Return value:  Size  Location     Type
  2104 ;;                  1    wreg      void 
  2105 ;; Registers used:
  2106 ;;		wreg, status,2, status,0
  2107 ;; Tracked objects:
  2108 ;;		On entry : 0/0
  2109 ;;		On exit  : 0/0
  2110 ;;		Unchanged: 0/0
  2111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2112 ;;      Params:         0       2       0       0       0
  2113 ;;      Locals:         0       4       0       0       0
  2114 ;;      Temps:          0       2       0       0       0
  2115 ;;      Totals:         0       8       0       0       0
  2116 ;;Total ram usage:        8 bytes
  2117 ;; Hardware stack levels used:    1
  2118 ;; Hardware stack levels required when called:    2
  2119 ;; This function calls:
  2120 ;;		Nothing
  2121 ;; This function is called by:
  2122 ;;		_initWallFollow
  2123 ;; This function uses a non-reentrant model
  2124 ;;
  2125                           
  2126                           
  2127                           ;psect for function _moveCCW
  2128  0F99                     _moveCCW:	
  2129                           
  2130                           ;motor.c: 47: volatile unsigned int i = 0;
  2131                           
  2132                           ;incstack = 0
  2133                           ; Regs used in _moveCCW: [wreg+status,2+status,0]
  2134  0F99  1283               	bcf	3,5	;RP0=0, select bank0
  2135  0F9A  1303               	bcf	3,6	;RP1=0, select bank0
  2136  0F9B  01A6               	clrf	moveCCW@i	;volatile
  2137  0F9C  01A7               	clrf	moveCCW@i+1	;volatile
  2138                           
  2139                           ;motor.c: 48: volatile unsigned int stepsRemaining = numberOfSteps;
  2140  0F9D  0821               	movf	moveCCW@numberOfSteps+1,w
  2141  0F9E  00A5               	movwf	moveCCW@stepsRemaining+1	;volatile
  2142  0F9F  0820               	movf	moveCCW@numberOfSteps,w
  2143  0FA0  00A4               	movwf	moveCCW@stepsRemaining	;volatile
  2144  0FA1                     l414:	
  2145                           ;motor.c: 49: while (i < numberOfSteps) {
  2146                           
  2147  0FA1  0821               	movf	moveCCW@numberOfSteps+1,w
  2148  0FA2  0227               	subwf	moveCCW@i+1,w	;volatile
  2149  0FA3  1D03               	skipz
  2150  0FA4  2FA7               	goto	u1875
  2151  0FA5  0820               	movf	moveCCW@numberOfSteps,w
  2152  0FA6  0226               	subwf	moveCCW@i,w	;volatile
  2153  0FA7                     u1875:	
  2154  0FA7  1803               	btfsc	3,0
  2155  0FA8  0008               	return
  2156                           
  2157                           ;motor.c: 51: if (stepState == 0) {
  2158  0FA9  0859               	movf	_stepState,w	;volatile
  2159  0FAA  045A               	iorwf	_stepState+1,w	;volatile
  2160  0FAB  1D03               	btfss	3,2
  2161  0FAC  2FAF               	goto	l1916
  2162                           
  2163                           ;motor.c: 52: PORTC = 0b00111100;
  2164  0FAD  303C               	movlw	60
  2165  0FAE  2FDE               	goto	L8
  2166  0FAF                     l1916:	
  2167                           ;motor.c: 53: }
  2168                           
  2169                           
  2170                           ;motor.c: 54: else if (stepState == 1) {
  2171  0FAF  0359               	decf	_stepState,w	;volatile
  2172  0FB0  045A               	iorwf	_stepState+1,w	;volatile
  2173  0FB1  1D03               	btfss	3,2
  2174  0FB2  2FB5               	goto	l1920
  2175                           
  2176                           ;motor.c: 55: PORTC = 0b00101110;
  2177  0FB3  302E               	movlw	46
  2178  0FB4  2FDE               	goto	L8
  2179  0FB5                     l1920:	
  2180                           ;motor.c: 56: }
  2181                           
  2182                           
  2183                           ;motor.c: 57: else if (stepState == 2) {
  2184  0FB5  3002               	movlw	2
  2185  0FB6  0659               	xorwf	_stepState,w	;volatile
  2186  0FB7  045A               	iorwf	_stepState+1,w	;volatile
  2187  0FB8  1D03               	btfss	3,2
  2188  0FB9  2FBC               	goto	l1924
  2189                           
  2190                           ;motor.c: 58: PORTC = 0b00101011;
  2191  0FBA  302B               	movlw	43
  2192  0FBB  2FDE               	goto	L8
  2193  0FBC                     l1924:	
  2194                           ;motor.c: 59: }
  2195                           
  2196                           
  2197                           ;motor.c: 60: else if (stepState == 3) {
  2198  0FBC  3003               	movlw	3
  2199  0FBD  0659               	xorwf	_stepState,w	;volatile
  2200  0FBE  045A               	iorwf	_stepState+1,w	;volatile
  2201  0FBF  1D03               	btfss	3,2
  2202  0FC0  2FC3               	goto	l1928
  2203                           
  2204                           ;motor.c: 61: PORTC = 0b00100111;
  2205  0FC1  3027               	movlw	39
  2206  0FC2  2FDE               	goto	L8
  2207  0FC3                     l1928:	
  2208                           ;motor.c: 62: }
  2209                           
  2210                           
  2211                           ;motor.c: 63: else if (stepState == 4) {
  2212  0FC3  3004               	movlw	4
  2213  0FC4  0659               	xorwf	_stepState,w	;volatile
  2214  0FC5  045A               	iorwf	_stepState+1,w	;volatile
  2215  0FC6  1D03               	btfss	3,2
  2216  0FC7  2FCA               	goto	l1932
  2217                           
  2218                           ;motor.c: 64: PORTC = 0b00110101;
  2219  0FC8  3035               	movlw	53
  2220  0FC9  2FDE               	goto	L8
  2221  0FCA                     l1932:	
  2222                           ;motor.c: 65: }
  2223                           
  2224                           
  2225                           ;motor.c: 66: else if (stepState == 5) {
  2226  0FCA  3005               	movlw	5
  2227  0FCB  0659               	xorwf	_stepState,w	;volatile
  2228  0FCC  045A               	iorwf	_stepState+1,w	;volatile
  2229  0FCD  1D03               	btfss	3,2
  2230  0FCE  2FD1               	goto	l1936
  2231                           
  2232                           ;motor.c: 67: PORTC = 0b00010111;
  2233  0FCF  3017               	movlw	23
  2234  0FD0  2FDE               	goto	L8
  2235  0FD1                     l1936:	
  2236                           ;motor.c: 68: }
  2237                           
  2238                           
  2239                           ;motor.c: 69: else if (stepState == 6) {
  2240  0FD1  3006               	movlw	6
  2241  0FD2  0659               	xorwf	_stepState,w	;volatile
  2242  0FD3  045A               	iorwf	_stepState+1,w	;volatile
  2243  0FD4  1D03               	btfss	3,2
  2244  0FD5  2FD8               	goto	l1940
  2245                           
  2246                           ;motor.c: 70: PORTC = 0b00011011;
  2247  0FD6  301B               	movlw	27
  2248  0FD7  2FDE               	goto	L8
  2249  0FD8                     l1940:	
  2250                           ;motor.c: 71: }
  2251                           
  2252                           
  2253                           ;motor.c: 72: else if (stepState == 7) {
  2254  0FD8  3007               	movlw	7
  2255  0FD9  0659               	xorwf	_stepState,w	;volatile
  2256  0FDA  045A               	iorwf	_stepState+1,w	;volatile
  2257  0FDB  1D03               	btfss	3,2
  2258  0FDC  2FDF               	goto	l417
  2259                           
  2260                           ;motor.c: 73: PORTC = 0b00011110;
  2261  0FDD  301E               	movlw	30
  2262  0FDE                     L8:	
  2263  0FDE  0087               	movwf	7	;volatile
  2264  0FDF                     l417:	
  2265                           
  2266                           ;motor.c: 74: }
  2267                           ;motor.c: 75: _delay((unsigned long)((5)*(20000000/4000.0)));
  2268  0FDF  3021               	movlw	33
  2269  0FE0  00A3               	movwf	??_moveCCW+1
  2270  0FE1  3076               	movlw	118
  2271  0FE2  00A2               	movwf	??_moveCCW
  2272  0FE3                     u2487:	
  2273  0FE3  0BA2               	decfsz	??_moveCCW,f
  2274  0FE4  2FE3               	goto	u2487
  2275  0FE5  0BA3               	decfsz	??_moveCCW+1,f
  2276  0FE6  2FE3               	goto	u2487
  2277  0FE7  0000               	nop
  2278                           
  2279                           ;motor.c: 77: i++;
  2280  0FE8  3001               	movlw	1
  2281  0FE9  1283               	bcf	3,5	;RP0=0, select bank0
  2282  0FEA  1303               	bcf	3,6	;RP1=0, select bank0
  2283  0FEB  07A6               	addwf	moveCCW@i,f	;volatile
  2284  0FEC  1803               	skipnc
  2285  0FED  0AA7               	incf	moveCCW@i+1,f	;volatile
  2286  0FEE  3000               	movlw	0
  2287  0FEF  07A7               	addwf	moveCCW@i+1,f	;volatile
  2288                           
  2289                           ;motor.c: 78: if (stepState != 0){
  2290  0FF0  0859               	movf	_stepState,w	;volatile
  2291  0FF1  045A               	iorwf	_stepState+1,w	;volatile
  2292  0FF2  1903               	btfsc	3,2
  2293  0FF3  2FFB               	goto	l1948
  2294                           
  2295                           ;motor.c: 79: stepState--;
  2296  0FF4  3001               	movlw	1
  2297  0FF5  02D9               	subwf	_stepState,f	;volatile
  2298  0FF6  3000               	movlw	0
  2299  0FF7  1C03               	skipc
  2300  0FF8  03DA               	decf	_stepState+1,f	;volatile
  2301  0FF9  02DA               	subwf	_stepState+1,f	;volatile
  2302                           
  2303                           ;motor.c: 80: } else {
  2304  0FFA  2FA1               	goto	l414
  2305  0FFB                     l1948:	
  2306                           
  2307                           ;motor.c: 81: stepState = 7;
  2308  0FFB  3007               	movlw	7
  2309  0FFC  00D9               	movwf	_stepState	;volatile
  2310  0FFD  3000               	movlw	0
  2311  0FFE  00DA               	movwf	_stepState+1	;volatile
  2312  0FFF  2FA1               	goto	l414
  2313  1000                     __end_of_moveCCW:	
  2314                           
  2315                           	psect	text8
  2316  0E1E                     __ptext8:	
  2317 ;; *************** function _lcdWriteString *****************
  2318 ;; Defined at:
  2319 ;;		line 36 in file "LCD.c"
  2320 ;; Parameters:    Size  Location     Type
  2321 ;;  s               1    wreg     PTR unsigned char 
  2322 ;;		 -> STR_1(25), 
  2323 ;; Auto vars:     Size  Location     Type
  2324 ;;  s               1    4[BANK0 ] PTR unsigned char 
  2325 ;;		 -> STR_1(25), 
  2326 ;; Return value:  Size  Location     Type
  2327 ;;                  1    wreg      void 
  2328 ;; Registers used:
  2329 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2330 ;; Tracked objects:
  2331 ;;		On entry : 0/0
  2332 ;;		On exit  : 0/0
  2333 ;;		Unchanged: 0/0
  2334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2335 ;;      Params:         0       0       0       0       0
  2336 ;;      Locals:         0       1       0       0       0
  2337 ;;      Temps:          0       1       0       0       0
  2338 ;;      Totals:         0       2       0       0       0
  2339 ;;Total ram usage:        2 bytes
  2340 ;; Hardware stack levels used:    1
  2341 ;; Hardware stack levels required when called:    3
  2342 ;; This function calls:
  2343 ;;		_lcdWriteData
  2344 ;; This function is called by:
  2345 ;;		_initWallFollow
  2346 ;; This function uses a non-reentrant model
  2347 ;;
  2348                           
  2349                           
  2350                           ;psect for function _lcdWriteString
  2351  0E1E                     _lcdWriteString:	
  2352                           
  2353                           ;incstack = 0
  2354                           ; Regs used in _lcdWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2355                           ;lcdWriteString@s stored from wreg
  2356  0E1E  1283               	bcf	3,5	;RP0=0, select bank0
  2357  0E1F  1303               	bcf	3,6	;RP1=0, select bank0
  2358  0E20  00A4               	movwf	lcdWriteString@s
  2359  0E21                     l2008:	
  2360                           ;LCD.c: 38: while(*s) lcdWriteData(*s++);
  2361                           
  2362  0E21  0824               	movf	lcdWriteString@s,w
  2363  0E22  0084               	movwf	4
  2364  0E23  120A  158A  2000  120A  158A  	fcall	stringdir
  2365  0E28  3A00               	xorlw	0
  2366  0E29  1903               	btfsc	3,2
  2367  0E2A  0008               	return
  2368  0E2B  0824               	movf	lcdWriteString@s,w
  2369  0E2C  0084               	movwf	4
  2370  0E2D  120A  158A  2000  120A  158A  	fcall	stringdir
  2371  0E32  120A  158A  25A9  120A  158A  	fcall	_lcdWriteData
  2372  0E37  3001               	movlw	1
  2373  0E38  1283               	bcf	3,5	;RP0=0, select bank0
  2374  0E39  1303               	bcf	3,6	;RP1=0, select bank0
  2375  0E3A  00A3               	movwf	??_lcdWriteString
  2376  0E3B  0823               	movf	??_lcdWriteString,w
  2377  0E3C  07A4               	addwf	lcdWriteString@s,f
  2378  0E3D  2E21               	goto	l2008
  2379  0E3E                     __end_of_lcdWriteString:	
  2380                           
  2381                           	psect	text9
  2382  0742                     __ptext9:	
  2383 ;; *************** function _DriveDirect *****************
  2384 ;; Defined at:
  2385 ;;		line 54 in file "ser.c"
  2386 ;; Parameters:    Size  Location     Type
  2387 ;;  VelocityRigh    2    1[BANK0 ] int 
  2388 ;;  VelocityLeft    2    3[BANK0 ] int 
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;  data            2    8[BANK0 ] unsigned int 
  2391 ;;  data            2    6[BANK0 ] unsigned int 
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  1    wreg      void 
  2394 ;; Registers used:
  2395 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2401 ;;      Params:         0       4       0       0       0
  2402 ;;      Locals:         0       4       0       0       0
  2403 ;;      Temps:          0       1       0       0       0
  2404 ;;      Totals:         0       9       0       0       0
  2405 ;;Total ram usage:        9 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:    3
  2408 ;; This function calls:
  2409 ;;		_ser_putch
  2410 ;; This function is called by:
  2411 ;;		_initWallFollow
  2412 ;;		_main
  2413 ;; This function uses a non-reentrant model
  2414 ;;
  2415                           
  2416                           
  2417                           ;psect for function _DriveDirect
  2418  0742                     _DriveDirect:	
  2419                           
  2420                           ;ser.c: 55: RightSpeedH = 0;
  2421                           
  2422                           ;incstack = 0
  2423                           ; Regs used in _DriveDirect: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2424  0742  1283               	bcf	3,5	;RP0=0, select bank0
  2425  0743  1303               	bcf	3,6	;RP1=0, select bank0
  2426  0744  01E2               	clrf	_RightSpeedH
  2427                           
  2428                           ;ser.c: 56: LeftSpeedH = 0;
  2429  0745  01DD               	clrf	_LeftSpeedH
  2430                           
  2431                           ;ser.c: 58: if(VelocityRight > 255){
  2432  0746  0822               	movf	DriveDirect@VelocityRight+1,w
  2433  0747  3A80               	xorlw	128
  2434  0748  00FF               	movwf	127
  2435  0749  3081               	movlw	129
  2436  074A  027F               	subwf	127,w
  2437  074B  1D03               	skipz
  2438  074C  2F4F               	goto	u1885
  2439  074D  3000               	movlw	0
  2440  074E  0221               	subwf	DriveDirect@VelocityRight,w
  2441  074F                     u1885:	
  2442  074F  1C03               	skipc
  2443  0750  2F72               	goto	l1974
  2444                           
  2445                           ;ser.c: 59: unsigned int data = VelocityRight;
  2446  0751  1283               	bcf	3,5	;RP0=0, select bank0
  2447  0752  1303               	bcf	3,6	;RP1=0, select bank0
  2448  0753  0822               	movf	DriveDirect@VelocityRight+1,w
  2449  0754  00A7               	movwf	DriveDirect@data+1
  2450  0755  0821               	movf	DriveDirect@VelocityRight,w
  2451  0756  00A6               	movwf	DriveDirect@data
  2452                           
  2453                           ;ser.c: 60: for (RightSpeedH = 0; data > 255; RightSpeedH++){
  2454  0757  01E2               	clrf	_RightSpeedH
  2455  0758  3001               	movlw	1
  2456  0759  0227               	subwf	DriveDirect@data+1,w
  2457  075A  3000               	movlw	0
  2458  075B  1903               	skipnz
  2459  075C  0226               	subwf	DriveDirect@data,w
  2460  075D  1C03               	btfss	3,0
  2461  075E  2F72               	goto	l1974
  2462  075F                     l1970:	
  2463                           
  2464                           ;ser.c: 61: data = data - 256;
  2465  075F  0826               	movf	DriveDirect@data,w
  2466  0760  3E00               	addlw	0
  2467  0761  00A6               	movwf	DriveDirect@data
  2468  0762  0827               	movf	DriveDirect@data+1,w
  2469  0763  1803               	skipnc
  2470  0764  3E01               	addlw	1
  2471  0765  3EFF               	addlw	255
  2472  0766  00A7               	movwf	DriveDirect@data+1
  2473  0767  3001               	movlw	1
  2474  0768  00A5               	movwf	??_DriveDirect
  2475  0769  0825               	movf	??_DriveDirect,w
  2476  076A  07E2               	addwf	_RightSpeedH,f
  2477  076B  3001               	movlw	1
  2478  076C  0227               	subwf	DriveDirect@data+1,w
  2479  076D  3000               	movlw	0
  2480  076E  1903               	skipnz
  2481  076F  0226               	subwf	DriveDirect@data,w
  2482  0770  1803               	skipnc
  2483  0771  2F5F               	goto	l1970
  2484  0772                     l1974:	
  2485                           
  2486                           ;ser.c: 62: }
  2487                           ;ser.c: 63: }
  2488                           ;ser.c: 64: RightSpeedL = VelocityRight;
  2489  0772  1283               	bcf	3,5	;RP0=0, select bank0
  2490  0773  1303               	bcf	3,6	;RP1=0, select bank0
  2491  0774  0821               	movf	DriveDirect@VelocityRight,w
  2492  0775  00A5               	movwf	??_DriveDirect
  2493  0776  0825               	movf	??_DriveDirect,w
  2494  0777  00E3               	movwf	_RightSpeedL
  2495                           
  2496                           ;ser.c: 67: if(VelocityLeft > 255){
  2497  0778  0824               	movf	DriveDirect@VelocityLeft+1,w
  2498  0779  3A80               	xorlw	128
  2499  077A  00FF               	movwf	127
  2500  077B  3081               	movlw	129
  2501  077C  027F               	subwf	127,w
  2502  077D  1D03               	skipz
  2503  077E  2F81               	goto	u1915
  2504  077F  3000               	movlw	0
  2505  0780  0223               	subwf	DriveDirect@VelocityLeft,w
  2506  0781                     u1915:	
  2507  0781  1C03               	skipc
  2508  0782  2FA4               	goto	l1990
  2509                           
  2510                           ;ser.c: 68: unsigned int data = VelocityLeft;
  2511  0783  1283               	bcf	3,5	;RP0=0, select bank0
  2512  0784  1303               	bcf	3,6	;RP1=0, select bank0
  2513  0785  0824               	movf	DriveDirect@VelocityLeft+1,w
  2514  0786  00A9               	movwf	DriveDirect@data_248+1
  2515  0787  0823               	movf	DriveDirect@VelocityLeft,w
  2516  0788  00A8               	movwf	DriveDirect@data_248
  2517                           
  2518                           ;ser.c: 69: for (LeftSpeedH = 0; data > 255; LeftSpeedH++){
  2519  0789  01DD               	clrf	_LeftSpeedH
  2520  078A  3001               	movlw	1
  2521  078B  0229               	subwf	DriveDirect@data_248+1,w
  2522  078C  3000               	movlw	0
  2523  078D  1903               	skipnz
  2524  078E  0228               	subwf	DriveDirect@data_248,w
  2525  078F  1C03               	btfss	3,0
  2526  0790  2FA4               	goto	l1990
  2527  0791                     l1986:	
  2528                           
  2529                           ;ser.c: 70: data = data - 256;
  2530  0791  0828               	movf	DriveDirect@data_248,w
  2531  0792  3E00               	addlw	0
  2532  0793  00A8               	movwf	DriveDirect@data_248
  2533  0794  0829               	movf	DriveDirect@data_248+1,w
  2534  0795  1803               	skipnc
  2535  0796  3E01               	addlw	1
  2536  0797  3EFF               	addlw	255
  2537  0798  00A9               	movwf	DriveDirect@data_248+1
  2538  0799  3001               	movlw	1
  2539  079A  00A5               	movwf	??_DriveDirect
  2540  079B  0825               	movf	??_DriveDirect,w
  2541  079C  07DD               	addwf	_LeftSpeedH,f
  2542  079D  3001               	movlw	1
  2543  079E  0229               	subwf	DriveDirect@data_248+1,w
  2544  079F  3000               	movlw	0
  2545  07A0  1903               	skipnz
  2546  07A1  0228               	subwf	DriveDirect@data_248,w
  2547  07A2  1803               	skipnc
  2548  07A3  2F91               	goto	l1986
  2549  07A4                     l1990:	
  2550                           
  2551                           ;ser.c: 71: }
  2552                           ;ser.c: 72: }
  2553                           ;ser.c: 73: LeftSpeedL = VelocityLeft;
  2554  07A4  1283               	bcf	3,5	;RP0=0, select bank0
  2555  07A5  1303               	bcf	3,6	;RP1=0, select bank0
  2556  07A6  0823               	movf	DriveDirect@VelocityLeft,w
  2557  07A7  00A5               	movwf	??_DriveDirect
  2558  07A8  0825               	movf	??_DriveDirect,w
  2559  07A9  00DE               	movwf	_LeftSpeedL
  2560                           
  2561                           ;ser.c: 76: ser_putch(145);
  2562  07AA  3091               	movlw	145
  2563  07AB  120A  158A  257F  120A  118A  	fcall	_ser_putch
  2564                           
  2565                           ;ser.c: 77: ser_putch(RightSpeedH);
  2566  07B0  1283               	bcf	3,5	;RP0=0, select bank0
  2567  07B1  1303               	bcf	3,6	;RP1=0, select bank0
  2568  07B2  0862               	movf	_RightSpeedH,w
  2569  07B3  120A  158A  257F  120A  118A  	fcall	_ser_putch
  2570                           
  2571                           ;ser.c: 78: ser_putch(RightSpeedL);
  2572  07B8  1283               	bcf	3,5	;RP0=0, select bank0
  2573  07B9  1303               	bcf	3,6	;RP1=0, select bank0
  2574  07BA  0863               	movf	_RightSpeedL,w
  2575  07BB  120A  158A  257F  120A  118A  	fcall	_ser_putch
  2576                           
  2577                           ;ser.c: 79: ser_putch(LeftSpeedH);
  2578  07C0  1283               	bcf	3,5	;RP0=0, select bank0
  2579  07C1  1303               	bcf	3,6	;RP1=0, select bank0
  2580  07C2  085D               	movf	_LeftSpeedH,w
  2581  07C3  120A  158A  257F  120A  118A  	fcall	_ser_putch
  2582                           
  2583                           ;ser.c: 80: ser_putch(LeftSpeedL);
  2584  07C8  1283               	bcf	3,5	;RP0=0, select bank0
  2585  07C9  1303               	bcf	3,6	;RP1=0, select bank0
  2586  07CA  085E               	movf	_LeftSpeedL,w
  2587  07CB  120A  158A  257F   	fcall	_ser_putch
  2588  07CE  0008               	return
  2589  07CF                     __end_of_DriveDirect:	
  2590                           
  2591                           	psect	text10
  2592  0DFE                     __ptext10:	
  2593 ;; *************** function _ADCMain *****************
  2594 ;; Defined at:
  2595 ;;		line 19 in file "ADC.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;		None
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;		None
  2600 ;; Return value:  Size  Location     Type
  2601 ;;                  1    wreg      void 
  2602 ;; Registers used:
  2603 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2604 ;; Tracked objects:
  2605 ;;		On entry : 0/0
  2606 ;;		On exit  : 0/0
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2609 ;;      Params:         0       0       0       0       0
  2610 ;;      Locals:         0       0       0       0       0
  2611 ;;      Temps:          0       0       0       0       0
  2612 ;;      Totals:         0       0       0       0       0
  2613 ;;Total ram usage:        0 bytes
  2614 ;; Hardware stack levels used:    1
  2615 ;; Hardware stack levels required when called:    4
  2616 ;; This function calls:
  2617 ;;		_adcConvertMM
  2618 ;;		_getADC
  2619 ;;		_lcdSetCursor
  2620 ;;		_lcdWriteToDigitBCD
  2621 ;; This function is called by:
  2622 ;;		_initWallFollow
  2623 ;;		_main
  2624 ;; This function uses a non-reentrant model
  2625 ;;
  2626                           
  2627                           
  2628                           ;psect for function _ADCMain
  2629  0DFE                     _ADCMain:	
  2630                           
  2631                           ;ADC.c: 21: getADC();
  2632                           
  2633                           ;incstack = 0
  2634                           ; Regs used in _ADCMain: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2635  0DFE  120A  158A  2754  120A  158A  	fcall	_getADC
  2636                           
  2637                           ;ADC.c: 22: lcdSetCursor(0b10000000);
  2638  0E03  3080               	movlw	128
  2639  0E04  120A  158A  256C  120A  158A  	fcall	_lcdSetCursor
  2640                           
  2641                           ;ADC.c: 23: lcdWriteToDigitBCD(adcRAW);
  2642  0E09  1283               	bcf	3,5	;RP0=0, select bank0
  2643  0E0A  1303               	bcf	3,6	;RP1=0, select bank0
  2644  0E0B  0858               	movf	_adcRAW+1,w	;volatile
  2645  0E0C  00A4               	movwf	lcdWriteToDigitBCD@data+1
  2646  0E0D  0857               	movf	_adcRAW,w	;volatile
  2647  0E0E  00A3               	movwf	lcdWriteToDigitBCD@data
  2648  0E0F  120A  118A  258B  120A  158A  	fcall	_lcdWriteToDigitBCD
  2649                           
  2650                           ;ADC.c: 25: adcConvertMM(adcRAW);
  2651  0E14  1283               	bcf	3,5	;RP0=0, select bank0
  2652  0E15  1303               	bcf	3,6	;RP1=0, select bank0
  2653  0E16  0858               	movf	_adcRAW+1,w	;volatile
  2654  0E17  00B6               	movwf	adcConvertMM@adcRAW+1
  2655  0E18  0857               	movf	_adcRAW,w	;volatile
  2656  0E19  00B5               	movwf	adcConvertMM@adcRAW
  2657  0E1A  120A  118A  2037   	fcall	_adcConvertMM
  2658  0E1D  0008               	return
  2659  0E1E                     __end_of_ADCMain:	
  2660                           
  2661                           	psect	text11
  2662  058B                     __ptext11:	
  2663 ;; *************** function _lcdWriteToDigitBCD *****************
  2664 ;; Defined at:
  2665 ;;		line 42 in file "LCD.c"
  2666 ;; Parameters:    Size  Location     Type
  2667 ;;  data            2    3[BANK0 ] unsigned int 
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  2670 ;;  TenThouDigit    2   11[BANK0 ] unsigned int 
  2671 ;;  ThouDigit       2    9[BANK0 ] unsigned int 
  2672 ;;  HunsDigit       2    7[BANK0 ] unsigned int 
  2673 ;;  TensDigit       2    5[BANK0 ] unsigned int 
  2674 ;; Return value:  Size  Location     Type
  2675 ;;                  1    wreg      void 
  2676 ;; Registers used:
  2677 ;;		wreg, status,2, status,0, pclath, cstack
  2678 ;; Tracked objects:
  2679 ;;		On entry : 0/0
  2680 ;;		On exit  : 0/0
  2681 ;;		Unchanged: 0/0
  2682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2683 ;;      Params:         0       2       0       0       0
  2684 ;;      Locals:         0      10       0       0       0
  2685 ;;      Temps:          0       0       0       0       0
  2686 ;;      Totals:         0      12       0       0       0
  2687 ;;Total ram usage:       12 bytes
  2688 ;; Hardware stack levels used:    1
  2689 ;; Hardware stack levels required when called:    3
  2690 ;; This function calls:
  2691 ;;		_lcdWriteData
  2692 ;; This function is called by:
  2693 ;;		_main
  2694 ;;		_ADCMain
  2695 ;; This function uses a non-reentrant model
  2696 ;;
  2697                           
  2698                           
  2699                           ;psect for function _lcdWriteToDigitBCD
  2700  058B                     _lcdWriteToDigitBCD:	
  2701                           
  2702                           ;LCD.c: 43: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  2703                           ;LCD.c: 46: OnesDigit = data;
  2704                           
  2705                           ;incstack = 0
  2706                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  2707  058B  1283               	bcf	3,5	;RP0=0, select bank0
  2708  058C  1303               	bcf	3,6	;RP1=0, select bank0
  2709  058D  0824               	movf	lcdWriteToDigitBCD@data+1,w
  2710  058E  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2711  058F  0823               	movf	lcdWriteToDigitBCD@data,w
  2712  0590  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  2713                           
  2714                           ;LCD.c: 47: TensDigit = 0;
  2715  0591  01A5               	clrf	lcdWriteToDigitBCD@TensDigit
  2716  0592  01A6               	clrf	lcdWriteToDigitBCD@TensDigit+1
  2717                           
  2718                           ;LCD.c: 48: HunsDigit = 0;
  2719  0593  01A7               	clrf	lcdWriteToDigitBCD@HunsDigit
  2720  0594  01A8               	clrf	lcdWriteToDigitBCD@HunsDigit+1
  2721                           
  2722                           ;LCD.c: 49: ThouDigit = 0;
  2723  0595  01A9               	clrf	lcdWriteToDigitBCD@ThouDigit
  2724  0596  01AA               	clrf	lcdWriteToDigitBCD@ThouDigit+1
  2725                           
  2726                           ;LCD.c: 50: TenThouDigit = 0;
  2727  0597  01AB               	clrf	lcdWriteToDigitBCD@TenThouDigit
  2728  0598  01AC               	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  2729  0599                     l1788:	
  2730                           ;LCD.c: 53: while (OnesDigit >= 10000){
  2731                           
  2732  0599  3027               	movlw	39
  2733  059A  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2734  059B  3010               	movlw	16
  2735  059C  1903               	skipnz
  2736  059D  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2737  059E  1C03               	btfss	3,0
  2738  059F  2DBD               	goto	l1794
  2739                           
  2740                           ;LCD.c: 54: OnesDigit = OnesDigit - 10000;
  2741  05A0  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2742  05A1  3EF0               	addlw	240
  2743  05A2  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  2744  05A3  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2745  05A4  1803               	skipnc
  2746  05A5  3E01               	addlw	1
  2747  05A6  3ED8               	addlw	216
  2748  05A7  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2749                           
  2750                           ;LCD.c: 55: TenThouDigit++;
  2751  05A8  3001               	movlw	1
  2752  05A9  07AB               	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  2753  05AA  1803               	skipnc
  2754  05AB  0AAC               	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2755  05AC  3000               	movlw	0
  2756  05AD  07AC               	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2757  05AE  2D99               	goto	l1788
  2758  05AF                     l1790:	
  2759                           ;LCD.c: 56: }
  2760                           ;LCD.c: 58: while (OnesDigit >= 1000){
  2761                           
  2762                           
  2763                           ;LCD.c: 59: OnesDigit = OnesDigit - 1000;
  2764  05AF  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2765  05B0  3E18               	addlw	24
  2766  05B1  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  2767  05B2  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2768  05B3  1803               	skipnc
  2769  05B4  3E01               	addlw	1
  2770  05B5  3EFC               	addlw	252
  2771  05B6  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2772                           
  2773                           ;LCD.c: 60: ThouDigit++;
  2774  05B7  3001               	movlw	1
  2775  05B8  07A9               	addwf	lcdWriteToDigitBCD@ThouDigit,f
  2776  05B9  1803               	skipnc
  2777  05BA  0AAA               	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  2778  05BB  3000               	movlw	0
  2779  05BC  07AA               	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  2780  05BD                     l1794:	
  2781  05BD  3003               	movlw	3
  2782  05BE  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2783  05BF  30E8               	movlw	232
  2784  05C0  1903               	skipnz
  2785  05C1  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2786  05C2  1C03               	btfss	3,0
  2787  05C3  2DD3               	goto	l1800
  2788  05C4  2DAF               	goto	l1790
  2789  05C5                     l1796:	
  2790                           ;LCD.c: 61: }
  2791                           ;LCD.c: 63: while (OnesDigit >= 100){
  2792                           
  2793                           
  2794                           ;LCD.c: 64: OnesDigit = OnesDigit - 100;
  2795  05C5  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2796  05C6  3E9C               	addlw	156
  2797  05C7  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  2798  05C8  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2799  05C9  1803               	skipnc
  2800  05CA  3E01               	addlw	1
  2801  05CB  3EFF               	addlw	255
  2802  05CC  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2803                           
  2804                           ;LCD.c: 65: HunsDigit++;
  2805  05CD  3001               	movlw	1
  2806  05CE  07A7               	addwf	lcdWriteToDigitBCD@HunsDigit,f
  2807  05CF  1803               	skipnc
  2808  05D0  0AA8               	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  2809  05D1  3000               	movlw	0
  2810  05D2  07A8               	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  2811  05D3                     l1800:	
  2812  05D3  3000               	movlw	0
  2813  05D4  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2814  05D5  3064               	movlw	100
  2815  05D6  1903               	skipnz
  2816  05D7  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2817  05D8  1C03               	btfss	3,0
  2818  05D9  2DE9               	goto	l1806
  2819  05DA  2DC5               	goto	l1796
  2820  05DB                     l1802:	
  2821                           ;LCD.c: 66: }
  2822                           ;LCD.c: 68: while (OnesDigit >= 10){
  2823                           
  2824                           
  2825                           ;LCD.c: 69: OnesDigit = OnesDigit - 10;
  2826  05DB  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2827  05DC  3EF6               	addlw	246
  2828  05DD  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  2829  05DE  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2830  05DF  1803               	skipnc
  2831  05E0  3E01               	addlw	1
  2832  05E1  3EFF               	addlw	255
  2833  05E2  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2834                           
  2835                           ;LCD.c: 70: TensDigit++;
  2836  05E3  3001               	movlw	1
  2837  05E4  07A5               	addwf	lcdWriteToDigitBCD@TensDigit,f
  2838  05E5  1803               	skipnc
  2839  05E6  0AA6               	incf	lcdWriteToDigitBCD@TensDigit+1,f
  2840  05E7  3000               	movlw	0
  2841  05E8  07A6               	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  2842  05E9                     l1806:	
  2843  05E9  3000               	movlw	0
  2844  05EA  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2845  05EB  300A               	movlw	10
  2846  05EC  1903               	skipnz
  2847  05ED  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2848  05EE  1803               	skipnc
  2849  05EF  2DDB               	goto	l1802
  2850                           
  2851                           ;LCD.c: 71: }
  2852                           ;LCD.c: 73: if (TenThouDigit > 0)
  2853  05F0  082B               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  2854  05F1  042C               	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  2855  05F2  1903               	btfsc	3,2
  2856  05F3  2DFB               	goto	l1812
  2857                           
  2858                           ;LCD.c: 74: lcdWriteData((unsigned int)TenThouDigit + 48);
  2859  05F4  082B               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  2860  05F5  3E30               	addlw	48
  2861  05F6  120A  158A  25A9  120A  118A  	fcall	_lcdWriteData
  2862  05FB                     l1812:	
  2863                           
  2864                           ;LCD.c: 76: if (ThouDigit > 0)
  2865  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  2866  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  2867  05FD  0829               	movf	lcdWriteToDigitBCD@ThouDigit,w
  2868  05FE  042A               	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  2869  05FF  1903               	btfsc	3,2
  2870  0600  2E08               	goto	l218
  2871                           
  2872                           ;LCD.c: 77: lcdWriteData((unsigned int)ThouDigit + 48);
  2873  0601  0829               	movf	lcdWriteToDigitBCD@ThouDigit,w
  2874  0602  3E30               	addlw	48
  2875  0603  120A  158A  25A9  120A  118A  	fcall	_lcdWriteData
  2876  0608                     l218:	
  2877                           
  2878                           ;LCD.c: 79: lcdWriteData((unsigned int)HunsDigit + 48);
  2879  0608  1283               	bcf	3,5	;RP0=0, select bank0
  2880  0609  1303               	bcf	3,6	;RP1=0, select bank0
  2881  060A  0827               	movf	lcdWriteToDigitBCD@HunsDigit,w
  2882  060B  3E30               	addlw	48
  2883  060C  120A  158A  25A9  120A  118A  	fcall	_lcdWriteData
  2884                           
  2885                           ;LCD.c: 80: lcdWriteData((unsigned int)TensDigit + 48);
  2886  0611  1283               	bcf	3,5	;RP0=0, select bank0
  2887  0612  1303               	bcf	3,6	;RP1=0, select bank0
  2888  0613  0825               	movf	lcdWriteToDigitBCD@TensDigit,w
  2889  0614  3E30               	addlw	48
  2890  0615  120A  158A  25A9  120A  118A  	fcall	_lcdWriteData
  2891                           
  2892                           ;LCD.c: 81: lcdWriteData((unsigned int)OnesDigit + 48);
  2893  061A  1283               	bcf	3,5	;RP0=0, select bank0
  2894  061B  1303               	bcf	3,6	;RP1=0, select bank0
  2895  061C  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2896  061D  3E30               	addlw	48
  2897  061E  120A  158A  25A9   	fcall	_lcdWriteData
  2898  0621  0008               	return
  2899  0622                     __end_of_lcdWriteToDigitBCD:	
  2900                           
  2901                           	psect	text12
  2902  0DA9                     __ptext12:	
  2903 ;; *************** function _lcdWriteData *****************
  2904 ;; Defined at:
  2905 ;;		line 20 in file "LCD.c"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;  databyte        1    wreg     unsigned char 
  2908 ;; Auto vars:     Size  Location     Type
  2909 ;;  databyte        1    2[BANK0 ] unsigned char 
  2910 ;; Return value:  Size  Location     Type
  2911 ;;                  1    wreg      void 
  2912 ;; Registers used:
  2913 ;;		wreg
  2914 ;; Tracked objects:
  2915 ;;		On entry : 0/0
  2916 ;;		On exit  : 0/0
  2917 ;;		Unchanged: 0/0
  2918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2919 ;;      Params:         0       0       0       0       0
  2920 ;;      Locals:         0       1       0       0       0
  2921 ;;      Temps:          0       2       0       0       0
  2922 ;;      Totals:         0       3       0       0       0
  2923 ;;Total ram usage:        3 bytes
  2924 ;; Hardware stack levels used:    1
  2925 ;; Hardware stack levels required when called:    2
  2926 ;; This function calls:
  2927 ;;		Nothing
  2928 ;; This function is called by:
  2929 ;;		_lcdWriteString
  2930 ;;		_lcdWriteToDigitBCD
  2931 ;; This function uses a non-reentrant model
  2932 ;;
  2933                           
  2934                           
  2935                           ;psect for function _lcdWriteData
  2936  0DA9                     _lcdWriteData:	
  2937                           
  2938                           ;incstack = 0
  2939                           ; Regs used in _lcdWriteData: [wreg]
  2940                           ;lcdWriteData@databyte stored from wreg
  2941  0DA9  1283               	bcf	3,5	;RP0=0, select bank0
  2942  0DAA  1303               	bcf	3,6	;RP1=0, select bank0
  2943  0DAB  00A2               	movwf	lcdWriteData@databyte
  2944                           
  2945                           ;LCD.c: 21: RE2 = 0;
  2946  0DAC  1109               	bcf	9,2	;volatile
  2947                           
  2948                           ;LCD.c: 22: RE1 = 0;
  2949  0DAD  1089               	bcf	9,1	;volatile
  2950                           
  2951                           ;LCD.c: 23: RE0 = 1;
  2952  0DAE  1409               	bsf	9,0	;volatile
  2953                           
  2954                           ;LCD.c: 24: PORTD = databyte;
  2955  0DAF  0822               	movf	lcdWriteData@databyte,w
  2956  0DB0  0088               	movwf	8	;volatile
  2957                           
  2958                           ;LCD.c: 25: RE2 = 1;
  2959  0DB1  1509               	bsf	9,2	;volatile
  2960                           
  2961                           ;LCD.c: 26: RE2 = 0;
  2962  0DB2  1109               	bcf	9,2	;volatile
  2963                           
  2964                           ;LCD.c: 27: _delay((unsigned long)((1)*(20000000/4000.0)));
  2965  0DB3  3007               	movlw	7
  2966  0DB4  00A1               	movwf	??_lcdWriteData+1
  2967  0DB5  307D               	movlw	125
  2968  0DB6  00A0               	movwf	??_lcdWriteData
  2969  0DB7                     u2497:	
  2970  0DB7  0BA0               	decfsz	??_lcdWriteData,f
  2971  0DB8  2DB7               	goto	u2497
  2972  0DB9  0BA1               	decfsz	??_lcdWriteData+1,f
  2973  0DBA  2DB7               	goto	u2497
  2974  0DBB  0008               	return
  2975  0DBC                     __end_of_lcdWriteData:	
  2976                           
  2977                           	psect	text13
  2978  0D6C                     __ptext13:	
  2979 ;; *************** function _lcdSetCursor *****************
  2980 ;; Defined at:
  2981 ;;		line 31 in file "LCD.c"
  2982 ;; Parameters:    Size  Location     Type
  2983 ;;  address         1    wreg     unsigned char 
  2984 ;; Auto vars:     Size  Location     Type
  2985 ;;  address         1    3[BANK0 ] unsigned char 
  2986 ;; Return value:  Size  Location     Type
  2987 ;;                  1    wreg      void 
  2988 ;; Registers used:
  2989 ;;		wreg, status,2, status,0, pclath, cstack
  2990 ;; Tracked objects:
  2991 ;;		On entry : 0/0
  2992 ;;		On exit  : 0/0
  2993 ;;		Unchanged: 0/0
  2994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2995 ;;      Params:         0       0       0       0       0
  2996 ;;      Locals:         0       1       0       0       0
  2997 ;;      Temps:          0       0       0       0       0
  2998 ;;      Totals:         0       1       0       0       0
  2999 ;;Total ram usage:        1 bytes
  3000 ;; Hardware stack levels used:    1
  3001 ;; Hardware stack levels required when called:    3
  3002 ;; This function calls:
  3003 ;;		_lcdWriteControl
  3004 ;; This function is called by:
  3005 ;;		_main
  3006 ;;		_ADCMain
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           
  3011                           ;psect for function _lcdSetCursor
  3012  0D6C                     _lcdSetCursor:	
  3013                           
  3014                           ;incstack = 0
  3015                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  3016                           ;lcdSetCursor@address stored from wreg
  3017  0D6C  1283               	bcf	3,5	;RP0=0, select bank0
  3018  0D6D  1303               	bcf	3,6	;RP1=0, select bank0
  3019  0D6E  00A3               	movwf	lcdSetCursor@address
  3020                           
  3021                           ;LCD.c: 32: address |= 0b10000000;
  3022  0D6F  17A3               	bsf	lcdSetCursor@address,7
  3023                           
  3024                           ;LCD.c: 33: lcdWriteControl(address);
  3025  0D70  0823               	movf	lcdSetCursor@address,w
  3026  0D71  120A  158A  25BC   	fcall	_lcdWriteControl
  3027  0D74  0008               	return
  3028  0D75                     __end_of_lcdSetCursor:	
  3029                           
  3030                           	psect	text14
  3031  0DBC                     __ptext14:	
  3032 ;; *************** function _lcdWriteControl *****************
  3033 ;; Defined at:
  3034 ;;		line 9 in file "LCD.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;  databyte        1    wreg     unsigned char 
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;  databyte        1    2[BANK0 ] unsigned char 
  3039 ;; Return value:  Size  Location     Type
  3040 ;;                  1    wreg      void 
  3041 ;; Registers used:
  3042 ;;		wreg
  3043 ;; Tracked objects:
  3044 ;;		On entry : 0/0
  3045 ;;		On exit  : 0/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3048 ;;      Params:         0       0       0       0       0
  3049 ;;      Locals:         0       1       0       0       0
  3050 ;;      Temps:          0       2       0       0       0
  3051 ;;      Totals:         0       3       0       0       0
  3052 ;;Total ram usage:        3 bytes
  3053 ;; Hardware stack levels used:    1
  3054 ;; Hardware stack levels required when called:    2
  3055 ;; This function calls:
  3056 ;;		Nothing
  3057 ;; This function is called by:
  3058 ;;		_lcdSetCursor
  3059 ;;		_setupLCD
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           
  3064                           ;psect for function _lcdWriteControl
  3065  0DBC                     _lcdWriteControl:	
  3066                           
  3067                           ;incstack = 0
  3068                           ; Regs used in _lcdWriteControl: [wreg]
  3069                           ;lcdWriteControl@databyte stored from wreg
  3070  0DBC  1283               	bcf	3,5	;RP0=0, select bank0
  3071  0DBD  1303               	bcf	3,6	;RP1=0, select bank0
  3072  0DBE  00A2               	movwf	lcdWriteControl@databyte
  3073                           
  3074                           ;LCD.c: 10: RE2 = 0;
  3075  0DBF  1109               	bcf	9,2	;volatile
  3076                           
  3077                           ;LCD.c: 11: RE1 = 0;
  3078  0DC0  1089               	bcf	9,1	;volatile
  3079                           
  3080                           ;LCD.c: 12: RE0 = 0;
  3081  0DC1  1009               	bcf	9,0	;volatile
  3082                           
  3083                           ;LCD.c: 13: PORTD = databyte;
  3084  0DC2  0822               	movf	lcdWriteControl@databyte,w
  3085  0DC3  0088               	movwf	8	;volatile
  3086                           
  3087                           ;LCD.c: 14: RE2 = 1;
  3088  0DC4  1509               	bsf	9,2	;volatile
  3089                           
  3090                           ;LCD.c: 15: RE2 = 0;
  3091  0DC5  1109               	bcf	9,2	;volatile
  3092                           
  3093                           ;LCD.c: 16: _delay((unsigned long)((2)*(20000000/4000.0)));
  3094  0DC6  300D               	movlw	13
  3095  0DC7  00A1               	movwf	??_lcdWriteControl+1
  3096  0DC8  30FB               	movlw	251
  3097  0DC9  00A0               	movwf	??_lcdWriteControl
  3098  0DCA                     u2507:	
  3099  0DCA  0BA0               	decfsz	??_lcdWriteControl,f
  3100  0DCB  2DCA               	goto	u2507
  3101  0DCC  0BA1               	decfsz	??_lcdWriteControl+1,f
  3102  0DCD  2DCA               	goto	u2507
  3103  0DCE  2DCF               	nop2
  3104  0DCF  0008               	return
  3105  0DD0                     __end_of_lcdWriteControl:	
  3106                           
  3107                           	psect	text15
  3108  0F54                     __ptext15:	
  3109 ;; *************** function _getADC *****************
  3110 ;; Defined at:
  3111 ;;		line 29 in file "ADC.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;		None
  3114 ;; Auto vars:     Size  Location     Type
  3115 ;;		None
  3116 ;; Return value:  Size  Location     Type
  3117 ;;                  2  469[None  ] unsigned int 
  3118 ;; Registers used:
  3119 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3120 ;; Tracked objects:
  3121 ;;		On entry : 0/0
  3122 ;;		On exit  : 0/0
  3123 ;;		Unchanged: 0/0
  3124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3125 ;;      Params:         0       0       0       0       0
  3126 ;;      Locals:         0       0       0       0       0
  3127 ;;      Temps:          0       2       0       0       0
  3128 ;;      Totals:         0       2       0       0       0
  3129 ;;Total ram usage:        2 bytes
  3130 ;; Hardware stack levels used:    1
  3131 ;; Hardware stack levels required when called:    2
  3132 ;; This function calls:
  3133 ;;		Nothing
  3134 ;; This function is called by:
  3135 ;;		_ADCMain
  3136 ;; This function uses a non-reentrant model
  3137 ;;
  3138                           
  3139                           
  3140                           ;psect for function _getADC
  3141  0F54                     _getADC:	
  3142                           
  3143                           ;ADC.c: 31: ADRESH = 0;
  3144                           
  3145                           ;incstack = 0
  3146                           ; Regs used in _getADC: [wreg-fsr0h+status,2+status,0]
  3147  0F54  1283               	bcf	3,5	;RP0=0, select bank0
  3148  0F55  1303               	bcf	3,6	;RP1=0, select bank0
  3149  0F56  019E               	clrf	30	;volatile
  3150                           
  3151                           ;ADC.c: 32: ADRESL = 0;
  3152  0F57  1683               	bsf	3,5	;RP0=1, select bank1
  3153  0F58  1303               	bcf	3,6	;RP1=0, select bank1
  3154  0F59  019E               	clrf	30	;volatile
  3155                           
  3156                           ;ADC.c: 34: GO = 1;
  3157  0F5A  1283               	bcf	3,5	;RP0=0, select bank0
  3158  0F5B  1303               	bcf	3,6	;RP1=0, select bank0
  3159  0F5C  151F               	bsf	31,2	;volatile
  3160  0F5D                     l516:	
  3161                           ;ADC.c: 35: while(GO) continue;
  3162                           
  3163  0F5D  191F               	btfsc	31,2	;volatile
  3164  0F5E  2F5D               	goto	l516
  3165                           
  3166                           ;ADC.c: 39: adcRAW = (4*ADRESH);
  3167  0F5F  081E               	movf	30,w	;volatile
  3168  0F60  00A0               	movwf	??_getADC
  3169  0F61  01A1               	clrf	??_getADC+1
  3170  0F62  1003               	clrc
  3171  0F63  0DA0               	rlf	??_getADC,f
  3172  0F64  0DA1               	rlf	??_getADC+1,f
  3173  0F65  1003               	clrc
  3174  0F66  0DA0               	rlf	??_getADC,f
  3175  0F67  0DA1               	rlf	??_getADC+1,f
  3176  0F68  0820               	movf	??_getADC,w
  3177  0F69  00D7               	movwf	_adcRAW	;volatile
  3178  0F6A  0821               	movf	??_getADC+1,w
  3179  0F6B  00D8               	movwf	_adcRAW+1	;volatile
  3180                           
  3181                           ;ADC.c: 41: switch(ADRESL){
  3182  0F6C  2F8B               	goto	l1832
  3183  0F6D                     l1826:	
  3184                           ;ADC.c: 42: case 0b01000000: adcRAW = adcRAW + 1;
  3185                           
  3186  0F6D  1283               	bcf	3,5	;RP0=0, select bank0
  3187  0F6E  0857               	movf	_adcRAW,w	;volatile
  3188  0F6F  3E01               	addlw	1
  3189  0F70  00D7               	movwf	_adcRAW	;volatile
  3190  0F71  0858               	movf	_adcRAW+1,w	;volatile
  3191  0F72  1803               	skipnc
  3192  0F73  3E01               	addlw	1
  3193  0F74  3E00               	addlw	0
  3194  0F75  00D8               	movwf	_adcRAW+1	;volatile
  3195                           
  3196                           ;ADC.c: 43: break;
  3197  0F76  0008               	return
  3198  0F77                     l1828:	
  3199                           ;ADC.c: 44: case 0b10000000: adcRAW = adcRAW + 2;
  3200                           
  3201  0F77  1283               	bcf	3,5	;RP0=0, select bank0
  3202  0F78  0857               	movf	_adcRAW,w	;volatile
  3203  0F79  3E02               	addlw	2
  3204  0F7A  00D7               	movwf	_adcRAW	;volatile
  3205  0F7B  0858               	movf	_adcRAW+1,w	;volatile
  3206  0F7C  1803               	skipnc
  3207  0F7D  3E01               	addlw	1
  3208  0F7E  3E00               	addlw	0
  3209  0F7F  00D8               	movwf	_adcRAW+1	;volatile
  3210                           
  3211                           ;ADC.c: 45: break;
  3212  0F80  0008               	return
  3213  0F81                     l1830:	
  3214                           ;ADC.c: 46: case 0b11000000: adcRAW = adcRAW + 3;
  3215                           
  3216  0F81  1283               	bcf	3,5	;RP0=0, select bank0
  3217  0F82  0857               	movf	_adcRAW,w	;volatile
  3218  0F83  3E03               	addlw	3
  3219  0F84  00D7               	movwf	_adcRAW	;volatile
  3220  0F85  0858               	movf	_adcRAW+1,w	;volatile
  3221  0F86  1803               	skipnc
  3222  0F87  3E01               	addlw	1
  3223  0F88  3E00               	addlw	0
  3224  0F89  00D8               	movwf	_adcRAW+1	;volatile
  3225                           
  3226                           ;ADC.c: 49: }
  3227                           
  3228                           ;ADC.c: 48: default: adcRAW = adcRAW;
  3229                           
  3230                           ;ADC.c: 47: break;
  3231  0F8A  0008               	return
  3232  0F8B                     l1832:	
  3233  0F8B  1683               	bsf	3,5	;RP0=1, select bank1
  3234  0F8C  1303               	bcf	3,6	;RP1=0, select bank1
  3235  0F8D  081E               	movf	30,w	;volatile
  3236                           
  3237                           ; Switch size 1, requested type "space"
  3238                           ; Number of cases is 3, Range of values is 64 to 192
  3239                           ; switch strategies available:
  3240                           ; Name         Instructions Cycles
  3241                           ; simple_byte           10     6 (average)
  3242                           ; jumptable            263     9 (fixed)
  3243                           ;	Chosen strategy is simple_byte
  3244  0F8E  3A40               	xorlw	64	; case 64
  3245  0F8F  1903               	skipnz
  3246  0F90  2F6D               	goto	l1826
  3247  0F91  3AC0               	xorlw	192	; case 128
  3248  0F92  1903               	skipnz
  3249  0F93  2F77               	goto	l1828
  3250  0F94  3A40               	xorlw	64	; case 192
  3251  0F95  1903               	skipnz
  3252  0F96  2F81               	goto	l1830
  3253  0F97  2F98               	goto	l525
  3254  0F98                     l525:	
  3255                           ;ADC.c: 51: return(adcRAW);
  3256                           ;	Return value of _getADC is never used
  3257                           
  3258  0F98  0008               	return
  3259  0F99                     __end_of_getADC:	
  3260                           
  3261                           	psect	text16
  3262  0037                     __ptext16:	
  3263 ;; *************** function _adcConvertMM *****************
  3264 ;; Defined at:
  3265 ;;		line 59 in file "ADC.c"
  3266 ;; Parameters:    Size  Location     Type
  3267 ;;  adcRAW          2   21[BANK0 ] unsigned int 
  3268 ;; Auto vars:     Size  Location     Type
  3269 ;;		None
  3270 ;; Return value:  Size  Location     Type
  3271 ;;                  2   21[BANK0 ] unsigned int 
  3272 ;; Registers used:
  3273 ;;		wreg, status,2, status,0, pclath, cstack
  3274 ;; Tracked objects:
  3275 ;;		On entry : 0/0
  3276 ;;		On exit  : 0/0
  3277 ;;		Unchanged: 0/0
  3278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3279 ;;      Params:         0       2       0       0       0
  3280 ;;      Locals:         0       0       0       0       0
  3281 ;;      Temps:          0       8       0       0       0
  3282 ;;      Totals:         0      10       0       0       0
  3283 ;;Total ram usage:       10 bytes
  3284 ;; Hardware stack levels used:    1
  3285 ;; Hardware stack levels required when called:    3
  3286 ;; This function calls:
  3287 ;;		___aldiv
  3288 ;;		___lwdiv
  3289 ;;		___wmul
  3290 ;; This function is called by:
  3291 ;;		_ADCMain
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           
  3296                           ;psect for function _adcConvertMM
  3297  0037                     _adcConvertMM:	
  3298                           
  3299                           ;ADC.c: 61: if (adcRAW < 517 && adcRAW >= 513)
  3300                           
  3301                           ;incstack = 0
  3302                           ; Regs used in _adcConvertMM: [wreg+status,2+status,0+pclath+cstack]
  3303  0037  3002               	movlw	2
  3304  0038  1283               	bcf	3,5	;RP0=0, select bank0
  3305  0039  1303               	bcf	3,6	;RP1=0, select bank0
  3306  003A  0236               	subwf	adcConvertMM@adcRAW+1,w
  3307  003B  3005               	movlw	5
  3308  003C  1903               	skipnz
  3309  003D  0235               	subwf	adcConvertMM@adcRAW,w
  3310  003E  1803               	skipnc
  3311  003F  28A6               	goto	l1840
  3312  0040  3002               	movlw	2
  3313  0041  0236               	subwf	adcConvertMM@adcRAW+1,w
  3314  0042  3001               	movlw	1
  3315  0043  1903               	skipnz
  3316  0044  0235               	subwf	adcConvertMM@adcRAW,w
  3317  0045  1C03               	skipc
  3318  0046  28A6               	goto	l1840
  3319                           
  3320                           ;ADC.c: 62: Distance = (((51700 - adcRAW*100)/4) + 100);
  3321  0047  3000               	movlw	0
  3322  0048  00A9               	movwf	___aldiv@divisor+3
  3323  0049  3000               	movlw	0
  3324  004A  00A8               	movwf	___aldiv@divisor+2
  3325  004B  3000               	movlw	0
  3326  004C  00A7               	movwf	___aldiv@divisor+1
  3327  004D  3004               	movlw	4
  3328  004E  00A6               	movwf	___aldiv@divisor
  3329  004F  30F4               	movlw	244
  3330  0050  00B7               	movwf	??_adcConvertMM
  3331  0051  30C9               	movlw	201
  3332  0052  00B8               	movwf	??_adcConvertMM+1
  3333  0053  3000               	movlw	0
  3334  0054  00B9               	movwf	??_adcConvertMM+2
  3335  0055  3000               	movlw	0
  3336  0056  00BA               	movwf	??_adcConvertMM+3
  3337  0057  0836               	movf	adcConvertMM@adcRAW+1,w
  3338  0058  00A1               	movwf	___wmul@multiplier+1
  3339  0059  0835               	movf	adcConvertMM@adcRAW,w
  3340  005A  00A0               	movwf	___wmul@multiplier
  3341  005B  3064               	movlw	100
  3342  005C  00A2               	movwf	___wmul@multiplicand
  3343  005D  3000               	movlw	0
  3344  005E  00A3               	movwf	___wmul@multiplicand+1
  3345  005F  120A  158A  263E  120A  118A  	fcall	___wmul
  3346  0064  1283               	bcf	3,5	;RP0=0, select bank0
  3347  0065  1303               	bcf	3,6	;RP1=0, select bank0
  3348  0066  0820               	movf	?___wmul,w
  3349  0067  00BB               	movwf	??_adcConvertMM+4
  3350  0068  0821               	movf	?___wmul+1,w
  3351  0069  00BC               	movwf	??_adcConvertMM+5
  3352  006A  01BD               	clrf	??_adcConvertMM+6
  3353  006B  01BE               	clrf	??_adcConvertMM+7
  3354  006C  09BB               	comf	??_adcConvertMM+4,f
  3355  006D  09BC               	comf	??_adcConvertMM+5,f
  3356  006E  09BD               	comf	??_adcConvertMM+6,f
  3357  006F  09BE               	comf	??_adcConvertMM+7,f
  3358  0070  0ABB               	incf	??_adcConvertMM+4,f
  3359  0071  1903               	skipnz
  3360  0072  0ABC               	incf	??_adcConvertMM+5,f
  3361  0073  1903               	skipnz
  3362  0074  0ABD               	incf	??_adcConvertMM+6,f
  3363  0075  1903               	skipnz
  3364  0076  0ABE               	incf	??_adcConvertMM+7,f
  3365  0077  083B               	movf	??_adcConvertMM+4,w
  3366  0078  07B7               	addwf	??_adcConvertMM,f
  3367  0079  083C               	movf	??_adcConvertMM+5,w
  3368  007A  1803               	skipnc
  3369  007B  0F3C               	incfsz	??_adcConvertMM+5,w
  3370  007C  287E               	goto	u1530
  3371  007D  287F               	goto	u1531
  3372  007E                     u1530:	
  3373  007E  07B8               	addwf	??_adcConvertMM+1,f
  3374  007F                     u1531:	
  3375  007F  083D               	movf	??_adcConvertMM+6,w
  3376  0080  1803               	skipnc
  3377  0081  0F3D               	incfsz	??_adcConvertMM+6,w
  3378  0082  2884               	goto	u1532
  3379  0083  2885               	goto	u1533
  3380  0084                     u1532:	
  3381  0084  07B9               	addwf	??_adcConvertMM+2,f
  3382  0085                     u1533:	
  3383  0085  083E               	movf	??_adcConvertMM+7,w
  3384  0086  1803               	skipnc
  3385  0087  0A3E               	incf	??_adcConvertMM+7,w
  3386  0088  07BA               	addwf	??_adcConvertMM+3,f
  3387  0089  083A               	movf	??_adcConvertMM+3,w
  3388  008A  00AD               	movwf	___aldiv@dividend+3
  3389  008B  0839               	movf	??_adcConvertMM+2,w
  3390  008C  00AC               	movwf	___aldiv@dividend+2
  3391  008D  0838               	movf	??_adcConvertMM+1,w
  3392  008E  00AB               	movwf	___aldiv@dividend+1
  3393  008F  0837               	movf	??_adcConvertMM,w
  3394  0090  00AA               	movwf	___aldiv@dividend
  3395  0091  120A  118A  26B3  120A  118A  	fcall	___aldiv
  3396  0096  1283               	bcf	3,5	;RP0=0, select bank0
  3397  0097  1303               	bcf	3,6	;RP1=0, select bank0
  3398  0098  0826               	movf	?___aldiv,w
  3399  0099  3E64               	addlw	100
  3400  009A  1683               	bsf	3,5	;RP0=1, select bank1
  3401  009B  1303               	bcf	3,6	;RP1=0, select bank1
  3402  009C  00A0               	movwf	_Distance^(0+128)	;volatile
  3403  009D  1283               	bcf	3,5	;RP0=0, select bank0
  3404  009E  1303               	bcf	3,6	;RP1=0, select bank0
  3405  009F  0827               	movf	?___aldiv+1,w
  3406  00A0  1803               	skipnc
  3407  00A1  3E01               	addlw	1
  3408  00A2  3E00               	addlw	0
  3409  00A3  1683               	bsf	3,5	;RP0=1, select bank1
  3410  00A4  1303               	bcf	3,6	;RP1=0, select bank1
  3411  00A5  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  3412  00A6                     l1840:	
  3413                           
  3414                           ;ADC.c: 64: if (adcRAW < 513 && adcRAW >= 393)
  3415  00A6  3002               	movlw	2
  3416  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  3417  00A8  0236               	subwf	adcConvertMM@adcRAW+1,w
  3418  00A9  3001               	movlw	1
  3419  00AA  1903               	skipnz
  3420  00AB  0235               	subwf	adcConvertMM@adcRAW,w
  3421  00AC  1803               	skipnc
  3422  00AD  2914               	goto	l1846
  3423  00AE  3001               	movlw	1
  3424  00AF  0236               	subwf	adcConvertMM@adcRAW+1,w
  3425  00B0  3089               	movlw	137
  3426  00B1  1903               	skipnz
  3427  00B2  0235               	subwf	adcConvertMM@adcRAW,w
  3428  00B3  1C03               	skipc
  3429  00B4  2914               	goto	l1846
  3430                           
  3431                           ;ADC.c: 65: Distance = (((51300 - adcRAW*100)/120) + 200);
  3432  00B5  3000               	movlw	0
  3433  00B6  00A9               	movwf	___aldiv@divisor+3
  3434  00B7  3000               	movlw	0
  3435  00B8  00A8               	movwf	___aldiv@divisor+2
  3436  00B9  3000               	movlw	0
  3437  00BA  00A7               	movwf	___aldiv@divisor+1
  3438  00BB  3078               	movlw	120
  3439  00BC  00A6               	movwf	___aldiv@divisor
  3440  00BD  3064               	movlw	100
  3441  00BE  00B7               	movwf	??_adcConvertMM
  3442  00BF  30C8               	movlw	200
  3443  00C0  00B8               	movwf	??_adcConvertMM+1
  3444  00C1  3000               	movlw	0
  3445  00C2  00B9               	movwf	??_adcConvertMM+2
  3446  00C3  3000               	movlw	0
  3447  00C4  00BA               	movwf	??_adcConvertMM+3
  3448  00C5  0836               	movf	adcConvertMM@adcRAW+1,w
  3449  00C6  00A1               	movwf	___wmul@multiplier+1
  3450  00C7  0835               	movf	adcConvertMM@adcRAW,w
  3451  00C8  00A0               	movwf	___wmul@multiplier
  3452  00C9  3064               	movlw	100
  3453  00CA  00A2               	movwf	___wmul@multiplicand
  3454  00CB  3000               	movlw	0
  3455  00CC  00A3               	movwf	___wmul@multiplicand+1
  3456  00CD  120A  158A  263E  120A  118A  	fcall	___wmul
  3457  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  3458  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  3459  00D4  0820               	movf	?___wmul,w
  3460  00D5  00BB               	movwf	??_adcConvertMM+4
  3461  00D6  0821               	movf	?___wmul+1,w
  3462  00D7  00BC               	movwf	??_adcConvertMM+5
  3463  00D8  01BD               	clrf	??_adcConvertMM+6
  3464  00D9  01BE               	clrf	??_adcConvertMM+7
  3465  00DA  09BB               	comf	??_adcConvertMM+4,f
  3466  00DB  09BC               	comf	??_adcConvertMM+5,f
  3467  00DC  09BD               	comf	??_adcConvertMM+6,f
  3468  00DD  09BE               	comf	??_adcConvertMM+7,f
  3469  00DE  0ABB               	incf	??_adcConvertMM+4,f
  3470  00DF  1903               	skipnz
  3471  00E0  0ABC               	incf	??_adcConvertMM+5,f
  3472  00E1  1903               	skipnz
  3473  00E2  0ABD               	incf	??_adcConvertMM+6,f
  3474  00E3  1903               	skipnz
  3475  00E4  0ABE               	incf	??_adcConvertMM+7,f
  3476  00E5  083B               	movf	??_adcConvertMM+4,w
  3477  00E6  07B7               	addwf	??_adcConvertMM,f
  3478  00E7  083C               	movf	??_adcConvertMM+5,w
  3479  00E8  1803               	skipnc
  3480  00E9  0F3C               	incfsz	??_adcConvertMM+5,w
  3481  00EA  28EC               	goto	u1560
  3482  00EB  28ED               	goto	u1561
  3483  00EC                     u1560:	
  3484  00EC  07B8               	addwf	??_adcConvertMM+1,f
  3485  00ED                     u1561:	
  3486  00ED  083D               	movf	??_adcConvertMM+6,w
  3487  00EE  1803               	skipnc
  3488  00EF  0F3D               	incfsz	??_adcConvertMM+6,w
  3489  00F0  28F2               	goto	u1562
  3490  00F1  28F3               	goto	u1563
  3491  00F2                     u1562:	
  3492  00F2  07B9               	addwf	??_adcConvertMM+2,f
  3493  00F3                     u1563:	
  3494  00F3  083E               	movf	??_adcConvertMM+7,w
  3495  00F4  1803               	skipnc
  3496  00F5  0A3E               	incf	??_adcConvertMM+7,w
  3497  00F6  07BA               	addwf	??_adcConvertMM+3,f
  3498  00F7  083A               	movf	??_adcConvertMM+3,w
  3499  00F8  00AD               	movwf	___aldiv@dividend+3
  3500  00F9  0839               	movf	??_adcConvertMM+2,w
  3501  00FA  00AC               	movwf	___aldiv@dividend+2
  3502  00FB  0838               	movf	??_adcConvertMM+1,w
  3503  00FC  00AB               	movwf	___aldiv@dividend+1
  3504  00FD  0837               	movf	??_adcConvertMM,w
  3505  00FE  00AA               	movwf	___aldiv@dividend
  3506  00FF  120A  118A  26B3  120A  118A  	fcall	___aldiv
  3507  0104  1283               	bcf	3,5	;RP0=0, select bank0
  3508  0105  1303               	bcf	3,6	;RP1=0, select bank0
  3509  0106  0826               	movf	?___aldiv,w
  3510  0107  3EC8               	addlw	200
  3511  0108  1683               	bsf	3,5	;RP0=1, select bank1
  3512  0109  1303               	bcf	3,6	;RP1=0, select bank1
  3513  010A  00A0               	movwf	_Distance^(0+128)	;volatile
  3514  010B  1283               	bcf	3,5	;RP0=0, select bank0
  3515  010C  1303               	bcf	3,6	;RP1=0, select bank0
  3516  010D  0827               	movf	?___aldiv+1,w
  3517  010E  1803               	skipnc
  3518  010F  3E01               	addlw	1
  3519  0110  3E00               	addlw	0
  3520  0111  1683               	bsf	3,5	;RP0=1, select bank1
  3521  0112  1303               	bcf	3,6	;RP1=0, select bank1
  3522  0113  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  3523  0114                     l1846:	
  3524                           
  3525                           ;ADC.c: 67: if (adcRAW < 393 && adcRAW >= 298)
  3526  0114  3001               	movlw	1
  3527  0115  1283               	bcf	3,5	;RP0=0, select bank0
  3528  0116  0236               	subwf	adcConvertMM@adcRAW+1,w
  3529  0117  3089               	movlw	137
  3530  0118  1903               	skipnz
  3531  0119  0235               	subwf	adcConvertMM@adcRAW,w
  3532  011A  1803               	skipnc
  3533  011B  2982               	goto	l1852
  3534  011C  3001               	movlw	1
  3535  011D  0236               	subwf	adcConvertMM@adcRAW+1,w
  3536  011E  302A               	movlw	42
  3537  011F  1903               	skipnz
  3538  0120  0235               	subwf	adcConvertMM@adcRAW,w
  3539  0121  1C03               	skipc
  3540  0122  2982               	goto	l1852
  3541                           
  3542                           ;ADC.c: 68: Distance = (((39300 - adcRAW*100)/95) + 300);
  3543  0123  3000               	movlw	0
  3544  0124  00A9               	movwf	___aldiv@divisor+3
  3545  0125  3000               	movlw	0
  3546  0126  00A8               	movwf	___aldiv@divisor+2
  3547  0127  3000               	movlw	0
  3548  0128  00A7               	movwf	___aldiv@divisor+1
  3549  0129  305F               	movlw	95
  3550  012A  00A6               	movwf	___aldiv@divisor
  3551  012B  3084               	movlw	132
  3552  012C  00B7               	movwf	??_adcConvertMM
  3553  012D  3099               	movlw	153
  3554  012E  00B8               	movwf	??_adcConvertMM+1
  3555  012F  3000               	movlw	0
  3556  0130  00B9               	movwf	??_adcConvertMM+2
  3557  0131  3000               	movlw	0
  3558  0132  00BA               	movwf	??_adcConvertMM+3
  3559  0133  0836               	movf	adcConvertMM@adcRAW+1,w
  3560  0134  00A1               	movwf	___wmul@multiplier+1
  3561  0135  0835               	movf	adcConvertMM@adcRAW,w
  3562  0136  00A0               	movwf	___wmul@multiplier
  3563  0137  3064               	movlw	100
  3564  0138  00A2               	movwf	___wmul@multiplicand
  3565  0139  3000               	movlw	0
  3566  013A  00A3               	movwf	___wmul@multiplicand+1
  3567  013B  120A  158A  263E  120A  118A  	fcall	___wmul
  3568  0140  1283               	bcf	3,5	;RP0=0, select bank0
  3569  0141  1303               	bcf	3,6	;RP1=0, select bank0
  3570  0142  0820               	movf	?___wmul,w
  3571  0143  00BB               	movwf	??_adcConvertMM+4
  3572  0144  0821               	movf	?___wmul+1,w
  3573  0145  00BC               	movwf	??_adcConvertMM+5
  3574  0146  01BD               	clrf	??_adcConvertMM+6
  3575  0147  01BE               	clrf	??_adcConvertMM+7
  3576  0148  09BB               	comf	??_adcConvertMM+4,f
  3577  0149  09BC               	comf	??_adcConvertMM+5,f
  3578  014A  09BD               	comf	??_adcConvertMM+6,f
  3579  014B  09BE               	comf	??_adcConvertMM+7,f
  3580  014C  0ABB               	incf	??_adcConvertMM+4,f
  3581  014D  1903               	skipnz
  3582  014E  0ABC               	incf	??_adcConvertMM+5,f
  3583  014F  1903               	skipnz
  3584  0150  0ABD               	incf	??_adcConvertMM+6,f
  3585  0151  1903               	skipnz
  3586  0152  0ABE               	incf	??_adcConvertMM+7,f
  3587  0153  083B               	movf	??_adcConvertMM+4,w
  3588  0154  07B7               	addwf	??_adcConvertMM,f
  3589  0155  083C               	movf	??_adcConvertMM+5,w
  3590  0156  1803               	skipnc
  3591  0157  0F3C               	incfsz	??_adcConvertMM+5,w
  3592  0158  295A               	goto	u1590
  3593  0159  295B               	goto	u1591
  3594  015A                     u1590:	
  3595  015A  07B8               	addwf	??_adcConvertMM+1,f
  3596  015B                     u1591:	
  3597  015B  083D               	movf	??_adcConvertMM+6,w
  3598  015C  1803               	skipnc
  3599  015D  0F3D               	incfsz	??_adcConvertMM+6,w
  3600  015E  2960               	goto	u1592
  3601  015F  2961               	goto	u1593
  3602  0160                     u1592:	
  3603  0160  07B9               	addwf	??_adcConvertMM+2,f
  3604  0161                     u1593:	
  3605  0161  083E               	movf	??_adcConvertMM+7,w
  3606  0162  1803               	skipnc
  3607  0163  0A3E               	incf	??_adcConvertMM+7,w
  3608  0164  07BA               	addwf	??_adcConvertMM+3,f
  3609  0165  083A               	movf	??_adcConvertMM+3,w
  3610  0166  00AD               	movwf	___aldiv@dividend+3
  3611  0167  0839               	movf	??_adcConvertMM+2,w
  3612  0168  00AC               	movwf	___aldiv@dividend+2
  3613  0169  0838               	movf	??_adcConvertMM+1,w
  3614  016A  00AB               	movwf	___aldiv@dividend+1
  3615  016B  0837               	movf	??_adcConvertMM,w
  3616  016C  00AA               	movwf	___aldiv@dividend
  3617  016D  120A  118A  26B3  120A  118A  	fcall	___aldiv
  3618  0172  1283               	bcf	3,5	;RP0=0, select bank0
  3619  0173  1303               	bcf	3,6	;RP1=0, select bank0
  3620  0174  0826               	movf	?___aldiv,w
  3621  0175  3E2C               	addlw	44
  3622  0176  1683               	bsf	3,5	;RP0=1, select bank1
  3623  0177  1303               	bcf	3,6	;RP1=0, select bank1
  3624  0178  00A0               	movwf	_Distance^(0+128)	;volatile
  3625  0179  1283               	bcf	3,5	;RP0=0, select bank0
  3626  017A  1303               	bcf	3,6	;RP1=0, select bank0
  3627  017B  0827               	movf	?___aldiv+1,w
  3628  017C  1803               	skipnc
  3629  017D  3E01               	addlw	1
  3630  017E  3E01               	addlw	1
  3631  017F  1683               	bsf	3,5	;RP0=1, select bank1
  3632  0180  1303               	bcf	3,6	;RP1=0, select bank1
  3633  0181  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  3634  0182                     l1852:	
  3635                           
  3636                           ;ADC.c: 70: if (adcRAW < 298 && adcRAW >= 236)
  3637  0182  3001               	movlw	1
  3638  0183  1283               	bcf	3,5	;RP0=0, select bank0
  3639  0184  0236               	subwf	adcConvertMM@adcRAW+1,w
  3640  0185  302A               	movlw	42
  3641  0186  1903               	skipnz
  3642  0187  0235               	subwf	adcConvertMM@adcRAW,w
  3643  0188  1803               	skipnc
  3644  0189  29C8               	goto	l1858
  3645  018A  3000               	movlw	0
  3646  018B  0236               	subwf	adcConvertMM@adcRAW+1,w
  3647  018C  30EC               	movlw	236
  3648  018D  1903               	skipnz
  3649  018E  0235               	subwf	adcConvertMM@adcRAW,w
  3650  018F  1C03               	skipc
  3651  0190  29C8               	goto	l1858
  3652                           
  3653                           ;ADC.c: 71: Distance = (((29800 - adcRAW*100)/62) + 400);
  3654  0191  303E               	movlw	62
  3655  0192  00A6               	movwf	___lwdiv@divisor
  3656  0193  3000               	movlw	0
  3657  0194  00A7               	movwf	___lwdiv@divisor+1
  3658  0195  0836               	movf	adcConvertMM@adcRAW+1,w
  3659  0196  00A1               	movwf	___wmul@multiplier+1
  3660  0197  0835               	movf	adcConvertMM@adcRAW,w
  3661  0198  00A0               	movwf	___wmul@multiplier
  3662  0199  3064               	movlw	100
  3663  019A  00A2               	movwf	___wmul@multiplicand
  3664  019B  3000               	movlw	0
  3665  019C  00A3               	movwf	___wmul@multiplicand+1
  3666  019D  120A  158A  263E  120A  118A  	fcall	___wmul
  3667  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  3668  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  3669  01A4  0920               	comf	?___wmul,w
  3670  01A5  00B7               	movwf	??_adcConvertMM
  3671  01A6  0921               	comf	?___wmul+1,w
  3672  01A7  00B8               	movwf	??_adcConvertMM+1
  3673  01A8  0AB7               	incf	??_adcConvertMM,f
  3674  01A9  1903               	skipnz
  3675  01AA  0AB8               	incf	??_adcConvertMM+1,f
  3676  01AB  0837               	movf	??_adcConvertMM,w
  3677  01AC  3E68               	addlw	104
  3678  01AD  00A8               	movwf	___lwdiv@dividend
  3679  01AE  0838               	movf	??_adcConvertMM+1,w
  3680  01AF  1803               	skipnc
  3681  01B0  3E01               	addlw	1
  3682  01B1  3E74               	addlw	116
  3683  01B2  00A9               	movwf	___lwdiv@dividend+1
  3684  01B3  120A  158A  26D1  120A  118A  	fcall	___lwdiv
  3685  01B8  1283               	bcf	3,5	;RP0=0, select bank0
  3686  01B9  1303               	bcf	3,6	;RP1=0, select bank0
  3687  01BA  0826               	movf	?___lwdiv,w
  3688  01BB  3E90               	addlw	144
  3689  01BC  1683               	bsf	3,5	;RP0=1, select bank1
  3690  01BD  1303               	bcf	3,6	;RP1=0, select bank1
  3691  01BE  00A0               	movwf	_Distance^(0+128)	;volatile
  3692  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  3693  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  3694  01C1  0827               	movf	?___lwdiv+1,w
  3695  01C2  1803               	skipnc
  3696  01C3  3E01               	addlw	1
  3697  01C4  3E01               	addlw	1
  3698  01C5  1683               	bsf	3,5	;RP0=1, select bank1
  3699  01C6  1303               	bcf	3,6	;RP1=0, select bank1
  3700  01C7  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  3701  01C8                     l1858:	
  3702                           
  3703                           ;ADC.c: 73: if (adcRAW < 236 && adcRAW >= 194)
  3704  01C8  3000               	movlw	0
  3705  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  3706  01CA  0236               	subwf	adcConvertMM@adcRAW+1,w
  3707  01CB  30EC               	movlw	236
  3708  01CC  1903               	skipnz
  3709  01CD  0235               	subwf	adcConvertMM@adcRAW,w
  3710  01CE  1803               	skipnc
  3711  01CF  2A0E               	goto	l1864
  3712  01D0  3000               	movlw	0
  3713  01D1  0236               	subwf	adcConvertMM@adcRAW+1,w
  3714  01D2  30C2               	movlw	194
  3715  01D3  1903               	skipnz
  3716  01D4  0235               	subwf	adcConvertMM@adcRAW,w
  3717  01D5  1C03               	skipc
  3718  01D6  2A0E               	goto	l1864
  3719                           
  3720                           ;ADC.c: 74: Distance = (((23600 - adcRAW*100)/42) + 500);
  3721  01D7  302A               	movlw	42
  3722  01D8  00A6               	movwf	___lwdiv@divisor
  3723  01D9  3000               	movlw	0
  3724  01DA  00A7               	movwf	___lwdiv@divisor+1
  3725  01DB  0836               	movf	adcConvertMM@adcRAW+1,w
  3726  01DC  00A1               	movwf	___wmul@multiplier+1
  3727  01DD  0835               	movf	adcConvertMM@adcRAW,w
  3728  01DE  00A0               	movwf	___wmul@multiplier
  3729  01DF  3064               	movlw	100
  3730  01E0  00A2               	movwf	___wmul@multiplicand
  3731  01E1  3000               	movlw	0
  3732  01E2  00A3               	movwf	___wmul@multiplicand+1
  3733  01E3  120A  158A  263E  120A  118A  	fcall	___wmul
  3734  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  3735  01E9  1303               	bcf	3,6	;RP1=0, select bank0
  3736  01EA  0920               	comf	?___wmul,w
  3737  01EB  00B7               	movwf	??_adcConvertMM
  3738  01EC  0921               	comf	?___wmul+1,w
  3739  01ED  00B8               	movwf	??_adcConvertMM+1
  3740  01EE  0AB7               	incf	??_adcConvertMM,f
  3741  01EF  1903               	skipnz
  3742  01F0  0AB8               	incf	??_adcConvertMM+1,f
  3743  01F1  0837               	movf	??_adcConvertMM,w
  3744  01F2  3E30               	addlw	48
  3745  01F3  00A8               	movwf	___lwdiv@dividend
  3746  01F4  0838               	movf	??_adcConvertMM+1,w
  3747  01F5  1803               	skipnc
  3748  01F6  3E01               	addlw	1
  3749  01F7  3E5C               	addlw	92
  3750  01F8  00A9               	movwf	___lwdiv@dividend+1
  3751  01F9  120A  158A  26D1  120A  118A  	fcall	___lwdiv
  3752  01FE  1283               	bcf	3,5	;RP0=0, select bank0
  3753  01FF  1303               	bcf	3,6	;RP1=0, select bank0
  3754  0200  0826               	movf	?___lwdiv,w
  3755  0201  3EF4               	addlw	244
  3756  0202  1683               	bsf	3,5	;RP0=1, select bank1
  3757  0203  1303               	bcf	3,6	;RP1=0, select bank1
  3758  0204  00A0               	movwf	_Distance^(0+128)	;volatile
  3759  0205  1283               	bcf	3,5	;RP0=0, select bank0
  3760  0206  1303               	bcf	3,6	;RP1=0, select bank0
  3761  0207  0827               	movf	?___lwdiv+1,w
  3762  0208  1803               	skipnc
  3763  0209  3E01               	addlw	1
  3764  020A  3E01               	addlw	1
  3765  020B  1683               	bsf	3,5	;RP0=1, select bank1
  3766  020C  1303               	bcf	3,6	;RP1=0, select bank1
  3767  020D  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  3768  020E                     l1864:	
  3769                           
  3770                           ;ADC.c: 76: if (adcRAW < 194 && adcRAW >= 168)
  3771  020E  3000               	movlw	0
  3772  020F  1283               	bcf	3,5	;RP0=0, select bank0
  3773  0210  0236               	subwf	adcConvertMM@adcRAW+1,w
  3774  0211  30C2               	movlw	194
  3775  0212  1903               	skipnz
  3776  0213  0235               	subwf	adcConvertMM@adcRAW,w
  3777  0214  1803               	skipnc
  3778  0215  2A54               	goto	l1870
  3779  0216  3000               	movlw	0
  3780  0217  0236               	subwf	adcConvertMM@adcRAW+1,w
  3781  0218  30A8               	movlw	168
  3782  0219  1903               	skipnz
  3783  021A  0235               	subwf	adcConvertMM@adcRAW,w
  3784  021B  1C03               	skipc
  3785  021C  2A54               	goto	l1870
  3786                           
  3787                           ;ADC.c: 77: Distance = (((19400 - adcRAW*100)/26) + 600);
  3788  021D  301A               	movlw	26
  3789  021E  00A6               	movwf	___lwdiv@divisor
  3790  021F  3000               	movlw	0
  3791  0220  00A7               	movwf	___lwdiv@divisor+1
  3792  0221  0836               	movf	adcConvertMM@adcRAW+1,w
  3793  0222  00A1               	movwf	___wmul@multiplier+1
  3794  0223  0835               	movf	adcConvertMM@adcRAW,w
  3795  0224  00A0               	movwf	___wmul@multiplier
  3796  0225  3064               	movlw	100
  3797  0226  00A2               	movwf	___wmul@multiplicand
  3798  0227  3000               	movlw	0
  3799  0228  00A3               	movwf	___wmul@multiplicand+1
  3800  0229  120A  158A  263E  120A  118A  	fcall	___wmul
  3801  022E  1283               	bcf	3,5	;RP0=0, select bank0
  3802  022F  1303               	bcf	3,6	;RP1=0, select bank0
  3803  0230  0920               	comf	?___wmul,w
  3804  0231  00B7               	movwf	??_adcConvertMM
  3805  0232  0921               	comf	?___wmul+1,w
  3806  0233  00B8               	movwf	??_adcConvertMM+1
  3807  0234  0AB7               	incf	??_adcConvertMM,f
  3808  0235  1903               	skipnz
  3809  0236  0AB8               	incf	??_adcConvertMM+1,f
  3810  0237  0837               	movf	??_adcConvertMM,w
  3811  0238  3EC8               	addlw	200
  3812  0239  00A8               	movwf	___lwdiv@dividend
  3813  023A  0838               	movf	??_adcConvertMM+1,w
  3814  023B  1803               	skipnc
  3815  023C  3E01               	addlw	1
  3816  023D  3E4B               	addlw	75
  3817  023E  00A9               	movwf	___lwdiv@dividend+1
  3818  023F  120A  158A  26D1  120A  118A  	fcall	___lwdiv
  3819  0244  1283               	bcf	3,5	;RP0=0, select bank0
  3820  0245  1303               	bcf	3,6	;RP1=0, select bank0
  3821  0246  0826               	movf	?___lwdiv,w
  3822  0247  3E58               	addlw	88
  3823  0248  1683               	bsf	3,5	;RP0=1, select bank1
  3824  0249  1303               	bcf	3,6	;RP1=0, select bank1
  3825  024A  00A0               	movwf	_Distance^(0+128)	;volatile
  3826  024B  1283               	bcf	3,5	;RP0=0, select bank0
  3827  024C  1303               	bcf	3,6	;RP1=0, select bank0
  3828  024D  0827               	movf	?___lwdiv+1,w
  3829  024E  1803               	skipnc
  3830  024F  3E01               	addlw	1
  3831  0250  3E02               	addlw	2
  3832  0251  1683               	bsf	3,5	;RP0=1, select bank1
  3833  0252  1303               	bcf	3,6	;RP1=0, select bank1
  3834  0253  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  3835  0254                     l1870:	
  3836                           
  3837                           ;ADC.c: 79: if (adcRAW < 168 && adcRAW >= 144)
  3838  0254  3000               	movlw	0
  3839  0255  1283               	bcf	3,5	;RP0=0, select bank0
  3840  0256  0236               	subwf	adcConvertMM@adcRAW+1,w
  3841  0257  30A8               	movlw	168
  3842  0258  1903               	skipnz
  3843  0259  0235               	subwf	adcConvertMM@adcRAW,w
  3844  025A  1803               	skipnc
  3845  025B  2A9A               	goto	l1876
  3846  025C  3000               	movlw	0
  3847  025D  0236               	subwf	adcConvertMM@adcRAW+1,w
  3848  025E  3090               	movlw	144
  3849  025F  1903               	skipnz
  3850  0260  0235               	subwf	adcConvertMM@adcRAW,w
  3851  0261  1C03               	skipc
  3852  0262  2A9A               	goto	l1876
  3853                           
  3854                           ;ADC.c: 80: Distance = (((16800 - adcRAW*100)/24) + 700);
  3855  0263  3018               	movlw	24
  3856  0264  00A6               	movwf	___lwdiv@divisor
  3857  0265  3000               	movlw	0
  3858  0266  00A7               	movwf	___lwdiv@divisor+1
  3859  0267  0836               	movf	adcConvertMM@adcRAW+1,w
  3860  0268  00A1               	movwf	___wmul@multiplier+1
  3861  0269  0835               	movf	adcConvertMM@adcRAW,w
  3862  026A  00A0               	movwf	___wmul@multiplier
  3863  026B  3064               	movlw	100
  3864  026C  00A2               	movwf	___wmul@multiplicand
  3865  026D  3000               	movlw	0
  3866  026E  00A3               	movwf	___wmul@multiplicand+1
  3867  026F  120A  158A  263E  120A  118A  	fcall	___wmul
  3868  0274  1283               	bcf	3,5	;RP0=0, select bank0
  3869  0275  1303               	bcf	3,6	;RP1=0, select bank0
  3870  0276  0920               	comf	?___wmul,w
  3871  0277  00B7               	movwf	??_adcConvertMM
  3872  0278  0921               	comf	?___wmul+1,w
  3873  0279  00B8               	movwf	??_adcConvertMM+1
  3874  027A  0AB7               	incf	??_adcConvertMM,f
  3875  027B  1903               	skipnz
  3876  027C  0AB8               	incf	??_adcConvertMM+1,f
  3877  027D  0837               	movf	??_adcConvertMM,w
  3878  027E  3EA0               	addlw	160
  3879  027F  00A8               	movwf	___lwdiv@dividend
  3880  0280  0838               	movf	??_adcConvertMM+1,w
  3881  0281  1803               	skipnc
  3882  0282  3E01               	addlw	1
  3883  0283  3E41               	addlw	65
  3884  0284  00A9               	movwf	___lwdiv@dividend+1
  3885  0285  120A  158A  26D1  120A  118A  	fcall	___lwdiv
  3886  028A  1283               	bcf	3,5	;RP0=0, select bank0
  3887  028B  1303               	bcf	3,6	;RP1=0, select bank0
  3888  028C  0826               	movf	?___lwdiv,w
  3889  028D  3EBC               	addlw	188
  3890  028E  1683               	bsf	3,5	;RP0=1, select bank1
  3891  028F  1303               	bcf	3,6	;RP1=0, select bank1
  3892  0290  00A0               	movwf	_Distance^(0+128)	;volatile
  3893  0291  1283               	bcf	3,5	;RP0=0, select bank0
  3894  0292  1303               	bcf	3,6	;RP1=0, select bank0
  3895  0293  0827               	movf	?___lwdiv+1,w
  3896  0294  1803               	skipnc
  3897  0295  3E01               	addlw	1
  3898  0296  3E02               	addlw	2
  3899  0297  1683               	bsf	3,5	;RP0=1, select bank1
  3900  0298  1303               	bcf	3,6	;RP1=0, select bank1
  3901  0299  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  3902  029A                     l1876:	
  3903                           
  3904                           ;ADC.c: 82: if (adcRAW < 144 && adcRAW >= 129)
  3905  029A  3000               	movlw	0
  3906  029B  1283               	bcf	3,5	;RP0=0, select bank0
  3907  029C  0236               	subwf	adcConvertMM@adcRAW+1,w
  3908  029D  3090               	movlw	144
  3909  029E  1903               	skipnz
  3910  029F  0235               	subwf	adcConvertMM@adcRAW,w
  3911  02A0  1803               	skipnc
  3912  02A1  2AE0               	goto	l1882
  3913  02A2  3000               	movlw	0
  3914  02A3  0236               	subwf	adcConvertMM@adcRAW+1,w
  3915  02A4  3081               	movlw	129
  3916  02A5  1903               	skipnz
  3917  02A6  0235               	subwf	adcConvertMM@adcRAW,w
  3918  02A7  1C03               	skipc
  3919  02A8  2AE0               	goto	l1882
  3920                           
  3921                           ;ADC.c: 83: Distance = (((14400 - adcRAW*100)/15) + 800);
  3922  02A9  300F               	movlw	15
  3923  02AA  00A6               	movwf	___lwdiv@divisor
  3924  02AB  3000               	movlw	0
  3925  02AC  00A7               	movwf	___lwdiv@divisor+1
  3926  02AD  0836               	movf	adcConvertMM@adcRAW+1,w
  3927  02AE  00A1               	movwf	___wmul@multiplier+1
  3928  02AF  0835               	movf	adcConvertMM@adcRAW,w
  3929  02B0  00A0               	movwf	___wmul@multiplier
  3930  02B1  3064               	movlw	100
  3931  02B2  00A2               	movwf	___wmul@multiplicand
  3932  02B3  3000               	movlw	0
  3933  02B4  00A3               	movwf	___wmul@multiplicand+1
  3934  02B5  120A  158A  263E  120A  118A  	fcall	___wmul
  3935  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  3936  02BB  1303               	bcf	3,6	;RP1=0, select bank0
  3937  02BC  0920               	comf	?___wmul,w
  3938  02BD  00B7               	movwf	??_adcConvertMM
  3939  02BE  0921               	comf	?___wmul+1,w
  3940  02BF  00B8               	movwf	??_adcConvertMM+1
  3941  02C0  0AB7               	incf	??_adcConvertMM,f
  3942  02C1  1903               	skipnz
  3943  02C2  0AB8               	incf	??_adcConvertMM+1,f
  3944  02C3  0837               	movf	??_adcConvertMM,w
  3945  02C4  3E40               	addlw	64
  3946  02C5  00A8               	movwf	___lwdiv@dividend
  3947  02C6  0838               	movf	??_adcConvertMM+1,w
  3948  02C7  1803               	skipnc
  3949  02C8  3E01               	addlw	1
  3950  02C9  3E38               	addlw	56
  3951  02CA  00A9               	movwf	___lwdiv@dividend+1
  3952  02CB  120A  158A  26D1  120A  118A  	fcall	___lwdiv
  3953  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  3954  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  3955  02D2  0826               	movf	?___lwdiv,w
  3956  02D3  3E20               	addlw	32
  3957  02D4  1683               	bsf	3,5	;RP0=1, select bank1
  3958  02D5  1303               	bcf	3,6	;RP1=0, select bank1
  3959  02D6  00A0               	movwf	_Distance^(0+128)	;volatile
  3960  02D7  1283               	bcf	3,5	;RP0=0, select bank0
  3961  02D8  1303               	bcf	3,6	;RP1=0, select bank0
  3962  02D9  0827               	movf	?___lwdiv+1,w
  3963  02DA  1803               	skipnc
  3964  02DB  3E01               	addlw	1
  3965  02DC  3E03               	addlw	3
  3966  02DD  1683               	bsf	3,5	;RP0=1, select bank1
  3967  02DE  1303               	bcf	3,6	;RP1=0, select bank1
  3968  02DF  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  3969  02E0                     l1882:	
  3970                           
  3971                           ;ADC.c: 85: if (adcRAW < 129 && adcRAW >= 110)
  3972  02E0  3000               	movlw	0
  3973  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  3974  02E2  0236               	subwf	adcConvertMM@adcRAW+1,w
  3975  02E3  3081               	movlw	129
  3976  02E4  1903               	skipnz
  3977  02E5  0235               	subwf	adcConvertMM@adcRAW,w
  3978  02E6  1803               	skipnc
  3979  02E7  2B26               	goto	l1888
  3980  02E8  3000               	movlw	0
  3981  02E9  0236               	subwf	adcConvertMM@adcRAW+1,w
  3982  02EA  306E               	movlw	110
  3983  02EB  1903               	skipnz
  3984  02EC  0235               	subwf	adcConvertMM@adcRAW,w
  3985  02ED  1C03               	skipc
  3986  02EE  2B26               	goto	l1888
  3987                           
  3988                           ;ADC.c: 86: Distance = (((12900 - adcRAW*100)/19) + 900 + 50);
  3989  02EF  3013               	movlw	19
  3990  02F0  00A6               	movwf	___lwdiv@divisor
  3991  02F1  3000               	movlw	0
  3992  02F2  00A7               	movwf	___lwdiv@divisor+1
  3993  02F3  0836               	movf	adcConvertMM@adcRAW+1,w
  3994  02F4  00A1               	movwf	___wmul@multiplier+1
  3995  02F5  0835               	movf	adcConvertMM@adcRAW,w
  3996  02F6  00A0               	movwf	___wmul@multiplier
  3997  02F7  3064               	movlw	100
  3998  02F8  00A2               	movwf	___wmul@multiplicand
  3999  02F9  3000               	movlw	0
  4000  02FA  00A3               	movwf	___wmul@multiplicand+1
  4001  02FB  120A  158A  263E  120A  118A  	fcall	___wmul
  4002  0300  1283               	bcf	3,5	;RP0=0, select bank0
  4003  0301  1303               	bcf	3,6	;RP1=0, select bank0
  4004  0302  0920               	comf	?___wmul,w
  4005  0303  00B7               	movwf	??_adcConvertMM
  4006  0304  0921               	comf	?___wmul+1,w
  4007  0305  00B8               	movwf	??_adcConvertMM+1
  4008  0306  0AB7               	incf	??_adcConvertMM,f
  4009  0307  1903               	skipnz
  4010  0308  0AB8               	incf	??_adcConvertMM+1,f
  4011  0309  0837               	movf	??_adcConvertMM,w
  4012  030A  3E64               	addlw	100
  4013  030B  00A8               	movwf	___lwdiv@dividend
  4014  030C  0838               	movf	??_adcConvertMM+1,w
  4015  030D  1803               	skipnc
  4016  030E  3E01               	addlw	1
  4017  030F  3E32               	addlw	50
  4018  0310  00A9               	movwf	___lwdiv@dividend+1
  4019  0311  120A  158A  26D1  120A  118A  	fcall	___lwdiv
  4020  0316  1283               	bcf	3,5	;RP0=0, select bank0
  4021  0317  1303               	bcf	3,6	;RP1=0, select bank0
  4022  0318  0826               	movf	?___lwdiv,w
  4023  0319  3EB6               	addlw	182
  4024  031A  1683               	bsf	3,5	;RP0=1, select bank1
  4025  031B  1303               	bcf	3,6	;RP1=0, select bank1
  4026  031C  00A0               	movwf	_Distance^(0+128)	;volatile
  4027  031D  1283               	bcf	3,5	;RP0=0, select bank0
  4028  031E  1303               	bcf	3,6	;RP1=0, select bank0
  4029  031F  0827               	movf	?___lwdiv+1,w
  4030  0320  1803               	skipnc
  4031  0321  3E01               	addlw	1
  4032  0322  3E03               	addlw	3
  4033  0323  1683               	bsf	3,5	;RP0=1, select bank1
  4034  0324  1303               	bcf	3,6	;RP1=0, select bank1
  4035  0325  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  4036  0326                     l1888:	
  4037                           
  4038                           ;ADC.c: 88: if (adcRAW < 110 && adcRAW >= 98)
  4039  0326  3000               	movlw	0
  4040  0327  1283               	bcf	3,5	;RP0=0, select bank0
  4041  0328  0236               	subwf	adcConvertMM@adcRAW+1,w
  4042  0329  306E               	movlw	110
  4043  032A  1903               	skipnz
  4044  032B  0235               	subwf	adcConvertMM@adcRAW,w
  4045  032C  1803               	skipnc
  4046  032D  2B6C               	goto	l1894
  4047  032E  3000               	movlw	0
  4048  032F  0236               	subwf	adcConvertMM@adcRAW+1,w
  4049  0330  3062               	movlw	98
  4050  0331  1903               	skipnz
  4051  0332  0235               	subwf	adcConvertMM@adcRAW,w
  4052  0333  1C03               	skipc
  4053  0334  2B6C               	goto	l1894
  4054                           
  4055                           ;ADC.c: 89: Distance = (((11000 - adcRAW*100)/12) + 1000 + 100);
  4056  0335  300C               	movlw	12
  4057  0336  00A6               	movwf	___lwdiv@divisor
  4058  0337  3000               	movlw	0
  4059  0338  00A7               	movwf	___lwdiv@divisor+1
  4060  0339  0836               	movf	adcConvertMM@adcRAW+1,w
  4061  033A  00A1               	movwf	___wmul@multiplier+1
  4062  033B  0835               	movf	adcConvertMM@adcRAW,w
  4063  033C  00A0               	movwf	___wmul@multiplier
  4064  033D  3064               	movlw	100
  4065  033E  00A2               	movwf	___wmul@multiplicand
  4066  033F  3000               	movlw	0
  4067  0340  00A3               	movwf	___wmul@multiplicand+1
  4068  0341  120A  158A  263E  120A  118A  	fcall	___wmul
  4069  0346  1283               	bcf	3,5	;RP0=0, select bank0
  4070  0347  1303               	bcf	3,6	;RP1=0, select bank0
  4071  0348  0920               	comf	?___wmul,w
  4072  0349  00B7               	movwf	??_adcConvertMM
  4073  034A  0921               	comf	?___wmul+1,w
  4074  034B  00B8               	movwf	??_adcConvertMM+1
  4075  034C  0AB7               	incf	??_adcConvertMM,f
  4076  034D  1903               	skipnz
  4077  034E  0AB8               	incf	??_adcConvertMM+1,f
  4078  034F  0837               	movf	??_adcConvertMM,w
  4079  0350  3EF8               	addlw	248
  4080  0351  00A8               	movwf	___lwdiv@dividend
  4081  0352  0838               	movf	??_adcConvertMM+1,w
  4082  0353  1803               	skipnc
  4083  0354  3E01               	addlw	1
  4084  0355  3E2A               	addlw	42
  4085  0356  00A9               	movwf	___lwdiv@dividend+1
  4086  0357  120A  158A  26D1  120A  118A  	fcall	___lwdiv
  4087  035C  1283               	bcf	3,5	;RP0=0, select bank0
  4088  035D  1303               	bcf	3,6	;RP1=0, select bank0
  4089  035E  0826               	movf	?___lwdiv,w
  4090  035F  3E4C               	addlw	76
  4091  0360  1683               	bsf	3,5	;RP0=1, select bank1
  4092  0361  1303               	bcf	3,6	;RP1=0, select bank1
  4093  0362  00A0               	movwf	_Distance^(0+128)	;volatile
  4094  0363  1283               	bcf	3,5	;RP0=0, select bank0
  4095  0364  1303               	bcf	3,6	;RP1=0, select bank0
  4096  0365  0827               	movf	?___lwdiv+1,w
  4097  0366  1803               	skipnc
  4098  0367  3E01               	addlw	1
  4099  0368  3E04               	addlw	4
  4100  0369  1683               	bsf	3,5	;RP0=1, select bank1
  4101  036A  1303               	bcf	3,6	;RP1=0, select bank1
  4102  036B  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  4103  036C                     l1894:	
  4104                           
  4105                           ;ADC.c: 91: if (adcRAW < 98 && adcRAW >= 90)
  4106  036C  3000               	movlw	0
  4107  036D  1283               	bcf	3,5	;RP0=0, select bank0
  4108  036E  0236               	subwf	adcConvertMM@adcRAW+1,w
  4109  036F  3062               	movlw	98
  4110  0370  1903               	skipnz
  4111  0371  0235               	subwf	adcConvertMM@adcRAW,w
  4112  0372  1803               	skipnc
  4113  0373  2BB0               	goto	l1900
  4114  0374  3000               	movlw	0
  4115  0375  0236               	subwf	adcConvertMM@adcRAW+1,w
  4116  0376  305A               	movlw	90
  4117  0377  1903               	skipnz
  4118  0378  0235               	subwf	adcConvertMM@adcRAW,w
  4119  0379  1C03               	skipc
  4120  037A  2BB0               	goto	l1900
  4121                           
  4122                           ;ADC.c: 92: Distance = (((9800 - adcRAW*100)/8) + 1100 + 150);
  4123  037B  0836               	movf	adcConvertMM@adcRAW+1,w
  4124  037C  00A1               	movwf	___wmul@multiplier+1
  4125  037D  0835               	movf	adcConvertMM@adcRAW,w
  4126  037E  00A0               	movwf	___wmul@multiplier
  4127  037F  3064               	movlw	100
  4128  0380  00A2               	movwf	___wmul@multiplicand
  4129  0381  3000               	movlw	0
  4130  0382  00A3               	movwf	___wmul@multiplicand+1
  4131  0383  120A  158A  263E  120A  118A  	fcall	___wmul
  4132  0388  1283               	bcf	3,5	;RP0=0, select bank0
  4133  0389  1303               	bcf	3,6	;RP1=0, select bank0
  4134  038A  0920               	comf	?___wmul,w
  4135  038B  00B7               	movwf	??_adcConvertMM
  4136  038C  0921               	comf	?___wmul+1,w
  4137  038D  00B8               	movwf	??_adcConvertMM+1
  4138  038E  0AB7               	incf	??_adcConvertMM,f
  4139  038F  1903               	skipnz
  4140  0390  0AB8               	incf	??_adcConvertMM+1,f
  4141  0391  0837               	movf	??_adcConvertMM,w
  4142  0392  3E48               	addlw	72
  4143  0393  00B9               	movwf	??_adcConvertMM+2
  4144  0394  0838               	movf	??_adcConvertMM+1,w
  4145  0395  1803               	skipnc
  4146  0396  3E01               	addlw	1
  4147  0397  3E26               	addlw	38
  4148  0398  00BA               	movwf	??_adcConvertMM+3
  4149  0399  1003               	clrc
  4150  039A  0CBA               	rrf	??_adcConvertMM+3,f
  4151  039B  0CB9               	rrf	??_adcConvertMM+2,f
  4152  039C  1003               	clrc
  4153  039D  0CBA               	rrf	??_adcConvertMM+3,f
  4154  039E  0CB9               	rrf	??_adcConvertMM+2,f
  4155  039F  1003               	clrc
  4156  03A0  0CBA               	rrf	??_adcConvertMM+3,f
  4157  03A1  0CB9               	rrf	??_adcConvertMM+2,f
  4158  03A2  0839               	movf	??_adcConvertMM+2,w
  4159  03A3  3EE2               	addlw	226
  4160  03A4  1683               	bsf	3,5	;RP0=1, select bank1
  4161  03A5  1303               	bcf	3,6	;RP1=0, select bank1
  4162  03A6  00A0               	movwf	_Distance^(0+128)	;volatile
  4163  03A7  1283               	bcf	3,5	;RP0=0, select bank0
  4164  03A8  1303               	bcf	3,6	;RP1=0, select bank0
  4165  03A9  083A               	movf	??_adcConvertMM+3,w
  4166  03AA  1803               	skipnc
  4167  03AB  3E01               	addlw	1
  4168  03AC  3E04               	addlw	4
  4169  03AD  1683               	bsf	3,5	;RP0=1, select bank1
  4170  03AE  1303               	bcf	3,6	;RP1=0, select bank1
  4171  03AF  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  4172  03B0                     l1900:	
  4173                           
  4174                           ;ADC.c: 94: if(adcRAW < 90 || adcRAW >= 517)
  4175  03B0  3000               	movlw	0
  4176  03B1  1283               	bcf	3,5	;RP0=0, select bank0
  4177  03B2  0236               	subwf	adcConvertMM@adcRAW+1,w
  4178  03B3  305A               	movlw	90
  4179  03B4  1903               	skipnz
  4180  03B5  0235               	subwf	adcConvertMM@adcRAW,w
  4181  03B6  1C03               	skipc
  4182  03B7  2BBF               	goto	l1904
  4183  03B8  3002               	movlw	2
  4184  03B9  0236               	subwf	adcConvertMM@adcRAW+1,w
  4185  03BA  3005               	movlw	5
  4186  03BB  1903               	skipnz
  4187  03BC  0235               	subwf	adcConvertMM@adcRAW,w
  4188  03BD  1C03               	skipc
  4189  03BE  0008               	return
  4190  03BF                     l1904:	
  4191                           
  4192                           ;ADC.c: 95: Distance = 0;
  4193  03BF  1683               	bsf	3,5	;RP0=1, select bank1
  4194  03C0  1303               	bcf	3,6	;RP1=0, select bank1
  4195  03C1  01A0               	clrf	_Distance^(0+128)	;volatile
  4196  03C2  01A1               	clrf	(_Distance+1)^(0+128)	;volatile
  4197  03C3  0008               	return
  4198  03C4                     __end_of_adcConvertMM:	
  4199                           ;ADC.c: 97: return(Distance);
  4200                           ;	Return value of _adcConvertMM is never used
  4201                           
  4202                           
  4203                           	psect	text17
  4204  0E3E                     __ptext17:	
  4205 ;; *************** function ___wmul *****************
  4206 ;; Defined at:
  4207 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  4208 ;; Parameters:    Size  Location     Type
  4209 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4210 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4211 ;; Auto vars:     Size  Location     Type
  4212 ;;  product         2    4[BANK0 ] unsigned int 
  4213 ;; Return value:  Size  Location     Type
  4214 ;;                  2    0[BANK0 ] unsigned int 
  4215 ;; Registers used:
  4216 ;;		wreg, status,2, status,0
  4217 ;; Tracked objects:
  4218 ;;		On entry : 0/0
  4219 ;;		On exit  : 0/0
  4220 ;;		Unchanged: 0/0
  4221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4222 ;;      Params:         0       4       0       0       0
  4223 ;;      Locals:         0       2       0       0       0
  4224 ;;      Temps:          0       0       0       0       0
  4225 ;;      Totals:         0       6       0       0       0
  4226 ;;Total ram usage:        6 bytes
  4227 ;; Hardware stack levels used:    1
  4228 ;; Hardware stack levels required when called:    2
  4229 ;; This function calls:
  4230 ;;		Nothing
  4231 ;; This function is called by:
  4232 ;;		_adcConvertMM
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           
  4237                           ;psect for function ___wmul
  4238  0E3E                     ___wmul:	
  4239                           
  4240                           ;incstack = 0
  4241                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4242  0E3E  1283               	bcf	3,5	;RP0=0, select bank0
  4243  0E3F  1303               	bcf	3,6	;RP1=0, select bank0
  4244  0E40  01A4               	clrf	___wmul@product
  4245  0E41  01A5               	clrf	___wmul@product+1
  4246  0E42                     l1692:	
  4247  0E42  1C20               	btfss	___wmul@multiplier,0
  4248  0E43  2E4A               	goto	l626
  4249  0E44  0822               	movf	___wmul@multiplicand,w
  4250  0E45  07A4               	addwf	___wmul@product,f
  4251  0E46  1803               	skipnc
  4252  0E47  0AA5               	incf	___wmul@product+1,f
  4253  0E48  0823               	movf	___wmul@multiplicand+1,w
  4254  0E49  07A5               	addwf	___wmul@product+1,f
  4255  0E4A                     l626:	
  4256  0E4A  3001               	movlw	1
  4257  0E4B                     u1235:	
  4258  0E4B  1003               	clrc
  4259  0E4C  0DA2               	rlf	___wmul@multiplicand,f
  4260  0E4D  0DA3               	rlf	___wmul@multiplicand+1,f
  4261  0E4E  3EFF               	addlw	-1
  4262  0E4F  1D03               	skipz
  4263  0E50  2E4B               	goto	u1235
  4264  0E51  3001               	movlw	1
  4265  0E52                     u1245:	
  4266  0E52  1003               	clrc
  4267  0E53  0CA1               	rrf	___wmul@multiplier+1,f
  4268  0E54  0CA0               	rrf	___wmul@multiplier,f
  4269  0E55  3EFF               	addlw	-1
  4270  0E56  1D03               	skipz
  4271  0E57  2E52               	goto	u1245
  4272  0E58  0820               	movf	___wmul@multiplier,w
  4273  0E59  0421               	iorwf	___wmul@multiplier+1,w
  4274  0E5A  1D03               	btfss	3,2
  4275  0E5B  2E42               	goto	l1692
  4276  0E5C  0825               	movf	___wmul@product+1,w
  4277  0E5D  00A1               	movwf	?___wmul+1
  4278  0E5E  0824               	movf	___wmul@product,w
  4279  0E5F  00A0               	movwf	?___wmul
  4280  0E60  0008               	return
  4281  0E61                     __end_of___wmul:	
  4282                           
  4283                           	psect	text18
  4284  0ED1                     __ptext18:	
  4285 ;; *************** function ___lwdiv *****************
  4286 ;; Defined at:
  4287 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  4288 ;; Parameters:    Size  Location     Type
  4289 ;;  divisor         2    6[BANK0 ] unsigned int 
  4290 ;;  dividend        2    8[BANK0 ] unsigned int 
  4291 ;; Auto vars:     Size  Location     Type
  4292 ;;  quotient        2   11[BANK0 ] unsigned int 
  4293 ;;  counter         1   13[BANK0 ] unsigned char 
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  2    6[BANK0 ] unsigned int 
  4296 ;; Registers used:
  4297 ;;		wreg, status,2, status,0
  4298 ;; Tracked objects:
  4299 ;;		On entry : 0/0
  4300 ;;		On exit  : 0/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4303 ;;      Params:         0       4       0       0       0
  4304 ;;      Locals:         0       3       0       0       0
  4305 ;;      Temps:          0       1       0       0       0
  4306 ;;      Totals:         0       8       0       0       0
  4307 ;;Total ram usage:        8 bytes
  4308 ;; Hardware stack levels used:    1
  4309 ;; Hardware stack levels required when called:    2
  4310 ;; This function calls:
  4311 ;;		Nothing
  4312 ;; This function is called by:
  4313 ;;		_adcConvertMM
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           
  4318                           ;psect for function ___lwdiv
  4319  0ED1                     ___lwdiv:	
  4320                           
  4321                           ;incstack = 0
  4322                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4323  0ED1  1283               	bcf	3,5	;RP0=0, select bank0
  4324  0ED2  1303               	bcf	3,6	;RP1=0, select bank0
  4325  0ED3  01AB               	clrf	___lwdiv@quotient
  4326  0ED4  01AC               	clrf	___lwdiv@quotient+1
  4327  0ED5  0826               	movf	___lwdiv@divisor,w
  4328  0ED6  0427               	iorwf	___lwdiv@divisor+1,w
  4329  0ED7  1903               	btfsc	3,2
  4330  0ED8  2F0A               	goto	l1766
  4331  0ED9  01AD               	clrf	___lwdiv@counter
  4332  0EDA  0AAD               	incf	___lwdiv@counter,f
  4333  0EDB                     l1754:	
  4334  0EDB  1BA7               	btfsc	___lwdiv@divisor+1,7
  4335  0EDC  2EE9               	goto	l1756
  4336  0EDD  3001               	movlw	1
  4337  0EDE                     u1375:	
  4338  0EDE  1003               	clrc
  4339  0EDF  0DA6               	rlf	___lwdiv@divisor,f
  4340  0EE0  0DA7               	rlf	___lwdiv@divisor+1,f
  4341  0EE1  3EFF               	addlw	-1
  4342  0EE2  1D03               	skipz
  4343  0EE3  2EDE               	goto	u1375
  4344  0EE4  3001               	movlw	1
  4345  0EE5  00AA               	movwf	??___lwdiv
  4346  0EE6  082A               	movf	??___lwdiv,w
  4347  0EE7  07AD               	addwf	___lwdiv@counter,f
  4348  0EE8  2EDB               	goto	l1754
  4349  0EE9                     l1756:	
  4350  0EE9  3001               	movlw	1
  4351  0EEA                     u1395:	
  4352  0EEA  1003               	clrc
  4353  0EEB  0DAB               	rlf	___lwdiv@quotient,f
  4354  0EEC  0DAC               	rlf	___lwdiv@quotient+1,f
  4355  0EED  3EFF               	addlw	-1
  4356  0EEE  1D03               	skipz
  4357  0EEF  2EEA               	goto	u1395
  4358  0EF0  0827               	movf	___lwdiv@divisor+1,w
  4359  0EF1  0229               	subwf	___lwdiv@dividend+1,w
  4360  0EF2  1D03               	skipz
  4361  0EF3  2EF6               	goto	u1405
  4362  0EF4  0826               	movf	___lwdiv@divisor,w
  4363  0EF5  0228               	subwf	___lwdiv@dividend,w
  4364  0EF6                     u1405:	
  4365  0EF6  1C03               	skipc
  4366  0EF7  2EFF               	goto	l1762
  4367  0EF8  0826               	movf	___lwdiv@divisor,w
  4368  0EF9  02A8               	subwf	___lwdiv@dividend,f
  4369  0EFA  0827               	movf	___lwdiv@divisor+1,w
  4370  0EFB  1C03               	skipc
  4371  0EFC  03A9               	decf	___lwdiv@dividend+1,f
  4372  0EFD  02A9               	subwf	___lwdiv@dividend+1,f
  4373  0EFE  142B               	bsf	___lwdiv@quotient,0
  4374  0EFF                     l1762:	
  4375  0EFF  3001               	movlw	1
  4376  0F00                     u1415:	
  4377  0F00  1003               	clrc
  4378  0F01  0CA7               	rrf	___lwdiv@divisor+1,f
  4379  0F02  0CA6               	rrf	___lwdiv@divisor,f
  4380  0F03  3EFF               	addlw	-1
  4381  0F04  1D03               	skipz
  4382  0F05  2F00               	goto	u1415
  4383  0F06  3001               	movlw	1
  4384  0F07  02AD               	subwf	___lwdiv@counter,f
  4385  0F08  1D03               	btfss	3,2
  4386  0F09  2EE9               	goto	l1756
  4387  0F0A                     l1766:	
  4388  0F0A  082C               	movf	___lwdiv@quotient+1,w
  4389  0F0B  00A7               	movwf	?___lwdiv+1
  4390  0F0C  082B               	movf	___lwdiv@quotient,w
  4391  0F0D  00A6               	movwf	?___lwdiv
  4392  0F0E  0008               	return
  4393  0F0F                     __end_of___lwdiv:	
  4394                           
  4395                           	psect	text19
  4396  06B3                     __ptext19:	
  4397 ;; *************** function ___aldiv *****************
  4398 ;; Defined at:
  4399 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;  divisor         4    6[BANK0 ] long 
  4402 ;;  dividend        4   10[BANK0 ] long 
  4403 ;; Auto vars:     Size  Location     Type
  4404 ;;  quotient        4   17[BANK0 ] long 
  4405 ;;  sign            1   16[BANK0 ] unsigned char 
  4406 ;;  counter         1   15[BANK0 ] unsigned char 
  4407 ;; Return value:  Size  Location     Type
  4408 ;;                  4    6[BANK0 ] long 
  4409 ;; Registers used:
  4410 ;;		wreg, status,2, status,0
  4411 ;; Tracked objects:
  4412 ;;		On entry : 0/0
  4413 ;;		On exit  : 0/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4416 ;;      Params:         0       8       0       0       0
  4417 ;;      Locals:         0       6       0       0       0
  4418 ;;      Temps:          0       1       0       0       0
  4419 ;;      Totals:         0      15       0       0       0
  4420 ;;Total ram usage:       15 bytes
  4421 ;; Hardware stack levels used:    1
  4422 ;; Hardware stack levels required when called:    2
  4423 ;; This function calls:
  4424 ;;		Nothing
  4425 ;; This function is called by:
  4426 ;;		_adcConvertMM
  4427 ;; This function uses a non-reentrant model
  4428 ;;
  4429                           
  4430                           
  4431                           ;psect for function ___aldiv
  4432  06B3                     ___aldiv:	
  4433                           
  4434                           ;incstack = 0
  4435                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4436  06B3  1283               	bcf	3,5	;RP0=0, select bank0
  4437  06B4  1303               	bcf	3,6	;RP1=0, select bank0
  4438  06B5  01B0               	clrf	___aldiv@sign
  4439  06B6  1FA9               	btfss	___aldiv@divisor+3,7
  4440  06B7  2EC5               	goto	l681
  4441  06B8  09A6               	comf	___aldiv@divisor,f
  4442  06B9  09A7               	comf	___aldiv@divisor+1,f
  4443  06BA  09A8               	comf	___aldiv@divisor+2,f
  4444  06BB  09A9               	comf	___aldiv@divisor+3,f
  4445  06BC  0AA6               	incf	___aldiv@divisor,f
  4446  06BD  1903               	skipnz
  4447  06BE  0AA7               	incf	___aldiv@divisor+1,f
  4448  06BF  1903               	skipnz
  4449  06C0  0AA8               	incf	___aldiv@divisor+2,f
  4450  06C1  1903               	skipnz
  4451  06C2  0AA9               	incf	___aldiv@divisor+3,f
  4452  06C3  01B0               	clrf	___aldiv@sign
  4453  06C4  0AB0               	incf	___aldiv@sign,f
  4454  06C5                     l681:	
  4455  06C5  1FAD               	btfss	___aldiv@dividend+3,7
  4456  06C6  2ED6               	goto	l1714
  4457  06C7  09AA               	comf	___aldiv@dividend,f
  4458  06C8  09AB               	comf	___aldiv@dividend+1,f
  4459  06C9  09AC               	comf	___aldiv@dividend+2,f
  4460  06CA  09AD               	comf	___aldiv@dividend+3,f
  4461  06CB  0AAA               	incf	___aldiv@dividend,f
  4462  06CC  1903               	skipnz
  4463  06CD  0AAB               	incf	___aldiv@dividend+1,f
  4464  06CE  1903               	skipnz
  4465  06CF  0AAC               	incf	___aldiv@dividend+2,f
  4466  06D0  1903               	skipnz
  4467  06D1  0AAD               	incf	___aldiv@dividend+3,f
  4468  06D2  3001               	movlw	1
  4469  06D3  00AE               	movwf	??___aldiv
  4470  06D4  082E               	movf	??___aldiv,w
  4471  06D5  06B0               	xorwf	___aldiv@sign,f
  4472  06D6                     l1714:	
  4473  06D6  3000               	movlw	0
  4474  06D7  00B4               	movwf	___aldiv@quotient+3
  4475  06D8  3000               	movlw	0
  4476  06D9  00B3               	movwf	___aldiv@quotient+2
  4477  06DA  3000               	movlw	0
  4478  06DB  00B2               	movwf	___aldiv@quotient+1
  4479  06DC  3000               	movlw	0
  4480  06DD  00B1               	movwf	___aldiv@quotient
  4481  06DE  0829               	movf	___aldiv@divisor+3,w
  4482  06DF  0428               	iorwf	___aldiv@divisor+2,w
  4483  06E0  0427               	iorwf	___aldiv@divisor+1,w
  4484  06E1  0426               	iorwf	___aldiv@divisor,w
  4485  06E2  1903               	skipnz
  4486  06E3  2F2B               	goto	l1736
  4487  06E4  01AF               	clrf	___aldiv@counter
  4488  06E5  0AAF               	incf	___aldiv@counter,f
  4489  06E6                     l1722:	
  4490  06E6  1BA9               	btfsc	___aldiv@divisor+3,7
  4491  06E7  2EF6               	goto	l1724
  4492  06E8  3001               	movlw	1
  4493  06E9  00AE               	movwf	??___aldiv
  4494  06EA                     u1295:	
  4495  06EA  1003               	clrc
  4496  06EB  0DA6               	rlf	___aldiv@divisor,f
  4497  06EC  0DA7               	rlf	___aldiv@divisor+1,f
  4498  06ED  0DA8               	rlf	___aldiv@divisor+2,f
  4499  06EE  0DA9               	rlf	___aldiv@divisor+3,f
  4500  06EF  0BAE               	decfsz	??___aldiv,f
  4501  06F0  2EEA               	goto	u1295
  4502  06F1  3001               	movlw	1
  4503  06F2  00AE               	movwf	??___aldiv
  4504  06F3  082E               	movf	??___aldiv,w
  4505  06F4  07AF               	addwf	___aldiv@counter,f
  4506  06F5  2EE6               	goto	l1722
  4507  06F6                     l1724:	
  4508  06F6  3001               	movlw	1
  4509  06F7  00AE               	movwf	??___aldiv
  4510  06F8                     u1315:	
  4511  06F8  1003               	clrc
  4512  06F9  0DB1               	rlf	___aldiv@quotient,f
  4513  06FA  0DB2               	rlf	___aldiv@quotient+1,f
  4514  06FB  0DB3               	rlf	___aldiv@quotient+2,f
  4515  06FC  0DB4               	rlf	___aldiv@quotient+3,f
  4516  06FD  0BAE               	decfsz	??___aldiv,f
  4517  06FE  2EF8               	goto	u1315
  4518  06FF  0829               	movf	___aldiv@divisor+3,w
  4519  0700  022D               	subwf	___aldiv@dividend+3,w
  4520  0701  1D03               	skipz
  4521  0702  2F0D               	goto	u1325
  4522  0703  0828               	movf	___aldiv@divisor+2,w
  4523  0704  022C               	subwf	___aldiv@dividend+2,w
  4524  0705  1D03               	skipz
  4525  0706  2F0D               	goto	u1325
  4526  0707  0827               	movf	___aldiv@divisor+1,w
  4527  0708  022B               	subwf	___aldiv@dividend+1,w
  4528  0709  1D03               	skipz
  4529  070A  2F0D               	goto	u1325
  4530  070B  0826               	movf	___aldiv@divisor,w
  4531  070C  022A               	subwf	___aldiv@dividend,w
  4532  070D                     u1325:	
  4533  070D  1C03               	skipc
  4534  070E  2F1E               	goto	l1732
  4535  070F  0826               	movf	___aldiv@divisor,w
  4536  0710  02AA               	subwf	___aldiv@dividend,f
  4537  0711  0827               	movf	___aldiv@divisor+1,w
  4538  0712  1C03               	skipc
  4539  0713  0F27               	incfsz	___aldiv@divisor+1,w
  4540  0714  02AB               	subwf	___aldiv@dividend+1,f
  4541  0715  0828               	movf	___aldiv@divisor+2,w
  4542  0716  1C03               	skipc
  4543  0717  0F28               	incfsz	___aldiv@divisor+2,w
  4544  0718  02AC               	subwf	___aldiv@dividend+2,f
  4545  0719  0829               	movf	___aldiv@divisor+3,w
  4546  071A  1C03               	skipc
  4547  071B  0F29               	incfsz	___aldiv@divisor+3,w
  4548  071C  02AD               	subwf	___aldiv@dividend+3,f
  4549  071D  1431               	bsf	___aldiv@quotient,0
  4550  071E                     l1732:	
  4551  071E  3001               	movlw	1
  4552  071F                     u1335:	
  4553  071F  1003               	clrc
  4554  0720  0CA9               	rrf	___aldiv@divisor+3,f
  4555  0721  0CA8               	rrf	___aldiv@divisor+2,f
  4556  0722  0CA7               	rrf	___aldiv@divisor+1,f
  4557  0723  0CA6               	rrf	___aldiv@divisor,f
  4558  0724  3EFF               	addlw	-1
  4559  0725  1D03               	skipz
  4560  0726  2F1F               	goto	u1335
  4561  0727  3001               	movlw	1
  4562  0728  02AF               	subwf	___aldiv@counter,f
  4563  0729  1D03               	btfss	3,2
  4564  072A  2EF6               	goto	l1724
  4565  072B                     l1736:	
  4566  072B  0830               	movf	___aldiv@sign,w
  4567  072C  1903               	btfsc	3,2
  4568  072D  2F39               	goto	l1740
  4569  072E  09B1               	comf	___aldiv@quotient,f
  4570  072F  09B2               	comf	___aldiv@quotient+1,f
  4571  0730  09B3               	comf	___aldiv@quotient+2,f
  4572  0731  09B4               	comf	___aldiv@quotient+3,f
  4573  0732  0AB1               	incf	___aldiv@quotient,f
  4574  0733  1903               	skipnz
  4575  0734  0AB2               	incf	___aldiv@quotient+1,f
  4576  0735  1903               	skipnz
  4577  0736  0AB3               	incf	___aldiv@quotient+2,f
  4578  0737  1903               	skipnz
  4579  0738  0AB4               	incf	___aldiv@quotient+3,f
  4580  0739                     l1740:	
  4581  0739  0834               	movf	___aldiv@quotient+3,w
  4582  073A  00A9               	movwf	?___aldiv+3
  4583  073B  0833               	movf	___aldiv@quotient+2,w
  4584  073C  00A8               	movwf	?___aldiv+2
  4585  073D  0832               	movf	___aldiv@quotient+1,w
  4586  073E  00A7               	movwf	?___aldiv+1
  4587  073F  0831               	movf	___aldiv@quotient,w
  4588  0740  00A6               	movwf	?___aldiv
  4589  0741  0008               	return
  4590  0742                     __end_of___aldiv:	
  4591                           
  4592                           	psect	text20
  4593  0E93                     __ptext20:	
  4594 ;; *************** function _getSensorData *****************
  4595 ;; Defined at:
  4596 ;;		line 85 in file "ser.c"
  4597 ;; Parameters:    Size  Location     Type
  4598 ;;  packetID        1    wreg     unsigned char 
  4599 ;;  bytes           1    2[BANK0 ] unsigned char 
  4600 ;; Auto vars:     Size  Location     Type
  4601 ;;  packetID        1    8[BANK0 ] unsigned char 
  4602 ;;  sensor          2    6[BANK0 ] int 
  4603 ;; Return value:  Size  Location     Type
  4604 ;;                  2    2[BANK0 ] int 
  4605 ;; Registers used:
  4606 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4607 ;; Tracked objects:
  4608 ;;		On entry : 0/0
  4609 ;;		On exit  : 0/0
  4610 ;;		Unchanged: 0/0
  4611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4612 ;;      Params:         0       2       0       0       0
  4613 ;;      Locals:         0       3       0       0       0
  4614 ;;      Temps:          0       2       0       0       0
  4615 ;;      Totals:         0       7       0       0       0
  4616 ;;Total ram usage:        7 bytes
  4617 ;; Hardware stack levels used:    1
  4618 ;; Hardware stack levels required when called:    3
  4619 ;; This function calls:
  4620 ;;		_ser_getch
  4621 ;;		_ser_putch
  4622 ;; This function is called by:
  4623 ;;		_main
  4624 ;; This function uses a non-reentrant model
  4625 ;;
  4626                           
  4627                           
  4628                           ;psect for function _getSensorData
  4629  0E93                     _getSensorData:	
  4630                           
  4631                           ;incstack = 0
  4632                           ; Regs used in _getSensorData: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4633                           ;getSensorData@packetID stored from wreg
  4634  0E93  1283               	bcf	3,5	;RP0=0, select bank0
  4635  0E94  1303               	bcf	3,6	;RP1=0, select bank0
  4636  0E95  00A8               	movwf	getSensorData@packetID
  4637                           
  4638                           ;ser.c: 86: ser_putch(142);
  4639  0E96  308E               	movlw	142
  4640  0E97  120A  158A  257F  120A  158A  	fcall	_ser_putch
  4641                           
  4642                           ;ser.c: 87: ser_putch(packetID);
  4643  0E9C  1283               	bcf	3,5	;RP0=0, select bank0
  4644  0E9D  1303               	bcf	3,6	;RP1=0, select bank0
  4645  0E9E  0828               	movf	getSensorData@packetID,w
  4646  0E9F  120A  158A  257F  120A  158A  	fcall	_ser_putch
  4647                           
  4648                           ;ser.c: 89: if (bytes == 2)
  4649  0EA4  3002               	movlw	2
  4650  0EA5  1283               	bcf	3,5	;RP0=0, select bank0
  4651  0EA6  1303               	bcf	3,6	;RP1=0, select bank0
  4652  0EA7  0622               	xorwf	getSensorData@bytes,w
  4653  0EA8  1D03               	btfss	3,2
  4654  0EA9  2EB5               	goto	l2116
  4655                           
  4656                           ;ser.c: 90: highByte = ser_getch();
  4657  0EAA  120A  158A  2575  120A  158A  	fcall	_ser_getch
  4658  0EAF  1283               	bcf	3,5	;RP0=0, select bank0
  4659  0EB0  1303               	bcf	3,6	;RP1=0, select bank0
  4660  0EB1  00A4               	movwf	??_getSensorData
  4661  0EB2  0824               	movf	??_getSensorData,w
  4662  0EB3  00EC               	movwf	_highByte
  4663  0EB4  2EB6               	goto	l2118
  4664  0EB5                     l2116:	
  4665                           
  4666                           ;ser.c: 91: else
  4667                           ;ser.c: 92: highByte = 0;
  4668  0EB5  01EC               	clrf	_highByte
  4669  0EB6                     l2118:	
  4670                           
  4671                           ;ser.c: 94: lowByte = ser_getch();
  4672  0EB6  120A  158A  2575   	fcall	_ser_getch
  4673  0EB9  1283               	bcf	3,5	;RP0=0, select bank0
  4674  0EBA  1303               	bcf	3,6	;RP1=0, select bank0
  4675  0EBB  00A4               	movwf	??_getSensorData
  4676  0EBC  0824               	movf	??_getSensorData,w
  4677  0EBD  00E7               	movwf	_lowByte
  4678                           
  4679                           ;ser.c: 96: signed int sensor = (256*highByte + lowByte);
  4680  0EBE  086C               	movf	_highByte,w
  4681  0EBF  00A4               	movwf	??_getSensorData
  4682  0EC0  01A5               	clrf	??_getSensorData+1
  4683  0EC1  0824               	movf	??_getSensorData,w
  4684  0EC2  00A5               	movwf	??_getSensorData+1
  4685  0EC3  01A4               	clrf	??_getSensorData
  4686  0EC4  0867               	movf	_lowByte,w
  4687  0EC5  0724               	addwf	??_getSensorData,w
  4688  0EC6  00A6               	movwf	getSensorData@sensor
  4689  0EC7  3000               	movlw	0
  4690  0EC8  1803               	skipnc
  4691  0EC9  3001               	movlw	1
  4692  0ECA  0725               	addwf	??_getSensorData+1,w
  4693  0ECB  00A7               	movwf	getSensorData@sensor+1
  4694                           
  4695                           ;ser.c: 98: return sensor;
  4696  0ECC  0827               	movf	getSensorData@sensor+1,w
  4697  0ECD  00A3               	movwf	?_getSensorData+1
  4698  0ECE  0826               	movf	getSensorData@sensor,w
  4699  0ECF  00A2               	movwf	?_getSensorData
  4700  0ED0  0008               	return
  4701  0ED1                     __end_of_getSensorData:	
  4702                           
  4703                           	psect	text21
  4704  0D7F                     __ptext21:	
  4705 ;; *************** function _ser_putch *****************
  4706 ;; Defined at:
  4707 ;;		line 30 in file "ser.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;  c               1    wreg     unsigned char 
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;  c               1    0[BANK0 ] unsigned char 
  4712 ;; Return value:  Size  Location     Type
  4713 ;;                  1    wreg      void 
  4714 ;; Registers used:
  4715 ;;		wreg
  4716 ;; Tracked objects:
  4717 ;;		On entry : 0/0
  4718 ;;		On exit  : 0/0
  4719 ;;		Unchanged: 0/0
  4720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4721 ;;      Params:         0       0       0       0       0
  4722 ;;      Locals:         0       1       0       0       0
  4723 ;;      Temps:          0       0       0       0       0
  4724 ;;      Totals:         0       1       0       0       0
  4725 ;;Total ram usage:        1 bytes
  4726 ;; Hardware stack levels used:    1
  4727 ;; Hardware stack levels required when called:    2
  4728 ;; This function calls:
  4729 ;;		Nothing
  4730 ;; This function is called by:
  4731 ;;		_main
  4732 ;;		_DriveDirect
  4733 ;;		_getSensorData
  4734 ;;		_Drive
  4735 ;; This function uses a non-reentrant model
  4736 ;;
  4737                           
  4738                           
  4739                           ;psect for function _ser_putch
  4740  0D7F                     _ser_putch:	
  4741                           
  4742                           ;incstack = 0
  4743                           ; Regs used in _ser_putch: [wreg]
  4744                           ;ser_putch@c stored from wreg
  4745  0D7F  1283               	bcf	3,5	;RP0=0, select bank0
  4746  0D80  1303               	bcf	3,6	;RP1=0, select bank0
  4747  0D81  00A0               	movwf	ser_putch@c
  4748  0D82                     l335:	
  4749                           ;ser.c: 31: while(!TRMT);
  4750                           
  4751  0D82  1683               	bsf	3,5	;RP0=1, select bank1
  4752  0D83  1303               	bcf	3,6	;RP1=0, select bank1
  4753  0D84  1C98               	btfss	24,1	;volatile
  4754  0D85  2D82               	goto	l335
  4755                           
  4756                           ;ser.c: 32: TXREG=c;
  4757  0D86  1283               	bcf	3,5	;RP0=0, select bank0
  4758  0D87  1303               	bcf	3,6	;RP1=0, select bank0
  4759  0D88  0820               	movf	ser_putch@c,w
  4760  0D89  0099               	movwf	25	;volatile
  4761  0D8A  0008               	return
  4762  0D8B                     __end_of_ser_putch:	
  4763                           
  4764                           	psect	text22
  4765  0D75                     __ptext22:	
  4766 ;; *************** function _ser_getch *****************
  4767 ;; Defined at:
  4768 ;;		line 35 in file "ser.c"
  4769 ;; Parameters:    Size  Location     Type
  4770 ;;		None
  4771 ;; Auto vars:     Size  Location     Type
  4772 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  4773 ;; Return value:  Size  Location     Type
  4774 ;;                  1    wreg      unsigned char 
  4775 ;; Registers used:
  4776 ;;		wreg
  4777 ;; Tracked objects:
  4778 ;;		On entry : 0/0
  4779 ;;		On exit  : 0/0
  4780 ;;		Unchanged: 0/0
  4781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4782 ;;      Params:         0       0       0       0       0
  4783 ;;      Locals:         0       1       0       0       0
  4784 ;;      Temps:          0       1       0       0       0
  4785 ;;      Totals:         0       2       0       0       0
  4786 ;;Total ram usage:        2 bytes
  4787 ;; Hardware stack levels used:    1
  4788 ;; Hardware stack levels required when called:    2
  4789 ;; This function calls:
  4790 ;;		Nothing
  4791 ;; This function is called by:
  4792 ;;		_getSensorData
  4793 ;; This function uses a non-reentrant model
  4794 ;;
  4795                           
  4796                           
  4797                           ;psect for function _ser_getch
  4798  0D75                     _ser_getch:	
  4799  0D75                     l341:	
  4800                           ;ser.c: 36: while(!RCIF);
  4801                           
  4802                           ;incstack = 0
  4803                           ; Regs used in _ser_getch: [wreg]
  4804                           
  4805  0D75  1283               	bcf	3,5	;RP0=0, select bank0
  4806  0D76  1303               	bcf	3,6	;RP1=0, select bank0
  4807  0D77  1E8C               	btfss	12,5	;volatile
  4808  0D78  2D75               	goto	l341
  4809                           
  4810                           ;ser.c: 37: unsigned char rxbyte = RCREG;
  4811  0D79  081A               	movf	26,w	;volatile
  4812  0D7A  00A0               	movwf	??_ser_getch
  4813  0D7B  0820               	movf	??_ser_getch,w
  4814  0D7C  00A1               	movwf	ser_getch@rxbyte
  4815                           
  4816                           ;ser.c: 38: return rxbyte;
  4817  0D7D  0821               	movf	ser_getch@rxbyte,w
  4818  0D7E  0008               	return
  4819  0D7F                     __end_of_ser_getch:	
  4820                           
  4821                           	psect	text23
  4822  0F0F                     __ptext23:	
  4823 ;; *************** function _isr *****************
  4824 ;; Defined at:
  4825 ;;		line 24 in file "main.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;		None
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;		None
  4830 ;; Return value:  Size  Location     Type
  4831 ;;                  1    wreg      void 
  4832 ;; Registers used:
  4833 ;;		wreg, status,2, status,0, pclath, cstack
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4839 ;;      Params:         0       0       0       0       0
  4840 ;;      Locals:         0       0       0       0       0
  4841 ;;      Temps:          5       0       0       0       0
  4842 ;;      Totals:         5       0       0       0       0
  4843 ;;Total ram usage:        5 bytes
  4844 ;; Hardware stack levels used:    1
  4845 ;; Hardware stack levels required when called:    1
  4846 ;; This function calls:
  4847 ;;		___lwmod
  4848 ;; This function is called by:
  4849 ;;		Interrupt level 1
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           
  4854                           ;psect for function _isr
  4855  0F0F                     _isr:	
  4856                           
  4857                           ;main.c: 26: if(TMR0IF){
  4858  0F0F  1D0B               	btfss	11,2	;volatile
  4859  0F10  2F49               	goto	i1l115
  4860                           
  4861                           ;main.c: 27: TMR0IF = 0;
  4862  0F11  110B               	bcf	11,2	;volatile
  4863                           
  4864                           ;main.c: 28: TMR0 = 100;
  4865  0F12  3064               	movlw	100
  4866  0F13  0081               	movwf	1	;volatile
  4867                           
  4868                           ;main.c: 31: if(time_count % 1 == 0) {
  4869  0F14  3001               	movlw	1
  4870  0F15  1683               	bsf	3,5	;RP0=1, select bank1
  4871  0F16  1303               	bcf	3,6	;RP1=0, select bank1
  4872  0F17  07B2               	addwf	_time_count^(0+128),f	;volatile
  4873  0F18  1803               	skipnc
  4874  0F19  0AB3               	incf	(_time_count+1)^(0+128),f	;volatile
  4875  0F1A  3000               	movlw	0
  4876  0F1B  07B3               	addwf	(_time_count+1)^(0+128),f	;volatile
  4877                           
  4878                           ;main.c: 34: }
  4879                           ;main.c: 36: if(time_count % 1000 == 0){
  4880  0F1C  30E8               	movlw	232
  4881  0F1D  00F0               	movwf	___lwmod@divisor
  4882  0F1E  3003               	movlw	3
  4883  0F1F  00F1               	movwf	___lwmod@divisor+1
  4884  0F20  0833               	movf	(_time_count+1)^(0+128),w	;volatile
  4885  0F21  00F3               	movwf	___lwmod@dividend+1
  4886  0F22  0832               	movf	_time_count^(0+128),w	;volatile
  4887  0F23  00F2               	movwf	___lwmod@dividend
  4888  0F24  120A  158A  2661  120A  158A  	fcall	___lwmod
  4889  0F29  0870               	movf	?___lwmod,w
  4890  0F2A  0471               	iorwf	?___lwmod+1,w
  4891  0F2B  1D03               	btfss	3,2
  4892  0F2C  2F35               	goto	i1l2160
  4893                           
  4894                           ;main.c: 37: RB4 = !RB4;
  4895  0F2D  3010               	movlw	16
  4896  0F2E  1283               	bcf	3,5	;RP0=0, select bank0
  4897  0F2F  1303               	bcf	3,6	;RP1=0, select bank0
  4898  0F30  0686               	xorwf	6,f
  4899                           
  4900                           ;main.c: 39: time_count = 0;
  4901  0F31  1683               	bsf	3,5	;RP0=1, select bank1
  4902  0F32  1303               	bcf	3,6	;RP1=0, select bank1
  4903  0F33  01B2               	clrf	_time_count^(0+128)	;volatile
  4904  0F34  01B3               	clrf	(_time_count+1)^(0+128)	;volatile
  4905  0F35                     i1l2160:	
  4906                           
  4907                           ;main.c: 40: }
  4908                           ;main.c: 42: if (!RB0 == 1)
  4909  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  4910  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  4911  0F37  1806               	btfsc	6,0	;volatile
  4912  0F38  2F3D               	goto	i1l2164
  4913                           
  4914                           ;main.c: 43: PB8Counter++;
  4915  0F39  3001               	movlw	1
  4916  0F3A  00F6               	movwf	??_isr
  4917  0F3B  0876               	movf	??_isr,w
  4918  0F3C  07E1               	addwf	_PB8Counter,f
  4919  0F3D                     i1l2164:	
  4920                           
  4921                           ;main.c: 44: if (!RB1 == 1)
  4922  0F3D  1886               	btfsc	6,1	;volatile
  4923  0F3E  2F43               	goto	i1l2168
  4924                           
  4925                           ;main.c: 45: PB7Counter++;
  4926  0F3F  3001               	movlw	1
  4927  0F40  00F6               	movwf	??_isr
  4928  0F41  0876               	movf	??_isr,w
  4929  0F42  07E0               	addwf	_PB7Counter,f
  4930  0F43                     i1l2168:	
  4931                           
  4932                           ;main.c: 46: if (!RB2 == 1)
  4933  0F43  1906               	btfsc	6,2	;volatile
  4934  0F44  2F49               	goto	i1l115
  4935                           
  4936                           ;main.c: 47: PB6Counter++;
  4937  0F45  3001               	movlw	1
  4938  0F46  00F6               	movwf	??_isr
  4939  0F47  0876               	movf	??_isr,w
  4940  0F48  07DF               	addwf	_PB6Counter,f
  4941  0F49                     i1l115:	
  4942  0F49  087A               	movf	??_isr+4,w
  4943  0F4A  00FF               	movwf	127
  4944  0F4B  0879               	movf	??_isr+3,w
  4945  0F4C  008A               	movwf	10
  4946  0F4D  0878               	movf	??_isr+2,w
  4947  0F4E  0084               	movwf	4
  4948  0F4F  0E77               	swapf	(??_isr+1)^(0+-128),w
  4949  0F50  0083               	movwf	3
  4950  0F51  0EFE               	swapf	126,f
  4951  0F52  0E7E               	swapf	126,w
  4952  0F53  0009               	retfie
  4953  0F54                     __end_of_isr:	
  4954                           
  4955                           	psect	intentry
  4956  0004                     __pintentry:	
  4957                           ;incstack = 0
  4958                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  4959                           
  4960  0004                     interrupt_function:	
  4961  007E                     saved_w	set	btemp
  4962  0004  00FE               	movwf	btemp
  4963  0005  0E03               	swapf	3,w
  4964  0006  00F7               	movwf	??_isr+1
  4965  0007  0804               	movf	4,w
  4966  0008  00F8               	movwf	??_isr+2
  4967  0009  080A               	movf	10,w
  4968  000A  00F9               	movwf	??_isr+3
  4969  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4970  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4971  000D  087F               	movf	btemp+1,w
  4972  000E  00FA               	movwf	??_isr+4
  4973  000F  120A  158A  2F0F   	ljmp	_isr
  4974                           
  4975                           	psect	text24
  4976  0E61                     __ptext24:	
  4977 ;; *************** function ___lwmod *****************
  4978 ;; Defined at:
  4979 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  4980 ;; Parameters:    Size  Location     Type
  4981 ;;  divisor         2    0[COMMON] unsigned int 
  4982 ;;  dividend        2    2[COMMON] unsigned int 
  4983 ;; Auto vars:     Size  Location     Type
  4984 ;;  counter         1    5[COMMON] unsigned char 
  4985 ;; Return value:  Size  Location     Type
  4986 ;;                  2    0[COMMON] unsigned int 
  4987 ;; Registers used:
  4988 ;;		wreg, status,2, status,0
  4989 ;; Tracked objects:
  4990 ;;		On entry : 0/0
  4991 ;;		On exit  : 0/0
  4992 ;;		Unchanged: 0/0
  4993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4994 ;;      Params:         4       0       0       0       0
  4995 ;;      Locals:         1       0       0       0       0
  4996 ;;      Temps:          1       0       0       0       0
  4997 ;;      Totals:         6       0       0       0       0
  4998 ;;Total ram usage:        6 bytes
  4999 ;; Hardware stack levels used:    1
  5000 ;; This function calls:
  5001 ;;		Nothing
  5002 ;; This function is called by:
  5003 ;;		_isr
  5004 ;; This function uses a non-reentrant model
  5005 ;;
  5006                           
  5007                           
  5008                           ;psect for function ___lwmod
  5009  0E61                     ___lwmod:	
  5010                           
  5011                           ;incstack = 0
  5012                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5013  0E61  0870               	movf	___lwmod@divisor,w
  5014  0E62  0471               	iorwf	___lwmod@divisor+1,w
  5015  0E63  1903               	btfsc	3,2
  5016  0E64  2E8E               	goto	i1l2144
  5017  0E65  01F5               	clrf	___lwmod@counter
  5018  0E66  0AF5               	incf	___lwmod@counter,f
  5019  0E67                     i1l2134:	
  5020  0E67  1BF1               	btfsc	___lwmod@divisor+1,7
  5021  0E68  2E75               	goto	i1l2136
  5022  0E69  3001               	movlw	1
  5023  0E6A                     u205_25:	
  5024  0E6A  1003               	clrc
  5025  0E6B  0DF0               	rlf	___lwmod@divisor,f
  5026  0E6C  0DF1               	rlf	___lwmod@divisor+1,f
  5027  0E6D  3EFF               	addlw	-1
  5028  0E6E  1D03               	skipz
  5029  0E6F  2E6A               	goto	u205_25
  5030  0E70  3001               	movlw	1
  5031  0E71  00F4               	movwf	??___lwmod
  5032  0E72  0874               	movf	??___lwmod,w
  5033  0E73  07F5               	addwf	___lwmod@counter,f
  5034  0E74  2E67               	goto	i1l2134
  5035  0E75                     i1l2136:	
  5036  0E75  0871               	movf	___lwmod@divisor+1,w
  5037  0E76  0273               	subwf	___lwmod@dividend+1,w
  5038  0E77  1D03               	skipz
  5039  0E78  2E7B               	goto	u207_25
  5040  0E79  0870               	movf	___lwmod@divisor,w
  5041  0E7A  0272               	subwf	___lwmod@dividend,w
  5042  0E7B                     u207_25:	
  5043  0E7B  1C03               	skipc
  5044  0E7C  2E83               	goto	i1l2140
  5045  0E7D  0870               	movf	___lwmod@divisor,w
  5046  0E7E  02F2               	subwf	___lwmod@dividend,f
  5047  0E7F  0871               	movf	___lwmod@divisor+1,w
  5048  0E80  1C03               	skipc
  5049  0E81  03F3               	decf	___lwmod@dividend+1,f
  5050  0E82  02F3               	subwf	___lwmod@dividend+1,f
  5051  0E83                     i1l2140:	
  5052  0E83  3001               	movlw	1
  5053  0E84                     u208_25:	
  5054  0E84  1003               	clrc
  5055  0E85  0CF1               	rrf	___lwmod@divisor+1,f
  5056  0E86  0CF0               	rrf	___lwmod@divisor,f
  5057  0E87  3EFF               	addlw	-1
  5058  0E88  1D03               	skipz
  5059  0E89  2E84               	goto	u208_25
  5060  0E8A  3001               	movlw	1
  5061  0E8B  02F5               	subwf	___lwmod@counter,f
  5062  0E8C  1D03               	btfss	3,2
  5063  0E8D  2E75               	goto	i1l2136
  5064  0E8E                     i1l2144:	
  5065  0E8E  0873               	movf	___lwmod@dividend+1,w
  5066  0E8F  00F1               	movwf	?___lwmod+1
  5067  0E90  0872               	movf	___lwmod@dividend,w
  5068  0E91  00F0               	movwf	?___lwmod
  5069  0E92  0008               	return
  5070  0E93                     __end_of___lwmod:	
  5071  007E                     btemp	set	126	;btemp
  5072  007E                     wtemp	set	126
  5073  007E                     wtemp0	set	126
  5074  0080                     wtemp1	set	128
  5075  0082                     wtemp2	set	130
  5076  0084                     wtemp3	set	132
  5077  0086                     wtemp4	set	134
  5078  0088                     wtemp5	set	136
  5079  007F                     wtemp6	set	127
  5080  007E                     ttemp	set	126
  5081  007E                     ttemp0	set	126
  5082  0081                     ttemp1	set	129
  5083  0084                     ttemp2	set	132
  5084  0087                     ttemp3	set	135
  5085  007F                     ttemp4	set	127
  5086  007E                     ltemp	set	126
  5087  007E                     ltemp0	set	126
  5088  0082                     ltemp1	set	130
  5089  0086                     ltemp2	set	134
  5090  0080                     ltemp3	set	128


Data Sizes:
    Strings     25
    Constant    0
    Data        2
    BSS         46
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     55      79
    BANK1            80      0      22
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcdWriteString@s	PTR unsigned char  size(1) Largest target is 25
		 -> STR_1(CODE[25]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->___lwmod

Critical Paths under _main in BANK0

    _main->_initWallFollow
    _setupLCD->_lcdWriteControl
    _lcdWriteString->_lcdWriteData
    _DriveDirect->_ser_putch
    _ADCMain->_adcConvertMM
    _lcdWriteToDigitBCD->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl
    _adcConvertMM->___aldiv
    ___lwdiv->___wmul
    ___aldiv->___wmul
    _getSensorData->_ser_getch

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0   11846
                                             33 BANK0     22    22      0
                            _ADCMain
                        _DriveDirect
                      _getSensorData
                     _initWallFollow
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      30
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      22
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initWallFollow                                       2     2      0    5389
                                             31 BANK0      2     2      0
                            _ADCMain
                        _DriveDirect
                     _lcdWriteString
                            _moveCCW
 ---------------------------------------------------------------------------------
 (2) _moveCCW                                              8     6      2     122
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _lcdWriteString                                       2     2      0      94
                                              3 BANK0      2     2      0
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (2) _DriveDirect                                          9     5      4     926
                                              1 BANK0      9     5      4
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _ADCMain                                              0     0      0    4247
                       _adcConvertMM
                             _getADC
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (1) _lcdWriteToDigitBCD                                  12    10      2     599
                                              3 BANK0     12    10      2
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (2) _lcdWriteData                                         3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcdSetCursor                                         1     1      0      45
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getADC                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _adcConvertMM                                        10     8      2    3603
                                             21 BANK0     10     8      2
                            ___aldiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1258
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     904
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             15     7      8     618
                                              6 BANK0     15     7      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _getSensorData                                        7     5      2     377
                                              2 BANK0      7     5      2
                          _ser_getch
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ser_getch                                            2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  5     5      0     265
                                              6 COMMON     5     5      0
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCMain
     _adcConvertMM
       ___aldiv
         ___wmul (ARG)
       ___lwdiv
         ___wmul (ARG)
       ___wmul
     _getADC
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteToDigitBCD
       _lcdWriteData
   _DriveDirect
     _ser_putch
   _getSensorData
     _ser_getch
     _ser_putch
   _initWallFollow
     _ADCMain
       _adcConvertMM
         ___aldiv
           ___wmul (ARG)
         ___lwdiv
           ___wmul (ARG)
         ___wmul
       _getADC
       _lcdSetCursor
         _lcdWriteControl
       _lcdWriteToDigitBCD
         _lcdWriteData
     _DriveDirect
       _ser_putch
     _lcdWriteString
       _lcdWriteData
     _moveCCW
   _lcdSetCursor
     _lcdWriteControl
   _lcdWriteToDigitBCD
     _lcdWriteData
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)
   ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      16       7       27.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     37      4F       5       98.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       E       1      100.0%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      73      12        0.0%
ABS                  0      0      73       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sat Sep 17 14:03:06 2016

               ??_getSensorData 0024                               pc 0002                     __CFG_CP$OFF 0000  
                            _GO 00FA                              fsr 0004             ___wmul@multiplicand 0022  
                           l120 0653                             l128 04FC                             l218 0608  
                           l341 0D75                             l414 0FA1                             l335 0D82  
                           l417 0FDF                             l266 0DA1                             l516 0F5D  
                           l525 0F98                             l626 0E4A                             l681 06C5  
                           _GIE 005F                             _RB0 0030                             _RB1 0031  
                           _RB2 0032                   ??_DriveDirect 0025                             _RB4 0034  
                           _RE0 0048                             _RE1 0049                             _RE2 004A  
                  __CFG_CPD$OFF 0000                             _isr 0F0F                 __end_of_ADCMain 0E1E  
                           fsr0 0004                             indf 0000                    __CFG_FOSC$HS 0000  
                ??_lcdWriteData 0020                    __CFG_LVP$OFF 0000                            l2022 0635  
                          l2008 0E21                            l2032 0666                            l2116 0EB5  
                          l2220 04EF                            l2118 0EB6                            l2038 0680  
                          l2206 0456                            l2224 0512                            l2208 049B  
                          l2218 04AA                            l2252 053D                            l2246 055A  
                          l1800 05D3                            l2256 054B                            l2192 0437  
                          l1722 06E6                            l1714 06D6                            l1802 05DB  
                          l1740 0739                            l1732 071E                            l1724 06F6  
                          l1900 03B0                            l1812 05FB                            l1830 0F81  
                          l1806 05E9                            l1736 072B                            l1904 03BF  
                          l1840 00A6                            l1832 0F8B                            l1920 0FB5  
                          l1762 0EFF                            l1754 0EDB                            l1826 0F6D  
                          l1756 0EE9                            l1692 0E42                            l1852 0182  
                          l1828 0F77                            l1940 0FD8                            l1932 0FCA  
                          l1924 0FBC                            l1916 0FAF                            l1766 0F0A  
                          l1870 0254                            l1846 0114                            l1790 05AF  
                          l1864 020E                            l1936 0FD1                            l1928 0FC3  
                          l1882 02E0                            l1858 01C8                            l1794 05BD  
                          l1970 075F                            l1876 029A                            l1796 05C5  
                          l1788 0599                            l1948 0FFB                            l1894 036C  
                          l1990 07A4                            l1974 0772                            l1888 0326  
                          l1986 0791                            ?_isr 0070                            STR_1 0806  
                          u2005 0690                            u2015 06A0                            u1315 06F8  
                          u1235 0E4B                            u1325 070D                            u1405 0EF6  
                          u1245 0E52                            u2205 0576                            u1335 071F  
                          u1415 0F00                            u2215 057E                            u1530 007E  
                          u1531 007F                            u1532 0084                            u1533 0085  
                          u2165 0461                            u1295 06EA                            u1375 0EDE  
                          u2175 04B5                            u1560 00EC                            u1561 00ED  
                          u1562 00F2                            u1395 0EEA                            u1563 00F3  
                          u2507 0DCA                            u2437 03CC                            u1590 015A  
                          u1591 015B                            u2447 03FB                            u1592 0160  
                          u1593 0161                            u2457 0410                            u1915 0781  
                          u2467 0425                            u2477 0DE3                            u2487 0FE3  
                          u2497 0DB7                            u1875 0FA7                            _PEIE 005E  
                          u1885 074F                            u1965 0633                            u1975 064D  
                          u1985 0664                            u1995 066E                            _RCIF 0065  
                          _TMR0 0001                            _TRMT 04C1                    __CFG_WRT$OFF 0000  
                          _radH 0068                            _radL 0069                            _main 03C4  
                          _loop 00AC                            btemp 007E                            ltemp 007E  
                          start 0012                            ttemp 007E                            wtemp 007E  
                         ??_isr 0076                 __end_of___aldiv 0742                           ?_main 0070  
                 __CFG_WDTE$OFF 0000                 __end_of___lwdiv 0F0F                           i1l115 0F49  
               __end_of___lwmod 0E93                   _totalDistTrav 005B                           _RCREG 001A  
                         _RCSTA 0018                           _SPBRG 0099                           _PORTA 0005  
                         _PORTC 0007                           _PORTD 0008                           _PORTE 0009  
                         _TRISA 0085                           _TRISB 0086                           _TRISC 0087  
                         _TRISD 0088                           _TRISE 0089                           _SSPIF 0063  
                         _TXREG 0019                           _TXSTA 0098      __end_of_lcdWriteToDigitBCD 0622  
                         _count 0065             __end_of_DriveDirect 07CF                 __end_of_moveCCW 1000  
                __pbitbssCOMMON 03E8                  __CFG_BOREN$OFF 0000                           pclath 000A  
                         ltemp0 007E                           ltemp1 0082                           ltemp2 0086  
                         ltemp3 0080                      _LeftSpeedH 005D                      _LeftSpeedL 005E  
                         ttemp0 007E                           ttemp1 0081                           ttemp2 0084  
                         ttemp3 0087                           ttemp4 007F                           status 0003  
                         wtemp0 007E                           wtemp1 0080                           wtemp2 0082  
                         wtemp3 0084                           wtemp4 0086                           wtemp5 0088  
                         wtemp6 007F                 __initialization 0015                    __end_of_main 058B  
                     ??_ADCMain 003F        __size_of_lcdWriteControl 0014                          ??_main 0041  
          __end_of_lcdSetCursor 0D75                ??_lcdWriteString 0023                          _ADCON0 001F  
                        _ADCON1 009F                          _ADRESH 001E                          _ADRESL 009E  
                        i1l2140 0E83                          i1l2134 0E67                          i1l2136 0E75  
                        i1l2144 0E8E                          i1l2160 0F35                          i1l2164 0F3D  
                        i1l2168 0F43                          u205_25 0E6A                          u207_25 0E7B  
                        u208_25 0E84                          _TMR0IE 005D                          _TMR0IF 005A  
                        _SSPCON 0014                          _SSPBUF 0013                  __CFG_PWRTE$OFF 0000  
              _totalangleTurned 00B4                          _adcRAW 0057                       ??___aldiv 002E  
                        ___wmul 0E3E                          _getADC 0F54            __end_of_lcdWriteData 0DBC  
               lcdWriteString@s 0024                       ??___lwdiv 002A                       ??___lwmod 0074  
                        _speedH 007C                          _speedL 006A                          _rxbyte 007B  
                   _DriveDirect 0742                __end_of_ser_init 0D9A                __end_of_setupADC 0DE6  
                     ??_moveCCW 0022                __end_of_setupLCD 07F8                __end_of_setupSPI 0DFE  
                        saved_w 007E                      _adcClosest 006D         __end_of__initialization 0033  
                __pcstackCOMMON 0070                    __pidataBANK0 0D6A                 DriveDirect@data 0026  
             ??_lcdWriteControl 0020         __size_of_initWallFollow 0091                      __pbssBANK0 0057  
                    __pbssBANK1 00A0          main@correctionFactor_L 004C          main@correctionFactor_R 004A  
           lcdSetCursor@address 0023                      __pmaintext 03C4                         ?___wmul 0020  
                       ?_getADC 0070                      __pintentry 0004           __size_of_lcdSetCursor 0009  
                       _ADCMain 0DFE           __end_of_getSensorData 0ED1              __size_of_ser_getch 000A  
            __size_of_ser_putch 000C                     _RightSpeedH 0062                     _RightSpeedL 0063  
                       _SSPSTAT 0094                      __stringtab 0800         DriveDirect@VelocityLeft 0023  
         __size_of_lcdWriteData 0013                    _lcdSetCursor 0D6C              _lcdWriteToDigitBCD 058B  
                     ?_ser_init 0070                       ?_setupADC 0070                       ?_setupLCD 0070  
                     ?_setupSPI 0070                         ___aldiv 06B3                 __size_of___wmul 0023  
               __size_of_getADC 0045                         ___lwdiv 0ED1                         ___lwmod 0E61  
           ?_lcdWriteToDigitBCD 0023                         _degrees 00A8                         __ptext1 0D9A  
                       __ptext2 0DE6                         __ptext3 07CF                         __ptext4 0DD0  
                       __ptext5 0D8B                         __ptext6 0622                         __ptext7 0F99  
                       __ptext8 0E1E                         __ptext9 0742                    __size_of_isr 0045  
                       _lowByte 0067                         _moveCCW 0F99                ___aldiv@dividend 002A  
                       clrloop0 07F9                    _lcdWriteData 0DA9            end_of_initialization 0033  
          ??_lcdWriteToDigitBCD 0025               __end_of_ser_getch 0D7F               __end_of_ser_putch 0D8B  
                    ??_ser_init 0020                 main@ADC_CURRENT 0044                      ??_setupADC 0020  
                    ??_setupLCD 0023                      ??_setupSPI 0020                ___aldiv@quotient 0031  
                    _time_count 00B2                    ?_DriveDirect 0021                  _initWallFollow 0622  
            adcConvertMM@adcRAW 0035                   ?_spi_transfer 0070                 ser_getch@rxbyte 0021  
                 ?_adcConvertMM 0035             DriveDirect@data_248 0028                 _lcdWriteControl 0DBC  
                __end_of___wmul 0E61                  __end_of_getADC 0F99          __end_of_initWallFollow 06B3  
           start_initialization 0015                     __end_of_isr 0F54                  ??_spi_transfer 0020  
       __size_of_lcdWriteString 0020                  ??_adcConvertMM 0037                        ??___wmul 0024  
                      ??_getADC 0020                     __pdataBANK0 006D                        ?_ADCMain 0070  
                   _FLAG_1000MS 03E8                 ?_initWallFollow 0070                     __pbssCOMMON 007B  
                     ___latbits 0002                   __pcstackBANK0 0020            main@ADJUSTED_SPEED_L 0050  
          main@ADJUSTED_SPEED_R 0052            moveCCW@numberOfSteps 0020         __end_of_lcdWriteControl 0DD0  
              ___lwdiv@dividend 0028                     _angleTurned 00A6                        ?___aldiv 0026  
             __size_of_ser_init 000F                        ?___lwdiv 0026                        ?___lwmod 0070  
             __size_of_setupADC 0016               __size_of_setupLCD 0029               __size_of_setupSPI 0018  
                     __pstrings 0800                        ?_moveCCW 0020            __size_of_DriveDirect 008D  
              ___lwdiv@quotient 002B                 main@controlByte 0054         lcdWriteControl@databyte 0022  
               ___aldiv@divisor 0026               interrupt_function 0004                 ___aldiv@counter 002F  
        __size_of_getSensorData 003E                  ___wmul@product 0024                      ser_putch@c 0020  
         getSensorData@packetID 0028                       clear_ram0 07F8                  main@ADC_ADJUST 004E  
                     _ser_getch 0D75                       _ser_putch 0D7F                       _stepCount 006B  
              __size_of_ADCMain 0020                   _VelocityRight 00A4            __end_of_spi_transfer 0DA9  
                   __stringbase 0805                       _stepState 0059               ___wmul@multiplier 0020  
              spi_transfer@data 0022                spi_transfer@temp 0021            __end_of_adcConvertMM 03C4  
                   _controlByte 0064                        _Distance 00A0            lcdWriteData@databyte 0022  
   __size_of_lcdWriteToDigitBCD 0097                  _lcdWriteString 0E1E        DriveDirect@VelocityRight 0021  
                    ?_ser_getch 0070                ?_lcdWriteControl 0070                      ?_ser_putch 0070  
              __size_of___aldiv 008F                __size_of___lwdiv 003E                __size_of___lwmod 0032  
                 _getSensorData 0E93              __end_of__stringtab 0806                     _currentStep 0066  
lcdWriteToDigitBCD@TenThouDigit 002B                 ___lwdiv@divisor 0026                __size_of_moveCCW 0067  
               ___lwdiv@counter 002D                        __ptext10 0DFE                        __ptext11 058B  
                      __ptext20 0E93                        __ptext12 0DA9                        __ptext21 0D7F  
                      __ptext13 0D6C                        __ptext22 0D75                        __ptext14 0DBC  
                      __ptext23 0F0F                        __ptext15 0F54                        __ptext24 0E61  
                      __ptext16 0037                        __ptext17 0E3E                        __ptext18 0ED1  
                      __ptext19 06B3                        _highByte 006C          __end_of_lcdWriteString 0E3E  
                      _distTrav 00AA                   __size_of_main 01C7                        _ser_init 0D8B  
                    _PB6Counter 005F                        _setupADC 0DD0                        _setupLCD 07CF  
                      _setupSPI 0DE6                      _PB7Counter 0060     lcdWriteToDigitBCD@HunsDigit 0027  
                    _PB8Counter 0061                    _VelocityLeft 00A2     lcdWriteToDigitBCD@OnesDigit 002D  
              ??_initWallFollow 003F                  ?_getSensorData 0022     lcdWriteToDigitBCD@TensDigit 0025  
   lcdWriteToDigitBCD@ThouDigit 0029                 ?_lcdWriteString 0070                        intlevel1 0000  
                      moveCCW@i 0026                ___lwmod@dividend 0072             main@CURRENT_SPEED_L 0046  
           main@CURRENT_SPEED_R 0048           moveCCW@stepsRemaining 0024                   ?_lcdSetCursor 0070  
                     stringcode 0800                     ??_ser_getch 0020                     ??_ser_putch 0020  
           getSensorData@sensor 0026           __size_of_spi_transfer 000F           __size_of_adcConvertMM 038D  
                    _OPTION_REG 0081                 ___lwmod@divisor 0070                 ___lwmod@counter 0075  
                      stringdir 0800                        stringtab 0800                    ___aldiv@sign 0030  
            getSensorData@bytes 0022                     main@ADC_SET 0055                   ?_lcdWriteData 0070  
        lcdWriteToDigitBCD@data 0023                    _spi_transfer 0D9A                  ??_lcdSetCursor 0023  
                  _stepCountNeg 00B0                     _stepClosest 00AE                    _adcConvertMM 0037  
