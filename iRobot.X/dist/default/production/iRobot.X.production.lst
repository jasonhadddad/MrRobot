

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Sep 19 10:26:10 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     	;# 
    41  0001                     	;# 
    42  0002                     	;# 
    43  0003                     	;# 
    44  0004                     	;# 
    45  0005                     	;# 
    46  0006                     	;# 
    47  0007                     	;# 
    48  0008                     	;# 
    49  0009                     	;# 
    50  000A                     	;# 
    51  000B                     	;# 
    52  000C                     	;# 
    53  000D                     	;# 
    54  000E                     	;# 
    55  000E                     	;# 
    56  000F                     	;# 
    57  0010                     	;# 
    58  0011                     	;# 
    59  0012                     	;# 
    60  0013                     	;# 
    61  0014                     	;# 
    62  0015                     	;# 
    63  0015                     	;# 
    64  0016                     	;# 
    65  0017                     	;# 
    66  0018                     	;# 
    67  0019                     	;# 
    68  001A                     	;# 
    69  001B                     	;# 
    70  001B                     	;# 
    71  001C                     	;# 
    72  001D                     	;# 
    73  001E                     	;# 
    74  001F                     	;# 
    75  0081                     	;# 
    76  0085                     	;# 
    77  0086                     	;# 
    78  0087                     	;# 
    79  0088                     	;# 
    80  0089                     	;# 
    81  008C                     	;# 
    82  008D                     	;# 
    83  008E                     	;# 
    84  0091                     	;# 
    85  0092                     	;# 
    86  0093                     	;# 
    87  0094                     	;# 
    88  0098                     	;# 
    89  0099                     	;# 
    90  009C                     	;# 
    91  009D                     	;# 
    92  009E                     	;# 
    93  009F                     	;# 
    94  010C                     	;# 
    95  010D                     	;# 
    96  010E                     	;# 
    97  010F                     	;# 
    98  018C                     	;# 
    99  018D                     	;# 
   100  0000                     	;# 
   101  0001                     	;# 
   102  0002                     	;# 
   103  0003                     	;# 
   104  0004                     	;# 
   105  0005                     	;# 
   106  0006                     	;# 
   107  0007                     	;# 
   108  0008                     	;# 
   109  0009                     	;# 
   110  000A                     	;# 
   111  000B                     	;# 
   112  000C                     	;# 
   113  000D                     	;# 
   114  000E                     	;# 
   115  000E                     	;# 
   116  000F                     	;# 
   117  0010                     	;# 
   118  0011                     	;# 
   119  0012                     	;# 
   120  0013                     	;# 
   121  0014                     	;# 
   122  0015                     	;# 
   123  0015                     	;# 
   124  0016                     	;# 
   125  0017                     	;# 
   126  0018                     	;# 
   127  0019                     	;# 
   128  001A                     	;# 
   129  001B                     	;# 
   130  001B                     	;# 
   131  001C                     	;# 
   132  001D                     	;# 
   133  001E                     	;# 
   134  001F                     	;# 
   135  0081                     	;# 
   136  0085                     	;# 
   137  0086                     	;# 
   138  0087                     	;# 
   139  0088                     	;# 
   140  0089                     	;# 
   141  008C                     	;# 
   142  008D                     	;# 
   143  008E                     	;# 
   144  0091                     	;# 
   145  0092                     	;# 
   146  0093                     	;# 
   147  0094                     	;# 
   148  0098                     	;# 
   149  0099                     	;# 
   150  009C                     	;# 
   151  009D                     	;# 
   152  009E                     	;# 
   153  009F                     	;# 
   154  010C                     	;# 
   155  010D                     	;# 
   156  010E                     	;# 
   157  010F                     	;# 
   158  018C                     	;# 
   159  018D                     	;# 
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0006                     	;# 
   167  0007                     	;# 
   168  0008                     	;# 
   169  0009                     	;# 
   170  000A                     	;# 
   171  000B                     	;# 
   172  000C                     	;# 
   173  000D                     	;# 
   174  000E                     	;# 
   175  000E                     	;# 
   176  000F                     	;# 
   177  0010                     	;# 
   178  0011                     	;# 
   179  0012                     	;# 
   180  0013                     	;# 
   181  0014                     	;# 
   182  0015                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0017                     	;# 
   186  0018                     	;# 
   187  0019                     	;# 
   188  001A                     	;# 
   189  001B                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  001D                     	;# 
   193  001E                     	;# 
   194  001F                     	;# 
   195  0081                     	;# 
   196  0085                     	;# 
   197  0086                     	;# 
   198  0087                     	;# 
   199  0088                     	;# 
   200  0089                     	;# 
   201  008C                     	;# 
   202  008D                     	;# 
   203  008E                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0093                     	;# 
   207  0094                     	;# 
   208  0098                     	;# 
   209  0099                     	;# 
   210  009C                     	;# 
   211  009D                     	;# 
   212  009E                     	;# 
   213  009F                     	;# 
   214  010C                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  010F                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220  0000                     	;# 
   221  0001                     	;# 
   222  0002                     	;# 
   223  0003                     	;# 
   224  0004                     	;# 
   225  0005                     	;# 
   226  0006                     	;# 
   227  0007                     	;# 
   228  0008                     	;# 
   229  0009                     	;# 
   230  000A                     	;# 
   231  000B                     	;# 
   232  000C                     	;# 
   233  000D                     	;# 
   234  000E                     	;# 
   235  000E                     	;# 
   236  000F                     	;# 
   237  0010                     	;# 
   238  0011                     	;# 
   239  0012                     	;# 
   240  0013                     	;# 
   241  0014                     	;# 
   242  0015                     	;# 
   243  0015                     	;# 
   244  0016                     	;# 
   245  0017                     	;# 
   246  0018                     	;# 
   247  0019                     	;# 
   248  001A                     	;# 
   249  001B                     	;# 
   250  001B                     	;# 
   251  001C                     	;# 
   252  001D                     	;# 
   253  001E                     	;# 
   254  001F                     	;# 
   255  0081                     	;# 
   256  0085                     	;# 
   257  0086                     	;# 
   258  0087                     	;# 
   259  0088                     	;# 
   260  0089                     	;# 
   261  008C                     	;# 
   262  008D                     	;# 
   263  008E                     	;# 
   264  0091                     	;# 
   265  0092                     	;# 
   266  0093                     	;# 
   267  0094                     	;# 
   268  0098                     	;# 
   269  0099                     	;# 
   270  009C                     	;# 
   271  009D                     	;# 
   272  009E                     	;# 
   273  009F                     	;# 
   274  010C                     	;# 
   275  010D                     	;# 
   276  010E                     	;# 
   277  010F                     	;# 
   278  018C                     	;# 
   279  018D                     	;# 
   280  0000                     	;# 
   281  0001                     	;# 
   282  0002                     	;# 
   283  0003                     	;# 
   284  0004                     	;# 
   285  0005                     	;# 
   286  0006                     	;# 
   287  0007                     	;# 
   288  0008                     	;# 
   289  0009                     	;# 
   290  000A                     	;# 
   291  000B                     	;# 
   292  000C                     	;# 
   293  000D                     	;# 
   294  000E                     	;# 
   295  000E                     	;# 
   296  000F                     	;# 
   297  0010                     	;# 
   298  0011                     	;# 
   299  0012                     	;# 
   300  0013                     	;# 
   301  0014                     	;# 
   302  0015                     	;# 
   303  0015                     	;# 
   304  0016                     	;# 
   305  0017                     	;# 
   306  0018                     	;# 
   307  0019                     	;# 
   308  001A                     	;# 
   309  001B                     	;# 
   310  001B                     	;# 
   311  001C                     	;# 
   312  001D                     	;# 
   313  001E                     	;# 
   314  001F                     	;# 
   315  0081                     	;# 
   316  0085                     	;# 
   317  0086                     	;# 
   318  0087                     	;# 
   319  0088                     	;# 
   320  0089                     	;# 
   321  008C                     	;# 
   322  008D                     	;# 
   323  008E                     	;# 
   324  0091                     	;# 
   325  0092                     	;# 
   326  0093                     	;# 
   327  0094                     	;# 
   328  0098                     	;# 
   329  0099                     	;# 
   330  009C                     	;# 
   331  009D                     	;# 
   332  009E                     	;# 
   333  009F                     	;# 
   334  010C                     	;# 
   335  010D                     	;# 
   336  010E                     	;# 
   337  010F                     	;# 
   338  018C                     	;# 
   339  018D                     	;# 
   340  0000                     	;# 
   341  0001                     	;# 
   342  0002                     	;# 
   343  0003                     	;# 
   344  0004                     	;# 
   345  0005                     	;# 
   346  0006                     	;# 
   347  0007                     	;# 
   348  0008                     	;# 
   349  0009                     	;# 
   350  000A                     	;# 
   351  000B                     	;# 
   352  000C                     	;# 
   353  000D                     	;# 
   354  000E                     	;# 
   355  000E                     	;# 
   356  000F                     	;# 
   357  0010                     	;# 
   358  0011                     	;# 
   359  0012                     	;# 
   360  0013                     	;# 
   361  0014                     	;# 
   362  0015                     	;# 
   363  0015                     	;# 
   364  0016                     	;# 
   365  0017                     	;# 
   366  0018                     	;# 
   367  0019                     	;# 
   368  001A                     	;# 
   369  001B                     	;# 
   370  001B                     	;# 
   371  001C                     	;# 
   372  001D                     	;# 
   373  001E                     	;# 
   374  001F                     	;# 
   375  0081                     	;# 
   376  0085                     	;# 
   377  0086                     	;# 
   378  0087                     	;# 
   379  0088                     	;# 
   380  0089                     	;# 
   381  008C                     	;# 
   382  008D                     	;# 
   383  008E                     	;# 
   384  0091                     	;# 
   385  0092                     	;# 
   386  0093                     	;# 
   387  0094                     	;# 
   388  0098                     	;# 
   389  0099                     	;# 
   390  009C                     	;# 
   391  009D                     	;# 
   392  009E                     	;# 
   393  009F                     	;# 
   394  010C                     	;# 
   395  010D                     	;# 
   396  010E                     	;# 
   397  010F                     	;# 
   398  018C                     	;# 
   399  018D                     	;# 
   400                           
   401                           	psect	idataBANK1
   402  0D5F                     __pidataBANK1:	
   403                           
   404                           ;initializer for _adcClosest
   405  0D5F  34E8               	retlw	232
   406  0D60  3403               	retlw	3
   407  001F                     _ADCON0	set	31
   408  0005                     _PORTA	set	5
   409  0007                     _PORTC	set	7
   410  0008                     _PORTD	set	8
   411  0009                     _PORTE	set	9
   412  001A                     _RCREG	set	26
   413  0018                     _RCSTA	set	24
   414  0013                     _SSPBUF	set	19
   415  0014                     _SSPCON	set	20
   416  0001                     _TMR0	set	1
   417  0019                     _TXREG	set	25
   418  001E                     _ADRESH	set	30
   419  005F                     _GIE	set	95
   420  00FA                     _GO	set	250
   421  005E                     _PEIE	set	94
   422  0030                     _RB0	set	48
   423  0031                     _RB1	set	49
   424  0032                     _RB2	set	50
   425  0034                     _RB4	set	52
   426  0038                     _RC0	set	56
   427  0039                     _RC1	set	57
   428  003A                     _RC2	set	58
   429  0065                     _RCIF	set	101
   430  0048                     _RE0	set	72
   431  0049                     _RE1	set	73
   432  004A                     _RE2	set	74
   433  0063                     _SSPIF	set	99
   434  005D                     _TMR0IE	set	93
   435  005A                     _TMR0IF	set	90
   436  009F                     _ADCON1	set	159
   437  009E                     _ADRESL	set	158
   438  0081                     _OPTION_REG	set	129
   439  0099                     _SPBRG	set	153
   440  0094                     _SSPSTAT	set	148
   441  0085                     _TRISA	set	133
   442  0086                     _TRISB	set	134
   443  0087                     _TRISC	set	135
   444  0088                     _TRISD	set	136
   445  0089                     _TRISE	set	137
   446  0098                     _TXSTA	set	152
   447  04C1                     _TRMT	set	1217
   448                           
   449                           ; #config settings
   450  0000                     
   451                           	psect	cinit
   452  0015                     start_initialization:	
   453  0015                     __initialization:	
   454                           
   455                           ; Initialize objects allocated to BANK1
   456  0015  1683               	bsf	3,5	;RP0=1, select bank1
   457  0016  1303               	bcf	3,6	;RP1=0, select bank1
   458  0017  120A  158A  255F  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   459  001C  00B2               	movwf	__pdataBANK1& (0+127)
   460  001D  120A  158A  2560  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   461  0022  00B3               	movwf	(__pdataBANK1+1)& (0+127)
   462                           
   463                           ; Clear objects allocated to BANK1
   464  0023  1383               	bcf	3,7	;select IRP bank0
   465  0024  30A0               	movlw	low __pbssBANK1
   466  0025  0084               	movwf	4
   467  0026  30B2               	movlw	low (__pbssBANK1+18)
   468  0027  120A  158A  2561  120A  118A  	fcall	clear_ram0
   469                           
   470                           ; Clear objects allocated to BANK0
   471  002C  3056               	movlw	low __pbssBANK0
   472  002D  0084               	movwf	4
   473  002E  3070               	movlw	low (__pbssBANK0+26)
   474  002F  120A  158A  2561   	fcall	clear_ram0
   475                           
   476                           ; Clear objects allocated to COMMON
   477  0032  01FB               	clrf	__pbssCOMMON& (0+127)
   478  0033  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   479                           
   480                           ; Clear objects allocated to BITCOMMON
   481  0034  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   482  0035                     end_of_initialization:	
   483                           ;End of C runtime variable initialization code
   484                           
   485  0035                     __end_of__initialization:	
   486  0035  0183               	clrf	3
   487  0036  120A  118A  2BC6   	ljmp	_main	;jump to C main() function
   488                           
   489                           	psect	bitbssCOMMON
   490  03E8                     __pbitbssCOMMON:	
   491  03E8                     _FLAG_1000MS:	
   492  03E8                     	ds	1
   493                           
   494                           	psect	bssCOMMON
   495  007B                     __pbssCOMMON:	
   496  007B                     _rxbyte:	
   497  007B                     	ds	1
   498  007C                     _speedH:	
   499  007C                     	ds	1
   500                           
   501                           	psect	bssBANK0
   502  0056                     __pbssBANK0:	
   503  0056                     _adcRAW:	
   504  0056                     	ds	2
   505  0058                     _distTrav:	
   506  0058                     	ds	2
   507  005A                     _loop:	
   508  005A                     	ds	2
   509  005C                     _time_count:	
   510  005C                     	ds	2
   511  005E                     _totalDistTrav:	
   512  005E                     	ds	2
   513  0060                     _LeftSpeedH:	
   514  0060                     	ds	1
   515  0061                     _LeftSpeedL:	
   516  0061                     	ds	1
   517  0062                     _PB6Counter:	
   518  0062                     	ds	1
   519  0063                     _PB7Counter:	
   520  0063                     	ds	1
   521  0064                     _PB8Counter:	
   522  0064                     	ds	1
   523  0065                     _RightSpeedH:	
   524  0065                     	ds	1
   525  0066                     _RightSpeedL:	
   526  0066                     	ds	1
   527  0067                     _controlByte:	
   528  0067                     	ds	1
   529  0068                     _count:	
   530  0068                     	ds	1
   531  0069                     _leftWall:	
   532  0069                     	ds	1
   533  006A                     _lowByte:	
   534  006A                     	ds	1
   535  006B                     _radH:	
   536  006B                     	ds	1
   537  006C                     _radL:	
   538  006C                     	ds	1
   539  006D                     _rightWall:	
   540  006D                     	ds	1
   541  006E                     _speedL:	
   542  006E                     	ds	1
   543  006F                     _highByte:	
   544  006F                     	ds	1
   545                           
   546                           	psect	bssBANK1
   547  00A0                     __pbssBANK1:	
   548  00A0                     _Distance:	
   549  00A0                     	ds	2
   550  00A2                     _VelocityLeft:	
   551  00A2                     	ds	2
   552  00A4                     _VelocityRight:	
   553  00A4                     	ds	2
   554  00A6                     _angleTurned:	
   555  00A6                     	ds	2
   556  00A8                     _degrees:	
   557  00A8                     	ds	2
   558  00AA                     _localStepPos:	
   559  00AA                     	ds	2
   560  00AC                     _stepClosest:	
   561  00AC                     	ds	2
   562  00AE                     _stepCountNeg:	
   563  00AE                     	ds	2
   564  00B0                     _totalangleTurned:	
   565  00B0                     	ds	2
   566                           
   567                           	psect	dataBANK1
   568  00B2                     __pdataBANK1:	
   569  00B2                     _adcClosest:	
   570  00B2                     	ds	2
   571                           
   572                           	psect	clrtext
   573  0D61                     clear_ram0:	
   574                           ;	Called with FSR containing the base address, and
   575                           ;	W with the last address+1
   576                           
   577  0D61  0064               	clrwdt	;clear the watchdog before getting into this loop
   578  0D62                     clrloop0:	
   579  0D62  0180               	clrf	0	;clear RAM location pointed to by FSR
   580  0D63  0A84               	incf	4,f	;increment pointer
   581  0D64  0604               	xorwf	4,w	;XOR with final address
   582  0D65  1903               	btfsc	3,2	;have we reached the end yet?
   583  0D66  3400               	retlw	0	;all done for this memory range, return
   584  0D67  0604               	xorwf	4,w	;XOR again to restore value
   585  0D68  2D62               	goto	clrloop0	;do the next byte
   586                           
   587                           	psect	cstackCOMMON
   588  0070                     __pcstackCOMMON:	
   589  0070                     ?_setCCW:	
   590  0070                     ?_setupSPI:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0070                     ?_ser_init:	
   594                           ; 1 bytes @ 0x0
   595                           
   596  0070                     ?_setupLCD:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0070                     ?_setupADC:	
   600                           ; 1 bytes @ 0x0
   601                           
   602  0070                     ?_spi_transfer:	
   603                           ; 1 bytes @ 0x0
   604                           
   605  0070                     ?_ser_putch:	
   606                           ; 1 bytes @ 0x0
   607                           
   608  0070                     ?_lcdSetCursor:	
   609                           ; 1 bytes @ 0x0
   610                           
   611  0070                     ?_ADCMain:	
   612                           ; 1 bytes @ 0x0
   613                           
   614  0070                     ?_isr:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  0070                     ?_initWallFollow:	
   618                           ; 1 bytes @ 0x0
   619                           
   620  0070                     ?_main:	
   621                           ; 1 bytes @ 0x0
   622                           
   623  0070                     ?_lcdWriteControl:	
   624                           ; 1 bytes @ 0x0
   625                           
   626  0070                     ?_lcdWriteData:	
   627                           ; 1 bytes @ 0x0
   628                           
   629  0070                     ?_ser_getch:	
   630                           ; 1 bytes @ 0x0
   631                           
   632  0070                     ?_getADC:	
   633                           ; 1 bytes @ 0x0
   634                           
   635  0070                     ?___lwmod:	
   636                           ; 2 bytes @ 0x0
   637                           
   638  0070                     ___lwmod@divisor:	
   639                           ; 2 bytes @ 0x0
   640                           
   641                           
   642                           ; 2 bytes @ 0x0
   643  0070                     	ds	2
   644  0072                     ___lwmod@dividend:	
   645                           
   646                           ; 2 bytes @ 0x2
   647  0072                     	ds	2
   648  0074                     ??___lwmod:	
   649                           
   650                           ; 1 bytes @ 0x4
   651  0074                     	ds	1
   652  0075                     ___lwmod@counter:	
   653                           
   654                           ; 1 bytes @ 0x5
   655  0075                     	ds	1
   656  0076                     ??_isr:	
   657                           
   658                           ; 1 bytes @ 0x6
   659  0076                     	ds	5
   660                           
   661                           	psect	cstackBANK0
   662  0020                     __pcstackBANK0:	
   663  0020                     ??_setupSPI:	
   664  0020                     ??_ser_init:	
   665                           ; 1 bytes @ 0x0
   666                           
   667  0020                     ??_setupADC:	
   668                           ; 1 bytes @ 0x0
   669                           
   670  0020                     ??_spi_transfer:	
   671                           ; 1 bytes @ 0x0
   672                           
   673  0020                     ??_ser_putch:	
   674                           ; 1 bytes @ 0x0
   675                           
   676  0020                     ??_getADC:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  0020                     ??_lcdWriteControl:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  0020                     ??_lcdWriteData:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  0020                     ??_ser_getch:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  0020                     ?___wmul:	
   689                           ; 1 bytes @ 0x0
   690                           
   691  0020                     ser_putch@c:	
   692                           ; 2 bytes @ 0x0
   693                           
   694  0020                     ___wmul@multiplier:	
   695                           ; 1 bytes @ 0x0
   696                           
   697                           
   698                           ; 2 bytes @ 0x0
   699  0020                     	ds	1
   700  0021                     ?_DriveDirect:	
   701  0021                     spi_transfer@temp:	
   702                           ; 1 bytes @ 0x1
   703                           
   704  0021                     ser_getch@rxbyte:	
   705                           ; 1 bytes @ 0x1
   706                           
   707  0021                     DriveDirect@VelocityRight:	
   708                           ; 1 bytes @ 0x1
   709                           
   710                           
   711                           ; 2 bytes @ 0x1
   712  0021                     	ds	1
   713  0022                     ?_getSensorData:	
   714  0022                     lcdWriteControl@databyte:	
   715                           ; 2 bytes @ 0x2
   716                           
   717  0022                     lcdWriteData@databyte:	
   718                           ; 1 bytes @ 0x2
   719                           
   720  0022                     spi_transfer@data:	
   721                           ; 1 bytes @ 0x2
   722                           
   723  0022                     getSensorData@bytes:	
   724                           ; 1 bytes @ 0x2
   725                           
   726  0022                     ___wmul@multiplicand:	
   727                           ; 1 bytes @ 0x2
   728                           
   729                           
   730                           ; 2 bytes @ 0x2
   731  0022                     	ds	1
   732  0023                     ??_setCCW:	
   733  0023                     ??_setupLCD:	
   734                           ; 1 bytes @ 0x3
   735                           
   736  0023                     ?_lcdWriteToDigitBCD:	
   737                           ; 1 bytes @ 0x3
   738                           
   739  0023                     ??_lcdSetCursor:	
   740                           ; 1 bytes @ 0x3
   741                           
   742  0023                     lcdSetCursor@address:	
   743                           ; 1 bytes @ 0x3
   744                           
   745  0023                     lcdWriteToDigitBCD@data:	
   746                           ; 1 bytes @ 0x3
   747                           
   748  0023                     DriveDirect@VelocityLeft:	
   749                           ; 2 bytes @ 0x3
   750                           
   751                           
   752                           ; 2 bytes @ 0x3
   753  0023                     	ds	1
   754  0024                     ??_getSensorData:	
   755  0024                     ??___wmul:	
   756                           ; 1 bytes @ 0x4
   757                           
   758  0024                     ___wmul@product:	
   759                           ; 1 bytes @ 0x4
   760                           
   761                           
   762                           ; 2 bytes @ 0x4
   763  0024                     	ds	1
   764  0025                     ??_lcdWriteToDigitBCD:	
   765  0025                     ??_DriveDirect:	
   766                           ; 1 bytes @ 0x5
   767                           
   768  0025                     lcdWriteToDigitBCD@TensDigit:	
   769                           ; 1 bytes @ 0x5
   770                           
   771                           
   772                           ; 2 bytes @ 0x5
   773  0025                     	ds	1
   774  0026                     ??_initWallFollow:	
   775  0026                     ?___lwdiv:	
   776                           ; 1 bytes @ 0x6
   777                           
   778  0026                     ?___aldiv:	
   779                           ; 2 bytes @ 0x6
   780                           
   781  0026                     DriveDirect@data:	
   782                           ; 4 bytes @ 0x6
   783                           
   784  0026                     getSensorData@sensor:	
   785                           ; 2 bytes @ 0x6
   786                           
   787  0026                     ___lwdiv@divisor:	
   788                           ; 2 bytes @ 0x6
   789                           
   790  0026                     ___aldiv@divisor:	
   791                           ; 2 bytes @ 0x6
   792                           
   793                           
   794                           ; 4 bytes @ 0x6
   795  0026                     	ds	1
   796  0027                     lcdWriteToDigitBCD@HunsDigit:	
   797                           
   798                           ; 2 bytes @ 0x7
   799  0027                     	ds	1
   800  0028                     getSensorData@packetID:	
   801  0028                     DriveDirect@data_247:	
   802                           ; 1 bytes @ 0x8
   803                           
   804  0028                     ___lwdiv@dividend:	
   805                           ; 2 bytes @ 0x8
   806                           
   807                           
   808                           ; 2 bytes @ 0x8
   809  0028                     	ds	1
   810  0029                     lcdWriteToDigitBCD@ThouDigit:	
   811                           
   812                           ; 2 bytes @ 0x9
   813  0029                     	ds	1
   814  002A                     ??___lwdiv:	
   815  002A                     ___aldiv@dividend:	
   816                           ; 1 bytes @ 0xA
   817                           
   818                           
   819                           ; 4 bytes @ 0xA
   820  002A                     	ds	1
   821  002B                     lcdWriteToDigitBCD@TenThouDigit:	
   822  002B                     ___lwdiv@quotient:	
   823                           ; 2 bytes @ 0xB
   824                           
   825                           
   826                           ; 2 bytes @ 0xB
   827  002B                     	ds	2
   828  002D                     ___lwdiv@counter:	
   829  002D                     lcdWriteToDigitBCD@OnesDigit:	
   830                           ; 1 bytes @ 0xD
   831                           
   832                           
   833                           ; 2 bytes @ 0xD
   834  002D                     	ds	1
   835  002E                     ??___aldiv:	
   836                           
   837                           ; 1 bytes @ 0xE
   838  002E                     	ds	1
   839  002F                     ___aldiv@counter:	
   840                           
   841                           ; 1 bytes @ 0xF
   842  002F                     	ds	1
   843  0030                     ___aldiv@sign:	
   844                           
   845                           ; 1 bytes @ 0x10
   846  0030                     	ds	1
   847  0031                     ___aldiv@quotient:	
   848                           
   849                           ; 4 bytes @ 0x11
   850  0031                     	ds	4
   851  0035                     ?_adcConvertMM:	
   852  0035                     adcConvertMM@adcRAW:	
   853                           ; 2 bytes @ 0x15
   854                           
   855                           
   856                           ; 2 bytes @ 0x15
   857  0035                     	ds	2
   858  0037                     ??_adcConvertMM:	
   859                           
   860                           ; 1 bytes @ 0x17
   861  0037                     	ds	8
   862  003F                     ??_ADCMain:	
   863  003F                     ??_main:	
   864                           ; 1 bytes @ 0x1F
   865                           
   866                           
   867                           ; 1 bytes @ 0x1F
   868  003F                     	ds	4
   869  0043                     main@ADC_CURRENT:	
   870                           
   871                           ; 2 bytes @ 0x23
   872  0043                     	ds	2
   873  0045                     main@ADJUSTED_SPEED_L:	
   874                           
   875                           ; 2 bytes @ 0x25
   876  0045                     	ds	2
   877  0047                     main@ADJUSTED_SPEED_R:	
   878                           
   879                           ; 2 bytes @ 0x27
   880  0047                     	ds	2
   881  0049                     main@controlByte:	
   882                           
   883                           ; 1 bytes @ 0x29
   884  0049                     	ds	1
   885  004A                     main@timerLoop:	
   886                           
   887                           ; 2 bytes @ 0x2A
   888  004A                     	ds	2
   889  004C                     main@CURRENT_SPEED_L:	
   890                           
   891                           ; 2 bytes @ 0x2C
   892  004C                     	ds	2
   893  004E                     main@CURRENT_SPEED_R:	
   894                           
   895                           ; 2 bytes @ 0x2E
   896  004E                     	ds	2
   897  0050                     main@safetyCount:	
   898                           
   899                           ; 2 bytes @ 0x30
   900  0050                     	ds	2
   901  0052                     main@ADC_ADJUST:	
   902                           
   903                           ; 2 bytes @ 0x32
   904  0052                     	ds	2
   905  0054                     main@setADCdist:	
   906                           
   907                           ; 2 bytes @ 0x34
   908  0054                     	ds	2
   909                           
   910                           	psect	maintext
   911  03C6                     __pmaintext:	
   912 ;;
   913 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   914 ;;
   915 ;; *************** function _main *****************
   916 ;; Defined at:
   917 ;;		line 108 in file "main.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;		None
   920 ;; Auto vars:     Size  Location     Type
   921 ;;  setADCdist      2   52[BANK0 ] unsigned int 
   922 ;;  ADC_ADJUST      2   50[BANK0 ] unsigned int 
   923 ;;  safetyCount     2   48[BANK0 ] unsigned int 
   924 ;;  CURRENT_SPEE    2   46[BANK0 ] unsigned int 
   925 ;;  CURRENT_SPEE    2   44[BANK0 ] unsigned int 
   926 ;;  timerLoop       2   42[BANK0 ] unsigned int 
   927 ;;  ADJUSTED_SPE    2   39[BANK0 ] unsigned int 
   928 ;;  ADJUSTED_SPE    2   37[BANK0 ] unsigned int 
   929 ;;  ADC_CURRENT     2   35[BANK0 ] unsigned int 
   930 ;;  controlByte     1   41[BANK0 ] unsigned char 
   931 ;; Return value:  Size  Location     Type
   932 ;;                  1    wreg      void 
   933 ;; Registers used:
   934 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   935 ;; Tracked objects:
   936 ;;		On entry : B00/0
   937 ;;		On exit  : 0/0
   938 ;;		Unchanged: 0/0
   939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   940 ;;      Params:         0       0       0       0       0
   941 ;;      Locals:         0      19       0       0       0
   942 ;;      Temps:          0       4       0       0       0
   943 ;;      Totals:         0      23       0       0       0
   944 ;;Total ram usage:       23 bytes
   945 ;; Hardware stack levels required when called:    5
   946 ;; This function calls:
   947 ;;		_ADCMain
   948 ;;		_DriveDirect
   949 ;;		___lwdiv
   950 ;;		___wmul
   951 ;;		_getSensorData
   952 ;;		_initWallFollow
   953 ;;		_lcdSetCursor
   954 ;;		_lcdWriteToDigitBCD
   955 ;;		_ser_init
   956 ;;		_ser_putch
   957 ;;		_setupADC
   958 ;;		_setupLCD
   959 ;;		_setupSPI
   960 ;;		_spi_transfer
   961 ;; This function is called by:
   962 ;;		Startup code after reset
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           
   967                           ;psect for function _main
   968  03C6                     _main:	
   969                           
   970                           ;main.c: 109: _delay((unsigned long)((3000)*(20000000/4000.0)));
   971                           
   972                           ;incstack = 0
   973                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   974  03C6  304D               	movlw	77
   975  03C7  1283               	bcf	3,5	;RP0=0, select bank0
   976  03C8  1303               	bcf	3,6	;RP1=0, select bank0
   977  03C9  00C1               	movwf	??_main+2
   978  03CA  3019               	movlw	25
   979  03CB  00C0               	movwf	??_main+1
   980  03CC  309A               	movlw	154
   981  03CD  00BF               	movwf	??_main
   982  03CE                     u1897:	
   983  03CE  0BBF               	decfsz	??_main,f
   984  03CF  2BCE               	goto	u1897
   985  03D0  0BC0               	decfsz	??_main+1,f
   986  03D1  2BCE               	goto	u1897
   987  03D2  0BC1               	decfsz	??_main+2,f
   988  03D3  2BCE               	goto	u1897
   989  03D4  2BD5               	nop2
   990                           
   991                           ;main.c: 112: setupSPI();
   992  03D5  120A  158A  25DA  120A  118A  	fcall	_setupSPI
   993                           
   994                           ;main.c: 113: ser_init();
   995  03DA  120A  158A  258E  120A  118A  	fcall	_ser_init
   996                           
   997                           ;main.c: 114: setupLCD();
   998  03DF  120A  158A  265C  120A  118A  	fcall	_setupLCD
   999                           
  1000                           ;main.c: 115: setupADC();
  1001  03E4  120A  158A  25C4  120A  118A  	fcall	_setupADC
  1002                           
  1003                           ;main.c: 117: unsigned char controlByte = 0b00001101;
  1004  03E9  300D               	movlw	13
  1005  03EA  1283               	bcf	3,5	;RP0=0, select bank0
  1006  03EB  1303               	bcf	3,6	;RP1=0, select bank0
  1007  03EC  00BF               	movwf	??_main
  1008  03ED  083F               	movf	??_main,w
  1009  03EE  00C9               	movwf	main@controlByte
  1010                           
  1011                           ;main.c: 118: spi_transfer(controlByte);
  1012  03EF  0849               	movf	main@controlByte,w
  1013  03F0  120A  158A  257F  120A  118A  	fcall	_spi_transfer
  1014                           
  1015                           ;main.c: 121: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1016  03F5  301A               	movlw	26
  1017  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  1018  03F7  1303               	bcf	3,6	;RP1=0, select bank0
  1019  03F8  00C1               	movwf	??_main+2
  1020  03F9  305E               	movlw	94
  1021  03FA  00C0               	movwf	??_main+1
  1022  03FB  3086               	movlw	134
  1023  03FC  00BF               	movwf	??_main
  1024  03FD                     u1907:	
  1025  03FD  0BBF               	decfsz	??_main,f
  1026  03FE  2BFD               	goto	u1907
  1027  03FF  0BC0               	decfsz	??_main+1,f
  1028  0400  2BFD               	goto	u1907
  1029  0401  0BC1               	decfsz	??_main+2,f
  1030  0402  2BFD               	goto	u1907
  1031  0403  0000               	nop
  1032                           
  1033                           ;main.c: 122: ser_putch(128);
  1034  0404  3080               	movlw	128
  1035  0405  120A  158A  2573  120A  118A  	fcall	_ser_putch
  1036                           
  1037                           ;main.c: 123: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1038  040A  301A               	movlw	26
  1039  040B  1283               	bcf	3,5	;RP0=0, select bank0
  1040  040C  1303               	bcf	3,6	;RP1=0, select bank0
  1041  040D  00C1               	movwf	??_main+2
  1042  040E  305E               	movlw	94
  1043  040F  00C0               	movwf	??_main+1
  1044  0410  3086               	movlw	134
  1045  0411  00BF               	movwf	??_main
  1046  0412                     u1917:	
  1047  0412  0BBF               	decfsz	??_main,f
  1048  0413  2C12               	goto	u1917
  1049  0414  0BC0               	decfsz	??_main+1,f
  1050  0415  2C12               	goto	u1917
  1051  0416  0BC1               	decfsz	??_main+2,f
  1052  0417  2C12               	goto	u1917
  1053  0418  0000               	nop
  1054                           
  1055                           ;main.c: 124: ser_putch(132);
  1056  0419  3084               	movlw	132
  1057  041A  120A  158A  2573  120A  118A  	fcall	_ser_putch
  1058                           
  1059                           ;main.c: 125: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1060  041F  301A               	movlw	26
  1061  0420  1283               	bcf	3,5	;RP0=0, select bank0
  1062  0421  1303               	bcf	3,6	;RP1=0, select bank0
  1063  0422  00C1               	movwf	??_main+2
  1064  0423  305E               	movlw	94
  1065  0424  00C0               	movwf	??_main+1
  1066  0425  3086               	movlw	134
  1067  0426  00BF               	movwf	??_main
  1068  0427                     u1927:	
  1069  0427  0BBF               	decfsz	??_main,f
  1070  0428  2C27               	goto	u1927
  1071  0429  0BC0               	decfsz	??_main+1,f
  1072  042A  2C27               	goto	u1927
  1073  042B  0BC1               	decfsz	??_main+2,f
  1074  042C  2C27               	goto	u1927
  1075  042D  0000               	nop
  1076                           
  1077                           ;main.c: 126: lcdWriteToDigitBCD(500);
  1078  042E  30F4               	movlw	244
  1079  042F  1283               	bcf	3,5	;RP0=0, select bank0
  1080  0430  1303               	bcf	3,6	;RP1=0, select bank0
  1081  0431  00A3               	movwf	lcdWriteToDigitBCD@data
  1082  0432  3001               	movlw	1
  1083  0433  00A4               	movwf	lcdWriteToDigitBCD@data+1
  1084  0434  120A  118A  265A  120A  118A  	fcall	_lcdWriteToDigitBCD
  1085  0439                     l1992:	
  1086                           ;main.c: 128: while(1){
  1087                           
  1088                           
  1089                           ;main.c: 131: if (PB8Counter >= 10 && !RB0 == 0){
  1090  0439  300A               	movlw	10
  1091  043A  1283               	bcf	3,5	;RP0=0, select bank0
  1092  043B  1303               	bcf	3,6	;RP1=0, select bank0
  1093  043C  0264               	subwf	_PB8Counter,w
  1094  043D  1803               	btfsc	3,0
  1095  043E  1C06               	btfss	6,0	;volatile
  1096  043F  2C48               	goto	l2000
  1097                           
  1098                           ;main.c: 132: initWallFollow();
  1099  0440  120A  158A  2685  120A  118A  	fcall	_initWallFollow
  1100                           
  1101                           ;main.c: 133: PB8Counter = 0;
  1102  0445  1283               	bcf	3,5	;RP0=0, select bank0
  1103  0446  1303               	bcf	3,6	;RP1=0, select bank0
  1104  0447  01E4               	clrf	_PB8Counter
  1105  0448                     l2000:	
  1106                           
  1107                           ;main.c: 134: }
  1108                           ;main.c: 136: if (getSensorData(18,1) == 0b00000001){
  1109  0448  01A2               	clrf	getSensorData@bytes
  1110  0449  0AA2               	incf	getSensorData@bytes,f
  1111  044A  3012               	movlw	18
  1112  044B  120A  158A  26F4  120A  118A  	fcall	_getSensorData
  1113  0450  1283               	bcf	3,5	;RP0=0, select bank0
  1114  0451  1303               	bcf	3,6	;RP1=0, select bank0
  1115  0452  0322               	decf	?_getSensorData,w
  1116  0453  0423               	iorwf	?_getSensorData+1,w
  1117  0454  1D03               	btfss	3,2
  1118  0455  2CF3               	goto	l129
  1119                           
  1120                           ;main.c: 137: totalDistTrav = 0;
  1121  0456  01DE               	clrf	_totalDistTrav
  1122  0457  01DF               	clrf	_totalDistTrav+1
  1123                           
  1124                           ;main.c: 138: DriveDirect(200,200);
  1125  0458  30C8               	movlw	200
  1126  0459  00A1               	movwf	DriveDirect@VelocityRight
  1127  045A  3000               	movlw	0
  1128  045B  00A2               	movwf	DriveDirect@VelocityRight+1
  1129  045C  30C8               	movlw	200
  1130  045D  00A3               	movwf	DriveDirect@VelocityLeft
  1131  045E  3000               	movlw	0
  1132  045F  00A4               	movwf	DriveDirect@VelocityLeft+1
  1133  0460  120A  158A  2773  120A  118A  	fcall	_DriveDirect
  1134  0465                     l2014:	
  1135                           ;main.c: 139: while (totalDistTrav < 2){
  1136                           
  1137  0465  1283               	bcf	3,5	;RP0=0, select bank0
  1138  0466  1303               	bcf	3,6	;RP1=0, select bank0
  1139  0467  085F               	movf	_totalDistTrav+1,w
  1140  0468  3A80               	xorlw	128
  1141  0469  00FF               	movwf	127
  1142  046A  3080               	movlw	128
  1143  046B  027F               	subwf	127,w
  1144  046C  1D03               	skipz
  1145  046D  2C70               	goto	u1765
  1146  046E  3002               	movlw	2
  1147  046F  025E               	subwf	_totalDistTrav,w
  1148  0470                     u1765:	
  1149  0470  1803               	btfsc	3,0
  1150  0471  2C9E               	goto	l2016
  1151                           
  1152                           ;main.c: 140: distTrav = getSensorData(19,2);
  1153  0472  3002               	movlw	2
  1154  0473  1283               	bcf	3,5	;RP0=0, select bank0
  1155  0474  1303               	bcf	3,6	;RP1=0, select bank0
  1156  0475  00BF               	movwf	??_main
  1157  0476  083F               	movf	??_main,w
  1158  0477  00A2               	movwf	getSensorData@bytes
  1159  0478  3013               	movlw	19
  1160  0479  120A  158A  26F4  120A  118A  	fcall	_getSensorData
  1161  047E  1283               	bcf	3,5	;RP0=0, select bank0
  1162  047F  1303               	bcf	3,6	;RP1=0, select bank0
  1163  0480  0823               	movf	?_getSensorData+1,w
  1164  0481  00D9               	movwf	_distTrav+1
  1165  0482  0822               	movf	?_getSensorData,w
  1166  0483  00D8               	movwf	_distTrav
  1167                           
  1168                           ;main.c: 141: totalDistTrav = (totalDistTrav + distTrav);
  1169  0484  0858               	movf	_distTrav,w
  1170  0485  075E               	addwf	_totalDistTrav,w
  1171  0486  00DE               	movwf	_totalDistTrav
  1172  0487  0859               	movf	_distTrav+1,w
  1173  0488  1803               	skipnc
  1174  0489  0A59               	incf	_distTrav+1,w
  1175  048A  075F               	addwf	_totalDistTrav+1,w
  1176  048B  00DF               	movwf	_totalDistTrav+1
  1177                           
  1178                           ;main.c: 143: lcdSetCursor(0x00);
  1179  048C  3000               	movlw	0
  1180  048D  120A  118A  27F7  120A  118A  	fcall	_lcdSetCursor
  1181                           
  1182                           ;main.c: 144: lcdWriteToDigitBCD(totalDistTrav);
  1183  0492  1283               	bcf	3,5	;RP0=0, select bank0
  1184  0493  1303               	bcf	3,6	;RP1=0, select bank0
  1185  0494  085F               	movf	_totalDistTrav+1,w
  1186  0495  00A4               	movwf	lcdWriteToDigitBCD@data+1
  1187  0496  085E               	movf	_totalDistTrav,w
  1188  0497  00A3               	movwf	lcdWriteToDigitBCD@data
  1189  0498  120A  118A  265A  120A  118A  	fcall	_lcdWriteToDigitBCD
  1190  049D  2C65               	goto	l2014
  1191  049E                     l2016:	
  1192                           
  1193                           ;main.c: 145: }
  1194                           ;main.c: 147: DriveDirect(250,250);
  1195  049E  30FA               	movlw	250
  1196  049F  1283               	bcf	3,5	;RP0=0, select bank0
  1197  04A0  1303               	bcf	3,6	;RP1=0, select bank0
  1198  04A1  00A1               	movwf	DriveDirect@VelocityRight
  1199  04A2  3000               	movlw	0
  1200  04A3  00A2               	movwf	DriveDirect@VelocityRight+1
  1201  04A4  30FA               	movlw	250
  1202  04A5  00A3               	movwf	DriveDirect@VelocityLeft
  1203  04A6  3000               	movlw	0
  1204  04A7  00A4               	movwf	DriveDirect@VelocityLeft+1
  1205  04A8  120A  158A  2773  120A  118A  	fcall	_DriveDirect
  1206  04AD                     l2026:	
  1207                           ;main.c: 148: while (totalDistTrav < 4000){
  1208                           
  1209  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  1210  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  1211  04AF  085F               	movf	_totalDistTrav+1,w
  1212  04B0  3A80               	xorlw	128
  1213  04B1  00FF               	movwf	127
  1214  04B2  308F               	movlw	143
  1215  04B3  027F               	subwf	127,w
  1216  04B4  1D03               	skipz
  1217  04B5  2CB8               	goto	u1775
  1218  04B6  30A0               	movlw	160
  1219  04B7  025E               	subwf	_totalDistTrav,w
  1220  04B8                     u1775:	
  1221  04B8  1803               	btfsc	3,0
  1222  04B9  2CE6               	goto	l2028
  1223                           
  1224                           ;main.c: 149: distTrav = getSensorData(19,2);
  1225  04BA  3002               	movlw	2
  1226  04BB  1283               	bcf	3,5	;RP0=0, select bank0
  1227  04BC  1303               	bcf	3,6	;RP1=0, select bank0
  1228  04BD  00BF               	movwf	??_main
  1229  04BE  083F               	movf	??_main,w
  1230  04BF  00A2               	movwf	getSensorData@bytes
  1231  04C0  3013               	movlw	19
  1232  04C1  120A  158A  26F4  120A  118A  	fcall	_getSensorData
  1233  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  1234  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  1235  04C8  0823               	movf	?_getSensorData+1,w
  1236  04C9  00D9               	movwf	_distTrav+1
  1237  04CA  0822               	movf	?_getSensorData,w
  1238  04CB  00D8               	movwf	_distTrav
  1239                           
  1240                           ;main.c: 150: totalDistTrav = (totalDistTrav + distTrav);
  1241  04CC  0858               	movf	_distTrav,w
  1242  04CD  075E               	addwf	_totalDistTrav,w
  1243  04CE  00DE               	movwf	_totalDistTrav
  1244  04CF  0859               	movf	_distTrav+1,w
  1245  04D0  1803               	skipnc
  1246  04D1  0A59               	incf	_distTrav+1,w
  1247  04D2  075F               	addwf	_totalDistTrav+1,w
  1248  04D3  00DF               	movwf	_totalDistTrav+1
  1249                           
  1250                           ;main.c: 151: lcdSetCursor(0x00);
  1251  04D4  3000               	movlw	0
  1252  04D5  120A  118A  27F7  120A  118A  	fcall	_lcdSetCursor
  1253                           
  1254                           ;main.c: 152: lcdWriteToDigitBCD(totalDistTrav);
  1255  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  1256  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  1257  04DC  085F               	movf	_totalDistTrav+1,w
  1258  04DD  00A4               	movwf	lcdWriteToDigitBCD@data+1
  1259  04DE  085E               	movf	_totalDistTrav,w
  1260  04DF  00A3               	movwf	lcdWriteToDigitBCD@data
  1261  04E0  120A  118A  265A  120A  118A  	fcall	_lcdWriteToDigitBCD
  1262  04E5  2CAD               	goto	l2026
  1263  04E6                     l2028:	
  1264                           
  1265                           ;main.c: 153: }
  1266                           ;main.c: 156: DriveDirect(0,0);
  1267  04E6  3000               	movlw	0
  1268  04E7  1283               	bcf	3,5	;RP0=0, select bank0
  1269  04E8  1303               	bcf	3,6	;RP1=0, select bank0
  1270  04E9  00A1               	movwf	DriveDirect@VelocityRight
  1271  04EA  00A2               	movwf	DriveDirect@VelocityRight+1
  1272  04EB  3000               	movlw	0
  1273  04EC  00A3               	movwf	DriveDirect@VelocityLeft
  1274  04ED  00A4               	movwf	DriveDirect@VelocityLeft+1
  1275  04EE  120A  158A  2773  120A  118A  	fcall	_DriveDirect
  1276  04F3                     l129:	
  1277                           
  1278                           ;main.c: 158: }
  1279                           ;main.c: 161: if (getSensorData(18,1) == 0b00000100){
  1280  04F3  1283               	bcf	3,5	;RP0=0, select bank0
  1281  04F4  1303               	bcf	3,6	;RP1=0, select bank0
  1282  04F5  01A2               	clrf	getSensorData@bytes
  1283  04F6  0AA2               	incf	getSensorData@bytes,f
  1284  04F7  3012               	movlw	18
  1285  04F8  120A  158A  26F4  120A  118A  	fcall	_getSensorData
  1286  04FD  3004               	movlw	4
  1287  04FE  1283               	bcf	3,5	;RP0=0, select bank0
  1288  04FF  1303               	bcf	3,6	;RP1=0, select bank0
  1289  0500  0622               	xorwf	?_getSensorData,w
  1290  0501  0423               	iorwf	?_getSensorData+1,w
  1291  0502  1D03               	btfss	3,2
  1292  0503  2D09               	goto	l136
  1293                           
  1294                           ;main.c: 162: initWallFollow();
  1295  0504  120A  158A  2685  120A  118A  	fcall	_initWallFollow
  1296  0509                     l136:	
  1297                           
  1298                           ;main.c: 197: }
  1299                           ;main.c: 204: if(getSensorData(18,1) == 0b00000101){
  1300  0509  1283               	bcf	3,5	;RP0=0, select bank0
  1301  050A  1303               	bcf	3,6	;RP1=0, select bank0
  1302  050B  01A2               	clrf	getSensorData@bytes
  1303  050C  0AA2               	incf	getSensorData@bytes,f
  1304  050D  3012               	movlw	18
  1305  050E  120A  158A  26F4  120A  118A  	fcall	_getSensorData
  1306  0513  3005               	movlw	5
  1307  0514  1283               	bcf	3,5	;RP0=0, select bank0
  1308  0515  1303               	bcf	3,6	;RP1=0, select bank0
  1309  0516  0622               	xorwf	?_getSensorData,w
  1310  0517  0423               	iorwf	?_getSensorData+1,w
  1311  0518  1D03               	btfss	3,2
  1312  0519  2C39               	goto	l1992
  1313                           
  1314                           ;main.c: 206: unsigned int ADC_CURRENT = 0;
  1315  051A  01C3               	clrf	main@ADC_CURRENT
  1316  051B  01C4               	clrf	main@ADC_CURRENT+1
  1317                           
  1318                           ;main.c: 207: unsigned int ADC_ADJUST = 0;
  1319  051C  01D2               	clrf	main@ADC_ADJUST
  1320  051D  01D3               	clrf	main@ADC_ADJUST+1
  1321                           
  1322                           ;main.c: 208: unsigned int CURRENT_SPEED_L = 90;
  1323  051E  305A               	movlw	90
  1324  051F  00CC               	movwf	main@CURRENT_SPEED_L
  1325  0520  3000               	movlw	0
  1326  0521  00CD               	movwf	main@CURRENT_SPEED_L+1
  1327                           
  1328                           ;main.c: 209: unsigned int ADJUSTED_SPEED_L = 0;
  1329  0522  01C5               	clrf	main@ADJUSTED_SPEED_L
  1330  0523  01C6               	clrf	main@ADJUSTED_SPEED_L+1
  1331                           
  1332                           ;main.c: 210: unsigned int CURRENT_SPEED_R = 80;
  1333  0524  3050               	movlw	80
  1334  0525  00CE               	movwf	main@CURRENT_SPEED_R
  1335  0526  3000               	movlw	0
  1336  0527  00CF               	movwf	main@CURRENT_SPEED_R+1
  1337                           
  1338                           ;main.c: 211: unsigned int ADJUSTED_SPEED_R = 0;
  1339  0528  01C7               	clrf	main@ADJUSTED_SPEED_R
  1340  0529  01C8               	clrf	main@ADJUSTED_SPEED_R+1
  1341                           
  1342                           ;main.c: 212: unsigned int timerLoop = 0;
  1343  052A  01CA               	clrf	main@timerLoop
  1344  052B  01CB               	clrf	main@timerLoop+1
  1345                           
  1346                           ;main.c: 216: unsigned int setADCdist = 250;
  1347  052C  30FA               	movlw	250
  1348  052D  00D4               	movwf	main@setADCdist
  1349  052E  3000               	movlw	0
  1350  052F  00D5               	movwf	main@setADCdist+1
  1351                           
  1352                           ;main.c: 217: unsigned int safetyCount = 0;
  1353  0530  01D0               	clrf	main@safetyCount
  1354  0531  01D1               	clrf	main@safetyCount+1
  1355                           
  1356                           ;main.c: 219: ADCMain();
  1357  0532  120A  158A  25F2  120A  118A  	fcall	_ADCMain
  1358                           
  1359                           ;main.c: 221: for(timerLoop = 0; timerLoop < 1200; timerLoop++) {
  1360  0537  1283               	bcf	3,5	;RP0=0, select bank0
  1361  0538  1303               	bcf	3,6	;RP1=0, select bank0
  1362  0539  01CA               	clrf	main@timerLoop
  1363  053A  01CB               	clrf	main@timerLoop+1
  1364  053B                     L1:	
  1365  053B  3004               	movlw	4
  1366  053C  024B               	subwf	main@timerLoop+1,w
  1367  053D  30B0               	movlw	176
  1368  053E  1903               	skipnz
  1369  053F  024A               	subwf	main@timerLoop,w
  1370  0540  1803               	btfsc	3,0
  1371  0541  2C39               	goto	l1992
  1372                           
  1373                           ;main.c: 224: if(adcRAW > setADCdist){
  1374  0542  0857               	movf	_adcRAW+1,w	;volatile
  1375  0543  0255               	subwf	main@setADCdist+1,w
  1376  0544  1D03               	skipz
  1377  0545  2D48               	goto	u1815
  1378  0546  0856               	movf	_adcRAW,w	;volatile
  1379  0547  0254               	subwf	main@setADCdist,w
  1380  0548                     u1815:	
  1381  0548  1C03               	btfss	3,0
  1382  0549  2DBA               	goto	l2068
  1383  054A  2DCA               	goto	l2074
  1384  054B                     l2056:	
  1385                           ;main.c: 225: while(adcRAW > setADCdist && safetyCount < 20){
  1386                           
  1387                           
  1388                           ;main.c: 226: ADCMain();
  1389  054B  120A  158A  25F2  120A  118A  	fcall	_ADCMain
  1390                           
  1391                           ;main.c: 227: ADC_ADJUST = adcRAW - setADCdist;
  1392  0550  1283               	bcf	3,5	;RP0=0, select bank0
  1393  0551  1303               	bcf	3,6	;RP1=0, select bank0
  1394  0552  0954               	comf	main@setADCdist,w
  1395  0553  00BF               	movwf	??_main
  1396  0554  0955               	comf	main@setADCdist+1,w
  1397  0555  00C0               	movwf	??_main+1
  1398  0556  0ABF               	incf	??_main,f
  1399  0557  1903               	skipnz
  1400  0558  0AC0               	incf	??_main+1,f
  1401  0559  0856               	movf	_adcRAW,w	;volatile
  1402  055A  073F               	addwf	??_main,w
  1403  055B  00D2               	movwf	main@ADC_ADJUST
  1404  055C  0857               	movf	_adcRAW+1,w	;volatile
  1405  055D  1803               	skipnc
  1406  055E  0A57               	incf	_adcRAW+1,w	;volatile
  1407  055F  0740               	addwf	??_main+1,w
  1408  0560  00D3               	movwf	main@ADC_ADJUST+1
  1409                           
  1410                           ;main.c: 228: ADJUSTED_SPEED_L = CURRENT_SPEED_L + (7/10)*ADC_ADJUST + (CURRENT_SPEED_L)
      +                          /(ADC_ADJUST+10);
  1411  0561  0853               	movf	main@ADC_ADJUST+1,w
  1412  0562  00A1               	movwf	___wmul@multiplier+1
  1413  0563  0852               	movf	main@ADC_ADJUST,w
  1414  0564  00A0               	movwf	___wmul@multiplier
  1415  0565  3000               	movlw	0
  1416  0566  00A2               	movwf	___wmul@multiplicand
  1417  0567  00A3               	movwf	___wmul@multiplicand+1
  1418  0568  120A  158A  2612  120A  118A  	fcall	___wmul
  1419  056D  1283               	bcf	3,5	;RP0=0, select bank0
  1420  056E  1303               	bcf	3,6	;RP1=0, select bank0
  1421  056F  0820               	movf	?___wmul,w
  1422  0570  00BF               	movwf	??_main
  1423  0571  0821               	movf	?___wmul+1,w
  1424  0572  00C0               	movwf	??_main+1
  1425  0573  0852               	movf	main@ADC_ADJUST,w
  1426  0574  3E0A               	addlw	10
  1427  0575  00A6               	movwf	___lwdiv@divisor
  1428  0576  0853               	movf	main@ADC_ADJUST+1,w
  1429  0577  1803               	skipnc
  1430  0578  3E01               	addlw	1
  1431  0579  3E00               	addlw	0
  1432  057A  00A7               	movwf	___lwdiv@divisor+1
  1433  057B  084D               	movf	main@CURRENT_SPEED_L+1,w
  1434  057C  00A9               	movwf	___lwdiv@dividend+1
  1435  057D  084C               	movf	main@CURRENT_SPEED_L,w
  1436  057E  00A8               	movwf	___lwdiv@dividend
  1437  057F  120A  158A  26B6  120A  118A  	fcall	___lwdiv
  1438  0584  1283               	bcf	3,5	;RP0=0, select bank0
  1439  0585  1303               	bcf	3,6	;RP1=0, select bank0
  1440  0586  0826               	movf	?___lwdiv,w
  1441  0587  073F               	addwf	??_main,w
  1442  0588  00C1               	movwf	??_main+2
  1443  0589  0827               	movf	?___lwdiv+1,w
  1444  058A  1803               	skipnc
  1445  058B  0A27               	incf	?___lwdiv+1,w
  1446  058C  0740               	addwf	??_main+1,w
  1447  058D  00C2               	movwf	??_main+3
  1448  058E  084C               	movf	main@CURRENT_SPEED_L,w
  1449  058F  0741               	addwf	??_main+2,w
  1450  0590  00C5               	movwf	main@ADJUSTED_SPEED_L
  1451  0591  084D               	movf	main@CURRENT_SPEED_L+1,w
  1452  0592  1803               	skipnc
  1453  0593  0A4D               	incf	main@CURRENT_SPEED_L+1,w
  1454  0594  0742               	addwf	??_main+3,w
  1455  0595  00C6               	movwf	main@ADJUSTED_SPEED_L+1
  1456                           
  1457                           ;main.c: 229: DriveDirect(CURRENT_SPEED_R,ADJUSTED_SPEED_L);
  1458  0596  084F               	movf	main@CURRENT_SPEED_R+1,w
  1459  0597  00A2               	movwf	DriveDirect@VelocityRight+1
  1460  0598  084E               	movf	main@CURRENT_SPEED_R,w
  1461  0599  00A1               	movwf	DriveDirect@VelocityRight
  1462  059A  0846               	movf	main@ADJUSTED_SPEED_L+1,w
  1463  059B  00A4               	movwf	DriveDirect@VelocityLeft+1
  1464  059C  0845               	movf	main@ADJUSTED_SPEED_L,w
  1465  059D  00A3               	movwf	DriveDirect@VelocityLeft
  1466  059E  120A  158A  2773  120A  118A  	fcall	_DriveDirect
  1467                           
  1468                           ;main.c: 230: _delay((unsigned long)((100)*(20000000/4000.0)));
  1469  05A3  3003               	movlw	3
  1470  05A4  1283               	bcf	3,5	;RP0=0, select bank0
  1471  05A5  1303               	bcf	3,6	;RP1=0, select bank0
  1472  05A6  00C1               	movwf	??_main+2
  1473  05A7  308A               	movlw	138
  1474  05A8  00C0               	movwf	??_main+1
  1475  05A9  3056               	movlw	86
  1476  05AA  00BF               	movwf	??_main
  1477  05AB                     u1937:	
  1478  05AB  0BBF               	decfsz	??_main,f
  1479  05AC  2DAB               	goto	u1937
  1480  05AD  0BC0               	decfsz	??_main+1,f
  1481  05AE  2DAB               	goto	u1937
  1482  05AF  0BC1               	decfsz	??_main+2,f
  1483  05B0  2DAB               	goto	u1937
  1484  05B1  2DB2               	nop2
  1485                           
  1486                           ;main.c: 231: safetyCount++;
  1487  05B2  3001               	movlw	1
  1488  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  1489  05B4  1303               	bcf	3,6	;RP1=0, select bank0
  1490  05B5  07D0               	addwf	main@safetyCount,f
  1491  05B6  1803               	skipnc
  1492  05B7  0AD1               	incf	main@safetyCount+1,f
  1493  05B8  3000               	movlw	0
  1494  05B9  07D1               	addwf	main@safetyCount+1,f
  1495  05BA                     l2068:	
  1496  05BA  0857               	movf	_adcRAW+1,w	;volatile
  1497  05BB  0255               	subwf	main@setADCdist+1,w
  1498  05BC  1D03               	skipz
  1499  05BD  2DC0               	goto	u1825
  1500  05BE  0856               	movf	_adcRAW,w	;volatile
  1501  05BF  0254               	subwf	main@setADCdist,w
  1502  05C0                     u1825:	
  1503  05C0  1803               	skipnc
  1504  05C1  2E51               	goto	l2094
  1505  05C2  3000               	movlw	0
  1506  05C3  0251               	subwf	main@safetyCount+1,w
  1507  05C4  3014               	movlw	20
  1508  05C5  1903               	skipnz
  1509  05C6  0250               	subwf	main@safetyCount,w
  1510  05C7  1C03               	skipc
  1511  05C8  2D4B               	goto	l2056
  1512  05C9  2E51               	goto	l2094
  1513  05CA                     l2074:	
  1514                           ;main.c: 235: } else if (adcRAW < setADCdist){
  1515                           
  1516                           ;main.c: 232: }
  1517                           ;main.c: 233: safetyCount = 0;
  1518                           
  1519  05CA  0855               	movf	main@setADCdist+1,w
  1520  05CB  0257               	subwf	_adcRAW+1,w	;volatile
  1521  05CC  1D03               	skipz
  1522  05CD  2DD0               	goto	u1845
  1523  05CE  0854               	movf	main@setADCdist,w
  1524  05CF  0256               	subwf	_adcRAW,w	;volatile
  1525  05D0                     u1845:	
  1526  05D0  1C03               	btfss	3,0
  1527  05D1  2E42               	goto	l2090
  1528  05D2  2E53               	goto	l2096
  1529  05D3                     l2078:	
  1530                           ;main.c: 236: while(adcRAW < setADCdist && safetyCount < 20){
  1531                           
  1532                           
  1533                           ;main.c: 237: ADCMain();
  1534  05D3  120A  158A  25F2  120A  118A  	fcall	_ADCMain
  1535                           
  1536                           ;main.c: 238: ADC_ADJUST = setADCdist - adcRAW;
  1537  05D8  1283               	bcf	3,5	;RP0=0, select bank0
  1538  05D9  1303               	bcf	3,6	;RP1=0, select bank0
  1539  05DA  0956               	comf	_adcRAW,w	;volatile
  1540  05DB  00BF               	movwf	??_main
  1541  05DC  0957               	comf	_adcRAW+1,w	;volatile
  1542  05DD  00C0               	movwf	??_main+1
  1543  05DE  0ABF               	incf	??_main,f
  1544  05DF  1903               	skipnz
  1545  05E0  0AC0               	incf	??_main+1,f
  1546  05E1  0854               	movf	main@setADCdist,w
  1547  05E2  073F               	addwf	??_main,w
  1548  05E3  00D2               	movwf	main@ADC_ADJUST
  1549  05E4  0855               	movf	main@setADCdist+1,w
  1550  05E5  1803               	skipnc
  1551  05E6  0A55               	incf	main@setADCdist+1,w
  1552  05E7  0740               	addwf	??_main+1,w
  1553  05E8  00D3               	movwf	main@ADC_ADJUST+1
  1554                           
  1555                           ;main.c: 239: ADJUSTED_SPEED_R = CURRENT_SPEED_R + (7/10)*ADC_ADJUST + (CURRENT_SPEED_R)
      +                          /(ADC_ADJUST+10);
  1556  05E9  0853               	movf	main@ADC_ADJUST+1,w
  1557  05EA  00A1               	movwf	___wmul@multiplier+1
  1558  05EB  0852               	movf	main@ADC_ADJUST,w
  1559  05EC  00A0               	movwf	___wmul@multiplier
  1560  05ED  3000               	movlw	0
  1561  05EE  00A2               	movwf	___wmul@multiplicand
  1562  05EF  00A3               	movwf	___wmul@multiplicand+1
  1563  05F0  120A  158A  2612  120A  118A  	fcall	___wmul
  1564  05F5  1283               	bcf	3,5	;RP0=0, select bank0
  1565  05F6  1303               	bcf	3,6	;RP1=0, select bank0
  1566  05F7  0820               	movf	?___wmul,w
  1567  05F8  00BF               	movwf	??_main
  1568  05F9  0821               	movf	?___wmul+1,w
  1569  05FA  00C0               	movwf	??_main+1
  1570  05FB  0852               	movf	main@ADC_ADJUST,w
  1571  05FC  3E0A               	addlw	10
  1572  05FD  00A6               	movwf	___lwdiv@divisor
  1573  05FE  0853               	movf	main@ADC_ADJUST+1,w
  1574  05FF  1803               	skipnc
  1575  0600  3E01               	addlw	1
  1576  0601  3E00               	addlw	0
  1577  0602  00A7               	movwf	___lwdiv@divisor+1
  1578  0603  084F               	movf	main@CURRENT_SPEED_R+1,w
  1579  0604  00A9               	movwf	___lwdiv@dividend+1
  1580  0605  084E               	movf	main@CURRENT_SPEED_R,w
  1581  0606  00A8               	movwf	___lwdiv@dividend
  1582  0607  120A  158A  26B6  120A  118A  	fcall	___lwdiv
  1583  060C  1283               	bcf	3,5	;RP0=0, select bank0
  1584  060D  1303               	bcf	3,6	;RP1=0, select bank0
  1585  060E  0826               	movf	?___lwdiv,w
  1586  060F  073F               	addwf	??_main,w
  1587  0610  00C1               	movwf	??_main+2
  1588  0611  0827               	movf	?___lwdiv+1,w
  1589  0612  1803               	skipnc
  1590  0613  0A27               	incf	?___lwdiv+1,w
  1591  0614  0740               	addwf	??_main+1,w
  1592  0615  00C2               	movwf	??_main+3
  1593  0616  084E               	movf	main@CURRENT_SPEED_R,w
  1594  0617  0741               	addwf	??_main+2,w
  1595  0618  00C7               	movwf	main@ADJUSTED_SPEED_R
  1596  0619  084F               	movf	main@CURRENT_SPEED_R+1,w
  1597  061A  1803               	skipnc
  1598  061B  0A4F               	incf	main@CURRENT_SPEED_R+1,w
  1599  061C  0742               	addwf	??_main+3,w
  1600  061D  00C8               	movwf	main@ADJUSTED_SPEED_R+1
  1601                           
  1602                           ;main.c: 240: DriveDirect(ADJUSTED_SPEED_R,CURRENT_SPEED_L);
  1603  061E  0848               	movf	main@ADJUSTED_SPEED_R+1,w
  1604  061F  00A2               	movwf	DriveDirect@VelocityRight+1
  1605  0620  0847               	movf	main@ADJUSTED_SPEED_R,w
  1606  0621  00A1               	movwf	DriveDirect@VelocityRight
  1607  0622  084D               	movf	main@CURRENT_SPEED_L+1,w
  1608  0623  00A4               	movwf	DriveDirect@VelocityLeft+1
  1609  0624  084C               	movf	main@CURRENT_SPEED_L,w
  1610  0625  00A3               	movwf	DriveDirect@VelocityLeft
  1611  0626  120A  158A  2773  120A  118A  	fcall	_DriveDirect
  1612                           
  1613                           ;main.c: 241: _delay((unsigned long)((100)*(20000000/4000.0)));
  1614  062B  3003               	movlw	3
  1615  062C  1283               	bcf	3,5	;RP0=0, select bank0
  1616  062D  1303               	bcf	3,6	;RP1=0, select bank0
  1617  062E  00C1               	movwf	??_main+2
  1618  062F  308A               	movlw	138
  1619  0630  00C0               	movwf	??_main+1
  1620  0631  3056               	movlw	86
  1621  0632  00BF               	movwf	??_main
  1622  0633                     u1947:	
  1623  0633  0BBF               	decfsz	??_main,f
  1624  0634  2E33               	goto	u1947
  1625  0635  0BC0               	decfsz	??_main+1,f
  1626  0636  2E33               	goto	u1947
  1627  0637  0BC1               	decfsz	??_main+2,f
  1628  0638  2E33               	goto	u1947
  1629  0639  2E3A               	nop2
  1630                           
  1631                           ;main.c: 242: safetyCount++;
  1632  063A  3001               	movlw	1
  1633  063B  1283               	bcf	3,5	;RP0=0, select bank0
  1634  063C  1303               	bcf	3,6	;RP1=0, select bank0
  1635  063D  07D0               	addwf	main@safetyCount,f
  1636  063E  1803               	skipnc
  1637  063F  0AD1               	incf	main@safetyCount+1,f
  1638  0640  3000               	movlw	0
  1639  0641  07D1               	addwf	main@safetyCount+1,f
  1640  0642                     l2090:	
  1641  0642  0855               	movf	main@setADCdist+1,w
  1642  0643  0257               	subwf	_adcRAW+1,w	;volatile
  1643  0644  1D03               	skipz
  1644  0645  2E48               	goto	u1855
  1645  0646  0854               	movf	main@setADCdist,w
  1646  0647  0256               	subwf	_adcRAW,w	;volatile
  1647  0648                     u1855:	
  1648  0648  1803               	skipnc
  1649  0649  2E51               	goto	l2094
  1650  064A  3000               	movlw	0
  1651  064B  0251               	subwf	main@safetyCount+1,w
  1652  064C  3014               	movlw	20
  1653  064D  1903               	skipnz
  1654  064E  0250               	subwf	main@safetyCount,w
  1655  064F  1C03               	skipc
  1656  0650  2DD3               	goto	l2078
  1657  0651                     l2094:	
  1658                           
  1659                           ;main.c: 243: }
  1660                           ;main.c: 244: safetyCount = 0;
  1661  0651  01D0               	clrf	main@safetyCount
  1662  0652  01D1               	clrf	main@safetyCount+1
  1663  0653                     l2096:	
  1664  0653  3001               	movlw	1
  1665  0654  07CA               	addwf	main@timerLoop,f
  1666  0655  1803               	skipnc
  1667  0656  0ACB               	incf	main@timerLoop+1,f
  1668  0657  3000               	movlw	0
  1669  0658  07CB               	addwf	main@timerLoop+1,f
  1670  0659  2D3B               	goto	L1
  1671  065A                     __end_of_main:	
  1672                           
  1673                           	psect	text1
  1674  0DDA                     __ptext1:	
  1675 ;; *************** function _setupSPI *****************
  1676 ;; Defined at:
  1677 ;;		line 4 in file "SPI.c"
  1678 ;; Parameters:    Size  Location     Type
  1679 ;;		None
  1680 ;; Auto vars:     Size  Location     Type
  1681 ;;		None
  1682 ;; Return value:  Size  Location     Type
  1683 ;;                  1    wreg      void 
  1684 ;; Registers used:
  1685 ;;		wreg, status,2
  1686 ;; Tracked objects:
  1687 ;;		On entry : 0/0
  1688 ;;		On exit  : 0/0
  1689 ;;		Unchanged: 0/0
  1690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1691 ;;      Params:         0       0       0       0       0
  1692 ;;      Locals:         0       0       0       0       0
  1693 ;;      Temps:          0       0       0       0       0
  1694 ;;      Totals:         0       0       0       0       0
  1695 ;;Total ram usage:        0 bytes
  1696 ;; Hardware stack levels used:    1
  1697 ;; Hardware stack levels required when called:    2
  1698 ;; This function calls:
  1699 ;;		Nothing
  1700 ;; This function is called by:
  1701 ;;		_main
  1702 ;; This function uses a non-reentrant model
  1703 ;;
  1704                           
  1705                           
  1706                           ;psect for function _setupSPI
  1707  0DDA                     _setupSPI:	
  1708                           
  1709                           ;SPI.c: 6: TRISB = 0b00000000;
  1710                           
  1711                           ;incstack = 0
  1712                           ; Regs used in _setupSPI: [wreg+status,2]
  1713  0DDA  1683               	bsf	3,5	;RP0=1, select bank1
  1714  0DDB  1303               	bcf	3,6	;RP1=0, select bank1
  1715  0DDC  0186               	clrf	6	;volatile
  1716                           
  1717                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  1718  0DDD  3040               	movlw	64
  1719  0DDE  0094               	movwf	20	;volatile
  1720                           
  1721                           ;SPI.c: 9: SSPCON = 0b00100000;
  1722  0DDF  3020               	movlw	32
  1723  0DE0  1283               	bcf	3,5	;RP0=0, select bank0
  1724  0DE1  1303               	bcf	3,6	;RP1=0, select bank0
  1725  0DE2  0094               	movwf	20	;volatile
  1726                           
  1727                           ;SPI.c: 10: TRISC = 0b11010000;
  1728  0DE3  30D0               	movlw	208
  1729  0DE4  1683               	bsf	3,5	;RP0=1, select bank1
  1730  0DE5  1303               	bcf	3,6	;RP1=0, select bank1
  1731  0DE6  0087               	movwf	7	;volatile
  1732                           
  1733                           ;SPI.c: 11: PORTC = 0b00000011;
  1734  0DE7  3003               	movlw	3
  1735  0DE8  1283               	bcf	3,5	;RP0=0, select bank0
  1736  0DE9  1303               	bcf	3,6	;RP1=0, select bank0
  1737  0DEA  0087               	movwf	7	;volatile
  1738                           
  1739                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  1740  0DEB  3004               	movlw	4
  1741  0DEC  1683               	bsf	3,5	;RP0=1, select bank1
  1742  0DED  1303               	bcf	3,6	;RP1=0, select bank1
  1743  0DEE  0081               	movwf	1	;volatile
  1744                           
  1745                           ;SPI.c: 16: TMR0IE = 1;
  1746  0DEF  168B               	bsf	11,5	;volatile
  1747                           
  1748                           ;SPI.c: 18: (GIE = 1);
  1749  0DF0  178B               	bsf	11,7	;volatile
  1750  0DF1  0008               	return
  1751  0DF2                     __end_of_setupSPI:	
  1752                           
  1753                           	psect	text2
  1754  0E5C                     __ptext2:	
  1755 ;; *************** function _setupLCD *****************
  1756 ;; Defined at:
  1757 ;;		line 86 in file "LCD.c"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;		None
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;		None
  1762 ;; Return value:  Size  Location     Type
  1763 ;;                  1    wreg      void 
  1764 ;; Registers used:
  1765 ;;		wreg, status,2, status,0, pclath, cstack
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1771 ;;      Params:         0       0       0       0       0
  1772 ;;      Locals:         0       0       0       0       0
  1773 ;;      Temps:          0       0       0       0       0
  1774 ;;      Totals:         0       0       0       0       0
  1775 ;;Total ram usage:        0 bytes
  1776 ;; Hardware stack levels used:    1
  1777 ;; Hardware stack levels required when called:    3
  1778 ;; This function calls:
  1779 ;;		_lcdWriteControl
  1780 ;; This function is called by:
  1781 ;;		_main
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784                           
  1785                           
  1786                           ;psect for function _setupLCD
  1787  0E5C                     _setupLCD:	
  1788                           
  1789                           ;LCD.c: 88: ADCON1 = 0b00000010;
  1790                           
  1791                           ;incstack = 0
  1792                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  1793  0E5C  3002               	movlw	2
  1794  0E5D  1683               	bsf	3,5	;RP0=1, select bank1
  1795  0E5E  1303               	bcf	3,6	;RP1=0, select bank1
  1796  0E5F  009F               	movwf	31	;volatile
  1797                           
  1798                           ;LCD.c: 90: PORTD = 0;
  1799  0E60  1283               	bcf	3,5	;RP0=0, select bank0
  1800  0E61  1303               	bcf	3,6	;RP1=0, select bank0
  1801  0E62  0188               	clrf	8	;volatile
  1802                           
  1803                           ;LCD.c: 91: PORTE = 0;
  1804  0E63  0189               	clrf	9	;volatile
  1805                           
  1806                           ;LCD.c: 93: TRISD = 0b00000000;
  1807  0E64  1683               	bsf	3,5	;RP0=1, select bank1
  1808  0E65  1303               	bcf	3,6	;RP1=0, select bank1
  1809  0E66  0188               	clrf	8	;volatile
  1810                           
  1811                           ;LCD.c: 94: TRISE = 0b00000000;
  1812  0E67  0189               	clrf	9	;volatile
  1813                           
  1814                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  1815  0E68  3001               	movlw	1
  1816  0E69  120A  158A  25B0  120A  158A  	fcall	_lcdWriteControl
  1817                           
  1818                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  1819  0E6E  3038               	movlw	56
  1820  0E6F  120A  158A  25B0  120A  158A  	fcall	_lcdWriteControl
  1821                           
  1822                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  1823  0E74  300C               	movlw	12
  1824  0E75  120A  158A  25B0  120A  158A  	fcall	_lcdWriteControl
  1825                           
  1826                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  1827  0E7A  3006               	movlw	6
  1828  0E7B  120A  158A  25B0  120A  158A  	fcall	_lcdWriteControl
  1829                           
  1830                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  1831  0E80  3002               	movlw	2
  1832  0E81  120A  158A  25B0   	fcall	_lcdWriteControl
  1833  0E84  0008               	return
  1834  0E85                     __end_of_setupLCD:	
  1835                           
  1836                           	psect	text3
  1837  0DC4                     __ptext3:	
  1838 ;; *************** function _setupADC *****************
  1839 ;; Defined at:
  1840 ;;		line 8 in file "ADC.c"
  1841 ;; Parameters:    Size  Location     Type
  1842 ;;		None
  1843 ;; Auto vars:     Size  Location     Type
  1844 ;;		None
  1845 ;; Return value:  Size  Location     Type
  1846 ;;                  1    wreg      void 
  1847 ;; Registers used:
  1848 ;;		wreg, status,2
  1849 ;; Tracked objects:
  1850 ;;		On entry : 0/0
  1851 ;;		On exit  : 0/0
  1852 ;;		Unchanged: 0/0
  1853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1854 ;;      Params:         0       0       0       0       0
  1855 ;;      Locals:         0       0       0       0       0
  1856 ;;      Temps:          0       1       0       0       0
  1857 ;;      Totals:         0       1       0       0       0
  1858 ;;Total ram usage:        1 bytes
  1859 ;; Hardware stack levels used:    1
  1860 ;; Hardware stack levels required when called:    2
  1861 ;; This function calls:
  1862 ;;		Nothing
  1863 ;; This function is called by:
  1864 ;;		_main
  1865 ;; This function uses a non-reentrant model
  1866 ;;
  1867                           
  1868                           
  1869                           ;psect for function _setupADC
  1870  0DC4                     _setupADC:	
  1871                           
  1872                           ;ADC.c: 9: PORTA = 0;
  1873                           
  1874                           ;incstack = 0
  1875                           ; Regs used in _setupADC: [wreg+status,2]
  1876  0DC4  1283               	bcf	3,5	;RP0=0, select bank0
  1877  0DC5  1303               	bcf	3,6	;RP1=0, select bank0
  1878  0DC6  0185               	clrf	5	;volatile
  1879                           
  1880                           ;ADC.c: 10: TRISA = 0b11111111;
  1881  0DC7  30FF               	movlw	255
  1882  0DC8  1683               	bsf	3,5	;RP0=1, select bank1
  1883  0DC9  1303               	bcf	3,6	;RP1=0, select bank1
  1884  0DCA  0085               	movwf	5	;volatile
  1885                           
  1886                           ;ADC.c: 13: ADCON0 = 0b10001001;
  1887  0DCB  3089               	movlw	137
  1888  0DCC  1283               	bcf	3,5	;RP0=0, select bank0
  1889  0DCD  1303               	bcf	3,6	;RP1=0, select bank0
  1890  0DCE  009F               	movwf	31	;volatile
  1891                           
  1892                           ;ADC.c: 14: ADCON1 = 0b00000010;
  1893  0DCF  3002               	movlw	2
  1894  0DD0  1683               	bsf	3,5	;RP0=1, select bank1
  1895  0DD1  1303               	bcf	3,6	;RP1=0, select bank1
  1896  0DD2  009F               	movwf	31	;volatile
  1897                           
  1898                           ;ADC.c: 16: _delay((unsigned long)((50)*(20000000/4000000.0)));
  1899  0DD3  3053               	movlw	83
  1900  0DD4  1283               	bcf	3,5	;RP0=0, select bank0
  1901  0DD5  1303               	bcf	3,6	;RP1=0, select bank0
  1902  0DD6  00A0               	movwf	??_setupADC
  1903  0DD7                     u1957:	
  1904  0DD7  0BA0               	decfsz	??_setupADC,f
  1905  0DD8  2DD7               	goto	u1957
  1906  0DD9  0008               	return
  1907  0DDA                     __end_of_setupADC:	
  1908                           
  1909                           	psect	text4
  1910  0D8E                     __ptext4:	
  1911 ;; *************** function _ser_init *****************
  1912 ;; Defined at:
  1913 ;;		line 5 in file "ser.c"
  1914 ;; Parameters:    Size  Location     Type
  1915 ;;		None
  1916 ;; Auto vars:     Size  Location     Type
  1917 ;;		None
  1918 ;; Return value:  Size  Location     Type
  1919 ;;                  1    wreg      void 
  1920 ;; Registers used:
  1921 ;;		wreg
  1922 ;; Tracked objects:
  1923 ;;		On entry : 0/0
  1924 ;;		On exit  : 0/0
  1925 ;;		Unchanged: 0/0
  1926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1927 ;;      Params:         0       0       0       0       0
  1928 ;;      Locals:         0       0       0       0       0
  1929 ;;      Temps:          0       0       0       0       0
  1930 ;;      Totals:         0       0       0       0       0
  1931 ;;Total ram usage:        0 bytes
  1932 ;; Hardware stack levels used:    1
  1933 ;; Hardware stack levels required when called:    2
  1934 ;; This function calls:
  1935 ;;		Nothing
  1936 ;; This function is called by:
  1937 ;;		_main
  1938 ;; This function uses a non-reentrant model
  1939 ;;
  1940                           
  1941                           
  1942                           ;psect for function _ser_init
  1943  0D8E                     _ser_init:	
  1944                           
  1945                           ;ser.c: 7: TXSTA = 0b00100100;
  1946                           
  1947                           ;incstack = 0
  1948                           ; Regs used in _ser_init: [wreg]
  1949  0D8E  3024               	movlw	36
  1950  0D8F  1683               	bsf	3,5	;RP0=1, select bank1
  1951  0D90  1303               	bcf	3,6	;RP1=0, select bank1
  1952  0D91  0098               	movwf	24	;volatile
  1953                           
  1954                           ;ser.c: 8: RCSTA = 0b10011000;
  1955  0D92  3098               	movlw	152
  1956  0D93  1283               	bcf	3,5	;RP0=0, select bank0
  1957  0D94  1303               	bcf	3,6	;RP1=0, select bank0
  1958  0D95  0098               	movwf	24	;volatile
  1959                           
  1960                           ;ser.c: 24: SPBRG = 20;
  1961  0D96  3014               	movlw	20
  1962  0D97  1683               	bsf	3,5	;RP0=1, select bank1
  1963  0D98  1303               	bcf	3,6	;RP1=0, select bank1
  1964  0D99  0099               	movwf	25	;volatile
  1965                           
  1966                           ;ser.c: 26: PEIE = 1;
  1967  0D9A  170B               	bsf	11,6	;volatile
  1968                           
  1969                           ;ser.c: 27: (GIE = 1);
  1970  0D9B  178B               	bsf	11,7	;volatile
  1971  0D9C  0008               	return
  1972  0D9D                     __end_of_ser_init:	
  1973                           
  1974                           	psect	text5
  1975  0E85                     __ptext5:	
  1976 ;; *************** function _initWallFollow *****************
  1977 ;; Defined at:
  1978 ;;		line 76 in file "main.c"
  1979 ;; Parameters:    Size  Location     Type
  1980 ;;		None
  1981 ;; Auto vars:     Size  Location     Type
  1982 ;;		None
  1983 ;; Return value:  Size  Location     Type
  1984 ;;                  1    wreg      void 
  1985 ;; Registers used:
  1986 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1992 ;;      Params:         0       0       0       0       0
  1993 ;;      Locals:         0       0       0       0       0
  1994 ;;      Temps:          0       2       0       0       0
  1995 ;;      Totals:         0       2       0       0       0
  1996 ;;Total ram usage:        2 bytes
  1997 ;; Hardware stack levels used:    1
  1998 ;; Hardware stack levels required when called:    4
  1999 ;; This function calls:
  2000 ;;		_setCCW
  2001 ;; This function is called by:
  2002 ;;		_main
  2003 ;; This function uses a non-reentrant model
  2004 ;;
  2005                           
  2006                           
  2007                           ;psect for function _initWallFollow
  2008  0E85                     _initWallFollow:	
  2009                           
  2010                           ;main.c: 79: adcClosest = 0;
  2011                           
  2012                           ;incstack = 0
  2013                           ; Regs used in _initWallFollow: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2014  0E85  1683               	bsf	3,5	;RP0=1, select bank1
  2015  0E86  1303               	bcf	3,6	;RP1=0, select bank1
  2016  0E87  01B2               	clrf	_adcClosest^(0+128)
  2017  0E88  01B3               	clrf	(_adcClosest+1)^(0+128)
  2018                           
  2019                           ;main.c: 80: setCCW();
  2020  0E89  120A  158A  2635  120A  158A  	fcall	_setCCW
  2021                           
  2022                           ;main.c: 81: for (loop = 0; loop < 400; loop++){
  2023  0E8E  1283               	bcf	3,5	;RP0=0, select bank0
  2024  0E8F  1303               	bcf	3,6	;RP1=0, select bank0
  2025  0E90  01DA               	clrf	_loop
  2026  0E91  01DB               	clrf	_loop+1
  2027  0E92                     L2:	
  2028  0E92  085B               	movf	_loop+1,w
  2029  0E93  3A80               	xorlw	128
  2030  0E94  00FF               	movwf	127
  2031  0E95  3081               	movlw	129
  2032  0E96  027F               	subwf	127,w
  2033  0E97  1D03               	skipz
  2034  0E98  2E9B               	goto	u1535
  2035  0E99  3090               	movlw	144
  2036  0E9A  025A               	subwf	_loop,w
  2037  0E9B                     u1535:	
  2038  0E9B  1803               	btfsc	3,0
  2039  0E9C  0008               	return
  2040                           
  2041                           ;main.c: 83: RC2 = 1; __nop(); RC2 = 0;;
  2042  0E9D  1283               	bcf	3,5	;RP0=0, select bank0
  2043  0E9E  1303               	bcf	3,6	;RP1=0, select bank0
  2044  0E9F  1507               	bsf	7,2	;volatile
  2045  0EA0  0000               	nop
  2046  0EA1  1283               	bcf	3,5	;RP0=0, select bank0
  2047  0EA2  1303               	bcf	3,6	;RP1=0, select bank0
  2048  0EA3  1107               	bcf	7,2	;volatile
  2049                           
  2050                           ;main.c: 84: _delay((unsigned long)((20)*(20000000/4000.0)));
  2051  0EA4  3082               	movlw	130
  2052  0EA5  00A7               	movwf	??_initWallFollow+1
  2053  0EA6  30DD               	movlw	221
  2054  0EA7  00A6               	movwf	??_initWallFollow
  2055  0EA8                     u1967:	
  2056  0EA8  0BA6               	decfsz	??_initWallFollow,f
  2057  0EA9  2EA8               	goto	u1967
  2058  0EAA  0BA7               	decfsz	??_initWallFollow+1,f
  2059  0EAB  2EA8               	goto	u1967
  2060  0EAC  2EAD               	nop2
  2061  0EAD  3001               	movlw	1
  2062  0EAE  1283               	bcf	3,5	;RP0=0, select bank0
  2063  0EAF  1303               	bcf	3,6	;RP1=0, select bank0
  2064  0EB0  07DA               	addwf	_loop,f
  2065  0EB1  1803               	skipnc
  2066  0EB2  0ADB               	incf	_loop+1,f
  2067  0EB3  3000               	movlw	0
  2068  0EB4  07DB               	addwf	_loop+1,f
  2069  0EB5  2E92               	goto	L2
  2070  0EB6                     __end_of_initWallFollow:	
  2071                           
  2072                           	psect	text6
  2073  0E35                     __ptext6:	
  2074 ;; *************** function _setCCW *****************
  2075 ;; Defined at:
  2076 ;;		line 13 in file "motor.c"
  2077 ;; Parameters:    Size  Location     Type
  2078 ;;		None
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;		None
  2081 ;; Return value:  Size  Location     Type
  2082 ;;                  1    wreg      void 
  2083 ;; Registers used:
  2084 ;;		wreg, status,2, status,0, pclath, cstack
  2085 ;; Tracked objects:
  2086 ;;		On entry : 0/0
  2087 ;;		On exit  : 0/0
  2088 ;;		Unchanged: 0/0
  2089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2090 ;;      Params:         0       0       0       0       0
  2091 ;;      Locals:         0       0       0       0       0
  2092 ;;      Temps:          0       3       0       0       0
  2093 ;;      Totals:         0       3       0       0       0
  2094 ;;Total ram usage:        3 bytes
  2095 ;; Hardware stack levels used:    1
  2096 ;; Hardware stack levels required when called:    3
  2097 ;; This function calls:
  2098 ;;		_spi_transfer
  2099 ;; This function is called by:
  2100 ;;		_initWallFollow
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           
  2105                           ;psect for function _setCCW
  2106  0E35                     _setCCW:	
  2107                           
  2108                           ;motor.c: 14: RC0 = 1; RC1 = 1;;
  2109                           
  2110                           ;incstack = 0
  2111                           ; Regs used in _setCCW: [wreg+status,2+status,0+pclath+cstack]
  2112  0E35  1283               	bcf	3,5	;RP0=0, select bank0
  2113  0E36  1303               	bcf	3,6	;RP1=0, select bank0
  2114  0E37  1407               	bsf	7,0	;volatile
  2115  0E38  1487               	bsf	7,1	;volatile
  2116                           
  2117                           ;motor.c: 15: _delay((unsigned long)((100)*(20000000/4000.0)));
  2118  0E39  3003               	movlw	3
  2119  0E3A  00A5               	movwf	??_setCCW+2
  2120  0E3B  308A               	movlw	138
  2121  0E3C  00A4               	movwf	??_setCCW+1
  2122  0E3D  3056               	movlw	86
  2123  0E3E  00A3               	movwf	??_setCCW
  2124  0E3F                     u1977:	
  2125  0E3F  0BA3               	decfsz	??_setCCW,f
  2126  0E40  2E3F               	goto	u1977
  2127  0E41  0BA4               	decfsz	??_setCCW+1,f
  2128  0E42  2E3F               	goto	u1977
  2129  0E43  0BA5               	decfsz	??_setCCW+2,f
  2130  0E44  2E3F               	goto	u1977
  2131  0E45  2E46               	nop2
  2132                           
  2133                           ;motor.c: 16: spi_transfer(0b00010000);
  2134  0E46  3010               	movlw	16
  2135  0E47  120A  158A  257F  120A  158A  	fcall	_spi_transfer
  2136                           
  2137                           ;motor.c: 17: _delay((unsigned long)((100)*(20000000/4000.0)));
  2138  0E4C  3003               	movlw	3
  2139  0E4D  1283               	bcf	3,5	;RP0=0, select bank0
  2140  0E4E  1303               	bcf	3,6	;RP1=0, select bank0
  2141  0E4F  00A5               	movwf	??_setCCW+2
  2142  0E50  308A               	movlw	138
  2143  0E51  00A4               	movwf	??_setCCW+1
  2144  0E52  3056               	movlw	86
  2145  0E53  00A3               	movwf	??_setCCW
  2146  0E54                     u1987:	
  2147  0E54  0BA3               	decfsz	??_setCCW,f
  2148  0E55  2E54               	goto	u1987
  2149  0E56  0BA4               	decfsz	??_setCCW+1,f
  2150  0E57  2E54               	goto	u1987
  2151  0E58  0BA5               	decfsz	??_setCCW+2,f
  2152  0E59  2E54               	goto	u1987
  2153  0E5A  2E5B               	nop2
  2154  0E5B  0008               	return
  2155  0E5C                     __end_of_setCCW:	
  2156                           
  2157                           	psect	text7
  2158  0D7F                     __ptext7:	
  2159 ;; *************** function _spi_transfer *****************
  2160 ;; Defined at:
  2161 ;;		line 22 in file "SPI.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;  data            1    wreg     unsigned char 
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;  data            1    2[BANK0 ] unsigned char 
  2166 ;;  temp            1    1[BANK0 ] unsigned char 
  2167 ;; Return value:  Size  Location     Type
  2168 ;;                  1    wreg      unsigned char 
  2169 ;; Registers used:
  2170 ;;		wreg, status,2
  2171 ;; Tracked objects:
  2172 ;;		On entry : 0/0
  2173 ;;		On exit  : 0/0
  2174 ;;		Unchanged: 0/0
  2175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2176 ;;      Params:         0       0       0       0       0
  2177 ;;      Locals:         0       2       0       0       0
  2178 ;;      Temps:          0       1       0       0       0
  2179 ;;      Totals:         0       3       0       0       0
  2180 ;;Total ram usage:        3 bytes
  2181 ;; Hardware stack levels used:    1
  2182 ;; Hardware stack levels required when called:    2
  2183 ;; This function calls:
  2184 ;;		Nothing
  2185 ;; This function is called by:
  2186 ;;		_main
  2187 ;;		_setCCW
  2188 ;;		_setCW
  2189 ;; This function uses a non-reentrant model
  2190 ;;
  2191                           
  2192                           
  2193                           ;psect for function _spi_transfer
  2194  0D7F                     _spi_transfer:	
  2195                           
  2196                           ;incstack = 0
  2197                           ; Regs used in _spi_transfer: [wreg+status,2]
  2198                           ;spi_transfer@data stored from wreg
  2199  0D7F  1283               	bcf	3,5	;RP0=0, select bank0
  2200  0D80  1303               	bcf	3,6	;RP1=0, select bank0
  2201  0D81  00A2               	movwf	spi_transfer@data
  2202                           
  2203                           ;SPI.c: 23: unsigned char temp = 0;
  2204  0D82  01A1               	clrf	spi_transfer@temp
  2205                           
  2206                           ;SPI.c: 25: SSPIF = 0;
  2207  0D83  118C               	bcf	12,3	;volatile
  2208                           
  2209                           ;SPI.c: 26: SSPBUF = data;
  2210  0D84  0822               	movf	spi_transfer@data,w
  2211  0D85  0093               	movwf	19	;volatile
  2212  0D86                     l274:	
  2213                           ;SPI.c: 28: while (SSPIF == 0);
  2214                           
  2215  0D86  1D8C               	btfss	12,3	;volatile
  2216  0D87  2D86               	goto	l274
  2217                           
  2218                           ;SPI.c: 29: temp = SSPBUF;
  2219  0D88  0813               	movf	19,w	;volatile
  2220  0D89  00A0               	movwf	??_spi_transfer
  2221  0D8A  0820               	movf	??_spi_transfer,w
  2222  0D8B  00A1               	movwf	spi_transfer@temp
  2223                           
  2224                           ;SPI.c: 30: SSPIF = 0;
  2225  0D8C  118C               	bcf	12,3	;volatile
  2226  0D8D  0008               	return
  2227  0D8E                     __end_of_spi_transfer:	
  2228                           ;SPI.c: 32: return temp;
  2229                           ;	Return value of _spi_transfer is never used
  2230                           
  2231                           
  2232                           	psect	text8
  2233  0EF4                     __ptext8:	
  2234 ;; *************** function _getSensorData *****************
  2235 ;; Defined at:
  2236 ;;		line 85 in file "ser.c"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;  packetID        1    wreg     unsigned char 
  2239 ;;  bytes           1    2[BANK0 ] unsigned char 
  2240 ;; Auto vars:     Size  Location     Type
  2241 ;;  packetID        1    8[BANK0 ] unsigned char 
  2242 ;;  sensor          2    6[BANK0 ] int 
  2243 ;; Return value:  Size  Location     Type
  2244 ;;                  2    2[BANK0 ] int 
  2245 ;; Registers used:
  2246 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2247 ;; Tracked objects:
  2248 ;;		On entry : 0/0
  2249 ;;		On exit  : 0/0
  2250 ;;		Unchanged: 0/0
  2251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2252 ;;      Params:         0       2       0       0       0
  2253 ;;      Locals:         0       3       0       0       0
  2254 ;;      Temps:          0       2       0       0       0
  2255 ;;      Totals:         0       7       0       0       0
  2256 ;;Total ram usage:        7 bytes
  2257 ;; Hardware stack levels used:    1
  2258 ;; Hardware stack levels required when called:    3
  2259 ;; This function calls:
  2260 ;;		_ser_getch
  2261 ;;		_ser_putch
  2262 ;; This function is called by:
  2263 ;;		_main
  2264 ;; This function uses a non-reentrant model
  2265 ;;
  2266                           
  2267                           
  2268                           ;psect for function _getSensorData
  2269  0EF4                     _getSensorData:	
  2270                           
  2271                           ;incstack = 0
  2272                           ; Regs used in _getSensorData: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2273                           ;getSensorData@packetID stored from wreg
  2274  0EF4  1283               	bcf	3,5	;RP0=0, select bank0
  2275  0EF5  1303               	bcf	3,6	;RP1=0, select bank0
  2276  0EF6  00A8               	movwf	getSensorData@packetID
  2277                           
  2278                           ;ser.c: 86: ser_putch(142);
  2279  0EF7  308E               	movlw	142
  2280  0EF8  120A  158A  2573  120A  158A  	fcall	_ser_putch
  2281                           
  2282                           ;ser.c: 87: ser_putch(packetID);
  2283  0EFD  1283               	bcf	3,5	;RP0=0, select bank0
  2284  0EFE  1303               	bcf	3,6	;RP1=0, select bank0
  2285  0EFF  0828               	movf	getSensorData@packetID,w
  2286  0F00  120A  158A  2573  120A  158A  	fcall	_ser_putch
  2287                           
  2288                           ;ser.c: 89: if (bytes == 2)
  2289  0F05  3002               	movlw	2
  2290  0F06  1283               	bcf	3,5	;RP0=0, select bank0
  2291  0F07  1303               	bcf	3,6	;RP1=0, select bank0
  2292  0F08  0622               	xorwf	getSensorData@bytes,w
  2293  0F09  1D03               	btfss	3,2
  2294  0F0A  2F16               	goto	l1864
  2295                           
  2296                           ;ser.c: 90: highByte = ser_getch();
  2297  0F0B  120A  158A  2569  120A  158A  	fcall	_ser_getch
  2298  0F10  1283               	bcf	3,5	;RP0=0, select bank0
  2299  0F11  1303               	bcf	3,6	;RP1=0, select bank0
  2300  0F12  00A4               	movwf	??_getSensorData
  2301  0F13  0824               	movf	??_getSensorData,w
  2302  0F14  00EF               	movwf	_highByte
  2303  0F15  2F17               	goto	l1866
  2304  0F16                     l1864:	
  2305                           
  2306                           ;ser.c: 91: else
  2307                           ;ser.c: 92: highByte = 0;
  2308  0F16  01EF               	clrf	_highByte
  2309  0F17                     l1866:	
  2310                           
  2311                           ;ser.c: 94: lowByte = ser_getch();
  2312  0F17  120A  158A  2569   	fcall	_ser_getch
  2313  0F1A  1283               	bcf	3,5	;RP0=0, select bank0
  2314  0F1B  1303               	bcf	3,6	;RP1=0, select bank0
  2315  0F1C  00A4               	movwf	??_getSensorData
  2316  0F1D  0824               	movf	??_getSensorData,w
  2317  0F1E  00EA               	movwf	_lowByte
  2318                           
  2319                           ;ser.c: 96: signed int sensor = (256*highByte + lowByte);
  2320  0F1F  086F               	movf	_highByte,w
  2321  0F20  00A4               	movwf	??_getSensorData
  2322  0F21  01A5               	clrf	??_getSensorData+1
  2323  0F22  0824               	movf	??_getSensorData,w
  2324  0F23  00A5               	movwf	??_getSensorData+1
  2325  0F24  01A4               	clrf	??_getSensorData
  2326  0F25  086A               	movf	_lowByte,w
  2327  0F26  0724               	addwf	??_getSensorData,w
  2328  0F27  00A6               	movwf	getSensorData@sensor
  2329  0F28  3000               	movlw	0
  2330  0F29  1803               	skipnc
  2331  0F2A  3001               	movlw	1
  2332  0F2B  0725               	addwf	??_getSensorData+1,w
  2333  0F2C  00A7               	movwf	getSensorData@sensor+1
  2334                           
  2335                           ;ser.c: 98: return sensor;
  2336  0F2D  0827               	movf	getSensorData@sensor+1,w
  2337  0F2E  00A3               	movwf	?_getSensorData+1
  2338  0F2F  0826               	movf	getSensorData@sensor,w
  2339  0F30  00A2               	movwf	?_getSensorData
  2340  0F31  0008               	return
  2341  0F32                     __end_of_getSensorData:	
  2342                           
  2343                           	psect	text9
  2344  0D69                     __ptext9:	
  2345 ;; *************** function _ser_getch *****************
  2346 ;; Defined at:
  2347 ;;		line 35 in file "ser.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;		None
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      unsigned char 
  2354 ;; Registers used:
  2355 ;;		wreg
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/0
  2358 ;;		On exit  : 0/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2361 ;;      Params:         0       0       0       0       0
  2362 ;;      Locals:         0       1       0       0       0
  2363 ;;      Temps:          0       1       0       0       0
  2364 ;;      Totals:         0       2       0       0       0
  2365 ;;Total ram usage:        2 bytes
  2366 ;; Hardware stack levels used:    1
  2367 ;; Hardware stack levels required when called:    2
  2368 ;; This function calls:
  2369 ;;		Nothing
  2370 ;; This function is called by:
  2371 ;;		_getSensorData
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           
  2376                           ;psect for function _ser_getch
  2377  0D69                     _ser_getch:	
  2378  0D69                     l349:	
  2379                           ;ser.c: 36: while(!RCIF);
  2380                           
  2381                           ;incstack = 0
  2382                           ; Regs used in _ser_getch: [wreg]
  2383                           
  2384  0D69  1283               	bcf	3,5	;RP0=0, select bank0
  2385  0D6A  1303               	bcf	3,6	;RP1=0, select bank0
  2386  0D6B  1E8C               	btfss	12,5	;volatile
  2387  0D6C  2D69               	goto	l349
  2388                           
  2389                           ;ser.c: 37: unsigned char rxbyte = RCREG;
  2390  0D6D  081A               	movf	26,w	;volatile
  2391  0D6E  00A0               	movwf	??_ser_getch
  2392  0D6F  0820               	movf	??_ser_getch,w
  2393  0D70  00A1               	movwf	ser_getch@rxbyte
  2394                           
  2395                           ;ser.c: 38: return rxbyte;
  2396  0D71  0821               	movf	ser_getch@rxbyte,w
  2397  0D72  0008               	return
  2398  0D73                     __end_of_ser_getch:	
  2399                           
  2400                           	psect	text10
  2401  0F73                     __ptext10:	
  2402 ;; *************** function _DriveDirect *****************
  2403 ;; Defined at:
  2404 ;;		line 54 in file "ser.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;  VelocityRigh    2    1[BANK0 ] int 
  2407 ;;  VelocityLeft    2    3[BANK0 ] int 
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;  data            2    8[BANK0 ] unsigned int 
  2410 ;;  data            2    6[BANK0 ] unsigned int 
  2411 ;; Return value:  Size  Location     Type
  2412 ;;                  1    wreg      void 
  2413 ;; Registers used:
  2414 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2415 ;; Tracked objects:
  2416 ;;		On entry : 0/0
  2417 ;;		On exit  : 0/0
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2420 ;;      Params:         0       4       0       0       0
  2421 ;;      Locals:         0       4       0       0       0
  2422 ;;      Temps:          0       1       0       0       0
  2423 ;;      Totals:         0       9       0       0       0
  2424 ;;Total ram usage:        9 bytes
  2425 ;; Hardware stack levels used:    1
  2426 ;; Hardware stack levels required when called:    3
  2427 ;; This function calls:
  2428 ;;		_ser_putch
  2429 ;; This function is called by:
  2430 ;;		_main
  2431 ;; This function uses a non-reentrant model
  2432 ;;
  2433                           
  2434                           
  2435                           ;psect for function _DriveDirect
  2436  0F73                     _DriveDirect:	
  2437                           
  2438                           ;ser.c: 55: RightSpeedH = 0;
  2439                           
  2440                           ;incstack = 0
  2441                           ; Regs used in _DriveDirect: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2442  0F73  1283               	bcf	3,5	;RP0=0, select bank0
  2443  0F74  1303               	bcf	3,6	;RP1=0, select bank0
  2444  0F75  01E5               	clrf	_RightSpeedH
  2445                           
  2446                           ;ser.c: 56: LeftSpeedH = 0;
  2447  0F76  01E0               	clrf	_LeftSpeedH
  2448                           
  2449                           ;ser.c: 58: if(VelocityRight > 255){
  2450  0F77  0822               	movf	DriveDirect@VelocityRight+1,w
  2451  0F78  3A80               	xorlw	128
  2452  0F79  00FF               	movwf	127
  2453  0F7A  3081               	movlw	129
  2454  0F7B  027F               	subwf	127,w
  2455  0F7C  1D03               	skipz
  2456  0F7D  2F80               	goto	u1565
  2457  0F7E  3000               	movlw	0
  2458  0F7F  0221               	subwf	DriveDirect@VelocityRight,w
  2459  0F80                     u1565:	
  2460  0F80  1C03               	skipc
  2461  0F81  2FA3               	goto	l1890
  2462                           
  2463                           ;ser.c: 59: unsigned int data = VelocityRight;
  2464  0F82  1283               	bcf	3,5	;RP0=0, select bank0
  2465  0F83  1303               	bcf	3,6	;RP1=0, select bank0
  2466  0F84  0822               	movf	DriveDirect@VelocityRight+1,w
  2467  0F85  00A7               	movwf	DriveDirect@data+1
  2468  0F86  0821               	movf	DriveDirect@VelocityRight,w
  2469  0F87  00A6               	movwf	DriveDirect@data
  2470                           
  2471                           ;ser.c: 60: for (RightSpeedH = 0; data > 255; RightSpeedH++){
  2472  0F88  01E5               	clrf	_RightSpeedH
  2473  0F89  3001               	movlw	1
  2474  0F8A  0227               	subwf	DriveDirect@data+1,w
  2475  0F8B  3000               	movlw	0
  2476  0F8C  1903               	skipnz
  2477  0F8D  0226               	subwf	DriveDirect@data,w
  2478  0F8E  1C03               	btfss	3,0
  2479  0F8F  2FA3               	goto	l1890
  2480  0F90                     l1886:	
  2481                           
  2482                           ;ser.c: 61: data = data - 256;
  2483  0F90  0826               	movf	DriveDirect@data,w
  2484  0F91  3E00               	addlw	0
  2485  0F92  00A6               	movwf	DriveDirect@data
  2486  0F93  0827               	movf	DriveDirect@data+1,w
  2487  0F94  1803               	skipnc
  2488  0F95  3E01               	addlw	1
  2489  0F96  3EFF               	addlw	255
  2490  0F97  00A7               	movwf	DriveDirect@data+1
  2491  0F98  3001               	movlw	1
  2492  0F99  00A5               	movwf	??_DriveDirect
  2493  0F9A  0825               	movf	??_DriveDirect,w
  2494  0F9B  07E5               	addwf	_RightSpeedH,f
  2495  0F9C  3001               	movlw	1
  2496  0F9D  0227               	subwf	DriveDirect@data+1,w
  2497  0F9E  3000               	movlw	0
  2498  0F9F  1903               	skipnz
  2499  0FA0  0226               	subwf	DriveDirect@data,w
  2500  0FA1  1803               	skipnc
  2501  0FA2  2F90               	goto	l1886
  2502  0FA3                     l1890:	
  2503                           
  2504                           ;ser.c: 62: }
  2505                           ;ser.c: 63: }
  2506                           ;ser.c: 64: RightSpeedL = VelocityRight;
  2507  0FA3  1283               	bcf	3,5	;RP0=0, select bank0
  2508  0FA4  1303               	bcf	3,6	;RP1=0, select bank0
  2509  0FA5  0821               	movf	DriveDirect@VelocityRight,w
  2510  0FA6  00A5               	movwf	??_DriveDirect
  2511  0FA7  0825               	movf	??_DriveDirect,w
  2512  0FA8  00E6               	movwf	_RightSpeedL
  2513                           
  2514                           ;ser.c: 67: if(VelocityLeft > 255){
  2515  0FA9  0824               	movf	DriveDirect@VelocityLeft+1,w
  2516  0FAA  3A80               	xorlw	128
  2517  0FAB  00FF               	movwf	127
  2518  0FAC  3081               	movlw	129
  2519  0FAD  027F               	subwf	127,w
  2520  0FAE  1D03               	skipz
  2521  0FAF  2FB2               	goto	u1595
  2522  0FB0  3000               	movlw	0
  2523  0FB1  0223               	subwf	DriveDirect@VelocityLeft,w
  2524  0FB2                     u1595:	
  2525  0FB2  1C03               	skipc
  2526  0FB3  2FD5               	goto	l1906
  2527                           
  2528                           ;ser.c: 68: unsigned int data = VelocityLeft;
  2529  0FB4  1283               	bcf	3,5	;RP0=0, select bank0
  2530  0FB5  1303               	bcf	3,6	;RP1=0, select bank0
  2531  0FB6  0824               	movf	DriveDirect@VelocityLeft+1,w
  2532  0FB7  00A9               	movwf	DriveDirect@data_247+1
  2533  0FB8  0823               	movf	DriveDirect@VelocityLeft,w
  2534  0FB9  00A8               	movwf	DriveDirect@data_247
  2535                           
  2536                           ;ser.c: 69: for (LeftSpeedH = 0; data > 255; LeftSpeedH++){
  2537  0FBA  01E0               	clrf	_LeftSpeedH
  2538  0FBB  3001               	movlw	1
  2539  0FBC  0229               	subwf	DriveDirect@data_247+1,w
  2540  0FBD  3000               	movlw	0
  2541  0FBE  1903               	skipnz
  2542  0FBF  0228               	subwf	DriveDirect@data_247,w
  2543  0FC0  1C03               	btfss	3,0
  2544  0FC1  2FD5               	goto	l1906
  2545  0FC2                     l1902:	
  2546                           
  2547                           ;ser.c: 70: data = data - 256;
  2548  0FC2  0828               	movf	DriveDirect@data_247,w
  2549  0FC3  3E00               	addlw	0
  2550  0FC4  00A8               	movwf	DriveDirect@data_247
  2551  0FC5  0829               	movf	DriveDirect@data_247+1,w
  2552  0FC6  1803               	skipnc
  2553  0FC7  3E01               	addlw	1
  2554  0FC8  3EFF               	addlw	255
  2555  0FC9  00A9               	movwf	DriveDirect@data_247+1
  2556  0FCA  3001               	movlw	1
  2557  0FCB  00A5               	movwf	??_DriveDirect
  2558  0FCC  0825               	movf	??_DriveDirect,w
  2559  0FCD  07E0               	addwf	_LeftSpeedH,f
  2560  0FCE  3001               	movlw	1
  2561  0FCF  0229               	subwf	DriveDirect@data_247+1,w
  2562  0FD0  3000               	movlw	0
  2563  0FD1  1903               	skipnz
  2564  0FD2  0228               	subwf	DriveDirect@data_247,w
  2565  0FD3  1803               	skipnc
  2566  0FD4  2FC2               	goto	l1902
  2567  0FD5                     l1906:	
  2568                           
  2569                           ;ser.c: 71: }
  2570                           ;ser.c: 72: }
  2571                           ;ser.c: 73: LeftSpeedL = VelocityLeft;
  2572  0FD5  1283               	bcf	3,5	;RP0=0, select bank0
  2573  0FD6  1303               	bcf	3,6	;RP1=0, select bank0
  2574  0FD7  0823               	movf	DriveDirect@VelocityLeft,w
  2575  0FD8  00A5               	movwf	??_DriveDirect
  2576  0FD9  0825               	movf	??_DriveDirect,w
  2577  0FDA  00E1               	movwf	_LeftSpeedL
  2578                           
  2579                           ;ser.c: 76: ser_putch(145);
  2580  0FDB  3091               	movlw	145
  2581  0FDC  120A  158A  2573  120A  158A  	fcall	_ser_putch
  2582                           
  2583                           ;ser.c: 77: ser_putch(RightSpeedH);
  2584  0FE1  1283               	bcf	3,5	;RP0=0, select bank0
  2585  0FE2  1303               	bcf	3,6	;RP1=0, select bank0
  2586  0FE3  0865               	movf	_RightSpeedH,w
  2587  0FE4  120A  158A  2573  120A  158A  	fcall	_ser_putch
  2588                           
  2589                           ;ser.c: 78: ser_putch(RightSpeedL);
  2590  0FE9  1283               	bcf	3,5	;RP0=0, select bank0
  2591  0FEA  1303               	bcf	3,6	;RP1=0, select bank0
  2592  0FEB  0866               	movf	_RightSpeedL,w
  2593  0FEC  120A  158A  2573  120A  158A  	fcall	_ser_putch
  2594                           
  2595                           ;ser.c: 79: ser_putch(LeftSpeedH);
  2596  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  2597  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  2598  0FF3  0860               	movf	_LeftSpeedH,w
  2599  0FF4  120A  158A  2573  120A  158A  	fcall	_ser_putch
  2600                           
  2601                           ;ser.c: 80: ser_putch(LeftSpeedL);
  2602  0FF9  1283               	bcf	3,5	;RP0=0, select bank0
  2603  0FFA  1303               	bcf	3,6	;RP1=0, select bank0
  2604  0FFB  0861               	movf	_LeftSpeedL,w
  2605  0FFC  120A  158A  2573   	fcall	_ser_putch
  2606  0FFF  0008               	return
  2607  1000                     __end_of_DriveDirect:	
  2608                           
  2609                           	psect	text11
  2610  0D73                     __ptext11:	
  2611 ;; *************** function _ser_putch *****************
  2612 ;; Defined at:
  2613 ;;		line 30 in file "ser.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;  c               1    wreg     unsigned char 
  2616 ;; Auto vars:     Size  Location     Type
  2617 ;;  c               1    0[BANK0 ] unsigned char 
  2618 ;; Return value:  Size  Location     Type
  2619 ;;                  1    wreg      void 
  2620 ;; Registers used:
  2621 ;;		wreg
  2622 ;; Tracked objects:
  2623 ;;		On entry : 0/0
  2624 ;;		On exit  : 0/0
  2625 ;;		Unchanged: 0/0
  2626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2627 ;;      Params:         0       0       0       0       0
  2628 ;;      Locals:         0       1       0       0       0
  2629 ;;      Temps:          0       0       0       0       0
  2630 ;;      Totals:         0       1       0       0       0
  2631 ;;Total ram usage:        1 bytes
  2632 ;; Hardware stack levels used:    1
  2633 ;; Hardware stack levels required when called:    2
  2634 ;; This function calls:
  2635 ;;		Nothing
  2636 ;; This function is called by:
  2637 ;;		_main
  2638 ;;		_DriveDirect
  2639 ;;		_getSensorData
  2640 ;;		_Drive
  2641 ;; This function uses a non-reentrant model
  2642 ;;
  2643                           
  2644                           
  2645                           ;psect for function _ser_putch
  2646  0D73                     _ser_putch:	
  2647                           
  2648                           ;incstack = 0
  2649                           ; Regs used in _ser_putch: [wreg]
  2650                           ;ser_putch@c stored from wreg
  2651  0D73  1283               	bcf	3,5	;RP0=0, select bank0
  2652  0D74  1303               	bcf	3,6	;RP1=0, select bank0
  2653  0D75  00A0               	movwf	ser_putch@c
  2654  0D76                     l343:	
  2655                           ;ser.c: 31: while(!TRMT);
  2656                           
  2657  0D76  1683               	bsf	3,5	;RP0=1, select bank1
  2658  0D77  1303               	bcf	3,6	;RP1=0, select bank1
  2659  0D78  1C98               	btfss	24,1	;volatile
  2660  0D79  2D76               	goto	l343
  2661                           
  2662                           ;ser.c: 32: TXREG=c;
  2663  0D7A  1283               	bcf	3,5	;RP0=0, select bank0
  2664  0D7B  1303               	bcf	3,6	;RP1=0, select bank0
  2665  0D7C  0820               	movf	ser_putch@c,w
  2666  0D7D  0099               	movwf	25	;volatile
  2667  0D7E  0008               	return
  2668  0D7F                     __end_of_ser_putch:	
  2669                           
  2670                           	psect	text12
  2671  0DF2                     __ptext12:	
  2672 ;; *************** function _ADCMain *****************
  2673 ;; Defined at:
  2674 ;;		line 19 in file "ADC.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;		None
  2677 ;; Auto vars:     Size  Location     Type
  2678 ;;		None
  2679 ;; Return value:  Size  Location     Type
  2680 ;;                  1    wreg      void 
  2681 ;; Registers used:
  2682 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2683 ;; Tracked objects:
  2684 ;;		On entry : 0/0
  2685 ;;		On exit  : 0/0
  2686 ;;		Unchanged: 0/0
  2687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2688 ;;      Params:         0       0       0       0       0
  2689 ;;      Locals:         0       0       0       0       0
  2690 ;;      Temps:          0       0       0       0       0
  2691 ;;      Totals:         0       0       0       0       0
  2692 ;;Total ram usage:        0 bytes
  2693 ;; Hardware stack levels used:    1
  2694 ;; Hardware stack levels required when called:    4
  2695 ;; This function calls:
  2696 ;;		_adcConvertMM
  2697 ;;		_getADC
  2698 ;;		_lcdSetCursor
  2699 ;;		_lcdWriteToDigitBCD
  2700 ;; This function is called by:
  2701 ;;		_main
  2702 ;; This function uses a non-reentrant model
  2703 ;;
  2704                           
  2705                           
  2706                           ;psect for function _ADCMain
  2707  0DF2                     _ADCMain:	
  2708                           
  2709                           ;ADC.c: 21: getADC();
  2710                           
  2711                           ;incstack = 0
  2712                           ; Regs used in _ADCMain: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2713  0DF2  120A  118A  2780  120A  158A  	fcall	_getADC
  2714                           
  2715                           ;ADC.c: 22: lcdSetCursor(0b10000000);
  2716  0DF7  3080               	movlw	128
  2717  0DF8  120A  118A  27F7  120A  158A  	fcall	_lcdSetCursor
  2718                           
  2719                           ;ADC.c: 23: lcdWriteToDigitBCD(adcRAW);
  2720  0DFD  1283               	bcf	3,5	;RP0=0, select bank0
  2721  0DFE  1303               	bcf	3,6	;RP1=0, select bank0
  2722  0DFF  0857               	movf	_adcRAW+1,w	;volatile
  2723  0E00  00A4               	movwf	lcdWriteToDigitBCD@data+1
  2724  0E01  0856               	movf	_adcRAW,w	;volatile
  2725  0E02  00A3               	movwf	lcdWriteToDigitBCD@data
  2726  0E03  120A  118A  265A  120A  158A  	fcall	_lcdWriteToDigitBCD
  2727                           
  2728                           ;ADC.c: 24: adcConvertMM(adcRAW);
  2729  0E08  1283               	bcf	3,5	;RP0=0, select bank0
  2730  0E09  1303               	bcf	3,6	;RP1=0, select bank0
  2731  0E0A  0857               	movf	_adcRAW+1,w	;volatile
  2732  0E0B  00B6               	movwf	adcConvertMM@adcRAW+1
  2733  0E0C  0856               	movf	_adcRAW,w	;volatile
  2734  0E0D  00B5               	movwf	adcConvertMM@adcRAW
  2735  0E0E  120A  118A  2039   	fcall	_adcConvertMM
  2736  0E11  0008               	return
  2737  0E12                     __end_of_ADCMain:	
  2738                           
  2739                           	psect	text13
  2740  065A                     __ptext13:	
  2741 ;; *************** function _lcdWriteToDigitBCD *****************
  2742 ;; Defined at:
  2743 ;;		line 42 in file "LCD.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;  data            2    3[BANK0 ] unsigned int 
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  2748 ;;  TenThouDigit    2   11[BANK0 ] unsigned int 
  2749 ;;  ThouDigit       2    9[BANK0 ] unsigned int 
  2750 ;;  HunsDigit       2    7[BANK0 ] unsigned int 
  2751 ;;  TensDigit       2    5[BANK0 ] unsigned int 
  2752 ;; Return value:  Size  Location     Type
  2753 ;;                  1    wreg      void 
  2754 ;; Registers used:
  2755 ;;		wreg, status,2, status,0, pclath, cstack
  2756 ;; Tracked objects:
  2757 ;;		On entry : 0/0
  2758 ;;		On exit  : 0/0
  2759 ;;		Unchanged: 0/0
  2760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2761 ;;      Params:         0       2       0       0       0
  2762 ;;      Locals:         0      10       0       0       0
  2763 ;;      Temps:          0       0       0       0       0
  2764 ;;      Totals:         0      12       0       0       0
  2765 ;;Total ram usage:       12 bytes
  2766 ;; Hardware stack levels used:    1
  2767 ;; Hardware stack levels required when called:    3
  2768 ;; This function calls:
  2769 ;;		_lcdWriteData
  2770 ;; This function is called by:
  2771 ;;		_main
  2772 ;;		_ADCMain
  2773 ;; This function uses a non-reentrant model
  2774 ;;
  2775                           
  2776                           
  2777                           ;psect for function _lcdWriteToDigitBCD
  2778  065A                     _lcdWriteToDigitBCD:	
  2779                           
  2780                           ;LCD.c: 43: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  2781                           ;LCD.c: 46: OnesDigit = data;
  2782                           
  2783                           ;incstack = 0
  2784                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  2785  065A  1283               	bcf	3,5	;RP0=0, select bank0
  2786  065B  1303               	bcf	3,6	;RP1=0, select bank0
  2787  065C  0824               	movf	lcdWriteToDigitBCD@data+1,w
  2788  065D  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2789  065E  0823               	movf	lcdWriteToDigitBCD@data,w
  2790  065F  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  2791                           
  2792                           ;LCD.c: 47: TensDigit = 0;
  2793  0660  01A5               	clrf	lcdWriteToDigitBCD@TensDigit
  2794  0661  01A6               	clrf	lcdWriteToDigitBCD@TensDigit+1
  2795                           
  2796                           ;LCD.c: 48: HunsDigit = 0;
  2797  0662  01A7               	clrf	lcdWriteToDigitBCD@HunsDigit
  2798  0663  01A8               	clrf	lcdWriteToDigitBCD@HunsDigit+1
  2799                           
  2800                           ;LCD.c: 49: ThouDigit = 0;
  2801  0664  01A9               	clrf	lcdWriteToDigitBCD@ThouDigit
  2802  0665  01AA               	clrf	lcdWriteToDigitBCD@ThouDigit+1
  2803                           
  2804                           ;LCD.c: 50: TenThouDigit = 0;
  2805  0666  01AB               	clrf	lcdWriteToDigitBCD@TenThouDigit
  2806  0667  01AC               	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  2807  0668                     l1666:	
  2808                           ;LCD.c: 53: while (OnesDigit >= 10000){
  2809                           
  2810  0668  3027               	movlw	39
  2811  0669  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2812  066A  3010               	movlw	16
  2813  066B  1903               	skipnz
  2814  066C  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2815  066D  1C03               	btfss	3,0
  2816  066E  2E8C               	goto	l1672
  2817                           
  2818                           ;LCD.c: 54: OnesDigit = OnesDigit - 10000;
  2819  066F  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2820  0670  3EF0               	addlw	240
  2821  0671  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  2822  0672  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2823  0673  1803               	skipnc
  2824  0674  3E01               	addlw	1
  2825  0675  3ED8               	addlw	216
  2826  0676  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2827                           
  2828                           ;LCD.c: 55: TenThouDigit++;
  2829  0677  3001               	movlw	1
  2830  0678  07AB               	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  2831  0679  1803               	skipnc
  2832  067A  0AAC               	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2833  067B  3000               	movlw	0
  2834  067C  07AC               	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  2835  067D  2E68               	goto	l1666
  2836  067E                     l1668:	
  2837                           ;LCD.c: 56: }
  2838                           ;LCD.c: 58: while (OnesDigit >= 1000){
  2839                           
  2840                           
  2841                           ;LCD.c: 59: OnesDigit = OnesDigit - 1000;
  2842  067E  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2843  067F  3E18               	addlw	24
  2844  0680  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  2845  0681  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2846  0682  1803               	skipnc
  2847  0683  3E01               	addlw	1
  2848  0684  3EFC               	addlw	252
  2849  0685  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2850                           
  2851                           ;LCD.c: 60: ThouDigit++;
  2852  0686  3001               	movlw	1
  2853  0687  07A9               	addwf	lcdWriteToDigitBCD@ThouDigit,f
  2854  0688  1803               	skipnc
  2855  0689  0AAA               	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  2856  068A  3000               	movlw	0
  2857  068B  07AA               	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  2858  068C                     l1672:	
  2859  068C  3003               	movlw	3
  2860  068D  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2861  068E  30E8               	movlw	232
  2862  068F  1903               	skipnz
  2863  0690  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2864  0691  1C03               	btfss	3,0
  2865  0692  2EA2               	goto	l1678
  2866  0693  2E7E               	goto	l1668
  2867  0694                     l1674:	
  2868                           ;LCD.c: 61: }
  2869                           ;LCD.c: 63: while (OnesDigit >= 100){
  2870                           
  2871                           
  2872                           ;LCD.c: 64: OnesDigit = OnesDigit - 100;
  2873  0694  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2874  0695  3E9C               	addlw	156
  2875  0696  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  2876  0697  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2877  0698  1803               	skipnc
  2878  0699  3E01               	addlw	1
  2879  069A  3EFF               	addlw	255
  2880  069B  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2881                           
  2882                           ;LCD.c: 65: HunsDigit++;
  2883  069C  3001               	movlw	1
  2884  069D  07A7               	addwf	lcdWriteToDigitBCD@HunsDigit,f
  2885  069E  1803               	skipnc
  2886  069F  0AA8               	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  2887  06A0  3000               	movlw	0
  2888  06A1  07A8               	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  2889  06A2                     l1678:	
  2890  06A2  3000               	movlw	0
  2891  06A3  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2892  06A4  3064               	movlw	100
  2893  06A5  1903               	skipnz
  2894  06A6  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2895  06A7  1C03               	btfss	3,0
  2896  06A8  2EB8               	goto	l1684
  2897  06A9  2E94               	goto	l1674
  2898  06AA                     l1680:	
  2899                           ;LCD.c: 66: }
  2900                           ;LCD.c: 68: while (OnesDigit >= 10){
  2901                           
  2902                           
  2903                           ;LCD.c: 69: OnesDigit = OnesDigit - 10;
  2904  06AA  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2905  06AB  3EF6               	addlw	246
  2906  06AC  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  2907  06AD  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  2908  06AE  1803               	skipnc
  2909  06AF  3E01               	addlw	1
  2910  06B0  3EFF               	addlw	255
  2911  06B1  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  2912                           
  2913                           ;LCD.c: 70: TensDigit++;
  2914  06B2  3001               	movlw	1
  2915  06B3  07A5               	addwf	lcdWriteToDigitBCD@TensDigit,f
  2916  06B4  1803               	skipnc
  2917  06B5  0AA6               	incf	lcdWriteToDigitBCD@TensDigit+1,f
  2918  06B6  3000               	movlw	0
  2919  06B7  07A6               	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  2920  06B8                     l1684:	
  2921  06B8  3000               	movlw	0
  2922  06B9  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  2923  06BA  300A               	movlw	10
  2924  06BB  1903               	skipnz
  2925  06BC  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  2926  06BD  1803               	skipnc
  2927  06BE  2EAA               	goto	l1680
  2928                           
  2929                           ;LCD.c: 71: }
  2930                           ;LCD.c: 73: if (TenThouDigit > 0)
  2931  06BF  082B               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  2932  06C0  042C               	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  2933  06C1  1903               	btfsc	3,2
  2934  06C2  2ECA               	goto	l1690
  2935                           
  2936                           ;LCD.c: 74: lcdWriteData((unsigned int)TenThouDigit + 48);
  2937  06C3  082B               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  2938  06C4  3E30               	addlw	48
  2939  06C5  120A  158A  259D  120A  118A  	fcall	_lcdWriteData
  2940  06CA                     l1690:	
  2941                           
  2942                           ;LCD.c: 76: if (ThouDigit > 0)
  2943  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  2944  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  2945  06CC  0829               	movf	lcdWriteToDigitBCD@ThouDigit,w
  2946  06CD  042A               	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  2947  06CE  1903               	btfsc	3,2
  2948  06CF  2ED7               	goto	l226
  2949                           
  2950                           ;LCD.c: 77: lcdWriteData((unsigned int)ThouDigit + 48);
  2951  06D0  0829               	movf	lcdWriteToDigitBCD@ThouDigit,w
  2952  06D1  3E30               	addlw	48
  2953  06D2  120A  158A  259D  120A  118A  	fcall	_lcdWriteData
  2954  06D7                     l226:	
  2955                           
  2956                           ;LCD.c: 79: lcdWriteData((unsigned int)HunsDigit + 48);
  2957  06D7  1283               	bcf	3,5	;RP0=0, select bank0
  2958  06D8  1303               	bcf	3,6	;RP1=0, select bank0
  2959  06D9  0827               	movf	lcdWriteToDigitBCD@HunsDigit,w
  2960  06DA  3E30               	addlw	48
  2961  06DB  120A  158A  259D  120A  118A  	fcall	_lcdWriteData
  2962                           
  2963                           ;LCD.c: 80: lcdWriteData((unsigned int)TensDigit + 48);
  2964  06E0  1283               	bcf	3,5	;RP0=0, select bank0
  2965  06E1  1303               	bcf	3,6	;RP1=0, select bank0
  2966  06E2  0825               	movf	lcdWriteToDigitBCD@TensDigit,w
  2967  06E3  3E30               	addlw	48
  2968  06E4  120A  158A  259D  120A  118A  	fcall	_lcdWriteData
  2969                           
  2970                           ;LCD.c: 81: lcdWriteData((unsigned int)OnesDigit + 48);
  2971  06E9  1283               	bcf	3,5	;RP0=0, select bank0
  2972  06EA  1303               	bcf	3,6	;RP1=0, select bank0
  2973  06EB  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  2974  06EC  3E30               	addlw	48
  2975  06ED  120A  158A  259D   	fcall	_lcdWriteData
  2976  06F0  0008               	return
  2977  06F1                     __end_of_lcdWriteToDigitBCD:	
  2978                           
  2979                           	psect	text14
  2980  0D9D                     __ptext14:	
  2981 ;; *************** function _lcdWriteData *****************
  2982 ;; Defined at:
  2983 ;;		line 20 in file "LCD.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;  databyte        1    wreg     unsigned char 
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;  databyte        1    2[BANK0 ] unsigned char 
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  1    wreg      void 
  2990 ;; Registers used:
  2991 ;;		wreg
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2997 ;;      Params:         0       0       0       0       0
  2998 ;;      Locals:         0       1       0       0       0
  2999 ;;      Temps:          0       2       0       0       0
  3000 ;;      Totals:         0       3       0       0       0
  3001 ;;Total ram usage:        3 bytes
  3002 ;; Hardware stack levels used:    1
  3003 ;; Hardware stack levels required when called:    2
  3004 ;; This function calls:
  3005 ;;		Nothing
  3006 ;; This function is called by:
  3007 ;;		_lcdWriteToDigitBCD
  3008 ;;		_lcdWriteString
  3009 ;; This function uses a non-reentrant model
  3010 ;;
  3011                           
  3012                           
  3013                           ;psect for function _lcdWriteData
  3014  0D9D                     _lcdWriteData:	
  3015                           
  3016                           ;incstack = 0
  3017                           ; Regs used in _lcdWriteData: [wreg]
  3018                           ;lcdWriteData@databyte stored from wreg
  3019  0D9D  1283               	bcf	3,5	;RP0=0, select bank0
  3020  0D9E  1303               	bcf	3,6	;RP1=0, select bank0
  3021  0D9F  00A2               	movwf	lcdWriteData@databyte
  3022                           
  3023                           ;LCD.c: 21: RE2 = 0;
  3024  0DA0  1109               	bcf	9,2	;volatile
  3025                           
  3026                           ;LCD.c: 22: RE1 = 0;
  3027  0DA1  1089               	bcf	9,1	;volatile
  3028                           
  3029                           ;LCD.c: 23: RE0 = 1;
  3030  0DA2  1409               	bsf	9,0	;volatile
  3031                           
  3032                           ;LCD.c: 24: PORTD = databyte;
  3033  0DA3  0822               	movf	lcdWriteData@databyte,w
  3034  0DA4  0088               	movwf	8	;volatile
  3035                           
  3036                           ;LCD.c: 25: RE2 = 1;
  3037  0DA5  1509               	bsf	9,2	;volatile
  3038                           
  3039                           ;LCD.c: 26: RE2 = 0;
  3040  0DA6  1109               	bcf	9,2	;volatile
  3041                           
  3042                           ;LCD.c: 27: _delay((unsigned long)((1)*(20000000/4000.0)));
  3043  0DA7  3007               	movlw	7
  3044  0DA8  00A1               	movwf	??_lcdWriteData+1
  3045  0DA9  307D               	movlw	125
  3046  0DAA  00A0               	movwf	??_lcdWriteData
  3047  0DAB                     u1997:	
  3048  0DAB  0BA0               	decfsz	??_lcdWriteData,f
  3049  0DAC  2DAB               	goto	u1997
  3050  0DAD  0BA1               	decfsz	??_lcdWriteData+1,f
  3051  0DAE  2DAB               	goto	u1997
  3052  0DAF  0008               	return
  3053  0DB0                     __end_of_lcdWriteData:	
  3054                           
  3055                           	psect	text15
  3056  07F7                     __ptext15:	
  3057 ;; *************** function _lcdSetCursor *****************
  3058 ;; Defined at:
  3059 ;;		line 31 in file "LCD.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;  address         1    wreg     unsigned char 
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;  address         1    3[BANK0 ] unsigned char 
  3064 ;; Return value:  Size  Location     Type
  3065 ;;                  1    wreg      void 
  3066 ;; Registers used:
  3067 ;;		wreg, status,2, status,0, pclath, cstack
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3073 ;;      Params:         0       0       0       0       0
  3074 ;;      Locals:         0       1       0       0       0
  3075 ;;      Temps:          0       0       0       0       0
  3076 ;;      Totals:         0       1       0       0       0
  3077 ;;Total ram usage:        1 bytes
  3078 ;; Hardware stack levels used:    1
  3079 ;; Hardware stack levels required when called:    3
  3080 ;; This function calls:
  3081 ;;		_lcdWriteControl
  3082 ;; This function is called by:
  3083 ;;		_main
  3084 ;;		_ADCMain
  3085 ;; This function uses a non-reentrant model
  3086 ;;
  3087                           
  3088                           
  3089                           ;psect for function _lcdSetCursor
  3090  07F7                     _lcdSetCursor:	
  3091                           
  3092                           ;incstack = 0
  3093                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  3094                           ;lcdSetCursor@address stored from wreg
  3095  07F7  1283               	bcf	3,5	;RP0=0, select bank0
  3096  07F8  1303               	bcf	3,6	;RP1=0, select bank0
  3097  07F9  00A3               	movwf	lcdSetCursor@address
  3098                           
  3099                           ;LCD.c: 32: address |= 0b10000000;
  3100  07FA  17A3               	bsf	lcdSetCursor@address,7
  3101                           
  3102                           ;LCD.c: 33: lcdWriteControl(address);
  3103  07FB  0823               	movf	lcdSetCursor@address,w
  3104  07FC  120A  158A  25B0   	fcall	_lcdWriteControl
  3105  07FF  0008               	return
  3106  0800                     __end_of_lcdSetCursor:	
  3107                           
  3108                           	psect	text16
  3109  0DB0                     __ptext16:	
  3110 ;; *************** function _lcdWriteControl *****************
  3111 ;; Defined at:
  3112 ;;		line 9 in file "LCD.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;  databyte        1    wreg     unsigned char 
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;  databyte        1    2[BANK0 ] unsigned char 
  3117 ;; Return value:  Size  Location     Type
  3118 ;;                  1    wreg      void 
  3119 ;; Registers used:
  3120 ;;		wreg
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3126 ;;      Params:         0       0       0       0       0
  3127 ;;      Locals:         0       1       0       0       0
  3128 ;;      Temps:          0       2       0       0       0
  3129 ;;      Totals:         0       3       0       0       0
  3130 ;;Total ram usage:        3 bytes
  3131 ;; Hardware stack levels used:    1
  3132 ;; Hardware stack levels required when called:    2
  3133 ;; This function calls:
  3134 ;;		Nothing
  3135 ;; This function is called by:
  3136 ;;		_lcdSetCursor
  3137 ;;		_setupLCD
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           
  3142                           ;psect for function _lcdWriteControl
  3143  0DB0                     _lcdWriteControl:	
  3144                           
  3145                           ;incstack = 0
  3146                           ; Regs used in _lcdWriteControl: [wreg]
  3147                           ;lcdWriteControl@databyte stored from wreg
  3148  0DB0  1283               	bcf	3,5	;RP0=0, select bank0
  3149  0DB1  1303               	bcf	3,6	;RP1=0, select bank0
  3150  0DB2  00A2               	movwf	lcdWriteControl@databyte
  3151                           
  3152                           ;LCD.c: 10: RE2 = 0;
  3153  0DB3  1109               	bcf	9,2	;volatile
  3154                           
  3155                           ;LCD.c: 11: RE1 = 0;
  3156  0DB4  1089               	bcf	9,1	;volatile
  3157                           
  3158                           ;LCD.c: 12: RE0 = 0;
  3159  0DB5  1009               	bcf	9,0	;volatile
  3160                           
  3161                           ;LCD.c: 13: PORTD = databyte;
  3162  0DB6  0822               	movf	lcdWriteControl@databyte,w
  3163  0DB7  0088               	movwf	8	;volatile
  3164                           
  3165                           ;LCD.c: 14: RE2 = 1;
  3166  0DB8  1509               	bsf	9,2	;volatile
  3167                           
  3168                           ;LCD.c: 15: RE2 = 0;
  3169  0DB9  1109               	bcf	9,2	;volatile
  3170                           
  3171                           ;LCD.c: 16: _delay((unsigned long)((2)*(20000000/4000.0)));
  3172  0DBA  300D               	movlw	13
  3173  0DBB  00A1               	movwf	??_lcdWriteControl+1
  3174  0DBC  30FB               	movlw	251
  3175  0DBD  00A0               	movwf	??_lcdWriteControl
  3176  0DBE                     u2007:	
  3177  0DBE  0BA0               	decfsz	??_lcdWriteControl,f
  3178  0DBF  2DBE               	goto	u2007
  3179  0DC0  0BA1               	decfsz	??_lcdWriteControl+1,f
  3180  0DC1  2DBE               	goto	u2007
  3181  0DC2  2DC3               	nop2
  3182  0DC3  0008               	return
  3183  0DC4                     __end_of_lcdWriteControl:	
  3184                           
  3185                           	psect	text17
  3186  0780                     __ptext17:	
  3187 ;; *************** function _getADC *****************
  3188 ;; Defined at:
  3189 ;;		line 28 in file "ADC.c"
  3190 ;; Parameters:    Size  Location     Type
  3191 ;;		None
  3192 ;; Auto vars:     Size  Location     Type
  3193 ;;		None
  3194 ;; Return value:  Size  Location     Type
  3195 ;;                  2  413[None  ] unsigned int 
  3196 ;; Registers used:
  3197 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3198 ;; Tracked objects:
  3199 ;;		On entry : 0/0
  3200 ;;		On exit  : 0/0
  3201 ;;		Unchanged: 0/0
  3202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3203 ;;      Params:         0       0       0       0       0
  3204 ;;      Locals:         0       0       0       0       0
  3205 ;;      Temps:          0       2       0       0       0
  3206 ;;      Totals:         0       2       0       0       0
  3207 ;;Total ram usage:        2 bytes
  3208 ;; Hardware stack levels used:    1
  3209 ;; Hardware stack levels required when called:    2
  3210 ;; This function calls:
  3211 ;;		Nothing
  3212 ;; This function is called by:
  3213 ;;		_ADCMain
  3214 ;; This function uses a non-reentrant model
  3215 ;;
  3216                           
  3217                           
  3218                           ;psect for function _getADC
  3219  0780                     _getADC:	
  3220                           
  3221                           ;ADC.c: 30: ADRESH = 0;
  3222                           
  3223                           ;incstack = 0
  3224                           ; Regs used in _getADC: [wreg-fsr0h+status,2+status,0]
  3225  0780  1283               	bcf	3,5	;RP0=0, select bank0
  3226  0781  1303               	bcf	3,6	;RP1=0, select bank0
  3227  0782  019E               	clrf	30	;volatile
  3228                           
  3229                           ;ADC.c: 31: ADRESL = 0;
  3230  0783  1683               	bsf	3,5	;RP0=1, select bank1
  3231  0784  1303               	bcf	3,6	;RP1=0, select bank1
  3232  0785  019E               	clrf	30	;volatile
  3233                           
  3234                           ;ADC.c: 33: GO = 1;
  3235  0786  1283               	bcf	3,5	;RP0=0, select bank0
  3236  0787  1303               	bcf	3,6	;RP1=0, select bank0
  3237  0788  151F               	bsf	31,2	;volatile
  3238  0789                     l460:	
  3239                           ;ADC.c: 34: while(GO) continue;
  3240                           
  3241  0789  191F               	btfsc	31,2	;volatile
  3242  078A  2F89               	goto	l460
  3243                           
  3244                           ;ADC.c: 38: adcRAW = (4*ADRESH);
  3245  078B  081E               	movf	30,w	;volatile
  3246  078C  00A0               	movwf	??_getADC
  3247  078D  01A1               	clrf	??_getADC+1
  3248  078E  1003               	clrc
  3249  078F  0DA0               	rlf	??_getADC,f
  3250  0790  0DA1               	rlf	??_getADC+1,f
  3251  0791  1003               	clrc
  3252  0792  0DA0               	rlf	??_getADC,f
  3253  0793  0DA1               	rlf	??_getADC+1,f
  3254  0794  0820               	movf	??_getADC,w
  3255  0795  00D6               	movwf	_adcRAW	;volatile
  3256  0796  0821               	movf	??_getADC+1,w
  3257  0797  00D7               	movwf	_adcRAW+1	;volatile
  3258                           
  3259                           ;ADC.c: 40: switch(ADRESL){
  3260  0798  2FB7               	goto	l1716
  3261  0799                     l1710:	
  3262                           ;ADC.c: 41: case 0b01000000: adcRAW = adcRAW + 1;
  3263                           
  3264  0799  1283               	bcf	3,5	;RP0=0, select bank0
  3265  079A  0856               	movf	_adcRAW,w	;volatile
  3266  079B  3E01               	addlw	1
  3267  079C  00D6               	movwf	_adcRAW	;volatile
  3268  079D  0857               	movf	_adcRAW+1,w	;volatile
  3269  079E  1803               	skipnc
  3270  079F  3E01               	addlw	1
  3271  07A0  3E00               	addlw	0
  3272  07A1  00D7               	movwf	_adcRAW+1	;volatile
  3273                           
  3274                           ;ADC.c: 42: break;
  3275  07A2  0008               	return
  3276  07A3                     l1712:	
  3277                           ;ADC.c: 43: case 0b10000000: adcRAW = adcRAW + 2;
  3278                           
  3279  07A3  1283               	bcf	3,5	;RP0=0, select bank0
  3280  07A4  0856               	movf	_adcRAW,w	;volatile
  3281  07A5  3E02               	addlw	2
  3282  07A6  00D6               	movwf	_adcRAW	;volatile
  3283  07A7  0857               	movf	_adcRAW+1,w	;volatile
  3284  07A8  1803               	skipnc
  3285  07A9  3E01               	addlw	1
  3286  07AA  3E00               	addlw	0
  3287  07AB  00D7               	movwf	_adcRAW+1	;volatile
  3288                           
  3289                           ;ADC.c: 44: break;
  3290  07AC  0008               	return
  3291  07AD                     l1714:	
  3292                           ;ADC.c: 45: case 0b11000000: adcRAW = adcRAW + 3;
  3293                           
  3294  07AD  1283               	bcf	3,5	;RP0=0, select bank0
  3295  07AE  0856               	movf	_adcRAW,w	;volatile
  3296  07AF  3E03               	addlw	3
  3297  07B0  00D6               	movwf	_adcRAW	;volatile
  3298  07B1  0857               	movf	_adcRAW+1,w	;volatile
  3299  07B2  1803               	skipnc
  3300  07B3  3E01               	addlw	1
  3301  07B4  3E00               	addlw	0
  3302  07B5  00D7               	movwf	_adcRAW+1	;volatile
  3303                           
  3304                           ;ADC.c: 48: }
  3305                           
  3306                           ;ADC.c: 47: default: adcRAW = adcRAW;
  3307                           
  3308                           ;ADC.c: 46: break;
  3309  07B6  0008               	return
  3310  07B7                     l1716:	
  3311  07B7  1683               	bsf	3,5	;RP0=1, select bank1
  3312  07B8  1303               	bcf	3,6	;RP1=0, select bank1
  3313  07B9  081E               	movf	30,w	;volatile
  3314                           
  3315                           ; Switch size 1, requested type "space"
  3316                           ; Number of cases is 3, Range of values is 64 to 192
  3317                           ; switch strategies available:
  3318                           ; Name         Instructions Cycles
  3319                           ; simple_byte           10     6 (average)
  3320                           ; jumptable            263     9 (fixed)
  3321                           ;	Chosen strategy is simple_byte
  3322  07BA  3A40               	xorlw	64	; case 64
  3323  07BB  1903               	skipnz
  3324  07BC  2F99               	goto	l1710
  3325  07BD  3AC0               	xorlw	192	; case 128
  3326  07BE  1903               	skipnz
  3327  07BF  2FA3               	goto	l1712
  3328  07C0  3A40               	xorlw	64	; case 192
  3329  07C1  1903               	skipnz
  3330  07C2  2FAD               	goto	l1714
  3331  07C3  2FC4               	goto	l469
  3332  07C4                     l469:	
  3333                           ;ADC.c: 50: return(adcRAW);
  3334                           ;	Return value of _getADC is never used
  3335                           
  3336  07C4  0008               	return
  3337  07C5                     __end_of_getADC:	
  3338                           
  3339                           	psect	text18
  3340  0039                     __ptext18:	
  3341 ;; *************** function _adcConvertMM *****************
  3342 ;; Defined at:
  3343 ;;		line 58 in file "ADC.c"
  3344 ;; Parameters:    Size  Location     Type
  3345 ;;  adcRAW          2   21[BANK0 ] unsigned int 
  3346 ;; Auto vars:     Size  Location     Type
  3347 ;;		None
  3348 ;; Return value:  Size  Location     Type
  3349 ;;                  2   21[BANK0 ] unsigned int 
  3350 ;; Registers used:
  3351 ;;		wreg, status,2, status,0, pclath, cstack
  3352 ;; Tracked objects:
  3353 ;;		On entry : 0/0
  3354 ;;		On exit  : 0/0
  3355 ;;		Unchanged: 0/0
  3356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3357 ;;      Params:         0       2       0       0       0
  3358 ;;      Locals:         0       0       0       0       0
  3359 ;;      Temps:          0       8       0       0       0
  3360 ;;      Totals:         0      10       0       0       0
  3361 ;;Total ram usage:       10 bytes
  3362 ;; Hardware stack levels used:    1
  3363 ;; Hardware stack levels required when called:    3
  3364 ;; This function calls:
  3365 ;;		___aldiv
  3366 ;;		___lwdiv
  3367 ;;		___wmul
  3368 ;; This function is called by:
  3369 ;;		_ADCMain
  3370 ;; This function uses a non-reentrant model
  3371 ;;
  3372                           
  3373                           
  3374                           ;psect for function _adcConvertMM
  3375  0039                     _adcConvertMM:	
  3376                           
  3377                           ;ADC.c: 60: if (adcRAW < 517 && adcRAW >= 513)
  3378                           
  3379                           ;incstack = 0
  3380                           ; Regs used in _adcConvertMM: [wreg+status,2+status,0+pclath+cstack]
  3381  0039  3002               	movlw	2
  3382  003A  1283               	bcf	3,5	;RP0=0, select bank0
  3383  003B  1303               	bcf	3,6	;RP1=0, select bank0
  3384  003C  0236               	subwf	adcConvertMM@adcRAW+1,w
  3385  003D  3005               	movlw	5
  3386  003E  1903               	skipnz
  3387  003F  0235               	subwf	adcConvertMM@adcRAW,w
  3388  0040  1803               	skipnc
  3389  0041  28A8               	goto	l1724
  3390  0042  3002               	movlw	2
  3391  0043  0236               	subwf	adcConvertMM@adcRAW+1,w
  3392  0044  3001               	movlw	1
  3393  0045  1903               	skipnz
  3394  0046  0235               	subwf	adcConvertMM@adcRAW,w
  3395  0047  1C03               	skipc
  3396  0048  28A8               	goto	l1724
  3397                           
  3398                           ;ADC.c: 61: Distance = (((51700 - adcRAW*100)/4) + 100);
  3399  0049  3000               	movlw	0
  3400  004A  00A9               	movwf	___aldiv@divisor+3
  3401  004B  3000               	movlw	0
  3402  004C  00A8               	movwf	___aldiv@divisor+2
  3403  004D  3000               	movlw	0
  3404  004E  00A7               	movwf	___aldiv@divisor+1
  3405  004F  3004               	movlw	4
  3406  0050  00A6               	movwf	___aldiv@divisor
  3407  0051  30F4               	movlw	244
  3408  0052  00B7               	movwf	??_adcConvertMM
  3409  0053  30C9               	movlw	201
  3410  0054  00B8               	movwf	??_adcConvertMM+1
  3411  0055  3000               	movlw	0
  3412  0056  00B9               	movwf	??_adcConvertMM+2
  3413  0057  3000               	movlw	0
  3414  0058  00BA               	movwf	??_adcConvertMM+3
  3415  0059  0836               	movf	adcConvertMM@adcRAW+1,w
  3416  005A  00A1               	movwf	___wmul@multiplier+1
  3417  005B  0835               	movf	adcConvertMM@adcRAW,w
  3418  005C  00A0               	movwf	___wmul@multiplier
  3419  005D  3064               	movlw	100
  3420  005E  00A2               	movwf	___wmul@multiplicand
  3421  005F  3000               	movlw	0
  3422  0060  00A3               	movwf	___wmul@multiplicand+1
  3423  0061  120A  158A  2612  120A  118A  	fcall	___wmul
  3424  0066  1283               	bcf	3,5	;RP0=0, select bank0
  3425  0067  1303               	bcf	3,6	;RP1=0, select bank0
  3426  0068  0820               	movf	?___wmul,w
  3427  0069  00BB               	movwf	??_adcConvertMM+4
  3428  006A  0821               	movf	?___wmul+1,w
  3429  006B  00BC               	movwf	??_adcConvertMM+5
  3430  006C  01BD               	clrf	??_adcConvertMM+6
  3431  006D  01BE               	clrf	??_adcConvertMM+7
  3432  006E  09BB               	comf	??_adcConvertMM+4,f
  3433  006F  09BC               	comf	??_adcConvertMM+5,f
  3434  0070  09BD               	comf	??_adcConvertMM+6,f
  3435  0071  09BE               	comf	??_adcConvertMM+7,f
  3436  0072  0ABB               	incf	??_adcConvertMM+4,f
  3437  0073  1903               	skipnz
  3438  0074  0ABC               	incf	??_adcConvertMM+5,f
  3439  0075  1903               	skipnz
  3440  0076  0ABD               	incf	??_adcConvertMM+6,f
  3441  0077  1903               	skipnz
  3442  0078  0ABE               	incf	??_adcConvertMM+7,f
  3443  0079  083B               	movf	??_adcConvertMM+4,w
  3444  007A  07B7               	addwf	??_adcConvertMM,f
  3445  007B  083C               	movf	??_adcConvertMM+5,w
  3446  007C  1803               	skipnc
  3447  007D  0F3C               	incfsz	??_adcConvertMM+5,w
  3448  007E  2880               	goto	u1280
  3449  007F  2881               	goto	u1281
  3450  0080                     u1280:	
  3451  0080  07B8               	addwf	??_adcConvertMM+1,f
  3452  0081                     u1281:	
  3453  0081  083D               	movf	??_adcConvertMM+6,w
  3454  0082  1803               	skipnc
  3455  0083  0F3D               	incfsz	??_adcConvertMM+6,w
  3456  0084  2886               	goto	u1282
  3457  0085  2887               	goto	u1283
  3458  0086                     u1282:	
  3459  0086  07B9               	addwf	??_adcConvertMM+2,f
  3460  0087                     u1283:	
  3461  0087  083E               	movf	??_adcConvertMM+7,w
  3462  0088  1803               	skipnc
  3463  0089  0A3E               	incf	??_adcConvertMM+7,w
  3464  008A  07BA               	addwf	??_adcConvertMM+3,f
  3465  008B  083A               	movf	??_adcConvertMM+3,w
  3466  008C  00AD               	movwf	___aldiv@dividend+3
  3467  008D  0839               	movf	??_adcConvertMM+2,w
  3468  008E  00AC               	movwf	___aldiv@dividend+2
  3469  008F  0838               	movf	??_adcConvertMM+1,w
  3470  0090  00AB               	movwf	___aldiv@dividend+1
  3471  0091  0837               	movf	??_adcConvertMM,w
  3472  0092  00AA               	movwf	___aldiv@dividend
  3473  0093  120A  118A  26F1  120A  118A  	fcall	___aldiv
  3474  0098  1283               	bcf	3,5	;RP0=0, select bank0
  3475  0099  1303               	bcf	3,6	;RP1=0, select bank0
  3476  009A  0826               	movf	?___aldiv,w
  3477  009B  3E64               	addlw	100
  3478  009C  1683               	bsf	3,5	;RP0=1, select bank1
  3479  009D  1303               	bcf	3,6	;RP1=0, select bank1
  3480  009E  00A0               	movwf	_Distance^(0+128)	;volatile
  3481  009F  1283               	bcf	3,5	;RP0=0, select bank0
  3482  00A0  1303               	bcf	3,6	;RP1=0, select bank0
  3483  00A1  0827               	movf	?___aldiv+1,w
  3484  00A2  1803               	skipnc
  3485  00A3  3E01               	addlw	1
  3486  00A4  3E00               	addlw	0
  3487  00A5  1683               	bsf	3,5	;RP0=1, select bank1
  3488  00A6  1303               	bcf	3,6	;RP1=0, select bank1
  3489  00A7  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  3490  00A8                     l1724:	
  3491                           
  3492                           ;ADC.c: 63: if (adcRAW < 513 && adcRAW >= 393)
  3493  00A8  3002               	movlw	2
  3494  00A9  1283               	bcf	3,5	;RP0=0, select bank0
  3495  00AA  0236               	subwf	adcConvertMM@adcRAW+1,w
  3496  00AB  3001               	movlw	1
  3497  00AC  1903               	skipnz
  3498  00AD  0235               	subwf	adcConvertMM@adcRAW,w
  3499  00AE  1803               	skipnc
  3500  00AF  2916               	goto	l1730
  3501  00B0  3001               	movlw	1
  3502  00B1  0236               	subwf	adcConvertMM@adcRAW+1,w
  3503  00B2  3089               	movlw	137
  3504  00B3  1903               	skipnz
  3505  00B4  0235               	subwf	adcConvertMM@adcRAW,w
  3506  00B5  1C03               	skipc
  3507  00B6  2916               	goto	l1730
  3508                           
  3509                           ;ADC.c: 64: Distance = (((51300 - adcRAW*100)/120) + 200);
  3510  00B7  3000               	movlw	0
  3511  00B8  00A9               	movwf	___aldiv@divisor+3
  3512  00B9  3000               	movlw	0
  3513  00BA  00A8               	movwf	___aldiv@divisor+2
  3514  00BB  3000               	movlw	0
  3515  00BC  00A7               	movwf	___aldiv@divisor+1
  3516  00BD  3078               	movlw	120
  3517  00BE  00A6               	movwf	___aldiv@divisor
  3518  00BF  3064               	movlw	100
  3519  00C0  00B7               	movwf	??_adcConvertMM
  3520  00C1  30C8               	movlw	200
  3521  00C2  00B8               	movwf	??_adcConvertMM+1
  3522  00C3  3000               	movlw	0
  3523  00C4  00B9               	movwf	??_adcConvertMM+2
  3524  00C5  3000               	movlw	0
  3525  00C6  00BA               	movwf	??_adcConvertMM+3
  3526  00C7  0836               	movf	adcConvertMM@adcRAW+1,w
  3527  00C8  00A1               	movwf	___wmul@multiplier+1
  3528  00C9  0835               	movf	adcConvertMM@adcRAW,w
  3529  00CA  00A0               	movwf	___wmul@multiplier
  3530  00CB  3064               	movlw	100
  3531  00CC  00A2               	movwf	___wmul@multiplicand
  3532  00CD  3000               	movlw	0
  3533  00CE  00A3               	movwf	___wmul@multiplicand+1
  3534  00CF  120A  158A  2612  120A  118A  	fcall	___wmul
  3535  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  3536  00D5  1303               	bcf	3,6	;RP1=0, select bank0
  3537  00D6  0820               	movf	?___wmul,w
  3538  00D7  00BB               	movwf	??_adcConvertMM+4
  3539  00D8  0821               	movf	?___wmul+1,w
  3540  00D9  00BC               	movwf	??_adcConvertMM+5
  3541  00DA  01BD               	clrf	??_adcConvertMM+6
  3542  00DB  01BE               	clrf	??_adcConvertMM+7
  3543  00DC  09BB               	comf	??_adcConvertMM+4,f
  3544  00DD  09BC               	comf	??_adcConvertMM+5,f
  3545  00DE  09BD               	comf	??_adcConvertMM+6,f
  3546  00DF  09BE               	comf	??_adcConvertMM+7,f
  3547  00E0  0ABB               	incf	??_adcConvertMM+4,f
  3548  00E1  1903               	skipnz
  3549  00E2  0ABC               	incf	??_adcConvertMM+5,f
  3550  00E3  1903               	skipnz
  3551  00E4  0ABD               	incf	??_adcConvertMM+6,f
  3552  00E5  1903               	skipnz
  3553  00E6  0ABE               	incf	??_adcConvertMM+7,f
  3554  00E7  083B               	movf	??_adcConvertMM+4,w
  3555  00E8  07B7               	addwf	??_adcConvertMM,f
  3556  00E9  083C               	movf	??_adcConvertMM+5,w
  3557  00EA  1803               	skipnc
  3558  00EB  0F3C               	incfsz	??_adcConvertMM+5,w
  3559  00EC  28EE               	goto	u1310
  3560  00ED  28EF               	goto	u1311
  3561  00EE                     u1310:	
  3562  00EE  07B8               	addwf	??_adcConvertMM+1,f
  3563  00EF                     u1311:	
  3564  00EF  083D               	movf	??_adcConvertMM+6,w
  3565  00F0  1803               	skipnc
  3566  00F1  0F3D               	incfsz	??_adcConvertMM+6,w
  3567  00F2  28F4               	goto	u1312
  3568  00F3  28F5               	goto	u1313
  3569  00F4                     u1312:	
  3570  00F4  07B9               	addwf	??_adcConvertMM+2,f
  3571  00F5                     u1313:	
  3572  00F5  083E               	movf	??_adcConvertMM+7,w
  3573  00F6  1803               	skipnc
  3574  00F7  0A3E               	incf	??_adcConvertMM+7,w
  3575  00F8  07BA               	addwf	??_adcConvertMM+3,f
  3576  00F9  083A               	movf	??_adcConvertMM+3,w
  3577  00FA  00AD               	movwf	___aldiv@dividend+3
  3578  00FB  0839               	movf	??_adcConvertMM+2,w
  3579  00FC  00AC               	movwf	___aldiv@dividend+2
  3580  00FD  0838               	movf	??_adcConvertMM+1,w
  3581  00FE  00AB               	movwf	___aldiv@dividend+1
  3582  00FF  0837               	movf	??_adcConvertMM,w
  3583  0100  00AA               	movwf	___aldiv@dividend
  3584  0101  120A  118A  26F1  120A  118A  	fcall	___aldiv
  3585  0106  1283               	bcf	3,5	;RP0=0, select bank0
  3586  0107  1303               	bcf	3,6	;RP1=0, select bank0
  3587  0108  0826               	movf	?___aldiv,w
  3588  0109  3EC8               	addlw	200
  3589  010A  1683               	bsf	3,5	;RP0=1, select bank1
  3590  010B  1303               	bcf	3,6	;RP1=0, select bank1
  3591  010C  00A0               	movwf	_Distance^(0+128)	;volatile
  3592  010D  1283               	bcf	3,5	;RP0=0, select bank0
  3593  010E  1303               	bcf	3,6	;RP1=0, select bank0
  3594  010F  0827               	movf	?___aldiv+1,w
  3595  0110  1803               	skipnc
  3596  0111  3E01               	addlw	1
  3597  0112  3E00               	addlw	0
  3598  0113  1683               	bsf	3,5	;RP0=1, select bank1
  3599  0114  1303               	bcf	3,6	;RP1=0, select bank1
  3600  0115  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  3601  0116                     l1730:	
  3602                           
  3603                           ;ADC.c: 66: if (adcRAW < 393 && adcRAW >= 298)
  3604  0116  3001               	movlw	1
  3605  0117  1283               	bcf	3,5	;RP0=0, select bank0
  3606  0118  0236               	subwf	adcConvertMM@adcRAW+1,w
  3607  0119  3089               	movlw	137
  3608  011A  1903               	skipnz
  3609  011B  0235               	subwf	adcConvertMM@adcRAW,w
  3610  011C  1803               	skipnc
  3611  011D  2984               	goto	l1736
  3612  011E  3001               	movlw	1
  3613  011F  0236               	subwf	adcConvertMM@adcRAW+1,w
  3614  0120  302A               	movlw	42
  3615  0121  1903               	skipnz
  3616  0122  0235               	subwf	adcConvertMM@adcRAW,w
  3617  0123  1C03               	skipc
  3618  0124  2984               	goto	l1736
  3619                           
  3620                           ;ADC.c: 67: Distance = (((39300 - adcRAW*100)/95) + 300);
  3621  0125  3000               	movlw	0
  3622  0126  00A9               	movwf	___aldiv@divisor+3
  3623  0127  3000               	movlw	0
  3624  0128  00A8               	movwf	___aldiv@divisor+2
  3625  0129  3000               	movlw	0
  3626  012A  00A7               	movwf	___aldiv@divisor+1
  3627  012B  305F               	movlw	95
  3628  012C  00A6               	movwf	___aldiv@divisor
  3629  012D  3084               	movlw	132
  3630  012E  00B7               	movwf	??_adcConvertMM
  3631  012F  3099               	movlw	153
  3632  0130  00B8               	movwf	??_adcConvertMM+1
  3633  0131  3000               	movlw	0
  3634  0132  00B9               	movwf	??_adcConvertMM+2
  3635  0133  3000               	movlw	0
  3636  0134  00BA               	movwf	??_adcConvertMM+3
  3637  0135  0836               	movf	adcConvertMM@adcRAW+1,w
  3638  0136  00A1               	movwf	___wmul@multiplier+1
  3639  0137  0835               	movf	adcConvertMM@adcRAW,w
  3640  0138  00A0               	movwf	___wmul@multiplier
  3641  0139  3064               	movlw	100
  3642  013A  00A2               	movwf	___wmul@multiplicand
  3643  013B  3000               	movlw	0
  3644  013C  00A3               	movwf	___wmul@multiplicand+1
  3645  013D  120A  158A  2612  120A  118A  	fcall	___wmul
  3646  0142  1283               	bcf	3,5	;RP0=0, select bank0
  3647  0143  1303               	bcf	3,6	;RP1=0, select bank0
  3648  0144  0820               	movf	?___wmul,w
  3649  0145  00BB               	movwf	??_adcConvertMM+4
  3650  0146  0821               	movf	?___wmul+1,w
  3651  0147  00BC               	movwf	??_adcConvertMM+5
  3652  0148  01BD               	clrf	??_adcConvertMM+6
  3653  0149  01BE               	clrf	??_adcConvertMM+7
  3654  014A  09BB               	comf	??_adcConvertMM+4,f
  3655  014B  09BC               	comf	??_adcConvertMM+5,f
  3656  014C  09BD               	comf	??_adcConvertMM+6,f
  3657  014D  09BE               	comf	??_adcConvertMM+7,f
  3658  014E  0ABB               	incf	??_adcConvertMM+4,f
  3659  014F  1903               	skipnz
  3660  0150  0ABC               	incf	??_adcConvertMM+5,f
  3661  0151  1903               	skipnz
  3662  0152  0ABD               	incf	??_adcConvertMM+6,f
  3663  0153  1903               	skipnz
  3664  0154  0ABE               	incf	??_adcConvertMM+7,f
  3665  0155  083B               	movf	??_adcConvertMM+4,w
  3666  0156  07B7               	addwf	??_adcConvertMM,f
  3667  0157  083C               	movf	??_adcConvertMM+5,w
  3668  0158  1803               	skipnc
  3669  0159  0F3C               	incfsz	??_adcConvertMM+5,w
  3670  015A  295C               	goto	u1340
  3671  015B  295D               	goto	u1341
  3672  015C                     u1340:	
  3673  015C  07B8               	addwf	??_adcConvertMM+1,f
  3674  015D                     u1341:	
  3675  015D  083D               	movf	??_adcConvertMM+6,w
  3676  015E  1803               	skipnc
  3677  015F  0F3D               	incfsz	??_adcConvertMM+6,w
  3678  0160  2962               	goto	u1342
  3679  0161  2963               	goto	u1343
  3680  0162                     u1342:	
  3681  0162  07B9               	addwf	??_adcConvertMM+2,f
  3682  0163                     u1343:	
  3683  0163  083E               	movf	??_adcConvertMM+7,w
  3684  0164  1803               	skipnc
  3685  0165  0A3E               	incf	??_adcConvertMM+7,w
  3686  0166  07BA               	addwf	??_adcConvertMM+3,f
  3687  0167  083A               	movf	??_adcConvertMM+3,w
  3688  0168  00AD               	movwf	___aldiv@dividend+3
  3689  0169  0839               	movf	??_adcConvertMM+2,w
  3690  016A  00AC               	movwf	___aldiv@dividend+2
  3691  016B  0838               	movf	??_adcConvertMM+1,w
  3692  016C  00AB               	movwf	___aldiv@dividend+1
  3693  016D  0837               	movf	??_adcConvertMM,w
  3694  016E  00AA               	movwf	___aldiv@dividend
  3695  016F  120A  118A  26F1  120A  118A  	fcall	___aldiv
  3696  0174  1283               	bcf	3,5	;RP0=0, select bank0
  3697  0175  1303               	bcf	3,6	;RP1=0, select bank0
  3698  0176  0826               	movf	?___aldiv,w
  3699  0177  3E2C               	addlw	44
  3700  0178  1683               	bsf	3,5	;RP0=1, select bank1
  3701  0179  1303               	bcf	3,6	;RP1=0, select bank1
  3702  017A  00A0               	movwf	_Distance^(0+128)	;volatile
  3703  017B  1283               	bcf	3,5	;RP0=0, select bank0
  3704  017C  1303               	bcf	3,6	;RP1=0, select bank0
  3705  017D  0827               	movf	?___aldiv+1,w
  3706  017E  1803               	skipnc
  3707  017F  3E01               	addlw	1
  3708  0180  3E01               	addlw	1
  3709  0181  1683               	bsf	3,5	;RP0=1, select bank1
  3710  0182  1303               	bcf	3,6	;RP1=0, select bank1
  3711  0183  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  3712  0184                     l1736:	
  3713                           
  3714                           ;ADC.c: 69: if (adcRAW < 298 && adcRAW >= 236)
  3715  0184  3001               	movlw	1
  3716  0185  1283               	bcf	3,5	;RP0=0, select bank0
  3717  0186  0236               	subwf	adcConvertMM@adcRAW+1,w
  3718  0187  302A               	movlw	42
  3719  0188  1903               	skipnz
  3720  0189  0235               	subwf	adcConvertMM@adcRAW,w
  3721  018A  1803               	skipnc
  3722  018B  29CA               	goto	l1742
  3723  018C  3000               	movlw	0
  3724  018D  0236               	subwf	adcConvertMM@adcRAW+1,w
  3725  018E  30EC               	movlw	236
  3726  018F  1903               	skipnz
  3727  0190  0235               	subwf	adcConvertMM@adcRAW,w
  3728  0191  1C03               	skipc
  3729  0192  29CA               	goto	l1742
  3730                           
  3731                           ;ADC.c: 70: Distance = (((29800 - adcRAW*100)/62) + 400);
  3732  0193  303E               	movlw	62
  3733  0194  00A6               	movwf	___lwdiv@divisor
  3734  0195  3000               	movlw	0
  3735  0196  00A7               	movwf	___lwdiv@divisor+1
  3736  0197  0836               	movf	adcConvertMM@adcRAW+1,w
  3737  0198  00A1               	movwf	___wmul@multiplier+1
  3738  0199  0835               	movf	adcConvertMM@adcRAW,w
  3739  019A  00A0               	movwf	___wmul@multiplier
  3740  019B  3064               	movlw	100
  3741  019C  00A2               	movwf	___wmul@multiplicand
  3742  019D  3000               	movlw	0
  3743  019E  00A3               	movwf	___wmul@multiplicand+1
  3744  019F  120A  158A  2612  120A  118A  	fcall	___wmul
  3745  01A4  1283               	bcf	3,5	;RP0=0, select bank0
  3746  01A5  1303               	bcf	3,6	;RP1=0, select bank0
  3747  01A6  0920               	comf	?___wmul,w
  3748  01A7  00B7               	movwf	??_adcConvertMM
  3749  01A8  0921               	comf	?___wmul+1,w
  3750  01A9  00B8               	movwf	??_adcConvertMM+1
  3751  01AA  0AB7               	incf	??_adcConvertMM,f
  3752  01AB  1903               	skipnz
  3753  01AC  0AB8               	incf	??_adcConvertMM+1,f
  3754  01AD  0837               	movf	??_adcConvertMM,w
  3755  01AE  3E68               	addlw	104
  3756  01AF  00A8               	movwf	___lwdiv@dividend
  3757  01B0  0838               	movf	??_adcConvertMM+1,w
  3758  01B1  1803               	skipnc
  3759  01B2  3E01               	addlw	1
  3760  01B3  3E74               	addlw	116
  3761  01B4  00A9               	movwf	___lwdiv@dividend+1
  3762  01B5  120A  158A  26B6  120A  118A  	fcall	___lwdiv
  3763  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  3764  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  3765  01BC  0826               	movf	?___lwdiv,w
  3766  01BD  3E90               	addlw	144
  3767  01BE  1683               	bsf	3,5	;RP0=1, select bank1
  3768  01BF  1303               	bcf	3,6	;RP1=0, select bank1
  3769  01C0  00A0               	movwf	_Distance^(0+128)	;volatile
  3770  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  3771  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  3772  01C3  0827               	movf	?___lwdiv+1,w
  3773  01C4  1803               	skipnc
  3774  01C5  3E01               	addlw	1
  3775  01C6  3E01               	addlw	1
  3776  01C7  1683               	bsf	3,5	;RP0=1, select bank1
  3777  01C8  1303               	bcf	3,6	;RP1=0, select bank1
  3778  01C9  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  3779  01CA                     l1742:	
  3780                           
  3781                           ;ADC.c: 72: if (adcRAW < 236 && adcRAW >= 194)
  3782  01CA  3000               	movlw	0
  3783  01CB  1283               	bcf	3,5	;RP0=0, select bank0
  3784  01CC  0236               	subwf	adcConvertMM@adcRAW+1,w
  3785  01CD  30EC               	movlw	236
  3786  01CE  1903               	skipnz
  3787  01CF  0235               	subwf	adcConvertMM@adcRAW,w
  3788  01D0  1803               	skipnc
  3789  01D1  2A10               	goto	l1748
  3790  01D2  3000               	movlw	0
  3791  01D3  0236               	subwf	adcConvertMM@adcRAW+1,w
  3792  01D4  30C2               	movlw	194
  3793  01D5  1903               	skipnz
  3794  01D6  0235               	subwf	adcConvertMM@adcRAW,w
  3795  01D7  1C03               	skipc
  3796  01D8  2A10               	goto	l1748
  3797                           
  3798                           ;ADC.c: 73: Distance = (((23600 - adcRAW*100)/42) + 500);
  3799  01D9  302A               	movlw	42
  3800  01DA  00A6               	movwf	___lwdiv@divisor
  3801  01DB  3000               	movlw	0
  3802  01DC  00A7               	movwf	___lwdiv@divisor+1
  3803  01DD  0836               	movf	adcConvertMM@adcRAW+1,w
  3804  01DE  00A1               	movwf	___wmul@multiplier+1
  3805  01DF  0835               	movf	adcConvertMM@adcRAW,w
  3806  01E0  00A0               	movwf	___wmul@multiplier
  3807  01E1  3064               	movlw	100
  3808  01E2  00A2               	movwf	___wmul@multiplicand
  3809  01E3  3000               	movlw	0
  3810  01E4  00A3               	movwf	___wmul@multiplicand+1
  3811  01E5  120A  158A  2612  120A  118A  	fcall	___wmul
  3812  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  3813  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  3814  01EC  0920               	comf	?___wmul,w
  3815  01ED  00B7               	movwf	??_adcConvertMM
  3816  01EE  0921               	comf	?___wmul+1,w
  3817  01EF  00B8               	movwf	??_adcConvertMM+1
  3818  01F0  0AB7               	incf	??_adcConvertMM,f
  3819  01F1  1903               	skipnz
  3820  01F2  0AB8               	incf	??_adcConvertMM+1,f
  3821  01F3  0837               	movf	??_adcConvertMM,w
  3822  01F4  3E30               	addlw	48
  3823  01F5  00A8               	movwf	___lwdiv@dividend
  3824  01F6  0838               	movf	??_adcConvertMM+1,w
  3825  01F7  1803               	skipnc
  3826  01F8  3E01               	addlw	1
  3827  01F9  3E5C               	addlw	92
  3828  01FA  00A9               	movwf	___lwdiv@dividend+1
  3829  01FB  120A  158A  26B6  120A  118A  	fcall	___lwdiv
  3830  0200  1283               	bcf	3,5	;RP0=0, select bank0
  3831  0201  1303               	bcf	3,6	;RP1=0, select bank0
  3832  0202  0826               	movf	?___lwdiv,w
  3833  0203  3EF4               	addlw	244
  3834  0204  1683               	bsf	3,5	;RP0=1, select bank1
  3835  0205  1303               	bcf	3,6	;RP1=0, select bank1
  3836  0206  00A0               	movwf	_Distance^(0+128)	;volatile
  3837  0207  1283               	bcf	3,5	;RP0=0, select bank0
  3838  0208  1303               	bcf	3,6	;RP1=0, select bank0
  3839  0209  0827               	movf	?___lwdiv+1,w
  3840  020A  1803               	skipnc
  3841  020B  3E01               	addlw	1
  3842  020C  3E01               	addlw	1
  3843  020D  1683               	bsf	3,5	;RP0=1, select bank1
  3844  020E  1303               	bcf	3,6	;RP1=0, select bank1
  3845  020F  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  3846  0210                     l1748:	
  3847                           
  3848                           ;ADC.c: 75: if (adcRAW < 194 && adcRAW >= 168)
  3849  0210  3000               	movlw	0
  3850  0211  1283               	bcf	3,5	;RP0=0, select bank0
  3851  0212  0236               	subwf	adcConvertMM@adcRAW+1,w
  3852  0213  30C2               	movlw	194
  3853  0214  1903               	skipnz
  3854  0215  0235               	subwf	adcConvertMM@adcRAW,w
  3855  0216  1803               	skipnc
  3856  0217  2A56               	goto	l1754
  3857  0218  3000               	movlw	0
  3858  0219  0236               	subwf	adcConvertMM@adcRAW+1,w
  3859  021A  30A8               	movlw	168
  3860  021B  1903               	skipnz
  3861  021C  0235               	subwf	adcConvertMM@adcRAW,w
  3862  021D  1C03               	skipc
  3863  021E  2A56               	goto	l1754
  3864                           
  3865                           ;ADC.c: 76: Distance = (((19400 - adcRAW*100)/26) + 600);
  3866  021F  301A               	movlw	26
  3867  0220  00A6               	movwf	___lwdiv@divisor
  3868  0221  3000               	movlw	0
  3869  0222  00A7               	movwf	___lwdiv@divisor+1
  3870  0223  0836               	movf	adcConvertMM@adcRAW+1,w
  3871  0224  00A1               	movwf	___wmul@multiplier+1
  3872  0225  0835               	movf	adcConvertMM@adcRAW,w
  3873  0226  00A0               	movwf	___wmul@multiplier
  3874  0227  3064               	movlw	100
  3875  0228  00A2               	movwf	___wmul@multiplicand
  3876  0229  3000               	movlw	0
  3877  022A  00A3               	movwf	___wmul@multiplicand+1
  3878  022B  120A  158A  2612  120A  118A  	fcall	___wmul
  3879  0230  1283               	bcf	3,5	;RP0=0, select bank0
  3880  0231  1303               	bcf	3,6	;RP1=0, select bank0
  3881  0232  0920               	comf	?___wmul,w
  3882  0233  00B7               	movwf	??_adcConvertMM
  3883  0234  0921               	comf	?___wmul+1,w
  3884  0235  00B8               	movwf	??_adcConvertMM+1
  3885  0236  0AB7               	incf	??_adcConvertMM,f
  3886  0237  1903               	skipnz
  3887  0238  0AB8               	incf	??_adcConvertMM+1,f
  3888  0239  0837               	movf	??_adcConvertMM,w
  3889  023A  3EC8               	addlw	200
  3890  023B  00A8               	movwf	___lwdiv@dividend
  3891  023C  0838               	movf	??_adcConvertMM+1,w
  3892  023D  1803               	skipnc
  3893  023E  3E01               	addlw	1
  3894  023F  3E4B               	addlw	75
  3895  0240  00A9               	movwf	___lwdiv@dividend+1
  3896  0241  120A  158A  26B6  120A  118A  	fcall	___lwdiv
  3897  0246  1283               	bcf	3,5	;RP0=0, select bank0
  3898  0247  1303               	bcf	3,6	;RP1=0, select bank0
  3899  0248  0826               	movf	?___lwdiv,w
  3900  0249  3E58               	addlw	88
  3901  024A  1683               	bsf	3,5	;RP0=1, select bank1
  3902  024B  1303               	bcf	3,6	;RP1=0, select bank1
  3903  024C  00A0               	movwf	_Distance^(0+128)	;volatile
  3904  024D  1283               	bcf	3,5	;RP0=0, select bank0
  3905  024E  1303               	bcf	3,6	;RP1=0, select bank0
  3906  024F  0827               	movf	?___lwdiv+1,w
  3907  0250  1803               	skipnc
  3908  0251  3E01               	addlw	1
  3909  0252  3E02               	addlw	2
  3910  0253  1683               	bsf	3,5	;RP0=1, select bank1
  3911  0254  1303               	bcf	3,6	;RP1=0, select bank1
  3912  0255  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  3913  0256                     l1754:	
  3914                           
  3915                           ;ADC.c: 78: if (adcRAW < 168 && adcRAW >= 144)
  3916  0256  3000               	movlw	0
  3917  0257  1283               	bcf	3,5	;RP0=0, select bank0
  3918  0258  0236               	subwf	adcConvertMM@adcRAW+1,w
  3919  0259  30A8               	movlw	168
  3920  025A  1903               	skipnz
  3921  025B  0235               	subwf	adcConvertMM@adcRAW,w
  3922  025C  1803               	skipnc
  3923  025D  2A9C               	goto	l1760
  3924  025E  3000               	movlw	0
  3925  025F  0236               	subwf	adcConvertMM@adcRAW+1,w
  3926  0260  3090               	movlw	144
  3927  0261  1903               	skipnz
  3928  0262  0235               	subwf	adcConvertMM@adcRAW,w
  3929  0263  1C03               	skipc
  3930  0264  2A9C               	goto	l1760
  3931                           
  3932                           ;ADC.c: 79: Distance = (((16800 - adcRAW*100)/24) + 700);
  3933  0265  3018               	movlw	24
  3934  0266  00A6               	movwf	___lwdiv@divisor
  3935  0267  3000               	movlw	0
  3936  0268  00A7               	movwf	___lwdiv@divisor+1
  3937  0269  0836               	movf	adcConvertMM@adcRAW+1,w
  3938  026A  00A1               	movwf	___wmul@multiplier+1
  3939  026B  0835               	movf	adcConvertMM@adcRAW,w
  3940  026C  00A0               	movwf	___wmul@multiplier
  3941  026D  3064               	movlw	100
  3942  026E  00A2               	movwf	___wmul@multiplicand
  3943  026F  3000               	movlw	0
  3944  0270  00A3               	movwf	___wmul@multiplicand+1
  3945  0271  120A  158A  2612  120A  118A  	fcall	___wmul
  3946  0276  1283               	bcf	3,5	;RP0=0, select bank0
  3947  0277  1303               	bcf	3,6	;RP1=0, select bank0
  3948  0278  0920               	comf	?___wmul,w
  3949  0279  00B7               	movwf	??_adcConvertMM
  3950  027A  0921               	comf	?___wmul+1,w
  3951  027B  00B8               	movwf	??_adcConvertMM+1
  3952  027C  0AB7               	incf	??_adcConvertMM,f
  3953  027D  1903               	skipnz
  3954  027E  0AB8               	incf	??_adcConvertMM+1,f
  3955  027F  0837               	movf	??_adcConvertMM,w
  3956  0280  3EA0               	addlw	160
  3957  0281  00A8               	movwf	___lwdiv@dividend
  3958  0282  0838               	movf	??_adcConvertMM+1,w
  3959  0283  1803               	skipnc
  3960  0284  3E01               	addlw	1
  3961  0285  3E41               	addlw	65
  3962  0286  00A9               	movwf	___lwdiv@dividend+1
  3963  0287  120A  158A  26B6  120A  118A  	fcall	___lwdiv
  3964  028C  1283               	bcf	3,5	;RP0=0, select bank0
  3965  028D  1303               	bcf	3,6	;RP1=0, select bank0
  3966  028E  0826               	movf	?___lwdiv,w
  3967  028F  3EBC               	addlw	188
  3968  0290  1683               	bsf	3,5	;RP0=1, select bank1
  3969  0291  1303               	bcf	3,6	;RP1=0, select bank1
  3970  0292  00A0               	movwf	_Distance^(0+128)	;volatile
  3971  0293  1283               	bcf	3,5	;RP0=0, select bank0
  3972  0294  1303               	bcf	3,6	;RP1=0, select bank0
  3973  0295  0827               	movf	?___lwdiv+1,w
  3974  0296  1803               	skipnc
  3975  0297  3E01               	addlw	1
  3976  0298  3E02               	addlw	2
  3977  0299  1683               	bsf	3,5	;RP0=1, select bank1
  3978  029A  1303               	bcf	3,6	;RP1=0, select bank1
  3979  029B  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  3980  029C                     l1760:	
  3981                           
  3982                           ;ADC.c: 81: if (adcRAW < 144 && adcRAW >= 129)
  3983  029C  3000               	movlw	0
  3984  029D  1283               	bcf	3,5	;RP0=0, select bank0
  3985  029E  0236               	subwf	adcConvertMM@adcRAW+1,w
  3986  029F  3090               	movlw	144
  3987  02A0  1903               	skipnz
  3988  02A1  0235               	subwf	adcConvertMM@adcRAW,w
  3989  02A2  1803               	skipnc
  3990  02A3  2AE2               	goto	l1766
  3991  02A4  3000               	movlw	0
  3992  02A5  0236               	subwf	adcConvertMM@adcRAW+1,w
  3993  02A6  3081               	movlw	129
  3994  02A7  1903               	skipnz
  3995  02A8  0235               	subwf	adcConvertMM@adcRAW,w
  3996  02A9  1C03               	skipc
  3997  02AA  2AE2               	goto	l1766
  3998                           
  3999                           ;ADC.c: 82: Distance = (((14400 - adcRAW*100)/15) + 800);
  4000  02AB  300F               	movlw	15
  4001  02AC  00A6               	movwf	___lwdiv@divisor
  4002  02AD  3000               	movlw	0
  4003  02AE  00A7               	movwf	___lwdiv@divisor+1
  4004  02AF  0836               	movf	adcConvertMM@adcRAW+1,w
  4005  02B0  00A1               	movwf	___wmul@multiplier+1
  4006  02B1  0835               	movf	adcConvertMM@adcRAW,w
  4007  02B2  00A0               	movwf	___wmul@multiplier
  4008  02B3  3064               	movlw	100
  4009  02B4  00A2               	movwf	___wmul@multiplicand
  4010  02B5  3000               	movlw	0
  4011  02B6  00A3               	movwf	___wmul@multiplicand+1
  4012  02B7  120A  158A  2612  120A  118A  	fcall	___wmul
  4013  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  4014  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  4015  02BE  0920               	comf	?___wmul,w
  4016  02BF  00B7               	movwf	??_adcConvertMM
  4017  02C0  0921               	comf	?___wmul+1,w
  4018  02C1  00B8               	movwf	??_adcConvertMM+1
  4019  02C2  0AB7               	incf	??_adcConvertMM,f
  4020  02C3  1903               	skipnz
  4021  02C4  0AB8               	incf	??_adcConvertMM+1,f
  4022  02C5  0837               	movf	??_adcConvertMM,w
  4023  02C6  3E40               	addlw	64
  4024  02C7  00A8               	movwf	___lwdiv@dividend
  4025  02C8  0838               	movf	??_adcConvertMM+1,w
  4026  02C9  1803               	skipnc
  4027  02CA  3E01               	addlw	1
  4028  02CB  3E38               	addlw	56
  4029  02CC  00A9               	movwf	___lwdiv@dividend+1
  4030  02CD  120A  158A  26B6  120A  118A  	fcall	___lwdiv
  4031  02D2  1283               	bcf	3,5	;RP0=0, select bank0
  4032  02D3  1303               	bcf	3,6	;RP1=0, select bank0
  4033  02D4  0826               	movf	?___lwdiv,w
  4034  02D5  3E20               	addlw	32
  4035  02D6  1683               	bsf	3,5	;RP0=1, select bank1
  4036  02D7  1303               	bcf	3,6	;RP1=0, select bank1
  4037  02D8  00A0               	movwf	_Distance^(0+128)	;volatile
  4038  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  4039  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  4040  02DB  0827               	movf	?___lwdiv+1,w
  4041  02DC  1803               	skipnc
  4042  02DD  3E01               	addlw	1
  4043  02DE  3E03               	addlw	3
  4044  02DF  1683               	bsf	3,5	;RP0=1, select bank1
  4045  02E0  1303               	bcf	3,6	;RP1=0, select bank1
  4046  02E1  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  4047  02E2                     l1766:	
  4048                           
  4049                           ;ADC.c: 84: if (adcRAW < 129 && adcRAW >= 110)
  4050  02E2  3000               	movlw	0
  4051  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  4052  02E4  0236               	subwf	adcConvertMM@adcRAW+1,w
  4053  02E5  3081               	movlw	129
  4054  02E6  1903               	skipnz
  4055  02E7  0235               	subwf	adcConvertMM@adcRAW,w
  4056  02E8  1803               	skipnc
  4057  02E9  2B28               	goto	l1772
  4058  02EA  3000               	movlw	0
  4059  02EB  0236               	subwf	adcConvertMM@adcRAW+1,w
  4060  02EC  306E               	movlw	110
  4061  02ED  1903               	skipnz
  4062  02EE  0235               	subwf	adcConvertMM@adcRAW,w
  4063  02EF  1C03               	skipc
  4064  02F0  2B28               	goto	l1772
  4065                           
  4066                           ;ADC.c: 85: Distance = (((12900 - adcRAW*100)/19) + 900 + 50);
  4067  02F1  3013               	movlw	19
  4068  02F2  00A6               	movwf	___lwdiv@divisor
  4069  02F3  3000               	movlw	0
  4070  02F4  00A7               	movwf	___lwdiv@divisor+1
  4071  02F5  0836               	movf	adcConvertMM@adcRAW+1,w
  4072  02F6  00A1               	movwf	___wmul@multiplier+1
  4073  02F7  0835               	movf	adcConvertMM@adcRAW,w
  4074  02F8  00A0               	movwf	___wmul@multiplier
  4075  02F9  3064               	movlw	100
  4076  02FA  00A2               	movwf	___wmul@multiplicand
  4077  02FB  3000               	movlw	0
  4078  02FC  00A3               	movwf	___wmul@multiplicand+1
  4079  02FD  120A  158A  2612  120A  118A  	fcall	___wmul
  4080  0302  1283               	bcf	3,5	;RP0=0, select bank0
  4081  0303  1303               	bcf	3,6	;RP1=0, select bank0
  4082  0304  0920               	comf	?___wmul,w
  4083  0305  00B7               	movwf	??_adcConvertMM
  4084  0306  0921               	comf	?___wmul+1,w
  4085  0307  00B8               	movwf	??_adcConvertMM+1
  4086  0308  0AB7               	incf	??_adcConvertMM,f
  4087  0309  1903               	skipnz
  4088  030A  0AB8               	incf	??_adcConvertMM+1,f
  4089  030B  0837               	movf	??_adcConvertMM,w
  4090  030C  3E64               	addlw	100
  4091  030D  00A8               	movwf	___lwdiv@dividend
  4092  030E  0838               	movf	??_adcConvertMM+1,w
  4093  030F  1803               	skipnc
  4094  0310  3E01               	addlw	1
  4095  0311  3E32               	addlw	50
  4096  0312  00A9               	movwf	___lwdiv@dividend+1
  4097  0313  120A  158A  26B6  120A  118A  	fcall	___lwdiv
  4098  0318  1283               	bcf	3,5	;RP0=0, select bank0
  4099  0319  1303               	bcf	3,6	;RP1=0, select bank0
  4100  031A  0826               	movf	?___lwdiv,w
  4101  031B  3EB6               	addlw	182
  4102  031C  1683               	bsf	3,5	;RP0=1, select bank1
  4103  031D  1303               	bcf	3,6	;RP1=0, select bank1
  4104  031E  00A0               	movwf	_Distance^(0+128)	;volatile
  4105  031F  1283               	bcf	3,5	;RP0=0, select bank0
  4106  0320  1303               	bcf	3,6	;RP1=0, select bank0
  4107  0321  0827               	movf	?___lwdiv+1,w
  4108  0322  1803               	skipnc
  4109  0323  3E01               	addlw	1
  4110  0324  3E03               	addlw	3
  4111  0325  1683               	bsf	3,5	;RP0=1, select bank1
  4112  0326  1303               	bcf	3,6	;RP1=0, select bank1
  4113  0327  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  4114  0328                     l1772:	
  4115                           
  4116                           ;ADC.c: 87: if (adcRAW < 110 && adcRAW >= 98)
  4117  0328  3000               	movlw	0
  4118  0329  1283               	bcf	3,5	;RP0=0, select bank0
  4119  032A  0236               	subwf	adcConvertMM@adcRAW+1,w
  4120  032B  306E               	movlw	110
  4121  032C  1903               	skipnz
  4122  032D  0235               	subwf	adcConvertMM@adcRAW,w
  4123  032E  1803               	skipnc
  4124  032F  2B6E               	goto	l1778
  4125  0330  3000               	movlw	0
  4126  0331  0236               	subwf	adcConvertMM@adcRAW+1,w
  4127  0332  3062               	movlw	98
  4128  0333  1903               	skipnz
  4129  0334  0235               	subwf	adcConvertMM@adcRAW,w
  4130  0335  1C03               	skipc
  4131  0336  2B6E               	goto	l1778
  4132                           
  4133                           ;ADC.c: 88: Distance = (((11000 - adcRAW*100)/12) + 1000 + 100);
  4134  0337  300C               	movlw	12
  4135  0338  00A6               	movwf	___lwdiv@divisor
  4136  0339  3000               	movlw	0
  4137  033A  00A7               	movwf	___lwdiv@divisor+1
  4138  033B  0836               	movf	adcConvertMM@adcRAW+1,w
  4139  033C  00A1               	movwf	___wmul@multiplier+1
  4140  033D  0835               	movf	adcConvertMM@adcRAW,w
  4141  033E  00A0               	movwf	___wmul@multiplier
  4142  033F  3064               	movlw	100
  4143  0340  00A2               	movwf	___wmul@multiplicand
  4144  0341  3000               	movlw	0
  4145  0342  00A3               	movwf	___wmul@multiplicand+1
  4146  0343  120A  158A  2612  120A  118A  	fcall	___wmul
  4147  0348  1283               	bcf	3,5	;RP0=0, select bank0
  4148  0349  1303               	bcf	3,6	;RP1=0, select bank0
  4149  034A  0920               	comf	?___wmul,w
  4150  034B  00B7               	movwf	??_adcConvertMM
  4151  034C  0921               	comf	?___wmul+1,w
  4152  034D  00B8               	movwf	??_adcConvertMM+1
  4153  034E  0AB7               	incf	??_adcConvertMM,f
  4154  034F  1903               	skipnz
  4155  0350  0AB8               	incf	??_adcConvertMM+1,f
  4156  0351  0837               	movf	??_adcConvertMM,w
  4157  0352  3EF8               	addlw	248
  4158  0353  00A8               	movwf	___lwdiv@dividend
  4159  0354  0838               	movf	??_adcConvertMM+1,w
  4160  0355  1803               	skipnc
  4161  0356  3E01               	addlw	1
  4162  0357  3E2A               	addlw	42
  4163  0358  00A9               	movwf	___lwdiv@dividend+1
  4164  0359  120A  158A  26B6  120A  118A  	fcall	___lwdiv
  4165  035E  1283               	bcf	3,5	;RP0=0, select bank0
  4166  035F  1303               	bcf	3,6	;RP1=0, select bank0
  4167  0360  0826               	movf	?___lwdiv,w
  4168  0361  3E4C               	addlw	76
  4169  0362  1683               	bsf	3,5	;RP0=1, select bank1
  4170  0363  1303               	bcf	3,6	;RP1=0, select bank1
  4171  0364  00A0               	movwf	_Distance^(0+128)	;volatile
  4172  0365  1283               	bcf	3,5	;RP0=0, select bank0
  4173  0366  1303               	bcf	3,6	;RP1=0, select bank0
  4174  0367  0827               	movf	?___lwdiv+1,w
  4175  0368  1803               	skipnc
  4176  0369  3E01               	addlw	1
  4177  036A  3E04               	addlw	4
  4178  036B  1683               	bsf	3,5	;RP0=1, select bank1
  4179  036C  1303               	bcf	3,6	;RP1=0, select bank1
  4180  036D  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  4181  036E                     l1778:	
  4182                           
  4183                           ;ADC.c: 90: if (adcRAW < 98 && adcRAW >= 90)
  4184  036E  3000               	movlw	0
  4185  036F  1283               	bcf	3,5	;RP0=0, select bank0
  4186  0370  0236               	subwf	adcConvertMM@adcRAW+1,w
  4187  0371  3062               	movlw	98
  4188  0372  1903               	skipnz
  4189  0373  0235               	subwf	adcConvertMM@adcRAW,w
  4190  0374  1803               	skipnc
  4191  0375  2BB2               	goto	l1784
  4192  0376  3000               	movlw	0
  4193  0377  0236               	subwf	adcConvertMM@adcRAW+1,w
  4194  0378  305A               	movlw	90
  4195  0379  1903               	skipnz
  4196  037A  0235               	subwf	adcConvertMM@adcRAW,w
  4197  037B  1C03               	skipc
  4198  037C  2BB2               	goto	l1784
  4199                           
  4200                           ;ADC.c: 91: Distance = (((9800 - adcRAW*100)/8) + 1100 + 150);
  4201  037D  0836               	movf	adcConvertMM@adcRAW+1,w
  4202  037E  00A1               	movwf	___wmul@multiplier+1
  4203  037F  0835               	movf	adcConvertMM@adcRAW,w
  4204  0380  00A0               	movwf	___wmul@multiplier
  4205  0381  3064               	movlw	100
  4206  0382  00A2               	movwf	___wmul@multiplicand
  4207  0383  3000               	movlw	0
  4208  0384  00A3               	movwf	___wmul@multiplicand+1
  4209  0385  120A  158A  2612  120A  118A  	fcall	___wmul
  4210  038A  1283               	bcf	3,5	;RP0=0, select bank0
  4211  038B  1303               	bcf	3,6	;RP1=0, select bank0
  4212  038C  0920               	comf	?___wmul,w
  4213  038D  00B7               	movwf	??_adcConvertMM
  4214  038E  0921               	comf	?___wmul+1,w
  4215  038F  00B8               	movwf	??_adcConvertMM+1
  4216  0390  0AB7               	incf	??_adcConvertMM,f
  4217  0391  1903               	skipnz
  4218  0392  0AB8               	incf	??_adcConvertMM+1,f
  4219  0393  0837               	movf	??_adcConvertMM,w
  4220  0394  3E48               	addlw	72
  4221  0395  00B9               	movwf	??_adcConvertMM+2
  4222  0396  0838               	movf	??_adcConvertMM+1,w
  4223  0397  1803               	skipnc
  4224  0398  3E01               	addlw	1
  4225  0399  3E26               	addlw	38
  4226  039A  00BA               	movwf	??_adcConvertMM+3
  4227  039B  1003               	clrc
  4228  039C  0CBA               	rrf	??_adcConvertMM+3,f
  4229  039D  0CB9               	rrf	??_adcConvertMM+2,f
  4230  039E  1003               	clrc
  4231  039F  0CBA               	rrf	??_adcConvertMM+3,f
  4232  03A0  0CB9               	rrf	??_adcConvertMM+2,f
  4233  03A1  1003               	clrc
  4234  03A2  0CBA               	rrf	??_adcConvertMM+3,f
  4235  03A3  0CB9               	rrf	??_adcConvertMM+2,f
  4236  03A4  0839               	movf	??_adcConvertMM+2,w
  4237  03A5  3EE2               	addlw	226
  4238  03A6  1683               	bsf	3,5	;RP0=1, select bank1
  4239  03A7  1303               	bcf	3,6	;RP1=0, select bank1
  4240  03A8  00A0               	movwf	_Distance^(0+128)	;volatile
  4241  03A9  1283               	bcf	3,5	;RP0=0, select bank0
  4242  03AA  1303               	bcf	3,6	;RP1=0, select bank0
  4243  03AB  083A               	movf	??_adcConvertMM+3,w
  4244  03AC  1803               	skipnc
  4245  03AD  3E01               	addlw	1
  4246  03AE  3E04               	addlw	4
  4247  03AF  1683               	bsf	3,5	;RP0=1, select bank1
  4248  03B0  1303               	bcf	3,6	;RP1=0, select bank1
  4249  03B1  00A1               	movwf	(_Distance+1)^(0+128)	;volatile
  4250  03B2                     l1784:	
  4251                           
  4252                           ;ADC.c: 93: if(adcRAW < 90 || adcRAW >= 517)
  4253  03B2  3000               	movlw	0
  4254  03B3  1283               	bcf	3,5	;RP0=0, select bank0
  4255  03B4  0236               	subwf	adcConvertMM@adcRAW+1,w
  4256  03B5  305A               	movlw	90
  4257  03B6  1903               	skipnz
  4258  03B7  0235               	subwf	adcConvertMM@adcRAW,w
  4259  03B8  1C03               	skipc
  4260  03B9  2BC1               	goto	l1788
  4261  03BA  3002               	movlw	2
  4262  03BB  0236               	subwf	adcConvertMM@adcRAW+1,w
  4263  03BC  3005               	movlw	5
  4264  03BD  1903               	skipnz
  4265  03BE  0235               	subwf	adcConvertMM@adcRAW,w
  4266  03BF  1C03               	skipc
  4267  03C0  0008               	return
  4268  03C1                     l1788:	
  4269                           
  4270                           ;ADC.c: 94: Distance = 0;
  4271  03C1  1683               	bsf	3,5	;RP0=1, select bank1
  4272  03C2  1303               	bcf	3,6	;RP1=0, select bank1
  4273  03C3  01A0               	clrf	_Distance^(0+128)	;volatile
  4274  03C4  01A1               	clrf	(_Distance+1)^(0+128)	;volatile
  4275  03C5  0008               	return
  4276  03C6                     __end_of_adcConvertMM:	
  4277                           ;ADC.c: 96: return(Distance);
  4278                           ;	Return value of _adcConvertMM is never used
  4279                           
  4280                           
  4281                           	psect	text19
  4282  0E12                     __ptext19:	
  4283 ;; *************** function ___wmul *****************
  4284 ;; Defined at:
  4285 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  4286 ;; Parameters:    Size  Location     Type
  4287 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4288 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;  product         2    4[BANK0 ] unsigned int 
  4291 ;; Return value:  Size  Location     Type
  4292 ;;                  2    0[BANK0 ] unsigned int 
  4293 ;; Registers used:
  4294 ;;		wreg, status,2, status,0
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4300 ;;      Params:         0       4       0       0       0
  4301 ;;      Locals:         0       2       0       0       0
  4302 ;;      Temps:          0       0       0       0       0
  4303 ;;      Totals:         0       6       0       0       0
  4304 ;;Total ram usage:        6 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    2
  4307 ;; This function calls:
  4308 ;;		Nothing
  4309 ;; This function is called by:
  4310 ;;		_main
  4311 ;;		_adcConvertMM
  4312 ;; This function uses a non-reentrant model
  4313 ;;
  4314                           
  4315                           
  4316                           ;psect for function ___wmul
  4317  0E12                     ___wmul:	
  4318                           
  4319                           ;incstack = 0
  4320                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4321  0E12  1283               	bcf	3,5	;RP0=0, select bank0
  4322  0E13  1303               	bcf	3,6	;RP1=0, select bank0
  4323  0E14  01A4               	clrf	___wmul@product
  4324  0E15  01A5               	clrf	___wmul@product+1
  4325  0E16                     l1562:	
  4326  0E16  1C20               	btfss	___wmul@multiplier,0
  4327  0E17  2E1E               	goto	l570
  4328  0E18  0822               	movf	___wmul@multiplicand,w
  4329  0E19  07A4               	addwf	___wmul@product,f
  4330  0E1A  1803               	skipnc
  4331  0E1B  0AA5               	incf	___wmul@product+1,f
  4332  0E1C  0823               	movf	___wmul@multiplicand+1,w
  4333  0E1D  07A5               	addwf	___wmul@product+1,f
  4334  0E1E                     l570:	
  4335  0E1E  3001               	movlw	1
  4336  0E1F                     u975:	
  4337  0E1F  1003               	clrc
  4338  0E20  0DA2               	rlf	___wmul@multiplicand,f
  4339  0E21  0DA3               	rlf	___wmul@multiplicand+1,f
  4340  0E22  3EFF               	addlw	-1
  4341  0E23  1D03               	skipz
  4342  0E24  2E1F               	goto	u975
  4343  0E25  3001               	movlw	1
  4344  0E26                     u985:	
  4345  0E26  1003               	clrc
  4346  0E27  0CA1               	rrf	___wmul@multiplier+1,f
  4347  0E28  0CA0               	rrf	___wmul@multiplier,f
  4348  0E29  3EFF               	addlw	-1
  4349  0E2A  1D03               	skipz
  4350  0E2B  2E26               	goto	u985
  4351  0E2C  0820               	movf	___wmul@multiplier,w
  4352  0E2D  0421               	iorwf	___wmul@multiplier+1,w
  4353  0E2E  1D03               	btfss	3,2
  4354  0E2F  2E16               	goto	l1562
  4355  0E30  0825               	movf	___wmul@product+1,w
  4356  0E31  00A1               	movwf	?___wmul+1
  4357  0E32  0824               	movf	___wmul@product,w
  4358  0E33  00A0               	movwf	?___wmul
  4359  0E34  0008               	return
  4360  0E35                     __end_of___wmul:	
  4361                           
  4362                           	psect	text20
  4363  0EB6                     __ptext20:	
  4364 ;; *************** function ___lwdiv *****************
  4365 ;; Defined at:
  4366 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;  divisor         2    6[BANK0 ] unsigned int 
  4369 ;;  dividend        2    8[BANK0 ] unsigned int 
  4370 ;; Auto vars:     Size  Location     Type
  4371 ;;  quotient        2   11[BANK0 ] unsigned int 
  4372 ;;  counter         1   13[BANK0 ] unsigned char 
  4373 ;; Return value:  Size  Location     Type
  4374 ;;                  2    6[BANK0 ] unsigned int 
  4375 ;; Registers used:
  4376 ;;		wreg, status,2, status,0
  4377 ;; Tracked objects:
  4378 ;;		On entry : 0/0
  4379 ;;		On exit  : 0/0
  4380 ;;		Unchanged: 0/0
  4381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4382 ;;      Params:         0       4       0       0       0
  4383 ;;      Locals:         0       3       0       0       0
  4384 ;;      Temps:          0       1       0       0       0
  4385 ;;      Totals:         0       8       0       0       0
  4386 ;;Total ram usage:        8 bytes
  4387 ;; Hardware stack levels used:    1
  4388 ;; Hardware stack levels required when called:    2
  4389 ;; This function calls:
  4390 ;;		Nothing
  4391 ;; This function is called by:
  4392 ;;		_main
  4393 ;;		_adcConvertMM
  4394 ;; This function uses a non-reentrant model
  4395 ;;
  4396                           
  4397                           
  4398                           ;psect for function ___lwdiv
  4399  0EB6                     ___lwdiv:	
  4400                           
  4401                           ;incstack = 0
  4402                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4403  0EB6  1283               	bcf	3,5	;RP0=0, select bank0
  4404  0EB7  1303               	bcf	3,6	;RP1=0, select bank0
  4405  0EB8  01AB               	clrf	___lwdiv@quotient
  4406  0EB9  01AC               	clrf	___lwdiv@quotient+1
  4407  0EBA  0826               	movf	___lwdiv@divisor,w
  4408  0EBB  0427               	iorwf	___lwdiv@divisor+1,w
  4409  0EBC  1903               	btfsc	3,2
  4410  0EBD  2EEF               	goto	l1636
  4411  0EBE  01AD               	clrf	___lwdiv@counter
  4412  0EBF  0AAD               	incf	___lwdiv@counter,f
  4413  0EC0                     l1624:	
  4414  0EC0  1BA7               	btfsc	___lwdiv@divisor+1,7
  4415  0EC1  2ECE               	goto	l1626
  4416  0EC2  3001               	movlw	1
  4417  0EC3                     u1115:	
  4418  0EC3  1003               	clrc
  4419  0EC4  0DA6               	rlf	___lwdiv@divisor,f
  4420  0EC5  0DA7               	rlf	___lwdiv@divisor+1,f
  4421  0EC6  3EFF               	addlw	-1
  4422  0EC7  1D03               	skipz
  4423  0EC8  2EC3               	goto	u1115
  4424  0EC9  3001               	movlw	1
  4425  0ECA  00AA               	movwf	??___lwdiv
  4426  0ECB  082A               	movf	??___lwdiv,w
  4427  0ECC  07AD               	addwf	___lwdiv@counter,f
  4428  0ECD  2EC0               	goto	l1624
  4429  0ECE                     l1626:	
  4430  0ECE  3001               	movlw	1
  4431  0ECF                     u1135:	
  4432  0ECF  1003               	clrc
  4433  0ED0  0DAB               	rlf	___lwdiv@quotient,f
  4434  0ED1  0DAC               	rlf	___lwdiv@quotient+1,f
  4435  0ED2  3EFF               	addlw	-1
  4436  0ED3  1D03               	skipz
  4437  0ED4  2ECF               	goto	u1135
  4438  0ED5  0827               	movf	___lwdiv@divisor+1,w
  4439  0ED6  0229               	subwf	___lwdiv@dividend+1,w
  4440  0ED7  1D03               	skipz
  4441  0ED8  2EDB               	goto	u1145
  4442  0ED9  0826               	movf	___lwdiv@divisor,w
  4443  0EDA  0228               	subwf	___lwdiv@dividend,w
  4444  0EDB                     u1145:	
  4445  0EDB  1C03               	skipc
  4446  0EDC  2EE4               	goto	l1632
  4447  0EDD  0826               	movf	___lwdiv@divisor,w
  4448  0EDE  02A8               	subwf	___lwdiv@dividend,f
  4449  0EDF  0827               	movf	___lwdiv@divisor+1,w
  4450  0EE0  1C03               	skipc
  4451  0EE1  03A9               	decf	___lwdiv@dividend+1,f
  4452  0EE2  02A9               	subwf	___lwdiv@dividend+1,f
  4453  0EE3  142B               	bsf	___lwdiv@quotient,0
  4454  0EE4                     l1632:	
  4455  0EE4  3001               	movlw	1
  4456  0EE5                     u1155:	
  4457  0EE5  1003               	clrc
  4458  0EE6  0CA7               	rrf	___lwdiv@divisor+1,f
  4459  0EE7  0CA6               	rrf	___lwdiv@divisor,f
  4460  0EE8  3EFF               	addlw	-1
  4461  0EE9  1D03               	skipz
  4462  0EEA  2EE5               	goto	u1155
  4463  0EEB  3001               	movlw	1
  4464  0EEC  02AD               	subwf	___lwdiv@counter,f
  4465  0EED  1D03               	btfss	3,2
  4466  0EEE  2ECE               	goto	l1626
  4467  0EEF                     l1636:	
  4468  0EEF  082C               	movf	___lwdiv@quotient+1,w
  4469  0EF0  00A7               	movwf	?___lwdiv+1
  4470  0EF1  082B               	movf	___lwdiv@quotient,w
  4471  0EF2  00A6               	movwf	?___lwdiv
  4472  0EF3  0008               	return
  4473  0EF4                     __end_of___lwdiv:	
  4474                           
  4475                           	psect	text21
  4476  06F1                     __ptext21:	
  4477 ;; *************** function ___aldiv *****************
  4478 ;; Defined at:
  4479 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
  4480 ;; Parameters:    Size  Location     Type
  4481 ;;  divisor         4    6[BANK0 ] long 
  4482 ;;  dividend        4   10[BANK0 ] long 
  4483 ;; Auto vars:     Size  Location     Type
  4484 ;;  quotient        4   17[BANK0 ] long 
  4485 ;;  sign            1   16[BANK0 ] unsigned char 
  4486 ;;  counter         1   15[BANK0 ] unsigned char 
  4487 ;; Return value:  Size  Location     Type
  4488 ;;                  4    6[BANK0 ] long 
  4489 ;; Registers used:
  4490 ;;		wreg, status,2, status,0
  4491 ;; Tracked objects:
  4492 ;;		On entry : 0/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4496 ;;      Params:         0       8       0       0       0
  4497 ;;      Locals:         0       6       0       0       0
  4498 ;;      Temps:          0       1       0       0       0
  4499 ;;      Totals:         0      15       0       0       0
  4500 ;;Total ram usage:       15 bytes
  4501 ;; Hardware stack levels used:    1
  4502 ;; Hardware stack levels required when called:    2
  4503 ;; This function calls:
  4504 ;;		Nothing
  4505 ;; This function is called by:
  4506 ;;		_adcConvertMM
  4507 ;; This function uses a non-reentrant model
  4508 ;;
  4509                           
  4510                           
  4511                           ;psect for function ___aldiv
  4512  06F1                     ___aldiv:	
  4513                           
  4514                           ;incstack = 0
  4515                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4516  06F1  1283               	bcf	3,5	;RP0=0, select bank0
  4517  06F2  1303               	bcf	3,6	;RP1=0, select bank0
  4518  06F3  01B0               	clrf	___aldiv@sign
  4519  06F4  1FA9               	btfss	___aldiv@divisor+3,7
  4520  06F5  2F03               	goto	l625
  4521  06F6  09A6               	comf	___aldiv@divisor,f
  4522  06F7  09A7               	comf	___aldiv@divisor+1,f
  4523  06F8  09A8               	comf	___aldiv@divisor+2,f
  4524  06F9  09A9               	comf	___aldiv@divisor+3,f
  4525  06FA  0AA6               	incf	___aldiv@divisor,f
  4526  06FB  1903               	skipnz
  4527  06FC  0AA7               	incf	___aldiv@divisor+1,f
  4528  06FD  1903               	skipnz
  4529  06FE  0AA8               	incf	___aldiv@divisor+2,f
  4530  06FF  1903               	skipnz
  4531  0700  0AA9               	incf	___aldiv@divisor+3,f
  4532  0701  01B0               	clrf	___aldiv@sign
  4533  0702  0AB0               	incf	___aldiv@sign,f
  4534  0703                     l625:	
  4535  0703  1FAD               	btfss	___aldiv@dividend+3,7
  4536  0704  2F14               	goto	l1584
  4537  0705  09AA               	comf	___aldiv@dividend,f
  4538  0706  09AB               	comf	___aldiv@dividend+1,f
  4539  0707  09AC               	comf	___aldiv@dividend+2,f
  4540  0708  09AD               	comf	___aldiv@dividend+3,f
  4541  0709  0AAA               	incf	___aldiv@dividend,f
  4542  070A  1903               	skipnz
  4543  070B  0AAB               	incf	___aldiv@dividend+1,f
  4544  070C  1903               	skipnz
  4545  070D  0AAC               	incf	___aldiv@dividend+2,f
  4546  070E  1903               	skipnz
  4547  070F  0AAD               	incf	___aldiv@dividend+3,f
  4548  0710  3001               	movlw	1
  4549  0711  00AE               	movwf	??___aldiv
  4550  0712  082E               	movf	??___aldiv,w
  4551  0713  06B0               	xorwf	___aldiv@sign,f
  4552  0714                     l1584:	
  4553  0714  3000               	movlw	0
  4554  0715  00B4               	movwf	___aldiv@quotient+3
  4555  0716  3000               	movlw	0
  4556  0717  00B3               	movwf	___aldiv@quotient+2
  4557  0718  3000               	movlw	0
  4558  0719  00B2               	movwf	___aldiv@quotient+1
  4559  071A  3000               	movlw	0
  4560  071B  00B1               	movwf	___aldiv@quotient
  4561  071C  0829               	movf	___aldiv@divisor+3,w
  4562  071D  0428               	iorwf	___aldiv@divisor+2,w
  4563  071E  0427               	iorwf	___aldiv@divisor+1,w
  4564  071F  0426               	iorwf	___aldiv@divisor,w
  4565  0720  1903               	skipnz
  4566  0721  2F69               	goto	l1606
  4567  0722  01AF               	clrf	___aldiv@counter
  4568  0723  0AAF               	incf	___aldiv@counter,f
  4569  0724                     l1592:	
  4570  0724  1BA9               	btfsc	___aldiv@divisor+3,7
  4571  0725  2F34               	goto	l1594
  4572  0726  3001               	movlw	1
  4573  0727  00AE               	movwf	??___aldiv
  4574  0728                     u1035:	
  4575  0728  1003               	clrc
  4576  0729  0DA6               	rlf	___aldiv@divisor,f
  4577  072A  0DA7               	rlf	___aldiv@divisor+1,f
  4578  072B  0DA8               	rlf	___aldiv@divisor+2,f
  4579  072C  0DA9               	rlf	___aldiv@divisor+3,f
  4580  072D  0BAE               	decfsz	??___aldiv,f
  4581  072E  2F28               	goto	u1035
  4582  072F  3001               	movlw	1
  4583  0730  00AE               	movwf	??___aldiv
  4584  0731  082E               	movf	??___aldiv,w
  4585  0732  07AF               	addwf	___aldiv@counter,f
  4586  0733  2F24               	goto	l1592
  4587  0734                     l1594:	
  4588  0734  3001               	movlw	1
  4589  0735  00AE               	movwf	??___aldiv
  4590  0736                     u1055:	
  4591  0736  1003               	clrc
  4592  0737  0DB1               	rlf	___aldiv@quotient,f
  4593  0738  0DB2               	rlf	___aldiv@quotient+1,f
  4594  0739  0DB3               	rlf	___aldiv@quotient+2,f
  4595  073A  0DB4               	rlf	___aldiv@quotient+3,f
  4596  073B  0BAE               	decfsz	??___aldiv,f
  4597  073C  2F36               	goto	u1055
  4598  073D  0829               	movf	___aldiv@divisor+3,w
  4599  073E  022D               	subwf	___aldiv@dividend+3,w
  4600  073F  1D03               	skipz
  4601  0740  2F4B               	goto	u1065
  4602  0741  0828               	movf	___aldiv@divisor+2,w
  4603  0742  022C               	subwf	___aldiv@dividend+2,w
  4604  0743  1D03               	skipz
  4605  0744  2F4B               	goto	u1065
  4606  0745  0827               	movf	___aldiv@divisor+1,w
  4607  0746  022B               	subwf	___aldiv@dividend+1,w
  4608  0747  1D03               	skipz
  4609  0748  2F4B               	goto	u1065
  4610  0749  0826               	movf	___aldiv@divisor,w
  4611  074A  022A               	subwf	___aldiv@dividend,w
  4612  074B                     u1065:	
  4613  074B  1C03               	skipc
  4614  074C  2F5C               	goto	l1602
  4615  074D  0826               	movf	___aldiv@divisor,w
  4616  074E  02AA               	subwf	___aldiv@dividend,f
  4617  074F  0827               	movf	___aldiv@divisor+1,w
  4618  0750  1C03               	skipc
  4619  0751  0F27               	incfsz	___aldiv@divisor+1,w
  4620  0752  02AB               	subwf	___aldiv@dividend+1,f
  4621  0753  0828               	movf	___aldiv@divisor+2,w
  4622  0754  1C03               	skipc
  4623  0755  0F28               	incfsz	___aldiv@divisor+2,w
  4624  0756  02AC               	subwf	___aldiv@dividend+2,f
  4625  0757  0829               	movf	___aldiv@divisor+3,w
  4626  0758  1C03               	skipc
  4627  0759  0F29               	incfsz	___aldiv@divisor+3,w
  4628  075A  02AD               	subwf	___aldiv@dividend+3,f
  4629  075B  1431               	bsf	___aldiv@quotient,0
  4630  075C                     l1602:	
  4631  075C  3001               	movlw	1
  4632  075D                     u1075:	
  4633  075D  1003               	clrc
  4634  075E  0CA9               	rrf	___aldiv@divisor+3,f
  4635  075F  0CA8               	rrf	___aldiv@divisor+2,f
  4636  0760  0CA7               	rrf	___aldiv@divisor+1,f
  4637  0761  0CA6               	rrf	___aldiv@divisor,f
  4638  0762  3EFF               	addlw	-1
  4639  0763  1D03               	skipz
  4640  0764  2F5D               	goto	u1075
  4641  0765  3001               	movlw	1
  4642  0766  02AF               	subwf	___aldiv@counter,f
  4643  0767  1D03               	btfss	3,2
  4644  0768  2F34               	goto	l1594
  4645  0769                     l1606:	
  4646  0769  0830               	movf	___aldiv@sign,w
  4647  076A  1903               	btfsc	3,2
  4648  076B  2F77               	goto	l1610
  4649  076C  09B1               	comf	___aldiv@quotient,f
  4650  076D  09B2               	comf	___aldiv@quotient+1,f
  4651  076E  09B3               	comf	___aldiv@quotient+2,f
  4652  076F  09B4               	comf	___aldiv@quotient+3,f
  4653  0770  0AB1               	incf	___aldiv@quotient,f
  4654  0771  1903               	skipnz
  4655  0772  0AB2               	incf	___aldiv@quotient+1,f
  4656  0773  1903               	skipnz
  4657  0774  0AB3               	incf	___aldiv@quotient+2,f
  4658  0775  1903               	skipnz
  4659  0776  0AB4               	incf	___aldiv@quotient+3,f
  4660  0777                     l1610:	
  4661  0777  0834               	movf	___aldiv@quotient+3,w
  4662  0778  00A9               	movwf	?___aldiv+3
  4663  0779  0833               	movf	___aldiv@quotient+2,w
  4664  077A  00A8               	movwf	?___aldiv+2
  4665  077B  0832               	movf	___aldiv@quotient+1,w
  4666  077C  00A7               	movwf	?___aldiv+1
  4667  077D  0831               	movf	___aldiv@quotient,w
  4668  077E  00A6               	movwf	?___aldiv
  4669  077F  0008               	return
  4670  0780                     __end_of___aldiv:	
  4671                           
  4672                           	psect	text22
  4673  0F32                     __ptext22:	
  4674 ;; *************** function _isr *****************
  4675 ;; Defined at:
  4676 ;;		line 29 in file "main.c"
  4677 ;; Parameters:    Size  Location     Type
  4678 ;;		None
  4679 ;; Auto vars:     Size  Location     Type
  4680 ;;		None
  4681 ;; Return value:  Size  Location     Type
  4682 ;;                  1    wreg      void 
  4683 ;; Registers used:
  4684 ;;		wreg, status,2, status,0, pclath, cstack
  4685 ;; Tracked objects:
  4686 ;;		On entry : 0/0
  4687 ;;		On exit  : 0/0
  4688 ;;		Unchanged: 0/0
  4689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4690 ;;      Params:         0       0       0       0       0
  4691 ;;      Locals:         0       0       0       0       0
  4692 ;;      Temps:          5       0       0       0       0
  4693 ;;      Totals:         5       0       0       0       0
  4694 ;;Total ram usage:        5 bytes
  4695 ;; Hardware stack levels used:    1
  4696 ;; Hardware stack levels required when called:    1
  4697 ;; This function calls:
  4698 ;;		___lwmod
  4699 ;; This function is called by:
  4700 ;;		Interrupt level 1
  4701 ;; This function uses a non-reentrant model
  4702 ;;
  4703                           
  4704                           
  4705                           ;psect for function _isr
  4706  0F32                     _isr:	
  4707                           
  4708                           ;main.c: 31: if(TMR0IF){
  4709  0F32  1D0B               	btfss	11,2	;volatile
  4710  0F33  2F68               	goto	i1l119
  4711                           
  4712                           ;main.c: 32: TMR0IF = 0;
  4713  0F34  110B               	bcf	11,2	;volatile
  4714                           
  4715                           ;main.c: 33: TMR0 = 100;
  4716  0F35  3064               	movlw	100
  4717  0F36  0081               	movwf	1	;volatile
  4718                           
  4719                           ;main.c: 37: if(time_count % 1 == 0) {
  4720  0F37  3001               	movlw	1
  4721  0F38  07DC               	addwf	_time_count,f	;volatile
  4722  0F39  1803               	skipnc
  4723  0F3A  0ADD               	incf	_time_count+1,f	;volatile
  4724  0F3B  3000               	movlw	0
  4725  0F3C  07DD               	addwf	_time_count+1,f	;volatile
  4726                           
  4727                           ;main.c: 40: }
  4728                           ;main.c: 42: if(time_count % 500 == 0){
  4729  0F3D  30F4               	movlw	244
  4730  0F3E  00F0               	movwf	___lwmod@divisor
  4731  0F3F  3001               	movlw	1
  4732  0F40  00F1               	movwf	___lwmod@divisor+1
  4733  0F41  085D               	movf	_time_count+1,w	;volatile
  4734  0F42  00F3               	movwf	___lwmod@dividend+1
  4735  0F43  085C               	movf	_time_count,w	;volatile
  4736  0F44  00F2               	movwf	___lwmod@dividend
  4737  0F45  120A  118A  27C5  120A  158A  	fcall	___lwmod
  4738  0F4A  0870               	movf	?___lwmod,w
  4739  0F4B  0471               	iorwf	?___lwmod+1,w
  4740  0F4C  1D03               	btfss	3,2
  4741  0F4D  2F54               	goto	i1l1960
  4742                           
  4743                           ;main.c: 43: RB4 = !RB4;
  4744  0F4E  3010               	movlw	16
  4745  0F4F  1283               	bcf	3,5	;RP0=0, select bank0
  4746  0F50  1303               	bcf	3,6	;RP1=0, select bank0
  4747  0F51  0686               	xorwf	6,f
  4748                           
  4749                           ;main.c: 45: time_count = 0;
  4750  0F52  01DC               	clrf	_time_count	;volatile
  4751  0F53  01DD               	clrf	_time_count+1	;volatile
  4752  0F54                     i1l1960:	
  4753                           
  4754                           ;main.c: 46: }
  4755                           ;main.c: 48: if (!RB0 == 1){
  4756  0F54  1283               	bcf	3,5	;RP0=0, select bank0
  4757  0F55  1303               	bcf	3,6	;RP1=0, select bank0
  4758  0F56  1806               	btfsc	6,0	;volatile
  4759  0F57  2F5C               	goto	i1l1964
  4760                           
  4761                           ;main.c: 49: PB8Counter++;
  4762  0F58  3001               	movlw	1
  4763  0F59  00F6               	movwf	??_isr
  4764  0F5A  0876               	movf	??_isr,w
  4765  0F5B  07E4               	addwf	_PB8Counter,f
  4766  0F5C                     i1l1964:	
  4767                           
  4768                           ;main.c: 50: }
  4769                           ;main.c: 51: if (!RB1 == 1){
  4770  0F5C  1886               	btfsc	6,1	;volatile
  4771  0F5D  2F62               	goto	i1l1968
  4772                           
  4773                           ;main.c: 52: PB7Counter++;
  4774  0F5E  3001               	movlw	1
  4775  0F5F  00F6               	movwf	??_isr
  4776  0F60  0876               	movf	??_isr,w
  4777  0F61  07E3               	addwf	_PB7Counter,f
  4778  0F62                     i1l1968:	
  4779                           
  4780                           ;main.c: 53: }
  4781                           ;main.c: 54: if (!RB2 == 1){
  4782  0F62  1906               	btfsc	6,2	;volatile
  4783  0F63  2F68               	goto	i1l119
  4784                           
  4785                           ;main.c: 55: PB6Counter++;
  4786  0F64  3001               	movlw	1
  4787  0F65  00F6               	movwf	??_isr
  4788  0F66  0876               	movf	??_isr,w
  4789  0F67  07E2               	addwf	_PB6Counter,f
  4790  0F68                     i1l119:	
  4791  0F68  087A               	movf	??_isr+4,w
  4792  0F69  00FF               	movwf	127
  4793  0F6A  0879               	movf	??_isr+3,w
  4794  0F6B  008A               	movwf	10
  4795  0F6C  0878               	movf	??_isr+2,w
  4796  0F6D  0084               	movwf	4
  4797  0F6E  0E77               	swapf	(??_isr+1)^(0+-128),w
  4798  0F6F  0083               	movwf	3
  4799  0F70  0EFE               	swapf	126,f
  4800  0F71  0E7E               	swapf	126,w
  4801  0F72  0009               	retfie
  4802  0F73                     __end_of_isr:	
  4803                           
  4804                           	psect	intentry
  4805  0004                     __pintentry:	
  4806                           ;incstack = 0
  4807                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  4808                           
  4809  0004                     interrupt_function:	
  4810  007E                     saved_w	set	btemp
  4811  0004  00FE               	movwf	btemp
  4812  0005  0E03               	swapf	3,w
  4813  0006  00F7               	movwf	??_isr+1
  4814  0007  0804               	movf	4,w
  4815  0008  00F8               	movwf	??_isr+2
  4816  0009  080A               	movf	10,w
  4817  000A  00F9               	movwf	??_isr+3
  4818  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4819  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4820  000D  087F               	movf	btemp+1,w
  4821  000E  00FA               	movwf	??_isr+4
  4822  000F  120A  158A  2F32   	ljmp	_isr
  4823                           
  4824                           	psect	text23
  4825  07C5                     __ptext23:	
  4826 ;; *************** function ___lwmod *****************
  4827 ;; Defined at:
  4828 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  4829 ;; Parameters:    Size  Location     Type
  4830 ;;  divisor         2    0[COMMON] unsigned int 
  4831 ;;  dividend        2    2[COMMON] unsigned int 
  4832 ;; Auto vars:     Size  Location     Type
  4833 ;;  counter         1    5[COMMON] unsigned char 
  4834 ;; Return value:  Size  Location     Type
  4835 ;;                  2    0[COMMON] unsigned int 
  4836 ;; Registers used:
  4837 ;;		wreg, status,2, status,0
  4838 ;; Tracked objects:
  4839 ;;		On entry : 0/0
  4840 ;;		On exit  : 0/0
  4841 ;;		Unchanged: 0/0
  4842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4843 ;;      Params:         4       0       0       0       0
  4844 ;;      Locals:         1       0       0       0       0
  4845 ;;      Temps:          1       0       0       0       0
  4846 ;;      Totals:         6       0       0       0       0
  4847 ;;Total ram usage:        6 bytes
  4848 ;; Hardware stack levels used:    1
  4849 ;; This function calls:
  4850 ;;		Nothing
  4851 ;; This function is called by:
  4852 ;;		_isr
  4853 ;; This function uses a non-reentrant model
  4854 ;;
  4855                           
  4856                           
  4857                           ;psect for function ___lwmod
  4858  07C5                     ___lwmod:	
  4859                           
  4860                           ;incstack = 0
  4861                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4862  07C5  0870               	movf	___lwmod@divisor,w
  4863  07C6  0471               	iorwf	___lwmod@divisor+1,w
  4864  07C7  1903               	btfsc	3,2
  4865  07C8  2FF2               	goto	i1l1944
  4866  07C9  01F5               	clrf	___lwmod@counter
  4867  07CA  0AF5               	incf	___lwmod@counter,f
  4868  07CB                     i1l1934:	
  4869  07CB  1BF1               	btfsc	___lwmod@divisor+1,7
  4870  07CC  2FD9               	goto	i1l1936
  4871  07CD  3001               	movlw	1
  4872  07CE                     u163_25:	
  4873  07CE  1003               	clrc
  4874  07CF  0DF0               	rlf	___lwmod@divisor,f
  4875  07D0  0DF1               	rlf	___lwmod@divisor+1,f
  4876  07D1  3EFF               	addlw	-1
  4877  07D2  1D03               	skipz
  4878  07D3  2FCE               	goto	u163_25
  4879  07D4  3001               	movlw	1
  4880  07D5  00F4               	movwf	??___lwmod
  4881  07D6  0874               	movf	??___lwmod,w
  4882  07D7  07F5               	addwf	___lwmod@counter,f
  4883  07D8  2FCB               	goto	i1l1934
  4884  07D9                     i1l1936:	
  4885  07D9  0871               	movf	___lwmod@divisor+1,w
  4886  07DA  0273               	subwf	___lwmod@dividend+1,w
  4887  07DB  1D03               	skipz
  4888  07DC  2FDF               	goto	u165_25
  4889  07DD  0870               	movf	___lwmod@divisor,w
  4890  07DE  0272               	subwf	___lwmod@dividend,w
  4891  07DF                     u165_25:	
  4892  07DF  1C03               	skipc
  4893  07E0  2FE7               	goto	i1l1940
  4894  07E1  0870               	movf	___lwmod@divisor,w
  4895  07E2  02F2               	subwf	___lwmod@dividend,f
  4896  07E3  0871               	movf	___lwmod@divisor+1,w
  4897  07E4  1C03               	skipc
  4898  07E5  03F3               	decf	___lwmod@dividend+1,f
  4899  07E6  02F3               	subwf	___lwmod@dividend+1,f
  4900  07E7                     i1l1940:	
  4901  07E7  3001               	movlw	1
  4902  07E8                     u166_25:	
  4903  07E8  1003               	clrc
  4904  07E9  0CF1               	rrf	___lwmod@divisor+1,f
  4905  07EA  0CF0               	rrf	___lwmod@divisor,f
  4906  07EB  3EFF               	addlw	-1
  4907  07EC  1D03               	skipz
  4908  07ED  2FE8               	goto	u166_25
  4909  07EE  3001               	movlw	1
  4910  07EF  02F5               	subwf	___lwmod@counter,f
  4911  07F0  1D03               	btfss	3,2
  4912  07F1  2FD9               	goto	i1l1936
  4913  07F2                     i1l1944:	
  4914  07F2  0873               	movf	___lwmod@dividend+1,w
  4915  07F3  00F1               	movwf	?___lwmod+1
  4916  07F4  0872               	movf	___lwmod@dividend,w
  4917  07F5  00F0               	movwf	?___lwmod
  4918  07F6  0008               	return
  4919  07F7                     __end_of___lwmod:	
  4920  007E                     btemp	set	126	;btemp
  4921  007E                     wtemp	set	126
  4922  007E                     wtemp0	set	126
  4923  0080                     wtemp1	set	128
  4924  0082                     wtemp2	set	130
  4925  0084                     wtemp3	set	132
  4926  0086                     wtemp4	set	134
  4927  0088                     wtemp5	set	136
  4928  007F                     wtemp6	set	127
  4929  007E                     ttemp	set	126
  4930  007E                     ttemp0	set	126
  4931  0081                     ttemp1	set	129
  4932  0084                     ttemp2	set	132
  4933  0087                     ttemp3	set	135
  4934  007F                     ttemp4	set	127
  4935  007E                     ltemp	set	126
  4936  007E                     ltemp0	set	126
  4937  0082                     ltemp1	set	130
  4938  0086                     ltemp2	set	134
  4939  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         46
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     54      80
    BANK1            80      0      20
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->___lwmod

Critical Paths under _main in BANK0

    _setupLCD->_lcdWriteControl
    _initWallFollow->_setCCW
    _setCCW->_spi_transfer
    _getSensorData->_ser_getch
    _DriveDirect->_ser_putch
    _ADCMain->_adcConvertMM
    _lcdWriteToDigitBCD->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl
    _adcConvertMM->___aldiv
    ___lwdiv->___wmul
    ___aldiv->___wmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0    9728
                                             31 BANK0     23    23      0
                            _ADCMain
                        _DriveDirect
                            ___lwdiv
                             ___wmul
                      _getSensorData
                     _initWallFollow
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      22
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initWallFollow                                       2     2      0      30
                                              6 BANK0      2     2      0
                             _setCCW
 ---------------------------------------------------------------------------------
 (2) _setCCW                                               3     3      0      30
                                              3 BANK0      3     3      0
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      30
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _getSensorData                                        7     5      2     377
                                              2 BANK0      7     5      2
                          _ser_getch
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _ser_getch                                            2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DriveDirect                                          9     5      4     820
                                              1 BANK0      9     5      4
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCMain                                              0     0      0    4671
                       _adcConvertMM
                             _getADC
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (1) _lcdWriteToDigitBCD                                  12    10      2     599
                                              3 BANK0     12    10      2
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (2) _lcdWriteData                                         3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcdSetCursor                                         1     1      0      45
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getADC                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _adcConvertMM                                        10     8      2    4027
                                             21 BANK0     10     8      2
                            ___aldiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    1470
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              8     4      4    1116
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     618
                                              6 BANK0     15     7      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  5     5      0     265
                                              6 COMMON     5     5      0
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCMain
     _adcConvertMM
       ___aldiv
         ___wmul (ARG)
       ___lwdiv
         ___wmul (ARG)
       ___wmul
     _getADC
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteToDigitBCD
       _lcdWriteData
   _DriveDirect
     _ser_putch
   ___lwdiv
     ___wmul (ARG)
   ___wmul
   _getSensorData
     _ser_getch
     _ser_putch
   _initWallFollow
     _setCCW
       _spi_transfer
   _lcdSetCursor
     _lcdWriteControl
   _lcdWriteToDigitBCD
     _lcdWriteData
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)
   ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      14       7       25.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     36      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       E       1      100.0%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      72      12        0.0%
ABS                  0      0      72       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Sep 19 10:26:10 2016

               ??_getSensorData 0024                     __CFG_CP$OFF 0000                              _GO 00FA  
                            fsr 0004             ___wmul@multiplicand 0022                             l136 0509  
                           l129 04F3                             l226 06D7                             l343 0D76  
                           l274 0D86                             l460 0789                             l349 0D69  
                           l625 0703                             l570 0E1E                             l469 07C4  
                           _GIE 005F                             _RB0 0030                             _RB1 0031  
                           _RC0 0038                             _RB2 0032                   ??_DriveDirect 0025  
                           _RC1 0039                             _RC2 003A                             _RB4 0034  
                           _RE0 0048                             _RE1 0049                             _RE2 004A  
                  __CFG_CPD$OFF 0000                             u975 0E1F                             u985 0E26  
                           _isr 0F32                 __end_of_ADCMain 0E12                             fsr0 0004  
                           indf 0000                    __CFG_FOSC$HS 0000                  ??_lcdWriteData 0020  
                  __CFG_LVP$OFF 0000                            l2000 0448                            l2014 0465  
                          l2016 049E                            l2026 04AD                            l2028 04E6  
                          l2056 054B                            l1610 0777                            l1602 075C  
                          l2090 0642                            l2074 05CA                            l2068 05BA  
                          l1606 0769                            l1710 0799                            l2094 0651  
                          l2078 05D3                            l1632 0EE4                            l1624 0EC0  
                          l1712 07A3                            l2096 0653                            l1626 0ECE  
                          l1562 0E16                            l1730 0116                            l1714 07AD  
                          l1636 0EEF                            l1724 00A8                            l1716 07B7  
                          l1742 01CA                            l1902 0FC2                            l1592 0724  
                          l1584 0714                            l1760 029C                            l1736 0184  
                          l1680 06AA                            l1672 068C                            l1594 0734  
                          l1754 0256                            l1690 06CA                            l1674 0694  
                          l1666 0668                            l1906 0FD5                            l1772 0328  
                          l1748 0210                            l1684 06B8                            l1668 067E  
                          l1766 02E2                            l1678 06A2                            l1784 03B2  
                          l1864 0F16                            l1778 036E                            l1890 0FA3  
                          l1866 0F17                            l1788 03C1                            l1886 0F90  
                          l1992 0439                            ?_isr 0070                            u1035 0728  
                          u1115 0EC3                            u1310 00EE                            u1055 0736  
                          u1135 0ECF                            u1311 00EF                            u2007 0DBE  
                          u1312 00F4                            u1065 074B                            u1145 0EDB  
                          u1313 00F5                            u1075 075D                            u1155 0EE5  
                          u1340 015C                            u1341 015D                            u1342 0162  
                          u1343 0163                            u1280 0080                            u1281 0081  
                          u1282 0086                            u1283 0087                            u1535 0E9B  
                          u1565 0F80                            u1815 0548                            u1825 05C0  
                          u1595 0FB2                            u1907 03FD                            u1845 05D0  
                          u1765 0470                            u1917 0412                            u1855 0648  
                          u1775 04B8                            u1927 0427                            u1937 05AB  
                          u1947 0633                            _PEIE 005E                            u1957 0DD7  
                          u1967 0EA8                            u1977 0E3F                            u1897 03CE  
                          u1987 0E54                            _RCIF 0065                            u1997 0DAB  
                          _TMR0 0001                            _TRMT 04C1                    __CFG_WRT$OFF 0000  
                          _radH 006B                            _radL 006C                            _main 03C6  
                          _loop 005A                            btemp 007E                            ltemp 007E  
                          start 0012                            ttemp 007E                            wtemp 007E  
                         ??_isr 0076                 __end_of___aldiv 0780                           ?_main 0070  
                 __CFG_WDTE$OFF 0000                 __end_of___lwdiv 0EF4                           i1l119 0F68  
               __end_of___lwmod 07F7                   _totalDistTrav 005E                           _RCREG 001A  
                         _RCSTA 0018                           _SPBRG 0099                           _PORTA 0005  
                         _PORTC 0007                           _PORTD 0008                           _PORTE 0009  
                         _TRISA 0085                           _TRISB 0086                           _TRISC 0087  
                         _TRISD 0088                           _TRISE 0089                           _SSPIF 0063  
                         _TXREG 0019                           _TXSTA 0098      __end_of_lcdWriteToDigitBCD 06F1  
                         _count 0068             __end_of_DriveDirect 1000                  __pbitbssCOMMON 03E8  
                __CFG_BOREN$OFF 0000                           pclath 000A                           ltemp0 007E  
                         ltemp1 0082                           ltemp2 0086                           ltemp3 0080  
                    _LeftSpeedH 0060                      _LeftSpeedL 0061                           ttemp0 007E  
                         ttemp1 0081                           ttemp2 0084                           ttemp3 0087  
                         ttemp4 007F                           status 0003                           wtemp0 007E  
                         wtemp1 0080                           wtemp2 0082                           wtemp3 0084  
                         wtemp4 0086                           wtemp5 0088                           wtemp6 007F  
               __initialization 0015                    __end_of_main 065A                       ??_ADCMain 003F  
      __size_of_lcdWriteControl 0014                          ??_main 003F            __end_of_lcdSetCursor 0800  
                        _ADCON0 001F                          _ADCON1 009F                          _ADRESH 001E  
                        _ADRESL 009E                          i1l1940 07E7                          i1l1934 07CB  
                        i1l1936 07D9                          i1l1944 07F2                          i1l1960 0F54  
                        i1l1964 0F5C                          i1l1968 0F62                          u163_25 07CE  
                        u165_25 07DF                          u166_25 07E8                          _TMR0IE 005D  
                        _TMR0IF 005A                          _SSPCON 0014                          _SSPBUF 0013  
                __CFG_PWRTE$OFF 0000                _totalangleTurned 00B0                          _adcRAW 0056  
                     ??___aldiv 002E                          ___wmul 0E12                          _getADC 0780  
          __end_of_lcdWriteData 0DB0                       ??___lwdiv 002A                       ??___lwmod 0074  
                        _setCCW 0E35                          _speedH 007C                          _speedL 006E  
                        _rxbyte 007B                   main@timerLoop 004A                     _DriveDirect 0F73  
              __end_of_ser_init 0D9D                __end_of_setupADC 0DDA                __end_of_setupLCD 0E85  
              __end_of_setupSPI 0DF2                          saved_w 007E                      _adcClosest 00B2  
       __end_of__initialization 0035                  __pcstackCOMMON 0070                    __pidataBANK1 0D5F  
               DriveDirect@data 0026               ??_lcdWriteControl 0020         __size_of_initWallFollow 0031  
                    __pbssBANK0 0056                      __pbssBANK1 00A0             lcdSetCursor@address 0023  
                    __pmaintext 03C6                         ?___wmul 0020                         ?_getADC 0070  
                    __pintentry 0004           __size_of_lcdSetCursor 0009                         ?_setCCW 0070  
                       _ADCMain 0DF2           __end_of_getSensorData 0F32              __size_of_ser_getch 000A  
            __size_of_ser_putch 000C                  main@setADCdist 0054                     _RightSpeedH 0065  
                   _RightSpeedL 0066                         _SSPSTAT 0094         DriveDirect@VelocityLeft 0023  
         __size_of_lcdWriteData 0013                    _lcdSetCursor 07F7              _lcdWriteToDigitBCD 065A  
                     ?_ser_init 0070                       ?_setupADC 0070                       ?_setupLCD 0070  
                     ?_setupSPI 0070                         ___aldiv 06F1                 __size_of___wmul 0023  
               __size_of_getADC 0045                         ___lwdiv 0EB6                         ___lwmod 07C5  
           ?_lcdWriteToDigitBCD 0023                 __size_of_setCCW 0027                         _degrees 00A8  
                       __ptext1 0DDA                         __ptext2 0E5C                         __ptext3 0DC4  
                       __ptext4 0D8E                         __ptext5 0E85                         __ptext6 0E35  
                       __ptext7 0D7F                         __ptext8 0EF4                         __ptext9 0D69  
                  __size_of_isr 0041                         _lowByte 006A                ___aldiv@dividend 002A  
                       clrloop0 0D62                    _lcdWriteData 0D9D            end_of_initialization 0035  
          ??_lcdWriteToDigitBCD 0025               __end_of_ser_getch 0D73               __end_of_ser_putch 0D7F  
                    ??_ser_init 0020                 main@ADC_CURRENT 0043                      ??_setupADC 0020  
                    ??_setupLCD 0023                      ??_setupSPI 0020                ___aldiv@quotient 0031  
                    _time_count 005C                    ?_DriveDirect 0021                  _initWallFollow 0E85  
            adcConvertMM@adcRAW 0035                   ?_spi_transfer 0070                 ser_getch@rxbyte 0021  
                 ?_adcConvertMM 0035             DriveDirect@data_247 0028                 _lcdWriteControl 0DB0  
                __end_of___wmul 0E35                  __end_of_getADC 07C5                  __end_of_setCCW 0E5C  
        __end_of_initWallFollow 0EB6             start_initialization 0015                     __end_of_isr 0F73  
                ??_spi_transfer 0020                  ??_adcConvertMM 0037                        ??___wmul 0024  
                      ??_getADC 0020                     __pdataBANK1 00B2                        ??_setCCW 0023  
                      ?_ADCMain 0070                     _FLAG_1000MS 03E8                 ?_initWallFollow 0070  
                   __pbssCOMMON 007B                       ___latbits 0002                   __pcstackBANK0 0020  
          main@ADJUSTED_SPEED_L 0045            main@ADJUSTED_SPEED_R 0047                    _localStepPos 00AA  
       __end_of_lcdWriteControl 0DC4                ___lwdiv@dividend 0028                     _angleTurned 00A6  
                      ?___aldiv 0026               __size_of_ser_init 000F                        ?___lwdiv 0026  
                      ?___lwmod 0070               __size_of_setupADC 0016               __size_of_setupLCD 0029  
             __size_of_setupSPI 0018            __size_of_DriveDirect 008D                ___lwdiv@quotient 002B  
               main@controlByte 0049         lcdWriteControl@databyte 0022                 ___aldiv@divisor 0026  
             interrupt_function 0004                 ___aldiv@counter 002F          __size_of_getSensorData 003E  
                ___wmul@product 0024                      ser_putch@c 0020           getSensorData@packetID 0028  
                     clear_ram0 0D61                  main@ADC_ADJUST 0052                       _rightWall 006D  
                     _ser_getch 0D69                       _ser_putch 0D73                __size_of_ADCMain 0020  
                 _VelocityRight 00A4            __end_of_spi_transfer 0D8E               ___wmul@multiplier 0020  
              spi_transfer@data 0022                spi_transfer@temp 0021            __end_of_adcConvertMM 03C6  
                   _controlByte 0067                        _Distance 00A0            lcdWriteData@databyte 0022  
   __size_of_lcdWriteToDigitBCD 0097        DriveDirect@VelocityRight 0021                 main@safetyCount 0050  
                    ?_ser_getch 0070                ?_lcdWriteControl 0070                      ?_ser_putch 0070  
              __size_of___aldiv 008F                __size_of___lwdiv 003E                __size_of___lwmod 0032  
                 _getSensorData 0EF4  lcdWriteToDigitBCD@TenThouDigit 002B                 ___lwdiv@divisor 0026  
               ___lwdiv@counter 002D                        __ptext10 0F73                        __ptext11 0D73  
                      __ptext20 0EB6                        __ptext12 0DF2                        __ptext21 06F1  
                      __ptext13 065A                        __ptext22 0F32                        __ptext14 0D9D  
                      __ptext23 07C5                        __ptext15 07F7                        __ptext16 0DB0  
                      __ptext17 0780                        __ptext18 0039                        __ptext19 0E12  
                      _highByte 006F                        _distTrav 0058                        _leftWall 0069  
                 __size_of_main 0294                        _ser_init 0D8E                      _PB6Counter 0062  
                      _setupADC 0DC4                        _setupLCD 0E5C                        _setupSPI 0DDA  
                    _PB7Counter 0063     lcdWriteToDigitBCD@HunsDigit 0027                      _PB8Counter 0064  
                  _VelocityLeft 00A2     lcdWriteToDigitBCD@OnesDigit 002D                ??_initWallFollow 0026  
                ?_getSensorData 0022     lcdWriteToDigitBCD@TensDigit 0025     lcdWriteToDigitBCD@ThouDigit 0029  
                      intlevel1 0000                ___lwmod@dividend 0072             main@CURRENT_SPEED_L 004C  
           main@CURRENT_SPEED_R 004E                   ?_lcdSetCursor 0070                     ??_ser_getch 0020  
                   ??_ser_putch 0020             getSensorData@sensor 0026           __size_of_spi_transfer 000F  
         __size_of_adcConvertMM 038D                      _OPTION_REG 0081                 ___lwmod@divisor 0070  
               ___lwmod@counter 0075                    ___aldiv@sign 0030              getSensorData@bytes 0022  
                 ?_lcdWriteData 0070          lcdWriteToDigitBCD@data 0023                    _spi_transfer 0D7F  
                ??_lcdSetCursor 0023                    _stepCountNeg 00AE                     _stepClosest 00AC  
                  _adcConvertMM 0039  
