

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Sep 01 20:04:01 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	intentry,global,class=CODE,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	dabs	1,0x7E,2
    31  0000                     	;# 
    32  0001                     	;# 
    33  0002                     	;# 
    34  0003                     	;# 
    35  0004                     	;# 
    36  0005                     	;# 
    37  0006                     	;# 
    38  0007                     	;# 
    39  0008                     	;# 
    40  0009                     	;# 
    41  000A                     	;# 
    42  000B                     	;# 
    43  000C                     	;# 
    44  000D                     	;# 
    45  000E                     	;# 
    46  000E                     	;# 
    47  000F                     	;# 
    48  0010                     	;# 
    49  0011                     	;# 
    50  0012                     	;# 
    51  0013                     	;# 
    52  0014                     	;# 
    53  0015                     	;# 
    54  0015                     	;# 
    55  0016                     	;# 
    56  0017                     	;# 
    57  0018                     	;# 
    58  0019                     	;# 
    59  001A                     	;# 
    60  001B                     	;# 
    61  001B                     	;# 
    62  001C                     	;# 
    63  001D                     	;# 
    64  001E                     	;# 
    65  001F                     	;# 
    66  0081                     	;# 
    67  0085                     	;# 
    68  0086                     	;# 
    69  0087                     	;# 
    70  0088                     	;# 
    71  0089                     	;# 
    72  008C                     	;# 
    73  008D                     	;# 
    74  008E                     	;# 
    75  0091                     	;# 
    76  0092                     	;# 
    77  0093                     	;# 
    78  0094                     	;# 
    79  0098                     	;# 
    80  0099                     	;# 
    81  009C                     	;# 
    82  009D                     	;# 
    83  009E                     	;# 
    84  009F                     	;# 
    85  010C                     	;# 
    86  010D                     	;# 
    87  010E                     	;# 
    88  010F                     	;# 
    89  018C                     	;# 
    90  018D                     	;# 
    91  0000                     	;# 
    92  0001                     	;# 
    93  0002                     	;# 
    94  0003                     	;# 
    95  0004                     	;# 
    96  0005                     	;# 
    97  0006                     	;# 
    98  0007                     	;# 
    99  0008                     	;# 
   100  0009                     	;# 
   101  000A                     	;# 
   102  000B                     	;# 
   103  000C                     	;# 
   104  000D                     	;# 
   105  000E                     	;# 
   106  000E                     	;# 
   107  000F                     	;# 
   108  0010                     	;# 
   109  0011                     	;# 
   110  0012                     	;# 
   111  0013                     	;# 
   112  0014                     	;# 
   113  0015                     	;# 
   114  0015                     	;# 
   115  0016                     	;# 
   116  0017                     	;# 
   117  0018                     	;# 
   118  0019                     	;# 
   119  001A                     	;# 
   120  001B                     	;# 
   121  001B                     	;# 
   122  001C                     	;# 
   123  001D                     	;# 
   124  001E                     	;# 
   125  001F                     	;# 
   126  0081                     	;# 
   127  0085                     	;# 
   128  0086                     	;# 
   129  0087                     	;# 
   130  0088                     	;# 
   131  0089                     	;# 
   132  008C                     	;# 
   133  008D                     	;# 
   134  008E                     	;# 
   135  0091                     	;# 
   136  0092                     	;# 
   137  0093                     	;# 
   138  0094                     	;# 
   139  0098                     	;# 
   140  0099                     	;# 
   141  009C                     	;# 
   142  009D                     	;# 
   143  009E                     	;# 
   144  009F                     	;# 
   145  010C                     	;# 
   146  010D                     	;# 
   147  010E                     	;# 
   148  010F                     	;# 
   149  018C                     	;# 
   150  018D                     	;# 
   151  0000                     	;# 
   152  0001                     	;# 
   153  0002                     	;# 
   154  0003                     	;# 
   155  0004                     	;# 
   156  0005                     	;# 
   157  0006                     	;# 
   158  0007                     	;# 
   159  0008                     	;# 
   160  0009                     	;# 
   161  000A                     	;# 
   162  000B                     	;# 
   163  000C                     	;# 
   164  000D                     	;# 
   165  000E                     	;# 
   166  000E                     	;# 
   167  000F                     	;# 
   168  0010                     	;# 
   169  0011                     	;# 
   170  0012                     	;# 
   171  0013                     	;# 
   172  0014                     	;# 
   173  0015                     	;# 
   174  0015                     	;# 
   175  0016                     	;# 
   176  0017                     	;# 
   177  0018                     	;# 
   178  0019                     	;# 
   179  001A                     	;# 
   180  001B                     	;# 
   181  001B                     	;# 
   182  001C                     	;# 
   183  001D                     	;# 
   184  001E                     	;# 
   185  001F                     	;# 
   186  0081                     	;# 
   187  0085                     	;# 
   188  0086                     	;# 
   189  0087                     	;# 
   190  0088                     	;# 
   191  0089                     	;# 
   192  008C                     	;# 
   193  008D                     	;# 
   194  008E                     	;# 
   195  0091                     	;# 
   196  0092                     	;# 
   197  0093                     	;# 
   198  0094                     	;# 
   199  0098                     	;# 
   200  0099                     	;# 
   201  009C                     	;# 
   202  009D                     	;# 
   203  009E                     	;# 
   204  009F                     	;# 
   205  010C                     	;# 
   206  010D                     	;# 
   207  010E                     	;# 
   208  010F                     	;# 
   209  018C                     	;# 
   210  018D                     	;# 
   211  0000                     	;# 
   212  0001                     	;# 
   213  0002                     	;# 
   214  0003                     	;# 
   215  0004                     	;# 
   216  0005                     	;# 
   217  0006                     	;# 
   218  0007                     	;# 
   219  0008                     	;# 
   220  0009                     	;# 
   221  000A                     	;# 
   222  000B                     	;# 
   223  000C                     	;# 
   224  000D                     	;# 
   225  000E                     	;# 
   226  000E                     	;# 
   227  000F                     	;# 
   228  0010                     	;# 
   229  0011                     	;# 
   230  0012                     	;# 
   231  0013                     	;# 
   232  0014                     	;# 
   233  0015                     	;# 
   234  0015                     	;# 
   235  0016                     	;# 
   236  0017                     	;# 
   237  0018                     	;# 
   238  0019                     	;# 
   239  001A                     	;# 
   240  001B                     	;# 
   241  001B                     	;# 
   242  001C                     	;# 
   243  001D                     	;# 
   244  001E                     	;# 
   245  001F                     	;# 
   246  0081                     	;# 
   247  0085                     	;# 
   248  0086                     	;# 
   249  0087                     	;# 
   250  0088                     	;# 
   251  0089                     	;# 
   252  008C                     	;# 
   253  008D                     	;# 
   254  008E                     	;# 
   255  0091                     	;# 
   256  0092                     	;# 
   257  0093                     	;# 
   258  0094                     	;# 
   259  0098                     	;# 
   260  0099                     	;# 
   261  009C                     	;# 
   262  009D                     	;# 
   263  009E                     	;# 
   264  009F                     	;# 
   265  010C                     	;# 
   266  010D                     	;# 
   267  010E                     	;# 
   268  010F                     	;# 
   269  018C                     	;# 
   270  018D                     	;# 
   271                           
   272                           	psect	idataBANK0
   273  0000'                    __pidataBANK0:	
   274                           
   275                           ;initializer for _adcClosest
   276  0000' 34E8               	retlw	232
   277  0001' 3403               	retlw	3
   278  0007                     _PORTC	set	7
   279  0008                     _PORTD	set	8
   280  0009                     _PORTE	set	9
   281  001A                     _RCREG	set	26
   282  0018                     _RCSTA	set	24
   283  0013                     _SSPBUF	set	19
   284  0014                     _SSPCON	set	20
   285  0001                     _TMR0	set	1
   286  0019                     _TXREG	set	25
   287  005F                     _GIE	set	95
   288  005E                     _PEIE	set	94
   289  0030                     _RB0	set	48
   290  0031                     _RB1	set	49
   291  0032                     _RB2	set	50
   292  003A                     _RC2	set	58
   293  0065                     _RCIF	set	101
   294  0048                     _RE0	set	72
   295  0049                     _RE1	set	73
   296  004A                     _RE2	set	74
   297  0063                     _SSPIF	set	99
   298  005D                     _TMR0IE	set	93
   299  005A                     _TMR0IF	set	90
   300  009F                     _ADCON1	set	159
   301  0081                     _OPTION_REG	set	129
   302  0099                     _SPBRG	set	153
   303  0094                     _SSPSTAT	set	148
   304  0086                     _TRISB	set	134
   305  0087                     _TRISC	set	135
   306  0088                     _TRISD	set	136
   307  0089                     _TRISE	set	137
   308  0098                     _TXSTA	set	152
   309  04C1                     _TRMT	set	1217
   310                           
   311                           ; #config settings
   312  0000                     
   313                           	psect	cinit
   314  0000'                    start_initialization:	
   315  0000'                    __initialization:	
   316                           
   317                           ; Initialize objects allocated to BANK0
   318  0000' 120A' 118A' 2000' 120A' 118A' 	fcall	__pidataBANK0	;fetch initializer
   319  0005' 0080'              	movwf	__pdataBANK0& (0+127)
   320  0006' 120A' 118A' 2000' 120A' 118A' 	fcall	__pidataBANK0+1	;fetch initializer
   321  000B' 0080'              	movwf	(__pdataBANK0+1)& (0+127)
   322                           
   323                           ; Clear objects allocated to BANK0
   324  000C' 1383               	bcf	3,7	;select IRP bank0
   325  000D' 3000'              	movlw	low __pbssBANK0
   326  000E' 0084               	movwf	4
   327  000F' 3000'              	movlw	low (__pbssBANK0+38)
   328  0010' 120A' 118A' 2000'  	fcall	clear_ram0
   329                           
   330                           ; Clear objects allocated to COMMON
   331  0013' 0180'              	clrf	__pbssCOMMON& (0+127)
   332  0014' 0180'              	clrf	(__pbssCOMMON+1)& (0+127)
   333                           
   334                           ; Clear objects allocated to BITCOMMON
   335  0015' 0180'              	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   336  0016'                    end_of_initialization:	
   337                           ;End of C runtime variable initialization code
   338                           
   339  0016'                    __end_of__initialization:	
   340  0016' 0183               	clrf	3
   341  0017' 120A' 118A' 2800'  	ljmp	_main	;jump to C main() function
   342                           
   343                           	psect	bitbssCOMMON
   344  0000'                    __pbitbssCOMMON:	
   345  0000'                    _FLAG_1000MS:	
   346  0000'                    	ds	1
   347                           
   348                           	psect	bssCOMMON
   349  0000'                    __pbssCOMMON:	
   350  0000'                    _currentStep:	
   351  0000'                    	ds	1
   352  0001'                    _negativeFlag:	
   353  0001'                    	ds	1
   354                           
   355                           	psect	bssBANK0
   356  0000'                    __pbssBANK0:	
   357  0000'                    _Distance:	
   358  0000'                    	ds	2
   359  0002'                    _adcRAW:	
   360  0002'                    	ds	2
   361  0004'                    _degrees:	
   362  0004'                    	ds	2
   363  0006'                    _distTrav:	
   364  0006'                    	ds	2
   365  0008'                    _loop:	
   366  0008'                    	ds	2
   367  000A'                    _loop2:	
   368  000A'                    	ds	2
   369  000C'                    _lowByte:	
   370  000C'                    	ds	2
   371  000E'                    _radH:	
   372  000E'                    	ds	2
   373  0010'                    _radL:	
   374  0010'                    	ds	2
   375  0012'                    _speedH:	
   376  0012'                    	ds	2
   377  0014'                    _speedL:	
   378  0014'                    	ds	2
   379  0016'                    _stepClosest:	
   380  0016'                    	ds	2
   381  0018'                    _stepCountNeg:	
   382  0018'                    	ds	2
   383  001A'                    _time_count:	
   384  001A'                    	ds	2
   385  001C'                    _totalDistTrav:	
   386  001C'                    	ds	2
   387  001E'                    _PB6Counter:	
   388  001E'                    	ds	1
   389  001F'                    _PB7Counter:	
   390  001F'                    	ds	1
   391  0020'                    _PB8Counter:	
   392  0020'                    	ds	1
   393  0021'                    _controlByte:	
   394  0021'                    	ds	1
   395  0022'                    _rxbyte:	
   396  0022'                    	ds	1
   397  0023'                    _stepCount:	
   398  0023'                    	ds	1
   399  0024'                    _highByte:	
   400  0024'                    	ds	2
   401                           
   402                           	psect	dataBANK0
   403  0000'                    __pdataBANK0:	
   404  0000'                    _adcClosest:	
   405  0000'                    	ds	2
   406                           
   407                           	psect	clrtext
   408  0000'                    clear_ram0:	
   409                           ;	Called with FSR containing the base address, and
   410                           ;	W with the last address+1
   411                           
   412  0000' 0064               	clrwdt	;clear the watchdog before getting into this loop
   413  0001'                    clrloop0:	
   414  0001' 0180               	clrf	0	;clear RAM location pointed to by FSR
   415  0002' 0A84               	incf	4,f	;increment pointer
   416  0003' 0604               	xorwf	4,w	;XOR with final address
   417  0004' 1903               	btfsc	3,2	;have we reached the end yet?
   418  0005' 3400               	retlw	0	;all done for this memory range, return
   419  0006' 0604               	xorwf	4,w	;XOR again to restore value
   420  0007' 2800'              	goto	clrloop0	;do the next byte
   421                           
   422                           	psect	cstackCOMMON
   423  0000'                    __pcstackCOMMON:	
   424  0000'                    ?_setupSPI:	
   425  0000'                    ?_ser_init:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0000'                    ?_setupLCD:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0000'                    ?_setupADC:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0000'                    ?_spi_transfer:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0000'                    ?_ser_putch:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0000'                    ?_moveCW:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0000'                    ?_ADCMain:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0000'                    ?_moveCCW:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0000'                    ?_getDistTrav:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0000'                    ?_isr:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0000'                    ?_main:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0000'                    ?_lcdWriteControl:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0000'                    ?_lcdWriteData:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0000'                    ?_lcdSetCursor:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0000'                    ?_ser_getch:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0000'                    ?___lwmod:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0000'                    ___lwmod@divisor:	
   474                           ; 2 bytes @ 0x0
   475                           
   476                           
   477                           ; 2 bytes @ 0x0
   478  0000'                    	ds	2
   479  0002'                    ___lwmod@dividend:	
   480                           
   481                           ; 2 bytes @ 0x2
   482  0002'                    	ds	2
   483  0004'                    ??___lwmod:	
   484                           
   485                           ; 1 bytes @ 0x4
   486  0004'                    	ds	1
   487  0005'                    ___lwmod@counter:	
   488                           
   489                           ; 1 bytes @ 0x5
   490  0005'                    	ds	1
   491  0006'                    ??_isr:	
   492                           
   493                           ; 1 bytes @ 0x6
   494  0006'                    	ds	5
   495                           
   496                           	psect	cstackBANK0
   497  0000'                    __pcstackBANK0:	
   498  0000'                    ??_setupSPI:	
   499  0000'                    ??_ser_init:	
   500                           ; 1 bytes @ 0x0
   501                           
   502  0000'                    ??_setupADC:	
   503                           ; 1 bytes @ 0x0
   504                           
   505  0000'                    ??_spi_transfer:	
   506                           ; 1 bytes @ 0x0
   507                           
   508  0000'                    ??_ser_putch:	
   509                           ; 1 bytes @ 0x0
   510                           
   511  0000'                    ??_moveCW:	
   512                           ; 1 bytes @ 0x0
   513                           
   514  0000'                    ??_ADCMain:	
   515                           ; 1 bytes @ 0x0
   516                           
   517  0000'                    ??_moveCCW:	
   518                           ; 1 bytes @ 0x0
   519                           
   520  0000'                    ??_lcdWriteControl:	
   521                           ; 1 bytes @ 0x0
   522                           
   523  0000'                    ??_lcdWriteData:	
   524                           ; 1 bytes @ 0x0
   525                           
   526  0000'                    ??_ser_getch:	
   527                           ; 1 bytes @ 0x0
   528                           
   529  0000'                    ?___awdiv:	
   530                           ; 1 bytes @ 0x0
   531                           
   532  0000'                    ser_putch@c:	
   533                           ; 2 bytes @ 0x0
   534                           
   535  0000'                    ___awdiv@divisor:	
   536                           ; 1 bytes @ 0x0
   537                           
   538                           
   539                           ; 2 bytes @ 0x0
   540  0000'                    	ds	1
   541  0001'                    ?_Drive:	
   542  0001'                    spi_transfer@temp:	
   543                           ; 1 bytes @ 0x1
   544                           
   545  0001'                    ser_getch@rxbyte:	
   546                           ; 1 bytes @ 0x1
   547                           
   548  0001'                    Drive@speedH:	
   549                           ; 1 bytes @ 0x1
   550                           
   551                           
   552                           ; 2 bytes @ 0x1
   553  0001'                    	ds	1
   554  0002'                    lcdWriteControl@databyte:	
   555  0002'                    lcdWriteData@databyte:	
   556                           ; 1 bytes @ 0x2
   557                           
   558  0002'                    spi_transfer@data:	
   559                           ; 1 bytes @ 0x2
   560                           
   561  0002'                    ___awdiv@dividend:	
   562                           ; 1 bytes @ 0x2
   563                           
   564                           
   565                           ; 2 bytes @ 0x2
   566  0002'                    	ds	1
   567  0003'                    ??_setupLCD:	
   568  0003'                    ??_lcdSetCursor:	
   569                           ; 1 bytes @ 0x3
   570                           
   571  0003'                    ?_lcdWriteToDigitBCD:	
   572                           ; 1 bytes @ 0x3
   573                           
   574  0003'                    lcdSetCursor@address:	
   575                           ; 1 bytes @ 0x3
   576                           
   577  0003'                    lcdWriteToDigitBCD@data:	
   578                           ; 1 bytes @ 0x3
   579                           
   580  0003'                    Drive@speedL:	
   581                           ; 2 bytes @ 0x3
   582                           
   583                           
   584                           ; 2 bytes @ 0x3
   585  0003'                    	ds	1
   586  0004'                    ??___awdiv:	
   587                           
   588                           ; 1 bytes @ 0x4
   589  0004'                    	ds	1
   590  0005'                    ??_lcdWriteToDigitBCD:	
   591  0005'                    ___awdiv@counter:	
   592                           ; 1 bytes @ 0x5
   593                           
   594  0005'                    lcdWriteToDigitBCD@TensDigit:	
   595                           ; 1 bytes @ 0x5
   596                           
   597  0005'                    Drive@radH:	
   598                           ; 2 bytes @ 0x5
   599                           
   600                           
   601                           ; 2 bytes @ 0x5
   602  0005'                    	ds	1
   603  0006'                    ___awdiv@sign:	
   604                           
   605                           ; 1 bytes @ 0x6
   606  0006'                    	ds	1
   607  0007'                    lcdWriteToDigitBCD@HunsDigit:	
   608  0007'                    Drive@radL:	
   609                           ; 2 bytes @ 0x7
   610                           
   611  0007'                    ___awdiv@quotient:	
   612                           ; 2 bytes @ 0x7
   613                           
   614                           
   615                           ; 2 bytes @ 0x7
   616  0007'                    	ds	2
   617  0009'                    ??_Drive:	
   618  0009'                    lcdWriteToDigitBCD@ThouDigit:	
   619                           ; 1 bytes @ 0x9
   620                           
   621                           
   622                           ; 2 bytes @ 0x9
   623  0009'                    	ds	2
   624  000B'                    lcdWriteToDigitBCD@TenThouDigit:	
   625                           
   626                           ; 2 bytes @ 0xB
   627  000B'                    	ds	2
   628  000D'                    lcdWriteToDigitBCD@OnesDigit:	
   629                           
   630                           ; 2 bytes @ 0xD
   631  000D'                    	ds	2
   632  000F'                    ??_getDistTrav:	
   633                           
   634                           ; 1 bytes @ 0xF
   635  000F'                    	ds	2
   636  0011'                    ??_main:	
   637                           
   638                           ; 1 bytes @ 0x11
   639  0011'                    	ds	3
   640  0014'                    main@controlByte:	
   641                           
   642                           ; 1 bytes @ 0x14
   643  0014'                    	ds	1
   644                           
   645                           	psect	maintext
   646  0000'                    __pmaintext:	
   647 ;;
   648 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   649 ;;
   650 ;; *************** function _main *****************
   651 ;; Defined at:
   652 ;;		line 53 in file "main.c"
   653 ;; Parameters:    Size  Location     Type
   654 ;;		None
   655 ;; Auto vars:     Size  Location     Type
   656 ;;  controlByte     1   20[BANK0 ] unsigned char 
   657 ;; Return value:  Size  Location     Type
   658 ;;                  1    wreg      void 
   659 ;; Registers used:
   660 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
   661 ;; Tracked objects:
   662 ;;		On entry : B00/0
   663 ;;		On exit  : 0/0
   664 ;;		Unchanged: 0/0
   665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   666 ;;      Params:         0       0       0       0       0
   667 ;;      Locals:         0       1       0       0       0
   668 ;;      Temps:          0       3       0       0       0
   669 ;;      Totals:         0       4       0       0       0
   670 ;;Total ram usage:        4 bytes
   671 ;; Hardware stack levels required when called:    5
   672 ;; This function calls:
   673 ;;		_ADCMain
   674 ;;		_Drive
   675 ;;		_getDistTrav
   676 ;;		_moveCCW
   677 ;;		_moveCW
   678 ;;		_ser_init
   679 ;;		_ser_putch
   680 ;;		_setupADC
   681 ;;		_setupLCD
   682 ;;		_setupSPI
   683 ;;		_spi_transfer
   684 ;; This function is called by:
   685 ;;		Startup code after reset
   686 ;; This function uses a non-reentrant model
   687 ;;
   688                           
   689                           
   690                           ;psect for function _main
   691  0000'                    _main:	
   692                           
   693                           ;main.c: 56: setupSPI();
   694                           
   695                           ;incstack = 0
   696                           ; Regs used in _main: [allreg]
   697  0000' 120A' 118A' 2000' 120A' 118A' 	fcall	_setupSPI
   698                           
   699                           ;main.c: 57: ser_init();
   700  0005' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_init
   701                           
   702                           ;main.c: 58: setupLCD();
   703  000A' 120A' 118A' 2000' 120A' 118A' 	fcall	_setupLCD
   704                           
   705                           ;main.c: 59: setupADC();
   706  000F' 120A' 118A' 2000' 120A' 118A' 	fcall	_setupADC
   707                           
   708                           ;main.c: 61: unsigned char controlByte = 0b00001101;
   709  0014' 300D               	movlw	13
   710  0015' 1283               	bcf	3,5	;RP0=0, select bank0
   711  0016' 1303               	bcf	3,6	;RP1=0, select bank0
   712  0017' 0091'              	movwf	??_main
   713  0018' 0811'              	movf	??_main,w
   714  0019' 0094'              	movwf	main@controlByte
   715                           
   716                           ;main.c: 62: spi_transfer(controlByte);
   717  001A' 0814'              	movf	main@controlByte,w
   718  001B' 120A' 118A' 2000' 120A' 118A' 	fcall	_spi_transfer
   719                           
   720                           ;main.c: 64: ser_putch(128);
   721  0020' 3080               	movlw	128
   722  0021' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   723                           
   724                           ;main.c: 65: ser_putch(132);
   725  0026' 3084               	movlw	132
   726  0027' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
   727  002C'                    l1361:	
   728                           ;main.c: 67: while(1){
   729                           
   730                           
   731                           ;main.c: 72: if (PB8Counter >= 10 && !RB0 == 0){
   732  002C' 300A               	movlw	10
   733  002D' 1283               	bcf	3,5	;RP0=0, select bank0
   734  002E' 1303               	bcf	3,6	;RP1=0, select bank0
   735  002F' 0220'              	subwf	_PB8Counter,w
   736  0030' 1803               	btfsc	3,0
   737  0031' 1C06               	btfss	6,0	;volatile
   738  0032' 2800'              	goto	l1391
   739                           
   740                           ;main.c: 73: for (loop = 0; loop < 400; loop++){
   741  0033' 0188'              	clrf	_loop
   742  0034' 0189'              	clrf	_loop+1
   743  0035' 0809'              	movf	_loop+1,w
   744  0036' 3A80               	xorlw	128
   745  0037' 00FF               	movwf	127
   746  0038' 3081               	movlw	129
   747  0039' 027F               	subwf	127,w
   748  003A' 1D03               	skipz
   749  003B' 2800'              	goto	u805
   750  003C' 3090               	movlw	144
   751  003D' 0208'              	subwf	_loop,w
   752  003E'                    u805:	
   753  003E' 1803               	btfsc	3,0
   754  003F' 2800'              	goto	l1383
   755  0040'                    l1371:	
   756                           
   757                           ;main.c: 74: moveCW();
   758  0040' 120A' 118A' 2000' 120A' 118A' 	fcall	_moveCW
   759                           
   760                           ;main.c: 75: ADCMain();
   761  0045' 120A' 118A' 2000' 120A' 118A' 	fcall	_ADCMain
   762                           
   763                           ;main.c: 76: if (adcRAW > adcClosest){
   764  004A' 1283               	bcf	3,5	;RP0=0, select bank0
   765  004B' 1303               	bcf	3,6	;RP1=0, select bank0
   766  004C' 0803'              	movf	_adcRAW+1,w	;volatile
   767  004D' 0201'              	subwf	_adcClosest+1,w
   768  004E' 1D03               	skipz
   769  004F' 2800'              	goto	u815
   770  0050' 0802'              	movf	_adcRAW,w	;volatile
   771  0051' 0200'              	subwf	_adcClosest,w
   772  0052'                    u815:	
   773  0052' 1803               	skipnc
   774  0053' 2800'              	goto	l1379
   775                           
   776                           ;main.c: 77: adcClosest = adcRAW;
   777  0054' 0803'              	movf	_adcRAW+1,w	;volatile
   778  0055' 0081'              	movwf	_adcClosest+1
   779  0056' 0802'              	movf	_adcRAW,w	;volatile
   780  0057' 0080'              	movwf	_adcClosest
   781                           
   782                           ;main.c: 78: stepClosest = stepCount;
   783  0058' 0823'              	movf	_stepCount,w
   784  0059' 0096'              	movwf	_stepClosest
   785  005A' 0197'              	clrf	_stepClosest+1
   786  005B' 1B96'              	btfsc	_stepClosest,7
   787  005C' 0397'              	decf	_stepClosest+1,f
   788  005D'                    l1379:	
   789  005D' 3001               	movlw	1
   790  005E' 0788'              	addwf	_loop,f
   791  005F' 1803               	skipnc
   792  0060' 0A89'              	incf	_loop+1,f
   793  0061' 3000               	movlw	0
   794  0062' 0789'              	addwf	_loop+1,f
   795  0063' 0809'              	movf	_loop+1,w
   796  0064' 3A80               	xorlw	128
   797  0065' 00FF               	movwf	127
   798  0066' 3081               	movlw	129
   799  0067' 027F               	subwf	127,w
   800  0068' 1D03               	skipz
   801  0069' 2800'              	goto	u825
   802  006A' 3090               	movlw	144
   803  006B' 0208'              	subwf	_loop,w
   804  006C'                    u825:	
   805  006C' 1C03               	skipc
   806  006D' 2800'              	goto	l1371
   807  006E'                    l1383:	
   808                           
   809                           ;main.c: 79: }
   810                           ;main.c: 80: }
   811                           ;main.c: 83: for (loop = stepCount; loop != stepClosest; loop++){
   812  006E' 1283               	bcf	3,5	;RP0=0, select bank0
   813  006F' 1303               	bcf	3,6	;RP1=0, select bank0
   814  0070' 0823'              	movf	_stepCount,w
   815  0071' 0088'              	movwf	_loop
   816  0072' 0189'              	clrf	_loop+1
   817  0073' 1B88'              	btfsc	_loop,7
   818  0074' 0389'              	decf	_loop+1,f
   819  0075'                    l1389:	
   820  0075' 0817'              	movf	_stepClosest+1,w
   821  0076' 0609'              	xorwf	_loop+1,w
   822  0077' 1D03               	skipz
   823  0078' 2800'              	goto	u835
   824  0079' 0816'              	movf	_stepClosest,w
   825  007A' 0608'              	xorwf	_loop,w
   826  007B'                    u835:	
   827  007B' 1903               	btfsc	3,2
   828  007C' 2800'              	goto	l1391
   829                           
   830                           ;main.c: 84: moveCCW();
   831  007D' 120A' 118A' 2000' 120A' 118A' 	fcall	_moveCCW
   832  0082' 3001               	movlw	1
   833  0083' 1283               	bcf	3,5	;RP0=0, select bank0
   834  0084' 1303               	bcf	3,6	;RP1=0, select bank0
   835  0085' 0788'              	addwf	_loop,f
   836  0086' 1803               	skipnc
   837  0087' 0A89'              	incf	_loop+1,f
   838  0088' 3000               	movlw	0
   839  0089' 0789'              	addwf	_loop+1,f
   840  008A' 2800'              	goto	l1389
   841  008B'                    l1391:	
   842                           
   843                           ;main.c: 85: }
   844                           ;main.c: 86: }
   845                           ;main.c: 91: if (PB7Counter >= 10 && !RB1 == 0){
   846  008B' 300A               	movlw	10
   847  008C' 021F'              	subwf	_PB7Counter,w
   848  008D' 1803               	btfsc	3,0
   849  008E' 1C86               	btfss	6,1	;volatile
   850  008F' 2800'              	goto	l1415
   851                           
   852                           ;main.c: 92: totalDistTrav = 0;
   853  0090' 019C'              	clrf	_totalDistTrav
   854  0091' 019D'              	clrf	_totalDistTrav+1
   855                           
   856                           ;main.c: 94: Drive(0,250,0x7F,0xFF);
   857  0092' 3000               	movlw	0
   858  0093' 0081'              	movwf	Drive@speedH
   859  0094' 0082'              	movwf	Drive@speedH+1
   860  0095' 30FA               	movlw	250
   861  0096' 0083'              	movwf	Drive@speedL
   862  0097' 3000               	movlw	0
   863  0098' 0084'              	movwf	Drive@speedL+1
   864  0099' 307F               	movlw	127
   865  009A' 0085'              	movwf	Drive@radH
   866  009B' 3000               	movlw	0
   867  009C' 0086'              	movwf	Drive@radH+1
   868  009D' 30FF               	movlw	255
   869  009E' 0087'              	movwf	Drive@radL
   870  009F' 3000               	movlw	0
   871  00A0' 0088'              	movwf	Drive@radL+1
   872  00A1' 120A' 118A' 2000' 120A' 118A' 	fcall	_Drive
   873                           
   874                           ;main.c: 97: for (loop = 0; loop < 400; loop++){
   875  00A6' 1283               	bcf	3,5	;RP0=0, select bank0
   876  00A7' 1303               	bcf	3,6	;RP1=0, select bank0
   877  00A8' 0188'              	clrf	_loop
   878  00A9' 0189'              	clrf	_loop+1
   879  00AA' 0809'              	movf	_loop+1,w
   880  00AB' 3A80               	xorlw	128
   881  00AC' 00FF               	movwf	127
   882  00AD' 3081               	movlw	129
   883  00AE' 027F               	subwf	127,w
   884  00AF' 1D03               	skipz
   885  00B0' 2800'              	goto	u865
   886  00B1' 3090               	movlw	144
   887  00B2' 0208'              	subwf	_loop,w
   888  00B3'                    u865:	
   889  00B3' 1803               	btfsc	3,0
   890  00B4' 2800'              	goto	l1413
   891  00B5'                    l1405:	
   892                           
   893                           ;main.c: 98: getDistTrav();
   894  00B5' 120A' 118A' 2000' 120A' 118A' 	fcall	_getDistTrav
   895                           
   896                           ;main.c: 99: _delay((unsigned long)((40)*(20000000/4000.0)));
   897  00BA' 3002               	movlw	2
   898  00BB' 1283               	bcf	3,5	;RP0=0, select bank0
   899  00BC' 1303               	bcf	3,6	;RP1=0, select bank0
   900  00BD' 0093'              	movwf	??_main+2
   901  00BE' 3004               	movlw	4
   902  00BF' 0092'              	movwf	??_main+1
   903  00C0' 30BA               	movlw	186
   904  00C1' 0091'              	movwf	??_main
   905  00C2'                    u957:	
   906  00C2' 0B91'              	decfsz	??_main,f
   907  00C3' 2800'              	goto	u957
   908  00C4' 0B92'              	decfsz	??_main+1,f
   909  00C5' 2800'              	goto	u957
   910  00C6' 0B93'              	decfsz	??_main+2,f
   911  00C7' 2800'              	goto	u957
   912  00C8' 0000               	nop
   913  00C9' 3001               	movlw	1
   914  00CA' 1283               	bcf	3,5	;RP0=0, select bank0
   915  00CB' 1303               	bcf	3,6	;RP1=0, select bank0
   916  00CC' 0788'              	addwf	_loop,f
   917  00CD' 1803               	skipnc
   918  00CE' 0A89'              	incf	_loop+1,f
   919  00CF' 3000               	movlw	0
   920  00D0' 0789'              	addwf	_loop+1,f
   921  00D1' 0809'              	movf	_loop+1,w
   922  00D2' 3A80               	xorlw	128
   923  00D3' 00FF               	movwf	127
   924  00D4' 3081               	movlw	129
   925  00D5' 027F               	subwf	127,w
   926  00D6' 1D03               	skipz
   927  00D7' 2800'              	goto	u875
   928  00D8' 3090               	movlw	144
   929  00D9' 0208'              	subwf	_loop,w
   930  00DA'                    u875:	
   931  00DA' 1C03               	skipc
   932  00DB' 2800'              	goto	l1405
   933  00DC'                    l1413:	
   934                           
   935                           ;main.c: 100: }
   936                           ;main.c: 102: Drive(0,0,0x7F,0xFF);
   937  00DC' 3000               	movlw	0
   938  00DD' 1283               	bcf	3,5	;RP0=0, select bank0
   939  00DE' 1303               	bcf	3,6	;RP1=0, select bank0
   940  00DF' 0081'              	movwf	Drive@speedH
   941  00E0' 0082'              	movwf	Drive@speedH+1
   942  00E1' 3000               	movlw	0
   943  00E2' 0083'              	movwf	Drive@speedL
   944  00E3' 0084'              	movwf	Drive@speedL+1
   945  00E4' 307F               	movlw	127
   946  00E5' 0085'              	movwf	Drive@radH
   947  00E6' 3000               	movlw	0
   948  00E7' 0086'              	movwf	Drive@radH+1
   949  00E8' 30FF               	movlw	255
   950  00E9' 0087'              	movwf	Drive@radL
   951  00EA' 3000               	movlw	0
   952  00EB' 0088'              	movwf	Drive@radL+1
   953  00EC' 120A' 118A' 2000' 120A' 118A' 	fcall	_Drive
   954  00F1'                    l1415:	
   955                           
   956                           ;main.c: 103: }
   957                           ;main.c: 106: if (PB6Counter >= 10 && !RB2 == 0){
   958  00F1' 300A               	movlw	10
   959  00F2' 1283               	bcf	3,5	;RP0=0, select bank0
   960  00F3' 1303               	bcf	3,6	;RP1=0, select bank0
   961  00F4' 021E'              	subwf	_PB6Counter,w
   962  00F5' 1803               	btfsc	3,0
   963  00F6' 1D06               	btfss	6,2	;volatile
   964  00F7' 2800'              	goto	l1361
   965                           
   966                           ;main.c: 107: totalDistTrav = 0;
   967  00F8' 019C'              	clrf	_totalDistTrav
   968  00F9' 019D'              	clrf	_totalDistTrav+1
   969                           
   970                           ;main.c: 109: for (loop = 0; loop < 4; loop++){
   971  00FA' 0188'              	clrf	_loop
   972  00FB' 0189'              	clrf	_loop+1
   973  00FC' 0809'              	movf	_loop+1,w
   974  00FD' 3A80               	xorlw	128
   975  00FE' 00FF               	movwf	127
   976  00FF' 3080               	movlw	128
   977  0100' 027F               	subwf	127,w
   978  0101' 1D03               	skipz
   979  0102' 2800'              	goto	u905
   980  0103' 3004               	movlw	4
   981  0104' 0208'              	subwf	_loop,w
   982  0105'                    u905:	
   983  0105' 1803               	btfsc	3,0
   984  0106' 2800'              	goto	l1449
   985  0107'                    l1425:	
   986                           
   987                           ;main.c: 110: Drive(0,250,0xFF,0xFF);
   988  0107' 3000               	movlw	0
   989  0108' 1283               	bcf	3,5	;RP0=0, select bank0
   990  0109' 1303               	bcf	3,6	;RP1=0, select bank0
   991  010A' 0081'              	movwf	Drive@speedH
   992  010B' 0082'              	movwf	Drive@speedH+1
   993  010C' 30FA               	movlw	250
   994  010D' 0083'              	movwf	Drive@speedL
   995  010E' 3000               	movlw	0
   996  010F' 0084'              	movwf	Drive@speedL+1
   997  0110' 30FF               	movlw	255
   998  0111' 0085'              	movwf	Drive@radH
   999  0112' 3000               	movlw	0
  1000  0113' 0086'              	movwf	Drive@radH+1
  1001  0114' 30FF               	movlw	255
  1002  0115' 0087'              	movwf	Drive@radL
  1003  0116' 3000               	movlw	0
  1004  0117' 0088'              	movwf	Drive@radL+1
  1005  0118' 120A' 118A' 2000' 120A' 118A' 	fcall	_Drive
  1006                           
  1007                           ;main.c: 111: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1008  011D' 301A               	movlw	26
  1009  011E' 1283               	bcf	3,5	;RP0=0, select bank0
  1010  011F' 1303               	bcf	3,6	;RP1=0, select bank0
  1011  0120' 0093'              	movwf	??_main+2
  1012  0121' 305E               	movlw	94
  1013  0122' 0092'              	movwf	??_main+1
  1014  0123' 3086               	movlw	134
  1015  0124' 0091'              	movwf	??_main
  1016  0125'                    u967:	
  1017  0125' 0B91'              	decfsz	??_main,f
  1018  0126' 2800'              	goto	u967
  1019  0127' 0B92'              	decfsz	??_main+1,f
  1020  0128' 2800'              	goto	u967
  1021  0129' 0B93'              	decfsz	??_main+2,f
  1022  012A' 2800'              	goto	u967
  1023  012B' 0000               	nop
  1024                           
  1025                           ;main.c: 113: for (loop2 = 0; loop2 < 100; loop2++){
  1026  012C' 1283               	bcf	3,5	;RP0=0, select bank0
  1027  012D' 1303               	bcf	3,6	;RP1=0, select bank0
  1028  012E' 018A'              	clrf	_loop2
  1029  012F' 018B'              	clrf	_loop2+1
  1030  0130' 080B'              	movf	_loop2+1,w
  1031  0131' 3A80               	xorlw	128
  1032  0132' 00FF               	movwf	127
  1033  0133' 3080               	movlw	128
  1034  0134' 027F               	subwf	127,w
  1035  0135' 1D03               	skipz
  1036  0136' 2800'              	goto	u915
  1037  0137' 3064               	movlw	100
  1038  0138' 020A'              	subwf	_loop2,w
  1039  0139'                    u915:	
  1040  0139' 1803               	btfsc	3,0
  1041  013A' 2800'              	goto	l1445
  1042  013B'                    l1435:	
  1043                           
  1044                           ;main.c: 114: Drive(0,250,0x7F,0xFF);
  1045  013B' 3000               	movlw	0
  1046  013C' 1283               	bcf	3,5	;RP0=0, select bank0
  1047  013D' 1303               	bcf	3,6	;RP1=0, select bank0
  1048  013E' 0081'              	movwf	Drive@speedH
  1049  013F' 0082'              	movwf	Drive@speedH+1
  1050  0140' 30FA               	movlw	250
  1051  0141' 0083'              	movwf	Drive@speedL
  1052  0142' 3000               	movlw	0
  1053  0143' 0084'              	movwf	Drive@speedL+1
  1054  0144' 307F               	movlw	127
  1055  0145' 0085'              	movwf	Drive@radH
  1056  0146' 3000               	movlw	0
  1057  0147' 0086'              	movwf	Drive@radH+1
  1058  0148' 30FF               	movlw	255
  1059  0149' 0087'              	movwf	Drive@radL
  1060  014A' 3000               	movlw	0
  1061  014B' 0088'              	movwf	Drive@radL+1
  1062  014C' 120A' 118A' 2000' 120A' 118A' 	fcall	_Drive
  1063                           
  1064                           ;main.c: 115: getDistTrav();
  1065  0151' 120A' 118A' 2000' 120A' 118A' 	fcall	_getDistTrav
  1066                           
  1067                           ;main.c: 116: _delay((unsigned long)((40)*(20000000/4000.0)));
  1068  0156' 3002               	movlw	2
  1069  0157' 1283               	bcf	3,5	;RP0=0, select bank0
  1070  0158' 1303               	bcf	3,6	;RP1=0, select bank0
  1071  0159' 0093'              	movwf	??_main+2
  1072  015A' 3004               	movlw	4
  1073  015B' 0092'              	movwf	??_main+1
  1074  015C' 30BA               	movlw	186
  1075  015D' 0091'              	movwf	??_main
  1076  015E'                    u977:	
  1077  015E' 0B91'              	decfsz	??_main,f
  1078  015F' 2800'              	goto	u977
  1079  0160' 0B92'              	decfsz	??_main+1,f
  1080  0161' 2800'              	goto	u977
  1081  0162' 0B93'              	decfsz	??_main+2,f
  1082  0163' 2800'              	goto	u977
  1083  0164' 0000               	nop
  1084  0165' 3001               	movlw	1
  1085  0166' 1283               	bcf	3,5	;RP0=0, select bank0
  1086  0167' 1303               	bcf	3,6	;RP1=0, select bank0
  1087  0168' 078A'              	addwf	_loop2,f
  1088  0169' 1803               	skipnc
  1089  016A' 0A8B'              	incf	_loop2+1,f
  1090  016B' 3000               	movlw	0
  1091  016C' 078B'              	addwf	_loop2+1,f
  1092  016D' 080B'              	movf	_loop2+1,w
  1093  016E' 3A80               	xorlw	128
  1094  016F' 00FF               	movwf	127
  1095  0170' 3080               	movlw	128
  1096  0171' 027F               	subwf	127,w
  1097  0172' 1D03               	skipz
  1098  0173' 2800'              	goto	u925
  1099  0174' 3064               	movlw	100
  1100  0175' 020A'              	subwf	_loop2,w
  1101  0176'                    u925:	
  1102  0176' 1C03               	skipc
  1103  0177' 2800'              	goto	l1435
  1104  0178'                    l1445:	
  1105  0178' 3001               	movlw	1
  1106  0179' 1283               	bcf	3,5	;RP0=0, select bank0
  1107  017A' 1303               	bcf	3,6	;RP1=0, select bank0
  1108  017B' 0788'              	addwf	_loop,f
  1109  017C' 1803               	skipnc
  1110  017D' 0A89'              	incf	_loop+1,f
  1111  017E' 3000               	movlw	0
  1112  017F' 0789'              	addwf	_loop+1,f
  1113  0180' 0809'              	movf	_loop+1,w
  1114  0181' 3A80               	xorlw	128
  1115  0182' 00FF               	movwf	127
  1116  0183' 3080               	movlw	128
  1117  0184' 027F               	subwf	127,w
  1118  0185' 1D03               	skipz
  1119  0186' 2800'              	goto	u935
  1120  0187' 3004               	movlw	4
  1121  0188' 0208'              	subwf	_loop,w
  1122  0189'                    u935:	
  1123  0189' 1C03               	skipc
  1124  018A' 2800'              	goto	l1425
  1125  018B'                    l1449:	
  1126                           
  1127                           ;main.c: 117: }
  1128                           ;main.c: 118: }
  1129                           ;main.c: 119: Drive(0,0,0x7F,0xFF);
  1130  018B' 3000               	movlw	0
  1131  018C' 1283               	bcf	3,5	;RP0=0, select bank0
  1132  018D' 1303               	bcf	3,6	;RP1=0, select bank0
  1133  018E' 0081'              	movwf	Drive@speedH
  1134  018F' 0082'              	movwf	Drive@speedH+1
  1135  0190' 3000               	movlw	0
  1136  0191' 0083'              	movwf	Drive@speedL
  1137  0192' 0084'              	movwf	Drive@speedL+1
  1138  0193' 307F               	movlw	127
  1139  0194' 0085'              	movwf	Drive@radH
  1140  0195' 3000               	movlw	0
  1141  0196' 0086'              	movwf	Drive@radH+1
  1142  0197' 30FF               	movlw	255
  1143  0198' 0087'              	movwf	Drive@radL
  1144  0199' 3000               	movlw	0
  1145  019A' 0088'              	movwf	Drive@radL+1
  1146  019B' 120A' 118A' 2000' 120A' 118A' 	fcall	_Drive
  1147  01A0' 2800'              	goto	l1361
  1148  01A1'                    __end_of_main:	
  1149                           
  1150                           	psect	text1
  1151  0000'                    __ptext1:	
  1152 ;; *************** function _spi_transfer *****************
  1153 ;; Defined at:
  1154 ;;		line 23 in file "SPI.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;  data            1    wreg     unsigned char 
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;  data            1    2[BANK0 ] unsigned char 
  1159 ;;  temp            1    1[BANK0 ] unsigned char 
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  1    wreg      unsigned char 
  1162 ;; Registers used:
  1163 ;;		wreg, status,2
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1169 ;;      Params:         0       0       0       0       0
  1170 ;;      Locals:         0       2       0       0       0
  1171 ;;      Temps:          0       1       0       0       0
  1172 ;;      Totals:         0       3       0       0       0
  1173 ;;Total ram usage:        3 bytes
  1174 ;; Hardware stack levels used:    1
  1175 ;; Hardware stack levels required when called:    2
  1176 ;; This function calls:
  1177 ;;		Nothing
  1178 ;; This function is called by:
  1179 ;;		_main
  1180 ;; This function uses a non-reentrant model
  1181 ;;
  1182                           
  1183                           
  1184                           ;psect for function _spi_transfer
  1185  0000'                    _spi_transfer:	
  1186                           
  1187                           ;incstack = 0
  1188                           ; Regs used in _spi_transfer: [wreg+status,2]
  1189                           ;spi_transfer@data stored from wreg
  1190  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1191  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1192  0002' 0082'              	movwf	spi_transfer@data
  1193                           
  1194                           ;SPI.c: 24: unsigned char temp = 0;
  1195  0003' 0181'              	clrf	spi_transfer@temp
  1196                           
  1197                           ;SPI.c: 26: SSPIF = 0;
  1198  0004' 118C               	bcf	12,3	;volatile
  1199                           
  1200                           ;SPI.c: 27: SSPBUF = data;
  1201  0005' 0802'              	movf	spi_transfer@data,w
  1202  0006' 0093               	movwf	19	;volatile
  1203  0007'                    l231:	
  1204                           ;SPI.c: 29: while (SSPIF == 0);
  1205                           
  1206  0007' 1D8C               	btfss	12,3	;volatile
  1207  0008' 2800'              	goto	l231
  1208                           
  1209                           ;SPI.c: 30: temp = SSPBUF;
  1210  0009' 0813               	movf	19,w	;volatile
  1211  000A' 0080'              	movwf	??_spi_transfer
  1212  000B' 0800'              	movf	??_spi_transfer,w
  1213  000C' 0081'              	movwf	spi_transfer@temp
  1214                           
  1215                           ;SPI.c: 31: SSPIF = 0;
  1216  000D' 118C               	bcf	12,3	;volatile
  1217  000E' 0008               	return
  1218  000F'                    __end_of_spi_transfer:	
  1219                           ;SPI.c: 33: return temp;
  1220                           ;	Return value of _spi_transfer is never used
  1221                           
  1222                           
  1223                           	psect	text2
  1224  0000'                    __ptext2:	
  1225 ;; *************** function _setupSPI *****************
  1226 ;; Defined at:
  1227 ;;		line 4 in file "SPI.c"
  1228 ;; Parameters:    Size  Location     Type
  1229 ;;		None
  1230 ;; Auto vars:     Size  Location     Type
  1231 ;;		None
  1232 ;; Return value:  Size  Location     Type
  1233 ;;                  1    wreg      void 
  1234 ;; Registers used:
  1235 ;;		wreg, status,2
  1236 ;; Tracked objects:
  1237 ;;		On entry : 0/0
  1238 ;;		On exit  : 0/0
  1239 ;;		Unchanged: 0/0
  1240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1241 ;;      Params:         0       0       0       0       0
  1242 ;;      Locals:         0       0       0       0       0
  1243 ;;      Temps:          0       0       0       0       0
  1244 ;;      Totals:         0       0       0       0       0
  1245 ;;Total ram usage:        0 bytes
  1246 ;; Hardware stack levels used:    1
  1247 ;; Hardware stack levels required when called:    2
  1248 ;; This function calls:
  1249 ;;		Nothing
  1250 ;; This function is called by:
  1251 ;;		_main
  1252 ;; This function uses a non-reentrant model
  1253 ;;
  1254                           
  1255                           
  1256                           ;psect for function _setupSPI
  1257  0000'                    _setupSPI:	
  1258                           
  1259                           ;SPI.c: 6: TRISB = 0b00000000;
  1260                           
  1261                           ;incstack = 0
  1262                           ; Regs used in _setupSPI: [wreg+status,2]
  1263  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  1264  0001' 1303               	bcf	3,6	;RP1=0, select bank1
  1265  0002' 0186               	clrf	6	;volatile
  1266                           
  1267                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  1268  0003' 3040               	movlw	64
  1269  0004' 0094               	movwf	20	;volatile
  1270                           
  1271                           ;SPI.c: 9: SSPCON = 0b00100000;
  1272  0005' 3020               	movlw	32
  1273  0006' 1283               	bcf	3,5	;RP0=0, select bank0
  1274  0007' 1303               	bcf	3,6	;RP1=0, select bank0
  1275  0008' 0094               	movwf	20	;volatile
  1276                           
  1277                           ;SPI.c: 10: TRISC = 0b11010000;
  1278  0009' 30D0               	movlw	208
  1279  000A' 1683               	bsf	3,5	;RP0=1, select bank1
  1280  000B' 1303               	bcf	3,6	;RP1=0, select bank1
  1281  000C' 0087               	movwf	7	;volatile
  1282                           
  1283                           ;SPI.c: 11: PORTC = 0b00000011;
  1284  000D' 3003               	movlw	3
  1285  000E' 1283               	bcf	3,5	;RP0=0, select bank0
  1286  000F' 1303               	bcf	3,6	;RP1=0, select bank0
  1287  0010' 0087               	movwf	7	;volatile
  1288                           
  1289                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  1290  0011' 3004               	movlw	4
  1291  0012' 1683               	bsf	3,5	;RP0=1, select bank1
  1292  0013' 1303               	bcf	3,6	;RP1=0, select bank1
  1293  0014' 0081               	movwf	1	;volatile
  1294                           
  1295                           ;SPI.c: 16: TMR0IE = 1;
  1296  0015' 168B               	bsf	11,5	;volatile
  1297                           
  1298                           ;SPI.c: 19: (GIE = 1);
  1299  0016' 178B               	bsf	11,7	;volatile
  1300  0017' 0008               	return
  1301  0018'                    __end_of_setupSPI:	
  1302                           
  1303                           	psect	text3
  1304  0000'                    __ptext3:	
  1305 ;; *************** function _setupLCD *****************
  1306 ;; Defined at:
  1307 ;;		line 86 in file "LCD.c"
  1308 ;; Parameters:    Size  Location     Type
  1309 ;;		None
  1310 ;; Auto vars:     Size  Location     Type
  1311 ;;		None
  1312 ;; Return value:  Size  Location     Type
  1313 ;;                  1    wreg      void 
  1314 ;; Registers used:
  1315 ;;		wreg, status,2, status,0, pclath, cstack
  1316 ;; Tracked objects:
  1317 ;;		On entry : 0/0
  1318 ;;		On exit  : 0/0
  1319 ;;		Unchanged: 0/0
  1320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1321 ;;      Params:         0       0       0       0       0
  1322 ;;      Locals:         0       0       0       0       0
  1323 ;;      Temps:          0       0       0       0       0
  1324 ;;      Totals:         0       0       0       0       0
  1325 ;;Total ram usage:        0 bytes
  1326 ;; Hardware stack levels used:    1
  1327 ;; Hardware stack levels required when called:    3
  1328 ;; This function calls:
  1329 ;;		_lcdWriteControl
  1330 ;; This function is called by:
  1331 ;;		_main
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335                           
  1336                           ;psect for function _setupLCD
  1337  0000'                    _setupLCD:	
  1338                           
  1339                           ;LCD.c: 88: ADCON1 = 0b00000010;
  1340                           
  1341                           ;incstack = 0
  1342                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  1343  0000' 3002               	movlw	2
  1344  0001' 1683               	bsf	3,5	;RP0=1, select bank1
  1345  0002' 1303               	bcf	3,6	;RP1=0, select bank1
  1346  0003' 009F               	movwf	31	;volatile
  1347                           
  1348                           ;LCD.c: 90: PORTD = 0;
  1349  0004' 1283               	bcf	3,5	;RP0=0, select bank0
  1350  0005' 1303               	bcf	3,6	;RP1=0, select bank0
  1351  0006' 0188               	clrf	8	;volatile
  1352                           
  1353                           ;LCD.c: 91: PORTE = 0;
  1354  0007' 0189               	clrf	9	;volatile
  1355                           
  1356                           ;LCD.c: 93: TRISD = 0b00000000;
  1357  0008' 1683               	bsf	3,5	;RP0=1, select bank1
  1358  0009' 1303               	bcf	3,6	;RP1=0, select bank1
  1359  000A' 0188               	clrf	8	;volatile
  1360                           
  1361                           ;LCD.c: 94: TRISE = 0b00000000;
  1362  000B' 0189               	clrf	9	;volatile
  1363                           
  1364                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  1365  000C' 3001               	movlw	1
  1366  000D' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteControl
  1367                           
  1368                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  1369  0012' 3038               	movlw	56
  1370  0013' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteControl
  1371                           
  1372                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  1373  0018' 300C               	movlw	12
  1374  0019' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteControl
  1375                           
  1376                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  1377  001E' 3006               	movlw	6
  1378  001F' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteControl
  1379                           
  1380                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  1381  0024' 3002               	movlw	2
  1382  0025' 120A' 118A' 2000'  	fcall	_lcdWriteControl
  1383  0028' 0008               	return
  1384  0029'                    __end_of_setupLCD:	
  1385                           
  1386                           	psect	text4
  1387  0000'                    __ptext4:	
  1388 ;; *************** function _ser_init *****************
  1389 ;; Defined at:
  1390 ;;		line 5 in file "ser.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;		None
  1393 ;; Auto vars:     Size  Location     Type
  1394 ;;		None
  1395 ;; Return value:  Size  Location     Type
  1396 ;;                  1    wreg      void 
  1397 ;; Registers used:
  1398 ;;		wreg
  1399 ;; Tracked objects:
  1400 ;;		On entry : 0/0
  1401 ;;		On exit  : 0/0
  1402 ;;		Unchanged: 0/0
  1403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1404 ;;      Params:         0       0       0       0       0
  1405 ;;      Locals:         0       0       0       0       0
  1406 ;;      Temps:          0       0       0       0       0
  1407 ;;      Totals:         0       0       0       0       0
  1408 ;;Total ram usage:        0 bytes
  1409 ;; Hardware stack levels used:    1
  1410 ;; Hardware stack levels required when called:    2
  1411 ;; This function calls:
  1412 ;;		Nothing
  1413 ;; This function is called by:
  1414 ;;		_main
  1415 ;; This function uses a non-reentrant model
  1416 ;;
  1417                           
  1418                           
  1419                           ;psect for function _ser_init
  1420  0000'                    _ser_init:	
  1421                           
  1422                           ;ser.c: 7: TXSTA = 0b00100100;
  1423                           
  1424                           ;incstack = 0
  1425                           ; Regs used in _ser_init: [wreg]
  1426  0000' 3024               	movlw	36
  1427  0001' 1683               	bsf	3,5	;RP0=1, select bank1
  1428  0002' 1303               	bcf	3,6	;RP1=0, select bank1
  1429  0003' 0098               	movwf	24	;volatile
  1430                           
  1431                           ;ser.c: 8: RCSTA = 0b10011000;
  1432  0004' 3098               	movlw	152
  1433  0005' 1283               	bcf	3,5	;RP0=0, select bank0
  1434  0006' 1303               	bcf	3,6	;RP1=0, select bank0
  1435  0007' 0098               	movwf	24	;volatile
  1436                           
  1437                           ;ser.c: 23: SPBRG = 20;
  1438  0008' 3014               	movlw	20
  1439  0009' 1683               	bsf	3,5	;RP0=1, select bank1
  1440  000A' 1303               	bcf	3,6	;RP1=0, select bank1
  1441  000B' 0099               	movwf	25	;volatile
  1442                           
  1443                           ;ser.c: 25: PEIE = 1;
  1444  000C' 170B               	bsf	11,6	;volatile
  1445                           
  1446                           ;ser.c: 26: (GIE = 1);
  1447  000D' 178B               	bsf	11,7	;volatile
  1448  000E' 0008               	return
  1449  000F'                    __end_of_ser_init:	
  1450                           
  1451                           	psect	text5
  1452  0000'                    __ptext5:	
  1453 ;; *************** function _getDistTrav *****************
  1454 ;; Defined at:
  1455 ;;		line 51 in file "ser.c"
  1456 ;; Parameters:    Size  Location     Type
  1457 ;;		None
  1458 ;; Auto vars:     Size  Location     Type
  1459 ;;		None
  1460 ;; Return value:  Size  Location     Type
  1461 ;;                  1    wreg      void 
  1462 ;; Registers used:
  1463 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1464 ;; Tracked objects:
  1465 ;;		On entry : 0/0
  1466 ;;		On exit  : 0/0
  1467 ;;		Unchanged: 0/0
  1468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1469 ;;      Params:         0       0       0       0       0
  1470 ;;      Locals:         0       0       0       0       0
  1471 ;;      Temps:          0       2       0       0       0
  1472 ;;      Totals:         0       2       0       0       0
  1473 ;;Total ram usage:        2 bytes
  1474 ;; Hardware stack levels used:    1
  1475 ;; Hardware stack levels required when called:    4
  1476 ;; This function calls:
  1477 ;;		___awdiv
  1478 ;;		_lcdSetCursor
  1479 ;;		_lcdWriteToDigitBCD
  1480 ;;		_ser_getch
  1481 ;;		_ser_putch
  1482 ;; This function is called by:
  1483 ;;		_main
  1484 ;; This function uses a non-reentrant model
  1485 ;;
  1486                           
  1487                           
  1488                           ;psect for function _getDistTrav
  1489  0000'                    _getDistTrav:	
  1490                           
  1491                           ;ser.c: 52: ser_putch(142);
  1492                           
  1493                           ;incstack = 0
  1494                           ; Regs used in _getDistTrav: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1495  0000' 308E               	movlw	142
  1496  0001' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
  1497                           
  1498                           ;ser.c: 53: ser_putch(19);
  1499  0006' 3013               	movlw	19
  1500  0007' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
  1501                           
  1502                           ;ser.c: 55: ser_getch();
  1503  000C' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_getch
  1504                           
  1505                           ;ser.c: 56: highByte = rxbyte;
  1506  0011' 1283               	bcf	3,5	;RP0=0, select bank0
  1507  0012' 1303               	bcf	3,6	;RP1=0, select bank0
  1508  0013' 0822'              	movf	_rxbyte,w
  1509  0014' 008F'              	movwf	??_getDistTrav
  1510  0015' 0190'              	clrf	??_getDistTrav+1
  1511  0016' 080F'              	movf	??_getDistTrav,w
  1512  0017' 00A4'              	movwf	_highByte
  1513  0018' 0810'              	movf	??_getDistTrav+1,w
  1514  0019' 00A5'              	movwf	_highByte+1
  1515                           
  1516                           ;ser.c: 57: ser_getch();
  1517  001A' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_getch
  1518                           
  1519                           ;ser.c: 58: lowByte = rxbyte;
  1520  001F' 1283               	bcf	3,5	;RP0=0, select bank0
  1521  0020' 1303               	bcf	3,6	;RP1=0, select bank0
  1522  0021' 0822'              	movf	_rxbyte,w
  1523  0022' 008F'              	movwf	??_getDistTrav
  1524  0023' 0190'              	clrf	??_getDistTrav+1
  1525  0024' 080F'              	movf	??_getDistTrav,w
  1526  0025' 008C'              	movwf	_lowByte
  1527  0026' 0810'              	movf	??_getDistTrav+1,w
  1528  0027' 008D'              	movwf	_lowByte+1
  1529                           
  1530                           ;ser.c: 60: distTrav = (256*highByte + lowByte);
  1531  0028' 0825'              	movf	_highByte+1,w
  1532  0029' 0090'              	movwf	??_getDistTrav+1
  1533  002A' 0824'              	movf	_highByte,w
  1534  002B' 008F'              	movwf	??_getDistTrav
  1535  002C' 080F'              	movf	??_getDistTrav,w
  1536  002D' 0090'              	movwf	??_getDistTrav+1
  1537  002E' 018F'              	clrf	??_getDistTrav
  1538  002F' 080C'              	movf	_lowByte,w
  1539  0030' 070F'              	addwf	??_getDistTrav,w
  1540  0031' 0086'              	movwf	_distTrav
  1541  0032' 080D'              	movf	_lowByte+1,w
  1542  0033' 1803               	skipnc
  1543  0034' 0A0D'              	incf	_lowByte+1,w
  1544  0035' 0710'              	addwf	??_getDistTrav+1,w
  1545  0036' 0087'              	movwf	_distTrav+1
  1546                           
  1547                           ;ser.c: 61: totalDistTrav = ((totalDistTrav + distTrav)/10);
  1548  0037' 300A               	movlw	10
  1549  0038' 0080'              	movwf	___awdiv@divisor
  1550  0039' 3000               	movlw	0
  1551  003A' 0081'              	movwf	___awdiv@divisor+1
  1552  003B' 0806'              	movf	_distTrav,w
  1553  003C' 071C'              	addwf	_totalDistTrav,w
  1554  003D' 0082'              	movwf	___awdiv@dividend
  1555  003E' 0807'              	movf	_distTrav+1,w
  1556  003F' 1803               	skipnc
  1557  0040' 0A07'              	incf	_distTrav+1,w
  1558  0041' 071D'              	addwf	_totalDistTrav+1,w
  1559  0042' 0083'              	movwf	___awdiv@dividend+1
  1560  0043' 120A' 118A' 2000' 120A' 118A' 	fcall	___awdiv
  1561  0048' 1283               	bcf	3,5	;RP0=0, select bank0
  1562  0049' 1303               	bcf	3,6	;RP1=0, select bank0
  1563  004A' 0801'              	movf	?___awdiv+1,w
  1564  004B' 009D'              	movwf	_totalDistTrav+1
  1565  004C' 0800'              	movf	?___awdiv,w
  1566  004D' 009C'              	movwf	_totalDistTrav
  1567                           
  1568                           ;ser.c: 63: lcdSetCursor(0b11000000);
  1569  004E' 30C0               	movlw	192
  1570  004F' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdSetCursor
  1571                           
  1572                           ;ser.c: 64: lcdWriteToDigitBCD(totalDistTrav);
  1573  0054' 1283               	bcf	3,5	;RP0=0, select bank0
  1574  0055' 1303               	bcf	3,6	;RP1=0, select bank0
  1575  0056' 081D'              	movf	_totalDistTrav+1,w
  1576  0057' 0084'              	movwf	lcdWriteToDigitBCD@data+1
  1577  0058' 081C'              	movf	_totalDistTrav,w
  1578  0059' 0083'              	movwf	lcdWriteToDigitBCD@data
  1579  005A' 120A' 118A' 2000'  	fcall	_lcdWriteToDigitBCD
  1580  005D' 0008               	return
  1581  005E'                    __end_of_getDistTrav:	
  1582                           
  1583                           	psect	text6
  1584  0000'                    __ptext6:	
  1585 ;; *************** function _ser_getch *****************
  1586 ;; Defined at:
  1587 ;;		line 34 in file "ser.c"
  1588 ;; Parameters:    Size  Location     Type
  1589 ;;		None
  1590 ;; Auto vars:     Size  Location     Type
  1591 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  1592 ;; Return value:  Size  Location     Type
  1593 ;;                  1    wreg      unsigned char 
  1594 ;; Registers used:
  1595 ;;		wreg
  1596 ;; Tracked objects:
  1597 ;;		On entry : 0/0
  1598 ;;		On exit  : 0/0
  1599 ;;		Unchanged: 0/0
  1600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1601 ;;      Params:         0       0       0       0       0
  1602 ;;      Locals:         0       1       0       0       0
  1603 ;;      Temps:          0       1       0       0       0
  1604 ;;      Totals:         0       2       0       0       0
  1605 ;;Total ram usage:        2 bytes
  1606 ;; Hardware stack levels used:    1
  1607 ;; Hardware stack levels required when called:    2
  1608 ;; This function calls:
  1609 ;;		Nothing
  1610 ;; This function is called by:
  1611 ;;		_getDistTrav
  1612 ;; This function uses a non-reentrant model
  1613 ;;
  1614                           
  1615                           
  1616                           ;psect for function _ser_getch
  1617  0000'                    _ser_getch:	
  1618  0000'                    l294:	
  1619                           ;ser.c: 35: while(!RCIF);
  1620                           
  1621                           ;incstack = 0
  1622                           ; Regs used in _ser_getch: [wreg]
  1623                           
  1624  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1625  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1626  0002' 1E8C               	btfss	12,5	;volatile
  1627  0003' 2800'              	goto	l294
  1628                           
  1629                           ;ser.c: 36: unsigned char rxbyte = RCREG;
  1630  0004' 081A               	movf	26,w	;volatile
  1631  0005' 0080'              	movwf	??_ser_getch
  1632  0006' 0800'              	movf	??_ser_getch,w
  1633  0007' 0081'              	movwf	ser_getch@rxbyte
  1634  0008' 0008               	return
  1635  0009'                    __end_of_ser_getch:	
  1636                           ;ser.c: 37: return rxbyte;
  1637                           ;	Return value of _ser_getch is never used
  1638                           
  1639                           
  1640                           	psect	text7
  1641  0000'                    __ptext7:	
  1642 ;; *************** function _lcdWriteToDigitBCD *****************
  1643 ;; Defined at:
  1644 ;;		line 42 in file "LCD.c"
  1645 ;; Parameters:    Size  Location     Type
  1646 ;;  data            2    3[BANK0 ] unsigned int 
  1647 ;; Auto vars:     Size  Location     Type
  1648 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  1649 ;;  TenThouDigit    2   11[BANK0 ] unsigned int 
  1650 ;;  ThouDigit       2    9[BANK0 ] unsigned int 
  1651 ;;  HunsDigit       2    7[BANK0 ] unsigned int 
  1652 ;;  TensDigit       2    5[BANK0 ] unsigned int 
  1653 ;; Return value:  Size  Location     Type
  1654 ;;                  1    wreg      void 
  1655 ;; Registers used:
  1656 ;;		wreg, status,2, status,0, pclath, cstack
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1662 ;;      Params:         0       2       0       0       0
  1663 ;;      Locals:         0      10       0       0       0
  1664 ;;      Temps:          0       0       0       0       0
  1665 ;;      Totals:         0      12       0       0       0
  1666 ;;Total ram usage:       12 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; Hardware stack levels required when called:    3
  1669 ;; This function calls:
  1670 ;;		_lcdWriteData
  1671 ;; This function is called by:
  1672 ;;		_getDistTrav
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           
  1677                           ;psect for function _lcdWriteToDigitBCD
  1678  0000'                    _lcdWriteToDigitBCD:	
  1679                           
  1680                           ;LCD.c: 43: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  1681                           ;LCD.c: 46: OnesDigit = data;
  1682                           
  1683                           ;incstack = 0
  1684                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  1685  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1686  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1687  0002' 0804'              	movf	lcdWriteToDigitBCD@data+1,w
  1688  0003' 008E'              	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1689  0004' 0803'              	movf	lcdWriteToDigitBCD@data,w
  1690  0005' 008D'              	movwf	lcdWriteToDigitBCD@OnesDigit
  1691                           
  1692                           ;LCD.c: 47: TensDigit = 0;
  1693  0006' 0185'              	clrf	lcdWriteToDigitBCD@TensDigit
  1694  0007' 0186'              	clrf	lcdWriteToDigitBCD@TensDigit+1
  1695                           
  1696                           ;LCD.c: 48: HunsDigit = 0;
  1697  0008' 0187'              	clrf	lcdWriteToDigitBCD@HunsDigit
  1698  0009' 0188'              	clrf	lcdWriteToDigitBCD@HunsDigit+1
  1699                           
  1700                           ;LCD.c: 49: ThouDigit = 0;
  1701  000A' 0189'              	clrf	lcdWriteToDigitBCD@ThouDigit
  1702  000B' 018A'              	clrf	lcdWriteToDigitBCD@ThouDigit+1
  1703                           
  1704                           ;LCD.c: 50: TenThouDigit = 0;
  1705  000C' 018B'              	clrf	lcdWriteToDigitBCD@TenThouDigit
  1706  000D' 018C'              	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  1707  000E'                    l1149:	
  1708                           ;LCD.c: 53: while (OnesDigit >= 10000){
  1709                           
  1710  000E' 3027               	movlw	39
  1711  000F' 020E'              	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1712  0010' 3010               	movlw	16
  1713  0011' 1903               	skipnz
  1714  0012' 020D'              	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1715  0013' 1C03               	btfss	3,0
  1716  0014' 2800'              	goto	l1155
  1717                           
  1718                           ;LCD.c: 54: OnesDigit = OnesDigit - 10000;
  1719  0015' 080D'              	movf	lcdWriteToDigitBCD@OnesDigit,w
  1720  0016' 3EF0               	addlw	240
  1721  0017' 008D'              	movwf	lcdWriteToDigitBCD@OnesDigit
  1722  0018' 080E'              	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1723  0019' 1803               	skipnc
  1724  001A' 3E01               	addlw	1
  1725  001B' 3ED8               	addlw	216
  1726  001C' 008E'              	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1727                           
  1728                           ;LCD.c: 55: TenThouDigit++;
  1729  001D' 3001               	movlw	1
  1730  001E' 078B'              	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  1731  001F' 1803               	skipnc
  1732  0020' 0A8C'              	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  1733  0021' 3000               	movlw	0
  1734  0022' 078C'              	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  1735  0023' 2800'              	goto	l1149
  1736  0024'                    l1151:	
  1737                           ;LCD.c: 56: }
  1738                           ;LCD.c: 58: while (OnesDigit >= 1000){
  1739                           
  1740                           
  1741                           ;LCD.c: 59: OnesDigit = OnesDigit - 1000;
  1742  0024' 080D'              	movf	lcdWriteToDigitBCD@OnesDigit,w
  1743  0025' 3E18               	addlw	24
  1744  0026' 008D'              	movwf	lcdWriteToDigitBCD@OnesDigit
  1745  0027' 080E'              	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1746  0028' 1803               	skipnc
  1747  0029' 3E01               	addlw	1
  1748  002A' 3EFC               	addlw	252
  1749  002B' 008E'              	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1750                           
  1751                           ;LCD.c: 60: ThouDigit++;
  1752  002C' 3001               	movlw	1
  1753  002D' 0789'              	addwf	lcdWriteToDigitBCD@ThouDigit,f
  1754  002E' 1803               	skipnc
  1755  002F' 0A8A'              	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  1756  0030' 3000               	movlw	0
  1757  0031' 078A'              	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  1758  0032'                    l1155:	
  1759  0032' 3003               	movlw	3
  1760  0033' 020E'              	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1761  0034' 30E8               	movlw	232
  1762  0035' 1903               	skipnz
  1763  0036' 020D'              	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1764  0037' 1C03               	btfss	3,0
  1765  0038' 2800'              	goto	l1161
  1766  0039' 2800'              	goto	l1151
  1767  003A'                    l1157:	
  1768                           ;LCD.c: 61: }
  1769                           ;LCD.c: 63: while (OnesDigit >= 100){
  1770                           
  1771                           
  1772                           ;LCD.c: 64: OnesDigit = OnesDigit - 100;
  1773  003A' 080D'              	movf	lcdWriteToDigitBCD@OnesDigit,w
  1774  003B' 3E9C               	addlw	156
  1775  003C' 008D'              	movwf	lcdWriteToDigitBCD@OnesDigit
  1776  003D' 080E'              	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1777  003E' 1803               	skipnc
  1778  003F' 3E01               	addlw	1
  1779  0040' 3EFF               	addlw	255
  1780  0041' 008E'              	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1781                           
  1782                           ;LCD.c: 65: HunsDigit++;
  1783  0042' 3001               	movlw	1
  1784  0043' 0787'              	addwf	lcdWriteToDigitBCD@HunsDigit,f
  1785  0044' 1803               	skipnc
  1786  0045' 0A88'              	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  1787  0046' 3000               	movlw	0
  1788  0047' 0788'              	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  1789  0048'                    l1161:	
  1790  0048' 3000               	movlw	0
  1791  0049' 020E'              	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1792  004A' 3064               	movlw	100
  1793  004B' 1903               	skipnz
  1794  004C' 020D'              	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1795  004D' 1C03               	btfss	3,0
  1796  004E' 2800'              	goto	l1167
  1797  004F' 2800'              	goto	l1157
  1798  0050'                    l1163:	
  1799                           ;LCD.c: 66: }
  1800                           ;LCD.c: 68: while (OnesDigit >= 10){
  1801                           
  1802                           
  1803                           ;LCD.c: 69: OnesDigit = OnesDigit - 10;
  1804  0050' 080D'              	movf	lcdWriteToDigitBCD@OnesDigit,w
  1805  0051' 3EF6               	addlw	246
  1806  0052' 008D'              	movwf	lcdWriteToDigitBCD@OnesDigit
  1807  0053' 080E'              	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  1808  0054' 1803               	skipnc
  1809  0055' 3E01               	addlw	1
  1810  0056' 3EFF               	addlw	255
  1811  0057' 008E'              	movwf	lcdWriteToDigitBCD@OnesDigit+1
  1812                           
  1813                           ;LCD.c: 70: TensDigit++;
  1814  0058' 3001               	movlw	1
  1815  0059' 0785'              	addwf	lcdWriteToDigitBCD@TensDigit,f
  1816  005A' 1803               	skipnc
  1817  005B' 0A86'              	incf	lcdWriteToDigitBCD@TensDigit+1,f
  1818  005C' 3000               	movlw	0
  1819  005D' 0786'              	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  1820  005E'                    l1167:	
  1821  005E' 3000               	movlw	0
  1822  005F' 020E'              	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  1823  0060' 300A               	movlw	10
  1824  0061' 1903               	skipnz
  1825  0062' 020D'              	subwf	lcdWriteToDigitBCD@OnesDigit,w
  1826  0063' 1803               	skipnc
  1827  0064' 2800'              	goto	l1163
  1828                           
  1829                           ;LCD.c: 71: }
  1830                           ;LCD.c: 73: if (TenThouDigit > 0)
  1831  0065' 080B'              	movf	lcdWriteToDigitBCD@TenThouDigit,w
  1832  0066' 040C'              	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  1833  0067' 1903               	btfsc	3,2
  1834  0068' 2800'              	goto	l1173
  1835                           
  1836                           ;LCD.c: 74: lcdWriteData((unsigned int)TenThouDigit + 48);
  1837  0069' 080B'              	movf	lcdWriteToDigitBCD@TenThouDigit,w
  1838  006A' 3E30               	addlw	48
  1839  006B' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteData
  1840  0070'                    l1173:	
  1841                           
  1842                           ;LCD.c: 76: if (ThouDigit > 0)
  1843  0070' 1283               	bcf	3,5	;RP0=0, select bank0
  1844  0071' 1303               	bcf	3,6	;RP1=0, select bank0
  1845  0072' 0809'              	movf	lcdWriteToDigitBCD@ThouDigit,w
  1846  0073' 040A'              	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  1847  0074' 1903               	btfsc	3,2
  1848  0075' 2800'              	goto	l187
  1849                           
  1850                           ;LCD.c: 77: lcdWriteData((unsigned int)ThouDigit + 48);
  1851  0076' 0809'              	movf	lcdWriteToDigitBCD@ThouDigit,w
  1852  0077' 3E30               	addlw	48
  1853  0078' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteData
  1854  007D'                    l187:	
  1855                           
  1856                           ;LCD.c: 79: lcdWriteData((unsigned int)HunsDigit + 48);
  1857  007D' 1283               	bcf	3,5	;RP0=0, select bank0
  1858  007E' 1303               	bcf	3,6	;RP1=0, select bank0
  1859  007F' 0807'              	movf	lcdWriteToDigitBCD@HunsDigit,w
  1860  0080' 3E30               	addlw	48
  1861  0081' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteData
  1862                           
  1863                           ;LCD.c: 80: lcdWriteData((unsigned int)TensDigit + 48);
  1864  0086' 1283               	bcf	3,5	;RP0=0, select bank0
  1865  0087' 1303               	bcf	3,6	;RP1=0, select bank0
  1866  0088' 0805'              	movf	lcdWriteToDigitBCD@TensDigit,w
  1867  0089' 3E30               	addlw	48
  1868  008A' 120A' 118A' 2000' 120A' 118A' 	fcall	_lcdWriteData
  1869                           
  1870                           ;LCD.c: 81: lcdWriteData((unsigned int)OnesDigit + 48);
  1871  008F' 1283               	bcf	3,5	;RP0=0, select bank0
  1872  0090' 1303               	bcf	3,6	;RP1=0, select bank0
  1873  0091' 080D'              	movf	lcdWriteToDigitBCD@OnesDigit,w
  1874  0092' 3E30               	addlw	48
  1875  0093' 120A' 118A' 2000'  	fcall	_lcdWriteData
  1876  0096' 0008               	return
  1877  0097'                    __end_of_lcdWriteToDigitBCD:	
  1878                           
  1879                           	psect	text8
  1880  0000'                    __ptext8:	
  1881 ;; *************** function _lcdWriteData *****************
  1882 ;; Defined at:
  1883 ;;		line 20 in file "LCD.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;  databyte        1    wreg     unsigned char 
  1886 ;; Auto vars:     Size  Location     Type
  1887 ;;  databyte        1    2[BANK0 ] unsigned char 
  1888 ;; Return value:  Size  Location     Type
  1889 ;;                  1    wreg      void 
  1890 ;; Registers used:
  1891 ;;		wreg
  1892 ;; Tracked objects:
  1893 ;;		On entry : 0/0
  1894 ;;		On exit  : 0/0
  1895 ;;		Unchanged: 0/0
  1896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1897 ;;      Params:         0       0       0       0       0
  1898 ;;      Locals:         0       1       0       0       0
  1899 ;;      Temps:          0       2       0       0       0
  1900 ;;      Totals:         0       3       0       0       0
  1901 ;;Total ram usage:        3 bytes
  1902 ;; Hardware stack levels used:    1
  1903 ;; Hardware stack levels required when called:    2
  1904 ;; This function calls:
  1905 ;;		Nothing
  1906 ;; This function is called by:
  1907 ;;		_lcdWriteToDigitBCD
  1908 ;;		_lcdWriteString
  1909 ;; This function uses a non-reentrant model
  1910 ;;
  1911                           
  1912                           
  1913                           ;psect for function _lcdWriteData
  1914  0000'                    _lcdWriteData:	
  1915                           
  1916                           ;incstack = 0
  1917                           ; Regs used in _lcdWriteData: [wreg]
  1918                           ;lcdWriteData@databyte stored from wreg
  1919  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1920  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1921  0002' 0082'              	movwf	lcdWriteData@databyte
  1922                           
  1923                           ;LCD.c: 21: RE2 = 0;
  1924  0003' 1109               	bcf	9,2	;volatile
  1925                           
  1926                           ;LCD.c: 22: RE1 = 0;
  1927  0004' 1089               	bcf	9,1	;volatile
  1928                           
  1929                           ;LCD.c: 23: RE0 = 1;
  1930  0005' 1409               	bsf	9,0	;volatile
  1931                           
  1932                           ;LCD.c: 24: PORTD = databyte;
  1933  0006' 0802'              	movf	lcdWriteData@databyte,w
  1934  0007' 0088               	movwf	8	;volatile
  1935                           
  1936                           ;LCD.c: 25: RE2 = 1;
  1937  0008' 1509               	bsf	9,2	;volatile
  1938                           
  1939                           ;LCD.c: 26: RE2 = 0;
  1940  0009' 1109               	bcf	9,2	;volatile
  1941                           
  1942                           ;LCD.c: 27: _delay((unsigned long)((1)*(20000000/4000.0)));
  1943  000A' 3007               	movlw	7
  1944  000B' 0081'              	movwf	??_lcdWriteData+1
  1945  000C' 307D               	movlw	125
  1946  000D' 0080'              	movwf	??_lcdWriteData
  1947  000E'                    u987:	
  1948  000E' 0B80'              	decfsz	??_lcdWriteData,f
  1949  000F' 2800'              	goto	u987
  1950  0010' 0B81'              	decfsz	??_lcdWriteData+1,f
  1951  0011' 2800'              	goto	u987
  1952  0012' 0008               	return
  1953  0013'                    __end_of_lcdWriteData:	
  1954                           
  1955                           	psect	text9
  1956  0000'                    __ptext9:	
  1957 ;; *************** function _lcdSetCursor *****************
  1958 ;; Defined at:
  1959 ;;		line 31 in file "LCD.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;  address         1    wreg     unsigned char 
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;  address         1    3[BANK0 ] unsigned char 
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  1    wreg      void 
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0, pclath, cstack
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1973 ;;      Params:         0       0       0       0       0
  1974 ;;      Locals:         0       1       0       0       0
  1975 ;;      Temps:          0       0       0       0       0
  1976 ;;      Totals:         0       1       0       0       0
  1977 ;;Total ram usage:        1 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; Hardware stack levels required when called:    3
  1980 ;; This function calls:
  1981 ;;		_lcdWriteControl
  1982 ;; This function is called by:
  1983 ;;		_getDistTrav
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987                           
  1988                           ;psect for function _lcdSetCursor
  1989  0000'                    _lcdSetCursor:	
  1990                           
  1991                           ;incstack = 0
  1992                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  1993                           ;lcdSetCursor@address stored from wreg
  1994  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  1995  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  1996  0002' 0083'              	movwf	lcdSetCursor@address
  1997                           
  1998                           ;LCD.c: 32: address |= 0b10000000;
  1999  0003' 1783'              	bsf	lcdSetCursor@address,7
  2000                           
  2001                           ;LCD.c: 33: lcdWriteControl(address);
  2002  0004' 0803'              	movf	lcdSetCursor@address,w
  2003  0005' 120A' 118A' 2000'  	fcall	_lcdWriteControl
  2004  0008' 0008               	return
  2005  0009'                    __end_of_lcdSetCursor:	
  2006                           
  2007                           	psect	text10
  2008  0000'                    __ptext10:	
  2009 ;; *************** function _lcdWriteControl *****************
  2010 ;; Defined at:
  2011 ;;		line 9 in file "LCD.c"
  2012 ;; Parameters:    Size  Location     Type
  2013 ;;  databyte        1    wreg     unsigned char 
  2014 ;; Auto vars:     Size  Location     Type
  2015 ;;  databyte        1    2[BANK0 ] unsigned char 
  2016 ;; Return value:  Size  Location     Type
  2017 ;;                  1    wreg      void 
  2018 ;; Registers used:
  2019 ;;		wreg
  2020 ;; Tracked objects:
  2021 ;;		On entry : 0/0
  2022 ;;		On exit  : 0/0
  2023 ;;		Unchanged: 0/0
  2024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2025 ;;      Params:         0       0       0       0       0
  2026 ;;      Locals:         0       1       0       0       0
  2027 ;;      Temps:          0       2       0       0       0
  2028 ;;      Totals:         0       3       0       0       0
  2029 ;;Total ram usage:        3 bytes
  2030 ;; Hardware stack levels used:    1
  2031 ;; Hardware stack levels required when called:    2
  2032 ;; This function calls:
  2033 ;;		Nothing
  2034 ;; This function is called by:
  2035 ;;		_lcdSetCursor
  2036 ;;		_setupLCD
  2037 ;; This function uses a non-reentrant model
  2038 ;;
  2039                           
  2040                           
  2041                           ;psect for function _lcdWriteControl
  2042  0000'                    _lcdWriteControl:	
  2043                           
  2044                           ;incstack = 0
  2045                           ; Regs used in _lcdWriteControl: [wreg]
  2046                           ;lcdWriteControl@databyte stored from wreg
  2047  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2048  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  2049  0002' 0082'              	movwf	lcdWriteControl@databyte
  2050                           
  2051                           ;LCD.c: 10: RE2 = 0;
  2052  0003' 1109               	bcf	9,2	;volatile
  2053                           
  2054                           ;LCD.c: 11: RE1 = 0;
  2055  0004' 1089               	bcf	9,1	;volatile
  2056                           
  2057                           ;LCD.c: 12: RE0 = 0;
  2058  0005' 1009               	bcf	9,0	;volatile
  2059                           
  2060                           ;LCD.c: 13: PORTD = databyte;
  2061  0006' 0802'              	movf	lcdWriteControl@databyte,w
  2062  0007' 0088               	movwf	8	;volatile
  2063                           
  2064                           ;LCD.c: 14: RE2 = 1;
  2065  0008' 1509               	bsf	9,2	;volatile
  2066                           
  2067                           ;LCD.c: 15: RE2 = 0;
  2068  0009' 1109               	bcf	9,2	;volatile
  2069                           
  2070                           ;LCD.c: 16: _delay((unsigned long)((2)*(20000000/4000.0)));
  2071  000A' 300D               	movlw	13
  2072  000B' 0081'              	movwf	??_lcdWriteControl+1
  2073  000C' 30FB               	movlw	251
  2074  000D' 0080'              	movwf	??_lcdWriteControl
  2075  000E'                    u997:	
  2076  000E' 0B80'              	decfsz	??_lcdWriteControl,f
  2077  000F' 2800'              	goto	u997
  2078  0010' 0B81'              	decfsz	??_lcdWriteControl+1,f
  2079  0011' 2800'              	goto	u997
  2080  0012' 2800'              	nop2
  2081  0013' 0008               	return
  2082  0014'                    __end_of_lcdWriteControl:	
  2083                           
  2084                           	psect	text11
  2085  0000'                    __ptext11:	
  2086 ;; *************** function ___awdiv *****************
  2087 ;; Defined at:
  2088 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;  divisor         2    0[BANK0 ] int 
  2091 ;;  dividend        2    2[BANK0 ] int 
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;  quotient        2    7[BANK0 ] int 
  2094 ;;  sign            1    6[BANK0 ] unsigned char 
  2095 ;;  counter         1    5[BANK0 ] unsigned char 
  2096 ;; Return value:  Size  Location     Type
  2097 ;;                  2    0[BANK0 ] int 
  2098 ;; Registers used:
  2099 ;;		wreg, status,2, status,0
  2100 ;; Tracked objects:
  2101 ;;		On entry : 0/0
  2102 ;;		On exit  : 0/0
  2103 ;;		Unchanged: 0/0
  2104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2105 ;;      Params:         0       4       0       0       0
  2106 ;;      Locals:         0       4       0       0       0
  2107 ;;      Temps:          0       1       0       0       0
  2108 ;;      Totals:         0       9       0       0       0
  2109 ;;Total ram usage:        9 bytes
  2110 ;; Hardware stack levels used:    1
  2111 ;; Hardware stack levels required when called:    2
  2112 ;; This function calls:
  2113 ;;		Nothing
  2114 ;; This function is called by:
  2115 ;;		_getDistTrav
  2116 ;; This function uses a non-reentrant model
  2117 ;;
  2118                           
  2119                           
  2120                           ;psect for function ___awdiv
  2121  0000'                    ___awdiv:	
  2122                           
  2123                           ;incstack = 0
  2124                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2125  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2126  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  2127  0002' 0186'              	clrf	___awdiv@sign
  2128  0003' 1F81'              	btfss	___awdiv@divisor+1,7
  2129  0004' 2800'              	goto	l1191
  2130  0005' 0980'              	comf	___awdiv@divisor,f
  2131  0006' 0981'              	comf	___awdiv@divisor+1,f
  2132  0007' 0A80'              	incf	___awdiv@divisor,f
  2133  0008' 1903               	skipnz
  2134  0009' 0A81'              	incf	___awdiv@divisor+1,f
  2135  000A' 0186'              	clrf	___awdiv@sign
  2136  000B' 0A86'              	incf	___awdiv@sign,f
  2137  000C'                    l1191:	
  2138  000C' 1F83'              	btfss	___awdiv@dividend+1,7
  2139  000D' 2800'              	goto	l1197
  2140  000E' 0982'              	comf	___awdiv@dividend,f
  2141  000F' 0983'              	comf	___awdiv@dividend+1,f
  2142  0010' 0A82'              	incf	___awdiv@dividend,f
  2143  0011' 1903               	skipnz
  2144  0012' 0A83'              	incf	___awdiv@dividend+1,f
  2145  0013' 3001               	movlw	1
  2146  0014' 0084'              	movwf	??___awdiv
  2147  0015' 0804'              	movf	??___awdiv,w
  2148  0016' 0686'              	xorwf	___awdiv@sign,f
  2149  0017'                    l1197:	
  2150  0017' 0187'              	clrf	___awdiv@quotient
  2151  0018' 0188'              	clrf	___awdiv@quotient+1
  2152  0019' 0800'              	movf	___awdiv@divisor,w
  2153  001A' 0401'              	iorwf	___awdiv@divisor+1,w
  2154  001B' 1903               	btfsc	3,2
  2155  001C' 2800'              	goto	l1219
  2156  001D' 0185'              	clrf	___awdiv@counter
  2157  001E' 0A85'              	incf	___awdiv@counter,f
  2158  001F'                    l1207:	
  2159  001F' 1B81'              	btfsc	___awdiv@divisor+1,7
  2160  0020' 2800'              	goto	l1209
  2161  0021' 3001               	movlw	1
  2162  0022'                    u595:	
  2163  0022' 1003               	clrc
  2164  0023' 0D80'              	rlf	___awdiv@divisor,f
  2165  0024' 0D81'              	rlf	___awdiv@divisor+1,f
  2166  0025' 3EFF               	addlw	-1
  2167  0026' 1D03               	skipz
  2168  0027' 2800'              	goto	u595
  2169  0028' 3001               	movlw	1
  2170  0029' 0084'              	movwf	??___awdiv
  2171  002A' 0804'              	movf	??___awdiv,w
  2172  002B' 0785'              	addwf	___awdiv@counter,f
  2173  002C' 2800'              	goto	l1207
  2174  002D'                    l1209:	
  2175  002D' 3001               	movlw	1
  2176  002E'                    u615:	
  2177  002E' 1003               	clrc
  2178  002F' 0D87'              	rlf	___awdiv@quotient,f
  2179  0030' 0D88'              	rlf	___awdiv@quotient+1,f
  2180  0031' 3EFF               	addlw	-1
  2181  0032' 1D03               	skipz
  2182  0033' 2800'              	goto	u615
  2183  0034' 0801'              	movf	___awdiv@divisor+1,w
  2184  0035' 0203'              	subwf	___awdiv@dividend+1,w
  2185  0036' 1D03               	skipz
  2186  0037' 2800'              	goto	u625
  2187  0038' 0800'              	movf	___awdiv@divisor,w
  2188  0039' 0202'              	subwf	___awdiv@dividend,w
  2189  003A'                    u625:	
  2190  003A' 1C03               	skipc
  2191  003B' 2800'              	goto	l1215
  2192  003C' 0800'              	movf	___awdiv@divisor,w
  2193  003D' 0282'              	subwf	___awdiv@dividend,f
  2194  003E' 0801'              	movf	___awdiv@divisor+1,w
  2195  003F' 1C03               	skipc
  2196  0040' 0383'              	decf	___awdiv@dividend+1,f
  2197  0041' 0283'              	subwf	___awdiv@dividend+1,f
  2198  0042' 1407'              	bsf	___awdiv@quotient,0
  2199  0043'                    l1215:	
  2200  0043' 3001               	movlw	1
  2201  0044'                    u635:	
  2202  0044' 1003               	clrc
  2203  0045' 0C81'              	rrf	___awdiv@divisor+1,f
  2204  0046' 0C80'              	rrf	___awdiv@divisor,f
  2205  0047' 3EFF               	addlw	-1
  2206  0048' 1D03               	skipz
  2207  0049' 2800'              	goto	u635
  2208  004A' 3001               	movlw	1
  2209  004B' 0285'              	subwf	___awdiv@counter,f
  2210  004C' 1D03               	btfss	3,2
  2211  004D' 2800'              	goto	l1209
  2212  004E'                    l1219:	
  2213  004E' 0806'              	movf	___awdiv@sign,w
  2214  004F' 1903               	btfsc	3,2
  2215  0050' 2800'              	goto	l1223
  2216  0051' 0987'              	comf	___awdiv@quotient,f
  2217  0052' 0988'              	comf	___awdiv@quotient+1,f
  2218  0053' 0A87'              	incf	___awdiv@quotient,f
  2219  0054' 1903               	skipnz
  2220  0055' 0A88'              	incf	___awdiv@quotient+1,f
  2221  0056'                    l1223:	
  2222  0056' 0808'              	movf	___awdiv@quotient+1,w
  2223  0057' 0081'              	movwf	?___awdiv+1
  2224  0058' 0807'              	movf	___awdiv@quotient,w
  2225  0059' 0080'              	movwf	?___awdiv
  2226  005A' 0008               	return
  2227  005B'                    __end_of___awdiv:	
  2228                           
  2229                           	psect	text12
  2230  0000'                    __ptext12:	
  2231 ;; *************** function _Drive *****************
  2232 ;; Defined at:
  2233 ;;		line 43 in file "ser.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;  speedH          2    1[BANK0 ] int 
  2236 ;;  speedL          2    3[BANK0 ] int 
  2237 ;;  radH            2    5[BANK0 ] int 
  2238 ;;  radL            2    7[BANK0 ] int 
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;		None
  2241 ;; Return value:  Size  Location     Type
  2242 ;;                  1    wreg      void 
  2243 ;; Registers used:
  2244 ;;		wreg, status,2, status,0, pclath, cstack
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2250 ;;      Params:         0       8       0       0       0
  2251 ;;      Locals:         0       0       0       0       0
  2252 ;;      Temps:          0       0       0       0       0
  2253 ;;      Totals:         0       8       0       0       0
  2254 ;;Total ram usage:        8 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; Hardware stack levels required when called:    3
  2257 ;; This function calls:
  2258 ;;		_ser_putch
  2259 ;; This function is called by:
  2260 ;;		_main
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           
  2265                           ;psect for function _Drive
  2266  0000'                    _Drive:	
  2267                           
  2268                           ;ser.c: 44: ser_putch(137);
  2269                           
  2270                           ;incstack = 0
  2271                           ; Regs used in _Drive: [wreg+status,2+status,0+pclath+cstack]
  2272  0000' 3089               	movlw	137
  2273  0001' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
  2274                           
  2275                           ;ser.c: 45: ser_putch(speedH);
  2276  0006' 1283               	bcf	3,5	;RP0=0, select bank0
  2277  0007' 1303               	bcf	3,6	;RP1=0, select bank0
  2278  0008' 0801'              	movf	Drive@speedH,w
  2279  0009' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
  2280                           
  2281                           ;ser.c: 46: ser_putch(speedL);
  2282  000E' 1283               	bcf	3,5	;RP0=0, select bank0
  2283  000F' 1303               	bcf	3,6	;RP1=0, select bank0
  2284  0010' 0803'              	movf	Drive@speedL,w
  2285  0011' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
  2286                           
  2287                           ;ser.c: 47: ser_putch(radH);
  2288  0016' 1283               	bcf	3,5	;RP0=0, select bank0
  2289  0017' 1303               	bcf	3,6	;RP1=0, select bank0
  2290  0018' 0805'              	movf	Drive@radH,w
  2291  0019' 120A' 118A' 2000' 120A' 118A' 	fcall	_ser_putch
  2292                           
  2293                           ;ser.c: 48: ser_putch(radL);
  2294  001E' 1283               	bcf	3,5	;RP0=0, select bank0
  2295  001F' 1303               	bcf	3,6	;RP1=0, select bank0
  2296  0020' 0807'              	movf	Drive@radL,w
  2297  0021' 120A' 118A' 2000'  	fcall	_ser_putch
  2298  0024' 0008               	return
  2299  0025'                    __end_of_Drive:	
  2300                           
  2301                           	psect	text13
  2302  0000'                    __ptext13:	
  2303 ;; *************** function _ser_putch *****************
  2304 ;; Defined at:
  2305 ;;		line 29 in file "ser.c"
  2306 ;; Parameters:    Size  Location     Type
  2307 ;;  c               1    wreg     unsigned char 
  2308 ;; Auto vars:     Size  Location     Type
  2309 ;;  c               1    0[BANK0 ] unsigned char 
  2310 ;; Return value:  Size  Location     Type
  2311 ;;                  1    wreg      void 
  2312 ;; Registers used:
  2313 ;;		wreg
  2314 ;; Tracked objects:
  2315 ;;		On entry : 0/0
  2316 ;;		On exit  : 0/0
  2317 ;;		Unchanged: 0/0
  2318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2319 ;;      Params:         0       0       0       0       0
  2320 ;;      Locals:         0       1       0       0       0
  2321 ;;      Temps:          0       0       0       0       0
  2322 ;;      Totals:         0       1       0       0       0
  2323 ;;Total ram usage:        1 bytes
  2324 ;; Hardware stack levels used:    1
  2325 ;; Hardware stack levels required when called:    2
  2326 ;; This function calls:
  2327 ;;		Nothing
  2328 ;; This function is called by:
  2329 ;;		_main
  2330 ;;		_Drive
  2331 ;;		_getDistTrav
  2332 ;; This function uses a non-reentrant model
  2333 ;;
  2334                           
  2335                           
  2336                           ;psect for function _ser_putch
  2337  0000'                    _ser_putch:	
  2338                           
  2339                           ;incstack = 0
  2340                           ; Regs used in _ser_putch: [wreg]
  2341                           ;ser_putch@c stored from wreg
  2342  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  2343  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  2344  0002' 0080'              	movwf	ser_putch@c
  2345  0003'                    l288:	
  2346                           ;ser.c: 30: while(!TRMT);
  2347                           
  2348  0003' 1683               	bsf	3,5	;RP0=1, select bank1
  2349  0004' 1303               	bcf	3,6	;RP1=0, select bank1
  2350  0005' 1C98               	btfss	24,1	;volatile
  2351  0006' 2800'              	goto	l288
  2352                           
  2353                           ;ser.c: 31: TXREG=c;
  2354  0007' 1283               	bcf	3,5	;RP0=0, select bank0
  2355  0008' 1303               	bcf	3,6	;RP1=0, select bank0
  2356  0009' 0800'              	movf	ser_putch@c,w
  2357  000A' 0099               	movwf	25	;volatile
  2358  000B' 0008               	return
  2359  000C'                    __end_of_ser_putch:	
  2360                           
  2361                           	psect	text14
  2362  0000'                    __ptext14:	
  2363 ;; *************** function _isr *****************
  2364 ;; Defined at:
  2365 ;;		line 26 in file "main.c"
  2366 ;; Parameters:    Size  Location     Type
  2367 ;;		None
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;		None
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  1    wreg      void 
  2372 ;; Registers used:
  2373 ;;		wreg, status,2, status,0, pclath, cstack
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2379 ;;      Params:         0       0       0       0       0
  2380 ;;      Locals:         0       0       0       0       0
  2381 ;;      Temps:          5       0       0       0       0
  2382 ;;      Totals:         5       0       0       0       0
  2383 ;;Total ram usage:        5 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; Hardware stack levels required when called:    1
  2386 ;; This function calls:
  2387 ;;		___lwmod
  2388 ;; This function is called by:
  2389 ;;		Interrupt level 1
  2390 ;; This function uses a non-reentrant model
  2391 ;;
  2392                           
  2393                           
  2394                           ;psect for function _isr
  2395  0000'                    _isr:	
  2396                           
  2397                           ;main.c: 28: if(TMR0IF){
  2398  0000' 1D0B               	btfss	11,2	;volatile
  2399  0001' 2800'              	goto	i1l99
  2400                           
  2401                           ;main.c: 29: TMR0IF = 0;
  2402  0002' 110B               	bcf	11,2	;volatile
  2403                           
  2404                           ;main.c: 30: TMR0 = 100;
  2405  0003' 3064               	movlw	100
  2406  0004' 0081               	movwf	1	;volatile
  2407                           
  2408                           ;main.c: 33: if(time_count % 1 == 0) {
  2409  0005' 3001               	movlw	1
  2410  0006' 079A'              	addwf	_time_count,f	;volatile
  2411  0007' 1803               	skipnc
  2412  0008' 0A9B'              	incf	_time_count+1,f	;volatile
  2413  0009' 3000               	movlw	0
  2414  000A' 079B'              	addwf	_time_count+1,f	;volatile
  2415                           
  2416                           ;main.c: 35: RC2 = 1; __nop(); RC2 = 0;;
  2417  000B' 1507               	bsf	7,2	;volatile
  2418  000C' 0000               	nop
  2419  000D' 1283               	bcf	3,5	;RP0=0, select bank0
  2420  000E' 1303               	bcf	3,6	;RP1=0, select bank0
  2421  000F' 1107               	bcf	7,2	;volatile
  2422                           
  2423                           ;main.c: 36: }
  2424                           ;main.c: 38: if(time_count % 1000 == 0){
  2425  0010' 30E8               	movlw	232
  2426  0011' 0080'              	movwf	___lwmod@divisor
  2427  0012' 3003               	movlw	3
  2428  0013' 0081'              	movwf	___lwmod@divisor+1
  2429  0014' 081B'              	movf	_time_count+1,w	;volatile
  2430  0015' 0083'              	movwf	___lwmod@dividend+1
  2431  0016' 081A'              	movf	_time_count,w	;volatile
  2432  0017' 0082'              	movwf	___lwmod@dividend
  2433  0018' 120A' 118A' 2000' 120A' 118A' 	fcall	___lwmod
  2434  001D' 0800'              	movf	?___lwmod,w
  2435  001E' 0401'              	iorwf	?___lwmod+1,w
  2436  001F' 1D03               	btfss	3,2
  2437  0020' 2800'              	goto	i1l1337
  2438                           
  2439                           ;main.c: 39: RB0 = !RB0;
  2440  0021' 3001               	movlw	1
  2441  0022' 1283               	bcf	3,5	;RP0=0, select bank0
  2442  0023' 1303               	bcf	3,6	;RP1=0, select bank0
  2443  0024' 0686               	xorwf	6,f
  2444                           
  2445                           ;main.c: 41: time_count = 0;
  2446  0025' 019A'              	clrf	_time_count	;volatile
  2447  0026' 019B'              	clrf	_time_count+1	;volatile
  2448  0027'                    i1l1337:	
  2449                           
  2450                           ;main.c: 42: }
  2451                           ;main.c: 43: if (!RB0 == 1)
  2452  0027' 1283               	bcf	3,5	;RP0=0, select bank0
  2453  0028' 1303               	bcf	3,6	;RP1=0, select bank0
  2454  0029' 1806               	btfsc	6,0	;volatile
  2455  002A' 2800'              	goto	i1l1341
  2456                           
  2457                           ;main.c: 44: PB8Counter++;
  2458  002B' 3001               	movlw	1
  2459  002C' 0086'              	movwf	??_isr
  2460  002D' 0806'              	movf	??_isr,w
  2461  002E' 07A0'              	addwf	_PB8Counter,f
  2462  002F'                    i1l1341:	
  2463                           
  2464                           ;main.c: 45: if (!RB1 == 1)
  2465  002F' 1886               	btfsc	6,1	;volatile
  2466  0030' 2800'              	goto	i1l1345
  2467                           
  2468                           ;main.c: 46: PB7Counter++;
  2469  0031' 3001               	movlw	1
  2470  0032' 0086'              	movwf	??_isr
  2471  0033' 0806'              	movf	??_isr,w
  2472  0034' 079F'              	addwf	_PB7Counter,f
  2473  0035'                    i1l1345:	
  2474                           
  2475                           ;main.c: 47: if (!RB2 == 1)
  2476  0035' 1906               	btfsc	6,2	;volatile
  2477  0036' 2800'              	goto	i1l99
  2478                           
  2479                           ;main.c: 48: PB6Counter++;
  2480  0037' 3001               	movlw	1
  2481  0038' 0086'              	movwf	??_isr
  2482  0039' 0806'              	movf	??_isr,w
  2483  003A' 079E'              	addwf	_PB6Counter,f
  2484  003B'                    i1l99:	
  2485  003B' 080A'              	movf	??_isr+4,w
  2486  003C' 00FF               	movwf	127
  2487  003D' 0809'              	movf	??_isr+3,w
  2488  003E' 008A               	movwf	10
  2489  003F' 0808'              	movf	??_isr+2,w
  2490  0040' 0084               	movwf	4
  2491  0041' 0E00'              	swapf	(??_isr+1)^(0+-128),w
  2492  0042' 0083               	movwf	3
  2493  0043' 0EFE               	swapf	126,f
  2494  0044' 0E7E               	swapf	126,w
  2495  0045' 0009               	retfie
  2496  0046'                    __end_of_isr:	
  2497                           
  2498                           	psect	intentry
  2499  0000'                    __pintentry:	
  2500                           ;incstack = 0
  2501                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  2502                           
  2503  0000'                    interrupt_function:	
  2504  007E                     saved_w	set	btemp
  2505  0000' 00FE               	movwf	btemp
  2506  0001' 0E03               	swapf	3,w
  2507  0002' 0087'              	movwf	??_isr+1
  2508  0003' 0804               	movf	4,w
  2509  0004' 0088'              	movwf	??_isr+2
  2510  0005' 080A               	movf	10,w
  2511  0006' 0089'              	movwf	??_isr+3
  2512  0007' 1283               	bcf	3,5	;RP0=0, select bank0
  2513  0008' 1303               	bcf	3,6	;RP1=0, select bank0
  2514  0009' 087F               	movf	btemp+1,w
  2515  000A' 008A'              	movwf	??_isr+4
  2516  000B' 120A' 118A' 2800'  	ljmp	_isr
  2517                           
  2518                           	psect	text15
  2519  0000'                    __ptext15:	
  2520 ;; *************** function ___lwmod *****************
  2521 ;; Defined at:
  2522 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  2523 ;; Parameters:    Size  Location     Type
  2524 ;;  divisor         2    0[COMMON] unsigned int 
  2525 ;;  dividend        2    2[COMMON] unsigned int 
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;  counter         1    5[COMMON] unsigned char 
  2528 ;; Return value:  Size  Location     Type
  2529 ;;                  2    0[COMMON] unsigned int 
  2530 ;; Registers used:
  2531 ;;		wreg, status,2, status,0
  2532 ;; Tracked objects:
  2533 ;;		On entry : 0/0
  2534 ;;		On exit  : 0/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2537 ;;      Params:         4       0       0       0       0
  2538 ;;      Locals:         1       0       0       0       0
  2539 ;;      Temps:          1       0       0       0       0
  2540 ;;      Totals:         6       0       0       0       0
  2541 ;;Total ram usage:        6 bytes
  2542 ;; Hardware stack levels used:    1
  2543 ;; This function calls:
  2544 ;;		Nothing
  2545 ;; This function is called by:
  2546 ;;		_isr
  2547 ;; This function uses a non-reentrant model
  2548 ;;
  2549                           
  2550                           
  2551                           ;psect for function ___lwmod
  2552  0000'                    ___lwmod:	
  2553                           
  2554                           ;incstack = 0
  2555                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2556  0000' 0800'              	movf	___lwmod@divisor,w
  2557  0001' 0401'              	iorwf	___lwmod@divisor+1,w
  2558  0002' 1903               	btfsc	3,2
  2559  0003' 2800'              	goto	i1l1315
  2560  0004' 0185'              	clrf	___lwmod@counter
  2561  0005' 0A85'              	incf	___lwmod@counter,f
  2562  0006'                    i1l1305:	
  2563  0006' 1B81'              	btfsc	___lwmod@divisor+1,7
  2564  0007' 2800'              	goto	i1l1307
  2565  0008' 3001               	movlw	1
  2566  0009'                    u68_25:	
  2567  0009' 1003               	clrc
  2568  000A' 0D80'              	rlf	___lwmod@divisor,f
  2569  000B' 0D81'              	rlf	___lwmod@divisor+1,f
  2570  000C' 3EFF               	addlw	-1
  2571  000D' 1D03               	skipz
  2572  000E' 2800'              	goto	u68_25
  2573  000F' 3001               	movlw	1
  2574  0010' 0084'              	movwf	??___lwmod
  2575  0011' 0804'              	movf	??___lwmod,w
  2576  0012' 0785'              	addwf	___lwmod@counter,f
  2577  0013' 2800'              	goto	i1l1305
  2578  0014'                    i1l1307:	
  2579  0014' 0801'              	movf	___lwmod@divisor+1,w
  2580  0015' 0203'              	subwf	___lwmod@dividend+1,w
  2581  0016' 1D03               	skipz
  2582  0017' 2800'              	goto	u70_25
  2583  0018' 0800'              	movf	___lwmod@divisor,w
  2584  0019' 0202'              	subwf	___lwmod@dividend,w
  2585  001A'                    u70_25:	
  2586  001A' 1C03               	skipc
  2587  001B' 2800'              	goto	i1l1311
  2588  001C' 0800'              	movf	___lwmod@divisor,w
  2589  001D' 0282'              	subwf	___lwmod@dividend,f
  2590  001E' 0801'              	movf	___lwmod@divisor+1,w
  2591  001F' 1C03               	skipc
  2592  0020' 0383'              	decf	___lwmod@dividend+1,f
  2593  0021' 0283'              	subwf	___lwmod@dividend+1,f
  2594  0022'                    i1l1311:	
  2595  0022' 3001               	movlw	1
  2596  0023'                    u71_25:	
  2597  0023' 1003               	clrc
  2598  0024' 0C81'              	rrf	___lwmod@divisor+1,f
  2599  0025' 0C80'              	rrf	___lwmod@divisor,f
  2600  0026' 3EFF               	addlw	-1
  2601  0027' 1D03               	skipz
  2602  0028' 2800'              	goto	u71_25
  2603  0029' 3001               	movlw	1
  2604  002A' 0285'              	subwf	___lwmod@counter,f
  2605  002B' 1D03               	btfss	3,2
  2606  002C' 2800'              	goto	i1l1307
  2607  002D'                    i1l1315:	
  2608  002D' 0803'              	movf	___lwmod@dividend+1,w
  2609  002E' 0081'              	movwf	?___lwmod+1
  2610  002F' 0802'              	movf	___lwmod@dividend,w
  2611  0030' 0080'              	movwf	?___lwmod
  2612  0031' 0008               	return
  2613  0032'                    __end_of___lwmod:	
  2614  007E                     btemp	set	126	;btemp
  2615  007E                     wtemp	set	126
  2616  007E                     wtemp0	set	126
  2617  0080                     wtemp1	set	128
  2618  0082                     wtemp2	set	130
  2619  0084                     wtemp3	set	132
  2620  0086                     wtemp4	set	134
  2621  0088                     wtemp5	set	136
  2622  007F                     wtemp6	set	127
  2623  007E                     ttemp	set	126
  2624  007E                     ttemp0	set	126
  2625  0081                     ttemp1	set	129
  2626  0084                     ttemp2	set	132
  2627  0087                     ttemp3	set	135
  2628  007F                     ttemp4	set	127
  2629  007E                     ltemp	set	126
  2630  007E                     ltemp0	set	126
  2631  0082                     ltemp1	set	130
  2632  0086                     ltemp2	set	134
  2633  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     21      61
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->___lwmod

Critical Paths under _main in BANK0

    _main->_getDistTrav
    _setupLCD->_lcdWriteControl
    _getDistTrav->_lcdWriteToDigitBCD
    _lcdWriteToDigitBCD->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl
    _Drive->_ser_putch

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    2187
                                             17 BANK0      4     4      0
                            _ADCMain
                              _Drive
                        _getDistTrav
                            _moveCCW
                             _moveCW
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      30
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      22
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _moveCW                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _moveCCW                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getDistTrav                                          2     2      0     920
                                             15 BANK0      2     2      0
                            ___awdiv
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
                          _ser_getch
                          _ser_putch
 ---------------------------------------------------------------------------------
 (2) _ser_getch                                            2     2      0       7
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _lcdWriteToDigitBCD                                  12    10      2     440
                                              3 BANK0     12    10      2
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (3) _lcdWriteData                                         3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _lcdSetCursor                                         1     1      0      45
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     406
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _Drive                                                8     0      8    1170
                                              1 BANK0      8     0      8
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCMain                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  5     5      0     265
                                              6 COMMON     5     5      0
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCMain
   _Drive
     _ser_putch
   _getDistTrav
     ___awdiv
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteToDigitBCD
       _lcdWriteData
     _ser_getch
     _ser_putch
   _moveCCW
   _moveCW
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)
   ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     15      3D       5       76.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       E       1      100.0%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      4B      12        0.0%
ABS                  0      0      4B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Sep 01 20:04:01 2016

                   __CFG_CP$OFF 0000                    ___awdiv@sign 0006                              fsr 0004  
                   Drive@speedH 0001                     Drive@speedL 0003                             l231 0007  
                           l187 007D                             l294 0000                             l288 0003  
                           _GIE 005F                             _RB0 0030                             _RB1 0031  
                           _RB2 0032                             _RC2 003A                             _RE0 0048  
                           _RE1 0049                             _RE2 004A                    __CFG_CPD$OFF 0000  
                           u615 002E                             u625 003A                             u635 0044  
                           u805 003E                             u815 0052                             u905 0105  
                           u825 006C                             u595 0022                             u915 0139  
                           u835 007B                             u925 0176                             u935 0189  
                           u865 00B3                             u875 00DA                             u957 00C2  
                           u967 0125                             u977 015E                             u987 000E  
                           u997 000E                             _isr 0000                             fsr0 0004  
                           indf 0000                    __CFG_FOSC$HS 0000                  ??_lcdWriteData 0000  
                  __CFG_LVP$OFF 0000                            l1223 0056                            l1215 0043  
                          l1207 001F                            l1151 0024                            l1209 002D  
                          l1161 0048                            l1219 004E                            l1163 0050  
                          l1155 0032                            l1173 0070                            l1157 003A  
                          l1149 000E                            l1413 00DC                            l1405 00B5  
                          l1191 000C                            l1167 005E                            l1415 00F1  
                          l1425 0107                            l1361 002C                            l1435 013B  
                          l1371 0040                            l1197 0017                            l1445 0178  
                          l1383 006E                            l1391 008B                            l1449 018B  
                          l1379 005D                            l1389 0075                            ?_isr 0000  
                          _PEIE 005E                            _RCIF 0065                            i1l99 003B  
                          _TMR0 0001                            _TRMT 04C1                    __CFG_WRT$OFF 0000  
                          _radH 000E                            _radL 0010                            _main 0000  
                          _loop 0008                            btemp 007E                            ltemp 007E  
                          start 0000*                           ttemp 007E                            wtemp 007E  
                         ??_isr 0006                           ?_main 0000                 __end_of___awdiv 005B  
                 __CFG_WDTE$OFF 0000                 ___awdiv@divisor 0000                 __end_of___lwmod 0032  
                 _totalDistTrav 001C                 ___awdiv@counter 0005                           _RCREG 001A  
                         _RCSTA 0018                           _SPBRG 0099                           _PORTC 0007  
                         _PORTD 0008                           _PORTE 0009                           u70_25 001A  
                         u71_25 0023                           _TRISB 0086                           _TRISC 0087  
                         _TRISD 0088                           _TRISE 0089                           _SSPIF 0063  
                         u68_25 0009                           _TXREG 0019                           _TXSTA 0098  
                         _Drive 0000      __end_of_lcdWriteToDigitBCD 0097                           _loop2 000A  
                __pbitbssCOMMON 0000                  __CFG_BOREN$OFF 0000                           pclath 000A  
                         ltemp0 007E                           ltemp1 0082                           ltemp2 0086  
                         ltemp3 0080                           ttemp0 007E                           ttemp1 0081  
                         ttemp2 0084                           ttemp3 0087                           ttemp4 007F  
                         status 0003                           wtemp0 007E                           wtemp1 0080  
                         wtemp2 0082                           wtemp3 0084                           wtemp4 0086  
                         wtemp5 0088                           wtemp6 007F                 __initialization 0000  
                  __end_of_main 01A1                       ??_ADCMain 0000        __size_of_lcdWriteControl 0014  
          __size_of_getDistTrav 005E                          ??_main 0011            __end_of_lcdSetCursor 0009  
                        ?_Drive 0001                          _ADCON1 009F                ___awdiv@dividend 0002  
                        i1l1311 0022                          i1l1305 0006                          i1l1307 0014  
                        i1l1315 002D                          i1l1341 002F                          i1l1345 0035  
                        i1l1337 0027                          _TMR0IE 005D                          _TMR0IF 005A  
                        _SSPCON 0014                          _SSPBUF 0013                  __CFG_PWRTE$OFF 0000  
                        _adcRAW 0002                       ??___awdiv 0004            __end_of_lcdWriteData 0013  
                     ??___lwmod 0004                          _moveCW 0000*               ___awdiv@quotient 0007  
                        _speedH 0012                          _speedL 0014                          _rxbyte 0022  
              __end_of_ser_init 000F                       ??_moveCCW 0000                __end_of_setupLCD 0029  
              __end_of_setupSPI 0018                          saved_w 007E                      _adcClosest 0000  
       __end_of__initialization 0016                   __end_of_Drive 0025                  __pcstackCOMMON 0000  
                  __pidataBANK0 0000                         ??_Drive 0009               ??_lcdWriteControl 0000  
                    __pbssBANK0 0000             lcdSetCursor@address 0003                      __pmaintext 0000  
                    __pintentry 0000           __size_of_lcdSetCursor 0009                         _ADCMain 0000* 
                       ?_moveCW 0000              __size_of_ser_getch 0009              __size_of_ser_putch 000C  
                       _SSPSTAT 0094           __size_of_lcdWriteData 0013                    _lcdSetCursor 0000  
            _lcdWriteToDigitBCD 0000                       ?_ser_init 0000                       ?_setupADC 0000  
                     ?_setupLCD 0000                       ?_setupSPI 0000                         ___awdiv 0000  
                       ___lwmod 0000             ?_lcdWriteToDigitBCD 0003                         _degrees 0004  
                       __ptext1 0000                         __ptext2 0000                         __ptext3 0000  
                       __ptext4 0000                         __ptext5 0000                         __ptext6 0000  
                       __ptext7 0000                         __ptext8 0000                         __ptext9 0000  
                  __size_of_isr 0046                         _lowByte 000C                         _moveCCW 0000* 
                       clrloop0 0001                    _lcdWriteData 0000            end_of_initialization 0016  
          ??_lcdWriteToDigitBCD 0005               __end_of_ser_getch 0009               __end_of_ser_putch 000C  
                    ??_ser_init 0000                      ??_setupADC 0000                      ??_setupLCD 0003  
                    ??_setupSPI 0000                   ??_getDistTrav 000F                      _time_count 001A  
                     Drive@radH 0005                       Drive@radL 0007                   ?_spi_transfer 0000  
               ser_getch@rxbyte 0001                 _lcdWriteControl 0000             __end_of_getDistTrav 005E  
           start_initialization 0000                     __end_of_isr 0046                  ??_spi_transfer 0000  
                   __pdataBANK0 0000                        ?_ADCMain 0000                        ??_moveCW 0000  
                  _negativeFlag 0001                     _FLAG_1000MS 0000                     __pbssCOMMON 0000  
                     ___latbits 0002                   __pcstackBANK0 0000         __end_of_lcdWriteControl 0014  
                      ?___awdiv 0000               __size_of_ser_init 000F                        ?___lwmod 0000  
                   _getDistTrav 0000               __size_of_setupLCD 0029               __size_of_setupSPI 0018  
                      ?_moveCCW 0000                  __size_of_Drive 0025                 main@controlByte 0014  
       lcdWriteControl@databyte 0002               interrupt_function 0000                      ser_putch@c 0000  
                     clear_ram0 0000                       _ser_getch 0000                       _ser_putch 0000  
                     _stepCount 0023            __end_of_spi_transfer 000F                spi_transfer@data 0002  
              spi_transfer@temp 0001                     _controlByte 0021                        _Distance 0000  
          lcdWriteData@databyte 0002     __size_of_lcdWriteToDigitBCD 0097                      ?_ser_getch 0000  
              ?_lcdWriteControl 0000                      ?_ser_putch 0000                __size_of___awdiv 005B  
              __size_of___lwmod 0032                     _currentStep 0000  lcdWriteToDigitBCD@TenThouDigit 000B  
                      __ptext10 0000                        __ptext11 0000                        __ptext12 0000  
                      __ptext13 0000                        __ptext14 0000                        __ptext15 0000  
                      _highByte 0024                        _distTrav 0006                   __size_of_main 01A1  
                      _ser_init 0000                      _PB6Counter 001E                        _setupADC 0000* 
                      _setupLCD 0000                        _setupSPI 0000                      _PB7Counter 001F  
   lcdWriteToDigitBCD@HunsDigit 0007                      _PB8Counter 0020     lcdWriteToDigitBCD@OnesDigit 000D  
   lcdWriteToDigitBCD@TensDigit 0005     lcdWriteToDigitBCD@ThouDigit 0009                        intlevel1 0000* 
              ___lwmod@dividend 0002                   ?_lcdSetCursor 0000                     ??_ser_getch 0000  
                   ??_ser_putch 0000           __size_of_spi_transfer 000F                    ?_getDistTrav 0000  
                    _OPTION_REG 0081                 ___lwmod@divisor 0000                 ___lwmod@counter 0005  
                 ?_lcdWriteData 0000          lcdWriteToDigitBCD@data 0003                    _spi_transfer 0000  
                ??_lcdSetCursor 0003                    _stepCountNeg 0018                     _stepClosest 0016  
