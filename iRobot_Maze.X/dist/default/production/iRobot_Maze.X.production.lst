

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Oct 09 15:00:26 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK3,global,class=CODE,delta=2
     8                           	psect	strings,global,class=STRING,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    24                           	psect	maintext,global,class=CODE,split=1,delta=2
    25                           	psect	text1,local,class=CODE,merge=1,delta=2
    26                           	psect	text2,local,class=CODE,merge=1,delta=2
    27                           	psect	text3,local,class=CODE,merge=1,delta=2
    28                           	psect	text4,local,class=CODE,merge=1,delta=2
    29                           	psect	text5,local,class=CODE,merge=1,delta=2
    30                           	psect	text6,local,class=CODE,merge=1,delta=2
    31                           	psect	text7,local,class=CODE,merge=1,delta=2
    32                           	psect	text8,local,class=CODE,merge=1,delta=2
    33                           	psect	text9,local,class=CODE,merge=1,delta=2
    34                           	psect	text10,local,class=CODE,merge=1,delta=2
    35                           	psect	text11,local,class=CODE,merge=1,delta=2
    36                           	psect	text12,local,class=CODE,merge=1,delta=2
    37                           	psect	text13,local,class=CODE,merge=1,delta=2
    38                           	psect	text14,local,class=CODE,merge=1,delta=2
    39                           	psect	text15,local,class=CODE,merge=1,delta=2
    40                           	psect	text16,local,class=CODE,merge=1,delta=2
    41                           	psect	text17,local,class=CODE,merge=1,delta=2
    42                           	psect	text18,local,class=CODE,merge=1,delta=2
    43                           	psect	text19,local,class=CODE,merge=1,delta=2
    44                           	psect	text20,local,class=CODE,merge=1,delta=2
    45                           	psect	text21,local,class=CODE,merge=1,delta=2
    46                           	psect	text22,local,class=CODE,merge=1,delta=2
    47                           	psect	text23,local,class=CODE,merge=1,delta=2
    48                           	psect	text24,local,class=CODE,merge=1,delta=2
    49                           	psect	text25,local,class=CODE,merge=1,delta=2
    50                           	psect	text26,local,class=CODE,merge=1,delta=2
    51                           	psect	text27,local,class=CODE,merge=1,delta=2
    52                           	psect	text28,local,class=CODE,merge=1,delta=2
    53                           	psect	text29,local,class=CODE,merge=1,delta=2
    54                           	psect	intentry,global,class=CODE,delta=2
    55                           	dabs	1,0x7E,2
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  010C                     	;# 
   111  010D                     	;# 
   112  010E                     	;# 
   113  010F                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116  0000                     	;# 
   117  0001                     	;# 
   118  0002                     	;# 
   119  0003                     	;# 
   120  0004                     	;# 
   121  0005                     	;# 
   122  0006                     	;# 
   123  0007                     	;# 
   124  0008                     	;# 
   125  0009                     	;# 
   126  000A                     	;# 
   127  000B                     	;# 
   128  000C                     	;# 
   129  000D                     	;# 
   130  000E                     	;# 
   131  000E                     	;# 
   132  000F                     	;# 
   133  0010                     	;# 
   134  0011                     	;# 
   135  0012                     	;# 
   136  0013                     	;# 
   137  0014                     	;# 
   138  0015                     	;# 
   139  0015                     	;# 
   140  0016                     	;# 
   141  0017                     	;# 
   142  0018                     	;# 
   143  0019                     	;# 
   144  001A                     	;# 
   145  001B                     	;# 
   146  001B                     	;# 
   147  001C                     	;# 
   148  001D                     	;# 
   149  001E                     	;# 
   150  001F                     	;# 
   151  0081                     	;# 
   152  0085                     	;# 
   153  0086                     	;# 
   154  0087                     	;# 
   155  0088                     	;# 
   156  0089                     	;# 
   157  008C                     	;# 
   158  008D                     	;# 
   159  008E                     	;# 
   160  0091                     	;# 
   161  0092                     	;# 
   162  0093                     	;# 
   163  0094                     	;# 
   164  0098                     	;# 
   165  0099                     	;# 
   166  009C                     	;# 
   167  009D                     	;# 
   168  009E                     	;# 
   169  009F                     	;# 
   170  010C                     	;# 
   171  010D                     	;# 
   172  010E                     	;# 
   173  010F                     	;# 
   174  018C                     	;# 
   175  018D                     	;# 
   176  0000                     	;# 
   177  0001                     	;# 
   178  0002                     	;# 
   179  0003                     	;# 
   180  0004                     	;# 
   181  0005                     	;# 
   182  0006                     	;# 
   183  0007                     	;# 
   184  0008                     	;# 
   185  0009                     	;# 
   186  000A                     	;# 
   187  000B                     	;# 
   188  000C                     	;# 
   189  000D                     	;# 
   190  000E                     	;# 
   191  000E                     	;# 
   192  000F                     	;# 
   193  0010                     	;# 
   194  0011                     	;# 
   195  0012                     	;# 
   196  0013                     	;# 
   197  0014                     	;# 
   198  0015                     	;# 
   199  0015                     	;# 
   200  0016                     	;# 
   201  0017                     	;# 
   202  0018                     	;# 
   203  0019                     	;# 
   204  001A                     	;# 
   205  001B                     	;# 
   206  001B                     	;# 
   207  001C                     	;# 
   208  001D                     	;# 
   209  001E                     	;# 
   210  001F                     	;# 
   211  0081                     	;# 
   212  0085                     	;# 
   213  0086                     	;# 
   214  0087                     	;# 
   215  0088                     	;# 
   216  0089                     	;# 
   217  008C                     	;# 
   218  008D                     	;# 
   219  008E                     	;# 
   220  0091                     	;# 
   221  0092                     	;# 
   222  0093                     	;# 
   223  0094                     	;# 
   224  0098                     	;# 
   225  0099                     	;# 
   226  009C                     	;# 
   227  009D                     	;# 
   228  009E                     	;# 
   229  009F                     	;# 
   230  010C                     	;# 
   231  010D                     	;# 
   232  010E                     	;# 
   233  010F                     	;# 
   234  018C                     	;# 
   235  018D                     	;# 
   236  0000                     	;# 
   237  0001                     	;# 
   238  0002                     	;# 
   239  0003                     	;# 
   240  0004                     	;# 
   241  0005                     	;# 
   242  0006                     	;# 
   243  0007                     	;# 
   244  0008                     	;# 
   245  0009                     	;# 
   246  000A                     	;# 
   247  000B                     	;# 
   248  000C                     	;# 
   249  000D                     	;# 
   250  000E                     	;# 
   251  000E                     	;# 
   252  000F                     	;# 
   253  0010                     	;# 
   254  0011                     	;# 
   255  0012                     	;# 
   256  0013                     	;# 
   257  0014                     	;# 
   258  0015                     	;# 
   259  0015                     	;# 
   260  0016                     	;# 
   261  0017                     	;# 
   262  0018                     	;# 
   263  0019                     	;# 
   264  001A                     	;# 
   265  001B                     	;# 
   266  001B                     	;# 
   267  001C                     	;# 
   268  001D                     	;# 
   269  001E                     	;# 
   270  001F                     	;# 
   271  0081                     	;# 
   272  0085                     	;# 
   273  0086                     	;# 
   274  0087                     	;# 
   275  0088                     	;# 
   276  0089                     	;# 
   277  008C                     	;# 
   278  008D                     	;# 
   279  008E                     	;# 
   280  0091                     	;# 
   281  0092                     	;# 
   282  0093                     	;# 
   283  0094                     	;# 
   284  0098                     	;# 
   285  0099                     	;# 
   286  009C                     	;# 
   287  009D                     	;# 
   288  009E                     	;# 
   289  009F                     	;# 
   290  010C                     	;# 
   291  010D                     	;# 
   292  010E                     	;# 
   293  010F                     	;# 
   294  018C                     	;# 
   295  018D                     	;# 
   296  0000                     	;# 
   297  0001                     	;# 
   298  0002                     	;# 
   299  0003                     	;# 
   300  0004                     	;# 
   301  0005                     	;# 
   302  0006                     	;# 
   303  0007                     	;# 
   304  0008                     	;# 
   305  0009                     	;# 
   306  000A                     	;# 
   307  000B                     	;# 
   308  000C                     	;# 
   309  000D                     	;# 
   310  000E                     	;# 
   311  000E                     	;# 
   312  000F                     	;# 
   313  0010                     	;# 
   314  0011                     	;# 
   315  0012                     	;# 
   316  0013                     	;# 
   317  0014                     	;# 
   318  0015                     	;# 
   319  0015                     	;# 
   320  0016                     	;# 
   321  0017                     	;# 
   322  0018                     	;# 
   323  0019                     	;# 
   324  001A                     	;# 
   325  001B                     	;# 
   326  001B                     	;# 
   327  001C                     	;# 
   328  001D                     	;# 
   329  001E                     	;# 
   330  001F                     	;# 
   331  0081                     	;# 
   332  0085                     	;# 
   333  0086                     	;# 
   334  0087                     	;# 
   335  0088                     	;# 
   336  0089                     	;# 
   337  008C                     	;# 
   338  008D                     	;# 
   339  008E                     	;# 
   340  0091                     	;# 
   341  0092                     	;# 
   342  0093                     	;# 
   343  0094                     	;# 
   344  0098                     	;# 
   345  0099                     	;# 
   346  009C                     	;# 
   347  009D                     	;# 
   348  009E                     	;# 
   349  009F                     	;# 
   350  010C                     	;# 
   351  010D                     	;# 
   352  010E                     	;# 
   353  010F                     	;# 
   354  018C                     	;# 
   355  018D                     	;# 
   356  0000                     	;# 
   357  0001                     	;# 
   358  0002                     	;# 
   359  0003                     	;# 
   360  0004                     	;# 
   361  0005                     	;# 
   362  0006                     	;# 
   363  0007                     	;# 
   364  0008                     	;# 
   365  0009                     	;# 
   366  000A                     	;# 
   367  000B                     	;# 
   368  000C                     	;# 
   369  000D                     	;# 
   370  000E                     	;# 
   371  000E                     	;# 
   372  000F                     	;# 
   373  0010                     	;# 
   374  0011                     	;# 
   375  0012                     	;# 
   376  0013                     	;# 
   377  0014                     	;# 
   378  0015                     	;# 
   379  0015                     	;# 
   380  0016                     	;# 
   381  0017                     	;# 
   382  0018                     	;# 
   383  0019                     	;# 
   384  001A                     	;# 
   385  001B                     	;# 
   386  001B                     	;# 
   387  001C                     	;# 
   388  001D                     	;# 
   389  001E                     	;# 
   390  001F                     	;# 
   391  0081                     	;# 
   392  0085                     	;# 
   393  0086                     	;# 
   394  0087                     	;# 
   395  0088                     	;# 
   396  0089                     	;# 
   397  008C                     	;# 
   398  008D                     	;# 
   399  008E                     	;# 
   400  0091                     	;# 
   401  0092                     	;# 
   402  0093                     	;# 
   403  0094                     	;# 
   404  0098                     	;# 
   405  0099                     	;# 
   406  009C                     	;# 
   407  009D                     	;# 
   408  009E                     	;# 
   409  009F                     	;# 
   410  010C                     	;# 
   411  010D                     	;# 
   412  010E                     	;# 
   413  010F                     	;# 
   414  018C                     	;# 
   415  018D                     	;# 
   416                           
   417                           	psect	idataBANK0
   418  07F9                     __pidataBANK0:	
   419                           
   420                           ;initializer for _orientation
   421  07F9  3403               	retlw	3
   422                           
   423                           ;initializer for _pathCountShortest
   424  07FA  3414               	retlw	20
   425                           
   426                           ;initializer for _x
   427  07FB  3401               	retlw	1
   428                           
   429                           ;initializer for _CURRENT_SPEED_L
   430  07FC  34FA               	retlw	250
   431  07FD  3400               	retlw	0
   432                           
   433                           ;initializer for _CURRENT_SPEED_R
   434  07FE  34FA               	retlw	250
   435  07FF  3400               	retlw	0
   436                           
   437                           	psect	idataBANK1
   438  1570                     __pidataBANK1:	
   439                           
   440                           ;initializer for _mazeGridDefault
   441  1570  340C               	retlw	12
   442  1571  3407               	retlw	7
   443  1572  340E               	retlw	14
   444  1573  340D               	retlw	13
   445  1574  3406               	retlw	6
   446  1575  3409               	retlw	9
   447  1576  3405               	retlw	5
   448  1577  3400               	retlw	0
   449  1578  3405               	retlw	5
   450  1579  3402               	retlw	2
   451  157A  340C               	retlw	12
   452  157B  3406               	retlw	6
   453  157C  340A               	retlw	10
   454  157D  340E               	retlw	14
   455  157E  340A               	retlw	10
   456  157F  340B               	retlw	11
   457  1580  3409               	retlw	9
   458  1581  3401               	retlw	1
   459  1582  3401               	retlw	1
   460  1583  3403               	retlw	3
   461                           
   462                           	psect	idataBANK2
   463  16FD                     __pidataBANK2:	
   464                           
   465                           ;initializer for _gridWalls
   466  16FD  3400               	retlw	0
   467  16FE  3400               	retlw	0
   468  16FF  3400               	retlw	0
   469  1700  3400               	retlw	0
   470  1701  3400               	retlw	0
   471  1702  3400               	retlw	0
   472  1703  3400               	retlw	0
   473  1704  3400               	retlw	0
   474  1705  3401               	retlw	1
   475  1706  3401               	retlw	1
   476  1707  3401               	retlw	1
   477  1708  3401               	retlw	1
   478  1709  3401               	retlw	1
   479  170A  3401               	retlw	1
   480  170B  3401               	retlw	1
   481  170C  3401               	retlw	1
   482  170D  3400               	retlw	0
   483  170E  3400               	retlw	0
   484  170F  3400               	retlw	0
   485  1710  3400               	retlw	0
   486  1711  3401               	retlw	1
   487  1712  3401               	retlw	1
   488  1713  3401               	retlw	1
   489  1714  3401               	retlw	1
   490  1715  3400               	retlw	0
   491  1716  3400               	retlw	0
   492  1717  3400               	retlw	0
   493  1718  3400               	retlw	0
   494  1719  3401               	retlw	1
   495  171A  3401               	retlw	1
   496  171B  3401               	retlw	1
   497  171C  3401               	retlw	1
   498  171D  3400               	retlw	0
   499  171E  3400               	retlw	0
   500  171F  3401               	retlw	1
   501  1720  3401               	retlw	1
   502  1721  3400               	retlw	0
   503  1722  3400               	retlw	0
   504  1723  3401               	retlw	1
   505  1724  3401               	retlw	1
   506  1725  3400               	retlw	0
   507  1726  3400               	retlw	0
   508  1727  3401               	retlw	1
   509  1728  3401               	retlw	1
   510  1729  3400               	retlw	0
   511  172A  3400               	retlw	0
   512  172B  3401               	retlw	1
   513  172C  3401               	retlw	1
   514  172D  3400               	retlw	0
   515  172E  3401               	retlw	1
   516  172F  3400               	retlw	0
   517  1730  3401               	retlw	1
   518  1731  3400               	retlw	0
   519  1732  3401               	retlw	1
   520  1733  3400               	retlw	0
   521  1734  3401               	retlw	1
   522  1735  3400               	retlw	0
   523  1736  3401               	retlw	1
   524  1737  3400               	retlw	0
   525  1738  3401               	retlw	1
   526  1739  3400               	retlw	0
   527  173A  3401               	retlw	1
   528  173B  3400               	retlw	0
   529  173C  3401               	retlw	1
   530                           
   531                           	psect	idataBANK3
   532  1659                     __pidataBANK3:	
   533                           
   534                           ;initializer for PathTo@F1222
   535  1659  340C               	retlw	12
   536  165A  3407               	retlw	7
   537  165B  340E               	retlw	14
   538  165C  340D               	retlw	13
   539  165D  3406               	retlw	6
   540  165E  3409               	retlw	9
   541  165F  3405               	retlw	5
   542  1660  3400               	retlw	0
   543  1661  3405               	retlw	5
   544  1662  3402               	retlw	2
   545  1663  340C               	retlw	12
   546  1664  3406               	retlw	6
   547  1665  340A               	retlw	10
   548  1666  340E               	retlw	14
   549  1667  340A               	retlw	10
   550  1668  340B               	retlw	11
   551  1669  3409               	retlw	9
   552  166A  3401               	retlw	1
   553  166B  3401               	retlw	1
   554  166C  3403               	retlw	3
   555                           
   556                           ;initializer for _mazeGrid
   557  166D  340C               	retlw	12
   558  166E  3407               	retlw	7
   559  166F  340E               	retlw	14
   560  1670  340D               	retlw	13
   561  1671  3406               	retlw	6
   562  1672  3409               	retlw	9
   563  1673  3405               	retlw	5
   564  1674  3400               	retlw	0
   565  1675  3405               	retlw	5
   566  1676  3402               	retlw	2
   567  1677  340C               	retlw	12
   568  1678  3406               	retlw	6
   569  1679  340A               	retlw	10
   570  167A  340E               	retlw	14
   571  167B  340A               	retlw	10
   572  167C  340B               	retlw	11
   573  167D  3409               	retlw	9
   574  167E  3401               	retlw	1
   575  167F  3401               	retlw	1
   576  1680  3403               	retlw	3
   577  001F                     _ADCON0	set	31
   578  0005                     _PORTA	set	5
   579  0006                     _PORTB	set	6
   580  0007                     _PORTC	set	7
   581  0008                     _PORTD	set	8
   582  0009                     _PORTE	set	9
   583  001A                     _RCREG	set	26
   584  0018                     _RCSTA	set	24
   585  0013                     _SSPBUF	set	19
   586  0014                     _SSPCON	set	20
   587  0001                     _TMR0	set	1
   588  0019                     _TXREG	set	25
   589  001E                     _ADRESH	set	30
   590  005F                     _GIE	set	95
   591  00FA                     _GO	set	250
   592  005E                     _PEIE	set	94
   593  0030                     _RB0	set	48
   594  0031                     _RB1	set	49
   595  0032                     _RB2	set	50
   596  0033                     _RB3	set	51
   597  003A                     _RC2	set	58
   598  0065                     _RCIF	set	101
   599  0048                     _RE0	set	72
   600  0049                     _RE1	set	73
   601  004A                     _RE2	set	74
   602  0063                     _SSPIF	set	99
   603  005D                     _TMR0IE	set	93
   604  005A                     _TMR0IF	set	90
   605  009F                     _ADCON1	set	159
   606  009E                     _ADRESL	set	158
   607  0081                     _OPTION_REG	set	129
   608  0099                     _SPBRG	set	153
   609  0094                     _SSPSTAT	set	148
   610  0085                     _TRISA	set	133
   611  0086                     _TRISB	set	134
   612  0087                     _TRISC	set	135
   613  0088                     _TRISD	set	136
   614  0089                     _TRISE	set	137
   615  0098                     _TXSTA	set	152
   616  04C1                     _TRMT	set	1217
   617                           
   618                           	psect	strings
   619  1000                     __pstrings:	
   620  1000                     stringtab:	
   621  1000                     __stringtab:	
   622  1000                     stringcode:	
   623                           ;	String table - string pointers are 1 byte each
   624                           
   625  1000                     stringdir:	
   626  1000  3010               	movlw	high stringdir
   627  1001  008A               	movwf	10
   628  1002  0804               	movf	4,w
   629  1003  0A84               	incf	4,f
   630  1004  0782               	addwf	2,f
   631  1005                     __stringbase:	
   632  1005  3400               	retlw	0
   633  1006                     __end_of__stringtab:	
   634  1006                     STR_1:	
   635  1006  3457               	retlw	87	;'W'
   636  1007  346F               	retlw	111	;'o'
   637  1008  3472               	retlw	114	;'r'
   638  1009  346B               	retlw	107	;'k'
   639  100A  3469               	retlw	105	;'i'
   640  100B  346E               	retlw	110	;'n'
   641  100C  3467               	retlw	103	;'g'
   642  100D  342E               	retlw	46	;'.'
   643  100E  342E               	retlw	46	;'.'
   644  100F  342E               	retlw	46	;'.'
   645  1010  3400               	retlw	0
   646                           
   647                           ; #config settings
   648  0000                     
   649                           	psect	cinit
   650  0015                     start_initialization:	
   651  0015                     __initialization:	
   652                           
   653                           ; Initialize objects allocated to BANK3
   654  0015  1783               	bsf	3,7	;select IRP bank2
   655  0016  30B8               	movlw	low (__pdataBANK3+40)
   656  0017  00FD               	movwf	btemp+-1
   657  0018  3016               	movlw	high __pidataBANK3
   658  0019  00FE               	movwf	btemp
   659  001A  3059               	movlw	low __pidataBANK3
   660  001B  00FF               	movwf	btemp+1
   661  001C  3090               	movlw	low __pdataBANK3
   662  001D  0084               	movwf	4
   663  001E  160A  118A  2529  120A  118A  	fcall	init_ram0
   664                           
   665                           ; Initialize objects allocated to BANK2
   666  0023  3050               	movlw	low (__pdataBANK2+64)
   667  0024  00FD               	movwf	btemp+-1
   668  0025  3016               	movlw	high __pidataBANK2
   669  0026  00FE               	movwf	btemp
   670  0027  30FD               	movlw	low __pidataBANK2
   671  0028  00FF               	movwf	btemp+1
   672  0029  3010               	movlw	low __pdataBANK2
   673  002A  0084               	movwf	4
   674  002B  160A  118A  2529  120A  118A  	fcall	init_ram0
   675                           
   676                           ; Initialize objects allocated to BANK1
   677  0030  1383               	bcf	3,7	;select IRP bank0
   678  0031  30EA               	movlw	low (__pdataBANK1+20)
   679  0032  00FD               	movwf	btemp+-1
   680  0033  3015               	movlw	high __pidataBANK1
   681  0034  00FE               	movwf	btemp
   682  0035  3070               	movlw	low __pidataBANK1
   683  0036  00FF               	movwf	btemp+1
   684  0037  30D6               	movlw	low __pdataBANK1
   685  0038  0084               	movwf	4
   686  0039  160A  118A  2529  120A  118A  	fcall	init_ram0
   687                           
   688                           ; Initialize objects allocated to BANK0
   689  003E  306E               	movlw	low (__pdataBANK0+7)
   690  003F  00FD               	movwf	btemp+-1
   691  0040  3007               	movlw	high __pidataBANK0
   692  0041  00FE               	movwf	btemp
   693  0042  30F9               	movlw	low __pidataBANK0
   694  0043  00FF               	movwf	btemp+1
   695  0044  3067               	movlw	low __pdataBANK0
   696  0045  0084               	movwf	4
   697  0046  160A  118A  2529  120A  118A  	fcall	init_ram0
   698                           
   699                           ; Clear objects allocated to BANK3
   700  004B  1783               	bsf	3,7	;select IRP bank2
   701  004C  30B8               	movlw	low __pbssBANK3
   702  004D  0084               	movwf	4
   703  004E  30D8               	movlw	low (__pbssBANK3+32)
   704  004F  160A  118A  24EC  120A  118A  	fcall	clear_ram0
   705                           
   706                           ; Clear objects allocated to BANK1
   707  0054  1383               	bcf	3,7	;select IRP bank0
   708  0055  30A0               	movlw	low __pbssBANK1
   709  0056  0084               	movwf	4
   710  0057  30D6               	movlw	low (__pbssBANK1+54)
   711  0058  160A  118A  24EC  120A  118A  	fcall	clear_ram0
   712                           
   713                           ; Clear objects allocated to BANK0
   714  005D  304D               	movlw	low __pbssBANK0
   715  005E  0084               	movwf	4
   716  005F  3067               	movlw	low (__pbssBANK0+26)
   717  0060  160A  118A  24EC   	fcall	clear_ram0
   718                           
   719                           ; Clear objects allocated to COMMON
   720  0063  01F7               	clrf	__pbssCOMMON& (0+127)
   721  0064  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   722  0065  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   723                           
   724                           ; Clear objects allocated to BITCOMMON
   725  0066  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   726  0067  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   727  0068                     end_of_initialization:	
   728                           ;End of C runtime variable initialization code
   729                           
   730  0068                     __end_of__initialization:	
   731  0068  0183               	clrf	3
   732  0069  120A  118A  286C   	ljmp	_main	;jump to C main() function
   733                           
   734                           	psect	bitbssCOMMON
   735  0380                     __pbitbssCOMMON:	
   736  0380                     _IR_Wall:	
   737  0380                     	ds	1
   738  0381                     _down:	
   739  0381                     	ds	1
   740  0382                     _left:	
   741  0382                     	ds	1
   742  0383                     _leftWall:	
   743  0383                     	ds	1
   744  0384                     _reset_flag:	
   745  0384                     	ds	1
   746  0385                     _right:	
   747  0385                     	ds	1
   748  0386                     _routing:	
   749  0386                     	ds	1
   750  0387                     _targets_found:	
   751  0387                     	ds	1
   752  0388                     _up:	
   753  0388                     	ds	1
   754                           
   755                           	psect	bssCOMMON
   756  0077                     __pbssCOMMON:	
   757  0077                     _angle:	
   758  0077                     	ds	2
   759  0079                     _highByte:	
   760  0079                     	ds	1
   761                           
   762                           	psect	bssBANK0
   763  004D                     __pbssBANK0:	
   764  004D                     _ADC_ADJUST:	
   765  004D                     	ds	2
   766  004F                     _adcRAW:	
   767  004F                     	ds	2
   768  0051                     _distance:	
   769  0051                     	ds	2
   770  0053                     _LeftSpeedH:	
   771  0053                     	ds	1
   772  0054                     _LeftSpeedL:	
   773  0054                     	ds	1
   774  0055                     _PB7Counter:	
   775  0055                     	ds	1
   776  0056                     _PB8Counter:	
   777  0056                     	ds	1
   778  0057                     _RightSpeedH:	
   779  0057                     	ds	1
   780  0058                     _RightSpeedL:	
   781  0058                     	ds	1
   782  0059                     _c:	
   783  0059                     	ds	1
   784  005A                     _intersection_orientation:	
   785  005A                     	ds	1
   786  005B                     _lowByte:	
   787  005B                     	ds	1
   788  005C                     _orientation_path:	
   789  005C                     	ds	1
   790  005D                     _pathCount:	
   791  005D                     	ds	1
   792  005E                     _r:	
   793  005E                     	ds	1
   794  005F                     _targets:	
   795  005F                     	ds	1
   796  0060                     _x_goto:	
   797  0060                     	ds	1
   798  0061                     _x_int:	
   799  0061                     	ds	1
   800  0062                     _x_path:	
   801  0062                     	ds	1
   802  0063                     _y:	
   803  0063                     	ds	1
   804  0064                     _y_goto:	
   805  0064                     	ds	1
   806  0065                     _y_int:	
   807  0065                     	ds	1
   808  0066                     _y_path:	
   809  0066                     	ds	1
   810                           
   811                           	psect	dataBANK0
   812  0067                     __pdataBANK0:	
   813  0067                     _orientation:	
   814  0067                     	ds	1
   815  0068                     _pathCountShortest:	
   816  0068                     	ds	1
   817  0069                     _x:	
   818  0069                     	ds	1
   819  006A                     _CURRENT_SPEED_L:	
   820  006A                     	ds	2
   821  006C                     _CURRENT_SPEED_R:	
   822  006C                     	ds	2
   823                           
   824                           	psect	bssBANK1
   825  00A0                     __pbssBANK1:	
   826  00A0                     _pathShortest:	
   827  00A0                     	ds	32
   828  00C0                     _ADJUSTED_SPEED_L:	
   829  00C0                     	ds	2
   830  00C2                     _ADJUSTED_SPEED_R:	
   831  00C2                     	ds	2
   832  00C4                     _Distance:	
   833  00C4                     	ds	2
   834  00C6                     _VelocityLeft:	
   835  00C6                     	ds	2
   836  00C8                     _VelocityRight:	
   837  00C8                     	ds	2
   838  00CA                     _loop:	
   839  00CA                     	ds	2
   840  00CC                     _time_count:	
   841  00CC                     	ds	2
   842  00CE                     _timerLoop:	
   843  00CE                     	ds	2
   844  00D0                     _radH:	
   845  00D0                     	ds	1
   846  00D1                     _radL:	
   847  00D1                     	ds	1
   848  00D2                     _speedH:	
   849  00D2                     	ds	1
   850  00D3                     _speedL:	
   851  00D3                     	ds	1
   852  00D4                     _x_target:	
   853  00D4                     	ds	1
   854  00D5                     _y_target:	
   855  00D5                     	ds	1
   856                           
   857                           	psect	dataBANK1
   858  00D6                     __pdataBANK1:	
   859  00D6                     _mazeGridDefault:	
   860  00D6                     	ds	20
   861                           
   862                           	psect	bssBANK3
   863  01B8                     __pbssBANK3:	
   864  01B8                     _path:	
   865  01B8                     	ds	32
   866                           
   867                           	psect	dataBANK3
   868  0190                     __pdataBANK3:	
   869  0190                     PathTo@F1222:	
   870  0190                     	ds	20
   871  01A4                     _mazeGrid:	
   872  01A4                     	ds	20
   873                           
   874                           	psect	dataBANK2
   875  0110                     __pdataBANK2:	
   876  0110                     _gridWalls:	
   877  0110                     	ds	64
   878                           
   879                           	psect	inittext
   880  1525                     init_fetch0:	
   881                           ;	Called with low address in FSR and high address in W
   882                           
   883  1525  087E               	movf	126,w
   884  1526  008A               	movwf	10
   885  1527  087F               	movf	127,w
   886  1528  0082               	movwf	2
   887  1529                     init_ram0:	
   888                           ;Called with:
   889                           ;	high address of idata address in btemp 
   890                           ;	low address of idata address in btemp+1 
   891                           ;	low address of data in FSR
   892                           ;	high address + 1 of data in btemp-1
   893                           
   894  1529  2525  160A  118A   	fcall	init_fetch0
   895  152C  0080               	movwf	0
   896  152D  0A84               	incf	4,f
   897  152E  0804               	movf	4,w
   898  152F  067D               	xorwf	125,w
   899  1530  1903               	btfsc	3,2
   900  1531  3400               	retlw	0
   901  1532  0AFF               	incf	127,f
   902  1533  1903               	btfsc	3,2
   903  1534  0AFE               	incf	126,f
   904  1535  2D29               	goto	init_ram0
   905                           
   906                           	psect	clrtext
   907  14EC                     clear_ram0:	
   908                           ;	Called with FSR containing the base address, and
   909                           ;	W with the last address+1
   910                           
   911  14EC  0064               	clrwdt	;clear the watchdog before getting into this loop
   912  14ED                     clrloop0:	
   913  14ED  0180               	clrf	0	;clear RAM location pointed to by FSR
   914  14EE  0A84               	incf	4,f	;increment pointer
   915  14EF  0604               	xorwf	4,w	;XOR with final address
   916  14F0  1903               	btfsc	3,2	;have we reached the end yet?
   917  14F1  3400               	retlw	0	;all done for this memory range, return
   918  14F2  0604               	xorwf	4,w	;XOR again to restore value
   919  14F3  2CED               	goto	clrloop0	;do the next byte
   920                           
   921                           	psect	cstackBANK1
   922  00EA                     __pcstackBANK1:	
   923  00EA                     main@controlByte:	
   924                           
   925                           ; 1 bytes @ 0x0
   926  00EA                     	ds	1
   927  00EB                     main@first:	
   928                           
   929                           ; 1 bytes @ 0x1
   930  00EB                     	ds	1
   931  00EC                     main@second:	
   932                           
   933                           ; 1 bytes @ 0x2
   934  00EC                     	ds	1
   935  00ED                     main@third:	
   936                           
   937                           ; 1 bytes @ 0x3
   938  00ED                     	ds	1
   939  00EE                     main@fourth:	
   940                           
   941                           ; 1 bytes @ 0x4
   942  00EE                     	ds	1
   943  00EF                     main@fifth:	
   944                           
   945                           ; 1 bytes @ 0x5
   946  00EF                     	ds	1
   947                           
   948                           	psect	cstackCOMMON
   949  0072                     __pcstackCOMMON:	
   950  0072                     ?_ADCMain:	
   951  0072                     ?_lcdSetCursor:	
   952                           ; 1 bytes @ 0x0
   953                           
   954  0072                     ?_lcdWriteString:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  0072                     ?_ser_putch:	
   958                           ; 1 bytes @ 0x0
   959                           
   960  0072                     ?_ser_init:	
   961                           ; 1 bytes @ 0x0
   962                           
   963  0072                     ?_setupSPI:	
   964                           ; 1 bytes @ 0x0
   965                           
   966  0072                     ?_setupLCD:	
   967                           ; 1 bytes @ 0x0
   968                           
   969  0072                     ?_setupADC:	
   970                           ; 1 bytes @ 0x0
   971                           
   972  0072                     ?_spi_transfer:	
   973                           ; 1 bytes @ 0x0
   974                           
   975  0072                     ?_wallFollow:	
   976                           ; 1 bytes @ 0x0
   977                           
   978  0072                     ?_Drive1m:	
   979                           ; 1 bytes @ 0x0
   980                           
   981  0072                     ?_Turn90:	
   982                           ; 1 bytes @ 0x0
   983                           
   984  0072                     ?_TravelPath:	
   985                           ; 1 bytes @ 0x0
   986                           
   987  0072                     ?_re_route:	
   988                           ; 1 bytes @ 0x0
   989                           
   990  0072                     ?_isr:	
   991                           ; 1 bytes @ 0x0
   992                           
   993  0072                     ??_isr:	
   994                           ; 1 bytes @ 0x0
   995                           
   996  0072                     ?_main:	
   997                           ; 1 bytes @ 0x0
   998                           
   999  0072                     ?_lcdWriteControl:	
  1000                           ; 1 bytes @ 0x0
  1001                           
  1002  0072                     ?_lcdWriteData:	
  1003                           ; 1 bytes @ 0x0
  1004                           
  1005  0072                     ?_ser_getch:	
  1006                           ; 1 bytes @ 0x0
  1007                           
  1008  0072                     ?_getADC:	
  1009                           ; 1 bytes @ 0x0
  1010                           
  1011                           
  1012                           ; 2 bytes @ 0x0
  1013  0072                     	ds	5
  1014                           
  1015                           	psect	cstackBANK0
  1016  0020                     __pcstackBANK0:	
  1017  0020                     ??_ser_putch:	
  1018  0020                     ??_ser_init:	
  1019                           ; 1 bytes @ 0x0
  1020                           
  1021  0020                     ??_setupSPI:	
  1022                           ; 1 bytes @ 0x0
  1023                           
  1024  0020                     ??_setupADC:	
  1025                           ; 1 bytes @ 0x0
  1026                           
  1027  0020                     ??_spi_transfer:	
  1028                           ; 1 bytes @ 0x0
  1029                           
  1030  0020                     ??_getADC:	
  1031                           ; 1 bytes @ 0x0
  1032                           
  1033  0020                     ??_lcdWriteControl:	
  1034                           ; 1 bytes @ 0x0
  1035                           
  1036  0020                     ??_lcdWriteData:	
  1037                           ; 1 bytes @ 0x0
  1038                           
  1039  0020                     ??_ser_getch:	
  1040                           ; 1 bytes @ 0x0
  1041                           
  1042  0020                     ?___bmul:	
  1043                           ; 1 bytes @ 0x0
  1044                           
  1045  0020                     ?___wmul:	
  1046                           ; 1 bytes @ 0x0
  1047                           
  1048  0020                     ?___lwdiv:	
  1049                           ; 2 bytes @ 0x0
  1050                           
  1051  0020                     ser_putch@c:	
  1052                           ; 2 bytes @ 0x0
  1053                           
  1054  0020                     ___bmul@multiplicand:	
  1055                           ; 1 bytes @ 0x0
  1056                           
  1057  0020                     ___wmul@multiplier:	
  1058                           ; 1 bytes @ 0x0
  1059                           
  1060  0020                     ___lwdiv@divisor:	
  1061                           ; 2 bytes @ 0x0
  1062                           
  1063                           
  1064                           ; 2 bytes @ 0x0
  1065  0020                     	ds	1
  1066  0021                     ?_DriveDirect:	
  1067  0021                     ?_Drive:	
  1068                           ; 1 bytes @ 0x1
  1069                           
  1070  0021                     ??___bmul:	
  1071                           ; 1 bytes @ 0x1
  1072                           
  1073  0021                     ser_getch@rxbyte:	
  1074                           ; 1 bytes @ 0x1
  1075                           
  1076  0021                     Drive@speedL:	
  1077                           ; 1 bytes @ 0x1
  1078                           
  1079  0021                     spi_transfer@temp:	
  1080                           ; 1 bytes @ 0x1
  1081                           
  1082  0021                     DriveDirect@VelocityRight:	
  1083                           ; 1 bytes @ 0x1
  1084                           
  1085                           
  1086                           ; 2 bytes @ 0x1
  1087  0021                     	ds	1
  1088  0022                     ?_getSensorData:	
  1089  0022                     lcdWriteControl@databyte:	
  1090                           ; 2 bytes @ 0x2
  1091                           
  1092  0022                     lcdWriteData@databyte:	
  1093                           ; 1 bytes @ 0x2
  1094                           
  1095  0022                     Drive@radH:	
  1096                           ; 1 bytes @ 0x2
  1097                           
  1098  0022                     getSensorData@bytes:	
  1099                           ; 1 bytes @ 0x2
  1100                           
  1101  0022                     spi_transfer@data:	
  1102                           ; 1 bytes @ 0x2
  1103                           
  1104  0022                     ___bmul@product:	
  1105                           ; 1 bytes @ 0x2
  1106                           
  1107  0022                     ___wmul@multiplicand:	
  1108                           ; 1 bytes @ 0x2
  1109                           
  1110  0022                     ___lwdiv@dividend:	
  1111                           ; 2 bytes @ 0x2
  1112                           
  1113                           
  1114                           ; 2 bytes @ 0x2
  1115  0022                     	ds	1
  1116  0023                     ?_stepCCW:	
  1117  0023                     ?_stepCW:	
  1118                           ; 1 bytes @ 0x3
  1119                           
  1120  0023                     ??_lcdSetCursor:	
  1121                           ; 1 bytes @ 0x3
  1122                           
  1123  0023                     ??_lcdWriteString:	
  1124                           ; 1 bytes @ 0x3
  1125                           
  1126  0023                     ??_setupLCD:	
  1127                           ; 1 bytes @ 0x3
  1128                           
  1129  0023                     lcdSetCursor@address:	
  1130                           ; 1 bytes @ 0x3
  1131                           
  1132  0023                     Drive@radL:	
  1133                           ; 1 bytes @ 0x3
  1134                           
  1135  0023                     ___bmul@multiplier:	
  1136                           ; 1 bytes @ 0x3
  1137                           
  1138  0023                     stepCCW@steps:	
  1139                           ; 1 bytes @ 0x3
  1140                           
  1141  0023                     stepCW@steps:	
  1142                           ; 2 bytes @ 0x3
  1143                           
  1144  0023                     DriveDirect@VelocityLeft:	
  1145                           ; 2 bytes @ 0x3
  1146                           
  1147                           
  1148                           ; 2 bytes @ 0x3
  1149  0023                     	ds	1
  1150  0024                     ??_getSensorData:	
  1151  0024                     ??_Drive:	
  1152                           ; 1 bytes @ 0x4
  1153                           
  1154  0024                     ??___wmul:	
  1155                           ; 1 bytes @ 0x4
  1156                           
  1157  0024                     ??___lwdiv:	
  1158                           ; 1 bytes @ 0x4
  1159                           
  1160  0024                     lcdWriteString@s:	
  1161                           ; 1 bytes @ 0x4
  1162                           
  1163  0024                     Drive@speedH:	
  1164                           ; 1 bytes @ 0x4
  1165                           
  1166  0024                     ___wmul@product:	
  1167                           ; 1 bytes @ 0x4
  1168                           
  1169                           
  1170                           ; 2 bytes @ 0x4
  1171  0024                     	ds	1
  1172  0025                     ??_stepCCW:	
  1173  0025                     ??_stepCW:	
  1174                           ; 1 bytes @ 0x5
  1175                           
  1176  0025                     ??_DriveDirect:	
  1177                           ; 1 bytes @ 0x5
  1178                           
  1179  0025                     ?_PathTo:	
  1180                           ; 1 bytes @ 0x5
  1181                           
  1182  0025                     PathTo@y_target:	
  1183                           ; 1 bytes @ 0x5
  1184                           
  1185  0025                     ___lwdiv@counter:	
  1186                           ; 1 bytes @ 0x5
  1187                           
  1188                           
  1189                           ; 1 bytes @ 0x5
  1190  0025                     	ds	1
  1191  0026                     ??_PathTo:	
  1192  0026                     getSensorData@packetID:	
  1193                           ; 1 bytes @ 0x6
  1194                           
  1195  0026                     DriveDirect@data:	
  1196                           ; 1 bytes @ 0x6
  1197                           
  1198  0026                     ___lwdiv@quotient:	
  1199                           ; 2 bytes @ 0x6
  1200                           
  1201                           
  1202                           ; 2 bytes @ 0x6
  1203  0026                     	ds	1
  1204  0027                     getSensorData@sensor:	
  1205                           
  1206                           ; 2 bytes @ 0x7
  1207  0027                     	ds	1
  1208  0028                     DriveDirect@data_494:	
  1209                           
  1210                           ; 2 bytes @ 0x8
  1211  0028                     	ds	1
  1212  0029                     ?_lcdWriteToDigitBCD:	
  1213  0029                     lcdWriteToDigitBCD@data:	
  1214                           ; 1 bytes @ 0x9
  1215                           
  1216                           
  1217                           ; 2 bytes @ 0x9
  1218  0029                     	ds	1
  1219  002A                     ??_Turn90:	
  1220                           
  1221                           ; 1 bytes @ 0xA
  1222  002A                     	ds	1
  1223  002B                     ??_lcdWriteToDigitBCD:	
  1224  002B                     lcdWriteToDigitBCD@TensDigit:	
  1225                           ; 1 bytes @ 0xB
  1226                           
  1227                           
  1228                           ; 2 bytes @ 0xB
  1229  002B                     	ds	2
  1230  002D                     Turn90@direction:	
  1231  002D                     lcdWriteToDigitBCD@HunsDigit:	
  1232                           ; 1 bytes @ 0xD
  1233                           
  1234  002D                     PathTo@mazeGrid:	
  1235                           ; 2 bytes @ 0xD
  1236                           
  1237                           
  1238                           ; 20 bytes @ 0xD
  1239  002D                     	ds	2
  1240  002F                     lcdWriteToDigitBCD@ThouDigit:	
  1241                           
  1242                           ; 2 bytes @ 0xF
  1243  002F                     	ds	2
  1244  0031                     lcdWriteToDigitBCD@TenThouDigit:	
  1245                           
  1246                           ; 2 bytes @ 0x11
  1247  0031                     	ds	2
  1248  0033                     lcdWriteToDigitBCD@OnesDigit:	
  1249                           
  1250                           ; 2 bytes @ 0x13
  1251  0033                     	ds	2
  1252  0035                     ??_ADCMain:	
  1253  0035                     ??_wallFollow:	
  1254                           ; 1 bytes @ 0x15
  1255                           
  1256                           
  1257                           ; 1 bytes @ 0x15
  1258  0035                     	ds	3
  1259  0038                     _wallFollow$964:	
  1260                           
  1261                           ; 2 bytes @ 0x18
  1262  0038                     	ds	2
  1263  003A                     wallFollow@setADCdist:	
  1264                           
  1265                           ; 2 bytes @ 0x1A
  1266  003A                     	ds	2
  1267  003C                     ??_Drive1m:	
  1268                           
  1269                           ; 1 bytes @ 0x1C
  1270  003C                     	ds	3
  1271  003F                     Drive1m@n:	
  1272                           
  1273                           ; 1 bytes @ 0x1F
  1274  003F                     	ds	1
  1275  0040                     Drive1m@omni_IR:	
  1276                           
  1277                           ; 1 bytes @ 0x20
  1278  0040                     	ds	1
  1279  0041                     ??_TravelPath:	
  1280  0041                     PathTo@x_target:	
  1281                           ; 1 bytes @ 0x21
  1282                           
  1283                           
  1284                           ; 1 bytes @ 0x21
  1285  0041                     	ds	1
  1286  0042                     PathTo@sum:	
  1287                           
  1288                           ; 1 bytes @ 0x22
  1289  0042                     	ds	1
  1290  0043                     TravelPath@n:	
  1291  0043                     PathTo@loop:	
  1292                           ; 1 bytes @ 0x23
  1293                           
  1294                           
  1295                           ; 2 bytes @ 0x23
  1296  0043                     	ds	2
  1297  0045                     ??_re_route:	
  1298                           
  1299                           ; 1 bytes @ 0x25
  1300  0045                     	ds	5
  1301  004A                     ??_main:	
  1302                           
  1303                           ; 1 bytes @ 0x2A
  1304  004A                     	ds	3
  1305                           
  1306                           	psect	maintext
  1307  006C                     __pmaintext:	
  1308 ;;
  1309 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1310 ;;
  1311 ;; *************** function _main *****************
  1312 ;; Defined at:
  1313 ;;		line 503 in file "main.c"
  1314 ;; Parameters:    Size  Location     Type
  1315 ;;		None
  1316 ;; Auto vars:     Size  Location     Type
  1317 ;;  fifth           1    5[BANK1 ] unsigned char 
  1318 ;;  fourth          1    4[BANK1 ] unsigned char 
  1319 ;;  third           1    3[BANK1 ] unsigned char 
  1320 ;;  second          1    2[BANK1 ] unsigned char 
  1321 ;;  first           1    1[BANK1 ] unsigned char 
  1322 ;;  controlByte     1    0[BANK1 ] unsigned char 
  1323 ;; Return value:  Size  Location     Type
  1324 ;;                  1    wreg      void 
  1325 ;; Registers used:
  1326 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1327 ;; Tracked objects:
  1328 ;;		On entry : B00/0
  1329 ;;		On exit  : 0/0
  1330 ;;		Unchanged: 0/0
  1331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1332 ;;      Params:         0       0       0       0       0
  1333 ;;      Locals:         0       0       6       0       0
  1334 ;;      Temps:          0       3       0       0       0
  1335 ;;      Totals:         0       3       6       0       0
  1336 ;;Total ram usage:        9 bytes
  1337 ;; Hardware stack levels required when called:    8
  1338 ;; This function calls:
  1339 ;;		_DriveDirect
  1340 ;;		_PathTo
  1341 ;;		_TravelPath
  1342 ;;		_re_route
  1343 ;;		_ser_init
  1344 ;;		_ser_putch
  1345 ;;		_setupADC
  1346 ;;		_setupLCD
  1347 ;;		_setupSPI
  1348 ;;		_spi_transfer
  1349 ;; This function is called by:
  1350 ;;		Startup code after reset
  1351 ;; This function uses a non-reentrant model
  1352 ;;
  1353                           
  1354                           
  1355                           ;psect for function _main
  1356  006C                     _main:	
  1357                           
  1358                           ;main.c: 505: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1359                           
  1360                           ;incstack = 0
  1361                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1362  006C  307F               	movlw	127
  1363  006D  1283               	bcf	3,5	;RP0=0, select bank0
  1364  006E  1303               	bcf	3,6	;RP1=0, select bank0
  1365  006F  00CC               	movwf	??_main+2
  1366  0070  30D4               	movlw	212
  1367  0071  00CB               	movwf	??_main+1
  1368  0072  30AE               	movlw	174
  1369  0073  00CA               	movwf	??_main
  1370  0074                     u3947:	
  1371  0074  0BCA               	decfsz	??_main,f
  1372  0075  2874               	goto	u3947
  1373  0076  0BCB               	decfsz	??_main+1,f
  1374  0077  2874               	goto	u3947
  1375  0078  0BCC               	decfsz	??_main+2,f
  1376  0079  2874               	goto	u3947
  1377  007A  287B               	nop2
  1378                           
  1379                           ;main.c: 507: ser_init();
  1380  007B  160A  118A  2516  120A  118A  	fcall	_ser_init
  1381                           
  1382                           ;main.c: 508: setupSPI();
  1383  0080  160A  118A  25AF  120A  118A  	fcall	_setupSPI
  1384                           
  1385                           ;main.c: 509: setupLCD();
  1386  0085  120A  158A  200D  120A  118A  	fcall	_setupLCD
  1387                           
  1388                           ;main.c: 510: setupADC();
  1389  008A  160A  118A  2599  120A  118A  	fcall	_setupADC
  1390                           
  1391                           ;main.c: 512: TRISB = 0b00000011;
  1392  008F  3003               	movlw	3
  1393  0090  1683               	bsf	3,5	;RP0=1, select bank1
  1394  0091  1303               	bcf	3,6	;RP1=0, select bank1
  1395  0092  0086               	movwf	6	;volatile
  1396                           
  1397                           ;main.c: 513: PORTB = 0b11111100;
  1398  0093  30FC               	movlw	252
  1399  0094  1283               	bcf	3,5	;RP0=0, select bank0
  1400  0095  1303               	bcf	3,6	;RP1=0, select bank0
  1401  0096  0086               	movwf	6	;volatile
  1402                           
  1403                           ;main.c: 515: unsigned char controlByte = 0b00001101;
  1404  0097  300D               	movlw	13
  1405  0098  00CA               	movwf	??_main
  1406  0099  084A               	movf	??_main,w
  1407  009A  1683               	bsf	3,5	;RP0=1, select bank1
  1408  009B  1303               	bcf	3,6	;RP1=0, select bank1
  1409  009C  00EA               	movwf	main@controlByte^(0+128)
  1410                           
  1411                           ;main.c: 516: spi_transfer(controlByte);
  1412  009D  086A               	movf	main@controlByte^(0+128),w
  1413  009E  160A  118A  2507  120A  118A  	fcall	_spi_transfer
  1414                           
  1415                           ;main.c: 518: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1416  00A3  301A               	movlw	26
  1417  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1418  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  1419  00A6  00CC               	movwf	??_main+2
  1420  00A7  305E               	movlw	94
  1421  00A8  00CB               	movwf	??_main+1
  1422  00A9  3086               	movlw	134
  1423  00AA  00CA               	movwf	??_main
  1424  00AB                     u3957:	
  1425  00AB  0BCA               	decfsz	??_main,f
  1426  00AC  28AB               	goto	u3957
  1427  00AD  0BCB               	decfsz	??_main+1,f
  1428  00AE  28AB               	goto	u3957
  1429  00AF  0BCC               	decfsz	??_main+2,f
  1430  00B0  28AB               	goto	u3957
  1431  00B1  0000               	nop
  1432                           
  1433                           ;main.c: 519: ser_putch(128);
  1434  00B2  3080               	movlw	128
  1435  00B3  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1436                           
  1437                           ;main.c: 520: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1438  00B8  301A               	movlw	26
  1439  00B9  1283               	bcf	3,5	;RP0=0, select bank0
  1440  00BA  1303               	bcf	3,6	;RP1=0, select bank0
  1441  00BB  00CC               	movwf	??_main+2
  1442  00BC  305E               	movlw	94
  1443  00BD  00CB               	movwf	??_main+1
  1444  00BE  3086               	movlw	134
  1445  00BF  00CA               	movwf	??_main
  1446  00C0                     u3967:	
  1447  00C0  0BCA               	decfsz	??_main,f
  1448  00C1  28C0               	goto	u3967
  1449  00C2  0BCB               	decfsz	??_main+1,f
  1450  00C3  28C0               	goto	u3967
  1451  00C4  0BCC               	decfsz	??_main+2,f
  1452  00C5  28C0               	goto	u3967
  1453  00C6  0000               	nop
  1454                           
  1455                           ;main.c: 521: ser_putch(132);
  1456  00C7  3084               	movlw	132
  1457  00C8  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1458                           
  1459                           ;main.c: 522: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1460  00CD  301A               	movlw	26
  1461  00CE  1283               	bcf	3,5	;RP0=0, select bank0
  1462  00CF  1303               	bcf	3,6	;RP1=0, select bank0
  1463  00D0  00CC               	movwf	??_main+2
  1464  00D1  305E               	movlw	94
  1465  00D2  00CB               	movwf	??_main+1
  1466  00D3  3086               	movlw	134
  1467  00D4  00CA               	movwf	??_main
  1468  00D5                     u3977:	
  1469  00D5  0BCA               	decfsz	??_main,f
  1470  00D6  28D5               	goto	u3977
  1471  00D7  0BCB               	decfsz	??_main+1,f
  1472  00D8  28D5               	goto	u3977
  1473  00D9  0BCC               	decfsz	??_main+2,f
  1474  00DA  28D5               	goto	u3977
  1475  00DB  0000               	nop
  1476                           
  1477                           ;main.c: 525: x = 1;
  1478  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  1479  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  1480  00DE  01E9               	clrf	_x
  1481  00DF  0AE9               	incf	_x,f
  1482                           
  1483                           ;main.c: 526: y = 0;
  1484  00E0  01E3               	clrf	_y
  1485                           
  1486                           ;main.c: 527: orientation = 3;
  1487  00E1  3003               	movlw	3
  1488  00E2  00CA               	movwf	??_main
  1489  00E3  084A               	movf	??_main,w
  1490  00E4  00E7               	movwf	_orientation
  1491                           
  1492                           ;main.c: 531: ser_putch(140);
  1493  00E5  308C               	movlw	140
  1494  00E6  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1495                           
  1496                           ;main.c: 532: ser_putch(2);
  1497  00EB  3002               	movlw	2
  1498  00EC  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1499                           
  1500                           ;main.c: 533: ser_putch(10);
  1501  00F1  300A               	movlw	10
  1502  00F2  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1503                           
  1504                           ;main.c: 534: ser_putch(67);
  1505  00F7  3043               	movlw	67
  1506  00F8  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1507                           
  1508                           ;main.c: 535: ser_putch(32);
  1509  00FD  3020               	movlw	32
  1510  00FE  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1511                           
  1512                           ;main.c: 536: ser_putch(77);
  1513  0103  304D               	movlw	77
  1514  0104  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1515                           
  1516                           ;main.c: 537: ser_putch(16);
  1517  0109  3010               	movlw	16
  1518  010A  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1519                           
  1520                           ;main.c: 538: ser_putch(77);
  1521  010F  304D               	movlw	77
  1522  0110  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1523                           
  1524                           ;main.c: 539: ser_putch(16);
  1525  0115  3010               	movlw	16
  1526  0116  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1527                           
  1528                           ;main.c: 540: ser_putch(77);
  1529  011B  304D               	movlw	77
  1530  011C  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1531                           
  1532                           ;main.c: 541: ser_putch(16);
  1533  0121  3010               	movlw	16
  1534  0122  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1535                           
  1536                           ;main.c: 542: ser_putch(77);
  1537  0127  304D               	movlw	77
  1538  0128  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1539                           
  1540                           ;main.c: 543: ser_putch(16);
  1541  012D  3010               	movlw	16
  1542  012E  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1543                           
  1544                           ;main.c: 544: ser_putch(76);
  1545  0133  304C               	movlw	76
  1546  0134  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1547                           
  1548                           ;main.c: 545: ser_putch(16);
  1549  0139  3010               	movlw	16
  1550  013A  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1551                           
  1552                           ;main.c: 546: ser_putch(74);
  1553  013F  304A               	movlw	74
  1554  0140  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1555                           
  1556                           ;main.c: 547: ser_putch(16);
  1557  0145  3010               	movlw	16
  1558  0146  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1559                           
  1560                           ;main.c: 548: ser_putch(72);
  1561  014B  3048               	movlw	72
  1562  014C  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1563                           
  1564                           ;main.c: 549: ser_putch(32);
  1565  0151  3020               	movlw	32
  1566  0152  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1567                           
  1568                           ;main.c: 550: ser_putch(79);
  1569  0157  304F               	movlw	79
  1570  0158  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1571                           
  1572                           ;main.c: 551: ser_putch(16);
  1573  015D  3010               	movlw	16
  1574  015E  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1575                           
  1576                           ;main.c: 552: ser_putch(84);
  1577  0163  3054               	movlw	84
  1578  0164  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1579                           
  1580                           ;main.c: 553: ser_putch(48);
  1581  0169  3030               	movlw	48
  1582  016A  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1583                           
  1584                           ;main.c: 556: char first = 16;
  1585  016F  3010               	movlw	16
  1586  0170  1283               	bcf	3,5	;RP0=0, select bank0
  1587  0171  1303               	bcf	3,6	;RP1=0, select bank0
  1588  0172  00CA               	movwf	??_main
  1589  0173  084A               	movf	??_main,w
  1590  0174  1683               	bsf	3,5	;RP0=1, select bank1
  1591  0175  1303               	bcf	3,6	;RP1=0, select bank1
  1592  0176  00EB               	movwf	main@first^(0+128)
  1593                           
  1594                           ;main.c: 557: char second = 8;
  1595  0177  3008               	movlw	8
  1596  0178  1283               	bcf	3,5	;RP0=0, select bank0
  1597  0179  1303               	bcf	3,6	;RP1=0, select bank0
  1598  017A  00CA               	movwf	??_main
  1599  017B  084A               	movf	??_main,w
  1600  017C  1683               	bsf	3,5	;RP0=1, select bank1
  1601  017D  1303               	bcf	3,6	;RP1=0, select bank1
  1602  017E  00EC               	movwf	main@second^(0+128)
  1603                           
  1604                           ;main.c: 558: char third = 12;
  1605  017F  300C               	movlw	12
  1606  0180  1283               	bcf	3,5	;RP0=0, select bank0
  1607  0181  1303               	bcf	3,6	;RP1=0, select bank0
  1608  0182  00CA               	movwf	??_main
  1609  0183  084A               	movf	??_main,w
  1610  0184  1683               	bsf	3,5	;RP0=1, select bank1
  1611  0185  1303               	bcf	3,6	;RP1=0, select bank1
  1612  0186  00ED               	movwf	main@third^(0+128)
  1613                           
  1614                           ;main.c: 559: char fourth = 36;
  1615  0187  3024               	movlw	36
  1616  0188  1283               	bcf	3,5	;RP0=0, select bank0
  1617  0189  1303               	bcf	3,6	;RP1=0, select bank0
  1618  018A  00CA               	movwf	??_main
  1619  018B  084A               	movf	??_main,w
  1620  018C  1683               	bsf	3,5	;RP0=1, select bank1
  1621  018D  1303               	bcf	3,6	;RP1=0, select bank1
  1622  018E  00EE               	movwf	main@fourth^(0+128)
  1623                           
  1624                           ;main.c: 560: char fifth = 32;
  1625  018F  3020               	movlw	32
  1626  0190  1283               	bcf	3,5	;RP0=0, select bank0
  1627  0191  1303               	bcf	3,6	;RP1=0, select bank0
  1628  0192  00CA               	movwf	??_main
  1629  0193  084A               	movf	??_main,w
  1630  0194  1683               	bsf	3,5	;RP0=1, select bank1
  1631  0195  1303               	bcf	3,6	;RP1=0, select bank1
  1632  0196  00EF               	movwf	main@fifth^(0+128)
  1633                           
  1634                           ;main.c: 564: ser_putch(140);
  1635  0197  308C               	movlw	140
  1636  0198  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1637                           
  1638                           ;main.c: 565: ser_putch(3);
  1639  019D  3003               	movlw	3
  1640  019E  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1641                           
  1642                           ;main.c: 566: ser_putch(16);
  1643  01A3  3010               	movlw	16
  1644  01A4  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1645                           
  1646                           ;main.c: 567: ser_putch(62);
  1647  01A9  303E               	movlw	62
  1648  01AA  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1649                           
  1650                           ;main.c: 568: ser_putch(first);
  1651  01AF  1683               	bsf	3,5	;RP0=1, select bank1
  1652  01B0  1303               	bcf	3,6	;RP1=0, select bank1
  1653  01B1  086B               	movf	main@first^(0+128),w
  1654  01B2  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1655                           
  1656                           ;main.c: 569: ser_putch(69);
  1657  01B7  3045               	movlw	69
  1658  01B8  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1659                           
  1660                           ;main.c: 570: ser_putch(second);
  1661  01BD  1683               	bsf	3,5	;RP0=1, select bank1
  1662  01BE  1303               	bcf	3,6	;RP1=0, select bank1
  1663  01BF  086C               	movf	main@second^(0+128),w
  1664  01C0  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1665                           
  1666                           ;main.c: 571: ser_putch(62);
  1667  01C5  303E               	movlw	62
  1668  01C6  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1669                           
  1670                           ;main.c: 572: ser_putch(third);
  1671  01CB  1683               	bsf	3,5	;RP0=1, select bank1
  1672  01CC  1303               	bcf	3,6	;RP1=0, select bank1
  1673  01CD  086D               	movf	main@third^(0+128),w
  1674  01CE  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1675                           
  1676                           ;main.c: 573: ser_putch(65);
  1677  01D3  3041               	movlw	65
  1678  01D4  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1679                           
  1680                           ;main.c: 574: ser_putch(fourth);
  1681  01D9  1683               	bsf	3,5	;RP0=1, select bank1
  1682  01DA  1303               	bcf	3,6	;RP1=0, select bank1
  1683  01DB  086E               	movf	main@fourth^(0+128),w
  1684  01DC  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1685                           
  1686                           ;main.c: 575: ser_putch(62);
  1687  01E1  303E               	movlw	62
  1688  01E2  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1689                           
  1690                           ;main.c: 576: ser_putch(fifth);
  1691  01E7  1683               	bsf	3,5	;RP0=1, select bank1
  1692  01E8  1303               	bcf	3,6	;RP1=0, select bank1
  1693  01E9  086F               	movf	main@fifth^(0+128),w
  1694  01EA  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1695                           
  1696                           ;main.c: 578: ser_putch(65);
  1697  01EF  3041               	movlw	65
  1698  01F0  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1699                           
  1700                           ;main.c: 579: ser_putch(first);
  1701  01F5  1683               	bsf	3,5	;RP0=1, select bank1
  1702  01F6  1303               	bcf	3,6	;RP1=0, select bank1
  1703  01F7  086B               	movf	main@first^(0+128),w
  1704  01F8  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1705                           
  1706                           ;main.c: 580: ser_putch(62);
  1707  01FD  303E               	movlw	62
  1708  01FE  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1709                           
  1710                           ;main.c: 581: ser_putch(second);
  1711  0203  1683               	bsf	3,5	;RP0=1, select bank1
  1712  0204  1303               	bcf	3,6	;RP1=0, select bank1
  1713  0205  086C               	movf	main@second^(0+128),w
  1714  0206  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1715                           
  1716                           ;main.c: 582: ser_putch(65);
  1717  020B  3041               	movlw	65
  1718  020C  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1719                           
  1720                           ;main.c: 583: ser_putch(third);
  1721  0211  1683               	bsf	3,5	;RP0=1, select bank1
  1722  0212  1303               	bcf	3,6	;RP1=0, select bank1
  1723  0213  086D               	movf	main@third^(0+128),w
  1724  0214  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1725                           
  1726                           ;main.c: 584: ser_putch(69);
  1727  0219  3045               	movlw	69
  1728  021A  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1729                           
  1730                           ;main.c: 585: ser_putch(fourth);
  1731  021F  1683               	bsf	3,5	;RP0=1, select bank1
  1732  0220  1303               	bcf	3,6	;RP1=0, select bank1
  1733  0221  086E               	movf	main@fourth^(0+128),w
  1734  0222  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1735                           
  1736                           ;main.c: 586: ser_putch(65);
  1737  0227  3041               	movlw	65
  1738  0228  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1739                           
  1740                           ;main.c: 587: ser_putch(fifth);
  1741  022D  1683               	bsf	3,5	;RP0=1, select bank1
  1742  022E  1303               	bcf	3,6	;RP1=0, select bank1
  1743  022F  086F               	movf	main@fifth^(0+128),w
  1744  0230  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1745                           
  1746                           ;main.c: 589: ser_putch(69);
  1747  0235  3045               	movlw	69
  1748  0236  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1749                           
  1750                           ;main.c: 590: ser_putch(first);
  1751  023B  1683               	bsf	3,5	;RP0=1, select bank1
  1752  023C  1303               	bcf	3,6	;RP1=0, select bank1
  1753  023D  086B               	movf	main@first^(0+128),w
  1754  023E  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1755                           
  1756                           ;main.c: 591: ser_putch(65);
  1757  0243  3041               	movlw	65
  1758  0244  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1759                           
  1760                           ;main.c: 592: ser_putch(second);
  1761  0249  1683               	bsf	3,5	;RP0=1, select bank1
  1762  024A  1303               	bcf	3,6	;RP1=0, select bank1
  1763  024B  086C               	movf	main@second^(0+128),w
  1764  024C  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1765                           
  1766                           ;main.c: 593: ser_putch(69);
  1767  0251  3045               	movlw	69
  1768  0252  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1769                           
  1770                           ;main.c: 594: ser_putch(third);
  1771  0257  1683               	bsf	3,5	;RP0=1, select bank1
  1772  0258  1303               	bcf	3,6	;RP1=0, select bank1
  1773  0259  086D               	movf	main@third^(0+128),w
  1774  025A  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1775                           
  1776                           ;main.c: 595: ser_putch(60);
  1777  025F  303C               	movlw	60
  1778  0260  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1779                           
  1780                           ;main.c: 596: ser_putch(fourth);
  1781  0265  1683               	bsf	3,5	;RP0=1, select bank1
  1782  0266  1303               	bcf	3,6	;RP1=0, select bank1
  1783  0267  086E               	movf	main@fourth^(0+128),w
  1784  0268  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1785                           
  1786                           ;main.c: 597: ser_putch(48);
  1787  026D  3030               	movlw	48
  1788  026E  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1789                           
  1790                           ;main.c: 598: ser_putch(fifth);
  1791  0273  1683               	bsf	3,5	;RP0=1, select bank1
  1792  0274  1303               	bcf	3,6	;RP1=0, select bank1
  1793  0275  086F               	movf	main@fifth^(0+128),w
  1794  0276  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1795                           
  1796                           ;main.c: 600: ser_putch(65);
  1797  027B  3041               	movlw	65
  1798  027C  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1799                           
  1800                           ;main.c: 601: ser_putch(16);
  1801  0281  3010               	movlw	16
  1802  0282  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1803                           
  1804                           ;main.c: 604: ser_putch(140);
  1805  0287  308C               	movlw	140
  1806  0288  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1807                           
  1808                           ;main.c: 605: ser_putch(4);
  1809  028D  3004               	movlw	4
  1810  028E  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1811                           
  1812                           ;main.c: 606: ser_putch(3);
  1813  0293  3003               	movlw	3
  1814  0294  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1815                           
  1816                           ;main.c: 607: ser_putch(60);
  1817  0299  303C               	movlw	60
  1818  029A  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1819                           
  1820                           ;main.c: 608: ser_putch(12);
  1821  029F  300C               	movlw	12
  1822  02A0  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1823                           
  1824                           ;main.c: 609: ser_putch(65);
  1825  02A5  3041               	movlw	65
  1826  02A6  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1827                           
  1828                           ;main.c: 610: ser_putch(12);
  1829  02AB  300C               	movlw	12
  1830  02AC  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1831                           
  1832                           ;main.c: 611: ser_putch(69);
  1833  02B1  3045               	movlw	69
  1834  02B2  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1835                           
  1836                           ;main.c: 612: ser_putch(96);
  1837  02B7  3060               	movlw	96
  1838  02B8  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1839                           
  1840                           ;main.c: 616: ser_putch(140);
  1841  02BD  308C               	movlw	140
  1842  02BE  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1843                           
  1844                           ;main.c: 617: ser_putch(5);
  1845  02C3  3005               	movlw	5
  1846  02C4  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1847                           
  1848                           ;main.c: 618: ser_putch(11);
  1849  02C9  300B               	movlw	11
  1850  02CA  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1851                           
  1852                           ;main.c: 619: ser_putch(70);
  1853  02CF  3046               	movlw	70
  1854  02D0  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1855                           
  1856                           ;main.c: 620: ser_putch(12);
  1857  02D5  300C               	movlw	12
  1858  02D6  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1859                           
  1860                           ;main.c: 621: ser_putch(67);
  1861  02DB  3043               	movlw	67
  1862  02DC  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1863                           
  1864                           ;main.c: 622: ser_putch(12);
  1865  02E1  300C               	movlw	12
  1866  02E2  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1867                           
  1868                           ;main.c: 623: ser_putch(62);
  1869  02E7  303E               	movlw	62
  1870  02E8  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1871                           
  1872                           ;main.c: 624: ser_putch(96);
  1873  02ED  3060               	movlw	96
  1874  02EE  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1875                           
  1876                           ;main.c: 625: ser_putch(70);
  1877  02F3  3046               	movlw	70
  1878  02F4  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1879                           
  1880                           ;main.c: 626: ser_putch(12);
  1881  02F9  300C               	movlw	12
  1882  02FA  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1883                           
  1884                           ;main.c: 627: ser_putch(67);
  1885  02FF  3043               	movlw	67
  1886  0300  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1887                           
  1888                           ;main.c: 628: ser_putch(12);
  1889  0305  300C               	movlw	12
  1890  0306  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1891                           
  1892                           ;main.c: 629: ser_putch(61);
  1893  030B  303D               	movlw	61
  1894  030C  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1895                           
  1896                           ;main.c: 630: ser_putch(96);
  1897  0311  3060               	movlw	96
  1898  0312  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1899                           
  1900                           ;main.c: 631: ser_putch(70);
  1901  0317  3046               	movlw	70
  1902  0318  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1903                           
  1904                           ;main.c: 632: ser_putch(12);
  1905  031D  300C               	movlw	12
  1906  031E  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1907                           
  1908                           ;main.c: 633: ser_putch(67);
  1909  0323  3043               	movlw	67
  1910  0324  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1911                           
  1912                           ;main.c: 634: ser_putch(12);
  1913  0329  300C               	movlw	12
  1914  032A  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1915                           
  1916                           ;main.c: 635: ser_putch(60);
  1917  032F  303C               	movlw	60
  1918  0330  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1919                           
  1920                           ;main.c: 636: ser_putch(96);
  1921  0335  3060               	movlw	96
  1922  0336  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1923                           
  1924                           ;main.c: 637: ser_putch(70);
  1925  033B  3046               	movlw	70
  1926  033C  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1927                           
  1928                           ;main.c: 638: ser_putch(12);
  1929  0341  300C               	movlw	12
  1930  0342  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1931                           
  1932                           ;main.c: 639: ser_putch(60);
  1933  0347  303C               	movlw	60
  1934  0348  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1935                           
  1936                           ;main.c: 640: ser_putch(20);
  1937  034D  3014               	movlw	20
  1938  034E  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1939                           
  1940                           ;main.c: 643: ser_putch(140);
  1941  0353  308C               	movlw	140
  1942  0354  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1943                           
  1944                           ;main.c: 644: ser_putch(6);
  1945  0359  3006               	movlw	6
  1946  035A  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1947                           
  1948                           ;main.c: 645: ser_putch(11);
  1949  035F  300B               	movlw	11
  1950  0360  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1951                           
  1952                           ;main.c: 646: ser_putch(55);
  1953  0365  3037               	movlw	55
  1954  0366  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1955                           
  1956                           ;main.c: 647: ser_putch(22);
  1957  036B  3016               	movlw	22
  1958  036C  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1959                           
  1960                           ;main.c: 648: ser_putch(55);
  1961  0371  3037               	movlw	55
  1962  0372  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1963                           
  1964                           ;main.c: 649: ser_putch(22);
  1965  0377  3016               	movlw	22
  1966  0378  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1967                           
  1968                           ;main.c: 650: ser_putch(0);
  1969  037D  3000               	movlw	0
  1970  037E  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1971                           
  1972                           ;main.c: 651: ser_putch(2);
  1973  0383  3002               	movlw	2
  1974  0384  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1975                           
  1976                           ;main.c: 652: ser_putch(58);
  1977  0389  303A               	movlw	58
  1978  038A  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1979                           
  1980                           ;main.c: 653: ser_putch(18);
  1981  038F  3012               	movlw	18
  1982  0390  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1983                           
  1984                           ;main.c: 654: ser_putch(48);
  1985  0395  3030               	movlw	48
  1986  0396  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1987                           
  1988                           ;main.c: 655: ser_putch(24);
  1989  039B  3018               	movlw	24
  1990  039C  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1991                           
  1992                           ;main.c: 656: ser_putch(0);
  1993  03A1  3000               	movlw	0
  1994  03A2  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1995                           
  1996                           ;main.c: 657: ser_putch(10);
  1997  03A7  300A               	movlw	10
  1998  03A8  120A  158A  2001  120A  118A  	fcall	_ser_putch
  1999                           
  2000                           ;main.c: 658: ser_putch(55);
  2001  03AD  3037               	movlw	55
  2002  03AE  120A  158A  2001  120A  118A  	fcall	_ser_putch
  2003                           
  2004                           ;main.c: 659: ser_putch(22);
  2005  03B3  3016               	movlw	22
  2006  03B4  120A  158A  2001  120A  118A  	fcall	_ser_putch
  2007                           
  2008                           ;main.c: 660: ser_putch(55);
  2009  03B9  3037               	movlw	55
  2010  03BA  120A  158A  2001  120A  118A  	fcall	_ser_putch
  2011                           
  2012                           ;main.c: 661: ser_putch(22);
  2013  03BF  3016               	movlw	22
  2014  03C0  120A  158A  2001  120A  118A  	fcall	_ser_putch
  2015                           
  2016                           ;main.c: 662: ser_putch(0);
  2017  03C5  3000               	movlw	0
  2018  03C6  120A  158A  2001  120A  118A  	fcall	_ser_putch
  2019                           
  2020                           ;main.c: 663: ser_putch(2);
  2021  03CB  3002               	movlw	2
  2022  03CC  120A  158A  2001  120A  118A  	fcall	_ser_putch
  2023                           
  2024                           ;main.c: 664: ser_putch(53);
  2025  03D1  3035               	movlw	53
  2026  03D2  120A  158A  2001  120A  118A  	fcall	_ser_putch
  2027                           
  2028                           ;main.c: 665: ser_putch(18);
  2029  03D7  3012               	movlw	18
  2030  03D8  120A  158A  2001  120A  118A  	fcall	_ser_putch
  2031                           
  2032                           ;main.c: 666: ser_putch(54);
  2033  03DD  3036               	movlw	54
  2034  03DE  120A  158A  2001  120A  118A  	fcall	_ser_putch
  2035                           
  2036                           ;main.c: 667: ser_putch(24);
  2037  03E3  3018               	movlw	24
  2038  03E4  120A  158A  2001  120A  118A  	fcall	_ser_putch
  2039  03E9                     l5031:	
  2040                           ;main.c: 670: while(1){
  2041                           
  2042                           
  2043                           ;main.c: 672: if(PB7Counter >= 10 && !RB1== 0){
  2044  03E9  300A               	movlw	10
  2045  03EA  1283               	bcf	3,5	;RP0=0, select bank0
  2046  03EB  1303               	bcf	3,6	;RP1=0, select bank0
  2047  03EC  0255               	subwf	_PB7Counter,w
  2048  03ED  1803               	btfsc	3,0
  2049  03EE  1C86               	btfss	6,1	;volatile
  2050  03EF  2C35               	goto	l5047
  2051                           
  2052                           ;main.c: 675: ser_putch(141);
  2053  03F0  308D               	movlw	141
  2054  03F1  120A  158A  2001  120A  118A  	fcall	_ser_putch
  2055                           
  2056                           ;main.c: 676: ser_putch(6);
  2057  03F6  3006               	movlw	6
  2058  03F7  120A  158A  2001  120A  118A  	fcall	_ser_putch
  2059                           
  2060                           ;main.c: 677: _delay((unsigned long)((3000)*(20000000/4000.0)));
  2061  03FC  304D               	movlw	77
  2062  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  2063  03FE  1303               	bcf	3,6	;RP1=0, select bank0
  2064  03FF  00CC               	movwf	??_main+2
  2065  0400  3019               	movlw	25
  2066  0401  00CB               	movwf	??_main+1
  2067  0402  309A               	movlw	154
  2068  0403  00CA               	movwf	??_main
  2069  0404                     u3987:	
  2070  0404  0BCA               	decfsz	??_main,f
  2071  0405  2C04               	goto	u3987
  2072  0406  0BCB               	decfsz	??_main+1,f
  2073  0407  2C04               	goto	u3987
  2074  0408  0BCC               	decfsz	??_main+2,f
  2075  0409  2C04               	goto	u3987
  2076  040A  2C0B               	nop2
  2077                           
  2078                           ;main.c: 678: ser_putch(141);
  2079  040B  308D               	movlw	141
  2080  040C  120A  158A  2001  120A  118A  	fcall	_ser_putch
  2081                           
  2082                           ;main.c: 679: ser_putch(6);
  2083  0411  3006               	movlw	6
  2084  0412  120A  158A  2001  120A  118A  	fcall	_ser_putch
  2085                           
  2086                           ;main.c: 680: _delay((unsigned long)((3000)*(20000000/4000.0)));
  2087  0417  304D               	movlw	77
  2088  0418  1283               	bcf	3,5	;RP0=0, select bank0
  2089  0419  1303               	bcf	3,6	;RP1=0, select bank0
  2090  041A  00CC               	movwf	??_main+2
  2091  041B  3019               	movlw	25
  2092  041C  00CB               	movwf	??_main+1
  2093  041D  309A               	movlw	154
  2094  041E  00CA               	movwf	??_main
  2095  041F                     u3997:	
  2096  041F  0BCA               	decfsz	??_main,f
  2097  0420  2C1F               	goto	u3997
  2098  0421  0BCB               	decfsz	??_main+1,f
  2099  0422  2C1F               	goto	u3997
  2100  0423  0BCC               	decfsz	??_main+2,f
  2101  0424  2C1F               	goto	u3997
  2102  0425  2C26               	nop2
  2103                           
  2104                           ;main.c: 681: ser_putch(141);
  2105  0426  308D               	movlw	141
  2106  0427  120A  158A  2001  120A  118A  	fcall	_ser_putch
  2107                           
  2108                           ;main.c: 682: ser_putch(5);
  2109  042C  3005               	movlw	5
  2110  042D  120A  158A  2001  120A  118A  	fcall	_ser_putch
  2111                           
  2112                           ;main.c: 687: PB7Counter=0;
  2113  0432  1283               	bcf	3,5	;RP0=0, select bank0
  2114  0433  1303               	bcf	3,6	;RP1=0, select bank0
  2115  0434  01D5               	clrf	_PB7Counter
  2116  0435                     l5047:	
  2117                           
  2118                           ;main.c: 691: }
  2119                           ;main.c: 695: if(PB8Counter >= 10 && !RB0 == 0){
  2120  0435  300A               	movlw	10
  2121  0436  0256               	subwf	_PB8Counter,w
  2122  0437  1803               	btfsc	3,0
  2123  0438  1C06               	btfss	6,0	;volatile
  2124  0439  2BE9               	goto	l5031
  2125                           
  2126                           ;main.c: 699: PathTo(2,0);
  2127  043A  01A5               	clrf	PathTo@y_target
  2128  043B  3002               	movlw	2
  2129  043C  120A  158A  2482  120A  118A  	fcall	_PathTo
  2130                           
  2131                           ;main.c: 700: TravelPath();
  2132  0441  120A  158A  236D  120A  118A  	fcall	_TravelPath
  2133                           
  2134                           ;main.c: 701: if (IR_Wall == 1)
  2135  0446  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2136  0447  2C55               	goto	l5057
  2137                           
  2138                           ;main.c: 702: DriveDirect(0,0);
  2139  0448  3000               	movlw	0
  2140  0449  1283               	bcf	3,5	;RP0=0, select bank0
  2141  044A  1303               	bcf	3,6	;RP1=0, select bank0
  2142  044B  00A1               	movwf	DriveDirect@VelocityRight
  2143  044C  00A2               	movwf	DriveDirect@VelocityRight+1
  2144  044D  3000               	movlw	0
  2145  044E  00A3               	movwf	DriveDirect@VelocityLeft
  2146  044F  00A4               	movwf	DriveDirect@VelocityLeft+1
  2147  0450  120A  158A  20B4  120A  118A  	fcall	_DriveDirect
  2148  0455                     l5057:	
  2149                           
  2150                           ;main.c: 703: _delay((unsigned long)((2000)*(20000000/4000.0)));
  2151  0455  3033               	movlw	51
  2152  0456  1283               	bcf	3,5	;RP0=0, select bank0
  2153  0457  1303               	bcf	3,6	;RP1=0, select bank0
  2154  0458  00CC               	movwf	??_main+2
  2155  0459  30BC               	movlw	188
  2156  045A  00CB               	movwf	??_main+1
  2157  045B  3010               	movlw	16
  2158  045C  00CA               	movwf	??_main
  2159  045D                     u4007:	
  2160  045D  0BCA               	decfsz	??_main,f
  2161  045E  2C5D               	goto	u4007
  2162  045F  0BCB               	decfsz	??_main+1,f
  2163  0460  2C5D               	goto	u4007
  2164  0461  0BCC               	decfsz	??_main+2,f
  2165  0462  2C5D               	goto	u4007
  2166                           
  2167                           ;main.c: 704: re_route();
  2168  0463  120A  158A  227D  120A  118A  	fcall	_re_route
  2169                           
  2170                           ;main.c: 705: if (targets_found == 1){
  2171  0468  1FF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2172  0469  2C93               	goto	l5071
  2173                           
  2174                           ;main.c: 706: DriveDirect(0,0);
  2175  046A  3000               	movlw	0
  2176  046B  1283               	bcf	3,5	;RP0=0, select bank0
  2177  046C  1303               	bcf	3,6	;RP1=0, select bank0
  2178  046D  00A1               	movwf	DriveDirect@VelocityRight
  2179  046E  00A2               	movwf	DriveDirect@VelocityRight+1
  2180  046F  3000               	movlw	0
  2181  0470  00A3               	movwf	DriveDirect@VelocityLeft
  2182  0471  00A4               	movwf	DriveDirect@VelocityLeft+1
  2183  0472  120A  158A  20B4  120A  118A  	fcall	_DriveDirect
  2184                           
  2185                           ;main.c: 707: _delay((unsigned long)((2000)*(20000000/4000.0)));
  2186  0477  3033               	movlw	51
  2187  0478  1283               	bcf	3,5	;RP0=0, select bank0
  2188  0479  1303               	bcf	3,6	;RP1=0, select bank0
  2189  047A  00CC               	movwf	??_main+2
  2190  047B  30BC               	movlw	188
  2191  047C  00CB               	movwf	??_main+1
  2192  047D  3010               	movlw	16
  2193  047E  00CA               	movwf	??_main
  2194  047F                     u4017:	
  2195  047F  0BCA               	decfsz	??_main,f
  2196  0480  2C7F               	goto	u4017
  2197  0481  0BCB               	decfsz	??_main+1,f
  2198  0482  2C7F               	goto	u4017
  2199  0483  0BCC               	decfsz	??_main+2,f
  2200  0484  2C7F               	goto	u4017
  2201                           
  2202                           ;main.c: 708: PathTo(1,0);
  2203  0485  1283               	bcf	3,5	;RP0=0, select bank0
  2204  0486  1303               	bcf	3,6	;RP1=0, select bank0
  2205  0487  01A5               	clrf	PathTo@y_target
  2206  0488  3001               	movlw	1
  2207  0489  120A  158A  2482  120A  118A  	fcall	_PathTo
  2208                           
  2209                           ;main.c: 709: TravelPath();
  2210  048E  120A  158A  236D  120A  118A  	fcall	_TravelPath
  2211  0493                     l5071:	
  2212                           
  2213                           ;main.c: 710: }
  2214                           ;main.c: 713: PathTo(3,0);
  2215  0493  1283               	bcf	3,5	;RP0=0, select bank0
  2216  0494  1303               	bcf	3,6	;RP1=0, select bank0
  2217  0495  01A5               	clrf	PathTo@y_target
  2218  0496  3003               	movlw	3
  2219  0497  120A  158A  2482  120A  118A  	fcall	_PathTo
  2220                           
  2221                           ;main.c: 714: TravelPath();
  2222  049C  120A  158A  236D  120A  118A  	fcall	_TravelPath
  2223                           
  2224                           ;main.c: 715: if (IR_Wall == 1)
  2225  04A1  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2226  04A2  2CB0               	goto	l5079
  2227                           
  2228                           ;main.c: 716: DriveDirect(0,0);
  2229  04A3  3000               	movlw	0
  2230  04A4  1283               	bcf	3,5	;RP0=0, select bank0
  2231  04A5  1303               	bcf	3,6	;RP1=0, select bank0
  2232  04A6  00A1               	movwf	DriveDirect@VelocityRight
  2233  04A7  00A2               	movwf	DriveDirect@VelocityRight+1
  2234  04A8  3000               	movlw	0
  2235  04A9  00A3               	movwf	DriveDirect@VelocityLeft
  2236  04AA  00A4               	movwf	DriveDirect@VelocityLeft+1
  2237  04AB  120A  158A  20B4  120A  118A  	fcall	_DriveDirect
  2238  04B0                     l5079:	
  2239                           
  2240                           ;main.c: 717: _delay((unsigned long)((2000)*(20000000/4000.0)));
  2241  04B0  3033               	movlw	51
  2242  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  2243  04B2  1303               	bcf	3,6	;RP1=0, select bank0
  2244  04B3  00CC               	movwf	??_main+2
  2245  04B4  30BC               	movlw	188
  2246  04B5  00CB               	movwf	??_main+1
  2247  04B6  3010               	movlw	16
  2248  04B7  00CA               	movwf	??_main
  2249  04B8                     u4027:	
  2250  04B8  0BCA               	decfsz	??_main,f
  2251  04B9  2CB8               	goto	u4027
  2252  04BA  0BCB               	decfsz	??_main+1,f
  2253  04BB  2CB8               	goto	u4027
  2254  04BC  0BCC               	decfsz	??_main+2,f
  2255  04BD  2CB8               	goto	u4027
  2256                           
  2257                           ;main.c: 718: re_route();
  2258  04BE  120A  158A  227D  120A  118A  	fcall	_re_route
  2259                           
  2260                           ;main.c: 719: if (targets_found == 1){
  2261  04C3  1FF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2262  04C4  2CEE               	goto	l5093
  2263                           
  2264                           ;main.c: 720: DriveDirect(0,0);
  2265  04C5  3000               	movlw	0
  2266  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  2267  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  2268  04C8  00A1               	movwf	DriveDirect@VelocityRight
  2269  04C9  00A2               	movwf	DriveDirect@VelocityRight+1
  2270  04CA  3000               	movlw	0
  2271  04CB  00A3               	movwf	DriveDirect@VelocityLeft
  2272  04CC  00A4               	movwf	DriveDirect@VelocityLeft+1
  2273  04CD  120A  158A  20B4  120A  118A  	fcall	_DriveDirect
  2274                           
  2275                           ;main.c: 721: _delay((unsigned long)((2000)*(20000000/4000.0)));
  2276  04D2  3033               	movlw	51
  2277  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  2278  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  2279  04D5  00CC               	movwf	??_main+2
  2280  04D6  30BC               	movlw	188
  2281  04D7  00CB               	movwf	??_main+1
  2282  04D8  3010               	movlw	16
  2283  04D9  00CA               	movwf	??_main
  2284  04DA                     u4037:	
  2285  04DA  0BCA               	decfsz	??_main,f
  2286  04DB  2CDA               	goto	u4037
  2287  04DC  0BCB               	decfsz	??_main+1,f
  2288  04DD  2CDA               	goto	u4037
  2289  04DE  0BCC               	decfsz	??_main+2,f
  2290  04DF  2CDA               	goto	u4037
  2291                           
  2292                           ;main.c: 722: PathTo(1,0);
  2293  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  2294  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  2295  04E2  01A5               	clrf	PathTo@y_target
  2296  04E3  3001               	movlw	1
  2297  04E4  120A  158A  2482  120A  118A  	fcall	_PathTo
  2298                           
  2299                           ;main.c: 723: TravelPath();
  2300  04E9  120A  158A  236D  120A  118A  	fcall	_TravelPath
  2301  04EE                     l5093:	
  2302                           
  2303                           ;main.c: 724: }
  2304                           ;main.c: 727: PathTo(4,3);
  2305  04EE  3003               	movlw	3
  2306  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  2307  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  2308  04F1  00CA               	movwf	??_main
  2309  04F2  084A               	movf	??_main,w
  2310  04F3  00A5               	movwf	PathTo@y_target
  2311  04F4  3004               	movlw	4
  2312  04F5  120A  158A  2482  120A  118A  	fcall	_PathTo
  2313                           
  2314                           ;main.c: 728: TravelPath();
  2315  04FA  120A  158A  236D  120A  118A  	fcall	_TravelPath
  2316                           
  2317                           ;main.c: 729: if (IR_Wall == 1)
  2318  04FF  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2319  0500  2D06               	goto	l5101
  2320                           
  2321                           ;main.c: 730: re_route();
  2322  0501  120A  158A  227D  120A  118A  	fcall	_re_route
  2323  0506                     l5101:	
  2324                           
  2325                           ;main.c: 731: if (targets_found == 1){
  2326  0506  1FF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2327  0507  2D31               	goto	l5111
  2328                           
  2329                           ;main.c: 732: DriveDirect(0,0);
  2330  0508  3000               	movlw	0
  2331  0509  1283               	bcf	3,5	;RP0=0, select bank0
  2332  050A  1303               	bcf	3,6	;RP1=0, select bank0
  2333  050B  00A1               	movwf	DriveDirect@VelocityRight
  2334  050C  00A2               	movwf	DriveDirect@VelocityRight+1
  2335  050D  3000               	movlw	0
  2336  050E  00A3               	movwf	DriveDirect@VelocityLeft
  2337  050F  00A4               	movwf	DriveDirect@VelocityLeft+1
  2338  0510  120A  158A  20B4  120A  118A  	fcall	_DriveDirect
  2339                           
  2340                           ;main.c: 733: _delay((unsigned long)((2000)*(20000000/4000.0)));
  2341  0515  3033               	movlw	51
  2342  0516  1283               	bcf	3,5	;RP0=0, select bank0
  2343  0517  1303               	bcf	3,6	;RP1=0, select bank0
  2344  0518  00CC               	movwf	??_main+2
  2345  0519  30BC               	movlw	188
  2346  051A  00CB               	movwf	??_main+1
  2347  051B  3010               	movlw	16
  2348  051C  00CA               	movwf	??_main
  2349  051D                     u4047:	
  2350  051D  0BCA               	decfsz	??_main,f
  2351  051E  2D1D               	goto	u4047
  2352  051F  0BCB               	decfsz	??_main+1,f
  2353  0520  2D1D               	goto	u4047
  2354  0521  0BCC               	decfsz	??_main+2,f
  2355  0522  2D1D               	goto	u4047
  2356                           
  2357                           ;main.c: 734: PathTo(1,0);
  2358  0523  1283               	bcf	3,5	;RP0=0, select bank0
  2359  0524  1303               	bcf	3,6	;RP1=0, select bank0
  2360  0525  01A5               	clrf	PathTo@y_target
  2361  0526  3001               	movlw	1
  2362  0527  120A  158A  2482  120A  118A  	fcall	_PathTo
  2363                           
  2364                           ;main.c: 735: TravelPath();
  2365  052C  120A  158A  236D  120A  118A  	fcall	_TravelPath
  2366  0531                     l5111:	
  2367                           
  2368                           ;main.c: 736: }
  2369                           ;main.c: 739: PathTo(3,2);
  2370  0531  3002               	movlw	2
  2371  0532  1283               	bcf	3,5	;RP0=0, select bank0
  2372  0533  1303               	bcf	3,6	;RP1=0, select bank0
  2373  0534  00CA               	movwf	??_main
  2374  0535  084A               	movf	??_main,w
  2375  0536  00A5               	movwf	PathTo@y_target
  2376  0537  3003               	movlw	3
  2377  0538  120A  158A  2482  120A  118A  	fcall	_PathTo
  2378                           
  2379                           ;main.c: 740: TravelPath();
  2380  053D  120A  158A  236D  120A  118A  	fcall	_TravelPath
  2381                           
  2382                           ;main.c: 741: if (IR_Wall == 1)
  2383  0542  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2384  0543  2D51               	goto	l5119
  2385                           
  2386                           ;main.c: 742: DriveDirect(0,0);
  2387  0544  3000               	movlw	0
  2388  0545  1283               	bcf	3,5	;RP0=0, select bank0
  2389  0546  1303               	bcf	3,6	;RP1=0, select bank0
  2390  0547  00A1               	movwf	DriveDirect@VelocityRight
  2391  0548  00A2               	movwf	DriveDirect@VelocityRight+1
  2392  0549  3000               	movlw	0
  2393  054A  00A3               	movwf	DriveDirect@VelocityLeft
  2394  054B  00A4               	movwf	DriveDirect@VelocityLeft+1
  2395  054C  120A  158A  20B4  120A  118A  	fcall	_DriveDirect
  2396  0551                     l5119:	
  2397                           
  2398                           ;main.c: 743: _delay((unsigned long)((2000)*(20000000/4000.0)));
  2399  0551  3033               	movlw	51
  2400  0552  1283               	bcf	3,5	;RP0=0, select bank0
  2401  0553  1303               	bcf	3,6	;RP1=0, select bank0
  2402  0554  00CC               	movwf	??_main+2
  2403  0555  30BC               	movlw	188
  2404  0556  00CB               	movwf	??_main+1
  2405  0557  3010               	movlw	16
  2406  0558  00CA               	movwf	??_main
  2407  0559                     u4057:	
  2408  0559  0BCA               	decfsz	??_main,f
  2409  055A  2D59               	goto	u4057
  2410  055B  0BCB               	decfsz	??_main+1,f
  2411  055C  2D59               	goto	u4057
  2412  055D  0BCC               	decfsz	??_main+2,f
  2413  055E  2D59               	goto	u4057
  2414                           
  2415                           ;main.c: 746: re_route();
  2416  055F  120A  158A  227D  120A  118A  	fcall	_re_route
  2417                           
  2418                           ;main.c: 747: if (targets_found == 1){
  2419  0564  1FF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2420  0565  2D8F               	goto	l5133
  2421                           
  2422                           ;main.c: 748: DriveDirect(0,0);
  2423  0566  3000               	movlw	0
  2424  0567  1283               	bcf	3,5	;RP0=0, select bank0
  2425  0568  1303               	bcf	3,6	;RP1=0, select bank0
  2426  0569  00A1               	movwf	DriveDirect@VelocityRight
  2427  056A  00A2               	movwf	DriveDirect@VelocityRight+1
  2428  056B  3000               	movlw	0
  2429  056C  00A3               	movwf	DriveDirect@VelocityLeft
  2430  056D  00A4               	movwf	DriveDirect@VelocityLeft+1
  2431  056E  120A  158A  20B4  120A  118A  	fcall	_DriveDirect
  2432                           
  2433                           ;main.c: 749: _delay((unsigned long)((2000)*(20000000/4000.0)));
  2434  0573  3033               	movlw	51
  2435  0574  1283               	bcf	3,5	;RP0=0, select bank0
  2436  0575  1303               	bcf	3,6	;RP1=0, select bank0
  2437  0576  00CC               	movwf	??_main+2
  2438  0577  30BC               	movlw	188
  2439  0578  00CB               	movwf	??_main+1
  2440  0579  3010               	movlw	16
  2441  057A  00CA               	movwf	??_main
  2442  057B                     u4067:	
  2443  057B  0BCA               	decfsz	??_main,f
  2444  057C  2D7B               	goto	u4067
  2445  057D  0BCB               	decfsz	??_main+1,f
  2446  057E  2D7B               	goto	u4067
  2447  057F  0BCC               	decfsz	??_main+2,f
  2448  0580  2D7B               	goto	u4067
  2449                           
  2450                           ;main.c: 750: PathTo(1,0);
  2451  0581  1283               	bcf	3,5	;RP0=0, select bank0
  2452  0582  1303               	bcf	3,6	;RP1=0, select bank0
  2453  0583  01A5               	clrf	PathTo@y_target
  2454  0584  3001               	movlw	1
  2455  0585  120A  158A  2482  120A  118A  	fcall	_PathTo
  2456                           
  2457                           ;main.c: 751: TravelPath();
  2458  058A  120A  158A  236D  120A  118A  	fcall	_TravelPath
  2459  058F                     l5133:	
  2460                           
  2461                           ;main.c: 752: }
  2462                           ;main.c: 754: PB8Counter = 0;
  2463  058F  1283               	bcf	3,5	;RP0=0, select bank0
  2464  0590  1303               	bcf	3,6	;RP1=0, select bank0
  2465  0591  01D6               	clrf	_PB8Counter
  2466  0592  2BE9               	goto	l5031
  2467  0593                     __end_of_main:	
  2468                           
  2469                           	psect	text1
  2470  15AF                     __ptext1:	
  2471 ;; *************** function _setupSPI *****************
  2472 ;; Defined at:
  2473 ;;		line 4 in file "SPI.c"
  2474 ;; Parameters:    Size  Location     Type
  2475 ;;		None
  2476 ;; Auto vars:     Size  Location     Type
  2477 ;;		None
  2478 ;; Return value:  Size  Location     Type
  2479 ;;                  1    wreg      void 
  2480 ;; Registers used:
  2481 ;;		wreg
  2482 ;; Tracked objects:
  2483 ;;		On entry : 0/0
  2484 ;;		On exit  : 0/0
  2485 ;;		Unchanged: 0/0
  2486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2487 ;;      Params:         0       0       0       0       0
  2488 ;;      Locals:         0       0       0       0       0
  2489 ;;      Temps:          0       0       0       0       0
  2490 ;;      Totals:         0       0       0       0       0
  2491 ;;Total ram usage:        0 bytes
  2492 ;; Hardware stack levels used:    1
  2493 ;; Hardware stack levels required when called:    1
  2494 ;; This function calls:
  2495 ;;		Nothing
  2496 ;; This function is called by:
  2497 ;;		_main
  2498 ;; This function uses a non-reentrant model
  2499 ;;
  2500                           
  2501                           
  2502                           ;psect for function _setupSPI
  2503  15AF                     _setupSPI:	
  2504                           
  2505                           ;SPI.c: 6: TRISB = 0b00000011;
  2506                           
  2507                           ;incstack = 0
  2508                           ; Regs used in _setupSPI: [wreg]
  2509  15AF  3003               	movlw	3
  2510  15B0  1683               	bsf	3,5	;RP0=1, select bank1
  2511  15B1  1303               	bcf	3,6	;RP1=0, select bank1
  2512  15B2  0086               	movwf	6	;volatile
  2513                           
  2514                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  2515  15B3  3040               	movlw	64
  2516  15B4  0094               	movwf	20	;volatile
  2517                           
  2518                           ;SPI.c: 9: SSPCON = 0b00100000;
  2519  15B5  3020               	movlw	32
  2520  15B6  1283               	bcf	3,5	;RP0=0, select bank0
  2521  15B7  1303               	bcf	3,6	;RP1=0, select bank0
  2522  15B8  0094               	movwf	20	;volatile
  2523                           
  2524                           ;SPI.c: 10: TRISC = 0b10000000;
  2525  15B9  3080               	movlw	128
  2526  15BA  1683               	bsf	3,5	;RP0=1, select bank1
  2527  15BB  1303               	bcf	3,6	;RP1=0, select bank1
  2528  15BC  0087               	movwf	7	;volatile
  2529                           
  2530                           ;SPI.c: 11: PORTC = 0b00000011;
  2531  15BD  3003               	movlw	3
  2532  15BE  1283               	bcf	3,5	;RP0=0, select bank0
  2533  15BF  1303               	bcf	3,6	;RP1=0, select bank0
  2534  15C0  0087               	movwf	7	;volatile
  2535                           
  2536                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  2537  15C1  3004               	movlw	4
  2538  15C2  1683               	bsf	3,5	;RP0=1, select bank1
  2539  15C3  1303               	bcf	3,6	;RP1=0, select bank1
  2540  15C4  0081               	movwf	1	;volatile
  2541                           
  2542                           ;SPI.c: 16: TMR0IE = 1;
  2543  15C5  168B               	bsf	11,5	;volatile
  2544                           
  2545                           ;SPI.c: 18: (GIE = 1);
  2546  15C6  178B               	bsf	11,7	;volatile
  2547  15C7  0008               	return
  2548  15C8                     __end_of_setupSPI:	
  2549                           
  2550                           	psect	text2
  2551  080D                     __ptext2:	
  2552 ;; *************** function _setupLCD *****************
  2553 ;; Defined at:
  2554 ;;		line 86 in file "LCD.c"
  2555 ;; Parameters:    Size  Location     Type
  2556 ;;		None
  2557 ;; Auto vars:     Size  Location     Type
  2558 ;;		None
  2559 ;; Return value:  Size  Location     Type
  2560 ;;                  1    wreg      void 
  2561 ;; Registers used:
  2562 ;;		wreg, status,2, status,0, pclath, cstack
  2563 ;; Tracked objects:
  2564 ;;		On entry : 0/0
  2565 ;;		On exit  : 0/0
  2566 ;;		Unchanged: 0/0
  2567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2568 ;;      Params:         0       0       0       0       0
  2569 ;;      Locals:         0       0       0       0       0
  2570 ;;      Temps:          0       0       0       0       0
  2571 ;;      Totals:         0       0       0       0       0
  2572 ;;Total ram usage:        0 bytes
  2573 ;; Hardware stack levels used:    1
  2574 ;; Hardware stack levels required when called:    2
  2575 ;; This function calls:
  2576 ;;		_lcdWriteControl
  2577 ;; This function is called by:
  2578 ;;		_main
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           
  2583                           ;psect for function _setupLCD
  2584  080D                     _setupLCD:	
  2585                           
  2586                           ;LCD.c: 88: ADCON1 = 0b00000010;
  2587                           
  2588                           ;incstack = 0
  2589                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  2590  080D  3002               	movlw	2
  2591  080E  1683               	bsf	3,5	;RP0=1, select bank1
  2592  080F  1303               	bcf	3,6	;RP1=0, select bank1
  2593  0810  009F               	movwf	31	;volatile
  2594                           
  2595                           ;LCD.c: 90: PORTD = 0;
  2596  0811  1283               	bcf	3,5	;RP0=0, select bank0
  2597  0812  1303               	bcf	3,6	;RP1=0, select bank0
  2598  0813  0188               	clrf	8	;volatile
  2599                           
  2600                           ;LCD.c: 91: PORTE = 0;
  2601  0814  0189               	clrf	9	;volatile
  2602                           
  2603                           ;LCD.c: 93: TRISD = 0b00000000;
  2604  0815  1683               	bsf	3,5	;RP0=1, select bank1
  2605  0816  1303               	bcf	3,6	;RP1=0, select bank1
  2606  0817  0188               	clrf	8	;volatile
  2607                           
  2608                           ;LCD.c: 94: TRISE = 0b00000000;
  2609  0818  0189               	clrf	9	;volatile
  2610                           
  2611                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  2612  0819  3001               	movlw	1
  2613  081A  160A  118A  255C  120A  158A  	fcall	_lcdWriteControl
  2614                           
  2615                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  2616  081F  3038               	movlw	56
  2617  0820  160A  118A  255C  120A  158A  	fcall	_lcdWriteControl
  2618                           
  2619                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  2620  0825  300C               	movlw	12
  2621  0826  160A  118A  255C  120A  158A  	fcall	_lcdWriteControl
  2622                           
  2623                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  2624  082B  3006               	movlw	6
  2625  082C  160A  118A  255C  120A  158A  	fcall	_lcdWriteControl
  2626                           
  2627                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  2628  0831  3002               	movlw	2
  2629  0832  160A  118A  255C   	fcall	_lcdWriteControl
  2630  0835  0008               	return
  2631  0836                     __end_of_setupLCD:	
  2632                           
  2633                           	psect	text3
  2634  1599                     __ptext3:	
  2635 ;; *************** function _setupADC *****************
  2636 ;; Defined at:
  2637 ;;		line 5 in file "ADC.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;		None
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;		None
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  1    wreg      void 
  2644 ;; Registers used:
  2645 ;;		wreg, status,2
  2646 ;; Tracked objects:
  2647 ;;		On entry : 0/0
  2648 ;;		On exit  : 0/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2651 ;;      Params:         0       0       0       0       0
  2652 ;;      Locals:         0       0       0       0       0
  2653 ;;      Temps:          0       1       0       0       0
  2654 ;;      Totals:         0       1       0       0       0
  2655 ;;Total ram usage:        1 bytes
  2656 ;; Hardware stack levels used:    1
  2657 ;; Hardware stack levels required when called:    1
  2658 ;; This function calls:
  2659 ;;		Nothing
  2660 ;; This function is called by:
  2661 ;;		_main
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665                           
  2666                           ;psect for function _setupADC
  2667  1599                     _setupADC:	
  2668                           
  2669                           ;ADC.c: 6: PORTA = 0;
  2670                           
  2671                           ;incstack = 0
  2672                           ; Regs used in _setupADC: [wreg+status,2]
  2673  1599  1283               	bcf	3,5	;RP0=0, select bank0
  2674  159A  1303               	bcf	3,6	;RP1=0, select bank0
  2675  159B  0185               	clrf	5	;volatile
  2676                           
  2677                           ;ADC.c: 7: TRISA = 0b11111111;
  2678  159C  30FF               	movlw	255
  2679  159D  1683               	bsf	3,5	;RP0=1, select bank1
  2680  159E  1303               	bcf	3,6	;RP1=0, select bank1
  2681  159F  0085               	movwf	5	;volatile
  2682                           
  2683                           ;ADC.c: 10: ADCON0 = 0b10001001;
  2684  15A0  3089               	movlw	137
  2685  15A1  1283               	bcf	3,5	;RP0=0, select bank0
  2686  15A2  1303               	bcf	3,6	;RP1=0, select bank0
  2687  15A3  009F               	movwf	31	;volatile
  2688                           
  2689                           ;ADC.c: 11: ADCON1 = 0b00000010;
  2690  15A4  3002               	movlw	2
  2691  15A5  1683               	bsf	3,5	;RP0=1, select bank1
  2692  15A6  1303               	bcf	3,6	;RP1=0, select bank1
  2693  15A7  009F               	movwf	31	;volatile
  2694                           
  2695                           ;ADC.c: 13: _delay((unsigned long)((50)*(20000000/4000000.0)));
  2696  15A8  3053               	movlw	83
  2697  15A9  1283               	bcf	3,5	;RP0=0, select bank0
  2698  15AA  1303               	bcf	3,6	;RP1=0, select bank0
  2699  15AB  00A0               	movwf	??_setupADC
  2700  15AC                     u4077:	
  2701  15AC  0BA0               	decfsz	??_setupADC,f
  2702  15AD  2DAC               	goto	u4077
  2703  15AE  0008               	return
  2704  15AF                     __end_of_setupADC:	
  2705                           
  2706                           	psect	text4
  2707  1516                     __ptext4:	
  2708 ;; *************** function _ser_init *****************
  2709 ;; Defined at:
  2710 ;;		line 5 in file "ser.c"
  2711 ;; Parameters:    Size  Location     Type
  2712 ;;		None
  2713 ;; Auto vars:     Size  Location     Type
  2714 ;;		None
  2715 ;; Return value:  Size  Location     Type
  2716 ;;                  1    wreg      void 
  2717 ;; Registers used:
  2718 ;;		wreg
  2719 ;; Tracked objects:
  2720 ;;		On entry : 0/0
  2721 ;;		On exit  : 0/0
  2722 ;;		Unchanged: 0/0
  2723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2724 ;;      Params:         0       0       0       0       0
  2725 ;;      Locals:         0       0       0       0       0
  2726 ;;      Temps:          0       0       0       0       0
  2727 ;;      Totals:         0       0       0       0       0
  2728 ;;Total ram usage:        0 bytes
  2729 ;; Hardware stack levels used:    1
  2730 ;; Hardware stack levels required when called:    1
  2731 ;; This function calls:
  2732 ;;		Nothing
  2733 ;; This function is called by:
  2734 ;;		_main
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           
  2739                           ;psect for function _ser_init
  2740  1516                     _ser_init:	
  2741                           
  2742                           ;ser.c: 7: TXSTA = 0b00100100;
  2743                           
  2744                           ;incstack = 0
  2745                           ; Regs used in _ser_init: [wreg]
  2746  1516  3024               	movlw	36
  2747  1517  1683               	bsf	3,5	;RP0=1, select bank1
  2748  1518  1303               	bcf	3,6	;RP1=0, select bank1
  2749  1519  0098               	movwf	24	;volatile
  2750                           
  2751                           ;ser.c: 8: RCSTA = 0b10011000;
  2752  151A  3098               	movlw	152
  2753  151B  1283               	bcf	3,5	;RP0=0, select bank0
  2754  151C  1303               	bcf	3,6	;RP1=0, select bank0
  2755  151D  0098               	movwf	24	;volatile
  2756                           
  2757                           ;ser.c: 24: SPBRG = 20;
  2758  151E  3014               	movlw	20
  2759  151F  1683               	bsf	3,5	;RP0=1, select bank1
  2760  1520  1303               	bcf	3,6	;RP1=0, select bank1
  2761  1521  0099               	movwf	25	;volatile
  2762                           
  2763                           ;ser.c: 26: PEIE = 1;
  2764  1522  170B               	bsf	11,6	;volatile
  2765                           
  2766                           ;ser.c: 27: (GIE = 1);
  2767  1523  178B               	bsf	11,7	;volatile
  2768  1524  0008               	return
  2769  1525                     __end_of_ser_init:	
  2770                           
  2771                           	psect	text5
  2772  0A7D                     __ptext5:	
  2773 ;; *************** function _re_route *****************
  2774 ;; Defined at:
  2775 ;;		line 457 in file "main.c"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;		None
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;		None
  2780 ;; Return value:  Size  Location     Type
  2781 ;;                  1    wreg      void 
  2782 ;; Registers used:
  2783 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2784 ;; Tracked objects:
  2785 ;;		On entry : 0/0
  2786 ;;		On exit  : 0/0
  2787 ;;		Unchanged: 0/0
  2788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2789 ;;      Params:         0       0       0       0       0
  2790 ;;      Locals:         0       0       0       0       0
  2791 ;;      Temps:          0       5       0       0       0
  2792 ;;      Totals:         0       5       0       0       0
  2793 ;;Total ram usage:        5 bytes
  2794 ;; Hardware stack levels used:    1
  2795 ;; Hardware stack levels required when called:    7
  2796 ;; This function calls:
  2797 ;;		_DriveDirect
  2798 ;;		_PathTo
  2799 ;;		_TravelPath
  2800 ;;		_Turn90
  2801 ;;		___bmul
  2802 ;;		_getSensorData
  2803 ;; This function is called by:
  2804 ;;		_main
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           
  2809                           ;psect for function _re_route
  2810  0A7D                     _re_route:	
  2811                           
  2812                           ;main.c: 460: switch(orientation){
  2813                           
  2814                           ;incstack = 0
  2815                           ; Regs used in _re_route: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2816  0A7D  2AE9               	goto	l4697
  2817  0A7E                     l4687:	
  2818                           ;main.c: 461: case 0: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 4);
  2819                           
  2820  0A7E  3005               	movlw	5
  2821  0A7F  1283               	bcf	3,5	;RP0=0, select bank0
  2822  0A80  1303               	bcf	3,6	;RP1=0, select bank0
  2823  0A81  00C5               	movwf	??_re_route
  2824  0A82  0845               	movf	??_re_route,w
  2825  0A83  00A0               	movwf	___bmul@multiplicand
  2826  0A84  0863               	movf	_y,w
  2827  0A85  160A  118A  2536  120A  158A  	fcall	___bmul
  2828  0A8A  3ED6               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2829  0A8B  1283               	bcf	3,5	;RP0=0, select bank0
  2830  0A8C  1303               	bcf	3,6	;RP1=0, select bank0
  2831  0A8D  0769               	addwf	_x,w
  2832  0A8E  00C6               	movwf	??_re_route+1
  2833  0A8F  0846               	movf	??_re_route+1,w
  2834  0A90  0084               	movwf	4
  2835  0A91  1383               	bcf	3,7	;select IRP bank1
  2836  0A92  0800               	movf	0,w
  2837  0A93  3E04               	addlw	4
  2838  0A94  2AD3               	goto	L4
  2839  0A95                     l4689:	
  2840                           ;main.c: 463: case 1: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 2);
  2841                           
  2842                           ;main.c: 462: break;
  2843                           
  2844  0A95  3005               	movlw	5
  2845  0A96  00C5               	movwf	??_re_route
  2846  0A97  0845               	movf	??_re_route,w
  2847  0A98  00A0               	movwf	___bmul@multiplicand
  2848  0A99  0863               	movf	_y,w
  2849  0A9A  160A  118A  2536  120A  158A  	fcall	___bmul
  2850  0A9F  3ED6               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2851  0AA0  1283               	bcf	3,5	;RP0=0, select bank0
  2852  0AA1  1303               	bcf	3,6	;RP1=0, select bank0
  2853  0AA2  0769               	addwf	_x,w
  2854  0AA3  00C6               	movwf	??_re_route+1
  2855  0AA4  0846               	movf	??_re_route+1,w
  2856  0AA5  0084               	movwf	4
  2857  0AA6  1383               	bcf	3,7	;select IRP bank1
  2858  0AA7  0800               	movf	0,w
  2859  0AA8  3E02               	addlw	2
  2860  0AA9  2AD3               	goto	L4
  2861  0AAA                     l4691:	
  2862                           ;main.c: 465: case 2: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 1);
  2863                           
  2864                           ;main.c: 464: break;
  2865                           
  2866  0AAA  3005               	movlw	5
  2867  0AAB  00C5               	movwf	??_re_route
  2868  0AAC  0845               	movf	??_re_route,w
  2869  0AAD  00A0               	movwf	___bmul@multiplicand
  2870  0AAE  0863               	movf	_y,w
  2871  0AAF  160A  118A  2536  120A  158A  	fcall	___bmul
  2872  0AB4  3ED6               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2873  0AB5  1283               	bcf	3,5	;RP0=0, select bank0
  2874  0AB6  1303               	bcf	3,6	;RP1=0, select bank0
  2875  0AB7  0769               	addwf	_x,w
  2876  0AB8  00C6               	movwf	??_re_route+1
  2877  0AB9  0846               	movf	??_re_route+1,w
  2878  0ABA  0084               	movwf	4
  2879  0ABB  1383               	bcf	3,7	;select IRP bank1
  2880  0ABC  0800               	movf	0,w
  2881  0ABD  3E01               	addlw	1
  2882  0ABE  2AD3               	goto	L4
  2883  0ABF                     l4693:	
  2884                           ;main.c: 467: case 3: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 8);
  2885                           
  2886                           ;main.c: 466: break;
  2887                           
  2888  0ABF  3005               	movlw	5
  2889  0AC0  00C5               	movwf	??_re_route
  2890  0AC1  0845               	movf	??_re_route,w
  2891  0AC2  00A0               	movwf	___bmul@multiplicand
  2892  0AC3  0863               	movf	_y,w
  2893  0AC4  160A  118A  2536  120A  158A  	fcall	___bmul
  2894  0AC9  3ED6               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2895  0ACA  1283               	bcf	3,5	;RP0=0, select bank0
  2896  0ACB  1303               	bcf	3,6	;RP1=0, select bank0
  2897  0ACC  0769               	addwf	_x,w
  2898  0ACD  00C6               	movwf	??_re_route+1
  2899  0ACE  0846               	movf	??_re_route+1,w
  2900  0ACF  0084               	movwf	4
  2901  0AD0  1383               	bcf	3,7	;select IRP bank1
  2902  0AD1  0800               	movf	0,w
  2903  0AD2  3E08               	addlw	8
  2904  0AD3                     L4:	
  2905  0AD3  00C7               	movwf	??_re_route+2
  2906  0AD4  3005               	movlw	5
  2907  0AD5  00C8               	movwf	??_re_route+3
  2908  0AD6  0848               	movf	??_re_route+3,w
  2909  0AD7  00A0               	movwf	___bmul@multiplicand
  2910  0AD8  0863               	movf	_y,w
  2911  0AD9  160A  118A  2536  120A  158A  	fcall	___bmul
  2912  0ADE  3ED6               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2913  0ADF  1283               	bcf	3,5	;RP0=0, select bank0
  2914  0AE0  1303               	bcf	3,6	;RP1=0, select bank0
  2915  0AE1  0769               	addwf	_x,w
  2916  0AE2  00C9               	movwf	??_re_route+4
  2917  0AE3  0849               	movf	??_re_route+4,w
  2918  0AE4  0084               	movwf	4
  2919  0AE5  0847               	movf	??_re_route+2,w
  2920  0AE6  1383               	bcf	3,7	;select IRP bank1
  2921  0AE7  0080               	movwf	0
  2922                           
  2923                           ;main.c: 469: }
  2924                           
  2925                           ;main.c: 468: break;
  2926  0AE8  2AF9               	goto	l4699
  2927  0AE9                     l4697:	
  2928  0AE9  1283               	bcf	3,5	;RP0=0, select bank0
  2929  0AEA  1303               	bcf	3,6	;RP1=0, select bank0
  2930  0AEB  0867               	movf	_orientation,w
  2931                           
  2932                           ; Switch size 1, requested type "space"
  2933                           ; Number of cases is 4, Range of values is 0 to 3
  2934                           ; switch strategies available:
  2935                           ; Name         Instructions Cycles
  2936                           ; simple_byte           13     7 (average)
  2937                           ; direct_byte           20     8 (fixed)
  2938                           ; jumptable            260     6 (fixed)
  2939                           ;	Chosen strategy is simple_byte
  2940  0AEC  3A00               	xorlw	0	; case 0
  2941  0AED  1903               	skipnz
  2942  0AEE  2A7E               	goto	l4687
  2943  0AEF  3A01               	xorlw	1	; case 1
  2944  0AF0  1903               	skipnz
  2945  0AF1  2A95               	goto	l4689
  2946  0AF2  3A03               	xorlw	3	; case 2
  2947  0AF3  1903               	skipnz
  2948  0AF4  2AAA               	goto	l4691
  2949  0AF5  3A01               	xorlw	1	; case 3
  2950  0AF6  1903               	skipnz
  2951  0AF7  2ABF               	goto	l4693
  2952  0AF8  2AF9               	goto	l4699
  2953  0AF9                     l4699:	
  2954                           
  2955                           ;main.c: 471: Turn90(0);
  2956  0AF9  3000               	movlw	0
  2957  0AFA  120A  158A  21DC  120A  158A  	fcall	_Turn90
  2958                           
  2959                           ;main.c: 472: Turn90(0);
  2960  0AFF  3000               	movlw	0
  2961  0B00  120A  158A  21DC  120A  158A  	fcall	_Turn90
  2962                           
  2963                           ;main.c: 473: distance = 0;
  2964  0B05  1283               	bcf	3,5	;RP0=0, select bank0
  2965  0B06  1303               	bcf	3,6	;RP1=0, select bank0
  2966  0B07  01D1               	clrf	_distance
  2967  0B08  01D2               	clrf	_distance+1
  2968                           
  2969                           ;main.c: 474: DriveDirect(250,250);
  2970  0B09  30FA               	movlw	250
  2971  0B0A  00A1               	movwf	DriveDirect@VelocityRight
  2972  0B0B  3000               	movlw	0
  2973  0B0C  00A2               	movwf	DriveDirect@VelocityRight+1
  2974  0B0D  30FA               	movlw	250
  2975  0B0E  00A3               	movwf	DriveDirect@VelocityLeft
  2976  0B0F  3000               	movlw	0
  2977  0B10  00A4               	movwf	DriveDirect@VelocityLeft+1
  2978  0B11  120A  158A  20B4  120A  158A  	fcall	_DriveDirect
  2979  0B16                     l4707:	
  2980                           ;main.c: 475: while (distance < 500){
  2981                           
  2982  0B16  1283               	bcf	3,5	;RP0=0, select bank0
  2983  0B17  1303               	bcf	3,6	;RP1=0, select bank0
  2984  0B18  0852               	movf	_distance+1,w
  2985  0B19  3A80               	xorlw	128
  2986  0B1A  00FF               	movwf	127
  2987  0B1B  3081               	movlw	129
  2988  0B1C  027F               	subwf	127,w
  2989  0B1D  1D03               	skipz
  2990  0B1E  2B21               	goto	u3805
  2991  0B1F  30F4               	movlw	244
  2992  0B20  0251               	subwf	_distance,w
  2993  0B21                     u3805:	
  2994  0B21  1803               	btfsc	3,0
  2995  0B22  2B3A               	goto	l4709
  2996                           
  2997                           ;main.c: 476: distance = distance + getSensorData(19,2);
  2998  0B23  3002               	movlw	2
  2999  0B24  1283               	bcf	3,5	;RP0=0, select bank0
  3000  0B25  1303               	bcf	3,6	;RP1=0, select bank0
  3001  0B26  00C5               	movwf	??_re_route
  3002  0B27  0845               	movf	??_re_route,w
  3003  0B28  00A2               	movwf	getSensorData@bytes
  3004  0B29  3013               	movlw	19
  3005  0B2A  160A  118A  2681  120A  158A  	fcall	_getSensorData
  3006  0B2F  1283               	bcf	3,5	;RP0=0, select bank0
  3007  0B30  1303               	bcf	3,6	;RP1=0, select bank0
  3008  0B31  0851               	movf	_distance,w
  3009  0B32  0722               	addwf	?_getSensorData,w
  3010  0B33  00D1               	movwf	_distance
  3011  0B34  0852               	movf	_distance+1,w
  3012  0B35  1803               	skipnc
  3013  0B36  0A52               	incf	_distance+1,w
  3014  0B37  0723               	addwf	?_getSensorData+1,w
  3015  0B38  00D2               	movwf	_distance+1
  3016  0B39  2B16               	goto	l4707
  3017  0B3A                     l4709:	
  3018                           
  3019                           ;main.c: 477: }
  3020                           ;main.c: 478: DriveDirect(0,0);
  3021  0B3A  3000               	movlw	0
  3022  0B3B  1283               	bcf	3,5	;RP0=0, select bank0
  3023  0B3C  1303               	bcf	3,6	;RP1=0, select bank0
  3024  0B3D  00A1               	movwf	DriveDirect@VelocityRight
  3025  0B3E  00A2               	movwf	DriveDirect@VelocityRight+1
  3026  0B3F  3000               	movlw	0
  3027  0B40  00A3               	movwf	DriveDirect@VelocityLeft
  3028  0B41  00A4               	movwf	DriveDirect@VelocityLeft+1
  3029  0B42  120A  158A  20B4  120A  158A  	fcall	_DriveDirect
  3030                           
  3031                           ;main.c: 479: IR_Wall = 0;
  3032  0B47  1070               	bcf	_IR_Wall/(0+8),_IR_Wall& (0+7)
  3033                           
  3034                           ;main.c: 481: _delay((unsigned long)((1000)*(20000000/4000.0)));
  3035  0B48  301A               	movlw	26
  3036  0B49  1283               	bcf	3,5	;RP0=0, select bank0
  3037  0B4A  1303               	bcf	3,6	;RP1=0, select bank0
  3038  0B4B  00C7               	movwf	??_re_route+2
  3039  0B4C  305E               	movlw	94
  3040  0B4D  00C6               	movwf	??_re_route+1
  3041  0B4E  3086               	movlw	134
  3042  0B4F  00C5               	movwf	??_re_route
  3043  0B50                     u4087:	
  3044  0B50  0BC5               	decfsz	??_re_route,f
  3045  0B51  2B50               	goto	u4087
  3046  0B52  0BC6               	decfsz	??_re_route+1,f
  3047  0B53  2B50               	goto	u4087
  3048  0B54  0BC7               	decfsz	??_re_route+2,f
  3049  0B55  2B50               	goto	u4087
  3050  0B56  0000               	nop
  3051                           
  3052                           ;main.c: 482: PathTo(x_goto,y_goto);
  3053  0B57  1283               	bcf	3,5	;RP0=0, select bank0
  3054  0B58  1303               	bcf	3,6	;RP1=0, select bank0
  3055  0B59  0864               	movf	_y_goto,w
  3056  0B5A  00C5               	movwf	??_re_route
  3057  0B5B  0845               	movf	??_re_route,w
  3058  0B5C  00A5               	movwf	PathTo@y_target
  3059  0B5D  0860               	movf	_x_goto,w
  3060  0B5E  120A  158A  2482  120A  158A  	fcall	_PathTo
  3061                           
  3062                           ;main.c: 483: if (pathCountShortest != 15)
  3063  0B63  300F               	movlw	15
  3064  0B64  1283               	bcf	3,5	;RP0=0, select bank0
  3065  0B65  1303               	bcf	3,6	;RP1=0, select bank0
  3066  0B66  0668               	xorwf	_pathCountShortest,w
  3067  0B67  1903               	btfsc	3,2
  3068  0B68  0008               	return
  3069                           
  3070                           ;main.c: 484: TravelPath();
  3071  0B69  120A  158A  236D   	fcall	_TravelPath
  3072  0B6C  0008               	return
  3073  0B6D                     __end_of_re_route:	
  3074                           
  3075                           	psect	text6
  3076  0B6D                     __ptext6:	
  3077 ;; *************** function _TravelPath *****************
  3078 ;; Defined at:
  3079 ;;		line 390 in file "main.c"
  3080 ;; Parameters:    Size  Location     Type
  3081 ;;		None
  3082 ;; Auto vars:     Size  Location     Type
  3083 ;;  n               1   35[BANK0 ] unsigned char 
  3084 ;; Return value:  Size  Location     Type
  3085 ;;                  1    wreg      void 
  3086 ;; Registers used:
  3087 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3088 ;; Tracked objects:
  3089 ;;		On entry : 0/0
  3090 ;;		On exit  : 0/0
  3091 ;;		Unchanged: 0/0
  3092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3093 ;;      Params:         0       0       0       0       0
  3094 ;;      Locals:         0       1       0       0       0
  3095 ;;      Temps:          0       2       0       0       0
  3096 ;;      Totals:         0       3       0       0       0
  3097 ;;Total ram usage:        3 bytes
  3098 ;; Hardware stack levels used:    1
  3099 ;; Hardware stack levels required when called:    6
  3100 ;; This function calls:
  3101 ;;		_Drive1m
  3102 ;;		_Turn90
  3103 ;; This function is called by:
  3104 ;;		_re_route
  3105 ;;		_main
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109                           
  3110                           ;psect for function _TravelPath
  3111  0B6D                     _TravelPath:	
  3112                           
  3113                           ;main.c: 392: for (char n = 1; n <= (pathCountShortest); n++){
  3114                           
  3115                           ;incstack = 0
  3116                           ; Regs used in _TravelPath: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3117  0B6D  1283               	bcf	3,5	;RP0=0, select bank0
  3118  0B6E  1303               	bcf	3,6	;RP1=0, select bank0
  3119  0B6F  01C3               	clrf	TravelPath@n
  3120  0B70  0AC3               	incf	TravelPath@n,f
  3121  0B71                     l4683:	
  3122  0B71  0843               	movf	TravelPath@n,w
  3123  0B72  0268               	subwf	_pathCountShortest,w
  3124  0B73  1C03               	btfss	3,0
  3125  0B74  0008               	return
  3126                           
  3127                           ;main.c: 394: if (pathShortest[0][n] > x){
  3128  0B75  0843               	movf	TravelPath@n,w
  3129  0B76  3EA0               	addlw	(low (_pathShortest| 0))& (0+255)
  3130  0B77  0084               	movwf	4
  3131  0B78  1383               	bcf	3,7	;select IRP bank1
  3132  0B79  0800               	movf	0,w
  3133  0B7A  0269               	subwf	_x,w
  3134  0B7B  1C03               	btfss	3,0
  3135  0B7C  2BA4               	goto	l4613
  3136  0B7D  2BB2               	goto	l4617
  3137  0B7E                     l4601:	
  3138                           ;main.c: 396: case 0: Turn90(0);
  3139                           
  3140                           ;main.c: 395: switch (orientation){
  3141                           
  3142  0B7E  3000               	movlw	0
  3143  0B7F  120A  158A  21DC  120A  158A  	fcall	_Turn90
  3144                           
  3145                           ;main.c: 397: break;
  3146  0B84  2C6E               	goto	l4675
  3147  0B85                     l4603:	
  3148                           ;main.c: 398: case 2: Turn90(1);
  3149                           
  3150  0B85  3001               	movlw	1
  3151  0B86  120A  158A  21DC  120A  158A  	fcall	_Turn90
  3152                           
  3153                           ;main.c: 399: break;
  3154  0B8B  2C6E               	goto	l4675
  3155  0B8C                     l4605:	
  3156                           ;main.c: 400: case 3: Turn90(1);
  3157                           
  3158  0B8C  3001               	movlw	1
  3159  0B8D  120A  158A  21DC  120A  158A  	fcall	_Turn90
  3160                           
  3161                           ;main.c: 401: _delay((unsigned long)((5)*(20000000/4000.0)));
  3162  0B92  3021               	movlw	33
  3163  0B93  1283               	bcf	3,5	;RP0=0, select bank0
  3164  0B94  1303               	bcf	3,6	;RP1=0, select bank0
  3165  0B95  00C2               	movwf	??_TravelPath+1
  3166  0B96  3076               	movlw	118
  3167  0B97  00C1               	movwf	??_TravelPath
  3168  0B98                     u4097:	
  3169  0B98  0BC1               	decfsz	??_TravelPath,f
  3170  0B99  2B98               	goto	u4097
  3171  0B9A  0BC2               	decfsz	??_TravelPath+1,f
  3172  0B9B  2B98               	goto	u4097
  3173  0B9C  0000               	nop
  3174                           
  3175                           ;main.c: 402: Turn90(1);
  3176  0B9D  3001               	movlw	1
  3177  0B9E  120A  158A  21DC  120A  158A  	fcall	_Turn90
  3178                           
  3179                           ;main.c: 404: }
  3180                           
  3181                           ;main.c: 403: break;
  3182  0BA3  2C6E               	goto	l4675
  3183  0BA4                     l4613:	
  3184  0BA4  1283               	bcf	3,5	;RP0=0, select bank0
  3185  0BA5  1303               	bcf	3,6	;RP1=0, select bank0
  3186  0BA6  0867               	movf	_orientation,w
  3187                           
  3188                           ; Switch size 1, requested type "space"
  3189                           ; Number of cases is 3, Range of values is 0 to 3
  3190                           ; switch strategies available:
  3191                           ; Name         Instructions Cycles
  3192                           ; simple_byte           10     6 (average)
  3193                           ; direct_byte           20     8 (fixed)
  3194                           ; jumptable            260     6 (fixed)
  3195                           ;	Chosen strategy is simple_byte
  3196  0BA7  3A00               	xorlw	0	; case 0
  3197  0BA8  1903               	skipnz
  3198  0BA9  2B7E               	goto	l4601
  3199  0BAA  3A02               	xorlw	2	; case 2
  3200  0BAB  1903               	skipnz
  3201  0BAC  2B85               	goto	l4603
  3202  0BAD  3A01               	xorlw	1	; case 3
  3203  0BAE  1903               	skipnz
  3204  0BAF  2B8C               	goto	l4605
  3205  0BB0  2BB1               	goto	l4615
  3206  0BB1                     l4615:	
  3207  0BB1  2C6E               	goto	l4675
  3208  0BB2                     l4617:	
  3209                           ;main.c: 406: }
  3210                           
  3211                           ;main.c: 405: Drive1m();
  3212                           
  3213                           
  3214                           ;main.c: 408: else if (pathShortest[0][n] < x){
  3215  0BB2  1283               	bcf	3,5	;RP0=0, select bank0
  3216  0BB3  1303               	bcf	3,6	;RP1=0, select bank0
  3217  0BB4  0843               	movf	TravelPath@n,w
  3218  0BB5  3EA0               	addlw	(low (_pathShortest| 0))& (0+255)
  3219  0BB6  0084               	movwf	4
  3220  0BB7  0869               	movf	_x,w
  3221  0BB8  1383               	bcf	3,7	;select IRP bank1
  3222  0BB9  0200               	subwf	0,w
  3223  0BBA  1C03               	btfss	3,0
  3224  0BBB  2BE3               	goto	l4633
  3225  0BBC  2BF1               	goto	l4637
  3226  0BBD                     l4621:	
  3227                           ;main.c: 410: case 0: Turn90(1);
  3228                           
  3229                           ;main.c: 409: switch (orientation){
  3230                           
  3231  0BBD  3001               	movlw	1
  3232  0BBE  120A  158A  21DC  120A  158A  	fcall	_Turn90
  3233                           
  3234                           ;main.c: 411: break;
  3235  0BC3  2C6E               	goto	l4675
  3236  0BC4                     l4623:	
  3237                           ;main.c: 412: case 2: Turn90(0);
  3238                           
  3239  0BC4  3000               	movlw	0
  3240  0BC5  120A  158A  21DC  120A  158A  	fcall	_Turn90
  3241                           
  3242                           ;main.c: 413: break;
  3243  0BCA  2C6E               	goto	l4675
  3244  0BCB                     l4625:	
  3245                           ;main.c: 414: case 1: Turn90(1);
  3246                           
  3247  0BCB  3001               	movlw	1
  3248  0BCC  120A  158A  21DC  120A  158A  	fcall	_Turn90
  3249                           
  3250                           ;main.c: 415: _delay((unsigned long)((5)*(20000000/4000.0)));
  3251  0BD1  3021               	movlw	33
  3252  0BD2  1283               	bcf	3,5	;RP0=0, select bank0
  3253  0BD3  1303               	bcf	3,6	;RP1=0, select bank0
  3254  0BD4  00C2               	movwf	??_TravelPath+1
  3255  0BD5  3076               	movlw	118
  3256  0BD6  00C1               	movwf	??_TravelPath
  3257  0BD7                     u4107:	
  3258  0BD7  0BC1               	decfsz	??_TravelPath,f
  3259  0BD8  2BD7               	goto	u4107
  3260  0BD9  0BC2               	decfsz	??_TravelPath+1,f
  3261  0BDA  2BD7               	goto	u4107
  3262  0BDB  0000               	nop
  3263                           
  3264                           ;main.c: 416: Turn90(1);
  3265  0BDC  3001               	movlw	1
  3266  0BDD  120A  158A  21DC  120A  158A  	fcall	_Turn90
  3267                           
  3268                           ;main.c: 418: }
  3269                           
  3270                           ;main.c: 417: break;
  3271  0BE2  2C6E               	goto	l4675
  3272  0BE3                     l4633:	
  3273  0BE3  1283               	bcf	3,5	;RP0=0, select bank0
  3274  0BE4  1303               	bcf	3,6	;RP1=0, select bank0
  3275  0BE5  0867               	movf	_orientation,w
  3276                           
  3277                           ; Switch size 1, requested type "space"
  3278                           ; Number of cases is 3, Range of values is 0 to 2
  3279                           ; switch strategies available:
  3280                           ; Name         Instructions Cycles
  3281                           ; simple_byte           10     6 (average)
  3282                           ; direct_byte           17     8 (fixed)
  3283                           ; jumptable            260     6 (fixed)
  3284                           ;	Chosen strategy is simple_byte
  3285  0BE6  3A00               	xorlw	0	; case 0
  3286  0BE7  1903               	skipnz
  3287  0BE8  2BBD               	goto	l4621
  3288  0BE9  3A01               	xorlw	1	; case 1
  3289  0BEA  1903               	skipnz
  3290  0BEB  2BCB               	goto	l4625
  3291  0BEC  3A03               	xorlw	3	; case 2
  3292  0BED  1903               	skipnz
  3293  0BEE  2BC4               	goto	l4623
  3294  0BEF  2BF0               	goto	l4635
  3295  0BF0                     l4635:	
  3296  0BF0  2C6E               	goto	l4675
  3297  0BF1                     l4637:	
  3298                           ;main.c: 420: }
  3299                           
  3300                           ;main.c: 419: Drive1m();
  3301                           
  3302                           
  3303                           ;main.c: 422: else if(pathShortest[1][n] > y){
  3304  0BF1  1283               	bcf	3,5	;RP0=0, select bank0
  3305  0BF2  1303               	bcf	3,6	;RP1=0, select bank0
  3306  0BF3  0843               	movf	TravelPath@n,w
  3307  0BF4  3EB0               	addlw	(low ((_pathShortest| 0+16)))& (0+255)
  3308  0BF5  0084               	movwf	4
  3309  0BF6  1383               	bcf	3,7	;select IRP bank1
  3310  0BF7  0800               	movf	0,w
  3311  0BF8  0263               	subwf	_y,w
  3312  0BF9  1C03               	btfss	3,0
  3313  0BFA  2C22               	goto	l4653
  3314  0BFB  2C30               	goto	l4657
  3315  0BFC                     l4641:	
  3316                           ;main.c: 424: case 1: Turn90(0);
  3317                           
  3318                           ;main.c: 423: switch(orientation){
  3319                           
  3320  0BFC  3000               	movlw	0
  3321  0BFD  120A  158A  21DC  120A  158A  	fcall	_Turn90
  3322                           
  3323                           ;main.c: 425: break;
  3324  0C02  2C6E               	goto	l4675
  3325  0C03                     l4643:	
  3326                           ;main.c: 426: case 3: Turn90(1);
  3327                           
  3328  0C03  3001               	movlw	1
  3329  0C04  120A  158A  21DC  120A  158A  	fcall	_Turn90
  3330                           
  3331                           ;main.c: 427: break;
  3332  0C09  2C6E               	goto	l4675
  3333  0C0A                     l4645:	
  3334                           ;main.c: 428: case 0: Turn90(1);
  3335                           
  3336  0C0A  3001               	movlw	1
  3337  0C0B  120A  158A  21DC  120A  158A  	fcall	_Turn90
  3338                           
  3339                           ;main.c: 429: _delay((unsigned long)((5)*(20000000/4000.0)));
  3340  0C10  3021               	movlw	33
  3341  0C11  1283               	bcf	3,5	;RP0=0, select bank0
  3342  0C12  1303               	bcf	3,6	;RP1=0, select bank0
  3343  0C13  00C2               	movwf	??_TravelPath+1
  3344  0C14  3076               	movlw	118
  3345  0C15  00C1               	movwf	??_TravelPath
  3346  0C16                     u4117:	
  3347  0C16  0BC1               	decfsz	??_TravelPath,f
  3348  0C17  2C16               	goto	u4117
  3349  0C18  0BC2               	decfsz	??_TravelPath+1,f
  3350  0C19  2C16               	goto	u4117
  3351  0C1A  0000               	nop
  3352                           
  3353                           ;main.c: 430: Turn90(1);
  3354  0C1B  3001               	movlw	1
  3355  0C1C  120A  158A  21DC  120A  158A  	fcall	_Turn90
  3356                           
  3357                           ;main.c: 432: }
  3358                           
  3359                           ;main.c: 431: break;
  3360  0C21  2C6E               	goto	l4675
  3361  0C22                     l4653:	
  3362  0C22  1283               	bcf	3,5	;RP0=0, select bank0
  3363  0C23  1303               	bcf	3,6	;RP1=0, select bank0
  3364  0C24  0867               	movf	_orientation,w
  3365                           
  3366                           ; Switch size 1, requested type "space"
  3367                           ; Number of cases is 3, Range of values is 0 to 3
  3368                           ; switch strategies available:
  3369                           ; Name         Instructions Cycles
  3370                           ; simple_byte           10     6 (average)
  3371                           ; direct_byte           20     8 (fixed)
  3372                           ; jumptable            260     6 (fixed)
  3373                           ;	Chosen strategy is simple_byte
  3374  0C25  3A00               	xorlw	0	; case 0
  3375  0C26  1903               	skipnz
  3376  0C27  2C0A               	goto	l4645
  3377  0C28  3A01               	xorlw	1	; case 1
  3378  0C29  1903               	skipnz
  3379  0C2A  2BFC               	goto	l4641
  3380  0C2B  3A02               	xorlw	2	; case 3
  3381  0C2C  1903               	skipnz
  3382  0C2D  2C03               	goto	l4643
  3383  0C2E  2C2F               	goto	l4655
  3384  0C2F                     l4655:	
  3385  0C2F  2C6E               	goto	l4675
  3386  0C30                     l4657:	
  3387                           ;main.c: 434: }
  3388                           
  3389                           ;main.c: 433: Drive1m();
  3390                           
  3391                           
  3392                           ;main.c: 436: else if (pathShortest[1][n] < y){
  3393  0C30  1283               	bcf	3,5	;RP0=0, select bank0
  3394  0C31  1303               	bcf	3,6	;RP1=0, select bank0
  3395  0C32  0843               	movf	TravelPath@n,w
  3396  0C33  3EB0               	addlw	(low ((_pathShortest| 0+16)))& (0+255)
  3397  0C34  0084               	movwf	4
  3398  0C35  0863               	movf	_y,w
  3399  0C36  1383               	bcf	3,7	;select IRP bank1
  3400  0C37  0200               	subwf	0,w
  3401  0C38  1C03               	btfss	3,0
  3402  0C39  2C61               	goto	l4673
  3403  0C3A  2C73               	goto	l4677
  3404  0C3B                     l4661:	
  3405                           ;main.c: 438: case 1: Turn90(1);
  3406                           
  3407                           ;main.c: 437: switch (orientation){
  3408                           
  3409  0C3B  3001               	movlw	1
  3410  0C3C  120A  158A  21DC  120A  158A  	fcall	_Turn90
  3411                           
  3412                           ;main.c: 439: break;
  3413  0C41  2C6E               	goto	l4675
  3414  0C42                     l4663:	
  3415                           ;main.c: 440: case 3: Turn90(0);
  3416                           
  3417  0C42  3000               	movlw	0
  3418  0C43  120A  158A  21DC  120A  158A  	fcall	_Turn90
  3419                           
  3420                           ;main.c: 441: break;
  3421  0C48  2C6E               	goto	l4675
  3422  0C49                     l4665:	
  3423                           ;main.c: 442: case 2: Turn90(1);
  3424                           
  3425  0C49  3001               	movlw	1
  3426  0C4A  120A  158A  21DC  120A  158A  	fcall	_Turn90
  3427                           
  3428                           ;main.c: 443: _delay((unsigned long)((5)*(20000000/4000.0)));
  3429  0C4F  3021               	movlw	33
  3430  0C50  1283               	bcf	3,5	;RP0=0, select bank0
  3431  0C51  1303               	bcf	3,6	;RP1=0, select bank0
  3432  0C52  00C2               	movwf	??_TravelPath+1
  3433  0C53  3076               	movlw	118
  3434  0C54  00C1               	movwf	??_TravelPath
  3435  0C55                     u4127:	
  3436  0C55  0BC1               	decfsz	??_TravelPath,f
  3437  0C56  2C55               	goto	u4127
  3438  0C57  0BC2               	decfsz	??_TravelPath+1,f
  3439  0C58  2C55               	goto	u4127
  3440  0C59  0000               	nop
  3441                           
  3442                           ;main.c: 444: Turn90(1);
  3443  0C5A  3001               	movlw	1
  3444  0C5B  120A  158A  21DC  120A  158A  	fcall	_Turn90
  3445                           
  3446                           ;main.c: 446: }
  3447                           
  3448                           ;main.c: 445: break;
  3449  0C60  2C6E               	goto	l4675
  3450  0C61                     l4673:	
  3451  0C61  1283               	bcf	3,5	;RP0=0, select bank0
  3452  0C62  1303               	bcf	3,6	;RP1=0, select bank0
  3453  0C63  0867               	movf	_orientation,w
  3454                           
  3455                           ; Switch size 1, requested type "space"
  3456                           ; Number of cases is 3, Range of values is 1 to 3
  3457                           ; switch strategies available:
  3458                           ; Name         Instructions Cycles
  3459                           ; simple_byte           10     6 (average)
  3460                           ; direct_byte           20    11 (fixed)
  3461                           ; jumptable            263     9 (fixed)
  3462                           ;	Chosen strategy is simple_byte
  3463  0C64  3A01               	xorlw	1	; case 1
  3464  0C65  1903               	skipnz
  3465  0C66  2C3B               	goto	l4661
  3466  0C67  3A03               	xorlw	3	; case 2
  3467  0C68  1903               	skipnz
  3468  0C69  2C49               	goto	l4665
  3469  0C6A  3A01               	xorlw	1	; case 3
  3470  0C6B  1903               	skipnz
  3471  0C6C  2C42               	goto	l4663
  3472  0C6D  2C6E               	goto	l4675
  3473  0C6E                     l4675:	
  3474                           
  3475                           ;main.c: 447: Drive1m();
  3476  0C6E  120A  118A  2701  120A  158A  	fcall	_Drive1m
  3477  0C73                     l4677:	
  3478                           
  3479                           ;main.c: 448: }
  3480                           ;main.c: 451: if (IR_Wall == 1){
  3481  0C73  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  3482  0C74  2C7B               	goto	l4681
  3483                           
  3484                           ;main.c: 452: n = 20;
  3485  0C75  3014               	movlw	20
  3486  0C76  1283               	bcf	3,5	;RP0=0, select bank0
  3487  0C77  1303               	bcf	3,6	;RP1=0, select bank0
  3488  0C78  00C1               	movwf	??_TravelPath
  3489  0C79  0841               	movf	??_TravelPath,w
  3490  0C7A  00C3               	movwf	TravelPath@n
  3491  0C7B                     l4681:	
  3492  0C7B  3001               	movlw	1
  3493  0C7C  1283               	bcf	3,5	;RP0=0, select bank0
  3494  0C7D  1303               	bcf	3,6	;RP1=0, select bank0
  3495  0C7E  00C1               	movwf	??_TravelPath
  3496  0C7F  0841               	movf	??_TravelPath,w
  3497  0C80  07C3               	addwf	TravelPath@n,f
  3498  0C81  2B71               	goto	l4683
  3499  0C82                     __end_of_TravelPath:	
  3500                           
  3501                           	psect	text7
  3502  09DC                     __ptext7:	
  3503 ;; *************** function _Turn90 *****************
  3504 ;; Defined at:
  3505 ;;		line 359 in file "main.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;  direction       1    wreg     unsigned char 
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;  direction       1   13[BANK0 ] unsigned char 
  3510 ;; Return value:  Size  Location     Type
  3511 ;;                  1    wreg      void 
  3512 ;; Registers used:
  3513 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3514 ;; Tracked objects:
  3515 ;;		On entry : 0/0
  3516 ;;		On exit  : 0/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3519 ;;      Params:         0       0       0       0       0
  3520 ;;      Locals:         0       1       0       0       0
  3521 ;;      Temps:          0       3       0       0       0
  3522 ;;      Totals:         0       4       0       0       0
  3523 ;;Total ram usage:        4 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:    3
  3526 ;; This function calls:
  3527 ;;		_Drive
  3528 ;;		_DriveDirect
  3529 ;;		_getSensorData
  3530 ;; This function is called by:
  3531 ;;		_TravelPath
  3532 ;;		_re_route
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           
  3537                           ;psect for function _Turn90
  3538  09DC                     _Turn90:	
  3539                           
  3540                           ;incstack = 0
  3541                           ; Regs used in _Turn90: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3542                           ;Turn90@direction stored from wreg
  3543  09DC  1283               	bcf	3,5	;RP0=0, select bank0
  3544  09DD  1303               	bcf	3,6	;RP1=0, select bank0
  3545  09DE  00AD               	movwf	Turn90@direction
  3546                           
  3547                           ;main.c: 361: angle = 0;
  3548  09DF  01F7               	clrf	_angle
  3549  09E0  01F8               	clrf	_angle+1
  3550                           
  3551                           ;main.c: 363: if (direction == 1){
  3552  09E1  032D               	decf	Turn90@direction,w
  3553  09E2  1D03               	btfss	3,2
  3554  09E3  2A1D               	goto	l4313
  3555                           
  3556                           ;main.c: 365: if (orientation == 0)
  3557  09E4  0867               	movf	_orientation,w
  3558  09E5  1D03               	btfss	3,2
  3559  09E6  29EC               	goto	l4305
  3560                           
  3561                           ;main.c: 366: orientation = 3;
  3562  09E7  3003               	movlw	3
  3563  09E8  00AA               	movwf	??_Turn90
  3564  09E9  082A               	movf	??_Turn90,w
  3565  09EA  00E7               	movwf	_orientation
  3566  09EB  29EE               	goto	l4307
  3567  09EC                     l4305:	
  3568                           
  3569                           ;main.c: 367: else orientation--;
  3570  09EC  3001               	movlw	1
  3571  09ED  02E7               	subwf	_orientation,f
  3572  09EE                     l4307:	
  3573                           
  3574                           ;main.c: 369: Drive(0,150,0x00,0x01);
  3575  09EE  3096               	movlw	150
  3576  09EF  00AA               	movwf	??_Turn90
  3577  09F0  082A               	movf	??_Turn90,w
  3578  09F1  00A1               	movwf	Drive@speedL
  3579  09F2  01A2               	clrf	Drive@radH
  3580  09F3  01A3               	clrf	Drive@radL
  3581  09F4  0AA3               	incf	Drive@radL,f
  3582  09F5  3000               	movlw	0
  3583  09F6  160A  118A  2631  120A  158A  	fcall	_Drive
  3584  09FB                     l4311:	
  3585                           ;main.c: 370: while (angle < 86){
  3586                           
  3587  09FB  0878               	movf	_angle+1,w
  3588  09FC  3A80               	xorlw	128
  3589  09FD  00FF               	movwf	127
  3590  09FE  3080               	movlw	128
  3591  09FF  027F               	subwf	127,w
  3592  0A00  1D03               	skipz
  3593  0A01  2A04               	goto	u3155
  3594  0A02  3056               	movlw	86
  3595  0A03  0277               	subwf	_angle,w
  3596  0A04                     u3155:	
  3597  0A04  1803               	btfsc	3,0
  3598  0A05  2A1D               	goto	l4313
  3599                           
  3600                           ;main.c: 371: angle = angle + getSensorData(20,2);
  3601  0A06  3002               	movlw	2
  3602  0A07  1283               	bcf	3,5	;RP0=0, select bank0
  3603  0A08  1303               	bcf	3,6	;RP1=0, select bank0
  3604  0A09  00AA               	movwf	??_Turn90
  3605  0A0A  082A               	movf	??_Turn90,w
  3606  0A0B  00A2               	movwf	getSensorData@bytes
  3607  0A0C  3014               	movlw	20
  3608  0A0D  160A  118A  2681  120A  158A  	fcall	_getSensorData
  3609  0A12  0877               	movf	_angle,w
  3610  0A13  1283               	bcf	3,5	;RP0=0, select bank0
  3611  0A14  1303               	bcf	3,6	;RP1=0, select bank0
  3612  0A15  0722               	addwf	?_getSensorData,w
  3613  0A16  00F7               	movwf	_angle
  3614  0A17  0878               	movf	_angle+1,w
  3615  0A18  1803               	skipnc
  3616  0A19  0A78               	incf	_angle+1,w
  3617  0A1A  0723               	addwf	?_getSensorData+1,w
  3618  0A1B  00F8               	movwf	_angle+1
  3619  0A1C  29FB               	goto	l4311
  3620  0A1D                     l4313:	
  3621                           
  3622                           ;main.c: 372: }
  3623                           ;main.c: 373: }
  3624                           ;main.c: 375: if (direction == 0){
  3625  0A1D  1283               	bcf	3,5	;RP0=0, select bank0
  3626  0A1E  1303               	bcf	3,6	;RP1=0, select bank0
  3627  0A1F  082D               	movf	Turn90@direction,w
  3628  0A20  1D03               	btfss	3,2
  3629  0A21  2A60               	goto	l4327
  3630                           
  3631                           ;main.c: 377: if (orientation == 3)
  3632  0A22  3003               	movlw	3
  3633  0A23  0667               	xorwf	_orientation,w
  3634  0A24  1D03               	btfss	3,2
  3635  0A25  2A28               	goto	l4319
  3636                           
  3637                           ;main.c: 378: orientation = 0;
  3638  0A26  01E7               	clrf	_orientation
  3639  0A27  2A2C               	goto	l4321
  3640  0A28                     l4319:	
  3641                           
  3642                           ;main.c: 379: else orientation++;
  3643  0A28  3001               	movlw	1
  3644  0A29  00AA               	movwf	??_Turn90
  3645  0A2A  082A               	movf	??_Turn90,w
  3646  0A2B  07E7               	addwf	_orientation,f
  3647  0A2C                     l4321:	
  3648                           
  3649                           ;main.c: 381: Drive(0,150,0xFF,0xFF);
  3650  0A2C  3096               	movlw	150
  3651  0A2D  00AA               	movwf	??_Turn90
  3652  0A2E  082A               	movf	??_Turn90,w
  3653  0A2F  00A1               	movwf	Drive@speedL
  3654  0A30  30FF               	movlw	255
  3655  0A31  00AB               	movwf	??_Turn90+1
  3656  0A32  082B               	movf	??_Turn90+1,w
  3657  0A33  00A2               	movwf	Drive@radH
  3658  0A34  30FF               	movlw	255
  3659  0A35  00AC               	movwf	??_Turn90+2
  3660  0A36  082C               	movf	??_Turn90+2,w
  3661  0A37  00A3               	movwf	Drive@radL
  3662  0A38  3000               	movlw	0
  3663  0A39  160A  118A  2631  120A  158A  	fcall	_Drive
  3664  0A3E                     l4325:	
  3665                           ;main.c: 382: while (angle > -86){
  3666                           
  3667  0A3E  0878               	movf	_angle+1,w
  3668  0A3F  3A80               	xorlw	128
  3669  0A40  00FF               	movwf	127
  3670  0A41  307F               	movlw	127
  3671  0A42  027F               	subwf	127,w
  3672  0A43  1D03               	skipz
  3673  0A44  2A47               	goto	u3185
  3674  0A45  30AB               	movlw	171
  3675  0A46  0277               	subwf	_angle,w
  3676  0A47                     u3185:	
  3677  0A47  1C03               	btfss	3,0
  3678  0A48  2A60               	goto	l4327
  3679                           
  3680                           ;main.c: 383: angle = angle + getSensorData(20,2);
  3681  0A49  3002               	movlw	2
  3682  0A4A  1283               	bcf	3,5	;RP0=0, select bank0
  3683  0A4B  1303               	bcf	3,6	;RP1=0, select bank0
  3684  0A4C  00AA               	movwf	??_Turn90
  3685  0A4D  082A               	movf	??_Turn90,w
  3686  0A4E  00A2               	movwf	getSensorData@bytes
  3687  0A4F  3014               	movlw	20
  3688  0A50  160A  118A  2681  120A  158A  	fcall	_getSensorData
  3689  0A55  0877               	movf	_angle,w
  3690  0A56  1283               	bcf	3,5	;RP0=0, select bank0
  3691  0A57  1303               	bcf	3,6	;RP1=0, select bank0
  3692  0A58  0722               	addwf	?_getSensorData,w
  3693  0A59  00F7               	movwf	_angle
  3694  0A5A  0878               	movf	_angle+1,w
  3695  0A5B  1803               	skipnc
  3696  0A5C  0A78               	incf	_angle+1,w
  3697  0A5D  0723               	addwf	?_getSensorData+1,w
  3698  0A5E  00F8               	movwf	_angle+1
  3699  0A5F  2A3E               	goto	l4325
  3700  0A60                     l4327:	
  3701                           
  3702                           ;main.c: 384: }
  3703                           ;main.c: 385: }
  3704                           ;main.c: 386: DriveDirect(0,0);
  3705  0A60  3000               	movlw	0
  3706  0A61  1283               	bcf	3,5	;RP0=0, select bank0
  3707  0A62  1303               	bcf	3,6	;RP1=0, select bank0
  3708  0A63  00A1               	movwf	DriveDirect@VelocityRight
  3709  0A64  00A2               	movwf	DriveDirect@VelocityRight+1
  3710  0A65  3000               	movlw	0
  3711  0A66  00A3               	movwf	DriveDirect@VelocityLeft
  3712  0A67  00A4               	movwf	DriveDirect@VelocityLeft+1
  3713  0A68  120A  158A  20B4  120A  158A  	fcall	_DriveDirect
  3714                           
  3715                           ;main.c: 387: _delay((unsigned long)((100)*(20000000/4000.0)));
  3716  0A6D  3003               	movlw	3
  3717  0A6E  1283               	bcf	3,5	;RP0=0, select bank0
  3718  0A6F  1303               	bcf	3,6	;RP1=0, select bank0
  3719  0A70  00AC               	movwf	??_Turn90+2
  3720  0A71  308A               	movlw	138
  3721  0A72  00AB               	movwf	??_Turn90+1
  3722  0A73  3056               	movlw	86
  3723  0A74  00AA               	movwf	??_Turn90
  3724  0A75                     u4137:	
  3725  0A75  0BAA               	decfsz	??_Turn90,f
  3726  0A76  2A75               	goto	u4137
  3727  0A77  0BAB               	decfsz	??_Turn90+1,f
  3728  0A78  2A75               	goto	u4137
  3729  0A79  0BAC               	decfsz	??_Turn90+2,f
  3730  0A7A  2A75               	goto	u4137
  3731  0A7B  2A7C               	nop2
  3732  0A7C  0008               	return
  3733  0A7D                     __end_of_Turn90:	
  3734                           
  3735                           	psect	text8
  3736  1631                     __ptext8:	
  3737 ;; *************** function _Drive *****************
  3738 ;; Defined at:
  3739 ;;		line 45 in file "ser.c"
  3740 ;; Parameters:    Size  Location     Type
  3741 ;;  speedH          1    wreg     unsigned char 
  3742 ;;  speedL          1    1[BANK0 ] unsigned char 
  3743 ;;  radH            1    2[BANK0 ] unsigned char 
  3744 ;;  radL            1    3[BANK0 ] unsigned char 
  3745 ;; Auto vars:     Size  Location     Type
  3746 ;;  speedH          1    4[BANK0 ] unsigned char 
  3747 ;; Return value:  Size  Location     Type
  3748 ;;                  1    wreg      void 
  3749 ;; Registers used:
  3750 ;;		wreg, status,2, status,0, pclath, cstack
  3751 ;; Tracked objects:
  3752 ;;		On entry : 0/0
  3753 ;;		On exit  : 0/0
  3754 ;;		Unchanged: 0/0
  3755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3756 ;;      Params:         0       3       0       0       0
  3757 ;;      Locals:         0       1       0       0       0
  3758 ;;      Temps:          0       0       0       0       0
  3759 ;;      Totals:         0       4       0       0       0
  3760 ;;Total ram usage:        4 bytes
  3761 ;; Hardware stack levels used:    1
  3762 ;; Hardware stack levels required when called:    2
  3763 ;; This function calls:
  3764 ;;		_ser_putch
  3765 ;; This function is called by:
  3766 ;;		_Turn90
  3767 ;; This function uses a non-reentrant model
  3768 ;;
  3769                           
  3770                           
  3771                           ;psect for function _Drive
  3772  1631                     _Drive:	
  3773                           
  3774                           ;incstack = 0
  3775                           ; Regs used in _Drive: [wreg+status,2+status,0+pclath+cstack]
  3776                           ;Drive@speedH stored from wreg
  3777  1631  1283               	bcf	3,5	;RP0=0, select bank0
  3778  1632  1303               	bcf	3,6	;RP1=0, select bank0
  3779  1633  00A4               	movwf	Drive@speedH
  3780                           
  3781                           ;ser.c: 46: ser_putch(137);
  3782  1634  3089               	movlw	137
  3783  1635  120A  158A  2001  160A  118A  	fcall	_ser_putch
  3784                           
  3785                           ;ser.c: 47: ser_putch(speedH);
  3786  163A  1283               	bcf	3,5	;RP0=0, select bank0
  3787  163B  1303               	bcf	3,6	;RP1=0, select bank0
  3788  163C  0824               	movf	Drive@speedH,w
  3789  163D  120A  158A  2001  160A  118A  	fcall	_ser_putch
  3790                           
  3791                           ;ser.c: 48: ser_putch(speedL);
  3792  1642  1283               	bcf	3,5	;RP0=0, select bank0
  3793  1643  1303               	bcf	3,6	;RP1=0, select bank0
  3794  1644  0821               	movf	Drive@speedL,w
  3795  1645  120A  158A  2001  160A  118A  	fcall	_ser_putch
  3796                           
  3797                           ;ser.c: 49: ser_putch(radH);
  3798  164A  1283               	bcf	3,5	;RP0=0, select bank0
  3799  164B  1303               	bcf	3,6	;RP1=0, select bank0
  3800  164C  0822               	movf	Drive@radH,w
  3801  164D  120A  158A  2001  160A  118A  	fcall	_ser_putch
  3802                           
  3803                           ;ser.c: 50: ser_putch(radL);
  3804  1652  1283               	bcf	3,5	;RP0=0, select bank0
  3805  1653  1303               	bcf	3,6	;RP1=0, select bank0
  3806  1654  0823               	movf	Drive@radL,w
  3807  1655  120A  158A  2001   	fcall	_ser_putch
  3808  1658  0008               	return
  3809  1659                     __end_of_Drive:	
  3810                           
  3811                           	psect	text9
  3812  0701                     __ptext9:	
  3813 ;; *************** function _Drive1m *****************
  3814 ;; Defined at:
  3815 ;;		line 281 in file "main.c"
  3816 ;; Parameters:    Size  Location     Type
  3817 ;;		None
  3818 ;; Auto vars:     Size  Location     Type
  3819 ;;  n               1   31[BANK0 ] unsigned char 
  3820 ;;  omni_IR         1   32[BANK0 ] unsigned char 
  3821 ;; Return value:  Size  Location     Type
  3822 ;;                  1    wreg      void 
  3823 ;; Registers used:
  3824 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3825 ;; Tracked objects:
  3826 ;;		On entry : 0/0
  3827 ;;		On exit  : 0/0
  3828 ;;		Unchanged: 0/0
  3829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3830 ;;      Params:         0       0       0       0       0
  3831 ;;      Locals:         0       2       0       0       0
  3832 ;;      Temps:          0       3       0       0       0
  3833 ;;      Totals:         0       5       0       0       0
  3834 ;;Total ram usage:        5 bytes
  3835 ;; Hardware stack levels used:    1
  3836 ;; Hardware stack levels required when called:    5
  3837 ;; This function calls:
  3838 ;;		_DriveDirect
  3839 ;;		_getSensorData
  3840 ;;		_lcdWriteToDigitBCD
  3841 ;;		_ser_putch
  3842 ;;		_wallFollow
  3843 ;; This function is called by:
  3844 ;;		_TravelPath
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           
  3849                           ;psect for function _Drive1m
  3850  0701                     _Drive1m:	
  3851                           
  3852                           ;main.c: 289: distance = 0;
  3853                           
  3854                           ;incstack = 0
  3855                           ; Regs used in _Drive1m: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3856  0701  1283               	bcf	3,5	;RP0=0, select bank0
  3857  0702  1303               	bcf	3,6	;RP1=0, select bank0
  3858  0703  01D1               	clrf	_distance
  3859  0704  01D2               	clrf	_distance+1
  3860                           
  3861                           ;main.c: 291: RB2 = 1;
  3862  0705  1506               	bsf	6,2	;volatile
  3863                           
  3864                           ;main.c: 292: RB3 = 1;
  3865  0706  1586               	bsf	6,3	;volatile
  3866                           
  3867                           ;main.c: 295: while (distance < 1000){
  3868  0707  2F22               	goto	l4269
  3869  0708                     l4259:	
  3870                           ;main.c: 315: case 1: ser_putch(141);
  3871                           
  3872                           ;main.c: 314: switch(targets){
  3873                           
  3874  0708  308D               	movlw	141
  3875  0709  120A  158A  2001  120A  118A  	fcall	_ser_putch
  3876                           
  3877                           ;main.c: 316: ser_putch(5);
  3878  070E  3005               	movlw	5
  3879  070F  120A  158A  2001  120A  118A  	fcall	_ser_putch
  3880                           
  3881                           ;main.c: 317: break;
  3882  0714  2F22               	goto	l4269
  3883  0715                     l4261:	
  3884                           ;main.c: 318: case 2: ser_putch(141);
  3885                           
  3886  0715  308D               	movlw	141
  3887  0716  120A  158A  2001  120A  118A  	fcall	_ser_putch
  3888                           
  3889                           ;main.c: 319: ser_putch(3);
  3890  071B  3003               	movlw	3
  3891  071C  120A  158A  2001  120A  118A  	fcall	_ser_putch
  3892                           
  3893                           ;main.c: 320: targets_found = 1;
  3894  0721  17F0               	bsf	_targets_found/(0+8),_targets_found& (0+7)
  3895  0722                     l4269:	
  3896                           ;main.c: 322: }
  3897                           
  3898                           ;main.c: 321: break;
  3899                           
  3900  0722  1283               	bcf	3,5	;RP0=0, select bank0
  3901  0723  1303               	bcf	3,6	;RP1=0, select bank0
  3902  0724  0852               	movf	_distance+1,w
  3903  0725  3A80               	xorlw	128
  3904  0726  00FF               	movwf	127
  3905  0727  3083               	movlw	131
  3906  0728  027F               	subwf	127,w
  3907  0729  1D03               	skipz
  3908  072A  2F2D               	goto	u3105
  3909  072B  30E8               	movlw	232
  3910  072C  0251               	subwf	_distance,w
  3911  072D                     u3105:	
  3912  072D  1803               	btfsc	3,0
  3913  072E  2FA3               	goto	l4271
  3914                           
  3915                           ;main.c: 297: wallFollow();
  3916  072F  120A  118A  2593  120A  118A  	fcall	_wallFollow
  3917                           
  3918                           ;main.c: 298: distance = distance + getSensorData(19,2);
  3919  0734  3002               	movlw	2
  3920  0735  1283               	bcf	3,5	;RP0=0, select bank0
  3921  0736  1303               	bcf	3,6	;RP1=0, select bank0
  3922  0737  00BC               	movwf	??_Drive1m
  3923  0738  083C               	movf	??_Drive1m,w
  3924  0739  00A2               	movwf	getSensorData@bytes
  3925  073A  3013               	movlw	19
  3926  073B  160A  118A  2681  120A  118A  	fcall	_getSensorData
  3927  0740  1283               	bcf	3,5	;RP0=0, select bank0
  3928  0741  1303               	bcf	3,6	;RP1=0, select bank0
  3929  0742  0851               	movf	_distance,w
  3930  0743  0722               	addwf	?_getSensorData,w
  3931  0744  00D1               	movwf	_distance
  3932  0745  0852               	movf	_distance+1,w
  3933  0746  1803               	skipnc
  3934  0747  0A52               	incf	_distance+1,w
  3935  0748  0723               	addwf	?_getSensorData+1,w
  3936  0749  00D2               	movwf	_distance+1
  3937                           
  3938                           ;main.c: 301: lcdWriteToDigitBCD((getSensorData(17,1)));
  3939  074A  01A2               	clrf	getSensorData@bytes
  3940  074B  0AA2               	incf	getSensorData@bytes,f
  3941  074C  3011               	movlw	17
  3942  074D  160A  118A  2681  120A  118A  	fcall	_getSensorData
  3943  0752  1283               	bcf	3,5	;RP0=0, select bank0
  3944  0753  1303               	bcf	3,6	;RP1=0, select bank0
  3945  0754  0823               	movf	?_getSensorData+1,w
  3946  0755  00AA               	movwf	lcdWriteToDigitBCD@data+1
  3947  0756  0822               	movf	?_getSensorData,w
  3948  0757  00A9               	movwf	lcdWriteToDigitBCD@data
  3949  0758  120A  158A  2141  120A  118A  	fcall	_lcdWriteToDigitBCD
  3950                           
  3951                           ;main.c: 302: if((getSensorData(17,1)) < 240){
  3952  075D  1283               	bcf	3,5	;RP0=0, select bank0
  3953  075E  1303               	bcf	3,6	;RP1=0, select bank0
  3954  075F  01A2               	clrf	getSensorData@bytes
  3955  0760  0AA2               	incf	getSensorData@bytes,f
  3956  0761  3011               	movlw	17
  3957  0762  160A  118A  2681  120A  118A  	fcall	_getSensorData
  3958  0767  1283               	bcf	3,5	;RP0=0, select bank0
  3959  0768  1303               	bcf	3,6	;RP1=0, select bank0
  3960  0769  0823               	movf	?_getSensorData+1,w
  3961  076A  3A80               	xorlw	128
  3962  076B  00FF               	movwf	127
  3963  076C  3080               	movlw	128
  3964  076D  027F               	subwf	127,w
  3965  076E  1D03               	skipz
  3966  076F  2F72               	goto	u3075
  3967  0770  30F0               	movlw	240
  3968  0771  0222               	subwf	?_getSensorData,w
  3969  0772                     u3075:	
  3970  0772  1803               	skipnc
  3971  0773  2F7C               	goto	l4251
  3972                           
  3973                           ;main.c: 303: IR_Wall = 1;
  3974  0774  1470               	bsf	_IR_Wall/(0+8),_IR_Wall& (0+7)
  3975                           
  3976                           ;main.c: 304: distance = 1001;
  3977  0775  30E9               	movlw	233
  3978  0776  1283               	bcf	3,5	;RP0=0, select bank0
  3979  0777  1303               	bcf	3,6	;RP1=0, select bank0
  3980  0778  00D1               	movwf	_distance
  3981  0779  3003               	movlw	3
  3982  077A  00D2               	movwf	_distance+1
  3983                           
  3984                           ;main.c: 305: RB3 = 0;
  3985  077B  1186               	bcf	6,3	;volatile
  3986  077C                     l4251:	
  3987                           
  3988                           ;main.c: 306: }
  3989                           ;main.c: 309: unsigned char omni_IR = (getSensorData(17,1));
  3990  077C  1283               	bcf	3,5	;RP0=0, select bank0
  3991  077D  1303               	bcf	3,6	;RP1=0, select bank0
  3992  077E  01A2               	clrf	getSensorData@bytes
  3993  077F  0AA2               	incf	getSensorData@bytes,f
  3994  0780  3011               	movlw	17
  3995  0781  160A  118A  2681  120A  118A  	fcall	_getSensorData
  3996  0786  1283               	bcf	3,5	;RP0=0, select bank0
  3997  0787  1303               	bcf	3,6	;RP1=0, select bank0
  3998  0788  0822               	movf	?_getSensorData,w
  3999  0789  00BC               	movwf	??_Drive1m
  4000  078A  083C               	movf	??_Drive1m,w
  4001  078B  00C0               	movwf	Drive1m@omni_IR
  4002                           
  4003                           ;main.c: 310: if (omni_IR == 250 || omni_IR == 246){
  4004  078C  30FA               	movlw	250
  4005  078D  0640               	xorwf	Drive1m@omni_IR,w
  4006  078E  1903               	btfsc	3,2
  4007  078F  2F94               	goto	l4257
  4008  0790  30F6               	movlw	246
  4009  0791  0640               	xorwf	Drive1m@omni_IR,w
  4010  0792  1D03               	btfss	3,2
  4011  0793  2F22               	goto	l4269
  4012  0794                     l4257:	
  4013                           
  4014                           ;main.c: 312: targets++;
  4015  0794  3001               	movlw	1
  4016  0795  00BC               	movwf	??_Drive1m
  4017  0796  083C               	movf	??_Drive1m,w
  4018  0797  07DF               	addwf	_targets,f
  4019  0798  1283               	bcf	3,5	;RP0=0, select bank0
  4020  0799  1303               	bcf	3,6	;RP1=0, select bank0
  4021  079A  085F               	movf	_targets,w
  4022                           
  4023                           ; Switch size 1, requested type "space"
  4024                           ; Number of cases is 2, Range of values is 1 to 2
  4025                           ; switch strategies available:
  4026                           ; Name         Instructions Cycles
  4027                           ; simple_byte            7     4 (average)
  4028                           ; direct_byte           17    11 (fixed)
  4029                           ; jumptable            263     9 (fixed)
  4030                           ;	Chosen strategy is simple_byte
  4031  079B  3A01               	xorlw	1	; case 1
  4032  079C  1903               	skipnz
  4033  079D  2F08               	goto	l4259
  4034  079E  3A03               	xorlw	3	; case 2
  4035  079F  1903               	skipnz
  4036  07A0  2F15               	goto	l4261
  4037  07A1  2F22               	goto	l4269
  4038  07A2  2F22               	goto	l4269
  4039  07A3                     l4271:	
  4040                           
  4041                           ;main.c: 328: }
  4042                           ;main.c: 329: }
  4043                           ;main.c: 332: DriveDirect(0,0);
  4044  07A3  3000               	movlw	0
  4045  07A4  1283               	bcf	3,5	;RP0=0, select bank0
  4046  07A5  1303               	bcf	3,6	;RP1=0, select bank0
  4047  07A6  00A1               	movwf	DriveDirect@VelocityRight
  4048  07A7  00A2               	movwf	DriveDirect@VelocityRight+1
  4049  07A8  3000               	movlw	0
  4050  07A9  00A3               	movwf	DriveDirect@VelocityLeft
  4051  07AA  00A4               	movwf	DriveDirect@VelocityLeft+1
  4052  07AB  120A  158A  20B4  120A  118A  	fcall	_DriveDirect
  4053                           
  4054                           ;main.c: 333: _delay((unsigned long)((2000)*(20000000/4000.0)));
  4055  07B0  3033               	movlw	51
  4056  07B1  1283               	bcf	3,5	;RP0=0, select bank0
  4057  07B2  1303               	bcf	3,6	;RP1=0, select bank0
  4058  07B3  00BE               	movwf	??_Drive1m+2
  4059  07B4  30BC               	movlw	188
  4060  07B5  00BD               	movwf	??_Drive1m+1
  4061  07B6  3010               	movlw	16
  4062  07B7  00BC               	movwf	??_Drive1m
  4063  07B8                     u4147:	
  4064  07B8  0BBC               	decfsz	??_Drive1m,f
  4065  07B9  2FB8               	goto	u4147
  4066  07BA  0BBD               	decfsz	??_Drive1m+1,f
  4067  07BB  2FB8               	goto	u4147
  4068  07BC  0BBE               	decfsz	??_Drive1m+2,f
  4069  07BD  2FB8               	goto	u4147
  4070                           
  4071                           ;main.c: 335: if(IR_Wall == 0){
  4072  07BE  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  4073  07BF  2FD3               	goto	l4289
  4074  07C0  2FF0               	goto	l4293
  4075  07C1                     l4279:	
  4076                           ;main.c: 337: case 0: y--;
  4077                           
  4078                           ;main.c: 336: switch(orientation){
  4079                           
  4080  07C1  3001               	movlw	1
  4081  07C2  1283               	bcf	3,5	;RP0=0, select bank0
  4082  07C3  1303               	bcf	3,6	;RP1=0, select bank0
  4083  07C4  02E3               	subwf	_y,f
  4084                           
  4085                           ;main.c: 338: break;
  4086  07C5  2FE3               	goto	l4291
  4087  07C6                     l4281:	
  4088                           ;main.c: 339: case 1: x++;
  4089                           
  4090  07C6  3001               	movlw	1
  4091  07C7  00BC               	movwf	??_Drive1m
  4092  07C8  083C               	movf	??_Drive1m,w
  4093  07C9  07E9               	addwf	_x,f
  4094                           
  4095                           ;main.c: 340: break;
  4096  07CA  2FE3               	goto	l4291
  4097  07CB                     l4283:	
  4098                           ;main.c: 341: case 2: y++;
  4099                           
  4100  07CB  3001               	movlw	1
  4101  07CC  00BC               	movwf	??_Drive1m
  4102  07CD  083C               	movf	??_Drive1m,w
  4103  07CE  07E3               	addwf	_y,f
  4104                           
  4105                           ;main.c: 342: break;
  4106  07CF  2FE3               	goto	l4291
  4107  07D0                     l4285:	
  4108                           ;main.c: 343: case 3: x--;
  4109                           
  4110  07D0  3001               	movlw	1
  4111  07D1  02E9               	subwf	_x,f
  4112                           
  4113                           ;main.c: 345: }
  4114                           
  4115                           ;main.c: 344: break;
  4116  07D2  2FE3               	goto	l4291
  4117  07D3                     l4289:	
  4118  07D3  1283               	bcf	3,5	;RP0=0, select bank0
  4119  07D4  1303               	bcf	3,6	;RP1=0, select bank0
  4120  07D5  0867               	movf	_orientation,w
  4121                           
  4122                           ; Switch size 1, requested type "space"
  4123                           ; Number of cases is 4, Range of values is 0 to 3
  4124                           ; switch strategies available:
  4125                           ; Name         Instructions Cycles
  4126                           ; simple_byte           13     7 (average)
  4127                           ; direct_byte           20     8 (fixed)
  4128                           ; jumptable            260     6 (fixed)
  4129                           ;	Chosen strategy is simple_byte
  4130  07D6  3A00               	xorlw	0	; case 0
  4131  07D7  1903               	skipnz
  4132  07D8  2FC1               	goto	l4279
  4133  07D9  3A01               	xorlw	1	; case 1
  4134  07DA  1903               	skipnz
  4135  07DB  2FC6               	goto	l4281
  4136  07DC  3A03               	xorlw	3	; case 2
  4137  07DD  1903               	skipnz
  4138  07DE  2FCB               	goto	l4283
  4139  07DF  3A01               	xorlw	1	; case 3
  4140  07E0  1903               	skipnz
  4141  07E1  2FD0               	goto	l4285
  4142  07E2  2FE3               	goto	l4291
  4143  07E3                     l4291:	
  4144                           
  4145                           ;main.c: 346: _delay((unsigned long)((100)*(20000000/4000.0)));
  4146  07E3  3003               	movlw	3
  4147  07E4  00BE               	movwf	??_Drive1m+2
  4148  07E5  308A               	movlw	138
  4149  07E6  00BD               	movwf	??_Drive1m+1
  4150  07E7  3056               	movlw	86
  4151  07E8  00BC               	movwf	??_Drive1m
  4152  07E9                     u4157:	
  4153  07E9  0BBC               	decfsz	??_Drive1m,f
  4154  07EA  2FE9               	goto	u4157
  4155  07EB  0BBD               	decfsz	??_Drive1m+1,f
  4156  07EC  2FE9               	goto	u4157
  4157  07ED  0BBE               	decfsz	??_Drive1m+2,f
  4158  07EE  2FE9               	goto	u4157
  4159  07EF  2FF0               	nop2
  4160  07F0                     l4293:	
  4161                           
  4162                           ;main.c: 347: }
  4163                           ;main.c: 352: if (targets_found == 1){
  4164  07F0  1FF0               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  4165  07F1  0008               	return
  4166                           
  4167                           ;main.c: 353: char n = 20;
  4168  07F2  3014               	movlw	20
  4169  07F3  1283               	bcf	3,5	;RP0=0, select bank0
  4170  07F4  1303               	bcf	3,6	;RP1=0, select bank0
  4171  07F5  00BC               	movwf	??_Drive1m
  4172  07F6  083C               	movf	??_Drive1m,w
  4173  07F7  00BF               	movwf	Drive1m@n
  4174  07F8  0008               	return
  4175  07F9                     __end_of_Drive1m:	
  4176                           
  4177                           	psect	text10
  4178  0593                     __ptext10:	
  4179 ;; *************** function _wallFollow *****************
  4180 ;; Defined at:
  4181 ;;		line 14 in file "main.c"
  4182 ;; Parameters:    Size  Location     Type
  4183 ;;		None
  4184 ;; Auto vars:     Size  Location     Type
  4185 ;;  setADCdist      2   26[BANK0 ] unsigned int 
  4186 ;; Return value:  Size  Location     Type
  4187 ;;                  1    wreg      void 
  4188 ;; Registers used:
  4189 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4190 ;; Tracked objects:
  4191 ;;		On entry : 0/0
  4192 ;;		On exit  : 0/0
  4193 ;;		Unchanged: 0/0
  4194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4195 ;;      Params:         0       0       0       0       0
  4196 ;;      Locals:         0       4       0       0       0
  4197 ;;      Temps:          0       3       0       0       0
  4198 ;;      Totals:         0       7       0       0       0
  4199 ;;Total ram usage:        7 bytes
  4200 ;; Hardware stack levels used:    1
  4201 ;; Hardware stack levels required when called:    4
  4202 ;; This function calls:
  4203 ;;		_ADCMain
  4204 ;;		_DriveDirect
  4205 ;;		___lwdiv
  4206 ;;		___wmul
  4207 ;;		_stepCCW
  4208 ;;		_stepCW
  4209 ;; This function is called by:
  4210 ;;		_Drive1m
  4211 ;; This function uses a non-reentrant model
  4212 ;;
  4213                           
  4214                           
  4215                           ;psect for function _wallFollow
  4216  0593                     _wallFollow:	
  4217                           
  4218                           ;main.c: 17: unsigned int setADCdist = 150;
  4219                           
  4220                           ;incstack = 0
  4221                           ; Regs used in _wallFollow: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4222  0593  3096               	movlw	150
  4223  0594  1283               	bcf	3,5	;RP0=0, select bank0
  4224  0595  1303               	bcf	3,6	;RP1=0, select bank0
  4225  0596  00BA               	movwf	wallFollow@setADCdist
  4226  0597  3000               	movlw	0
  4227  0598  00BB               	movwf	wallFollow@setADCdist+1
  4228                           
  4229                           ;main.c: 18: leftWall = 1;
  4230  0599  15F0               	bsf	_leftWall/(0+8),_leftWall& (0+7)
  4231                           
  4232                           ;main.c: 19: ADCMain();
  4233  059A  160A  118A  2584  120A  118A  	fcall	_ADCMain
  4234                           
  4235                           ;main.c: 21: if(adcRAW < (setADCdist - 80)) {
  4236  059F  1283               	bcf	3,5	;RP0=0, select bank0
  4237  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  4238  05A1  083A               	movf	wallFollow@setADCdist,w
  4239  05A2  3EB0               	addlw	176
  4240  05A3  00B5               	movwf	??_wallFollow
  4241  05A4  083B               	movf	wallFollow@setADCdist+1,w
  4242  05A5  1803               	skipnc
  4243  05A6  3E01               	addlw	1
  4244  05A7  3EFF               	addlw	255
  4245  05A8  00B6               	movwf	??_wallFollow+1
  4246  05A9  0836               	movf	??_wallFollow+1,w
  4247  05AA  0250               	subwf	_adcRAW+1,w	;volatile
  4248  05AB  1D03               	skipz
  4249  05AC  2DAF               	goto	u2955
  4250  05AD  0835               	movf	??_wallFollow,w
  4251  05AE  024F               	subwf	_adcRAW,w	;volatile
  4252  05AF                     u2955:	
  4253  05AF  1803               	skipnc
  4254  05B0  2DF8               	goto	l4171
  4255                           
  4256                           ;main.c: 22: _delay((unsigned long)((500)*(20000000/4000.0)));
  4257  05B1  300D               	movlw	13
  4258  05B2  00B7               	movwf	??_wallFollow+2
  4259  05B3  30AF               	movlw	175
  4260  05B4  00B6               	movwf	??_wallFollow+1
  4261  05B5  30C1               	movlw	193
  4262  05B6  00B5               	movwf	??_wallFollow
  4263  05B7                     u4167:	
  4264  05B7  0BB5               	decfsz	??_wallFollow,f
  4265  05B8  2DB7               	goto	u4167
  4266  05B9  0BB6               	decfsz	??_wallFollow+1,f
  4267  05BA  2DB7               	goto	u4167
  4268  05BB  0BB7               	decfsz	??_wallFollow+2,f
  4269  05BC  2DB7               	goto	u4167
  4270  05BD  0000               	nop
  4271                           
  4272                           ;main.c: 23: stepCCW(200);
  4273  05BE  30C8               	movlw	200
  4274  05BF  1283               	bcf	3,5	;RP0=0, select bank0
  4275  05C0  1303               	bcf	3,6	;RP1=0, select bank0
  4276  05C1  00A3               	movwf	stepCCW@steps
  4277  05C2  3000               	movlw	0
  4278  05C3  00A4               	movwf	stepCCW@steps+1
  4279  05C4  160A  118A  2782  120A  118A  	fcall	_stepCCW
  4280                           
  4281                           ;main.c: 24: leftWall = 0;
  4282  05C9  11F0               	bcf	_leftWall/(0+8),_leftWall& (0+7)
  4283                           
  4284                           ;main.c: 25: ADCMain();
  4285  05CA  160A  118A  2584  120A  118A  	fcall	_ADCMain
  4286                           
  4287                           ;main.c: 27: if((adcRAW < (setADCdist - 80))){
  4288  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  4289  05D0  1303               	bcf	3,6	;RP1=0, select bank0
  4290  05D1  083A               	movf	wallFollow@setADCdist,w
  4291  05D2  3EB0               	addlw	176
  4292  05D3  00B5               	movwf	??_wallFollow
  4293  05D4  083B               	movf	wallFollow@setADCdist+1,w
  4294  05D5  1803               	skipnc
  4295  05D6  3E01               	addlw	1
  4296  05D7  3EFF               	addlw	255
  4297  05D8  00B6               	movwf	??_wallFollow+1
  4298  05D9  0836               	movf	??_wallFollow+1,w
  4299  05DA  0250               	subwf	_adcRAW+1,w	;volatile
  4300  05DB  1D03               	skipz
  4301  05DC  2DDF               	goto	u2965
  4302  05DD  0835               	movf	??_wallFollow,w
  4303  05DE  024F               	subwf	_adcRAW,w	;volatile
  4304  05DF                     u2965:	
  4305  05DF  1803               	skipnc
  4306  05E0  2EE5               	goto	l4203
  4307                           
  4308                           ;main.c: 28: stepCW(200);
  4309  05E1  30C8               	movlw	200
  4310  05E2  00A3               	movwf	stepCW@steps
  4311  05E3  3000               	movlw	0
  4312  05E4  00A4               	movwf	stepCW@steps+1
  4313  05E5  120A  158A  2036  120A  118A  	fcall	_stepCW
  4314                           
  4315                           ;main.c: 29: leftWall = 1;
  4316  05EA  15F0               	bsf	_leftWall/(0+8),_leftWall& (0+7)
  4317                           
  4318                           ;main.c: 30: ADJUSTED_SPEED_L = CURRENT_SPEED_L;
  4319  05EB  1283               	bcf	3,5	;RP0=0, select bank0
  4320  05EC  1303               	bcf	3,6	;RP1=0, select bank0
  4321  05ED  086B               	movf	_CURRENT_SPEED_L+1,w
  4322  05EE  1683               	bsf	3,5	;RP0=1, select bank1
  4323  05EF  1303               	bcf	3,6	;RP1=0, select bank1
  4324  05F0  00C1               	movwf	(_ADJUSTED_SPEED_L+1)^(0+128)
  4325  05F1  1283               	bcf	3,5	;RP0=0, select bank0
  4326  05F2  1303               	bcf	3,6	;RP1=0, select bank0
  4327  05F3  086A               	movf	_CURRENT_SPEED_L,w
  4328  05F4  1683               	bsf	3,5	;RP0=1, select bank1
  4329  05F5  1303               	bcf	3,6	;RP1=0, select bank1
  4330  05F6  00C0               	movwf	_ADJUSTED_SPEED_L^(0+128)
  4331  05F7  2E62               	goto	l4185
  4332  05F8                     l4171:	
  4333                           ;main.c: 32: }
  4334                           ;main.c: 34: }
  4335                           
  4336                           ;main.c: 31: ADJUSTED_SPEED_R = CURRENT_SPEED_R;
  4337                           
  4338                           
  4339                           ;main.c: 36: else if((adcRAW > setADCdist && leftWall) || (adcRAW < setADCdist && !leftW
      +                          all)){
  4340  05F8  1283               	bcf	3,5	;RP0=0, select bank0
  4341  05F9  0850               	movf	_adcRAW+1,w	;volatile
  4342  05FA  023B               	subwf	wallFollow@setADCdist+1,w
  4343  05FB  1D03               	skipz
  4344  05FC  2DFF               	goto	u2975
  4345  05FD  084F               	movf	_adcRAW,w	;volatile
  4346  05FE  023A               	subwf	wallFollow@setADCdist,w
  4347  05FF                     u2975:	
  4348  05FF  1803               	skipnc
  4349  0600  2E03               	goto	l4175
  4350  0601  19F0               	btfsc	_leftWall/(0+8),_leftWall& (0+7)
  4351  0602  2E0C               	goto	l4179
  4352  0603                     l4175:	
  4353  0603  083B               	movf	wallFollow@setADCdist+1,w
  4354  0604  0250               	subwf	_adcRAW+1,w	;volatile
  4355  0605  1D03               	skipz
  4356  0606  2E09               	goto	u2995
  4357  0607  083A               	movf	wallFollow@setADCdist,w
  4358  0608  024F               	subwf	_adcRAW,w	;volatile
  4359  0609                     u2995:	
  4360  0609  1C03               	btfss	3,0
  4361  060A  19F0               	btfsc	_leftWall/(0+8),_leftWall& (0+7)
  4362  060B  2E6F               	goto	l4187
  4363  060C                     l4179:	
  4364                           
  4365                           ;main.c: 38: ADC_ADJUST = adcRAW - setADCdist;
  4366  060C  093A               	comf	wallFollow@setADCdist,w
  4367  060D  00B5               	movwf	??_wallFollow
  4368  060E  093B               	comf	wallFollow@setADCdist+1,w
  4369  060F  00B6               	movwf	??_wallFollow+1
  4370  0610  0AB5               	incf	??_wallFollow,f
  4371  0611  1903               	skipnz
  4372  0612  0AB6               	incf	??_wallFollow+1,f
  4373  0613  084F               	movf	_adcRAW,w	;volatile
  4374  0614  0735               	addwf	??_wallFollow,w
  4375  0615  00CD               	movwf	_ADC_ADJUST
  4376  0616  0850               	movf	_adcRAW+1,w	;volatile
  4377  0617  1803               	skipnc
  4378  0618  0A50               	incf	_adcRAW+1,w	;volatile
  4379  0619  0736               	addwf	??_wallFollow+1,w
  4380  061A  00CE               	movwf	_ADC_ADJUST+1
  4381                           
  4382                           ;main.c: 39: ADJUSTED_SPEED_L = CURRENT_SPEED_L*(4/100)*ADC_ADJUST + ((7/3)*(CURRENT_SPE
      +                          ED_L))/(ADC_ADJUST+10);
  4383  061B  086B               	movf	_CURRENT_SPEED_L+1,w
  4384  061C  00A1               	movwf	___wmul@multiplier+1
  4385  061D  086A               	movf	_CURRENT_SPEED_L,w
  4386  061E  00A0               	movwf	___wmul@multiplier
  4387  061F  084E               	movf	_ADC_ADJUST+1,w
  4388  0620  00A3               	movwf	___wmul@multiplicand+1
  4389  0621  084D               	movf	_ADC_ADJUST,w
  4390  0622  00A2               	movwf	___wmul@multiplicand
  4391  0623  160A  118A  25E8  120A  118A  	fcall	___wmul
  4392  0628  1283               	bcf	3,5	;RP0=0, select bank0
  4393  0629  1303               	bcf	3,6	;RP1=0, select bank0
  4394  062A  0821               	movf	?___wmul+1,w
  4395  062B  00B9               	movwf	_wallFollow$964+1
  4396  062C  0820               	movf	?___wmul,w
  4397  062D  00B8               	movwf	_wallFollow$964
  4398                           
  4399                           ;main.c: 39: ADJUSTED_SPEED_L = CURRENT_SPEED_L*(4/100)*ADC_ADJUST + ((7/3)*(CURRENT_SPE
      +                          ED_L))/(ADC_ADJUST+10);
  4400  062E  0839               	movf	_wallFollow$964+1,w
  4401  062F  00A1               	movwf	___wmul@multiplier+1
  4402  0630  0838               	movf	_wallFollow$964,w
  4403  0631  00A0               	movwf	___wmul@multiplier
  4404  0632  3000               	movlw	0
  4405  0633  00A2               	movwf	___wmul@multiplicand
  4406  0634  00A3               	movwf	___wmul@multiplicand+1
  4407  0635  160A  118A  25E8  120A  118A  	fcall	___wmul
  4408  063A  1283               	bcf	3,5	;RP0=0, select bank0
  4409  063B  1303               	bcf	3,6	;RP1=0, select bank0
  4410  063C  0820               	movf	?___wmul,w
  4411  063D  00B5               	movwf	??_wallFollow
  4412  063E  0821               	movf	?___wmul+1,w
  4413  063F  00B6               	movwf	??_wallFollow+1
  4414  0640  084D               	movf	_ADC_ADJUST,w
  4415  0641  3E0A               	addlw	10
  4416  0642  00A0               	movwf	___lwdiv@divisor
  4417  0643  084E               	movf	_ADC_ADJUST+1,w
  4418  0644  1803               	skipnc
  4419  0645  3E01               	addlw	1
  4420  0646  3E00               	addlw	0
  4421  0647  00A1               	movwf	___lwdiv@divisor+1
  4422  0648  1003               	clrc
  4423  0649  0D6A               	rlf	_CURRENT_SPEED_L,w
  4424  064A  00A2               	movwf	___lwdiv@dividend
  4425  064B  0D6B               	rlf	_CURRENT_SPEED_L+1,w
  4426  064C  00A3               	movwf	___lwdiv@dividend+1
  4427  064D  160A  118A  26BF  120A  118A  	fcall	___lwdiv
  4428  0652  1283               	bcf	3,5	;RP0=0, select bank0
  4429  0653  1303               	bcf	3,6	;RP1=0, select bank0
  4430  0654  0820               	movf	?___lwdiv,w
  4431  0655  0735               	addwf	??_wallFollow,w
  4432  0656  1683               	bsf	3,5	;RP0=1, select bank1
  4433  0657  1303               	bcf	3,6	;RP1=0, select bank1
  4434  0658  00C0               	movwf	_ADJUSTED_SPEED_L^(0+128)
  4435  0659  1283               	bcf	3,5	;RP0=0, select bank0
  4436  065A  1303               	bcf	3,6	;RP1=0, select bank0
  4437  065B  0821               	movf	?___lwdiv+1,w
  4438  065C  1803               	skipnc
  4439  065D  0A21               	incf	?___lwdiv+1,w
  4440  065E  0736               	addwf	??_wallFollow+1,w
  4441  065F  1683               	bsf	3,5	;RP0=1, select bank1
  4442  0660  1303               	bcf	3,6	;RP1=0, select bank1
  4443  0661  00C1               	movwf	(_ADJUSTED_SPEED_L+1)^(0+128)
  4444  0662                     l4185:	
  4445                           
  4446                           ;main.c: 40: ADJUSTED_SPEED_R = CURRENT_SPEED_R;
  4447  0662  1283               	bcf	3,5	;RP0=0, select bank0
  4448  0663  1303               	bcf	3,6	;RP1=0, select bank0
  4449  0664  086D               	movf	_CURRENT_SPEED_R+1,w
  4450  0665  1683               	bsf	3,5	;RP0=1, select bank1
  4451  0666  1303               	bcf	3,6	;RP1=0, select bank1
  4452  0667  00C3               	movwf	(_ADJUSTED_SPEED_R+1)^(0+128)
  4453  0668  1283               	bcf	3,5	;RP0=0, select bank0
  4454  0669  1303               	bcf	3,6	;RP1=0, select bank0
  4455  066A  086C               	movf	_CURRENT_SPEED_R,w
  4456  066B  1683               	bsf	3,5	;RP0=1, select bank1
  4457  066C  1303               	bcf	3,6	;RP1=0, select bank1
  4458  066D  00C2               	movwf	_ADJUSTED_SPEED_R^(0+128)
  4459                           
  4460                           ;main.c: 41: }
  4461  066E  2EE5               	goto	l4203
  4462  066F                     l4187:	
  4463                           
  4464                           ;main.c: 43: else if ((adcRAW < setADCdist && leftWall) || (adcRAW > setADCdist && !left
      +                          Wall)){
  4465  066F  1283               	bcf	3,5	;RP0=0, select bank0
  4466  0670  083B               	movf	wallFollow@setADCdist+1,w
  4467  0671  0250               	subwf	_adcRAW+1,w	;volatile
  4468  0672  1D03               	skipz
  4469  0673  2E76               	goto	u3015
  4470  0674  083A               	movf	wallFollow@setADCdist,w
  4471  0675  024F               	subwf	_adcRAW,w	;volatile
  4472  0676                     u3015:	
  4473  0676  1803               	skipnc
  4474  0677  2E7A               	goto	l4191
  4475  0678  19F0               	btfsc	_leftWall/(0+8),_leftWall& (0+7)
  4476  0679  2E83               	goto	l4195
  4477  067A                     l4191:	
  4478  067A  0850               	movf	_adcRAW+1,w	;volatile
  4479  067B  023B               	subwf	wallFollow@setADCdist+1,w
  4480  067C  1D03               	skipz
  4481  067D  2E80               	goto	u3035
  4482  067E  084F               	movf	_adcRAW,w	;volatile
  4483  067F  023A               	subwf	wallFollow@setADCdist,w
  4484  0680                     u3035:	
  4485  0680  1C03               	btfss	3,0
  4486  0681  19F0               	btfsc	_leftWall/(0+8),_leftWall& (0+7)
  4487  0682  2EE5               	goto	l4203
  4488  0683                     l4195:	
  4489                           
  4490                           ;main.c: 45: ADC_ADJUST = setADCdist - adcRAW;
  4491  0683  094F               	comf	_adcRAW,w	;volatile
  4492  0684  00B5               	movwf	??_wallFollow
  4493  0685  0950               	comf	_adcRAW+1,w	;volatile
  4494  0686  00B6               	movwf	??_wallFollow+1
  4495  0687  0AB5               	incf	??_wallFollow,f
  4496  0688  1903               	skipnz
  4497  0689  0AB6               	incf	??_wallFollow+1,f
  4498  068A  083A               	movf	wallFollow@setADCdist,w
  4499  068B  0735               	addwf	??_wallFollow,w
  4500  068C  00CD               	movwf	_ADC_ADJUST
  4501  068D  083B               	movf	wallFollow@setADCdist+1,w
  4502  068E  1803               	skipnc
  4503  068F  0A3B               	incf	wallFollow@setADCdist+1,w
  4504  0690  0736               	addwf	??_wallFollow+1,w
  4505  0691  00CE               	movwf	_ADC_ADJUST+1
  4506                           
  4507                           ;main.c: 46: ADJUSTED_SPEED_R = CURRENT_SPEED_R*(4/100)*ADC_ADJUST + (2*(CURRENT_SPEED_R
      +                          ))/(ADC_ADJUST+10);
  4508  0692  086D               	movf	_CURRENT_SPEED_R+1,w
  4509  0693  00A1               	movwf	___wmul@multiplier+1
  4510  0694  086C               	movf	_CURRENT_SPEED_R,w
  4511  0695  00A0               	movwf	___wmul@multiplier
  4512  0696  084E               	movf	_ADC_ADJUST+1,w
  4513  0697  00A3               	movwf	___wmul@multiplicand+1
  4514  0698  084D               	movf	_ADC_ADJUST,w
  4515  0699  00A2               	movwf	___wmul@multiplicand
  4516  069A  160A  118A  25E8  120A  118A  	fcall	___wmul
  4517  069F  1283               	bcf	3,5	;RP0=0, select bank0
  4518  06A0  1303               	bcf	3,6	;RP1=0, select bank0
  4519  06A1  0821               	movf	?___wmul+1,w
  4520  06A2  00B9               	movwf	_wallFollow$964+1
  4521  06A3  0820               	movf	?___wmul,w
  4522  06A4  00B8               	movwf	_wallFollow$964
  4523                           
  4524                           ;main.c: 46: ADJUSTED_SPEED_R = CURRENT_SPEED_R*(4/100)*ADC_ADJUST + (2*(CURRENT_SPEED_R
      +                          ))/(ADC_ADJUST+10);
  4525  06A5  0839               	movf	_wallFollow$964+1,w
  4526  06A6  00A1               	movwf	___wmul@multiplier+1
  4527  06A7  0838               	movf	_wallFollow$964,w
  4528  06A8  00A0               	movwf	___wmul@multiplier
  4529  06A9  3000               	movlw	0
  4530  06AA  00A2               	movwf	___wmul@multiplicand
  4531  06AB  00A3               	movwf	___wmul@multiplicand+1
  4532  06AC  160A  118A  25E8  120A  118A  	fcall	___wmul
  4533  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  4534  06B2  1303               	bcf	3,6	;RP1=0, select bank0
  4535  06B3  0820               	movf	?___wmul,w
  4536  06B4  00B5               	movwf	??_wallFollow
  4537  06B5  0821               	movf	?___wmul+1,w
  4538  06B6  00B6               	movwf	??_wallFollow+1
  4539  06B7  084D               	movf	_ADC_ADJUST,w
  4540  06B8  3E0A               	addlw	10
  4541  06B9  00A0               	movwf	___lwdiv@divisor
  4542  06BA  084E               	movf	_ADC_ADJUST+1,w
  4543  06BB  1803               	skipnc
  4544  06BC  3E01               	addlw	1
  4545  06BD  3E00               	addlw	0
  4546  06BE  00A1               	movwf	___lwdiv@divisor+1
  4547  06BF  1003               	clrc
  4548  06C0  0D6C               	rlf	_CURRENT_SPEED_R,w
  4549  06C1  00A2               	movwf	___lwdiv@dividend
  4550  06C2  0D6D               	rlf	_CURRENT_SPEED_R+1,w
  4551  06C3  00A3               	movwf	___lwdiv@dividend+1
  4552  06C4  160A  118A  26BF  120A  118A  	fcall	___lwdiv
  4553  06C9  1283               	bcf	3,5	;RP0=0, select bank0
  4554  06CA  1303               	bcf	3,6	;RP1=0, select bank0
  4555  06CB  0820               	movf	?___lwdiv,w
  4556  06CC  0735               	addwf	??_wallFollow,w
  4557  06CD  1683               	bsf	3,5	;RP0=1, select bank1
  4558  06CE  1303               	bcf	3,6	;RP1=0, select bank1
  4559  06CF  00C2               	movwf	_ADJUSTED_SPEED_R^(0+128)
  4560  06D0  1283               	bcf	3,5	;RP0=0, select bank0
  4561  06D1  1303               	bcf	3,6	;RP1=0, select bank0
  4562  06D2  0821               	movf	?___lwdiv+1,w
  4563  06D3  1803               	skipnc
  4564  06D4  0A21               	incf	?___lwdiv+1,w
  4565  06D5  0736               	addwf	??_wallFollow+1,w
  4566  06D6  1683               	bsf	3,5	;RP0=1, select bank1
  4567  06D7  1303               	bcf	3,6	;RP1=0, select bank1
  4568  06D8  00C3               	movwf	(_ADJUSTED_SPEED_R+1)^(0+128)
  4569                           
  4570                           ;main.c: 47: ADJUSTED_SPEED_L = CURRENT_SPEED_L;
  4571  06D9  1283               	bcf	3,5	;RP0=0, select bank0
  4572  06DA  1303               	bcf	3,6	;RP1=0, select bank0
  4573  06DB  086B               	movf	_CURRENT_SPEED_L+1,w
  4574  06DC  1683               	bsf	3,5	;RP0=1, select bank1
  4575  06DD  1303               	bcf	3,6	;RP1=0, select bank1
  4576  06DE  00C1               	movwf	(_ADJUSTED_SPEED_L+1)^(0+128)
  4577  06DF  1283               	bcf	3,5	;RP0=0, select bank0
  4578  06E0  1303               	bcf	3,6	;RP1=0, select bank0
  4579  06E1  086A               	movf	_CURRENT_SPEED_L,w
  4580  06E2  1683               	bsf	3,5	;RP0=1, select bank1
  4581  06E3  1303               	bcf	3,6	;RP1=0, select bank1
  4582  06E4  00C0               	movwf	_ADJUSTED_SPEED_L^(0+128)
  4583  06E5                     l4203:	
  4584                           
  4585                           ;main.c: 48: }
  4586                           ;main.c: 50: DriveDirect(ADJUSTED_SPEED_R,ADJUSTED_SPEED_L);
  4587  06E5  1683               	bsf	3,5	;RP0=1, select bank1
  4588  06E6  1303               	bcf	3,6	;RP1=0, select bank1
  4589  06E7  0843               	movf	(_ADJUSTED_SPEED_R+1)^(0+128),w
  4590  06E8  1283               	bcf	3,5	;RP0=0, select bank0
  4591  06E9  1303               	bcf	3,6	;RP1=0, select bank0
  4592  06EA  00A2               	movwf	DriveDirect@VelocityRight+1
  4593  06EB  1683               	bsf	3,5	;RP0=1, select bank1
  4594  06EC  1303               	bcf	3,6	;RP1=0, select bank1
  4595  06ED  0842               	movf	_ADJUSTED_SPEED_R^(0+128),w
  4596  06EE  1283               	bcf	3,5	;RP0=0, select bank0
  4597  06EF  1303               	bcf	3,6	;RP1=0, select bank0
  4598  06F0  00A1               	movwf	DriveDirect@VelocityRight
  4599  06F1  1683               	bsf	3,5	;RP0=1, select bank1
  4600  06F2  1303               	bcf	3,6	;RP1=0, select bank1
  4601  06F3  0841               	movf	(_ADJUSTED_SPEED_L+1)^(0+128),w
  4602  06F4  1283               	bcf	3,5	;RP0=0, select bank0
  4603  06F5  1303               	bcf	3,6	;RP1=0, select bank0
  4604  06F6  00A4               	movwf	DriveDirect@VelocityLeft+1
  4605  06F7  1683               	bsf	3,5	;RP0=1, select bank1
  4606  06F8  1303               	bcf	3,6	;RP1=0, select bank1
  4607  06F9  0840               	movf	_ADJUSTED_SPEED_L^(0+128),w
  4608  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  4609  06FB  1303               	bcf	3,6	;RP1=0, select bank0
  4610  06FC  00A3               	movwf	DriveDirect@VelocityLeft
  4611  06FD  120A  158A  20B4   	fcall	_DriveDirect
  4612  0700  0008               	return
  4613  0701                     __end_of_wallFollow:	
  4614                           
  4615                           	psect	text11
  4616  0836                     __ptext11:	
  4617 ;; *************** function _stepCW *****************
  4618 ;; Defined at:
  4619 ;;		line 21 in file "motor.c"
  4620 ;; Parameters:    Size  Location     Type
  4621 ;;  steps           2    3[BANK0 ] int 
  4622 ;; Auto vars:     Size  Location     Type
  4623 ;;		None
  4624 ;; Return value:  Size  Location     Type
  4625 ;;                  1    wreg      void 
  4626 ;; Registers used:
  4627 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4633 ;;      Params:         0       2       0       0       0
  4634 ;;      Locals:         0       0       0       0       0
  4635 ;;      Temps:          0       3       0       0       0
  4636 ;;      Totals:         0       5       0       0       0
  4637 ;;Total ram usage:        5 bytes
  4638 ;; Hardware stack levels used:    1
  4639 ;; Hardware stack levels required when called:    2
  4640 ;; This function calls:
  4641 ;;		_spi_transfer
  4642 ;; This function is called by:
  4643 ;;		_wallFollow
  4644 ;; This function uses a non-reentrant model
  4645 ;;
  4646                           
  4647                           
  4648                           ;psect for function _stepCW
  4649  0836                     _stepCW:	
  4650                           
  4651                           ;motor.c: 23: _delay((unsigned long)((100)*(20000000/4000.0)));
  4652                           
  4653                           ;incstack = 0
  4654                           ; Regs used in _stepCW: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4655  0836  3003               	movlw	3
  4656  0837  1283               	bcf	3,5	;RP0=0, select bank0
  4657  0838  1303               	bcf	3,6	;RP1=0, select bank0
  4658  0839  00A7               	movwf	??_stepCW+2
  4659  083A  308A               	movlw	138
  4660  083B  00A6               	movwf	??_stepCW+1
  4661  083C  3056               	movlw	86
  4662  083D  00A5               	movwf	??_stepCW
  4663  083E                     u4177:	
  4664  083E  0BA5               	decfsz	??_stepCW,f
  4665  083F  283E               	goto	u4177
  4666  0840  0BA6               	decfsz	??_stepCW+1,f
  4667  0841  283E               	goto	u4177
  4668  0842  0BA7               	decfsz	??_stepCW+2,f
  4669  0843  283E               	goto	u4177
  4670  0844  2845               	nop2
  4671                           
  4672                           ;motor.c: 24: spi_transfer(0b00001101);
  4673  0845  300D               	movlw	13
  4674  0846  160A  118A  2507  120A  158A  	fcall	_spi_transfer
  4675                           
  4676                           ;motor.c: 25: _delay((unsigned long)((100)*(20000000/4000.0)));
  4677  084B  3003               	movlw	3
  4678  084C  1283               	bcf	3,5	;RP0=0, select bank0
  4679  084D  1303               	bcf	3,6	;RP1=0, select bank0
  4680  084E  00A7               	movwf	??_stepCW+2
  4681  084F  308A               	movlw	138
  4682  0850  00A6               	movwf	??_stepCW+1
  4683  0851  3056               	movlw	86
  4684  0852  00A5               	movwf	??_stepCW
  4685  0853                     u4187:	
  4686  0853  0BA5               	decfsz	??_stepCW,f
  4687  0854  2853               	goto	u4187
  4688  0855  0BA6               	decfsz	??_stepCW+1,f
  4689  0856  2853               	goto	u4187
  4690  0857  0BA7               	decfsz	??_stepCW+2,f
  4691  0858  2853               	goto	u4187
  4692  0859  285A               	nop2
  4693                           
  4694                           ;motor.c: 26: spi_transfer(0b00001101);
  4695  085A  300D               	movlw	13
  4696  085B  160A  118A  2507  120A  158A  	fcall	_spi_transfer
  4697                           
  4698                           ;motor.c: 27: _delay((unsigned long)((100)*(20000000/4000.0)));
  4699  0860  3003               	movlw	3
  4700  0861  1283               	bcf	3,5	;RP0=0, select bank0
  4701  0862  1303               	bcf	3,6	;RP1=0, select bank0
  4702  0863  00A7               	movwf	??_stepCW+2
  4703  0864  308A               	movlw	138
  4704  0865  00A6               	movwf	??_stepCW+1
  4705  0866  3056               	movlw	86
  4706  0867  00A5               	movwf	??_stepCW
  4707  0868                     u4197:	
  4708  0868  0BA5               	decfsz	??_stepCW,f
  4709  0869  2868               	goto	u4197
  4710  086A  0BA6               	decfsz	??_stepCW+1,f
  4711  086B  2868               	goto	u4197
  4712  086C  0BA7               	decfsz	??_stepCW+2,f
  4713  086D  2868               	goto	u4197
  4714  086E  286F               	nop2
  4715                           
  4716                           ;motor.c: 28: spi_transfer(0b00001101);
  4717  086F  300D               	movlw	13
  4718  0870  160A  118A  2507  120A  158A  	fcall	_spi_transfer
  4719                           
  4720                           ;motor.c: 29: _delay((unsigned long)((100)*(20000000/4000.0)));
  4721  0875  3003               	movlw	3
  4722  0876  1283               	bcf	3,5	;RP0=0, select bank0
  4723  0877  1303               	bcf	3,6	;RP1=0, select bank0
  4724  0878  00A7               	movwf	??_stepCW+2
  4725  0879  308A               	movlw	138
  4726  087A  00A6               	movwf	??_stepCW+1
  4727  087B  3056               	movlw	86
  4728  087C  00A5               	movwf	??_stepCW
  4729  087D                     u4207:	
  4730  087D  0BA5               	decfsz	??_stepCW,f
  4731  087E  287D               	goto	u4207
  4732  087F  0BA6               	decfsz	??_stepCW+1,f
  4733  0880  287D               	goto	u4207
  4734  0881  0BA7               	decfsz	??_stepCW+2,f
  4735  0882  287D               	goto	u4207
  4736  0883  2884               	nop2
  4737                           
  4738                           ;motor.c: 31: for (loop=steps; loop > 0; loop--){
  4739  0884  1283               	bcf	3,5	;RP0=0, select bank0
  4740  0885  1303               	bcf	3,6	;RP1=0, select bank0
  4741  0886  0824               	movf	stepCW@steps+1,w
  4742  0887  1683               	bsf	3,5	;RP0=1, select bank1
  4743  0888  1303               	bcf	3,6	;RP1=0, select bank1
  4744  0889  00CB               	movwf	(_loop+1)^(0+128)
  4745  088A  1283               	bcf	3,5	;RP0=0, select bank0
  4746  088B  1303               	bcf	3,6	;RP1=0, select bank0
  4747  088C  0823               	movf	stepCW@steps,w
  4748  088D  1683               	bsf	3,5	;RP0=1, select bank1
  4749  088E  1303               	bcf	3,6	;RP1=0, select bank1
  4750  088F  00CA               	movwf	_loop^(0+128)
  4751  0890                     l4053:	
  4752  0890  084B               	movf	(_loop+1)^(0+128),w
  4753  0891  3A80               	xorlw	128
  4754  0892  00FF               	movwf	127
  4755  0893  3080               	movlw	128
  4756  0894  027F               	subwf	127,w
  4757  0895  1D03               	skipz
  4758  0896  2899               	goto	u2765
  4759  0897  3001               	movlw	1
  4760  0898  024A               	subwf	_loop^(0+128),w
  4761  0899                     u2765:	
  4762  0899  1C03               	btfss	3,0
  4763  089A  0008               	return
  4764                           
  4765                           ;motor.c: 32: RC2 = 1; __nop(); RC2 = 0;;
  4766  089B  1283               	bcf	3,5	;RP0=0, select bank0
  4767  089C  1303               	bcf	3,6	;RP1=0, select bank0
  4768  089D  1507               	bsf	7,2	;volatile
  4769  089E  0000               	nop
  4770  089F  1283               	bcf	3,5	;RP0=0, select bank0
  4771  08A0  1303               	bcf	3,6	;RP1=0, select bank0
  4772  08A1  1107               	bcf	7,2	;volatile
  4773                           
  4774                           ;motor.c: 33: _delay((unsigned long)((3)*(20000000/4000.0)));
  4775  08A2  3014               	movlw	20
  4776  08A3  00A6               	movwf	??_stepCW+1
  4777  08A4  3079               	movlw	121
  4778  08A5  00A5               	movwf	??_stepCW
  4779  08A6                     u4217:	
  4780  08A6  0BA5               	decfsz	??_stepCW,f
  4781  08A7  28A6               	goto	u4217
  4782  08A8  0BA6               	decfsz	??_stepCW+1,f
  4783  08A9  28A6               	goto	u4217
  4784  08AA  28AB               	nop2
  4785  08AB  30FF               	movlw	255
  4786  08AC  1683               	bsf	3,5	;RP0=1, select bank1
  4787  08AD  1303               	bcf	3,6	;RP1=0, select bank1
  4788  08AE  07CA               	addwf	_loop^(0+128),f
  4789  08AF  1803               	skipnc
  4790  08B0  0ACB               	incf	(_loop+1)^(0+128),f
  4791  08B1  30FF               	movlw	255
  4792  08B2  07CB               	addwf	(_loop+1)^(0+128),f
  4793  08B3  2890               	goto	l4053
  4794  08B4                     __end_of_stepCW:	
  4795                           
  4796                           	psect	text12
  4797  1782                     __ptext12:	
  4798 ;; *************** function _stepCCW *****************
  4799 ;; Defined at:
  4800 ;;		line 5 in file "motor.c"
  4801 ;; Parameters:    Size  Location     Type
  4802 ;;  steps           2    3[BANK0 ] int 
  4803 ;; Auto vars:     Size  Location     Type
  4804 ;;		None
  4805 ;; Return value:  Size  Location     Type
  4806 ;;                  1    wreg      void 
  4807 ;; Registers used:
  4808 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4809 ;; Tracked objects:
  4810 ;;		On entry : 0/0
  4811 ;;		On exit  : 0/0
  4812 ;;		Unchanged: 0/0
  4813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4814 ;;      Params:         0       2       0       0       0
  4815 ;;      Locals:         0       0       0       0       0
  4816 ;;      Temps:          0       3       0       0       0
  4817 ;;      Totals:         0       5       0       0       0
  4818 ;;Total ram usage:        5 bytes
  4819 ;; Hardware stack levels used:    1
  4820 ;; Hardware stack levels required when called:    2
  4821 ;; This function calls:
  4822 ;;		_spi_transfer
  4823 ;; This function is called by:
  4824 ;;		_wallFollow
  4825 ;; This function uses a non-reentrant model
  4826 ;;
  4827                           
  4828                           
  4829                           ;psect for function _stepCCW
  4830  1782                     _stepCCW:	
  4831                           
  4832                           ;motor.c: 7: _delay((unsigned long)((100)*(20000000/4000.0)));
  4833                           
  4834                           ;incstack = 0
  4835                           ; Regs used in _stepCCW: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4836  1782  3003               	movlw	3
  4837  1783  1283               	bcf	3,5	;RP0=0, select bank0
  4838  1784  1303               	bcf	3,6	;RP1=0, select bank0
  4839  1785  00A7               	movwf	??_stepCCW+2
  4840  1786  308A               	movlw	138
  4841  1787  00A6               	movwf	??_stepCCW+1
  4842  1788  3056               	movlw	86
  4843  1789  00A5               	movwf	??_stepCCW
  4844  178A                     u4227:	
  4845  178A  0BA5               	decfsz	??_stepCCW,f
  4846  178B  2F8A               	goto	u4227
  4847  178C  0BA6               	decfsz	??_stepCCW+1,f
  4848  178D  2F8A               	goto	u4227
  4849  178E  0BA7               	decfsz	??_stepCCW+2,f
  4850  178F  2F8A               	goto	u4227
  4851  1790  2F91               	nop2
  4852                           
  4853                           ;motor.c: 8: spi_transfer(0b00001111);
  4854  1791  300F               	movlw	15
  4855  1792  160A  118A  2507  160A  118A  	fcall	_spi_transfer
  4856                           
  4857                           ;motor.c: 9: _delay((unsigned long)((100)*(20000000/4000.0)));
  4858  1797  3003               	movlw	3
  4859  1798  1283               	bcf	3,5	;RP0=0, select bank0
  4860  1799  1303               	bcf	3,6	;RP1=0, select bank0
  4861  179A  00A7               	movwf	??_stepCCW+2
  4862  179B  308A               	movlw	138
  4863  179C  00A6               	movwf	??_stepCCW+1
  4864  179D  3056               	movlw	86
  4865  179E  00A5               	movwf	??_stepCCW
  4866  179F                     u4237:	
  4867  179F  0BA5               	decfsz	??_stepCCW,f
  4868  17A0  2F9F               	goto	u4237
  4869  17A1  0BA6               	decfsz	??_stepCCW+1,f
  4870  17A2  2F9F               	goto	u4237
  4871  17A3  0BA7               	decfsz	??_stepCCW+2,f
  4872  17A4  2F9F               	goto	u4237
  4873  17A5  2FA6               	nop2
  4874                           
  4875                           ;motor.c: 10: spi_transfer(0b00001111);
  4876  17A6  300F               	movlw	15
  4877  17A7  160A  118A  2507  160A  118A  	fcall	_spi_transfer
  4878                           
  4879                           ;motor.c: 11: _delay((unsigned long)((100)*(20000000/4000.0)));
  4880  17AC  3003               	movlw	3
  4881  17AD  1283               	bcf	3,5	;RP0=0, select bank0
  4882  17AE  1303               	bcf	3,6	;RP1=0, select bank0
  4883  17AF  00A7               	movwf	??_stepCCW+2
  4884  17B0  308A               	movlw	138
  4885  17B1  00A6               	movwf	??_stepCCW+1
  4886  17B2  3056               	movlw	86
  4887  17B3  00A5               	movwf	??_stepCCW
  4888  17B4                     u4247:	
  4889  17B4  0BA5               	decfsz	??_stepCCW,f
  4890  17B5  2FB4               	goto	u4247
  4891  17B6  0BA6               	decfsz	??_stepCCW+1,f
  4892  17B7  2FB4               	goto	u4247
  4893  17B8  0BA7               	decfsz	??_stepCCW+2,f
  4894  17B9  2FB4               	goto	u4247
  4895  17BA  2FBB               	nop2
  4896                           
  4897                           ;motor.c: 12: spi_transfer(0b00001111);
  4898  17BB  300F               	movlw	15
  4899  17BC  160A  118A  2507  160A  118A  	fcall	_spi_transfer
  4900                           
  4901                           ;motor.c: 13: _delay((unsigned long)((100)*(20000000/4000.0)));
  4902  17C1  3003               	movlw	3
  4903  17C2  1283               	bcf	3,5	;RP0=0, select bank0
  4904  17C3  1303               	bcf	3,6	;RP1=0, select bank0
  4905  17C4  00A7               	movwf	??_stepCCW+2
  4906  17C5  308A               	movlw	138
  4907  17C6  00A6               	movwf	??_stepCCW+1
  4908  17C7  3056               	movlw	86
  4909  17C8  00A5               	movwf	??_stepCCW
  4910  17C9                     u4257:	
  4911  17C9  0BA5               	decfsz	??_stepCCW,f
  4912  17CA  2FC9               	goto	u4257
  4913  17CB  0BA6               	decfsz	??_stepCCW+1,f
  4914  17CC  2FC9               	goto	u4257
  4915  17CD  0BA7               	decfsz	??_stepCCW+2,f
  4916  17CE  2FC9               	goto	u4257
  4917  17CF  2FD0               	nop2
  4918                           
  4919                           ;motor.c: 15: for (loop=steps; loop > 0; loop--){
  4920  17D0  1283               	bcf	3,5	;RP0=0, select bank0
  4921  17D1  1303               	bcf	3,6	;RP1=0, select bank0
  4922  17D2  0824               	movf	stepCCW@steps+1,w
  4923  17D3  1683               	bsf	3,5	;RP0=1, select bank1
  4924  17D4  1303               	bcf	3,6	;RP1=0, select bank1
  4925  17D5  00CB               	movwf	(_loop+1)^(0+128)
  4926  17D6  1283               	bcf	3,5	;RP0=0, select bank0
  4927  17D7  1303               	bcf	3,6	;RP1=0, select bank0
  4928  17D8  0823               	movf	stepCCW@steps,w
  4929  17D9  1683               	bsf	3,5	;RP0=1, select bank1
  4930  17DA  1303               	bcf	3,6	;RP1=0, select bank1
  4931  17DB  00CA               	movwf	_loop^(0+128)
  4932  17DC                     l4039:	
  4933  17DC  084B               	movf	(_loop+1)^(0+128),w
  4934  17DD  3A80               	xorlw	128
  4935  17DE  00FF               	movwf	127
  4936  17DF  3080               	movlw	128
  4937  17E0  027F               	subwf	127,w
  4938  17E1  1D03               	skipz
  4939  17E2  2FE5               	goto	u2755
  4940  17E3  3001               	movlw	1
  4941  17E4  024A               	subwf	_loop^(0+128),w
  4942  17E5                     u2755:	
  4943  17E5  1C03               	btfss	3,0
  4944  17E6  0008               	return
  4945                           
  4946                           ;motor.c: 16: RC2 = 1; __nop(); RC2 = 0;;
  4947  17E7  1283               	bcf	3,5	;RP0=0, select bank0
  4948  17E8  1303               	bcf	3,6	;RP1=0, select bank0
  4949  17E9  1507               	bsf	7,2	;volatile
  4950  17EA  0000               	nop
  4951  17EB  1283               	bcf	3,5	;RP0=0, select bank0
  4952  17EC  1303               	bcf	3,6	;RP1=0, select bank0
  4953  17ED  1107               	bcf	7,2	;volatile
  4954                           
  4955                           ;motor.c: 17: _delay((unsigned long)((3)*(20000000/4000.0)));
  4956  17EE  3014               	movlw	20
  4957  17EF  00A6               	movwf	??_stepCCW+1
  4958  17F0  3079               	movlw	121
  4959  17F1  00A5               	movwf	??_stepCCW
  4960  17F2                     u4267:	
  4961  17F2  0BA5               	decfsz	??_stepCCW,f
  4962  17F3  2FF2               	goto	u4267
  4963  17F4  0BA6               	decfsz	??_stepCCW+1,f
  4964  17F5  2FF2               	goto	u4267
  4965  17F6  2FF7               	nop2
  4966  17F7  30FF               	movlw	255
  4967  17F8  1683               	bsf	3,5	;RP0=1, select bank1
  4968  17F9  1303               	bcf	3,6	;RP1=0, select bank1
  4969  17FA  07CA               	addwf	_loop^(0+128),f
  4970  17FB  1803               	skipnc
  4971  17FC  0ACB               	incf	(_loop+1)^(0+128),f
  4972  17FD  30FF               	movlw	255
  4973  17FE  07CB               	addwf	(_loop+1)^(0+128),f
  4974  17FF  2FDC               	goto	l4039
  4975  1800                     __end_of_stepCCW:	
  4976                           
  4977                           	psect	text13
  4978  1507                     __ptext13:	
  4979 ;; *************** function _spi_transfer *****************
  4980 ;; Defined at:
  4981 ;;		line 22 in file "SPI.c"
  4982 ;; Parameters:    Size  Location     Type
  4983 ;;  data            1    wreg     unsigned char 
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;  data            1    2[BANK0 ] unsigned char 
  4986 ;;  temp            1    1[BANK0 ] unsigned char 
  4987 ;; Return value:  Size  Location     Type
  4988 ;;                  1    wreg      unsigned char 
  4989 ;; Registers used:
  4990 ;;		wreg, status,2
  4991 ;; Tracked objects:
  4992 ;;		On entry : 0/0
  4993 ;;		On exit  : 0/0
  4994 ;;		Unchanged: 0/0
  4995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4996 ;;      Params:         0       0       0       0       0
  4997 ;;      Locals:         0       2       0       0       0
  4998 ;;      Temps:          0       1       0       0       0
  4999 ;;      Totals:         0       3       0       0       0
  5000 ;;Total ram usage:        3 bytes
  5001 ;; Hardware stack levels used:    1
  5002 ;; Hardware stack levels required when called:    1
  5003 ;; This function calls:
  5004 ;;		Nothing
  5005 ;; This function is called by:
  5006 ;;		_main
  5007 ;;		_stepCCW
  5008 ;;		_stepCW
  5009 ;; This function uses a non-reentrant model
  5010 ;;
  5011                           
  5012                           
  5013                           ;psect for function _spi_transfer
  5014  1507                     _spi_transfer:	
  5015                           
  5016                           ;incstack = 0
  5017                           ; Regs used in _spi_transfer: [wreg+status,2]
  5018                           ;spi_transfer@data stored from wreg
  5019  1507  1283               	bcf	3,5	;RP0=0, select bank0
  5020  1508  1303               	bcf	3,6	;RP1=0, select bank0
  5021  1509  00A2               	movwf	spi_transfer@data
  5022                           
  5023                           ;SPI.c: 23: unsigned char temp = 0;
  5024  150A  01A1               	clrf	spi_transfer@temp
  5025                           
  5026                           ;SPI.c: 25: SSPIF = 0;
  5027  150B  118C               	bcf	12,3	;volatile
  5028                           
  5029                           ;SPI.c: 26: SSPBUF = data;
  5030  150C  0822               	movf	spi_transfer@data,w
  5031  150D  0093               	movwf	19	;volatile
  5032  150E                     l1014:	
  5033                           ;SPI.c: 28: while (SSPIF == 0);
  5034                           
  5035  150E  1D8C               	btfss	12,3	;volatile
  5036  150F  2D0E               	goto	l1014
  5037                           
  5038                           ;SPI.c: 29: temp = SSPBUF;
  5039  1510  0813               	movf	19,w	;volatile
  5040  1511  00A0               	movwf	??_spi_transfer
  5041  1512  0820               	movf	??_spi_transfer,w
  5042  1513  00A1               	movwf	spi_transfer@temp
  5043                           
  5044                           ;SPI.c: 30: SSPIF = 0;
  5045  1514  118C               	bcf	12,3	;volatile
  5046  1515  0008               	return
  5047  1516                     __end_of_spi_transfer:	
  5048                           ;SPI.c: 32: return temp;
  5049                           ;	Return value of _spi_transfer is never used
  5050                           
  5051                           
  5052                           	psect	text14
  5053  15E8                     __ptext14:	
  5054 ;; *************** function ___wmul *****************
  5055 ;; Defined at:
  5056 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  5057 ;; Parameters:    Size  Location     Type
  5058 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5059 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5060 ;; Auto vars:     Size  Location     Type
  5061 ;;  product         2    4[BANK0 ] unsigned int 
  5062 ;; Return value:  Size  Location     Type
  5063 ;;                  2    0[BANK0 ] unsigned int 
  5064 ;; Registers used:
  5065 ;;		wreg, status,2, status,0
  5066 ;; Tracked objects:
  5067 ;;		On entry : 0/0
  5068 ;;		On exit  : 0/0
  5069 ;;		Unchanged: 0/0
  5070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5071 ;;      Params:         0       4       0       0       0
  5072 ;;      Locals:         0       2       0       0       0
  5073 ;;      Temps:          0       0       0       0       0
  5074 ;;      Totals:         0       6       0       0       0
  5075 ;;Total ram usage:        6 bytes
  5076 ;; Hardware stack levels used:    1
  5077 ;; Hardware stack levels required when called:    1
  5078 ;; This function calls:
  5079 ;;		Nothing
  5080 ;; This function is called by:
  5081 ;;		_wallFollow
  5082 ;; This function uses a non-reentrant model
  5083 ;;
  5084                           
  5085                           
  5086                           ;psect for function ___wmul
  5087  15E8                     ___wmul:	
  5088                           
  5089                           ;incstack = 0
  5090                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5091  15E8  1283               	bcf	3,5	;RP0=0, select bank0
  5092  15E9  1303               	bcf	3,6	;RP1=0, select bank0
  5093  15EA  01A4               	clrf	___wmul@product
  5094  15EB  01A5               	clrf	___wmul@product+1
  5095  15EC                     l4107:	
  5096  15EC  1C20               	btfss	___wmul@multiplier,0
  5097  15ED  2DF4               	goto	l1101
  5098  15EE  0822               	movf	___wmul@multiplicand,w
  5099  15EF  07A4               	addwf	___wmul@product,f
  5100  15F0  1803               	skipnc
  5101  15F1  0AA5               	incf	___wmul@product+1,f
  5102  15F2  0823               	movf	___wmul@multiplicand+1,w
  5103  15F3  07A5               	addwf	___wmul@product+1,f
  5104  15F4                     l1101:	
  5105  15F4  3001               	movlw	1
  5106  15F5                     u2855:	
  5107  15F5  1003               	clrc
  5108  15F6  0DA2               	rlf	___wmul@multiplicand,f
  5109  15F7  0DA3               	rlf	___wmul@multiplicand+1,f
  5110  15F8  3EFF               	addlw	-1
  5111  15F9  1D03               	skipz
  5112  15FA  2DF5               	goto	u2855
  5113  15FB  3001               	movlw	1
  5114  15FC                     u2865:	
  5115  15FC  1003               	clrc
  5116  15FD  0CA1               	rrf	___wmul@multiplier+1,f
  5117  15FE  0CA0               	rrf	___wmul@multiplier,f
  5118  15FF  3EFF               	addlw	-1
  5119  1600  1D03               	skipz
  5120  1601  2DFC               	goto	u2865
  5121  1602  0820               	movf	___wmul@multiplier,w
  5122  1603  0421               	iorwf	___wmul@multiplier+1,w
  5123  1604  1D03               	btfss	3,2
  5124  1605  2DEC               	goto	l4107
  5125  1606  0825               	movf	___wmul@product+1,w
  5126  1607  00A1               	movwf	?___wmul+1
  5127  1608  0824               	movf	___wmul@product,w
  5128  1609  00A0               	movwf	?___wmul
  5129  160A  0008               	return
  5130  160B                     __end_of___wmul:	
  5131                           
  5132                           	psect	text15
  5133  16BF                     __ptext15:	
  5134 ;; *************** function ___lwdiv *****************
  5135 ;; Defined at:
  5136 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  5137 ;; Parameters:    Size  Location     Type
  5138 ;;  divisor         2    0[BANK0 ] unsigned int 
  5139 ;;  dividend        2    2[BANK0 ] unsigned int 
  5140 ;; Auto vars:     Size  Location     Type
  5141 ;;  quotient        2    6[BANK0 ] unsigned int 
  5142 ;;  counter         1    5[BANK0 ] unsigned char 
  5143 ;; Return value:  Size  Location     Type
  5144 ;;                  2    0[BANK0 ] unsigned int 
  5145 ;; Registers used:
  5146 ;;		wreg, status,2, status,0
  5147 ;; Tracked objects:
  5148 ;;		On entry : 0/0
  5149 ;;		On exit  : 0/0
  5150 ;;		Unchanged: 0/0
  5151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5152 ;;      Params:         0       4       0       0       0
  5153 ;;      Locals:         0       3       0       0       0
  5154 ;;      Temps:          0       1       0       0       0
  5155 ;;      Totals:         0       8       0       0       0
  5156 ;;Total ram usage:        8 bytes
  5157 ;; Hardware stack levels used:    1
  5158 ;; Hardware stack levels required when called:    1
  5159 ;; This function calls:
  5160 ;;		Nothing
  5161 ;; This function is called by:
  5162 ;;		_wallFollow
  5163 ;; This function uses a non-reentrant model
  5164 ;;
  5165                           
  5166                           
  5167                           ;psect for function ___lwdiv
  5168  16BF                     ___lwdiv:	
  5169                           
  5170                           ;incstack = 0
  5171                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5172  16BF  1283               	bcf	3,5	;RP0=0, select bank0
  5173  16C0  1303               	bcf	3,6	;RP1=0, select bank0
  5174  16C1  01A6               	clrf	___lwdiv@quotient
  5175  16C2  01A7               	clrf	___lwdiv@quotient+1
  5176  16C3  0820               	movf	___lwdiv@divisor,w
  5177  16C4  0421               	iorwf	___lwdiv@divisor+1,w
  5178  16C5  1903               	btfsc	3,2
  5179  16C6  2EF8               	goto	l4141
  5180  16C7  01A5               	clrf	___lwdiv@counter
  5181  16C8  0AA5               	incf	___lwdiv@counter,f
  5182  16C9                     l4129:	
  5183  16C9  1BA1               	btfsc	___lwdiv@divisor+1,7
  5184  16CA  2ED7               	goto	l4131
  5185  16CB  3001               	movlw	1
  5186  16CC                     u2895:	
  5187  16CC  1003               	clrc
  5188  16CD  0DA0               	rlf	___lwdiv@divisor,f
  5189  16CE  0DA1               	rlf	___lwdiv@divisor+1,f
  5190  16CF  3EFF               	addlw	-1
  5191  16D0  1D03               	skipz
  5192  16D1  2ECC               	goto	u2895
  5193  16D2  3001               	movlw	1
  5194  16D3  00A4               	movwf	??___lwdiv
  5195  16D4  0824               	movf	??___lwdiv,w
  5196  16D5  07A5               	addwf	___lwdiv@counter,f
  5197  16D6  2EC9               	goto	l4129
  5198  16D7                     l4131:	
  5199  16D7  3001               	movlw	1
  5200  16D8                     u2915:	
  5201  16D8  1003               	clrc
  5202  16D9  0DA6               	rlf	___lwdiv@quotient,f
  5203  16DA  0DA7               	rlf	___lwdiv@quotient+1,f
  5204  16DB  3EFF               	addlw	-1
  5205  16DC  1D03               	skipz
  5206  16DD  2ED8               	goto	u2915
  5207  16DE  0821               	movf	___lwdiv@divisor+1,w
  5208  16DF  0223               	subwf	___lwdiv@dividend+1,w
  5209  16E0  1D03               	skipz
  5210  16E1  2EE4               	goto	u2925
  5211  16E2  0820               	movf	___lwdiv@divisor,w
  5212  16E3  0222               	subwf	___lwdiv@dividend,w
  5213  16E4                     u2925:	
  5214  16E4  1C03               	skipc
  5215  16E5  2EED               	goto	l4137
  5216  16E6  0820               	movf	___lwdiv@divisor,w
  5217  16E7  02A2               	subwf	___lwdiv@dividend,f
  5218  16E8  0821               	movf	___lwdiv@divisor+1,w
  5219  16E9  1C03               	skipc
  5220  16EA  03A3               	decf	___lwdiv@dividend+1,f
  5221  16EB  02A3               	subwf	___lwdiv@dividend+1,f
  5222  16EC  1426               	bsf	___lwdiv@quotient,0
  5223  16ED                     l4137:	
  5224  16ED  3001               	movlw	1
  5225  16EE                     u2935:	
  5226  16EE  1003               	clrc
  5227  16EF  0CA1               	rrf	___lwdiv@divisor+1,f
  5228  16F0  0CA0               	rrf	___lwdiv@divisor,f
  5229  16F1  3EFF               	addlw	-1
  5230  16F2  1D03               	skipz
  5231  16F3  2EEE               	goto	u2935
  5232  16F4  3001               	movlw	1
  5233  16F5  02A5               	subwf	___lwdiv@counter,f
  5234  16F6  1D03               	btfss	3,2
  5235  16F7  2ED7               	goto	l4131
  5236  16F8                     l4141:	
  5237  16F8  0827               	movf	___lwdiv@quotient+1,w
  5238  16F9  00A1               	movwf	?___lwdiv+1
  5239  16FA  0826               	movf	___lwdiv@quotient,w
  5240  16FB  00A0               	movwf	?___lwdiv
  5241  16FC  0008               	return
  5242  16FD                     __end_of___lwdiv:	
  5243                           
  5244                           	psect	text16
  5245  08B4                     __ptext16:	
  5246 ;; *************** function _DriveDirect *****************
  5247 ;; Defined at:
  5248 ;;		line 54 in file "ser.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;  VelocityRigh    2    1[BANK0 ] int 
  5251 ;;  VelocityLeft    2    3[BANK0 ] int 
  5252 ;; Auto vars:     Size  Location     Type
  5253 ;;  data            2    8[BANK0 ] unsigned int 
  5254 ;;  data            2    6[BANK0 ] unsigned int 
  5255 ;; Return value:  Size  Location     Type
  5256 ;;                  1    wreg      void 
  5257 ;; Registers used:
  5258 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5259 ;; Tracked objects:
  5260 ;;		On entry : 0/0
  5261 ;;		On exit  : 0/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5264 ;;      Params:         0       4       0       0       0
  5265 ;;      Locals:         0       4       0       0       0
  5266 ;;      Temps:          0       1       0       0       0
  5267 ;;      Totals:         0       9       0       0       0
  5268 ;;Total ram usage:        9 bytes
  5269 ;; Hardware stack levels used:    1
  5270 ;; Hardware stack levels required when called:    2
  5271 ;; This function calls:
  5272 ;;		_ser_putch
  5273 ;; This function is called by:
  5274 ;;		_wallFollow
  5275 ;;		_Drive1m
  5276 ;;		_Turn90
  5277 ;;		_re_route
  5278 ;;		_main
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           
  5283                           ;psect for function _DriveDirect
  5284  08B4                     _DriveDirect:	
  5285                           
  5286                           ;ser.c: 55: RightSpeedH = 0;
  5287                           
  5288                           ;incstack = 0
  5289                           ; Regs used in _DriveDirect: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5290  08B4  1283               	bcf	3,5	;RP0=0, select bank0
  5291  08B5  1303               	bcf	3,6	;RP1=0, select bank0
  5292  08B6  01D7               	clrf	_RightSpeedH
  5293                           
  5294                           ;ser.c: 56: LeftSpeedH = 0;
  5295  08B7  01D3               	clrf	_LeftSpeedH
  5296                           
  5297                           ;ser.c: 58: if(VelocityRight > 255){
  5298  08B8  0822               	movf	DriveDirect@VelocityRight+1,w
  5299  08B9  3A80               	xorlw	128
  5300  08BA  00FF               	movwf	127
  5301  08BB  3081               	movlw	129
  5302  08BC  027F               	subwf	127,w
  5303  08BD  1D03               	skipz
  5304  08BE  28C1               	goto	u2775
  5305  08BF  3000               	movlw	0
  5306  08C0  0221               	subwf	DriveDirect@VelocityRight,w
  5307  08C1                     u2775:	
  5308  08C1  1C03               	skipc
  5309  08C2  28E4               	goto	l4071
  5310                           
  5311                           ;ser.c: 59: unsigned int data = VelocityRight;
  5312  08C3  1283               	bcf	3,5	;RP0=0, select bank0
  5313  08C4  1303               	bcf	3,6	;RP1=0, select bank0
  5314  08C5  0822               	movf	DriveDirect@VelocityRight+1,w
  5315  08C6  00A7               	movwf	DriveDirect@data+1
  5316  08C7  0821               	movf	DriveDirect@VelocityRight,w
  5317  08C8  00A6               	movwf	DriveDirect@data
  5318                           
  5319                           ;ser.c: 60: for (RightSpeedH = 0; data > 255; RightSpeedH++){
  5320  08C9  01D7               	clrf	_RightSpeedH
  5321  08CA  3001               	movlw	1
  5322  08CB  0227               	subwf	DriveDirect@data+1,w
  5323  08CC  3000               	movlw	0
  5324  08CD  1903               	skipnz
  5325  08CE  0226               	subwf	DriveDirect@data,w
  5326  08CF  1C03               	btfss	3,0
  5327  08D0  28E4               	goto	l4071
  5328  08D1                     l4067:	
  5329                           
  5330                           ;ser.c: 61: data = data - 256;
  5331  08D1  0826               	movf	DriveDirect@data,w
  5332  08D2  3E00               	addlw	0
  5333  08D3  00A6               	movwf	DriveDirect@data
  5334  08D4  0827               	movf	DriveDirect@data+1,w
  5335  08D5  1803               	skipnc
  5336  08D6  3E01               	addlw	1
  5337  08D7  3EFF               	addlw	255
  5338  08D8  00A7               	movwf	DriveDirect@data+1
  5339  08D9  3001               	movlw	1
  5340  08DA  00A5               	movwf	??_DriveDirect
  5341  08DB  0825               	movf	??_DriveDirect,w
  5342  08DC  07D7               	addwf	_RightSpeedH,f
  5343  08DD  3001               	movlw	1
  5344  08DE  0227               	subwf	DriveDirect@data+1,w
  5345  08DF  3000               	movlw	0
  5346  08E0  1903               	skipnz
  5347  08E1  0226               	subwf	DriveDirect@data,w
  5348  08E2  1803               	skipnc
  5349  08E3  28D1               	goto	l4067
  5350  08E4                     l4071:	
  5351                           
  5352                           ;ser.c: 62: }
  5353                           ;ser.c: 63: }
  5354                           ;ser.c: 64: RightSpeedL = VelocityRight;
  5355  08E4  1283               	bcf	3,5	;RP0=0, select bank0
  5356  08E5  1303               	bcf	3,6	;RP1=0, select bank0
  5357  08E6  0821               	movf	DriveDirect@VelocityRight,w
  5358  08E7  00A5               	movwf	??_DriveDirect
  5359  08E8  0825               	movf	??_DriveDirect,w
  5360  08E9  00D8               	movwf	_RightSpeedL
  5361                           
  5362                           ;ser.c: 67: if(VelocityLeft > 255){
  5363  08EA  0824               	movf	DriveDirect@VelocityLeft+1,w
  5364  08EB  3A80               	xorlw	128
  5365  08EC  00FF               	movwf	127
  5366  08ED  3081               	movlw	129
  5367  08EE  027F               	subwf	127,w
  5368  08EF  1D03               	skipz
  5369  08F0  28F3               	goto	u2805
  5370  08F1  3000               	movlw	0
  5371  08F2  0223               	subwf	DriveDirect@VelocityLeft,w
  5372  08F3                     u2805:	
  5373  08F3  1C03               	skipc
  5374  08F4  2916               	goto	l4087
  5375                           
  5376                           ;ser.c: 68: unsigned int data = VelocityLeft;
  5377  08F5  1283               	bcf	3,5	;RP0=0, select bank0
  5378  08F6  1303               	bcf	3,6	;RP1=0, select bank0
  5379  08F7  0824               	movf	DriveDirect@VelocityLeft+1,w
  5380  08F8  00A9               	movwf	DriveDirect@data_494+1
  5381  08F9  0823               	movf	DriveDirect@VelocityLeft,w
  5382  08FA  00A8               	movwf	DriveDirect@data_494
  5383                           
  5384                           ;ser.c: 69: for (LeftSpeedH = 0; data > 255; LeftSpeedH++){
  5385  08FB  01D3               	clrf	_LeftSpeedH
  5386  08FC  3001               	movlw	1
  5387  08FD  0229               	subwf	DriveDirect@data_494+1,w
  5388  08FE  3000               	movlw	0
  5389  08FF  1903               	skipnz
  5390  0900  0228               	subwf	DriveDirect@data_494,w
  5391  0901  1C03               	btfss	3,0
  5392  0902  2916               	goto	l4087
  5393  0903                     l4083:	
  5394                           
  5395                           ;ser.c: 70: data = data - 256;
  5396  0903  0828               	movf	DriveDirect@data_494,w
  5397  0904  3E00               	addlw	0
  5398  0905  00A8               	movwf	DriveDirect@data_494
  5399  0906  0829               	movf	DriveDirect@data_494+1,w
  5400  0907  1803               	skipnc
  5401  0908  3E01               	addlw	1
  5402  0909  3EFF               	addlw	255
  5403  090A  00A9               	movwf	DriveDirect@data_494+1
  5404  090B  3001               	movlw	1
  5405  090C  00A5               	movwf	??_DriveDirect
  5406  090D  0825               	movf	??_DriveDirect,w
  5407  090E  07D3               	addwf	_LeftSpeedH,f
  5408  090F  3001               	movlw	1
  5409  0910  0229               	subwf	DriveDirect@data_494+1,w
  5410  0911  3000               	movlw	0
  5411  0912  1903               	skipnz
  5412  0913  0228               	subwf	DriveDirect@data_494,w
  5413  0914  1803               	skipnc
  5414  0915  2903               	goto	l4083
  5415  0916                     l4087:	
  5416                           
  5417                           ;ser.c: 71: }
  5418                           ;ser.c: 72: }
  5419                           ;ser.c: 73: LeftSpeedL = VelocityLeft;
  5420  0916  1283               	bcf	3,5	;RP0=0, select bank0
  5421  0917  1303               	bcf	3,6	;RP1=0, select bank0
  5422  0918  0823               	movf	DriveDirect@VelocityLeft,w
  5423  0919  00A5               	movwf	??_DriveDirect
  5424  091A  0825               	movf	??_DriveDirect,w
  5425  091B  00D4               	movwf	_LeftSpeedL
  5426                           
  5427                           ;ser.c: 76: ser_putch(145);
  5428  091C  3091               	movlw	145
  5429  091D  120A  158A  2001  120A  158A  	fcall	_ser_putch
  5430                           
  5431                           ;ser.c: 77: ser_putch(RightSpeedH);
  5432  0922  1283               	bcf	3,5	;RP0=0, select bank0
  5433  0923  1303               	bcf	3,6	;RP1=0, select bank0
  5434  0924  0857               	movf	_RightSpeedH,w
  5435  0925  120A  158A  2001  120A  158A  	fcall	_ser_putch
  5436                           
  5437                           ;ser.c: 78: ser_putch(RightSpeedL);
  5438  092A  1283               	bcf	3,5	;RP0=0, select bank0
  5439  092B  1303               	bcf	3,6	;RP1=0, select bank0
  5440  092C  0858               	movf	_RightSpeedL,w
  5441  092D  120A  158A  2001  120A  158A  	fcall	_ser_putch
  5442                           
  5443                           ;ser.c: 79: ser_putch(LeftSpeedH);
  5444  0932  1283               	bcf	3,5	;RP0=0, select bank0
  5445  0933  1303               	bcf	3,6	;RP1=0, select bank0
  5446  0934  0853               	movf	_LeftSpeedH,w
  5447  0935  120A  158A  2001  120A  158A  	fcall	_ser_putch
  5448                           
  5449                           ;ser.c: 80: ser_putch(LeftSpeedL);
  5450  093A  1283               	bcf	3,5	;RP0=0, select bank0
  5451  093B  1303               	bcf	3,6	;RP1=0, select bank0
  5452  093C  0854               	movf	_LeftSpeedL,w
  5453  093D  120A  158A  2001   	fcall	_ser_putch
  5454  0940  0008               	return
  5455  0941                     __end_of_DriveDirect:	
  5456                           
  5457                           	psect	text17
  5458  1584                     __ptext17:	
  5459 ;; *************** function _ADCMain *****************
  5460 ;; Defined at:
  5461 ;;		line 16 in file "ADC.c"
  5462 ;; Parameters:    Size  Location     Type
  5463 ;;		None
  5464 ;; Auto vars:     Size  Location     Type
  5465 ;;		None
  5466 ;; Return value:  Size  Location     Type
  5467 ;;                  1    wreg      void 
  5468 ;; Registers used:
  5469 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5470 ;; Tracked objects:
  5471 ;;		On entry : 0/0
  5472 ;;		On exit  : 0/0
  5473 ;;		Unchanged: 0/0
  5474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5475 ;;      Params:         0       0       0       0       0
  5476 ;;      Locals:         0       0       0       0       0
  5477 ;;      Temps:          0       0       0       0       0
  5478 ;;      Totals:         0       0       0       0       0
  5479 ;;Total ram usage:        0 bytes
  5480 ;; Hardware stack levels used:    1
  5481 ;; Hardware stack levels required when called:    3
  5482 ;; This function calls:
  5483 ;;		_getADC
  5484 ;;		_lcdSetCursor
  5485 ;;		_lcdWriteToDigitBCD
  5486 ;; This function is called by:
  5487 ;;		_wallFollow
  5488 ;; This function uses a non-reentrant model
  5489 ;;
  5490                           
  5491                           
  5492                           ;psect for function _ADCMain
  5493  1584                     _ADCMain:	
  5494                           
  5495                           ;ADC.c: 18: getADC();
  5496                           
  5497                           ;incstack = 0
  5498                           ; Regs used in _ADCMain: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5499  1584  160A  118A  273D  160A  118A  	fcall	_getADC
  5500                           
  5501                           ;ADC.c: 19: lcdSetCursor(0b10000000);
  5502  1589  3080               	movlw	128
  5503  158A  160A  118A  24F4  160A  118A  	fcall	_lcdSetCursor
  5504                           
  5505                           ;ADC.c: 20: lcdWriteToDigitBCD(adcRAW);
  5506  158F  1283               	bcf	3,5	;RP0=0, select bank0
  5507  1590  1303               	bcf	3,6	;RP1=0, select bank0
  5508  1591  0850               	movf	_adcRAW+1,w	;volatile
  5509  1592  00AA               	movwf	lcdWriteToDigitBCD@data+1
  5510  1593  084F               	movf	_adcRAW,w	;volatile
  5511  1594  00A9               	movwf	lcdWriteToDigitBCD@data
  5512  1595  120A  158A  2141   	fcall	_lcdWriteToDigitBCD
  5513  1598  0008               	return
  5514  1599                     __end_of_ADCMain:	
  5515                           
  5516                           	psect	text18
  5517  0941                     __ptext18:	
  5518 ;; *************** function _lcdWriteToDigitBCD *****************
  5519 ;; Defined at:
  5520 ;;		line 38 in file "LCD.c"
  5521 ;; Parameters:    Size  Location     Type
  5522 ;;  data            2    9[BANK0 ] unsigned int 
  5523 ;; Auto vars:     Size  Location     Type
  5524 ;;  OnesDigit       2   19[BANK0 ] unsigned int 
  5525 ;;  TenThouDigit    2   17[BANK0 ] unsigned int 
  5526 ;;  ThouDigit       2   15[BANK0 ] unsigned int 
  5527 ;;  HunsDigit       2   13[BANK0 ] unsigned int 
  5528 ;;  TensDigit       2   11[BANK0 ] unsigned int 
  5529 ;; Return value:  Size  Location     Type
  5530 ;;                  1    wreg      void 
  5531 ;; Registers used:
  5532 ;;		wreg, status,2, status,0, pclath, cstack
  5533 ;; Tracked objects:
  5534 ;;		On entry : 0/0
  5535 ;;		On exit  : 0/0
  5536 ;;		Unchanged: 0/0
  5537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5538 ;;      Params:         0       2       0       0       0
  5539 ;;      Locals:         0      10       0       0       0
  5540 ;;      Temps:          0       0       0       0       0
  5541 ;;      Totals:         0      12       0       0       0
  5542 ;;Total ram usage:       12 bytes
  5543 ;; Hardware stack levels used:    1
  5544 ;; Hardware stack levels required when called:    2
  5545 ;; This function calls:
  5546 ;;		_lcdWriteData
  5547 ;; This function is called by:
  5548 ;;		_Drive1m
  5549 ;;		_ADCMain
  5550 ;; This function uses a non-reentrant model
  5551 ;;
  5552                           
  5553                           
  5554                           ;psect for function _lcdWriteToDigitBCD
  5555  0941                     _lcdWriteToDigitBCD:	
  5556                           
  5557                           ;LCD.c: 39: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  5558                           ;LCD.c: 42: OnesDigit = data;
  5559                           
  5560                           ;incstack = 0
  5561                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  5562  0941  1283               	bcf	3,5	;RP0=0, select bank0
  5563  0942  1303               	bcf	3,6	;RP1=0, select bank0
  5564  0943  082A               	movf	lcdWriteToDigitBCD@data+1,w
  5565  0944  00B4               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  5566  0945  0829               	movf	lcdWriteToDigitBCD@data,w
  5567  0946  00B3               	movwf	lcdWriteToDigitBCD@OnesDigit
  5568                           
  5569                           ;LCD.c: 43: TensDigit = 0;
  5570  0947  01AB               	clrf	lcdWriteToDigitBCD@TensDigit
  5571  0948  01AC               	clrf	lcdWriteToDigitBCD@TensDigit+1
  5572                           
  5573                           ;LCD.c: 44: HunsDigit = 0;
  5574  0949  01AD               	clrf	lcdWriteToDigitBCD@HunsDigit
  5575  094A  01AE               	clrf	lcdWriteToDigitBCD@HunsDigit+1
  5576                           
  5577                           ;LCD.c: 45: ThouDigit = 0;
  5578  094B  01AF               	clrf	lcdWriteToDigitBCD@ThouDigit
  5579  094C  01B0               	clrf	lcdWriteToDigitBCD@ThouDigit+1
  5580                           
  5581                           ;LCD.c: 46: TenThouDigit = 0;
  5582  094D  01B1               	clrf	lcdWriteToDigitBCD@TenThouDigit
  5583  094E  01B2               	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  5584  094F                     l3959:	
  5585                           ;LCD.c: 49: while (OnesDigit >= 10000){
  5586                           
  5587  094F  3027               	movlw	39
  5588  0950  0234               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  5589  0951  3010               	movlw	16
  5590  0952  1903               	skipnz
  5591  0953  0233               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  5592  0954  1C03               	btfss	3,0
  5593  0955  2973               	goto	l3965
  5594                           
  5595                           ;LCD.c: 50: OnesDigit = OnesDigit - 10000;
  5596  0956  0833               	movf	lcdWriteToDigitBCD@OnesDigit,w
  5597  0957  3EF0               	addlw	240
  5598  0958  00B3               	movwf	lcdWriteToDigitBCD@OnesDigit
  5599  0959  0834               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  5600  095A  1803               	skipnc
  5601  095B  3E01               	addlw	1
  5602  095C  3ED8               	addlw	216
  5603  095D  00B4               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  5604                           
  5605                           ;LCD.c: 51: TenThouDigit++;
  5606  095E  3001               	movlw	1
  5607  095F  07B1               	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  5608  0960  1803               	skipnc
  5609  0961  0AB2               	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  5610  0962  3000               	movlw	0
  5611  0963  07B2               	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  5612  0964  294F               	goto	l3959
  5613  0965                     l3961:	
  5614                           ;LCD.c: 52: }
  5615                           ;LCD.c: 54: while (OnesDigit >= 1000){
  5616                           
  5617                           
  5618                           ;LCD.c: 55: OnesDigit = OnesDigit - 1000;
  5619  0965  0833               	movf	lcdWriteToDigitBCD@OnesDigit,w
  5620  0966  3E18               	addlw	24
  5621  0967  00B3               	movwf	lcdWriteToDigitBCD@OnesDigit
  5622  0968  0834               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  5623  0969  1803               	skipnc
  5624  096A  3E01               	addlw	1
  5625  096B  3EFC               	addlw	252
  5626  096C  00B4               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  5627                           
  5628                           ;LCD.c: 56: ThouDigit++;
  5629  096D  3001               	movlw	1
  5630  096E  07AF               	addwf	lcdWriteToDigitBCD@ThouDigit,f
  5631  096F  1803               	skipnc
  5632  0970  0AB0               	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  5633  0971  3000               	movlw	0
  5634  0972  07B0               	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  5635  0973                     l3965:	
  5636  0973  3003               	movlw	3
  5637  0974  0234               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  5638  0975  30E8               	movlw	232
  5639  0976  1903               	skipnz
  5640  0977  0233               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  5641  0978  1C03               	btfss	3,0
  5642  0979  2989               	goto	l3971
  5643  097A  2965               	goto	l3961
  5644  097B                     l3967:	
  5645                           ;LCD.c: 57: }
  5646                           ;LCD.c: 59: while (OnesDigit >= 100){
  5647                           
  5648                           
  5649                           ;LCD.c: 60: OnesDigit = OnesDigit - 100;
  5650  097B  0833               	movf	lcdWriteToDigitBCD@OnesDigit,w
  5651  097C  3E9C               	addlw	156
  5652  097D  00B3               	movwf	lcdWriteToDigitBCD@OnesDigit
  5653  097E  0834               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  5654  097F  1803               	skipnc
  5655  0980  3E01               	addlw	1
  5656  0981  3EFF               	addlw	255
  5657  0982  00B4               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  5658                           
  5659                           ;LCD.c: 61: HunsDigit++;
  5660  0983  3001               	movlw	1
  5661  0984  07AD               	addwf	lcdWriteToDigitBCD@HunsDigit,f
  5662  0985  1803               	skipnc
  5663  0986  0AAE               	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  5664  0987  3000               	movlw	0
  5665  0988  07AE               	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  5666  0989                     l3971:	
  5667  0989  3000               	movlw	0
  5668  098A  0234               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  5669  098B  3064               	movlw	100
  5670  098C  1903               	skipnz
  5671  098D  0233               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  5672  098E  1C03               	btfss	3,0
  5673  098F  299F               	goto	l3977
  5674  0990  297B               	goto	l3967
  5675  0991                     l3973:	
  5676                           ;LCD.c: 62: }
  5677                           ;LCD.c: 64: while (OnesDigit >= 10){
  5678                           
  5679                           
  5680                           ;LCD.c: 65: OnesDigit = OnesDigit - 10;
  5681  0991  0833               	movf	lcdWriteToDigitBCD@OnesDigit,w
  5682  0992  3EF6               	addlw	246
  5683  0993  00B3               	movwf	lcdWriteToDigitBCD@OnesDigit
  5684  0994  0834               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  5685  0995  1803               	skipnc
  5686  0996  3E01               	addlw	1
  5687  0997  3EFF               	addlw	255
  5688  0998  00B4               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  5689                           
  5690                           ;LCD.c: 66: TensDigit++;
  5691  0999  3001               	movlw	1
  5692  099A  07AB               	addwf	lcdWriteToDigitBCD@TensDigit,f
  5693  099B  1803               	skipnc
  5694  099C  0AAC               	incf	lcdWriteToDigitBCD@TensDigit+1,f
  5695  099D  3000               	movlw	0
  5696  099E  07AC               	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  5697  099F                     l3977:	
  5698  099F  3000               	movlw	0
  5699  09A0  0234               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  5700  09A1  300A               	movlw	10
  5701  09A2  1903               	skipnz
  5702  09A3  0233               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  5703  09A4  1803               	skipnc
  5704  09A5  2991               	goto	l3973
  5705                           
  5706                           ;LCD.c: 67: }
  5707                           ;LCD.c: 69: if (TenThouDigit > 0)
  5708  09A6  0831               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  5709  09A7  0432               	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  5710  09A8  1903               	btfsc	3,2
  5711  09A9  29B1               	goto	l3983
  5712                           
  5713                           ;LCD.c: 70: lcdWriteData((unsigned int)TenThouDigit + 48);
  5714  09AA  0831               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  5715  09AB  3E30               	addlw	48
  5716  09AC  160A  118A  2549  120A  158A  	fcall	_lcdWriteData
  5717  09B1                     l3983:	
  5718                           
  5719                           ;LCD.c: 72: if (ThouDigit > 0)
  5720  09B1  1283               	bcf	3,5	;RP0=0, select bank0
  5721  09B2  1303               	bcf	3,6	;RP1=0, select bank0
  5722  09B3  082F               	movf	lcdWriteToDigitBCD@ThouDigit,w
  5723  09B4  0430               	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  5724  09B5  1903               	btfsc	3,2
  5725  09B6  29BE               	goto	l3987
  5726                           
  5727                           ;LCD.c: 73: lcdWriteData((unsigned int)ThouDigit + 48);
  5728  09B7  082F               	movf	lcdWriteToDigitBCD@ThouDigit,w
  5729  09B8  3E30               	addlw	48
  5730  09B9  160A  118A  2549  120A  158A  	fcall	_lcdWriteData
  5731  09BE                     l3987:	
  5732                           
  5733                           ;LCD.c: 75: if (HunsDigit > 0)
  5734  09BE  1283               	bcf	3,5	;RP0=0, select bank0
  5735  09BF  1303               	bcf	3,6	;RP1=0, select bank0
  5736  09C0  082D               	movf	lcdWriteToDigitBCD@HunsDigit,w
  5737  09C1  042E               	iorwf	lcdWriteToDigitBCD@HunsDigit+1,w
  5738  09C2  1903               	btfsc	3,2
  5739  09C3  29CB               	goto	l608
  5740                           
  5741                           ;LCD.c: 76: lcdWriteData((unsigned int)HunsDigit + 48);
  5742  09C4  082D               	movf	lcdWriteToDigitBCD@HunsDigit,w
  5743  09C5  3E30               	addlw	48
  5744  09C6  160A  118A  2549  120A  158A  	fcall	_lcdWriteData
  5745  09CB                     l608:	
  5746                           
  5747                           ;LCD.c: 79: lcdWriteData((unsigned int)TensDigit + 48);
  5748  09CB  1283               	bcf	3,5	;RP0=0, select bank0
  5749  09CC  1303               	bcf	3,6	;RP1=0, select bank0
  5750  09CD  082B               	movf	lcdWriteToDigitBCD@TensDigit,w
  5751  09CE  3E30               	addlw	48
  5752  09CF  160A  118A  2549  120A  158A  	fcall	_lcdWriteData
  5753                           
  5754                           ;LCD.c: 81: lcdWriteData((unsigned int)OnesDigit + 48);
  5755  09D4  1283               	bcf	3,5	;RP0=0, select bank0
  5756  09D5  1303               	bcf	3,6	;RP1=0, select bank0
  5757  09D6  0833               	movf	lcdWriteToDigitBCD@OnesDigit,w
  5758  09D7  3E30               	addlw	48
  5759  09D8  160A  118A  2549   	fcall	_lcdWriteData
  5760  09DB  0008               	return
  5761  09DC                     __end_of_lcdWriteToDigitBCD:	
  5762                           
  5763                           	psect	text19
  5764  173D                     __ptext19:	
  5765 ;; *************** function _getADC *****************
  5766 ;; Defined at:
  5767 ;;		line 25 in file "ADC.c"
  5768 ;; Parameters:    Size  Location     Type
  5769 ;;		None
  5770 ;; Auto vars:     Size  Location     Type
  5771 ;;		None
  5772 ;; Return value:  Size  Location     Type
  5773 ;;                  2  624[None  ] unsigned int 
  5774 ;; Registers used:
  5775 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5776 ;; Tracked objects:
  5777 ;;		On entry : 0/0
  5778 ;;		On exit  : 0/0
  5779 ;;		Unchanged: 0/0
  5780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5781 ;;      Params:         0       0       0       0       0
  5782 ;;      Locals:         0       0       0       0       0
  5783 ;;      Temps:          0       2       0       0       0
  5784 ;;      Totals:         0       2       0       0       0
  5785 ;;Total ram usage:        2 bytes
  5786 ;; Hardware stack levels used:    1
  5787 ;; Hardware stack levels required when called:    1
  5788 ;; This function calls:
  5789 ;;		Nothing
  5790 ;; This function is called by:
  5791 ;;		_ADCMain
  5792 ;; This function uses a non-reentrant model
  5793 ;;
  5794                           
  5795                           
  5796                           ;psect for function _getADC
  5797  173D                     _getADC:	
  5798                           
  5799                           ;ADC.c: 27: ADRESH = 0;
  5800                           
  5801                           ;incstack = 0
  5802                           ; Regs used in _getADC: [wreg-fsr0h+status,2+status,0]
  5803  173D  1283               	bcf	3,5	;RP0=0, select bank0
  5804  173E  1303               	bcf	3,6	;RP1=0, select bank0
  5805  173F  019E               	clrf	30	;volatile
  5806                           
  5807                           ;ADC.c: 28: ADRESL = 0;
  5808  1740  1683               	bsf	3,5	;RP0=1, select bank1
  5809  1741  1303               	bcf	3,6	;RP1=0, select bank1
  5810  1742  019E               	clrf	30	;volatile
  5811                           
  5812                           ;ADC.c: 30: GO = 1;
  5813  1743  1283               	bcf	3,5	;RP0=0, select bank0
  5814  1744  1303               	bcf	3,6	;RP1=0, select bank0
  5815  1745  151F               	bsf	31,2	;volatile
  5816  1746                     l733:	
  5817                           ;ADC.c: 31: while(GO) continue;
  5818                           
  5819  1746  191F               	btfsc	31,2	;volatile
  5820  1747  2F46               	goto	l733
  5821                           
  5822                           ;ADC.c: 35: adcRAW = (4*ADRESH);
  5823  1748  081E               	movf	30,w	;volatile
  5824  1749  00A0               	movwf	??_getADC
  5825  174A  01A1               	clrf	??_getADC+1
  5826  174B  1003               	clrc
  5827  174C  0DA0               	rlf	??_getADC,f
  5828  174D  0DA1               	rlf	??_getADC+1,f
  5829  174E  1003               	clrc
  5830  174F  0DA0               	rlf	??_getADC,f
  5831  1750  0DA1               	rlf	??_getADC+1,f
  5832  1751  0820               	movf	??_getADC,w
  5833  1752  00CF               	movwf	_adcRAW	;volatile
  5834  1753  0821               	movf	??_getADC+1,w
  5835  1754  00D0               	movwf	_adcRAW+1	;volatile
  5836                           
  5837                           ;ADC.c: 37: switch(ADRESL){
  5838  1755  2F74               	goto	l4019
  5839  1756                     l4013:	
  5840                           ;ADC.c: 38: case 0b01000000: adcRAW = adcRAW + 1;
  5841                           
  5842  1756  1283               	bcf	3,5	;RP0=0, select bank0
  5843  1757  084F               	movf	_adcRAW,w	;volatile
  5844  1758  3E01               	addlw	1
  5845  1759  00CF               	movwf	_adcRAW	;volatile
  5846  175A  0850               	movf	_adcRAW+1,w	;volatile
  5847  175B  1803               	skipnc
  5848  175C  3E01               	addlw	1
  5849  175D  3E00               	addlw	0
  5850  175E  00D0               	movwf	_adcRAW+1	;volatile
  5851                           
  5852                           ;ADC.c: 39: break;
  5853  175F  0008               	return
  5854  1760                     l4015:	
  5855                           ;ADC.c: 40: case 0b10000000: adcRAW = adcRAW + 2;
  5856                           
  5857  1760  1283               	bcf	3,5	;RP0=0, select bank0
  5858  1761  084F               	movf	_adcRAW,w	;volatile
  5859  1762  3E02               	addlw	2
  5860  1763  00CF               	movwf	_adcRAW	;volatile
  5861  1764  0850               	movf	_adcRAW+1,w	;volatile
  5862  1765  1803               	skipnc
  5863  1766  3E01               	addlw	1
  5864  1767  3E00               	addlw	0
  5865  1768  00D0               	movwf	_adcRAW+1	;volatile
  5866                           
  5867                           ;ADC.c: 41: break;
  5868  1769  0008               	return
  5869  176A                     l4017:	
  5870                           ;ADC.c: 42: case 0b11000000: adcRAW = adcRAW + 3;
  5871                           
  5872  176A  1283               	bcf	3,5	;RP0=0, select bank0
  5873  176B  084F               	movf	_adcRAW,w	;volatile
  5874  176C  3E03               	addlw	3
  5875  176D  00CF               	movwf	_adcRAW	;volatile
  5876  176E  0850               	movf	_adcRAW+1,w	;volatile
  5877  176F  1803               	skipnc
  5878  1770  3E01               	addlw	1
  5879  1771  3E00               	addlw	0
  5880  1772  00D0               	movwf	_adcRAW+1	;volatile
  5881                           
  5882                           ;ADC.c: 45: }
  5883                           
  5884                           ;ADC.c: 44: default: adcRAW = adcRAW;
  5885                           
  5886                           ;ADC.c: 43: break;
  5887  1773  0008               	return
  5888  1774                     l4019:	
  5889  1774  1683               	bsf	3,5	;RP0=1, select bank1
  5890  1775  1303               	bcf	3,6	;RP1=0, select bank1
  5891  1776  081E               	movf	30,w	;volatile
  5892                           
  5893                           ; Switch size 1, requested type "space"
  5894                           ; Number of cases is 3, Range of values is 64 to 192
  5895                           ; switch strategies available:
  5896                           ; Name         Instructions Cycles
  5897                           ; simple_byte           10     6 (average)
  5898                           ; jumptable            263     9 (fixed)
  5899                           ;	Chosen strategy is simple_byte
  5900  1777  3A40               	xorlw	64	; case 64
  5901  1778  1903               	skipnz
  5902  1779  2F56               	goto	l4013
  5903  177A  3AC0               	xorlw	192	; case 128
  5904  177B  1903               	skipnz
  5905  177C  2F60               	goto	l4015
  5906  177D  3A40               	xorlw	64	; case 192
  5907  177E  1903               	skipnz
  5908  177F  2F6A               	goto	l4017
  5909  1780  2F81               	goto	l742
  5910  1781                     l742:	
  5911                           ;ADC.c: 47: return(adcRAW);
  5912                           ;	Return value of _getADC is never used
  5913                           
  5914  1781  0008               	return
  5915  1782                     __end_of_getADC:	
  5916                           
  5917                           	psect	text20
  5918  1681                     __ptext20:	
  5919 ;; *************** function _getSensorData *****************
  5920 ;; Defined at:
  5921 ;;		line 85 in file "ser.c"
  5922 ;; Parameters:    Size  Location     Type
  5923 ;;  packetID        1    wreg     unsigned char 
  5924 ;;  bytes           1    2[BANK0 ] unsigned char 
  5925 ;; Auto vars:     Size  Location     Type
  5926 ;;  packetID        1    6[BANK0 ] unsigned char 
  5927 ;;  sensor          2    7[BANK0 ] int 
  5928 ;; Return value:  Size  Location     Type
  5929 ;;                  2    2[BANK0 ] int 
  5930 ;; Registers used:
  5931 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5932 ;; Tracked objects:
  5933 ;;		On entry : 0/0
  5934 ;;		On exit  : 0/0
  5935 ;;		Unchanged: 0/0
  5936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5937 ;;      Params:         0       2       0       0       0
  5938 ;;      Locals:         0       3       0       0       0
  5939 ;;      Temps:          0       2       0       0       0
  5940 ;;      Totals:         0       7       0       0       0
  5941 ;;Total ram usage:        7 bytes
  5942 ;; Hardware stack levels used:    1
  5943 ;; Hardware stack levels required when called:    2
  5944 ;; This function calls:
  5945 ;;		_ser_getch
  5946 ;;		_ser_putch
  5947 ;; This function is called by:
  5948 ;;		_Drive1m
  5949 ;;		_Turn90
  5950 ;;		_re_route
  5951 ;; This function uses a non-reentrant model
  5952 ;;
  5953                           
  5954                           
  5955                           ;psect for function _getSensorData
  5956  1681                     _getSensorData:	
  5957                           
  5958                           ;incstack = 0
  5959                           ; Regs used in _getSensorData: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5960                           ;getSensorData@packetID stored from wreg
  5961  1681  1283               	bcf	3,5	;RP0=0, select bank0
  5962  1682  1303               	bcf	3,6	;RP1=0, select bank0
  5963  1683  00A6               	movwf	getSensorData@packetID
  5964                           
  5965                           ;ser.c: 86: ser_putch(142);
  5966  1684  308E               	movlw	142
  5967  1685  120A  158A  2001  160A  118A  	fcall	_ser_putch
  5968                           
  5969                           ;ser.c: 87: ser_putch(packetID);
  5970  168A  1283               	bcf	3,5	;RP0=0, select bank0
  5971  168B  1303               	bcf	3,6	;RP1=0, select bank0
  5972  168C  0826               	movf	getSensorData@packetID,w
  5973  168D  120A  158A  2001  160A  118A  	fcall	_ser_putch
  5974                           
  5975                           ;ser.c: 89: if (bytes == 2)
  5976  1692  3002               	movlw	2
  5977  1693  1283               	bcf	3,5	;RP0=0, select bank0
  5978  1694  1303               	bcf	3,6	;RP1=0, select bank0
  5979  1695  0622               	xorwf	getSensorData@bytes,w
  5980  1696  1D03               	btfss	3,2
  5981  1697  2EA3               	goto	l4211
  5982                           
  5983                           ;ser.c: 90: highByte = ser_getch();
  5984  1698  160A  118A  24FD  160A  118A  	fcall	_ser_getch
  5985  169D  1283               	bcf	3,5	;RP0=0, select bank0
  5986  169E  1303               	bcf	3,6	;RP1=0, select bank0
  5987  169F  00A4               	movwf	??_getSensorData
  5988  16A0  0824               	movf	??_getSensorData,w
  5989  16A1  00F9               	movwf	_highByte
  5990  16A2  2EA4               	goto	l4213
  5991  16A3                     l4211:	
  5992                           
  5993                           ;ser.c: 91: else
  5994                           ;ser.c: 92: highByte = 0;
  5995  16A3  01F9               	clrf	_highByte
  5996  16A4                     l4213:	
  5997                           
  5998                           ;ser.c: 94: lowByte = ser_getch();
  5999  16A4  160A  118A  24FD   	fcall	_ser_getch
  6000  16A7  1283               	bcf	3,5	;RP0=0, select bank0
  6001  16A8  1303               	bcf	3,6	;RP1=0, select bank0
  6002  16A9  00A4               	movwf	??_getSensorData
  6003  16AA  0824               	movf	??_getSensorData,w
  6004  16AB  00DB               	movwf	_lowByte
  6005                           
  6006                           ;ser.c: 96: signed int sensor = (256*highByte + lowByte);
  6007  16AC  0879               	movf	_highByte,w
  6008  16AD  00A4               	movwf	??_getSensorData
  6009  16AE  01A5               	clrf	??_getSensorData+1
  6010  16AF  0824               	movf	??_getSensorData,w
  6011  16B0  00A5               	movwf	??_getSensorData+1
  6012  16B1  01A4               	clrf	??_getSensorData
  6013  16B2  085B               	movf	_lowByte,w
  6014  16B3  0724               	addwf	??_getSensorData,w
  6015  16B4  00A7               	movwf	getSensorData@sensor
  6016  16B5  3000               	movlw	0
  6017  16B6  1803               	skipnc
  6018  16B7  3001               	movlw	1
  6019  16B8  0725               	addwf	??_getSensorData+1,w
  6020  16B9  00A8               	movwf	getSensorData@sensor+1
  6021                           
  6022                           ;ser.c: 98: return sensor;
  6023  16BA  0828               	movf	getSensorData@sensor+1,w
  6024  16BB  00A3               	movwf	?_getSensorData+1
  6025  16BC  0827               	movf	getSensorData@sensor,w
  6026  16BD  00A2               	movwf	?_getSensorData
  6027  16BE  0008               	return
  6028  16BF                     __end_of_getSensorData:	
  6029                           
  6030                           	psect	text21
  6031  0801                     __ptext21:	
  6032 ;; *************** function _ser_putch *****************
  6033 ;; Defined at:
  6034 ;;		line 30 in file "ser.c"
  6035 ;; Parameters:    Size  Location     Type
  6036 ;;  c               1    wreg     unsigned char 
  6037 ;; Auto vars:     Size  Location     Type
  6038 ;;  c               1    0[BANK0 ] unsigned char 
  6039 ;; Return value:  Size  Location     Type
  6040 ;;                  1    wreg      void 
  6041 ;; Registers used:
  6042 ;;		wreg
  6043 ;; Tracked objects:
  6044 ;;		On entry : 0/0
  6045 ;;		On exit  : 0/0
  6046 ;;		Unchanged: 0/0
  6047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6048 ;;      Params:         0       0       0       0       0
  6049 ;;      Locals:         0       1       0       0       0
  6050 ;;      Temps:          0       0       0       0       0
  6051 ;;      Totals:         0       1       0       0       0
  6052 ;;Total ram usage:        1 bytes
  6053 ;; Hardware stack levels used:    1
  6054 ;; Hardware stack levels required when called:    1
  6055 ;; This function calls:
  6056 ;;		Nothing
  6057 ;; This function is called by:
  6058 ;;		_Drive1m
  6059 ;;		_main
  6060 ;;		_Drive
  6061 ;;		_DriveDirect
  6062 ;;		_getSensorData
  6063 ;; This function uses a non-reentrant model
  6064 ;;
  6065                           
  6066                           
  6067                           ;psect for function _ser_putch
  6068  0801                     _ser_putch:	
  6069                           
  6070                           ;incstack = 0
  6071                           ; Regs used in _ser_putch: [wreg]
  6072                           ;ser_putch@c stored from wreg
  6073  0801  1283               	bcf	3,5	;RP0=0, select bank0
  6074  0802  1303               	bcf	3,6	;RP1=0, select bank0
  6075  0803  00A0               	movwf	ser_putch@c
  6076  0804                     l874:	
  6077                           ;ser.c: 31: while(!TRMT);
  6078                           
  6079  0804  1683               	bsf	3,5	;RP0=1, select bank1
  6080  0805  1303               	bcf	3,6	;RP1=0, select bank1
  6081  0806  1C98               	btfss	24,1	;volatile
  6082  0807  2804               	goto	l874
  6083                           
  6084                           ;ser.c: 32: TXREG=c;
  6085  0808  1283               	bcf	3,5	;RP0=0, select bank0
  6086  0809  1303               	bcf	3,6	;RP1=0, select bank0
  6087  080A  0820               	movf	ser_putch@c,w
  6088  080B  0099               	movwf	25	;volatile
  6089  080C  0008               	return
  6090  080D                     __end_of_ser_putch:	
  6091                           
  6092                           	psect	text22
  6093  14FD                     __ptext22:	
  6094 ;; *************** function _ser_getch *****************
  6095 ;; Defined at:
  6096 ;;		line 35 in file "ser.c"
  6097 ;; Parameters:    Size  Location     Type
  6098 ;;		None
  6099 ;; Auto vars:     Size  Location     Type
  6100 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  6101 ;; Return value:  Size  Location     Type
  6102 ;;                  1    wreg      unsigned char 
  6103 ;; Registers used:
  6104 ;;		wreg
  6105 ;; Tracked objects:
  6106 ;;		On entry : 0/0
  6107 ;;		On exit  : 0/0
  6108 ;;		Unchanged: 0/0
  6109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6110 ;;      Params:         0       0       0       0       0
  6111 ;;      Locals:         0       1       0       0       0
  6112 ;;      Temps:          0       1       0       0       0
  6113 ;;      Totals:         0       2       0       0       0
  6114 ;;Total ram usage:        2 bytes
  6115 ;; Hardware stack levels used:    1
  6116 ;; Hardware stack levels required when called:    1
  6117 ;; This function calls:
  6118 ;;		Nothing
  6119 ;; This function is called by:
  6120 ;;		_getSensorData
  6121 ;; This function uses a non-reentrant model
  6122 ;;
  6123                           
  6124                           
  6125                           ;psect for function _ser_getch
  6126  14FD                     _ser_getch:	
  6127  14FD                     l880:	
  6128                           ;ser.c: 36: while(!RCIF);
  6129                           
  6130                           ;incstack = 0
  6131                           ; Regs used in _ser_getch: [wreg]
  6132                           
  6133  14FD  1283               	bcf	3,5	;RP0=0, select bank0
  6134  14FE  1303               	bcf	3,6	;RP1=0, select bank0
  6135  14FF  1E8C               	btfss	12,5	;volatile
  6136  1500  2CFD               	goto	l880
  6137                           
  6138                           ;ser.c: 37: unsigned char rxbyte = RCREG;
  6139  1501  081A               	movf	26,w	;volatile
  6140  1502  00A0               	movwf	??_ser_getch
  6141  1503  0820               	movf	??_ser_getch,w
  6142  1504  00A1               	movwf	ser_getch@rxbyte
  6143                           
  6144                           ;ser.c: 38: return rxbyte;
  6145  1505  0821               	movf	ser_getch@rxbyte,w
  6146  1506  0008               	return
  6147  1507                     __end_of_ser_getch:	
  6148                           
  6149                           	psect	text23
  6150  0C82                     __ptext23:	
  6151 ;; *************** function _PathTo *****************
  6152 ;; Defined at:
  6153 ;;		line 55 in file "main.c"
  6154 ;; Parameters:    Size  Location     Type
  6155 ;;  x_target        1    wreg     unsigned char 
  6156 ;;  y_target        1    5[BANK0 ] unsigned char 
  6157 ;; Auto vars:     Size  Location     Type
  6158 ;;  x_target        1   33[BANK0 ] unsigned char 
  6159 ;;  sum             1   34[BANK0 ] unsigned char 
  6160 ;;  loop            2   35[BANK0 ] int 
  6161 ;;  mazeGrid       20   13[BANK0 ] unsigned char [5][4]
  6162 ;; Return value:  Size  Location     Type
  6163 ;;                  1    wreg      void 
  6164 ;; Registers used:
  6165 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6166 ;; Tracked objects:
  6167 ;;		On entry : 0/0
  6168 ;;		On exit  : 0/0
  6169 ;;		Unchanged: 0/0
  6170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6171 ;;      Params:         0       1       0       0       0
  6172 ;;      Locals:         0      24       0       0       0
  6173 ;;      Temps:          0       7       0       0       0
  6174 ;;      Totals:         0      32       0       0       0
  6175 ;;Total ram usage:       32 bytes
  6176 ;; Hardware stack levels used:    1
  6177 ;; Hardware stack levels required when called:    3
  6178 ;; This function calls:
  6179 ;;		___bmul
  6180 ;;		_lcdSetCursor
  6181 ;;		_lcdWriteString
  6182 ;; This function is called by:
  6183 ;;		_re_route
  6184 ;;		_main
  6185 ;; This function uses a non-reentrant model
  6186 ;;
  6187                           
  6188                           
  6189                           ;psect for function _PathTo
  6190  0C82                     _PathTo:	
  6191                           
  6192                           ;incstack = 0
  6193                           ; Regs used in _PathTo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6194                           ;PathTo@x_target stored from wreg
  6195  0C82  1283               	bcf	3,5	;RP0=0, select bank0
  6196  0C83  1303               	bcf	3,6	;RP1=0, select bank0
  6197  0C84  00C1               	movwf	PathTo@x_target
  6198                           
  6199                           ;main.c: 58: char mazeGrid[4][5] = {
  6200                           ;main.c: 59: {12,7,14,13,6},
  6201                           ;main.c: 60: {9,5,0,5,2},
  6202                           ;main.c: 61: {12,6,10,14,10},
  6203                           ;main.c: 62: {11,9,1,1,3}
  6204                           ;main.c: 63: };
  6205  0C85  302D               	movlw	PathTo@mazeGrid& (0+255)
  6206  0C86  0084               	movwf	4
  6207  0C87  3090               	movlw	low PathTo@F1222
  6208  0C88  00A6               	movwf	??_PathTo
  6209  0C89  0804               	movf	4,w
  6210  0C8A  00A7               	movwf	??_PathTo+1
  6211  0C8B  3014               	movlw	20
  6212  0C8C  00A8               	movwf	??_PathTo+2
  6213  0C8D                     u3210:	
  6214  0C8D  0826               	movf	??_PathTo,w
  6215  0C8E  0084               	movwf	4
  6216  0C8F  1783               	bsf	3,7	;select IRP bank3
  6217  0C90  0800               	movf	0,w
  6218  0C91  00A9               	movwf	??_PathTo+3
  6219  0C92  0AA6               	incf	??_PathTo,f
  6220  0C93  0827               	movf	??_PathTo+1,w
  6221  0C94  0084               	movwf	4
  6222  0C95  1383               	bcf	3,7	;select IRP bank0
  6223  0C96  0829               	movf	??_PathTo+3,w
  6224  0C97  0080               	movwf	0
  6225  0C98  0AA7               	incf	??_PathTo+1,f
  6226  0C99  0BA8               	decfsz	??_PathTo+2,f
  6227  0C9A  2C8D               	goto	u3210
  6228                           
  6229                           ;main.c: 65: if(routing == 1){
  6230  0C9B  1F70               	btfss	_routing/(0+8),_routing& (0+7)
  6231  0C9C  2CDF               	goto	l4371
  6232                           
  6233                           ;main.c: 66: for (r = 0; r <= 3; r++){
  6234  0C9D  01DE               	clrf	_r
  6235  0C9E  3004               	movlw	4
  6236  0C9F  025E               	subwf	_r,w
  6237  0CA0  1803               	btfsc	3,0
  6238  0CA1  2CDF               	goto	l4371
  6239  0CA2                     l4355:	
  6240                           
  6241                           ;main.c: 67: for (c = 0; c <= 4; c++){
  6242  0CA2  01D9               	clrf	_c
  6243  0CA3  3005               	movlw	5
  6244  0CA4  0259               	subwf	_c,w
  6245  0CA5  1803               	btfsc	3,0
  6246  0CA6  2CD7               	goto	l4367
  6247  0CA7                     l4361:	
  6248                           
  6249                           ;main.c: 68: mazeGrid[r][c] = mazeGridDefault[r][c];
  6250  0CA7  3005               	movlw	5
  6251  0CA8  00A6               	movwf	??_PathTo
  6252  0CA9  0826               	movf	??_PathTo,w
  6253  0CAA  00A0               	movwf	___bmul@multiplicand
  6254  0CAB  085E               	movf	_r,w
  6255  0CAC  160A  118A  2536  120A  158A  	fcall	___bmul
  6256  0CB1  3ED6               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  6257  0CB2  1283               	bcf	3,5	;RP0=0, select bank0
  6258  0CB3  1303               	bcf	3,6	;RP1=0, select bank0
  6259  0CB4  0759               	addwf	_c,w
  6260  0CB5  00A7               	movwf	??_PathTo+1
  6261  0CB6  0827               	movf	??_PathTo+1,w
  6262  0CB7  0084               	movwf	4
  6263  0CB8  1383               	bcf	3,7	;select IRP bank1
  6264  0CB9  0800               	movf	0,w
  6265  0CBA  00A8               	movwf	??_PathTo+2
  6266  0CBB  3005               	movlw	5
  6267  0CBC  00A9               	movwf	??_PathTo+3
  6268  0CBD  0829               	movf	??_PathTo+3,w
  6269  0CBE  00A0               	movwf	___bmul@multiplicand
  6270  0CBF  085E               	movf	_r,w
  6271  0CC0  160A  118A  2536  120A  158A  	fcall	___bmul
  6272  0CC5  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6273  0CC6  1283               	bcf	3,5	;RP0=0, select bank0
  6274  0CC7  1303               	bcf	3,6	;RP1=0, select bank0
  6275  0CC8  0759               	addwf	_c,w
  6276  0CC9  00AA               	movwf	??_PathTo+4
  6277  0CCA  082A               	movf	??_PathTo+4,w
  6278  0CCB  0084               	movwf	4
  6279  0CCC  0828               	movf	??_PathTo+2,w
  6280  0CCD  1383               	bcf	3,7	;select IRP bank0
  6281  0CCE  0080               	movwf	0
  6282  0CCF  3001               	movlw	1
  6283  0CD0  00A6               	movwf	??_PathTo
  6284  0CD1  0826               	movf	??_PathTo,w
  6285  0CD2  07D9               	addwf	_c,f
  6286  0CD3  3005               	movlw	5
  6287  0CD4  0259               	subwf	_c,w
  6288  0CD5  1C03               	skipc
  6289  0CD6  2CA7               	goto	l4361
  6290  0CD7                     l4367:	
  6291  0CD7  3001               	movlw	1
  6292  0CD8  00A6               	movwf	??_PathTo
  6293  0CD9  0826               	movf	??_PathTo,w
  6294  0CDA  07DE               	addwf	_r,f
  6295  0CDB  3004               	movlw	4
  6296  0CDC  025E               	subwf	_r,w
  6297  0CDD  1C03               	skipc
  6298  0CDE  2CA2               	goto	l4355
  6299  0CDF                     l4371:	
  6300                           
  6301                           ;main.c: 70: }
  6302                           ;main.c: 71: }
  6303                           ;main.c: 72: }
  6304                           ;main.c: 75: for (r = 0; r <= 3; r++){
  6305  0CDF  01DE               	clrf	_r
  6306  0CE0  3004               	movlw	4
  6307  0CE1  025E               	subwf	_r,w
  6308  0CE2  1803               	btfsc	3,0
  6309  0CE3  2CF9               	goto	l4391
  6310  0CE4                     l4377:	
  6311                           
  6312                           ;main.c: 76: for (c = 0; c <= 4; c++){
  6313  0CE4  01D9               	clrf	_c
  6314  0CE5  3005               	movlw	5
  6315  0CE6  0259               	subwf	_c,w
  6316  0CE7  1803               	btfsc	3,0
  6317  0CE8  2CF1               	goto	l4387
  6318  0CE9                     l4383:	
  6319  0CE9  3001               	movlw	1
  6320  0CEA  00A6               	movwf	??_PathTo
  6321  0CEB  0826               	movf	??_PathTo,w
  6322  0CEC  07D9               	addwf	_c,f
  6323  0CED  3005               	movlw	5
  6324  0CEE  0259               	subwf	_c,w
  6325  0CEF  1C03               	skipc
  6326  0CF0  2CE9               	goto	l4383
  6327  0CF1                     l4387:	
  6328  0CF1  3001               	movlw	1
  6329  0CF2  00A6               	movwf	??_PathTo
  6330  0CF3  0826               	movf	??_PathTo,w
  6331  0CF4  07DE               	addwf	_r,f
  6332  0CF5  3004               	movlw	4
  6333  0CF6  025E               	subwf	_r,w
  6334  0CF7  1C03               	skipc
  6335  0CF8  2CE4               	goto	l4377
  6336  0CF9                     l4391:	
  6337                           
  6338                           ;main.c: 79: }
  6339                           ;main.c: 80: }
  6340                           ;main.c: 82: pathCountShortest = 15;
  6341  0CF9  300F               	movlw	15
  6342  0CFA  00A6               	movwf	??_PathTo
  6343  0CFB  0826               	movf	??_PathTo,w
  6344  0CFC  00E8               	movwf	_pathCountShortest
  6345                           
  6346                           ;main.c: 83: for (r = 0; r <= 1; r++){
  6347  0CFD  01DE               	clrf	_r
  6348  0CFE  3002               	movlw	2
  6349  0CFF  025E               	subwf	_r,w
  6350  0D00  1803               	btfsc	3,0
  6351  0D01  2D29               	goto	l4415
  6352  0D02                     l4399:	
  6353                           
  6354                           ;main.c: 84: for (c = 0; c <= 15; c++){
  6355  0D02  01D9               	clrf	_c
  6356  0D03  3010               	movlw	16
  6357  0D04  0259               	subwf	_c,w
  6358  0D05  1803               	btfsc	3,0
  6359  0D06  2D21               	goto	l4411
  6360  0D07                     l4405:	
  6361                           
  6362                           ;main.c: 85: pathShortest[r][c] = 0;
  6363  0D07  085E               	movf	_r,w
  6364  0D08  00A6               	movwf	??_PathTo
  6365  0D09  3004               	movlw	4
  6366  0D0A                     u3335:	
  6367  0D0A  1003               	clrc
  6368  0D0B  0DA6               	rlf	??_PathTo,f
  6369  0D0C  3EFF               	addlw	-1
  6370  0D0D  1D03               	skipz
  6371  0D0E  2D0A               	goto	u3335
  6372  0D0F  30A0               	movlw	(low (_pathShortest| 0))& (0+255)
  6373  0D10  0726               	addwf	??_PathTo,w
  6374  0D11  00A7               	movwf	??_PathTo+1
  6375  0D12  0859               	movf	_c,w
  6376  0D13  0727               	addwf	??_PathTo+1,w
  6377  0D14  00A8               	movwf	??_PathTo+2
  6378  0D15  0828               	movf	??_PathTo+2,w
  6379  0D16  0084               	movwf	4
  6380  0D17  1383               	bcf	3,7	;select IRP bank1
  6381  0D18  0180               	clrf	0
  6382  0D19  3001               	movlw	1
  6383  0D1A  00A6               	movwf	??_PathTo
  6384  0D1B  0826               	movf	??_PathTo,w
  6385  0D1C  07D9               	addwf	_c,f
  6386  0D1D  3010               	movlw	16
  6387  0D1E  0259               	subwf	_c,w
  6388  0D1F  1C03               	skipc
  6389  0D20  2D07               	goto	l4405
  6390  0D21                     l4411:	
  6391  0D21  3001               	movlw	1
  6392  0D22  00A6               	movwf	??_PathTo
  6393  0D23  0826               	movf	??_PathTo,w
  6394  0D24  07DE               	addwf	_r,f
  6395  0D25  3002               	movlw	2
  6396  0D26  025E               	subwf	_r,w
  6397  0D27  1C03               	skipc
  6398  0D28  2D02               	goto	l4399
  6399  0D29                     l4415:	
  6400                           
  6401                           ;main.c: 86: }
  6402                           ;main.c: 87: }
  6403                           ;main.c: 90: x_goto = x_target;
  6404  0D29  0841               	movf	PathTo@x_target,w
  6405  0D2A  00A6               	movwf	??_PathTo
  6406  0D2B  0826               	movf	??_PathTo,w
  6407  0D2C  00E0               	movwf	_x_goto
  6408                           
  6409                           ;main.c: 91: y_goto = y_target;
  6410  0D2D  0825               	movf	PathTo@y_target,w
  6411  0D2E  00A6               	movwf	??_PathTo
  6412  0D2F  0826               	movf	??_PathTo,w
  6413  0D30  00E4               	movwf	_y_goto
  6414                           
  6415                           ;main.c: 93: x_path = x;
  6416  0D31  0869               	movf	_x,w
  6417  0D32  00A6               	movwf	??_PathTo
  6418  0D33  0826               	movf	??_PathTo,w
  6419  0D34  00E2               	movwf	_x_path
  6420                           
  6421                           ;main.c: 94: y_path = y;
  6422  0D35  0863               	movf	_y,w
  6423  0D36  00A6               	movwf	??_PathTo
  6424  0D37  0826               	movf	??_PathTo,w
  6425  0D38  00E6               	movwf	_y_path
  6426                           
  6427                           ;main.c: 95: orientation_path = orientation;
  6428  0D39  0867               	movf	_orientation,w
  6429  0D3A  00A6               	movwf	??_PathTo
  6430  0D3B  0826               	movf	??_PathTo,w
  6431  0D3C  00DC               	movwf	_orientation_path
  6432                           
  6433                           ;main.c: 97: pathCount = 0;
  6434  0D3D  01DD               	clrf	_pathCount
  6435                           
  6436                           ;main.c: 100: lcdSetCursor(0b10000000);
  6437  0D3E  3080               	movlw	128
  6438  0D3F  160A  118A  24F4  120A  158A  	fcall	_lcdSetCursor
  6439                           
  6440                           ;main.c: 101: lcdWriteString("Working...");
  6441  0D44  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  6442  0D45  160A  118A  25C8  120A  158A  	fcall	_lcdWriteString
  6443                           
  6444                           ;main.c: 102: for (int loop = 0; loop <= 2000; loop++){
  6445  0D4A  1283               	bcf	3,5	;RP0=0, select bank0
  6446  0D4B  1303               	bcf	3,6	;RP1=0, select bank0
  6447  0D4C  01C3               	clrf	PathTo@loop
  6448  0D4D  01C4               	clrf	PathTo@loop+1
  6449  0D4E                     L16:	
  6450  0D4E  0844               	movf	PathTo@loop+1,w
  6451  0D4F  3A80               	xorlw	128
  6452  0D50  00FF               	movwf	127
  6453  0D51  3087               	movlw	135
  6454  0D52  027F               	subwf	127,w
  6455  0D53  1D03               	skipz
  6456  0D54  2D57               	goto	u3365
  6457  0D55  30D1               	movlw	209
  6458  0D56  0243               	subwf	PathTo@loop,w
  6459  0D57                     u3365:	
  6460  0D57  1803               	btfsc	3,0
  6461  0D58  0008               	return
  6462                           
  6463                           ;main.c: 104: reset_flag = 0;
  6464  0D59  1270               	bcf	_reset_flag/(0+8),_reset_flag& (0+7)
  6465                           
  6466                           ;main.c: 106: path[0][pathCount] = x_path;
  6467  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
  6468  0D5B  1303               	bcf	3,6	;RP1=0, select bank0
  6469  0D5C  0862               	movf	_x_path,w
  6470  0D5D  00A6               	movwf	??_PathTo
  6471  0D5E  085D               	movf	_pathCount,w
  6472  0D5F  3EB8               	addlw	(low (_path| (0+256)))& (0+255)
  6473  0D60  0084               	movwf	4
  6474  0D61  0826               	movf	??_PathTo,w
  6475  0D62  1783               	bsf	3,7	;select IRP bank3
  6476  0D63  0080               	movwf	0
  6477                           
  6478                           ;main.c: 107: path[1][pathCount] = y_path;
  6479  0D64  0866               	movf	_y_path,w
  6480  0D65  00A6               	movwf	??_PathTo
  6481  0D66  085D               	movf	_pathCount,w
  6482  0D67  3EC8               	addlw	(low ((_path| (0+256)+16)))& (0+255)
  6483  0D68  0084               	movwf	4
  6484  0D69  0826               	movf	??_PathTo,w
  6485  0D6A  0080               	movwf	0
  6486                           
  6487                           ;main.c: 112: left = gridWalls[0][(mazeGrid[y_path][x_path])];
  6488  0D6B  3005               	movlw	5
  6489  0D6C  00A6               	movwf	??_PathTo
  6490  0D6D  0826               	movf	??_PathTo,w
  6491  0D6E  00A0               	movwf	___bmul@multiplicand
  6492  0D6F  0866               	movf	_y_path,w
  6493  0D70  160A  118A  2536  120A  158A  	fcall	___bmul
  6494  0D75  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6495  0D76  1283               	bcf	3,5	;RP0=0, select bank0
  6496  0D77  1303               	bcf	3,6	;RP1=0, select bank0
  6497  0D78  0762               	addwf	_x_path,w
  6498  0D79  00A7               	movwf	??_PathTo+1
  6499  0D7A  0827               	movf	??_PathTo+1,w
  6500  0D7B  0084               	movwf	4
  6501  0D7C  1383               	bcf	3,7	;select IRP bank0
  6502  0D7D  0800               	movf	0,w
  6503  0D7E  3E10               	addlw	(low (_gridWalls| (0+256)))& (0+255)
  6504  0D7F  0084               	movwf	4
  6505  0D80  1170               	bcf	_left/(0+8),_left& (0+7)
  6506  0D81  1783               	bsf	3,7	;select IRP bank2
  6507  0D82  1800               	btfsc	0,0
  6508  0D83  1570               	bsf	_left/(0+8),_left& (0+7)
  6509                           
  6510                           ;main.c: 113: up = gridWalls[1][(mazeGrid[y_path][x_path])];
  6511  0D84  3005               	movlw	5
  6512  0D85  1283               	bcf	3,5	;RP0=0, select bank0
  6513  0D86  1303               	bcf	3,6	;RP1=0, select bank0
  6514  0D87  00A6               	movwf	??_PathTo
  6515  0D88  0826               	movf	??_PathTo,w
  6516  0D89  00A0               	movwf	___bmul@multiplicand
  6517  0D8A  0866               	movf	_y_path,w
  6518  0D8B  160A  118A  2536  120A  158A  	fcall	___bmul
  6519  0D90  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6520  0D91  1283               	bcf	3,5	;RP0=0, select bank0
  6521  0D92  1303               	bcf	3,6	;RP1=0, select bank0
  6522  0D93  0762               	addwf	_x_path,w
  6523  0D94  00A7               	movwf	??_PathTo+1
  6524  0D95  0827               	movf	??_PathTo+1,w
  6525  0D96  0084               	movwf	4
  6526  0D97  1383               	bcf	3,7	;select IRP bank0
  6527  0D98  0800               	movf	0,w
  6528  0D99  3E20               	addlw	(low ((_gridWalls| (0+256)+16)))& (0+255)
  6529  0D9A  0084               	movwf	4
  6530  0D9B  1071               	bcf	_up/(0+8),_up& (0+7)
  6531  0D9C  1783               	bsf	3,7	;select IRP bank2
  6532  0D9D  1800               	btfsc	0,0
  6533  0D9E  1471               	bsf	_up/(0+8),_up& (0+7)
  6534                           
  6535                           ;main.c: 114: right = gridWalls[2][(mazeGrid[y_path][x_path])];
  6536  0D9F  3005               	movlw	5
  6537  0DA0  1283               	bcf	3,5	;RP0=0, select bank0
  6538  0DA1  1303               	bcf	3,6	;RP1=0, select bank0
  6539  0DA2  00A6               	movwf	??_PathTo
  6540  0DA3  0826               	movf	??_PathTo,w
  6541  0DA4  00A0               	movwf	___bmul@multiplicand
  6542  0DA5  0866               	movf	_y_path,w
  6543  0DA6  160A  118A  2536  120A  158A  	fcall	___bmul
  6544  0DAB  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6545  0DAC  1283               	bcf	3,5	;RP0=0, select bank0
  6546  0DAD  1303               	bcf	3,6	;RP1=0, select bank0
  6547  0DAE  0762               	addwf	_x_path,w
  6548  0DAF  00A7               	movwf	??_PathTo+1
  6549  0DB0  0827               	movf	??_PathTo+1,w
  6550  0DB1  0084               	movwf	4
  6551  0DB2  1383               	bcf	3,7	;select IRP bank0
  6552  0DB3  0800               	movf	0,w
  6553  0DB4  3E30               	addlw	(low ((_gridWalls| (0+256)+32)))& (0+255)
  6554  0DB5  0084               	movwf	4
  6555  0DB6  12F0               	bcf	_right/(0+8),_right& (0+7)
  6556  0DB7  1783               	bsf	3,7	;select IRP bank2
  6557  0DB8  1800               	btfsc	0,0
  6558  0DB9  16F0               	bsf	_right/(0+8),_right& (0+7)
  6559                           
  6560                           ;main.c: 115: down = gridWalls[3][(mazeGrid[y_path][x_path])];
  6561  0DBA  3005               	movlw	5
  6562  0DBB  1283               	bcf	3,5	;RP0=0, select bank0
  6563  0DBC  1303               	bcf	3,6	;RP1=0, select bank0
  6564  0DBD  00A6               	movwf	??_PathTo
  6565  0DBE  0826               	movf	??_PathTo,w
  6566  0DBF  00A0               	movwf	___bmul@multiplicand
  6567  0DC0  0866               	movf	_y_path,w
  6568  0DC1  160A  118A  2536  120A  158A  	fcall	___bmul
  6569  0DC6  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6570  0DC7  1283               	bcf	3,5	;RP0=0, select bank0
  6571  0DC8  1303               	bcf	3,6	;RP1=0, select bank0
  6572  0DC9  0762               	addwf	_x_path,w
  6573  0DCA  00A7               	movwf	??_PathTo+1
  6574  0DCB  0827               	movf	??_PathTo+1,w
  6575  0DCC  0084               	movwf	4
  6576  0DCD  1383               	bcf	3,7	;select IRP bank0
  6577  0DCE  0800               	movf	0,w
  6578  0DCF  3E40               	addlw	(low ((_gridWalls| (0+256)+48)))& (0+255)
  6579  0DD0  0084               	movwf	4
  6580  0DD1  10F0               	bcf	_down/(0+8),_down& (0+7)
  6581  0DD2  1783               	bsf	3,7	;select IRP bank2
  6582  0DD3  1800               	btfsc	0,0
  6583  0DD4  14F0               	bsf	_down/(0+8),_down& (0+7)
  6584                           
  6585                           ;main.c: 119: if (pathCount != 0){
  6586  0DD5  1283               	bcf	3,5	;RP0=0, select bank0
  6587  0DD6  1303               	bcf	3,6	;RP1=0, select bank0
  6588  0DD7  085D               	movf	_pathCount,w
  6589  0DD8  1D03               	btfss	3,2
  6590  0DD9  2DE3               	goto	l4445
  6591  0DDA  2DF1               	goto	l4447
  6592  0DDB                     l203:	
  6593                           ;main.c: 121: case 0: down = 1;
  6594                           
  6595                           ;main.c: 120: switch(orientation_path){
  6596                           
  6597  0DDB  14F0               	bsf	_down/(0+8),_down& (0+7)
  6598                           
  6599                           ;main.c: 122: break;
  6600  0DDC  2DF1               	goto	l4447
  6601  0DDD                     l205:	
  6602                           ;main.c: 123: case 1: left = 1;
  6603                           
  6604  0DDD  1570               	bsf	_left/(0+8),_left& (0+7)
  6605                           
  6606                           ;main.c: 124: break;
  6607  0DDE  2DF1               	goto	l4447
  6608  0DDF                     l206:	
  6609                           ;main.c: 125: case 2: up = 1;
  6610                           
  6611  0DDF  1471               	bsf	_up/(0+8),_up& (0+7)
  6612                           
  6613                           ;main.c: 126: break;
  6614  0DE0  2DF1               	goto	l4447
  6615  0DE1                     l207:	
  6616                           ;main.c: 127: case 3: right = 1;
  6617                           
  6618  0DE1  16F0               	bsf	_right/(0+8),_right& (0+7)
  6619                           
  6620                           ;main.c: 129: }
  6621                           
  6622                           ;main.c: 128: break;
  6623  0DE2  2DF1               	goto	l4447
  6624  0DE3                     l4445:	
  6625  0DE3  085C               	movf	_orientation_path,w
  6626                           
  6627                           ; Switch size 1, requested type "space"
  6628                           ; Number of cases is 4, Range of values is 0 to 3
  6629                           ; switch strategies available:
  6630                           ; Name         Instructions Cycles
  6631                           ; simple_byte           13     7 (average)
  6632                           ; direct_byte           20     8 (fixed)
  6633                           ; jumptable            260     6 (fixed)
  6634                           ;	Chosen strategy is simple_byte
  6635  0DE4  3A00               	xorlw	0	; case 0
  6636  0DE5  1903               	skipnz
  6637  0DE6  2DDB               	goto	l203
  6638  0DE7  3A01               	xorlw	1	; case 1
  6639  0DE8  1903               	skipnz
  6640  0DE9  2DDD               	goto	l205
  6641  0DEA  3A03               	xorlw	3	; case 2
  6642  0DEB  1903               	skipnz
  6643  0DEC  2DDF               	goto	l206
  6644  0DED  3A01               	xorlw	1	; case 3
  6645  0DEE  1903               	skipnz
  6646  0DEF  2DE1               	goto	l207
  6647  0DF0  2DF1               	goto	l4447
  6648  0DF1                     l4447:	
  6649                           
  6650                           ;main.c: 130: }
  6651                           ;main.c: 134: char sum = (left + up + down + right);
  6652  0DF1  3000               	movlw	0
  6653  0DF2  1970               	btfsc	_left/(0+8),_left& (0+7)
  6654  0DF3  3001               	movlw	1
  6655  0DF4  1871               	btfsc	_up/(0+8),_up& (0+7)
  6656  0DF5  3E01               	addlw	1
  6657  0DF6  18F0               	btfsc	_down/(0+8),_down& (0+7)
  6658  0DF7  3E01               	addlw	1
  6659  0DF8  1AF0               	btfsc	_right/(0+8),_right& (0+7)
  6660  0DF9  3E01               	addlw	1
  6661  0DFA  00A6               	movwf	??_PathTo
  6662  0DFB  0826               	movf	??_PathTo,w
  6663  0DFC  00C2               	movwf	PathTo@sum
  6664                           
  6665                           ;main.c: 135: if(sum <= 2){
  6666  0DFD  3003               	movlw	3
  6667  0DFE  0242               	subwf	PathTo@sum,w
  6668  0DFF  1803               	skipnc
  6669  0E00  2E1C               	goto	l208
  6670                           
  6671                           ;main.c: 136: x_int = x_path;
  6672  0E01  0862               	movf	_x_path,w
  6673  0E02  00A6               	movwf	??_PathTo
  6674  0E03  0826               	movf	??_PathTo,w
  6675  0E04  00E1               	movwf	_x_int
  6676                           
  6677                           ;main.c: 137: y_int = y_path;
  6678  0E05  0866               	movf	_y_path,w
  6679  0E06  00A6               	movwf	??_PathTo
  6680  0E07  0826               	movf	??_PathTo,w
  6681  0E08  00E5               	movwf	_y_int
  6682                           
  6683                           ;main.c: 143: if (left == 0)
  6684  0E09  1970               	btfsc	_left/(0+8),_left& (0+7)
  6685  0E0A  2E0D               	goto	l209
  6686                           
  6687                           ;main.c: 144: intersection_orientation = 3;
  6688  0E0B  3003               	movlw	3
  6689  0E0C  2E19               	goto	L5
  6690  0E0D                     l209:	
  6691                           
  6692                           ;main.c: 145: else if (up == 0)
  6693  0E0D  1871               	btfsc	_up/(0+8),_up& (0+7)
  6694  0E0E  2E11               	goto	l211
  6695                           
  6696                           ;main.c: 146: intersection_orientation = 0;
  6697  0E0F  01DA               	clrf	_intersection_orientation
  6698  0E10  2E1C               	goto	l208
  6699  0E11                     l211:	
  6700                           
  6701                           ;main.c: 147: else if (right == 0)
  6702  0E11  1AF0               	btfsc	_right/(0+8),_right& (0+7)
  6703  0E12  2E16               	goto	l213
  6704                           
  6705                           ;main.c: 148: intersection_orientation = 1;
  6706  0E13  01DA               	clrf	_intersection_orientation
  6707  0E14  0ADA               	incf	_intersection_orientation,f
  6708  0E15  2E1C               	goto	l208
  6709  0E16                     l213:	
  6710                           
  6711                           ;main.c: 149: else if (down == 0)
  6712  0E16  18F0               	btfsc	_down/(0+8),_down& (0+7)
  6713  0E17  2E1C               	goto	l208
  6714                           
  6715                           ;main.c: 150: intersection_orientation = 2;
  6716  0E18  3002               	movlw	2
  6717  0E19                     L5:	
  6718  0E19  00A6               	movwf	??_PathTo
  6719  0E1A  0826               	movf	??_PathTo,w
  6720  0E1B  00DA               	movwf	_intersection_orientation
  6721  0E1C                     l208:	
  6722                           
  6723                           ;main.c: 151: }
  6724                           ;main.c: 158: if ((x_path == x_target)){
  6725  0E1C  0862               	movf	_x_path,w
  6726  0E1D  0641               	xorwf	PathTo@x_target,w
  6727  0E1E  1D03               	skipz
  6728  0E1F  2F1A               	goto	l4527
  6729                           
  6730                           ;main.c: 159: if (y_path == y_target){
  6731  0E20  0866               	movf	_y_path,w
  6732  0E21  0625               	xorwf	PathTo@y_target,w
  6733  0E22  1D03               	skipz
  6734  0E23  2F1A               	goto	l4527
  6735                           
  6736                           ;main.c: 163: if(pathCount < pathCountShortest){
  6737  0E24  0868               	movf	_pathCountShortest,w
  6738  0E25  025D               	subwf	_pathCount,w
  6739  0E26  1803               	skipnc
  6740  0E27  2ED2               	goto	l4499
  6741                           
  6742                           ;main.c: 164: pathCountShortest = pathCount;
  6743  0E28  085D               	movf	_pathCount,w
  6744  0E29  00A6               	movwf	??_PathTo
  6745  0E2A  0826               	movf	??_PathTo,w
  6746  0E2B  00E8               	movwf	_pathCountShortest
  6747                           
  6748                           ;main.c: 165: for (r = 0; r <= 1; r++){
  6749  0E2C  01DE               	clrf	_r
  6750  0E2D                     L13:	
  6751  0E2D  3002               	movlw	2
  6752  0E2E  025E               	subwf	_r,w
  6753  0E2F  1803               	btfsc	3,0
  6754  0E30  2ED2               	goto	l4499
  6755                           
  6756                           ;main.c: 166: for (c = 0; c <= 15; c++){
  6757  0E31  01D9               	clrf	_c
  6758  0E32  3010               	movlw	16
  6759  0E33  0259               	subwf	_c,w
  6760  0E34  1803               	btfsc	3,0
  6761  0E35  2E64               	goto	l4485
  6762  0E36                     l4479:	
  6763                           
  6764                           ;main.c: 167: pathShortest[r][c] = path[r][c];
  6765  0E36  085E               	movf	_r,w
  6766  0E37  00A6               	movwf	??_PathTo
  6767  0E38  3004               	movlw	4
  6768  0E39                     u3525:	
  6769  0E39  1003               	clrc
  6770  0E3A  0DA6               	rlf	??_PathTo,f
  6771  0E3B  3EFF               	addlw	-1
  6772  0E3C  1D03               	skipz
  6773  0E3D  2E39               	goto	u3525
  6774  0E3E  30B8               	movlw	(low (_path| (0+256)))& (0+255)
  6775  0E3F  0726               	addwf	??_PathTo,w
  6776  0E40  00A7               	movwf	??_PathTo+1
  6777  0E41  0859               	movf	_c,w
  6778  0E42  0727               	addwf	??_PathTo+1,w
  6779  0E43  00A8               	movwf	??_PathTo+2
  6780  0E44  0828               	movf	??_PathTo+2,w
  6781  0E45  0084               	movwf	4
  6782  0E46  1783               	bsf	3,7	;select IRP bank3
  6783  0E47  0800               	movf	0,w
  6784  0E48  00A9               	movwf	??_PathTo+3
  6785  0E49  085E               	movf	_r,w
  6786  0E4A  00AA               	movwf	??_PathTo+4
  6787  0E4B  3004               	movlw	4
  6788  0E4C                     u3535:	
  6789  0E4C  1003               	clrc
  6790  0E4D  0DAA               	rlf	??_PathTo+4,f
  6791  0E4E  3EFF               	addlw	-1
  6792  0E4F  1D03               	skipz
  6793  0E50  2E4C               	goto	u3535
  6794  0E51  30A0               	movlw	(low (_pathShortest| 0))& (0+255)
  6795  0E52  072A               	addwf	??_PathTo+4,w
  6796  0E53  00AB               	movwf	??_PathTo+5
  6797  0E54  0859               	movf	_c,w
  6798  0E55  072B               	addwf	??_PathTo+5,w
  6799  0E56  00AC               	movwf	??_PathTo+6
  6800  0E57  082C               	movf	??_PathTo+6,w
  6801  0E58  0084               	movwf	4
  6802  0E59  0829               	movf	??_PathTo+3,w
  6803  0E5A  1383               	bcf	3,7	;select IRP bank1
  6804  0E5B  0080               	movwf	0
  6805  0E5C  3001               	movlw	1
  6806  0E5D  00A6               	movwf	??_PathTo
  6807  0E5E  0826               	movf	??_PathTo,w
  6808  0E5F  07D9               	addwf	_c,f
  6809  0E60  3010               	movlw	16
  6810  0E61  0259               	subwf	_c,w
  6811  0E62  1C03               	skipc
  6812  0E63  2E36               	goto	l4479
  6813  0E64                     l4485:	
  6814  0E64  3001               	movlw	1
  6815  0E65  00A6               	movwf	??_PathTo
  6816  0E66  0826               	movf	??_PathTo,w
  6817  0E67  07DE               	addwf	_r,f
  6818  0E68  2E2D               	goto	L13
  6819  0E69                     l4489:	
  6820                           ;main.c: 177: case 0: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 4);
  6821                           
  6822                           ;main.c: 168: }
  6823                           ;main.c: 169: }
  6824                           ;main.c: 170: }
  6825                           ;main.c: 176: switch(intersection_orientation){
  6826                           
  6827  0E69  3005               	movlw	5
  6828  0E6A  00A6               	movwf	??_PathTo
  6829  0E6B  0826               	movf	??_PathTo,w
  6830  0E6C  00A0               	movwf	___bmul@multiplicand
  6831  0E6D  0865               	movf	_y_int,w
  6832  0E6E  160A  118A  2536  120A  158A  	fcall	___bmul
  6833  0E73  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6834  0E74  1283               	bcf	3,5	;RP0=0, select bank0
  6835  0E75  1303               	bcf	3,6	;RP1=0, select bank0
  6836  0E76  0761               	addwf	_x_int,w
  6837  0E77  00A7               	movwf	??_PathTo+1
  6838  0E78  0827               	movf	??_PathTo+1,w
  6839  0E79  0084               	movwf	4
  6840  0E7A  1383               	bcf	3,7	;select IRP bank0
  6841  0E7B  0800               	movf	0,w
  6842  0E7C  3E04               	addlw	4
  6843  0E7D  2EBC               	goto	L14
  6844  0E7E                     l4491:	
  6845                           ;main.c: 179: case 1: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 2);
  6846                           
  6847                           ;main.c: 178: break;
  6848                           
  6849  0E7E  3005               	movlw	5
  6850  0E7F  00A6               	movwf	??_PathTo
  6851  0E80  0826               	movf	??_PathTo,w
  6852  0E81  00A0               	movwf	___bmul@multiplicand
  6853  0E82  0865               	movf	_y_int,w
  6854  0E83  160A  118A  2536  120A  158A  	fcall	___bmul
  6855  0E88  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6856  0E89  1283               	bcf	3,5	;RP0=0, select bank0
  6857  0E8A  1303               	bcf	3,6	;RP1=0, select bank0
  6858  0E8B  0761               	addwf	_x_int,w
  6859  0E8C  00A7               	movwf	??_PathTo+1
  6860  0E8D  0827               	movf	??_PathTo+1,w
  6861  0E8E  0084               	movwf	4
  6862  0E8F  1383               	bcf	3,7	;select IRP bank0
  6863  0E90  0800               	movf	0,w
  6864  0E91  3E02               	addlw	2
  6865  0E92  2EBC               	goto	L14
  6866  0E93                     l4493:	
  6867                           ;main.c: 181: case 2: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 1);
  6868                           
  6869                           ;main.c: 180: break;
  6870                           
  6871  0E93  3005               	movlw	5
  6872  0E94  00A6               	movwf	??_PathTo
  6873  0E95  0826               	movf	??_PathTo,w
  6874  0E96  00A0               	movwf	___bmul@multiplicand
  6875  0E97  0865               	movf	_y_int,w
  6876  0E98  160A  118A  2536  120A  158A  	fcall	___bmul
  6877  0E9D  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6878  0E9E  1283               	bcf	3,5	;RP0=0, select bank0
  6879  0E9F  1303               	bcf	3,6	;RP1=0, select bank0
  6880  0EA0  0761               	addwf	_x_int,w
  6881  0EA1  00A7               	movwf	??_PathTo+1
  6882  0EA2  0827               	movf	??_PathTo+1,w
  6883  0EA3  0084               	movwf	4
  6884  0EA4  1383               	bcf	3,7	;select IRP bank0
  6885  0EA5  0800               	movf	0,w
  6886  0EA6  3E01               	addlw	1
  6887  0EA7  2EBC               	goto	L14
  6888  0EA8                     l4495:	
  6889                           ;main.c: 183: case 3: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 8);
  6890                           
  6891                           ;main.c: 182: break;
  6892                           
  6893  0EA8  3005               	movlw	5
  6894  0EA9  00A6               	movwf	??_PathTo
  6895  0EAA  0826               	movf	??_PathTo,w
  6896  0EAB  00A0               	movwf	___bmul@multiplicand
  6897  0EAC  0865               	movf	_y_int,w
  6898  0EAD  160A  118A  2536  120A  158A  	fcall	___bmul
  6899  0EB2  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6900  0EB3  1283               	bcf	3,5	;RP0=0, select bank0
  6901  0EB4  1303               	bcf	3,6	;RP1=0, select bank0
  6902  0EB5  0761               	addwf	_x_int,w
  6903  0EB6  00A7               	movwf	??_PathTo+1
  6904  0EB7  0827               	movf	??_PathTo+1,w
  6905  0EB8  0084               	movwf	4
  6906  0EB9  1383               	bcf	3,7	;select IRP bank0
  6907  0EBA  0800               	movf	0,w
  6908  0EBB  3E08               	addlw	8
  6909  0EBC                     L14:	
  6910  0EBC  00A8               	movwf	??_PathTo+2
  6911  0EBD  3005               	movlw	5
  6912  0EBE  00A9               	movwf	??_PathTo+3
  6913  0EBF  0829               	movf	??_PathTo+3,w
  6914  0EC0  00A0               	movwf	___bmul@multiplicand
  6915  0EC1  0865               	movf	_y_int,w
  6916  0EC2  160A  118A  2536  120A  158A  	fcall	___bmul
  6917  0EC7  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6918  0EC8  1283               	bcf	3,5	;RP0=0, select bank0
  6919  0EC9  1303               	bcf	3,6	;RP1=0, select bank0
  6920  0ECA  0761               	addwf	_x_int,w
  6921  0ECB  00AA               	movwf	??_PathTo+4
  6922  0ECC  082A               	movf	??_PathTo+4,w
  6923  0ECD  0084               	movwf	4
  6924  0ECE  0828               	movf	??_PathTo+2,w
  6925  0ECF  1383               	bcf	3,7	;select IRP bank0
  6926  0ED0  0080               	movwf	0
  6927                           
  6928                           ;main.c: 185: }
  6929                           
  6930                           ;main.c: 184: break;
  6931  0ED1  2EE0               	goto	l4501
  6932  0ED2                     l4499:	
  6933  0ED2  085A               	movf	_intersection_orientation,w
  6934                           
  6935                           ; Switch size 1, requested type "space"
  6936                           ; Number of cases is 4, Range of values is 0 to 3
  6937                           ; switch strategies available:
  6938                           ; Name         Instructions Cycles
  6939                           ; simple_byte           13     7 (average)
  6940                           ; direct_byte           20     8 (fixed)
  6941                           ; jumptable            260     6 (fixed)
  6942                           ;	Chosen strategy is simple_byte
  6943  0ED3  3A00               	xorlw	0	; case 0
  6944  0ED4  1903               	skipnz
  6945  0ED5  2E69               	goto	l4489
  6946  0ED6  3A01               	xorlw	1	; case 1
  6947  0ED7  1903               	skipnz
  6948  0ED8  2E7E               	goto	l4491
  6949  0ED9  3A03               	xorlw	3	; case 2
  6950  0EDA  1903               	skipnz
  6951  0EDB  2E93               	goto	l4493
  6952  0EDC  3A01               	xorlw	1	; case 3
  6953  0EDD  1903               	skipnz
  6954  0EDE  2EA8               	goto	l4495
  6955  0EDF  2EE0               	goto	l4501
  6956  0EE0                     l4501:	
  6957                           
  6958                           ;main.c: 188: x_path = x;
  6959  0EE0  0869               	movf	_x,w
  6960  0EE1  00A6               	movwf	??_PathTo
  6961  0EE2  0826               	movf	??_PathTo,w
  6962  0EE3  00E2               	movwf	_x_path
  6963                           
  6964                           ;main.c: 189: y_path = y;
  6965  0EE4  0863               	movf	_y,w
  6966  0EE5  00A6               	movwf	??_PathTo
  6967  0EE6  0826               	movf	??_PathTo,w
  6968  0EE7  00E6               	movwf	_y_path
  6969                           
  6970                           ;main.c: 190: orientation_path = orientation;
  6971  0EE8  0867               	movf	_orientation,w
  6972  0EE9  00A6               	movwf	??_PathTo
  6973  0EEA  0826               	movf	??_PathTo,w
  6974  0EEB  00DC               	movwf	_orientation_path
  6975                           
  6976                           ;main.c: 191: pathCount = 0;
  6977  0EEC  01DD               	clrf	_pathCount
  6978                           
  6979                           ;main.c: 192: reset_flag = 1;
  6980  0EED  1670               	bsf	_reset_flag/(0+8),_reset_flag& (0+7)
  6981                           
  6982                           ;main.c: 195: for (r = 0; r <= 1; r++){
  6983  0EEE  01DE               	clrf	_r
  6984  0EEF  3002               	movlw	2
  6985  0EF0  025E               	subwf	_r,w
  6986  0EF1  1803               	btfsc	3,0
  6987  0EF2  2F1A               	goto	l4527
  6988  0EF3                     l4511:	
  6989                           
  6990                           ;main.c: 196: for (c = 0; c <= 15; c++){
  6991  0EF3  01D9               	clrf	_c
  6992  0EF4  3010               	movlw	16
  6993  0EF5  0259               	subwf	_c,w
  6994  0EF6  1803               	btfsc	3,0
  6995  0EF7  2F12               	goto	l4523
  6996  0EF8                     l4517:	
  6997                           
  6998                           ;main.c: 197: path[r][c] = 0;
  6999  0EF8  085E               	movf	_r,w
  7000  0EF9  00A6               	movwf	??_PathTo
  7001  0EFA  3004               	movlw	4
  7002  0EFB                     u3585:	
  7003  0EFB  1003               	clrc
  7004  0EFC  0DA6               	rlf	??_PathTo,f
  7005  0EFD  3EFF               	addlw	-1
  7006  0EFE  1D03               	skipz
  7007  0EFF  2EFB               	goto	u3585
  7008  0F00  30B8               	movlw	(low (_path| (0+256)))& (0+255)
  7009  0F01  0726               	addwf	??_PathTo,w
  7010  0F02  00A7               	movwf	??_PathTo+1
  7011  0F03  0859               	movf	_c,w
  7012  0F04  0727               	addwf	??_PathTo+1,w
  7013  0F05  00A8               	movwf	??_PathTo+2
  7014  0F06  0828               	movf	??_PathTo+2,w
  7015  0F07  0084               	movwf	4
  7016  0F08  1783               	bsf	3,7	;select IRP bank3
  7017  0F09  0180               	clrf	0
  7018  0F0A  3001               	movlw	1
  7019  0F0B  00A6               	movwf	??_PathTo
  7020  0F0C  0826               	movf	??_PathTo,w
  7021  0F0D  07D9               	addwf	_c,f
  7022  0F0E  3010               	movlw	16
  7023  0F0F  0259               	subwf	_c,w
  7024  0F10  1C03               	skipc
  7025  0F11  2EF8               	goto	l4517
  7026  0F12                     l4523:	
  7027  0F12  3001               	movlw	1
  7028  0F13  00A6               	movwf	??_PathTo
  7029  0F14  0826               	movf	??_PathTo,w
  7030  0F15  07DE               	addwf	_r,f
  7031  0F16  3002               	movlw	2
  7032  0F17  025E               	subwf	_r,w
  7033  0F18  1C03               	skipc
  7034  0F19  2EF3               	goto	l4511
  7035  0F1A                     l4527:	
  7036                           
  7037                           ;main.c: 198: }
  7038                           ;main.c: 199: }
  7039                           ;main.c: 200: }
  7040                           ;main.c: 201: }
  7041                           ;main.c: 207: if((sum == 4) || (pathCount >= 15)){
  7042  0F1A  3004               	movlw	4
  7043  0F1B  0642               	xorwf	PathTo@sum,w
  7044  0F1C  1903               	btfsc	3,2
  7045  0F1D  2F8C               	goto	l4541
  7046  0F1E  300F               	movlw	15
  7047  0F1F  025D               	subwf	_pathCount,w
  7048  0F20  1803               	btfsc	3,0
  7049  0F21  2F8C               	goto	l4541
  7050  0F22  2FD4               	goto	l233
  7051  0F23                     l4531:	
  7052                           ;main.c: 211: case 0: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 4);
  7053                           
  7054                           ;main.c: 210: switch(intersection_orientation){
  7055                           
  7056  0F23  3005               	movlw	5
  7057  0F24  00A6               	movwf	??_PathTo
  7058  0F25  0826               	movf	??_PathTo,w
  7059  0F26  00A0               	movwf	___bmul@multiplicand
  7060  0F27  0865               	movf	_y_int,w
  7061  0F28  160A  118A  2536  120A  158A  	fcall	___bmul
  7062  0F2D  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  7063  0F2E  1283               	bcf	3,5	;RP0=0, select bank0
  7064  0F2F  1303               	bcf	3,6	;RP1=0, select bank0
  7065  0F30  0761               	addwf	_x_int,w
  7066  0F31  00A7               	movwf	??_PathTo+1
  7067  0F32  0827               	movf	??_PathTo+1,w
  7068  0F33  0084               	movwf	4
  7069  0F34  1383               	bcf	3,7	;select IRP bank0
  7070  0F35  0800               	movf	0,w
  7071  0F36  3E04               	addlw	4
  7072  0F37  2F76               	goto	L15
  7073  0F38                     l4533:	
  7074                           ;main.c: 213: case 1: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 2);
  7075                           
  7076                           ;main.c: 212: break;
  7077                           
  7078  0F38  3005               	movlw	5
  7079  0F39  00A6               	movwf	??_PathTo
  7080  0F3A  0826               	movf	??_PathTo,w
  7081  0F3B  00A0               	movwf	___bmul@multiplicand
  7082  0F3C  0865               	movf	_y_int,w
  7083  0F3D  160A  118A  2536  120A  158A  	fcall	___bmul
  7084  0F42  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  7085  0F43  1283               	bcf	3,5	;RP0=0, select bank0
  7086  0F44  1303               	bcf	3,6	;RP1=0, select bank0
  7087  0F45  0761               	addwf	_x_int,w
  7088  0F46  00A7               	movwf	??_PathTo+1
  7089  0F47  0827               	movf	??_PathTo+1,w
  7090  0F48  0084               	movwf	4
  7091  0F49  1383               	bcf	3,7	;select IRP bank0
  7092  0F4A  0800               	movf	0,w
  7093  0F4B  3E02               	addlw	2
  7094  0F4C  2F76               	goto	L15
  7095  0F4D                     l4535:	
  7096                           ;main.c: 215: case 2: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 1);
  7097                           
  7098                           ;main.c: 214: break;
  7099                           
  7100  0F4D  3005               	movlw	5
  7101  0F4E  00A6               	movwf	??_PathTo
  7102  0F4F  0826               	movf	??_PathTo,w
  7103  0F50  00A0               	movwf	___bmul@multiplicand
  7104  0F51  0865               	movf	_y_int,w
  7105  0F52  160A  118A  2536  120A  158A  	fcall	___bmul
  7106  0F57  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  7107  0F58  1283               	bcf	3,5	;RP0=0, select bank0
  7108  0F59  1303               	bcf	3,6	;RP1=0, select bank0
  7109  0F5A  0761               	addwf	_x_int,w
  7110  0F5B  00A7               	movwf	??_PathTo+1
  7111  0F5C  0827               	movf	??_PathTo+1,w
  7112  0F5D  0084               	movwf	4
  7113  0F5E  1383               	bcf	3,7	;select IRP bank0
  7114  0F5F  0800               	movf	0,w
  7115  0F60  3E01               	addlw	1
  7116  0F61  2F76               	goto	L15
  7117  0F62                     l4537:	
  7118                           ;main.c: 217: case 3: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 8);
  7119                           
  7120                           ;main.c: 216: break;
  7121                           
  7122  0F62  3005               	movlw	5
  7123  0F63  00A6               	movwf	??_PathTo
  7124  0F64  0826               	movf	??_PathTo,w
  7125  0F65  00A0               	movwf	___bmul@multiplicand
  7126  0F66  0865               	movf	_y_int,w
  7127  0F67  160A  118A  2536  120A  158A  	fcall	___bmul
  7128  0F6C  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  7129  0F6D  1283               	bcf	3,5	;RP0=0, select bank0
  7130  0F6E  1303               	bcf	3,6	;RP1=0, select bank0
  7131  0F6F  0761               	addwf	_x_int,w
  7132  0F70  00A7               	movwf	??_PathTo+1
  7133  0F71  0827               	movf	??_PathTo+1,w
  7134  0F72  0084               	movwf	4
  7135  0F73  1383               	bcf	3,7	;select IRP bank0
  7136  0F74  0800               	movf	0,w
  7137  0F75  3E08               	addlw	8
  7138  0F76                     L15:	
  7139  0F76  00A8               	movwf	??_PathTo+2
  7140  0F77  3005               	movlw	5
  7141  0F78  00A9               	movwf	??_PathTo+3
  7142  0F79  0829               	movf	??_PathTo+3,w
  7143  0F7A  00A0               	movwf	___bmul@multiplicand
  7144  0F7B  0865               	movf	_y_int,w
  7145  0F7C  160A  118A  2536  120A  158A  	fcall	___bmul
  7146  0F81  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  7147  0F82  1283               	bcf	3,5	;RP0=0, select bank0
  7148  0F83  1303               	bcf	3,6	;RP1=0, select bank0
  7149  0F84  0761               	addwf	_x_int,w
  7150  0F85  00AA               	movwf	??_PathTo+4
  7151  0F86  082A               	movf	??_PathTo+4,w
  7152  0F87  0084               	movwf	4
  7153  0F88  0828               	movf	??_PathTo+2,w
  7154  0F89  1383               	bcf	3,7	;select IRP bank0
  7155  0F8A  0080               	movwf	0
  7156                           
  7157                           ;main.c: 219: }
  7158                           
  7159                           ;main.c: 218: break;
  7160  0F8B  2F9A               	goto	l4543
  7161  0F8C                     l4541:	
  7162  0F8C  085A               	movf	_intersection_orientation,w
  7163                           
  7164                           ; Switch size 1, requested type "space"
  7165                           ; Number of cases is 4, Range of values is 0 to 3
  7166                           ; switch strategies available:
  7167                           ; Name         Instructions Cycles
  7168                           ; simple_byte           13     7 (average)
  7169                           ; direct_byte           20     8 (fixed)
  7170                           ; jumptable            260     6 (fixed)
  7171                           ;	Chosen strategy is simple_byte
  7172  0F8D  3A00               	xorlw	0	; case 0
  7173  0F8E  1903               	skipnz
  7174  0F8F  2F23               	goto	l4531
  7175  0F90  3A01               	xorlw	1	; case 1
  7176  0F91  1903               	skipnz
  7177  0F92  2F38               	goto	l4533
  7178  0F93  3A03               	xorlw	3	; case 2
  7179  0F94  1903               	skipnz
  7180  0F95  2F4D               	goto	l4535
  7181  0F96  3A01               	xorlw	1	; case 3
  7182  0F97  1903               	skipnz
  7183  0F98  2F62               	goto	l4537
  7184  0F99  2F9A               	goto	l4543
  7185  0F9A                     l4543:	
  7186                           
  7187                           ;main.c: 222: x_path = x;
  7188  0F9A  0869               	movf	_x,w
  7189  0F9B  00A6               	movwf	??_PathTo
  7190  0F9C  0826               	movf	??_PathTo,w
  7191  0F9D  00E2               	movwf	_x_path
  7192                           
  7193                           ;main.c: 223: y_path = y;
  7194  0F9E  0863               	movf	_y,w
  7195  0F9F  00A6               	movwf	??_PathTo
  7196  0FA0  0826               	movf	??_PathTo,w
  7197  0FA1  00E6               	movwf	_y_path
  7198                           
  7199                           ;main.c: 224: orientation_path = orientation;
  7200  0FA2  0867               	movf	_orientation,w
  7201  0FA3  00A6               	movwf	??_PathTo
  7202  0FA4  0826               	movf	??_PathTo,w
  7203  0FA5  00DC               	movwf	_orientation_path
  7204                           
  7205                           ;main.c: 225: pathCount = 0;
  7206  0FA6  01DD               	clrf	_pathCount
  7207                           
  7208                           ;main.c: 226: reset_flag = 1;
  7209  0FA7  1670               	bsf	_reset_flag/(0+8),_reset_flag& (0+7)
  7210                           
  7211                           ;main.c: 228: for (r = 0; r <= 1; r++){
  7212  0FA8  01DE               	clrf	_r
  7213  0FA9  3002               	movlw	2
  7214  0FAA  025E               	subwf	_r,w
  7215  0FAB  1803               	btfsc	3,0
  7216  0FAC  2FD4               	goto	l233
  7217  0FAD                     l4553:	
  7218                           
  7219                           ;main.c: 229: for (c = 0; c <= 15; c++){
  7220  0FAD  01D9               	clrf	_c
  7221  0FAE  3010               	movlw	16
  7222  0FAF  0259               	subwf	_c,w
  7223  0FB0  1803               	btfsc	3,0
  7224  0FB1  2FCC               	goto	l4565
  7225  0FB2                     l4559:	
  7226                           
  7227                           ;main.c: 230: path[r][c] = 0;
  7228  0FB2  085E               	movf	_r,w
  7229  0FB3  00A6               	movwf	??_PathTo
  7230  0FB4  3004               	movlw	4
  7231  0FB5                     u3655:	
  7232  0FB5  1003               	clrc
  7233  0FB6  0DA6               	rlf	??_PathTo,f
  7234  0FB7  3EFF               	addlw	-1
  7235  0FB8  1D03               	skipz
  7236  0FB9  2FB5               	goto	u3655
  7237  0FBA  30B8               	movlw	(low (_path| (0+256)))& (0+255)
  7238  0FBB  0726               	addwf	??_PathTo,w
  7239  0FBC  00A7               	movwf	??_PathTo+1
  7240  0FBD  0859               	movf	_c,w
  7241  0FBE  0727               	addwf	??_PathTo+1,w
  7242  0FBF  00A8               	movwf	??_PathTo+2
  7243  0FC0  0828               	movf	??_PathTo+2,w
  7244  0FC1  0084               	movwf	4
  7245  0FC2  1783               	bsf	3,7	;select IRP bank3
  7246  0FC3  0180               	clrf	0
  7247  0FC4  3001               	movlw	1
  7248  0FC5  00A6               	movwf	??_PathTo
  7249  0FC6  0826               	movf	??_PathTo,w
  7250  0FC7  07D9               	addwf	_c,f
  7251  0FC8  3010               	movlw	16
  7252  0FC9  0259               	subwf	_c,w
  7253  0FCA  1C03               	skipc
  7254  0FCB  2FB2               	goto	l4559
  7255  0FCC                     l4565:	
  7256  0FCC  3001               	movlw	1
  7257  0FCD  00A6               	movwf	??_PathTo
  7258  0FCE  0826               	movf	??_PathTo,w
  7259  0FCF  07DE               	addwf	_r,f
  7260  0FD0  3002               	movlw	2
  7261  0FD1  025E               	subwf	_r,w
  7262  0FD2  1C03               	skipc
  7263  0FD3  2FAD               	goto	l4553
  7264  0FD4                     l233:	
  7265                           
  7266                           ;main.c: 231: }
  7267                           ;main.c: 232: }
  7268                           ;main.c: 233: }
  7269                           ;main.c: 242: if (reset_flag != 1){
  7270  0FD4  1A70               	btfsc	_reset_flag/(0+8),_reset_flag& (0+7)
  7271  0FD5  2FF9               	goto	l246
  7272                           
  7273                           ;main.c: 245: if(left == 0){
  7274  0FD6  1970               	btfsc	_left/(0+8),_left& (0+7)
  7275  0FD7  2FDC               	goto	l247
  7276                           
  7277                           ;main.c: 246: x_path--;
  7278  0FD8  3001               	movlw	1
  7279  0FD9  02E2               	subwf	_x_path,f
  7280                           
  7281                           ;main.c: 247: orientation_path = 3;
  7282  0FDA  3003               	movlw	3
  7283  0FDB  2FF2               	goto	L17
  7284  0FDC                     l247:	
  7285                           ;main.c: 249: }
  7286                           
  7287                           ;main.c: 248: pathCount++;
  7288                           
  7289                           
  7290                           ;main.c: 250: else if(up == 0){
  7291  0FDC  1871               	btfsc	_up/(0+8),_up& (0+7)
  7292  0FDD  2FE2               	goto	l249
  7293                           
  7294                           ;main.c: 251: y_path--;
  7295  0FDE  3001               	movlw	1
  7296  0FDF  02E6               	subwf	_y_path,f
  7297                           
  7298                           ;main.c: 252: orientation_path = 0;
  7299  0FE0  01DC               	clrf	_orientation_path
  7300  0FE1  2FF5               	goto	l4591
  7301  0FE2                     l249:	
  7302                           ;main.c: 254: }
  7303                           
  7304                           ;main.c: 253: pathCount++;
  7305                           
  7306                           
  7307                           ;main.c: 255: else if(right == 0){
  7308  0FE2  1AF0               	btfsc	_right/(0+8),_right& (0+7)
  7309  0FE3  2FEB               	goto	l251
  7310                           
  7311                           ;main.c: 256: x_path++;
  7312  0FE4  3001               	movlw	1
  7313  0FE5  00A6               	movwf	??_PathTo
  7314  0FE6  0826               	movf	??_PathTo,w
  7315  0FE7  07E2               	addwf	_x_path,f
  7316                           
  7317                           ;main.c: 257: orientation_path = 1;
  7318  0FE8  01DC               	clrf	_orientation_path
  7319  0FE9  0ADC               	incf	_orientation_path,f
  7320  0FEA  2FF5               	goto	l4591
  7321  0FEB                     l251:	
  7322                           ;main.c: 259: }
  7323                           
  7324                           ;main.c: 258: pathCount++;
  7325                           
  7326                           
  7327                           ;main.c: 260: else if(down == 0){
  7328  0FEB  18F0               	btfsc	_down/(0+8),_down& (0+7)
  7329  0FEC  2FF9               	goto	l246
  7330                           
  7331                           ;main.c: 261: y_path++;
  7332  0FED  3001               	movlw	1
  7333  0FEE  00A6               	movwf	??_PathTo
  7334  0FEF  0826               	movf	??_PathTo,w
  7335  0FF0  07E6               	addwf	_y_path,f
  7336                           
  7337                           ;main.c: 262: orientation_path = 2;
  7338  0FF1  3002               	movlw	2
  7339  0FF2                     L17:	
  7340  0FF2  00A6               	movwf	??_PathTo
  7341  0FF3  0826               	movf	??_PathTo,w
  7342  0FF4  00DC               	movwf	_orientation_path
  7343  0FF5                     l4591:	
  7344                           
  7345                           ;main.c: 263: pathCount++;
  7346  0FF5  3001               	movlw	1
  7347  0FF6  00A6               	movwf	??_PathTo
  7348  0FF7  0826               	movf	??_PathTo,w
  7349  0FF8  07DD               	addwf	_pathCount,f
  7350  0FF9                     l246:	
  7351  0FF9  3001               	movlw	1
  7352  0FFA  07C3               	addwf	PathTo@loop,f
  7353  0FFB  1803               	skipnc
  7354  0FFC  0AC4               	incf	PathTo@loop+1,f
  7355  0FFD  3000               	movlw	0
  7356  0FFE  07C4               	addwf	PathTo@loop+1,f
  7357  0FFF  2D4E               	goto	L16
  7358  1000                     __end_of_PathTo:	
  7359                           
  7360                           	psect	text24
  7361  15C8                     __ptext24:	
  7362 ;; *************** function _lcdWriteString *****************
  7363 ;; Defined at:
  7364 ;;		line 32 in file "LCD.c"
  7365 ;; Parameters:    Size  Location     Type
  7366 ;;  s               1    wreg     PTR unsigned char 
  7367 ;;		 -> STR_1(11), 
  7368 ;; Auto vars:     Size  Location     Type
  7369 ;;  s               1    4[BANK0 ] PTR unsigned char 
  7370 ;;		 -> STR_1(11), 
  7371 ;; Return value:  Size  Location     Type
  7372 ;;                  1    wreg      void 
  7373 ;; Registers used:
  7374 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7375 ;; Tracked objects:
  7376 ;;		On entry : 0/0
  7377 ;;		On exit  : 0/0
  7378 ;;		Unchanged: 0/0
  7379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7380 ;;      Params:         0       0       0       0       0
  7381 ;;      Locals:         0       1       0       0       0
  7382 ;;      Temps:          0       1       0       0       0
  7383 ;;      Totals:         0       2       0       0       0
  7384 ;;Total ram usage:        2 bytes
  7385 ;; Hardware stack levels used:    1
  7386 ;; Hardware stack levels required when called:    2
  7387 ;; This function calls:
  7388 ;;		_lcdWriteData
  7389 ;; This function is called by:
  7390 ;;		_PathTo
  7391 ;; This function uses a non-reentrant model
  7392 ;;
  7393                           
  7394                           
  7395                           ;psect for function _lcdWriteString
  7396  15C8                     _lcdWriteString:	
  7397                           
  7398                           ;incstack = 0
  7399                           ; Regs used in _lcdWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7400                           ;lcdWriteString@s stored from wreg
  7401  15C8  1283               	bcf	3,5	;RP0=0, select bank0
  7402  15C9  1303               	bcf	3,6	;RP1=0, select bank0
  7403  15CA  00A4               	movwf	lcdWriteString@s
  7404  15CB                     l4229:	
  7405                           ;LCD.c: 34: while(*s) lcdWriteData(*s++);
  7406                           
  7407  15CB  0824               	movf	lcdWriteString@s,w
  7408  15CC  0084               	movwf	4
  7409  15CD  160A  118A  2000  160A  118A  	fcall	stringdir
  7410  15D2  3A00               	xorlw	0
  7411  15D3  1903               	btfsc	3,2
  7412  15D4  0008               	return
  7413  15D5  0824               	movf	lcdWriteString@s,w
  7414  15D6  0084               	movwf	4
  7415  15D7  160A  118A  2000  160A  118A  	fcall	stringdir
  7416  15DC  160A  118A  2549  160A  118A  	fcall	_lcdWriteData
  7417  15E1  3001               	movlw	1
  7418  15E2  1283               	bcf	3,5	;RP0=0, select bank0
  7419  15E3  1303               	bcf	3,6	;RP1=0, select bank0
  7420  15E4  00A3               	movwf	??_lcdWriteString
  7421  15E5  0823               	movf	??_lcdWriteString,w
  7422  15E6  07A4               	addwf	lcdWriteString@s,f
  7423  15E7  2DCB               	goto	l4229
  7424  15E8                     __end_of_lcdWriteString:	
  7425                           
  7426                           	psect	text25
  7427  1549                     __ptext25:	
  7428 ;; *************** function _lcdWriteData *****************
  7429 ;; Defined at:
  7430 ;;		line 16 in file "LCD.c"
  7431 ;; Parameters:    Size  Location     Type
  7432 ;;  databyte        1    wreg     unsigned char 
  7433 ;; Auto vars:     Size  Location     Type
  7434 ;;  databyte        1    2[BANK0 ] unsigned char 
  7435 ;; Return value:  Size  Location     Type
  7436 ;;                  1    wreg      void 
  7437 ;; Registers used:
  7438 ;;		wreg
  7439 ;; Tracked objects:
  7440 ;;		On entry : 0/0
  7441 ;;		On exit  : 0/0
  7442 ;;		Unchanged: 0/0
  7443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7444 ;;      Params:         0       0       0       0       0
  7445 ;;      Locals:         0       1       0       0       0
  7446 ;;      Temps:          0       2       0       0       0
  7447 ;;      Totals:         0       3       0       0       0
  7448 ;;Total ram usage:        3 bytes
  7449 ;; Hardware stack levels used:    1
  7450 ;; Hardware stack levels required when called:    1
  7451 ;; This function calls:
  7452 ;;		Nothing
  7453 ;; This function is called by:
  7454 ;;		_lcdWriteString
  7455 ;;		_lcdWriteToDigitBCD
  7456 ;; This function uses a non-reentrant model
  7457 ;;
  7458                           
  7459                           
  7460                           ;psect for function _lcdWriteData
  7461  1549                     _lcdWriteData:	
  7462                           
  7463                           ;incstack = 0
  7464                           ; Regs used in _lcdWriteData: [wreg]
  7465                           ;lcdWriteData@databyte stored from wreg
  7466  1549  1283               	bcf	3,5	;RP0=0, select bank0
  7467  154A  1303               	bcf	3,6	;RP1=0, select bank0
  7468  154B  00A2               	movwf	lcdWriteData@databyte
  7469                           
  7470                           ;LCD.c: 17: RE2 = 0;
  7471  154C  1109               	bcf	9,2	;volatile
  7472                           
  7473                           ;LCD.c: 18: RE1 = 0;
  7474  154D  1089               	bcf	9,1	;volatile
  7475                           
  7476                           ;LCD.c: 19: RE0 = 1;
  7477  154E  1409               	bsf	9,0	;volatile
  7478                           
  7479                           ;LCD.c: 20: PORTD = databyte;
  7480  154F  0822               	movf	lcdWriteData@databyte,w
  7481  1550  0088               	movwf	8	;volatile
  7482                           
  7483                           ;LCD.c: 21: RE2 = 1;
  7484  1551  1509               	bsf	9,2	;volatile
  7485                           
  7486                           ;LCD.c: 22: RE2 = 0;
  7487  1552  1109               	bcf	9,2	;volatile
  7488                           
  7489                           ;LCD.c: 23: _delay((unsigned long)((1)*(20000000/4000.0)));
  7490  1553  3007               	movlw	7
  7491  1554  00A1               	movwf	??_lcdWriteData+1
  7492  1555  307D               	movlw	125
  7493  1556  00A0               	movwf	??_lcdWriteData
  7494  1557                     u4277:	
  7495  1557  0BA0               	decfsz	??_lcdWriteData,f
  7496  1558  2D57               	goto	u4277
  7497  1559  0BA1               	decfsz	??_lcdWriteData+1,f
  7498  155A  2D57               	goto	u4277
  7499  155B  0008               	return
  7500  155C                     __end_of_lcdWriteData:	
  7501                           
  7502                           	psect	text26
  7503  14F4                     __ptext26:	
  7504 ;; *************** function _lcdSetCursor *****************
  7505 ;; Defined at:
  7506 ;;		line 27 in file "LCD.c"
  7507 ;; Parameters:    Size  Location     Type
  7508 ;;  address         1    wreg     unsigned char 
  7509 ;; Auto vars:     Size  Location     Type
  7510 ;;  address         1    3[BANK0 ] unsigned char 
  7511 ;; Return value:  Size  Location     Type
  7512 ;;                  1    wreg      void 
  7513 ;; Registers used:
  7514 ;;		wreg, status,2, status,0, pclath, cstack
  7515 ;; Tracked objects:
  7516 ;;		On entry : 0/0
  7517 ;;		On exit  : 0/0
  7518 ;;		Unchanged: 0/0
  7519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7520 ;;      Params:         0       0       0       0       0
  7521 ;;      Locals:         0       1       0       0       0
  7522 ;;      Temps:          0       0       0       0       0
  7523 ;;      Totals:         0       1       0       0       0
  7524 ;;Total ram usage:        1 bytes
  7525 ;; Hardware stack levels used:    1
  7526 ;; Hardware stack levels required when called:    2
  7527 ;; This function calls:
  7528 ;;		_lcdWriteControl
  7529 ;; This function is called by:
  7530 ;;		_PathTo
  7531 ;;		_ADCMain
  7532 ;; This function uses a non-reentrant model
  7533 ;;
  7534                           
  7535                           
  7536                           ;psect for function _lcdSetCursor
  7537  14F4                     _lcdSetCursor:	
  7538                           
  7539                           ;incstack = 0
  7540                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  7541                           ;lcdSetCursor@address stored from wreg
  7542  14F4  1283               	bcf	3,5	;RP0=0, select bank0
  7543  14F5  1303               	bcf	3,6	;RP1=0, select bank0
  7544  14F6  00A3               	movwf	lcdSetCursor@address
  7545                           
  7546                           ;LCD.c: 28: address |= 0b10000000;
  7547  14F7  17A3               	bsf	lcdSetCursor@address,7
  7548                           
  7549                           ;LCD.c: 29: lcdWriteControl(address);
  7550  14F8  0823               	movf	lcdSetCursor@address,w
  7551  14F9  160A  118A  255C   	fcall	_lcdWriteControl
  7552  14FC  0008               	return
  7553  14FD                     __end_of_lcdSetCursor:	
  7554                           
  7555                           	psect	text27
  7556  155C                     __ptext27:	
  7557 ;; *************** function _lcdWriteControl *****************
  7558 ;; Defined at:
  7559 ;;		line 5 in file "LCD.c"
  7560 ;; Parameters:    Size  Location     Type
  7561 ;;  databyte        1    wreg     unsigned char 
  7562 ;; Auto vars:     Size  Location     Type
  7563 ;;  databyte        1    2[BANK0 ] unsigned char 
  7564 ;; Return value:  Size  Location     Type
  7565 ;;                  1    wreg      void 
  7566 ;; Registers used:
  7567 ;;		wreg
  7568 ;; Tracked objects:
  7569 ;;		On entry : 0/0
  7570 ;;		On exit  : 0/0
  7571 ;;		Unchanged: 0/0
  7572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7573 ;;      Params:         0       0       0       0       0
  7574 ;;      Locals:         0       1       0       0       0
  7575 ;;      Temps:          0       2       0       0       0
  7576 ;;      Totals:         0       3       0       0       0
  7577 ;;Total ram usage:        3 bytes
  7578 ;; Hardware stack levels used:    1
  7579 ;; Hardware stack levels required when called:    1
  7580 ;; This function calls:
  7581 ;;		Nothing
  7582 ;; This function is called by:
  7583 ;;		_lcdSetCursor
  7584 ;;		_setupLCD
  7585 ;; This function uses a non-reentrant model
  7586 ;;
  7587                           
  7588                           
  7589                           ;psect for function _lcdWriteControl
  7590  155C                     _lcdWriteControl:	
  7591                           
  7592                           ;incstack = 0
  7593                           ; Regs used in _lcdWriteControl: [wreg]
  7594                           ;lcdWriteControl@databyte stored from wreg
  7595  155C  1283               	bcf	3,5	;RP0=0, select bank0
  7596  155D  1303               	bcf	3,6	;RP1=0, select bank0
  7597  155E  00A2               	movwf	lcdWriteControl@databyte
  7598                           
  7599                           ;LCD.c: 6: RE2 = 0;
  7600  155F  1109               	bcf	9,2	;volatile
  7601                           
  7602                           ;LCD.c: 7: RE1 = 0;
  7603  1560  1089               	bcf	9,1	;volatile
  7604                           
  7605                           ;LCD.c: 8: RE0 = 0;
  7606  1561  1009               	bcf	9,0	;volatile
  7607                           
  7608                           ;LCD.c: 9: PORTD = databyte;
  7609  1562  0822               	movf	lcdWriteControl@databyte,w
  7610  1563  0088               	movwf	8	;volatile
  7611                           
  7612                           ;LCD.c: 10: RE2 = 1;
  7613  1564  1509               	bsf	9,2	;volatile
  7614                           
  7615                           ;LCD.c: 11: RE2 = 0;
  7616  1565  1109               	bcf	9,2	;volatile
  7617                           
  7618                           ;LCD.c: 12: _delay((unsigned long)((2)*(20000000/4000.0)));
  7619  1566  300D               	movlw	13
  7620  1567  00A1               	movwf	??_lcdWriteControl+1
  7621  1568  30FB               	movlw	251
  7622  1569  00A0               	movwf	??_lcdWriteControl
  7623  156A                     u4287:	
  7624  156A  0BA0               	decfsz	??_lcdWriteControl,f
  7625  156B  2D6A               	goto	u4287
  7626  156C  0BA1               	decfsz	??_lcdWriteControl+1,f
  7627  156D  2D6A               	goto	u4287
  7628  156E  2D6F               	nop2
  7629  156F  0008               	return
  7630  1570                     __end_of_lcdWriteControl:	
  7631                           
  7632                           	psect	text28
  7633  1536                     __ptext28:	
  7634 ;; *************** function ___bmul *****************
  7635 ;; Defined at:
  7636 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  7637 ;; Parameters:    Size  Location     Type
  7638 ;;  multiplier      1    wreg     unsigned char 
  7639 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7640 ;; Auto vars:     Size  Location     Type
  7641 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7642 ;;  product         1    2[BANK0 ] unsigned char 
  7643 ;; Return value:  Size  Location     Type
  7644 ;;                  1    wreg      unsigned char 
  7645 ;; Registers used:
  7646 ;;		wreg, status,2, status,0
  7647 ;; Tracked objects:
  7648 ;;		On entry : 0/0
  7649 ;;		On exit  : 0/0
  7650 ;;		Unchanged: 0/0
  7651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7652 ;;      Params:         0       1       0       0       0
  7653 ;;      Locals:         0       2       0       0       0
  7654 ;;      Temps:          0       1       0       0       0
  7655 ;;      Totals:         0       4       0       0       0
  7656 ;;Total ram usage:        4 bytes
  7657 ;; Hardware stack levels used:    1
  7658 ;; Hardware stack levels required when called:    1
  7659 ;; This function calls:
  7660 ;;		Nothing
  7661 ;; This function is called by:
  7662 ;;		_PathTo
  7663 ;;		_re_route
  7664 ;; This function uses a non-reentrant model
  7665 ;;
  7666                           
  7667                           
  7668                           ;psect for function ___bmul
  7669  1536                     ___bmul:	
  7670                           
  7671                           ;incstack = 0
  7672                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7673                           ;___bmul@multiplier stored from wreg
  7674  1536  1283               	bcf	3,5	;RP0=0, select bank0
  7675  1537  1303               	bcf	3,6	;RP1=0, select bank0
  7676  1538  00A3               	movwf	___bmul@multiplier
  7677  1539  01A2               	clrf	___bmul@product
  7678  153A                     l4333:	
  7679  153A  1C23               	btfss	___bmul@multiplier,0
  7680  153B  2D40               	goto	l4337
  7681  153C  0820               	movf	___bmul@multiplicand,w
  7682  153D  00A1               	movwf	??___bmul
  7683  153E  0821               	movf	??___bmul,w
  7684  153F  07A2               	addwf	___bmul@product,f
  7685  1540                     l4337:	
  7686  1540  1003               	clrc
  7687  1541  0DA0               	rlf	___bmul@multiplicand,f
  7688  1542  1003               	clrc
  7689  1543  0CA3               	rrf	___bmul@multiplier,f
  7690  1544  0823               	movf	___bmul@multiplier,w
  7691  1545  1D03               	btfss	3,2
  7692  1546  2D3A               	goto	l4333
  7693  1547  0822               	movf	___bmul@product,w
  7694  1548  0008               	return
  7695  1549                     __end_of___bmul:	
  7696                           
  7697                           	psect	text29
  7698  160B                     __ptext29:	
  7699 ;; *************** function _isr *****************
  7700 ;; Defined at:
  7701 ;;		line 490 in file "main.c"
  7702 ;; Parameters:    Size  Location     Type
  7703 ;;		None
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;		None
  7706 ;; Return value:  Size  Location     Type
  7707 ;;                  1    wreg      void 
  7708 ;; Registers used:
  7709 ;;		wreg, status,2, status,0
  7710 ;; Tracked objects:
  7711 ;;		On entry : 0/0
  7712 ;;		On exit  : 0/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7715 ;;      Params:         0       0       0       0       0
  7716 ;;      Locals:         0       0       0       0       0
  7717 ;;      Temps:          5       0       0       0       0
  7718 ;;      Totals:         5       0       0       0       0
  7719 ;;Total ram usage:        5 bytes
  7720 ;; Hardware stack levels used:    1
  7721 ;; This function calls:
  7722 ;;		Nothing
  7723 ;; This function is called by:
  7724 ;;		Interrupt level 1
  7725 ;; This function uses a non-reentrant model
  7726 ;;
  7727                           
  7728                           
  7729                           ;psect for function _isr
  7730  160B                     _isr:	
  7731                           
  7732                           ;main.c: 491: if(TMR0IF){
  7733  160B  1D0B               	btfss	11,2	;volatile
  7734  160C  2E26               	goto	i1l344
  7735                           
  7736                           ;main.c: 492: TMR0IF = 0;
  7737  160D  110B               	bcf	11,2	;volatile
  7738                           
  7739                           ;main.c: 493: TMR0 = 100;
  7740  160E  3064               	movlw	100
  7741  160F  0081               	movwf	1	;volatile
  7742                           
  7743                           ;main.c: 494: time_count++;
  7744  1610  3001               	movlw	1
  7745  1611  1683               	bsf	3,5	;RP0=1, select bank1
  7746  1612  1303               	bcf	3,6	;RP1=0, select bank1
  7747  1613  07CC               	addwf	_time_count^(0+128),f	;volatile
  7748  1614  1803               	skipnc
  7749  1615  0ACD               	incf	(_time_count+1)^(0+128),f	;volatile
  7750  1616  3000               	movlw	0
  7751  1617  07CD               	addwf	(_time_count+1)^(0+128),f	;volatile
  7752                           
  7753                           ;main.c: 496: if(!RB0)
  7754  1618  1283               	bcf	3,5	;RP0=0, select bank0
  7755  1619  1303               	bcf	3,6	;RP1=0, select bank0
  7756  161A  1806               	btfsc	6,0	;volatile
  7757  161B  2E20               	goto	i1l3549
  7758                           
  7759                           ;main.c: 497: PB8Counter++;
  7760  161C  3001               	movlw	1
  7761  161D  00F2               	movwf	??_isr
  7762  161E  0872               	movf	??_isr,w
  7763  161F  07D6               	addwf	_PB8Counter,f
  7764  1620                     i1l3549:	
  7765                           
  7766                           ;main.c: 498: if(!RB1)
  7767  1620  1886               	btfsc	6,1	;volatile
  7768  1621  2E26               	goto	i1l344
  7769                           
  7770                           ;main.c: 499: PB7Counter++;
  7771  1622  3001               	movlw	1
  7772  1623  00F2               	movwf	??_isr
  7773  1624  0872               	movf	??_isr,w
  7774  1625  07D5               	addwf	_PB7Counter,f
  7775  1626                     i1l344:	
  7776  1626  0876               	movf	??_isr+4,w
  7777  1627  00FF               	movwf	127
  7778  1628  0875               	movf	??_isr+3,w
  7779  1629  008A               	movwf	10
  7780  162A  0874               	movf	??_isr+2,w
  7781  162B  0084               	movwf	4
  7782  162C  0E73               	swapf	(??_isr+1)^(0+-128),w
  7783  162D  0083               	movwf	3
  7784  162E  0EFE               	swapf	126,f
  7785  162F  0E7E               	swapf	126,w
  7786  1630  0009               	retfie
  7787  1631                     __end_of_isr:	
  7788  007E                     btemp	set	126	;btemp
  7789  007E                     wtemp	set	126
  7790  007E                     wtemp0	set	126
  7791  0080                     wtemp1	set	128
  7792  0082                     wtemp2	set	130
  7793  0084                     wtemp3	set	132
  7794  0086                     wtemp4	set	134
  7795  0088                     wtemp5	set	136
  7796  007F                     wtemp6	set	127
  7797  007E                     ttemp	set	126
  7798  007E                     ttemp0	set	126
  7799  0081                     ttemp1	set	129
  7800  0084                     ttemp2	set	132
  7801  0087                     ttemp3	set	135
  7802  007F                     ttemp4	set	127
  7803  007E                     ltemp	set	126
  7804  007E                     ltemp0	set	126
  7805  0082                     ltemp1	set	130
  7806  0086                     ltemp2	set	134
  7807  0080                     ltemp3	set	128
  7808                           
  7809                           	psect	intentry
  7810  0004                     __pintentry:	
  7811                           ;incstack = 0
  7812                           ; Regs used in _isr: [wreg+status,2+status,0]
  7813                           
  7814  0004                     interrupt_function:	
  7815  007E                     saved_w	set	btemp
  7816  0004  00FE               	movwf	btemp
  7817  0005  0E03               	swapf	3,w
  7818  0006  00F3               	movwf	??_isr+1
  7819  0007  0804               	movf	4,w
  7820  0008  00F4               	movwf	??_isr+2
  7821  0009  080A               	movf	10,w
  7822  000A  00F5               	movwf	??_isr+3
  7823  000B  1283               	bcf	3,5	;RP0=0, select bank0
  7824  000C  1303               	bcf	3,6	;RP1=0, select bank0
  7825  000D  087F               	movf	btemp+1,w
  7826  000E  00F6               	movwf	??_isr+4
  7827  000F  160A  118A  2E0B   	ljmp	_isr


Data Sizes:
    Strings     11
    Constant    0
    Data        131
    BSS         115
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     45      78
    BANK1            80      6      80
    BANK3            96      0      72
    BANK2            96      0      64

Pointer List with Targets:

    lcdWriteString@s	PTR unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_re_route
    _setupLCD->_lcdWriteControl
    _re_route->_PathTo
    _TravelPath->_Drive1m
    _Turn90->_DriveDirect
    _Drive->_ser_putch
    _Drive1m->_wallFollow
    _stepCW->_spi_transfer
    _stepCCW->_spi_transfer
    _DriveDirect->_ser_putch
    _ADCMain->_lcdWriteToDigitBCD
    _lcdWriteToDigitBCD->_getSensorData
    _getSensorData->_ser_getch
    _PathTo->_lcdWriteString
    _lcdWriteString->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   41836
                                             42 BANK0      3     3      0
                                              0 BANK1      6     6      0
                        _DriveDirect
                             _PathTo
                         _TravelPath
                           _re_route
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      31
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _re_route                                             5     5      0   23108
                                             37 BANK0      5     5      0
                        _DriveDirect
                             _PathTo
                         _TravelPath
                             _Turn90
                             ___bmul
                      _getSensorData
 ---------------------------------------------------------------------------------
 (2) _TravelPath                                           3     3      0   13170
                                             33 BANK0      3     3      0
                            _Drive1m
                             _Turn90
 ---------------------------------------------------------------------------------
 (2) _Turn90                                               4     4      0    3198
                                             10 BANK0      4     4      0
                              _Drive
                        _DriveDirect
                      _getSensorData
 ---------------------------------------------------------------------------------
 (3) _Drive                                                4     1      3     545
                                              1 BANK0      4     1      3
                          _ser_putch
 ---------------------------------------------------------------------------------
 (3) _Drive1m                                              5     5      0    9808
                                             28 BANK0      5     5      0
                        _DriveDirect
                      _getSensorData
                 _lcdWriteToDigitBCD
                          _ser_putch
                         _wallFollow
 ---------------------------------------------------------------------------------
 (4) _wallFollow                                           9     9      0    6391
                                             21 BANK0      7     7      0
                            _ADCMain
                        _DriveDirect
                            ___lwdiv
                             ___wmul
                            _stepCCW
                             _stepCW
 ---------------------------------------------------------------------------------
 (5) _stepCW                                               5     3      2     140
                                              3 BANK0      5     3      2
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (5) _stepCCW                                              5     3      2     140
                                              3 BANK0      5     3      2
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      44
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2456
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     501
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _DriveDirect                                          9     5      4    1975
                                              1 BANK0      9     5      4
                          _ser_putch
 ---------------------------------------------------------------------------------
 (5) _ADCMain                                              0     0      0     792
                             _getADC
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (6) _lcdWriteToDigitBCD                                  12    10      2     727
                                              9 BANK0     12    10      2
                      _getSensorData (ARG)
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (6) _getADC                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getSensorData                                        7     5      2     616
                                              2 BANK0      7     5      2
                          _ser_getch
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ser_getch                                            2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PathTo                                              32    31      1    2963
                                              5 BANK0     32    31      1
                             ___bmul
                       _lcdSetCursor
                     _lcdWriteString
 ---------------------------------------------------------------------------------
 (3) _lcdWriteString                                       2     2      0     126
                                              3 BANK0      2     2      0
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (7) _lcdWriteData                                         3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (6) _lcdSetCursor                                         1     1      0      65
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1    1186
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DriveDirect
     _ser_putch
   _PathTo
     ___bmul
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteString
       _lcdWriteData
   _TravelPath
     _Drive1m
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
       _lcdWriteToDigitBCD
         _getSensorData (ARG)
           _ser_getch
           _ser_putch
         _lcdWriteData (ARG)
       _ser_putch
       _wallFollow
         _ADCMain
           _getADC
           _lcdSetCursor
             _lcdWriteControl
           _lcdWriteToDigitBCD
             _getSensorData (ARG)
               _ser_getch
               _ser_putch
             _lcdWriteData (ARG)
         _DriveDirect
           _ser_putch
         ___lwdiv
         ___wmul
         _stepCCW
           _spi_transfer
         _stepCW
           _spi_transfer
     _Turn90
       _Drive
         _ser_putch
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
   _re_route
     _DriveDirect
       _ser_putch
     _PathTo
       ___bmul
       _lcdSetCursor
         _lcdWriteControl
       _lcdWriteString
         _lcdWriteData
     _TravelPath
       _Drive1m
         _DriveDirect
           _ser_putch
         _getSensorData
           _ser_getch
           _ser_putch
         _lcdWriteToDigitBCD
           _getSensorData (ARG)
             _ser_getch
             _ser_putch
           _lcdWriteData (ARG)
         _ser_putch
         _wallFollow
           _ADCMain
             _getADC
             _lcdSetCursor
               _lcdWriteControl
             _lcdWriteToDigitBCD
               _getSensorData (ARG)
                 _ser_getch
                 _ser_putch
               _lcdWriteData (ARG)
           _DriveDirect
             _ser_putch
           ___lwdiv
           ___wmul
           _stepCCW
             _spi_transfer
           _stepCW
             _spi_transfer
       _Turn90
         _Drive
           _ser_putch
         _DriveDirect
           _ser_putch
         _getSensorData
           _ser_getch
           _ser_putch
     _Turn90
       _Drive
         _ser_putch
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
     ___bmul
     _getSensorData
       _ser_getch
       _ser_putch
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      48       9       75.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      40      11       66.7%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      6      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2D      4E       5       97.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       2       0       14.3%
CODE                 0      0       0       0        0.0%
DATA                 0      0     130      12        0.0%
ABS                  0      0     130       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Oct 09 15:00:26 2016

                             _c 0059                               _r 005E                               _x 0069  
               ??_getSensorData 0024                               _y 0063                               pc 0002  
                ___bmul@product 0022                     __CFG_CP$OFF 0000                              _GO 00FA  
                            _up 0388                              fsr 0004             ___wmul@multiplicand 0022  
                   Drive@speedH 0024                     Drive@speedL 0021                             l211 0E11  
                           l203 0DDB                             l213 0E16                             l205 0DDD  
                           l206 0DDF                             l207 0DE1                             l208 0E1C  
                           l233 0FD4                             l209 0E0D                             l251 0FEB  
                           l246 0FF9                             l247 0FDC                             l249 0FE2  
                           l608 09CB                             l733 1746                             l742 1781  
                           l880 14FD                             l874 0804                             _GIE 005F  
                           _RB0 0030                             _RB1 0031                             _RB2 0032  
                 ??_DriveDirect 0025                             _RB3 0033                             _RC2 003A  
                           _RE0 0048                             _RE1 0049                             _RE2 004A  
                  __CFG_CPD$OFF 0000                             _isr 160B                 __end_of_ADCMain 1599  
                           fsr0 0004                             indf 0000                    __CFG_FOSC$HS 0000  
                ??_lcdWriteData 0020                    __CFG_LVP$OFF 0000                            l1101 15F4  
                          l1014 150E                            l4013 1756                            l4015 1760  
                          l4017 176A                            l4211 16A3                            l4019 1774  
                          l4131 16D7                            l4107 15EC                            l4203 06E5  
                          l4213 16A4                            l4141 16F8                            l4053 0890  
                          l5101 0506                            l4071 08E4                            l4039 17DC  
                          l4311 09FB                            l5111 0531                            l5031 03E9  
                          l4137 16ED                            l4129 16C9                            l4321 0A2C  
                          l4305 09EC                            l4313 0A1D                            l4411 0D21  
                          l4083 0903                            l4067 08D1                            l4171 05F8  
                          l4251 077C                            l4307 09EE                            l4333 153A  
                          l4229 15CB                            l4501 0EE0                            l4405 0D07  
                          l4261 0715                            l4325 0A3E                            l5133 058F  
                          l4511 0EF3                            l4415 0D29                            l4087 0916  
                          l4191 067A                            l4175 0603                            l4271 07A3  
                          l4319 0A28                            l4327 0A60                            l5119 0551  
                          l5071 0493                            l5047 0435                            l4337 1540  
                          l4361 0CA7                            l4185 0662                            l4281 07C6  
                          l4257 0794                            l4601 0B7E                            l5057 0455  
                          l4531 0F23                            l4523 0F12                            l4355 0CA2  
                          l4371 0CDF                            l4195 0683                            l4187 066F  
                          l4179 060C                            l4283 07CB                            l4291 07E3  
                          l4259 0708                            l4603 0B85                            l4533 0F38  
                          l4541 0F8C                            l4517 0EF8                            l4445 0DE3  
                          l4285 07D0                            l4293 07F0                            l4269 0722  
                          l4621 0BBD                            l4605 0B8C                            l4613 0BA4  
                          l5093 04EE                            l4535 0F4D                            l4543 0F9A  
                          l4527 0F1A                            l4447 0DF1                            l4383 0CE9  
                          l4391 0CF9                            l4367 0CD7                            l4279 07C1  
                          l4623 0BC4                            l4615 0BB1                            l5079 04B0  
                          l4553 0FAD                            l4537 0F62                            l4377 0CE4  
                          l4289 07D3                            l4641 0BFC                            l4625 0BCB  
                          l4633 0BE3                            l4617 0BB2                            l4491 0E7E  
                          l4387 0CF1                            l4643 0C03                            l4635 0BF0  
                          l4707 0B16                            l4565 0FCC                            l4493 0E93  
                          l4485 0E64                            l4661 0C3B                            l4645 0C0A  
                          l4653 0C22                            l4637 0BF1                            l4709 0B3A  
                          l4591 0FF5                            l4559 0FB2                            l4495 0EA8  
                          l4479 0E36                            l4399 0D02                            l4663 0C42  
                          l4655 0C2F                            l4489 0E69                            l3961 0965  
                          l4681 0C7B                            l4665 0C49                            l4673 0C61  
                          l4657 0C30                            l4499 0ED2                            l3971 0989  
                          l4675 0C6E                            l4683 0B71                            l4691 0AAA  
                          l3973 0991                            l3965 0973                            l4677 0C73  
                          l4693 0ABF                            l3983 09B1                            l3967 097B  
                          l3959 094F                            l4687 0A7E                            l3977 099F  
                          l4689 0A95                            l4697 0AE9                            l3987 09BE  
                          l4699 0AF9                            ?_isr 0072                            STR_1 1006  
                          u3015 0676                            u3105 072D                            u3210 0C8D  
                          u3035 0680                            u4007 045D                            u4017 047F  
                          u3075 0772                            u3155 0A04                            u4107 0BD7  
                          u4027 04B8                            u4117 0C16                            u4037 04DA  
                          u3335 0D0A                            u4207 087D                            u4127 0C55  
                          u4047 051D                            u4217 08A6                            u4137 0A75  
                          u3185 0A47                            u4057 0559                            u4227 178A  
                          u4147 07B8                            u4067 057B                            u3525 0E39  
                          u3365 0D57                            u2805 08F3                            u4237 179F  
                          u4157 07E9                            u4077 15AC                            u3535 0E4C  
                          u4247 17B4                            u4167 05B7                            u4087 0B50  
                          u4257 17C9                            u4177 083E                            u4097 0B98  
                          u2915 16D8                            u2755 17E5                            u4267 17F2  
                          u4187 0853                            _PEIE 005E                            u4277 1557  
                          u2925 16E4                            u2765 0899                            u4197 0868  
                          u3805 0B21                            u4287 156A                            u3655 0FB5  
                          u2775 08C1                            u2935 16EE                            u2855 15F5  
                          u3585 0EFB                            u2865 15FC                            u2955 05AF  
                          _RCIF 0065                            u2965 05DF                            u2895 16CC  
                          u2975 05FF                            u2995 0609                            u3947 0074  
                          u3957 00AB                            u3967 00C0                            u3977 00D5  
                          u3987 0404                            u3997 041F                            _TMR0 0001  
                          _TRMT 04C1                    __CFG_WRT$OFF 0000                            _radH 00D0  
                          _radL 00D1                            _main 006C                            _left 0382  
                          _down 0381                            _path 01B8                            _loop 00CA  
                          btemp 007E                            ltemp 007E                            start 0012  
                          ttemp 007E                            wtemp 007E               ___bmul@multiplier 0023  
               __end_of_Drive1m 07F9                           ??_isr 0072                      PathTo@loop 0043  
                         ?_main 0072                   __CFG_WDTE$OFF 0000                 __end_of___lwdiv 16FD  
                         i1l344 1626                           _RCREG 001A                           _RCSTA 0018  
                         _SPBRG 0099                           _PORTA 0005                           _PORTB 0006  
                         _PORTC 0007                           _PORTD 0008                           _PORTE 0009  
                         _TRISA 0085                           _TRISB 0086                           _TRISC 0087  
                         _TRISD 0088                           _TRISE 0089                           _SSPIF 0063  
                         _TXREG 0019                           _TXSTA 0098        _intersection_orientation 005A  
                         _Drive 1631                           _angle 0077      __end_of_lcdWriteToDigitBCD 09DC  
           __end_of_DriveDirect 0941                           _right 0385                           _x_int 0061  
                         _y_int 0065                  __pbitbssCOMMON 0380                  __CFG_BOREN$OFF 0000  
                         pclath 000A                           ltemp0 007E                           ltemp1 0082  
                         ltemp2 0086                           ltemp3 0080                 __end_of_stepCCW 1800  
                    _LeftSpeedH 0053                      _LeftSpeedL 0054                           ttemp0 007E  
                         ttemp1 0081                           ttemp2 0084                           ttemp3 0087  
                         ttemp4 007F                           status 0003                           wtemp0 007E  
                         wtemp1 0080                           wtemp2 0082                           wtemp3 0084  
                         wtemp4 0086                           wtemp5 0088                           wtemp6 007F  
                   PathTo@F1222 0190                 __initialization 0015                    __end_of_main 0593  
                     ??_ADCMain 0035        __size_of_lcdWriteControl 0014                          ??_main 004A  
          __end_of_lcdSetCursor 14FD                ??_lcdWriteString 0023                          ?_Drive 0021  
                        _ADCON0 001F                          _ADCON1 009F                          _ADRESH 001E  
                        _ADRESL 009E                          i1l3549 1620                          _TMR0IE 005D  
                        _TMR0IF 005A                          _SSPCON 0014                          _SSPBUF 0013  
                     ??_Drive1m 003C                  __CFG_PWRTE$OFF 0000                          _PathTo 0C82  
                        _adcRAW 004F                          _Turn90 09DC                          ___bmul 1536  
                        ___wmul 15E8                          _getADC 173D            __end_of_lcdWriteData 155C  
               lcdWriteString@s 0024                       ??___lwdiv 0024                          _speedH 00D2  
                        _speedL 00D3                          _x_goto 0060                          _x_path 0062  
                        _y_goto 0064                          _y_path 0066                          _stepCW 0836  
              __end_of_re_route 0B6D                     _DriveDirect 08B4                __end_of_ser_init 1525  
              __end_of_setupADC 15AF                __end_of_setupLCD 0836                __end_of_setupSPI 15C8  
                        saved_w 007E                 Turn90@direction 002D                       ??_stepCCW 0025  
                    _TravelPath 0B6D         __end_of__initialization 0068                  PathTo@mazeGrid 002D  
           ___bmul@multiplicand 0020                   __end_of_Drive 1659                  __pcstackCOMMON 0072  
                  __pidataBANK0 07F9                    __pidataBANK1 1570                    __pidataBANK2 16FD  
                  __pidataBANK3 1659                  PathTo@x_target 0041                  PathTo@y_target 0025  
               DriveDirect@data 0026                         ??_Drive 0024               ??_lcdWriteControl 0020  
                    __pbssBANK0 004D                      __pbssBANK1 00A0                      __pbssBANK3 01B8  
             _pathCountShortest 0068             lcdSetCursor@address 0023                         ?_PathTo 0025  
                    __pmaintext 006C                         ?_Turn90 0072                         ?___bmul 0020  
                       ?___wmul 0020                         ?_getADC 0072                      __pintentry 0004  
         __size_of_lcdSetCursor 0009                         _ADCMain 1584           __end_of_getSensorData 16BF  
            __size_of_ser_getch 000A                         ?_stepCW 0023              __size_of_ser_putch 000C  
                   ?_TravelPath 0072                     _RightSpeedH 0057                     _RightSpeedL 0058  
                       _IR_Wall 0380                         _SSPSTAT 0094                      __stringtab 1000  
                       _Drive1m 0701         DriveDirect@VelocityLeft 0023           __size_of_lcdWriteData 0013  
                     ?_re_route 0072                    _lcdSetCursor 14F4              _lcdWriteToDigitBCD 0941  
                     ?_ser_init 0072                 __size_of_PathTo 037E                       ?_setupADC 0072  
                     ?_setupLCD 0072                       ?_setupSPI 0072                 __size_of_Turn90 00A1  
                _wallFollow$964 0038                 __size_of___bmul 0013                 __size_of___wmul 0023  
               __size_of_getADC 0045                         ___lwdiv 16BF             ?_lcdWriteToDigitBCD 0029  
                       __ptext1 15AF                         __ptext2 080D                         __ptext3 1599  
                       __ptext4 1516                         __ptext5 0A7D                         __ptext6 0B6D  
                       __ptext7 09DC                         __ptext8 1631                         __ptext9 0701  
               __size_of_stepCW 007E                    __size_of_isr 0026                         _lowByte 005B  
              _orientation_path 005C                         _targets 005F                         _stepCCW 1782  
                       _routing 0386                         clrloop0 14ED                    _lcdWriteData 1549  
          end_of_initialization 0068            ??_lcdWriteToDigitBCD 002B               __end_of_ser_getch 1507  
             __end_of_ser_putch 080D                      ??_re_route 0045                      _wallFollow 0593  
                    _reset_flag 0384                      ??_ser_init 0020                      ??_setupADC 0020  
                    ??_setupLCD 0023                      ??_setupSPI 0020             __size_of_TravelPath 0115  
                    _time_count 00CC                    ?_DriveDirect 0021                       Drive@radH 0022  
                     Drive@radL 0023                     stepCW@steps 0023                     TravelPath@n 0043  
                 ?_spi_transfer 0072                 ser_getch@rxbyte 0021                      main@fourth 00EE  
                    main@second 00EC                  __end_of_PathTo 1000                       PathTo@sum 0042  
                __end_of_Turn90 0A7D                  __end_of___bmul 1549             DriveDirect@data_494 0028  
               _lcdWriteControl 155C                  __end_of___wmul 160B                  __end_of_getADC 1782  
                __end_of_stepCW 08B4             start_initialization 0015                     __end_of_isr 1631  
                ??_spi_transfer 0020         __size_of_lcdWriteString 0020                     ?_wallFollow 0072  
                      ??_PathTo 0026                        ??_Turn90 002A                        ??___bmul 0021  
                      ??___wmul 0024                        ??_getADC 0020                      init_fetch0 1525  
                   __pdataBANK0 0067                     __pdataBANK1 00D6                     __pdataBANK2 0110  
                   __pdataBANK3 0190                        ?_ADCMain 0072                        ??_stepCW 0025  
                   __pbssCOMMON 0077                       ___latbits 0002                   __pcstackBANK0 0020  
                 __pcstackBANK1 00EA                    ??_TravelPath 0041                        ?_Drive1m 0072  
       __end_of_lcdWriteControl 1570                ___lwdiv@dividend 0022               __size_of_re_route 00F0  
             __size_of_ser_init 000F                        ?___lwdiv 0020               __size_of_setupADC 0016  
             __size_of_setupLCD 0029              __end_of_TravelPath 0C82               __size_of_setupSPI 0019  
                     __pstrings 1000                    _pathShortest 00A0                       _gridWalls 0110  
                __size_of_Drive 0028            __size_of_DriveDirect 008D             __size_of_wallFollow 016E  
          wallFollow@setADCdist 003A                        ?_stepCCW 0023                ___lwdiv@quotient 0026  
                 _targets_found 0387                 main@controlByte 00EA                       _pathCount 005D  
       lcdWriteControl@databyte 0022               interrupt_function 0004          __size_of_getSensorData 003E  
                ___wmul@product 0024                      ser_putch@c 0020           getSensorData@packetID 0026  
                     clear_ram0 14EC                       _ser_getch 14FD                       _ser_putch 0801  
                     _timerLoop 00CE                        Drive1m@n 003F                __size_of_ADCMain 0015  
                 _VelocityRight 00C8            __end_of_spi_transfer 1516                     __stringbase 1005  
             ___wmul@multiplier 0020                spi_transfer@data 0022                       main@fifth 00EF  
                     main@first 00EB                spi_transfer@temp 0021                      _ADC_ADJUST 004D  
                     main@third 00ED                        _Distance 00C4            lcdWriteData@databyte 0022  
   __size_of_lcdWriteToDigitBCD 009B                  _lcdWriteString 15C8        DriveDirect@VelocityRight 0021  
              __size_of_Drive1m 00F8                _ADJUSTED_SPEED_L 00C0                _ADJUSTED_SPEED_R 00C2  
                    ?_ser_getch 0072                ?_lcdWriteControl 0072                 _mazeGridDefault 00D6  
                    ?_ser_putch 0072                __size_of___lwdiv 003E                   _getSensorData 1681  
            __end_of__stringtab 1006  lcdWriteToDigitBCD@TenThouDigit 0031                 ___lwdiv@divisor 0020  
               ___lwdiv@counter 0025                        __ptext10 0593                        __ptext11 0836  
                      __ptext20 1681                        __ptext12 1782                        __ptext21 0801  
                      __ptext13 1507                        __ptext22 14FD                        __ptext14 15E8  
                      __ptext23 0C82                        __ptext15 16BF                        __ptext24 15C8  
                      __ptext16 08B4                        __ptext25 1549                        __ptext17 1584  
                      __ptext26 14F4                        __ptext18 0941                        __ptext27 155C  
                      __ptext19 173D                        __ptext28 1536                        __ptext29 160B  
                      _highByte 0079                __size_of_stepCCW 007E          __end_of_lcdWriteString 15E8  
                      _distance 0051                        _leftWall 0383                        _mazeGrid 01A4  
                 __size_of_main 0527                        _re_route 0A7D                    ??_wallFollow 0035  
                      _ser_init 1516                        _setupADC 1599                        _setupLCD 080D  
                      _setupSPI 15AF                      _PB7Counter 0055     lcdWriteToDigitBCD@HunsDigit 002D  
                      _x_target 00D4                      _PB8Counter 0056                        _y_target 00D5  
                  _VelocityLeft 00C6     lcdWriteToDigitBCD@OnesDigit 0033                  ?_getSensorData 0022  
   lcdWriteToDigitBCD@TensDigit 002B     lcdWriteToDigitBCD@ThouDigit 002F                        init_ram0 1529  
            __end_of_wallFollow 0701                 ?_lcdWriteString 0072                  Drive1m@omni_IR 0040  
                      intlevel1 0000                   ?_lcdSetCursor 0072                       stringcode 1000  
                   ??_ser_getch 0020                     ??_ser_putch 0020             getSensorData@sensor 0027  
         __size_of_spi_transfer 000F                     _orientation 0067                      _OPTION_REG 0081  
                      stringdir 1000                        stringtab 1000              getSensorData@bytes 0022  
                 ?_lcdWriteData 0072          lcdWriteToDigitBCD@data 0029                    stepCCW@steps 0023  
                  _spi_transfer 1507                  ??_lcdSetCursor 0023                 _CURRENT_SPEED_L 006A  
               _CURRENT_SPEED_R 006C  
