

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Oct 09 20:11:43 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK3,global,class=CODE,delta=2
     8                           	psect	strings,global,class=STRING,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    24                           	psect	maintext,global,class=CODE,split=1,delta=2
    25                           	psect	text1,local,class=CODE,merge=1,delta=2
    26                           	psect	text2,local,class=CODE,merge=1,delta=2
    27                           	psect	text3,local,class=CODE,merge=1,delta=2
    28                           	psect	text4,local,class=CODE,merge=1,delta=2
    29                           	psect	text5,local,class=CODE,merge=1,delta=2
    30                           	psect	text6,local,class=CODE,merge=1,delta=2
    31                           	psect	text7,local,class=CODE,merge=1,delta=2
    32                           	psect	text8,local,class=CODE,merge=1,delta=2
    33                           	psect	text9,local,class=CODE,merge=1,delta=2
    34                           	psect	text10,local,class=CODE,merge=1,delta=2
    35                           	psect	text11,local,class=CODE,merge=1,delta=2
    36                           	psect	text12,local,class=CODE,merge=1,delta=2
    37                           	psect	text13,local,class=CODE,merge=1,delta=2
    38                           	psect	text14,local,class=CODE,merge=1,delta=2
    39                           	psect	text15,local,class=CODE,merge=1,delta=2
    40                           	psect	text16,local,class=CODE,merge=1,delta=2
    41                           	psect	text17,local,class=CODE,merge=1,delta=2
    42                           	psect	text18,local,class=CODE,merge=1,delta=2
    43                           	psect	text19,local,class=CODE,merge=1,delta=2
    44                           	psect	text20,local,class=CODE,merge=1,delta=2
    45                           	psect	text21,local,class=CODE,merge=1,delta=2
    46                           	psect	text22,local,class=CODE,merge=1,delta=2
    47                           	psect	text23,local,class=CODE,merge=1,delta=2
    48                           	psect	text24,local,class=CODE,merge=1,delta=2
    49                           	psect	text25,local,class=CODE,merge=1,delta=2
    50                           	psect	text26,local,class=CODE,merge=1,delta=2
    51                           	psect	text27,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	dabs	1,0x7E,2
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009C                     	;# 
   105  009D                     	;# 
   106  009E                     	;# 
   107  009F                     	;# 
   108  010C                     	;# 
   109  010D                     	;# 
   110  010E                     	;# 
   111  010F                     	;# 
   112  018C                     	;# 
   113  018D                     	;# 
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  0007                     	;# 
   122  0008                     	;# 
   123  0009                     	;# 
   124  000A                     	;# 
   125  000B                     	;# 
   126  000C                     	;# 
   127  000D                     	;# 
   128  000E                     	;# 
   129  000E                     	;# 
   130  000F                     	;# 
   131  0010                     	;# 
   132  0011                     	;# 
   133  0012                     	;# 
   134  0013                     	;# 
   135  0014                     	;# 
   136  0015                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  001D                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0086                     	;# 
   152  0087                     	;# 
   153  0088                     	;# 
   154  0089                     	;# 
   155  008C                     	;# 
   156  008D                     	;# 
   157  008E                     	;# 
   158  0091                     	;# 
   159  0092                     	;# 
   160  0093                     	;# 
   161  0094                     	;# 
   162  0098                     	;# 
   163  0099                     	;# 
   164  009C                     	;# 
   165  009D                     	;# 
   166  009E                     	;# 
   167  009F                     	;# 
   168  010C                     	;# 
   169  010D                     	;# 
   170  010E                     	;# 
   171  010F                     	;# 
   172  018C                     	;# 
   173  018D                     	;# 
   174  0000                     	;# 
   175  0001                     	;# 
   176  0002                     	;# 
   177  0003                     	;# 
   178  0004                     	;# 
   179  0005                     	;# 
   180  0006                     	;# 
   181  0007                     	;# 
   182  0008                     	;# 
   183  0009                     	;# 
   184  000A                     	;# 
   185  000B                     	;# 
   186  000C                     	;# 
   187  000D                     	;# 
   188  000E                     	;# 
   189  000E                     	;# 
   190  000F                     	;# 
   191  0010                     	;# 
   192  0011                     	;# 
   193  0012                     	;# 
   194  0013                     	;# 
   195  0014                     	;# 
   196  0015                     	;# 
   197  0015                     	;# 
   198  0016                     	;# 
   199  0017                     	;# 
   200  0018                     	;# 
   201  0019                     	;# 
   202  001A                     	;# 
   203  001B                     	;# 
   204  001B                     	;# 
   205  001C                     	;# 
   206  001D                     	;# 
   207  001E                     	;# 
   208  001F                     	;# 
   209  0081                     	;# 
   210  0085                     	;# 
   211  0086                     	;# 
   212  0087                     	;# 
   213  0088                     	;# 
   214  0089                     	;# 
   215  008C                     	;# 
   216  008D                     	;# 
   217  008E                     	;# 
   218  0091                     	;# 
   219  0092                     	;# 
   220  0093                     	;# 
   221  0094                     	;# 
   222  0098                     	;# 
   223  0099                     	;# 
   224  009C                     	;# 
   225  009D                     	;# 
   226  009E                     	;# 
   227  009F                     	;# 
   228  010C                     	;# 
   229  010D                     	;# 
   230  010E                     	;# 
   231  010F                     	;# 
   232  018C                     	;# 
   233  018D                     	;# 
   234  0000                     	;# 
   235  0001                     	;# 
   236  0002                     	;# 
   237  0003                     	;# 
   238  0004                     	;# 
   239  0005                     	;# 
   240  0006                     	;# 
   241  0007                     	;# 
   242  0008                     	;# 
   243  0009                     	;# 
   244  000A                     	;# 
   245  000B                     	;# 
   246  000C                     	;# 
   247  000D                     	;# 
   248  000E                     	;# 
   249  000E                     	;# 
   250  000F                     	;# 
   251  0010                     	;# 
   252  0011                     	;# 
   253  0012                     	;# 
   254  0013                     	;# 
   255  0014                     	;# 
   256  0015                     	;# 
   257  0015                     	;# 
   258  0016                     	;# 
   259  0017                     	;# 
   260  0018                     	;# 
   261  0019                     	;# 
   262  001A                     	;# 
   263  001B                     	;# 
   264  001B                     	;# 
   265  001C                     	;# 
   266  001D                     	;# 
   267  001E                     	;# 
   268  001F                     	;# 
   269  0081                     	;# 
   270  0085                     	;# 
   271  0086                     	;# 
   272  0087                     	;# 
   273  0088                     	;# 
   274  0089                     	;# 
   275  008C                     	;# 
   276  008D                     	;# 
   277  008E                     	;# 
   278  0091                     	;# 
   279  0092                     	;# 
   280  0093                     	;# 
   281  0094                     	;# 
   282  0098                     	;# 
   283  0099                     	;# 
   284  009C                     	;# 
   285  009D                     	;# 
   286  009E                     	;# 
   287  009F                     	;# 
   288  010C                     	;# 
   289  010D                     	;# 
   290  010E                     	;# 
   291  010F                     	;# 
   292  018C                     	;# 
   293  018D                     	;# 
   294  0000                     	;# 
   295  0001                     	;# 
   296  0002                     	;# 
   297  0003                     	;# 
   298  0004                     	;# 
   299  0005                     	;# 
   300  0006                     	;# 
   301  0007                     	;# 
   302  0008                     	;# 
   303  0009                     	;# 
   304  000A                     	;# 
   305  000B                     	;# 
   306  000C                     	;# 
   307  000D                     	;# 
   308  000E                     	;# 
   309  000E                     	;# 
   310  000F                     	;# 
   311  0010                     	;# 
   312  0011                     	;# 
   313  0012                     	;# 
   314  0013                     	;# 
   315  0014                     	;# 
   316  0015                     	;# 
   317  0015                     	;# 
   318  0016                     	;# 
   319  0017                     	;# 
   320  0018                     	;# 
   321  0019                     	;# 
   322  001A                     	;# 
   323  001B                     	;# 
   324  001B                     	;# 
   325  001C                     	;# 
   326  001D                     	;# 
   327  001E                     	;# 
   328  001F                     	;# 
   329  0081                     	;# 
   330  0085                     	;# 
   331  0086                     	;# 
   332  0087                     	;# 
   333  0088                     	;# 
   334  0089                     	;# 
   335  008C                     	;# 
   336  008D                     	;# 
   337  008E                     	;# 
   338  0091                     	;# 
   339  0092                     	;# 
   340  0093                     	;# 
   341  0094                     	;# 
   342  0098                     	;# 
   343  0099                     	;# 
   344  009C                     	;# 
   345  009D                     	;# 
   346  009E                     	;# 
   347  009F                     	;# 
   348  010C                     	;# 
   349  010D                     	;# 
   350  010E                     	;# 
   351  010F                     	;# 
   352  018C                     	;# 
   353  018D                     	;# 
   354  0000                     	;# 
   355  0001                     	;# 
   356  0002                     	;# 
   357  0003                     	;# 
   358  0004                     	;# 
   359  0005                     	;# 
   360  0006                     	;# 
   361  0007                     	;# 
   362  0008                     	;# 
   363  0009                     	;# 
   364  000A                     	;# 
   365  000B                     	;# 
   366  000C                     	;# 
   367  000D                     	;# 
   368  000E                     	;# 
   369  000E                     	;# 
   370  000F                     	;# 
   371  0010                     	;# 
   372  0011                     	;# 
   373  0012                     	;# 
   374  0013                     	;# 
   375  0014                     	;# 
   376  0015                     	;# 
   377  0015                     	;# 
   378  0016                     	;# 
   379  0017                     	;# 
   380  0018                     	;# 
   381  0019                     	;# 
   382  001A                     	;# 
   383  001B                     	;# 
   384  001B                     	;# 
   385  001C                     	;# 
   386  001D                     	;# 
   387  001E                     	;# 
   388  001F                     	;# 
   389  0081                     	;# 
   390  0085                     	;# 
   391  0086                     	;# 
   392  0087                     	;# 
   393  0088                     	;# 
   394  0089                     	;# 
   395  008C                     	;# 
   396  008D                     	;# 
   397  008E                     	;# 
   398  0091                     	;# 
   399  0092                     	;# 
   400  0093                     	;# 
   401  0094                     	;# 
   402  0098                     	;# 
   403  0099                     	;# 
   404  009C                     	;# 
   405  009D                     	;# 
   406  009E                     	;# 
   407  009F                     	;# 
   408  010C                     	;# 
   409  010D                     	;# 
   410  010E                     	;# 
   411  010F                     	;# 
   412  018C                     	;# 
   413  018D                     	;# 
   414                           
   415                           	psect	idataBANK0
   416  15F3                     __pidataBANK0:	
   417                           
   418                           ;initializer for _orientation
   419  15F3  3403               	retlw	3
   420                           
   421                           ;initializer for _pathCountShortest
   422  15F4  3414               	retlw	20
   423                           
   424                           ;initializer for _x
   425  15F5  3401               	retlw	1
   426                           
   427                           ;initializer for _CURRENT_SPEED_L
   428  15F6  34FA               	retlw	250
   429  15F7  3400               	retlw	0
   430                           
   431                           ;initializer for _CURRENT_SPEED_R
   432  15F8  34FA               	retlw	250
   433  15F9  3400               	retlw	0
   434                           
   435                           	psect	idataBANK1
   436  1673                     __pidataBANK1:	
   437                           
   438                           ;initializer for _mazeGridDefault
   439  1673  340C               	retlw	12
   440  1674  3407               	retlw	7
   441  1675  340E               	retlw	14
   442  1676  340D               	retlw	13
   443  1677  3406               	retlw	6
   444  1678  3409               	retlw	9
   445  1679  3405               	retlw	5
   446  167A  3400               	retlw	0
   447  167B  3405               	retlw	5
   448  167C  3402               	retlw	2
   449  167D  340C               	retlw	12
   450  167E  3406               	retlw	6
   451  167F  340A               	retlw	10
   452  1680  340E               	retlw	14
   453  1681  340A               	retlw	10
   454  1682  340B               	retlw	11
   455  1683  3409               	retlw	9
   456  1684  3401               	retlw	1
   457  1685  3401               	retlw	1
   458  1686  3403               	retlw	3
   459                           
   460                           	psect	idataBANK2
   461  0838                     __pidataBANK2:	
   462                           
   463                           ;initializer for _gridWalls
   464  0838  3400               	retlw	0
   465  0839  3400               	retlw	0
   466  083A  3400               	retlw	0
   467  083B  3400               	retlw	0
   468  083C  3400               	retlw	0
   469  083D  3400               	retlw	0
   470  083E  3400               	retlw	0
   471  083F  3400               	retlw	0
   472  0840  3401               	retlw	1
   473  0841  3401               	retlw	1
   474  0842  3401               	retlw	1
   475  0843  3401               	retlw	1
   476  0844  3401               	retlw	1
   477  0845  3401               	retlw	1
   478  0846  3401               	retlw	1
   479  0847  3401               	retlw	1
   480  0848  3400               	retlw	0
   481  0849  3400               	retlw	0
   482  084A  3400               	retlw	0
   483  084B  3400               	retlw	0
   484  084C  3401               	retlw	1
   485  084D  3401               	retlw	1
   486  084E  3401               	retlw	1
   487  084F  3401               	retlw	1
   488  0850  3400               	retlw	0
   489  0851  3400               	retlw	0
   490  0852  3400               	retlw	0
   491  0853  3400               	retlw	0
   492  0854  3401               	retlw	1
   493  0855  3401               	retlw	1
   494  0856  3401               	retlw	1
   495  0857  3401               	retlw	1
   496  0858  3400               	retlw	0
   497  0859  3400               	retlw	0
   498  085A  3401               	retlw	1
   499  085B  3401               	retlw	1
   500  085C  3400               	retlw	0
   501  085D  3400               	retlw	0
   502  085E  3401               	retlw	1
   503  085F  3401               	retlw	1
   504  0860  3400               	retlw	0
   505  0861  3400               	retlw	0
   506  0862  3401               	retlw	1
   507  0863  3401               	retlw	1
   508  0864  3400               	retlw	0
   509  0865  3400               	retlw	0
   510  0866  3401               	retlw	1
   511  0867  3401               	retlw	1
   512  0868  3400               	retlw	0
   513  0869  3401               	retlw	1
   514  086A  3400               	retlw	0
   515  086B  3401               	retlw	1
   516  086C  3400               	retlw	0
   517  086D  3401               	retlw	1
   518  086E  3400               	retlw	0
   519  086F  3401               	retlw	1
   520  0870  3400               	retlw	0
   521  0871  3401               	retlw	1
   522  0872  3400               	retlw	0
   523  0873  3401               	retlw	1
   524  0874  3400               	retlw	0
   525  0875  3401               	retlw	1
   526  0876  3400               	retlw	0
   527  0877  3401               	retlw	1
   528                           
   529                           	psect	idataBANK3
   530  175C                     __pidataBANK3:	
   531                           
   532                           ;initializer for PathTo@F1222
   533  175C  340C               	retlw	12
   534  175D  3407               	retlw	7
   535  175E  340E               	retlw	14
   536  175F  340D               	retlw	13
   537  1760  3406               	retlw	6
   538  1761  3409               	retlw	9
   539  1762  3405               	retlw	5
   540  1763  3400               	retlw	0
   541  1764  3405               	retlw	5
   542  1765  3402               	retlw	2
   543  1766  340C               	retlw	12
   544  1767  3406               	retlw	6
   545  1768  340A               	retlw	10
   546  1769  340E               	retlw	14
   547  176A  340A               	retlw	10
   548  176B  340B               	retlw	11
   549  176C  3409               	retlw	9
   550  176D  3401               	retlw	1
   551  176E  3401               	retlw	1
   552  176F  3403               	retlw	3
   553                           
   554                           ;initializer for _mazeGrid
   555  1770  340C               	retlw	12
   556  1771  3407               	retlw	7
   557  1772  340E               	retlw	14
   558  1773  340D               	retlw	13
   559  1774  3406               	retlw	6
   560  1775  3409               	retlw	9
   561  1776  3405               	retlw	5
   562  1777  3400               	retlw	0
   563  1778  3405               	retlw	5
   564  1779  3402               	retlw	2
   565  177A  340C               	retlw	12
   566  177B  3406               	retlw	6
   567  177C  340A               	retlw	10
   568  177D  340E               	retlw	14
   569  177E  340A               	retlw	10
   570  177F  340B               	retlw	11
   571  1780  3409               	retlw	9
   572  1781  3401               	retlw	1
   573  1782  3401               	retlw	1
   574  1783  3403               	retlw	3
   575  001F                     _ADCON0	set	31
   576  0005                     _PORTA	set	5
   577  0006                     _PORTB	set	6
   578  0007                     _PORTC	set	7
   579  0008                     _PORTD	set	8
   580  0009                     _PORTE	set	9
   581  001A                     _RCREG	set	26
   582  0018                     _RCSTA	set	24
   583  0013                     _SSPBUF	set	19
   584  0014                     _SSPCON	set	20
   585  0001                     _TMR0	set	1
   586  0019                     _TXREG	set	25
   587  001E                     _ADRESH	set	30
   588  005F                     _GIE	set	95
   589  00FA                     _GO	set	250
   590  005E                     _PEIE	set	94
   591  0030                     _RB0	set	48
   592  0031                     _RB1	set	49
   593  0032                     _RB2	set	50
   594  0033                     _RB3	set	51
   595  003A                     _RC2	set	58
   596  0065                     _RCIF	set	101
   597  0048                     _RE0	set	72
   598  0049                     _RE1	set	73
   599  004A                     _RE2	set	74
   600  0063                     _SSPIF	set	99
   601  005D                     _TMR0IE	set	93
   602  005A                     _TMR0IF	set	90
   603  009F                     _ADCON1	set	159
   604  009E                     _ADRESL	set	158
   605  0081                     _OPTION_REG	set	129
   606  0099                     _SPBRG	set	153
   607  0094                     _SSPSTAT	set	148
   608  0085                     _TRISA	set	133
   609  0086                     _TRISB	set	134
   610  0087                     _TRISC	set	135
   611  0088                     _TRISD	set	136
   612  0089                     _TRISE	set	137
   613  0098                     _TXSTA	set	152
   614  04C1                     _TRMT	set	1217
   615                           
   616                           	psect	strings
   617  1000                     __pstrings:	
   618  1000                     stringtab:	
   619  1000                     __stringtab:	
   620  1000                     stringcode:	
   621                           ;	String table - string pointers are 1 byte each
   622                           
   623  1000                     stringdir:	
   624  1000  3010               	movlw	high stringdir
   625  1001  008A               	movwf	10
   626  1002  0804               	movf	4,w
   627  1003  0A84               	incf	4,f
   628  1004  0782               	addwf	2,f
   629  1005                     __stringbase:	
   630  1005  3400               	retlw	0
   631  1006                     __end_of__stringtab:	
   632  1006                     STR_1:	
   633  1006  3457               	retlw	87	;'W'
   634  1007  346F               	retlw	111	;'o'
   635  1008  3472               	retlw	114	;'r'
   636  1009  346B               	retlw	107	;'k'
   637  100A  3469               	retlw	105	;'i'
   638  100B  346E               	retlw	110	;'n'
   639  100C  3467               	retlw	103	;'g'
   640  100D  342E               	retlw	46	;'.'
   641  100E  342E               	retlw	46	;'.'
   642  100F  342E               	retlw	46	;'.'
   643  1010  3400               	retlw	0
   644                           
   645                           ; #config settings
   646  0000                     
   647                           	psect	cinit
   648  0015                     start_initialization:	
   649  0015                     __initialization:	
   650                           
   651                           ; Initialize objects allocated to BANK3
   652  0015  1783               	bsf	3,7	;select IRP bank2
   653  0016  30B8               	movlw	low (__pdataBANK3+40)
   654  0017  00FD               	movwf	btemp+-1
   655  0018  3017               	movlw	high __pidataBANK3
   656  0019  00FE               	movwf	btemp
   657  001A  305C               	movlw	low __pidataBANK3
   658  001B  00FF               	movwf	btemp+1
   659  001C  3090               	movlw	low __pdataBANK3
   660  001D  0084               	movwf	4
   661  001E  160A  118A  262C  120A  118A  	fcall	init_ram0
   662                           
   663                           ; Initialize objects allocated to BANK2
   664  0023  3050               	movlw	low (__pdataBANK2+64)
   665  0024  00FD               	movwf	btemp+-1
   666  0025  3008               	movlw	high __pidataBANK2
   667  0026  00FE               	movwf	btemp
   668  0027  3038               	movlw	low __pidataBANK2
   669  0028  00FF               	movwf	btemp+1
   670  0029  3010               	movlw	low __pdataBANK2
   671  002A  0084               	movwf	4
   672  002B  160A  118A  262C  120A  118A  	fcall	init_ram0
   673                           
   674                           ; Initialize objects allocated to BANK1
   675  0030  1383               	bcf	3,7	;select IRP bank0
   676  0031  30EA               	movlw	low (__pdataBANK1+20)
   677  0032  00FD               	movwf	btemp+-1
   678  0033  3016               	movlw	high __pidataBANK1
   679  0034  00FE               	movwf	btemp
   680  0035  3073               	movlw	low __pidataBANK1
   681  0036  00FF               	movwf	btemp+1
   682  0037  30D6               	movlw	low __pdataBANK1
   683  0038  0084               	movwf	4
   684  0039  160A  118A  262C  120A  118A  	fcall	init_ram0
   685                           
   686                           ; Initialize objects allocated to BANK0
   687  003E  306E               	movlw	low (__pdataBANK0+7)
   688  003F  00FD               	movwf	btemp+-1
   689  0040  3015               	movlw	high __pidataBANK0
   690  0041  00FE               	movwf	btemp
   691  0042  30F3               	movlw	low __pidataBANK0
   692  0043  00FF               	movwf	btemp+1
   693  0044  3067               	movlw	low __pdataBANK0
   694  0045  0084               	movwf	4
   695  0046  160A  118A  262C  120A  118A  	fcall	init_ram0
   696                           
   697                           ; Clear objects allocated to BANK3
   698  004B  1783               	bsf	3,7	;select IRP bank2
   699  004C  30B8               	movlw	low __pbssBANK3
   700  004D  0084               	movwf	4
   701  004E  30D8               	movlw	low (__pbssBANK3+32)
   702  004F  120A  118A  27F8  120A  118A  	fcall	clear_ram0
   703                           
   704                           ; Clear objects allocated to BANK1
   705  0054  1383               	bcf	3,7	;select IRP bank0
   706  0055  30A0               	movlw	low __pbssBANK1
   707  0056  0084               	movwf	4
   708  0057  30D6               	movlw	low (__pbssBANK1+54)
   709  0058  120A  118A  27F8  120A  118A  	fcall	clear_ram0
   710                           
   711                           ; Clear objects allocated to BANK0
   712  005D  304D               	movlw	low __pbssBANK0
   713  005E  0084               	movwf	4
   714  005F  3067               	movlw	low (__pbssBANK0+26)
   715  0060  120A  118A  27F8   	fcall	clear_ram0
   716                           
   717                           ; Clear objects allocated to COMMON
   718  0063  01F7               	clrf	__pbssCOMMON& (0+127)
   719  0064  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   720  0065  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   721                           
   722                           ; Clear objects allocated to BITCOMMON
   723  0066  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   724  0067  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   725  0068                     end_of_initialization:	
   726                           ;End of C runtime variable initialization code
   727                           
   728  0068                     __end_of__initialization:	
   729  0068  0183               	clrf	3
   730  0069  120A  118A  286C   	ljmp	_main	;jump to C main() function
   731                           
   732                           	psect	bitbssCOMMON
   733  0380                     __pbitbssCOMMON:	
   734  0380                     _IR_Wall:	
   735  0380                     	ds	1
   736  0381                     _down:	
   737  0381                     	ds	1
   738  0382                     _homeBase:	
   739  0382                     	ds	1
   740  0383                     _left:	
   741  0383                     	ds	1
   742  0384                     _leftWall:	
   743  0384                     	ds	1
   744  0385                     _reset_flag:	
   745  0385                     	ds	1
   746  0386                     _right:	
   747  0386                     	ds	1
   748  0387                     _routing:	
   749  0387                     	ds	1
   750  0388                     _targets_found:	
   751  0388                     	ds	1
   752  0389                     _up:	
   753  0389                     	ds	1
   754                           
   755                           	psect	bssCOMMON
   756  0077                     __pbssCOMMON:	
   757  0077                     _angle:	
   758  0077                     	ds	2
   759  0079                     _highByte:	
   760  0079                     	ds	1
   761                           
   762                           	psect	bssBANK0
   763  004D                     __pbssBANK0:	
   764  004D                     _ADC_ADJUST:	
   765  004D                     	ds	2
   766  004F                     _adcRAW:	
   767  004F                     	ds	2
   768  0051                     _distance:	
   769  0051                     	ds	2
   770  0053                     _LeftSpeedH:	
   771  0053                     	ds	1
   772  0054                     _LeftSpeedL:	
   773  0054                     	ds	1
   774  0055                     _PB7Counter:	
   775  0055                     	ds	1
   776  0056                     _PB8Counter:	
   777  0056                     	ds	1
   778  0057                     _RightSpeedH:	
   779  0057                     	ds	1
   780  0058                     _RightSpeedL:	
   781  0058                     	ds	1
   782  0059                     _c:	
   783  0059                     	ds	1
   784  005A                     _intersection_orientation:	
   785  005A                     	ds	1
   786  005B                     _lowByte:	
   787  005B                     	ds	1
   788  005C                     _orientation_path:	
   789  005C                     	ds	1
   790  005D                     _pathCount:	
   791  005D                     	ds	1
   792  005E                     _r:	
   793  005E                     	ds	1
   794  005F                     _targets:	
   795  005F                     	ds	1
   796  0060                     _x_goto:	
   797  0060                     	ds	1
   798  0061                     _x_int:	
   799  0061                     	ds	1
   800  0062                     _x_path:	
   801  0062                     	ds	1
   802  0063                     _y:	
   803  0063                     	ds	1
   804  0064                     _y_goto:	
   805  0064                     	ds	1
   806  0065                     _y_int:	
   807  0065                     	ds	1
   808  0066                     _y_path:	
   809  0066                     	ds	1
   810                           
   811                           	psect	dataBANK0
   812  0067                     __pdataBANK0:	
   813  0067                     _orientation:	
   814  0067                     	ds	1
   815  0068                     _pathCountShortest:	
   816  0068                     	ds	1
   817  0069                     _x:	
   818  0069                     	ds	1
   819  006A                     _CURRENT_SPEED_L:	
   820  006A                     	ds	2
   821  006C                     _CURRENT_SPEED_R:	
   822  006C                     	ds	2
   823                           
   824                           	psect	bssBANK1
   825  00A0                     __pbssBANK1:	
   826  00A0                     _pathShortest:	
   827  00A0                     	ds	32
   828  00C0                     _ADJUSTED_SPEED_L:	
   829  00C0                     	ds	2
   830  00C2                     _ADJUSTED_SPEED_R:	
   831  00C2                     	ds	2
   832  00C4                     _Distance:	
   833  00C4                     	ds	2
   834  00C6                     _VelocityLeft:	
   835  00C6                     	ds	2
   836  00C8                     _VelocityRight:	
   837  00C8                     	ds	2
   838  00CA                     _loop:	
   839  00CA                     	ds	2
   840  00CC                     _time_count:	
   841  00CC                     	ds	2
   842  00CE                     _timerLoop:	
   843  00CE                     	ds	2
   844  00D0                     _radH:	
   845  00D0                     	ds	1
   846  00D1                     _radL:	
   847  00D1                     	ds	1
   848  00D2                     _speedH:	
   849  00D2                     	ds	1
   850  00D3                     _speedL:	
   851  00D3                     	ds	1
   852  00D4                     _x_target:	
   853  00D4                     	ds	1
   854  00D5                     _y_target:	
   855  00D5                     	ds	1
   856                           
   857                           	psect	dataBANK1
   858  00D6                     __pdataBANK1:	
   859  00D6                     _mazeGridDefault:	
   860  00D6                     	ds	20
   861                           
   862                           	psect	bssBANK3
   863  01B8                     __pbssBANK3:	
   864  01B8                     _path:	
   865  01B8                     	ds	32
   866                           
   867                           	psect	dataBANK3
   868  0190                     __pdataBANK3:	
   869  0190                     PathTo@F1222:	
   870  0190                     	ds	20
   871  01A4                     _mazeGrid:	
   872  01A4                     	ds	20
   873                           
   874                           	psect	dataBANK2
   875  0110                     __pdataBANK2:	
   876  0110                     _gridWalls:	
   877  0110                     	ds	64
   878                           
   879                           	psect	inittext
   880  1628                     init_fetch0:	
   881                           ;	Called with low address in FSR and high address in W
   882                           
   883  1628  087E               	movf	126,w
   884  1629  008A               	movwf	10
   885  162A  087F               	movf	127,w
   886  162B  0082               	movwf	2
   887  162C                     init_ram0:	
   888                           ;Called with:
   889                           ;	high address of idata address in btemp 
   890                           ;	low address of idata address in btemp+1 
   891                           ;	low address of data in FSR
   892                           ;	high address + 1 of data in btemp-1
   893                           
   894  162C  2628  160A  118A   	fcall	init_fetch0
   895  162F  0080               	movwf	0
   896  1630  0A84               	incf	4,f
   897  1631  0804               	movf	4,w
   898  1632  067D               	xorwf	125,w
   899  1633  1903               	btfsc	3,2
   900  1634  3400               	retlw	0
   901  1635  0AFF               	incf	127,f
   902  1636  1903               	btfsc	3,2
   903  1637  0AFE               	incf	126,f
   904  1638  2E2C               	goto	init_ram0
   905                           
   906                           	psect	clrtext
   907  07F8                     clear_ram0:	
   908                           ;	Called with FSR containing the base address, and
   909                           ;	W with the last address+1
   910                           
   911  07F8  0064               	clrwdt	;clear the watchdog before getting into this loop
   912  07F9                     clrloop0:	
   913  07F9  0180               	clrf	0	;clear RAM location pointed to by FSR
   914  07FA  0A84               	incf	4,f	;increment pointer
   915  07FB  0604               	xorwf	4,w	;XOR with final address
   916  07FC  1903               	btfsc	3,2	;have we reached the end yet?
   917  07FD  3400               	retlw	0	;all done for this memory range, return
   918  07FE  0604               	xorwf	4,w	;XOR again to restore value
   919  07FF  2FF9               	goto	clrloop0	;do the next byte
   920                           
   921                           	psect	cstackBANK1
   922  00EA                     __pcstackBANK1:	
   923  00EA                     main@controlByte:	
   924                           
   925                           ; 1 bytes @ 0x0
   926  00EA                     	ds	1
   927  00EB                     main@first:	
   928                           
   929                           ; 1 bytes @ 0x1
   930  00EB                     	ds	1
   931  00EC                     main@second:	
   932                           
   933                           ; 1 bytes @ 0x2
   934  00EC                     	ds	1
   935  00ED                     main@third:	
   936                           
   937                           ; 1 bytes @ 0x3
   938  00ED                     	ds	1
   939  00EE                     main@fourth:	
   940                           
   941                           ; 1 bytes @ 0x4
   942  00EE                     	ds	1
   943  00EF                     main@fifth:	
   944                           
   945                           ; 1 bytes @ 0x5
   946  00EF                     	ds	1
   947                           
   948                           	psect	cstackCOMMON
   949  0072                     __pcstackCOMMON:	
   950  0072                     ?_ADCMain:	
   951  0072                     ?_lcdSetCursor:	
   952                           ; 1 bytes @ 0x0
   953                           
   954  0072                     ?_lcdWriteString:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  0072                     ?_ser_putch:	
   958                           ; 1 bytes @ 0x0
   959                           
   960  0072                     ?_ser_init:	
   961                           ; 1 bytes @ 0x0
   962                           
   963  0072                     ?_setupSPI:	
   964                           ; 1 bytes @ 0x0
   965                           
   966  0072                     ?_setupLCD:	
   967                           ; 1 bytes @ 0x0
   968                           
   969  0072                     ?_setupADC:	
   970                           ; 1 bytes @ 0x0
   971                           
   972  0072                     ?_spi_transfer:	
   973                           ; 1 bytes @ 0x0
   974                           
   975  0072                     ?_wallFollow:	
   976                           ; 1 bytes @ 0x0
   977                           
   978  0072                     ?_Drive1m:	
   979                           ; 1 bytes @ 0x0
   980                           
   981  0072                     ?_Turn90:	
   982                           ; 1 bytes @ 0x0
   983                           
   984  0072                     ?_TravelPath:	
   985                           ; 1 bytes @ 0x0
   986                           
   987  0072                     ?_re_route:	
   988                           ; 1 bytes @ 0x0
   989                           
   990  0072                     ?_isr:	
   991                           ; 1 bytes @ 0x0
   992                           
   993  0072                     ??_isr:	
   994                           ; 1 bytes @ 0x0
   995                           
   996  0072                     ?_main:	
   997                           ; 1 bytes @ 0x0
   998                           
   999  0072                     ?_lcdWriteControl:	
  1000                           ; 1 bytes @ 0x0
  1001                           
  1002  0072                     ?_lcdWriteData:	
  1003                           ; 1 bytes @ 0x0
  1004                           
  1005  0072                     ?_ser_getch:	
  1006                           ; 1 bytes @ 0x0
  1007                           
  1008  0072                     ?_getADC:	
  1009                           ; 1 bytes @ 0x0
  1010                           
  1011                           
  1012                           ; 2 bytes @ 0x0
  1013  0072                     	ds	5
  1014                           
  1015                           	psect	cstackBANK0
  1016  0020                     __pcstackBANK0:	
  1017  0020                     ??_ser_putch:	
  1018  0020                     ??_ser_init:	
  1019                           ; 1 bytes @ 0x0
  1020                           
  1021  0020                     ??_setupSPI:	
  1022                           ; 1 bytes @ 0x0
  1023                           
  1024  0020                     ??_setupADC:	
  1025                           ; 1 bytes @ 0x0
  1026                           
  1027  0020                     ??_spi_transfer:	
  1028                           ; 1 bytes @ 0x0
  1029                           
  1030  0020                     ??_getADC:	
  1031                           ; 1 bytes @ 0x0
  1032                           
  1033  0020                     ??_lcdWriteControl:	
  1034                           ; 1 bytes @ 0x0
  1035                           
  1036  0020                     ??_lcdWriteData:	
  1037                           ; 1 bytes @ 0x0
  1038                           
  1039  0020                     ??_ser_getch:	
  1040                           ; 1 bytes @ 0x0
  1041                           
  1042  0020                     ?___bmul:	
  1043                           ; 1 bytes @ 0x0
  1044                           
  1045  0020                     ?___wmul:	
  1046                           ; 1 bytes @ 0x0
  1047                           
  1048  0020                     ?___lwdiv:	
  1049                           ; 2 bytes @ 0x0
  1050                           
  1051  0020                     ser_putch@c:	
  1052                           ; 2 bytes @ 0x0
  1053                           
  1054  0020                     ___bmul@multiplicand:	
  1055                           ; 1 bytes @ 0x0
  1056                           
  1057  0020                     ___wmul@multiplier:	
  1058                           ; 1 bytes @ 0x0
  1059                           
  1060  0020                     ___lwdiv@divisor:	
  1061                           ; 2 bytes @ 0x0
  1062                           
  1063                           
  1064                           ; 2 bytes @ 0x0
  1065  0020                     	ds	1
  1066  0021                     ?_DriveDirect:	
  1067  0021                     ?_Drive:	
  1068                           ; 1 bytes @ 0x1
  1069                           
  1070  0021                     ??___bmul:	
  1071                           ; 1 bytes @ 0x1
  1072                           
  1073  0021                     ser_getch@rxbyte:	
  1074                           ; 1 bytes @ 0x1
  1075                           
  1076  0021                     Drive@speedL:	
  1077                           ; 1 bytes @ 0x1
  1078                           
  1079  0021                     spi_transfer@temp:	
  1080                           ; 1 bytes @ 0x1
  1081                           
  1082  0021                     DriveDirect@VelocityRight:	
  1083                           ; 1 bytes @ 0x1
  1084                           
  1085                           
  1086                           ; 2 bytes @ 0x1
  1087  0021                     	ds	1
  1088  0022                     ?_getSensorData:	
  1089  0022                     lcdWriteControl@databyte:	
  1090                           ; 2 bytes @ 0x2
  1091                           
  1092  0022                     lcdWriteData@databyte:	
  1093                           ; 1 bytes @ 0x2
  1094                           
  1095  0022                     Drive@radH:	
  1096                           ; 1 bytes @ 0x2
  1097                           
  1098  0022                     getSensorData@bytes:	
  1099                           ; 1 bytes @ 0x2
  1100                           
  1101  0022                     spi_transfer@data:	
  1102                           ; 1 bytes @ 0x2
  1103                           
  1104  0022                     ___bmul@product:	
  1105                           ; 1 bytes @ 0x2
  1106                           
  1107  0022                     ___wmul@multiplicand:	
  1108                           ; 1 bytes @ 0x2
  1109                           
  1110  0022                     ___lwdiv@dividend:	
  1111                           ; 2 bytes @ 0x2
  1112                           
  1113                           
  1114                           ; 2 bytes @ 0x2
  1115  0022                     	ds	1
  1116  0023                     ??_lcdSetCursor:	
  1117  0023                     ??_lcdWriteString:	
  1118                           ; 1 bytes @ 0x3
  1119                           
  1120  0023                     ??_setupLCD:	
  1121                           ; 1 bytes @ 0x3
  1122                           
  1123  0023                     ?_lcdWriteToDigitBCD:	
  1124                           ; 1 bytes @ 0x3
  1125                           
  1126  0023                     lcdSetCursor@address:	
  1127                           ; 1 bytes @ 0x3
  1128                           
  1129  0023                     Drive@radL:	
  1130                           ; 1 bytes @ 0x3
  1131                           
  1132  0023                     ___bmul@multiplier:	
  1133                           ; 1 bytes @ 0x3
  1134                           
  1135  0023                     lcdWriteToDigitBCD@data:	
  1136                           ; 1 bytes @ 0x3
  1137                           
  1138  0023                     DriveDirect@VelocityLeft:	
  1139                           ; 2 bytes @ 0x3
  1140                           
  1141                           
  1142                           ; 2 bytes @ 0x3
  1143  0023                     	ds	1
  1144  0024                     ??_getSensorData:	
  1145  0024                     ??_Drive:	
  1146                           ; 1 bytes @ 0x4
  1147                           
  1148  0024                     ??___wmul:	
  1149                           ; 1 bytes @ 0x4
  1150                           
  1151  0024                     ??___lwdiv:	
  1152                           ; 1 bytes @ 0x4
  1153                           
  1154  0024                     lcdWriteString@s:	
  1155                           ; 1 bytes @ 0x4
  1156                           
  1157  0024                     Drive@speedH:	
  1158                           ; 1 bytes @ 0x4
  1159                           
  1160  0024                     ___wmul@product:	
  1161                           ; 1 bytes @ 0x4
  1162                           
  1163                           
  1164                           ; 2 bytes @ 0x4
  1165  0024                     	ds	1
  1166  0025                     ??_DriveDirect:	
  1167  0025                     ?_PathTo:	
  1168                           ; 1 bytes @ 0x5
  1169                           
  1170  0025                     ??_lcdWriteToDigitBCD:	
  1171                           ; 1 bytes @ 0x5
  1172                           
  1173  0025                     PathTo@y_target:	
  1174                           ; 1 bytes @ 0x5
  1175                           
  1176  0025                     ___lwdiv@counter:	
  1177                           ; 1 bytes @ 0x5
  1178                           
  1179  0025                     lcdWriteToDigitBCD@TensDigit:	
  1180                           ; 1 bytes @ 0x5
  1181                           
  1182                           
  1183                           ; 2 bytes @ 0x5
  1184  0025                     	ds	1
  1185  0026                     ??_PathTo:	
  1186  0026                     getSensorData@packetID:	
  1187                           ; 1 bytes @ 0x6
  1188                           
  1189  0026                     DriveDirect@data:	
  1190                           ; 1 bytes @ 0x6
  1191                           
  1192  0026                     ___lwdiv@quotient:	
  1193                           ; 2 bytes @ 0x6
  1194                           
  1195                           
  1196                           ; 2 bytes @ 0x6
  1197  0026                     	ds	1
  1198  0027                     lcdWriteToDigitBCD@HunsDigit:	
  1199  0027                     getSensorData@sensor:	
  1200                           ; 2 bytes @ 0x7
  1201                           
  1202                           
  1203                           ; 2 bytes @ 0x7
  1204  0027                     	ds	1
  1205  0028                     DriveDirect@data_485:	
  1206                           
  1207                           ; 2 bytes @ 0x8
  1208  0028                     	ds	1
  1209  0029                     lcdWriteToDigitBCD@ThouDigit:	
  1210                           
  1211                           ; 2 bytes @ 0x9
  1212  0029                     	ds	1
  1213  002A                     ??_Turn90:	
  1214                           
  1215                           ; 1 bytes @ 0xA
  1216  002A                     	ds	1
  1217  002B                     lcdWriteToDigitBCD@TenThouDigit:	
  1218                           
  1219                           ; 2 bytes @ 0xB
  1220  002B                     	ds	2
  1221  002D                     Turn90@direction:	
  1222  002D                     lcdWriteToDigitBCD@OnesDigit:	
  1223                           ; 1 bytes @ 0xD
  1224                           
  1225  002D                     PathTo@mazeGrid:	
  1226                           ; 2 bytes @ 0xD
  1227                           
  1228                           
  1229                           ; 20 bytes @ 0xD
  1230  002D                     	ds	2
  1231  002F                     ??_ADCMain:	
  1232  002F                     ??_wallFollow:	
  1233                           ; 1 bytes @ 0xF
  1234                           
  1235                           
  1236                           ; 1 bytes @ 0xF
  1237  002F                     	ds	4
  1238  0033                     wallFollow@setADCdist:	
  1239                           
  1240                           ; 2 bytes @ 0x13
  1241  0033                     	ds	2
  1242  0035                     ??_Drive1m:	
  1243                           
  1244                           ; 1 bytes @ 0x15
  1245  0035                     	ds	3
  1246  0038                     Drive1m@n:	
  1247                           
  1248                           ; 1 bytes @ 0x18
  1249  0038                     	ds	1
  1250  0039                     Drive1m@omni_IR:	
  1251                           
  1252                           ; 1 bytes @ 0x19
  1253  0039                     	ds	1
  1254  003A                     ??_TravelPath:	
  1255                           
  1256                           ; 1 bytes @ 0x1A
  1257  003A                     	ds	2
  1258  003C                     TravelPath@n:	
  1259                           
  1260                           ; 1 bytes @ 0x1C
  1261  003C                     	ds	5
  1262  0041                     PathTo@x_target:	
  1263                           
  1264                           ; 1 bytes @ 0x21
  1265  0041                     	ds	1
  1266  0042                     PathTo@sum:	
  1267                           
  1268                           ; 1 bytes @ 0x22
  1269  0042                     	ds	1
  1270  0043                     PathTo@loop:	
  1271                           
  1272                           ; 2 bytes @ 0x23
  1273  0043                     	ds	2
  1274  0045                     ??_re_route:	
  1275                           
  1276                           ; 1 bytes @ 0x25
  1277  0045                     	ds	5
  1278  004A                     ??_main:	
  1279                           
  1280                           ; 1 bytes @ 0x2A
  1281  004A                     	ds	3
  1282                           
  1283                           	psect	maintext
  1284  006C                     __pmaintext:	
  1285 ;;
  1286 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1287 ;;
  1288 ;; *************** function _main *****************
  1289 ;; Defined at:
  1290 ;;		line 517 in file "main.c"
  1291 ;; Parameters:    Size  Location     Type
  1292 ;;		None
  1293 ;; Auto vars:     Size  Location     Type
  1294 ;;  fifth           1    5[BANK1 ] unsigned char 
  1295 ;;  fourth          1    4[BANK1 ] unsigned char 
  1296 ;;  third           1    3[BANK1 ] unsigned char 
  1297 ;;  second          1    2[BANK1 ] unsigned char 
  1298 ;;  first           1    1[BANK1 ] unsigned char 
  1299 ;;  controlByte     1    0[BANK1 ] unsigned char 
  1300 ;; Return value:  Size  Location     Type
  1301 ;;                  1    wreg      void 
  1302 ;; Registers used:
  1303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1304 ;; Tracked objects:
  1305 ;;		On entry : B00/0
  1306 ;;		On exit  : 0/0
  1307 ;;		Unchanged: 0/0
  1308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1309 ;;      Params:         0       0       0       0       0
  1310 ;;      Locals:         0       0       6       0       0
  1311 ;;      Temps:          0       3       0       0       0
  1312 ;;      Totals:         0       3       6       0       0
  1313 ;;Total ram usage:        9 bytes
  1314 ;; Hardware stack levels required when called:    8
  1315 ;; This function calls:
  1316 ;;		_DriveDirect
  1317 ;;		_PathTo
  1318 ;;		_TravelPath
  1319 ;;		_re_route
  1320 ;;		_ser_init
  1321 ;;		_ser_putch
  1322 ;;		_setupADC
  1323 ;;		_setupLCD
  1324 ;;		_setupSPI
  1325 ;;		_spi_transfer
  1326 ;; This function is called by:
  1327 ;;		Startup code after reset
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331                           
  1332                           ;psect for function _main
  1333  006C                     _main:	
  1334                           
  1335                           ;main.c: 519: _delay((unsigned long)((5000)*(20000000/4000.0)));
  1336                           
  1337                           ;incstack = 0
  1338                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1339  006C  307F               	movlw	127
  1340  006D  1283               	bcf	3,5	;RP0=0, select bank0
  1341  006E  1303               	bcf	3,6	;RP1=0, select bank0
  1342  006F  00CC               	movwf	??_main+2
  1343  0070  30D4               	movlw	212
  1344  0071  00CB               	movwf	??_main+1
  1345  0072  30AE               	movlw	174
  1346  0073  00CA               	movwf	??_main
  1347  0074                     u3767:	
  1348  0074  0BCA               	decfsz	??_main,f
  1349  0075  2874               	goto	u3767
  1350  0076  0BCB               	decfsz	??_main+1,f
  1351  0077  2874               	goto	u3767
  1352  0078  0BCC               	decfsz	??_main+2,f
  1353  0079  2874               	goto	u3767
  1354  007A  287B               	nop2
  1355                           
  1356                           ;main.c: 521: ser_init();
  1357  007B  160A  118A  2619  120A  118A  	fcall	_ser_init
  1358                           
  1359                           ;main.c: 522: setupSPI();
  1360  0080  160A  118A  26B2  120A  118A  	fcall	_setupSPI
  1361                           
  1362                           ;main.c: 523: setupLCD();
  1363  0085  120A  158A  200F  120A  118A  	fcall	_setupLCD
  1364                           
  1365                           ;main.c: 524: setupADC();
  1366  008A  160A  118A  269C  120A  118A  	fcall	_setupADC
  1367                           
  1368                           ;main.c: 526: TRISB = 0b00000011;
  1369  008F  3003               	movlw	3
  1370  0090  1683               	bsf	3,5	;RP0=1, select bank1
  1371  0091  1303               	bcf	3,6	;RP1=0, select bank1
  1372  0092  0086               	movwf	6	;volatile
  1373                           
  1374                           ;main.c: 527: PORTB = 0b11111100;
  1375  0093  30FC               	movlw	252
  1376  0094  1283               	bcf	3,5	;RP0=0, select bank0
  1377  0095  1303               	bcf	3,6	;RP1=0, select bank0
  1378  0096  0086               	movwf	6	;volatile
  1379                           
  1380                           ;main.c: 529: unsigned char controlByte = 0b00001101;
  1381  0097  300D               	movlw	13
  1382  0098  00CA               	movwf	??_main
  1383  0099  084A               	movf	??_main,w
  1384  009A  1683               	bsf	3,5	;RP0=1, select bank1
  1385  009B  1303               	bcf	3,6	;RP1=0, select bank1
  1386  009C  00EA               	movwf	main@controlByte^(0+128)
  1387                           
  1388                           ;main.c: 530: spi_transfer(controlByte);
  1389  009D  086A               	movf	main@controlByte^(0+128),w
  1390  009E  120A  158A  2000  120A  118A  	fcall	_spi_transfer
  1391                           
  1392                           ;main.c: 532: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1393  00A3  301A               	movlw	26
  1394  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1395  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  1396  00A6  00CC               	movwf	??_main+2
  1397  00A7  305E               	movlw	94
  1398  00A8  00CB               	movwf	??_main+1
  1399  00A9  3086               	movlw	134
  1400  00AA  00CA               	movwf	??_main
  1401  00AB                     u3777:	
  1402  00AB  0BCA               	decfsz	??_main,f
  1403  00AC  28AB               	goto	u3777
  1404  00AD  0BCB               	decfsz	??_main+1,f
  1405  00AE  28AB               	goto	u3777
  1406  00AF  0BCC               	decfsz	??_main+2,f
  1407  00B0  28AB               	goto	u3777
  1408  00B1  0000               	nop
  1409                           
  1410                           ;main.c: 533: ser_putch(128);
  1411  00B2  3080               	movlw	128
  1412  00B3  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1413                           
  1414                           ;main.c: 534: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1415  00B8  301A               	movlw	26
  1416  00B9  1283               	bcf	3,5	;RP0=0, select bank0
  1417  00BA  1303               	bcf	3,6	;RP1=0, select bank0
  1418  00BB  00CC               	movwf	??_main+2
  1419  00BC  305E               	movlw	94
  1420  00BD  00CB               	movwf	??_main+1
  1421  00BE  3086               	movlw	134
  1422  00BF  00CA               	movwf	??_main
  1423  00C0                     u3787:	
  1424  00C0  0BCA               	decfsz	??_main,f
  1425  00C1  28C0               	goto	u3787
  1426  00C2  0BCB               	decfsz	??_main+1,f
  1427  00C3  28C0               	goto	u3787
  1428  00C4  0BCC               	decfsz	??_main+2,f
  1429  00C5  28C0               	goto	u3787
  1430  00C6  0000               	nop
  1431                           
  1432                           ;main.c: 535: ser_putch(132);
  1433  00C7  3084               	movlw	132
  1434  00C8  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1435                           
  1436                           ;main.c: 536: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1437  00CD  301A               	movlw	26
  1438  00CE  1283               	bcf	3,5	;RP0=0, select bank0
  1439  00CF  1303               	bcf	3,6	;RP1=0, select bank0
  1440  00D0  00CC               	movwf	??_main+2
  1441  00D1  305E               	movlw	94
  1442  00D2  00CB               	movwf	??_main+1
  1443  00D3  3086               	movlw	134
  1444  00D4  00CA               	movwf	??_main
  1445  00D5                     u3797:	
  1446  00D5  0BCA               	decfsz	??_main,f
  1447  00D6  28D5               	goto	u3797
  1448  00D7  0BCB               	decfsz	??_main+1,f
  1449  00D8  28D5               	goto	u3797
  1450  00D9  0BCC               	decfsz	??_main+2,f
  1451  00DA  28D5               	goto	u3797
  1452  00DB  0000               	nop
  1453                           
  1454                           ;main.c: 539: x = 1;
  1455  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  1456  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  1457  00DE  01E9               	clrf	_x
  1458  00DF  0AE9               	incf	_x,f
  1459                           
  1460                           ;main.c: 540: y = 0;
  1461  00E0  01E3               	clrf	_y
  1462                           
  1463                           ;main.c: 541: orientation = 3;
  1464  00E1  3003               	movlw	3
  1465  00E2  00CA               	movwf	??_main
  1466  00E3  084A               	movf	??_main,w
  1467  00E4  00E7               	movwf	_orientation
  1468                           
  1469                           ;main.c: 545: ser_putch(140);
  1470  00E5  308C               	movlw	140
  1471  00E6  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1472                           
  1473                           ;main.c: 546: ser_putch(2);
  1474  00EB  3002               	movlw	2
  1475  00EC  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1476                           
  1477                           ;main.c: 547: ser_putch(10);
  1478  00F1  300A               	movlw	10
  1479  00F2  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1480                           
  1481                           ;main.c: 548: ser_putch(67);
  1482  00F7  3043               	movlw	67
  1483  00F8  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1484                           
  1485                           ;main.c: 549: ser_putch(32);
  1486  00FD  3020               	movlw	32
  1487  00FE  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1488                           
  1489                           ;main.c: 550: ser_putch(77);
  1490  0103  304D               	movlw	77
  1491  0104  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1492                           
  1493                           ;main.c: 551: ser_putch(16);
  1494  0109  3010               	movlw	16
  1495  010A  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1496                           
  1497                           ;main.c: 552: ser_putch(77);
  1498  010F  304D               	movlw	77
  1499  0110  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1500                           
  1501                           ;main.c: 553: ser_putch(16);
  1502  0115  3010               	movlw	16
  1503  0116  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1504                           
  1505                           ;main.c: 554: ser_putch(77);
  1506  011B  304D               	movlw	77
  1507  011C  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1508                           
  1509                           ;main.c: 555: ser_putch(16);
  1510  0121  3010               	movlw	16
  1511  0122  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1512                           
  1513                           ;main.c: 556: ser_putch(77);
  1514  0127  304D               	movlw	77
  1515  0128  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1516                           
  1517                           ;main.c: 557: ser_putch(16);
  1518  012D  3010               	movlw	16
  1519  012E  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1520                           
  1521                           ;main.c: 558: ser_putch(76);
  1522  0133  304C               	movlw	76
  1523  0134  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1524                           
  1525                           ;main.c: 559: ser_putch(16);
  1526  0139  3010               	movlw	16
  1527  013A  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1528                           
  1529                           ;main.c: 560: ser_putch(74);
  1530  013F  304A               	movlw	74
  1531  0140  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1532                           
  1533                           ;main.c: 561: ser_putch(16);
  1534  0145  3010               	movlw	16
  1535  0146  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1536                           
  1537                           ;main.c: 562: ser_putch(72);
  1538  014B  3048               	movlw	72
  1539  014C  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1540                           
  1541                           ;main.c: 563: ser_putch(32);
  1542  0151  3020               	movlw	32
  1543  0152  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1544                           
  1545                           ;main.c: 564: ser_putch(79);
  1546  0157  304F               	movlw	79
  1547  0158  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1548                           
  1549                           ;main.c: 565: ser_putch(16);
  1550  015D  3010               	movlw	16
  1551  015E  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1552                           
  1553                           ;main.c: 566: ser_putch(84);
  1554  0163  3054               	movlw	84
  1555  0164  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1556                           
  1557                           ;main.c: 567: ser_putch(48);
  1558  0169  3030               	movlw	48
  1559  016A  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1560                           
  1561                           ;main.c: 570: char first = 16;
  1562  016F  3010               	movlw	16
  1563  0170  1283               	bcf	3,5	;RP0=0, select bank0
  1564  0171  1303               	bcf	3,6	;RP1=0, select bank0
  1565  0172  00CA               	movwf	??_main
  1566  0173  084A               	movf	??_main,w
  1567  0174  1683               	bsf	3,5	;RP0=1, select bank1
  1568  0175  1303               	bcf	3,6	;RP1=0, select bank1
  1569  0176  00EB               	movwf	main@first^(0+128)
  1570                           
  1571                           ;main.c: 571: char second = 8;
  1572  0177  3008               	movlw	8
  1573  0178  1283               	bcf	3,5	;RP0=0, select bank0
  1574  0179  1303               	bcf	3,6	;RP1=0, select bank0
  1575  017A  00CA               	movwf	??_main
  1576  017B  084A               	movf	??_main,w
  1577  017C  1683               	bsf	3,5	;RP0=1, select bank1
  1578  017D  1303               	bcf	3,6	;RP1=0, select bank1
  1579  017E  00EC               	movwf	main@second^(0+128)
  1580                           
  1581                           ;main.c: 572: char third = 12;
  1582  017F  300C               	movlw	12
  1583  0180  1283               	bcf	3,5	;RP0=0, select bank0
  1584  0181  1303               	bcf	3,6	;RP1=0, select bank0
  1585  0182  00CA               	movwf	??_main
  1586  0183  084A               	movf	??_main,w
  1587  0184  1683               	bsf	3,5	;RP0=1, select bank1
  1588  0185  1303               	bcf	3,6	;RP1=0, select bank1
  1589  0186  00ED               	movwf	main@third^(0+128)
  1590                           
  1591                           ;main.c: 573: char fourth = 36;
  1592  0187  3024               	movlw	36
  1593  0188  1283               	bcf	3,5	;RP0=0, select bank0
  1594  0189  1303               	bcf	3,6	;RP1=0, select bank0
  1595  018A  00CA               	movwf	??_main
  1596  018B  084A               	movf	??_main,w
  1597  018C  1683               	bsf	3,5	;RP0=1, select bank1
  1598  018D  1303               	bcf	3,6	;RP1=0, select bank1
  1599  018E  00EE               	movwf	main@fourth^(0+128)
  1600                           
  1601                           ;main.c: 574: char fifth = 32;
  1602  018F  3020               	movlw	32
  1603  0190  1283               	bcf	3,5	;RP0=0, select bank0
  1604  0191  1303               	bcf	3,6	;RP1=0, select bank0
  1605  0192  00CA               	movwf	??_main
  1606  0193  084A               	movf	??_main,w
  1607  0194  1683               	bsf	3,5	;RP0=1, select bank1
  1608  0195  1303               	bcf	3,6	;RP1=0, select bank1
  1609  0196  00EF               	movwf	main@fifth^(0+128)
  1610                           
  1611                           ;main.c: 578: ser_putch(140);
  1612  0197  308C               	movlw	140
  1613  0198  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1614                           
  1615                           ;main.c: 579: ser_putch(3);
  1616  019D  3003               	movlw	3
  1617  019E  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1618                           
  1619                           ;main.c: 580: ser_putch(16);
  1620  01A3  3010               	movlw	16
  1621  01A4  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1622                           
  1623                           ;main.c: 581: ser_putch(62);
  1624  01A9  303E               	movlw	62
  1625  01AA  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1626                           
  1627                           ;main.c: 582: ser_putch(first);
  1628  01AF  1683               	bsf	3,5	;RP0=1, select bank1
  1629  01B0  1303               	bcf	3,6	;RP1=0, select bank1
  1630  01B1  086B               	movf	main@first^(0+128),w
  1631  01B2  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1632                           
  1633                           ;main.c: 583: ser_putch(69);
  1634  01B7  3045               	movlw	69
  1635  01B8  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1636                           
  1637                           ;main.c: 584: ser_putch(second);
  1638  01BD  1683               	bsf	3,5	;RP0=1, select bank1
  1639  01BE  1303               	bcf	3,6	;RP1=0, select bank1
  1640  01BF  086C               	movf	main@second^(0+128),w
  1641  01C0  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1642                           
  1643                           ;main.c: 585: ser_putch(62);
  1644  01C5  303E               	movlw	62
  1645  01C6  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1646                           
  1647                           ;main.c: 586: ser_putch(third);
  1648  01CB  1683               	bsf	3,5	;RP0=1, select bank1
  1649  01CC  1303               	bcf	3,6	;RP1=0, select bank1
  1650  01CD  086D               	movf	main@third^(0+128),w
  1651  01CE  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1652                           
  1653                           ;main.c: 587: ser_putch(65);
  1654  01D3  3041               	movlw	65
  1655  01D4  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1656                           
  1657                           ;main.c: 588: ser_putch(fourth);
  1658  01D9  1683               	bsf	3,5	;RP0=1, select bank1
  1659  01DA  1303               	bcf	3,6	;RP1=0, select bank1
  1660  01DB  086E               	movf	main@fourth^(0+128),w
  1661  01DC  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1662                           
  1663                           ;main.c: 589: ser_putch(62);
  1664  01E1  303E               	movlw	62
  1665  01E2  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1666                           
  1667                           ;main.c: 590: ser_putch(fifth);
  1668  01E7  1683               	bsf	3,5	;RP0=1, select bank1
  1669  01E8  1303               	bcf	3,6	;RP1=0, select bank1
  1670  01E9  086F               	movf	main@fifth^(0+128),w
  1671  01EA  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1672                           
  1673                           ;main.c: 592: ser_putch(65);
  1674  01EF  3041               	movlw	65
  1675  01F0  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1676                           
  1677                           ;main.c: 593: ser_putch(first);
  1678  01F5  1683               	bsf	3,5	;RP0=1, select bank1
  1679  01F6  1303               	bcf	3,6	;RP1=0, select bank1
  1680  01F7  086B               	movf	main@first^(0+128),w
  1681  01F8  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1682                           
  1683                           ;main.c: 594: ser_putch(62);
  1684  01FD  303E               	movlw	62
  1685  01FE  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1686                           
  1687                           ;main.c: 595: ser_putch(second);
  1688  0203  1683               	bsf	3,5	;RP0=1, select bank1
  1689  0204  1303               	bcf	3,6	;RP1=0, select bank1
  1690  0205  086C               	movf	main@second^(0+128),w
  1691  0206  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1692                           
  1693                           ;main.c: 596: ser_putch(65);
  1694  020B  3041               	movlw	65
  1695  020C  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1696                           
  1697                           ;main.c: 597: ser_putch(third);
  1698  0211  1683               	bsf	3,5	;RP0=1, select bank1
  1699  0212  1303               	bcf	3,6	;RP1=0, select bank1
  1700  0213  086D               	movf	main@third^(0+128),w
  1701  0214  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1702                           
  1703                           ;main.c: 598: ser_putch(69);
  1704  0219  3045               	movlw	69
  1705  021A  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1706                           
  1707                           ;main.c: 599: ser_putch(fourth);
  1708  021F  1683               	bsf	3,5	;RP0=1, select bank1
  1709  0220  1303               	bcf	3,6	;RP1=0, select bank1
  1710  0221  086E               	movf	main@fourth^(0+128),w
  1711  0222  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1712                           
  1713                           ;main.c: 600: ser_putch(65);
  1714  0227  3041               	movlw	65
  1715  0228  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1716                           
  1717                           ;main.c: 601: ser_putch(fifth);
  1718  022D  1683               	bsf	3,5	;RP0=1, select bank1
  1719  022E  1303               	bcf	3,6	;RP1=0, select bank1
  1720  022F  086F               	movf	main@fifth^(0+128),w
  1721  0230  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1722                           
  1723                           ;main.c: 603: ser_putch(69);
  1724  0235  3045               	movlw	69
  1725  0236  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1726                           
  1727                           ;main.c: 604: ser_putch(first);
  1728  023B  1683               	bsf	3,5	;RP0=1, select bank1
  1729  023C  1303               	bcf	3,6	;RP1=0, select bank1
  1730  023D  086B               	movf	main@first^(0+128),w
  1731  023E  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1732                           
  1733                           ;main.c: 605: ser_putch(65);
  1734  0243  3041               	movlw	65
  1735  0244  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1736                           
  1737                           ;main.c: 606: ser_putch(second);
  1738  0249  1683               	bsf	3,5	;RP0=1, select bank1
  1739  024A  1303               	bcf	3,6	;RP1=0, select bank1
  1740  024B  086C               	movf	main@second^(0+128),w
  1741  024C  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1742                           
  1743                           ;main.c: 607: ser_putch(69);
  1744  0251  3045               	movlw	69
  1745  0252  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1746                           
  1747                           ;main.c: 608: ser_putch(third);
  1748  0257  1683               	bsf	3,5	;RP0=1, select bank1
  1749  0258  1303               	bcf	3,6	;RP1=0, select bank1
  1750  0259  086D               	movf	main@third^(0+128),w
  1751  025A  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1752                           
  1753                           ;main.c: 609: ser_putch(60);
  1754  025F  303C               	movlw	60
  1755  0260  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1756                           
  1757                           ;main.c: 610: ser_putch(fourth);
  1758  0265  1683               	bsf	3,5	;RP0=1, select bank1
  1759  0266  1303               	bcf	3,6	;RP1=0, select bank1
  1760  0267  086E               	movf	main@fourth^(0+128),w
  1761  0268  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1762                           
  1763                           ;main.c: 611: ser_putch(48);
  1764  026D  3030               	movlw	48
  1765  026E  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1766                           
  1767                           ;main.c: 612: ser_putch(fifth);
  1768  0273  1683               	bsf	3,5	;RP0=1, select bank1
  1769  0274  1303               	bcf	3,6	;RP1=0, select bank1
  1770  0275  086F               	movf	main@fifth^(0+128),w
  1771  0276  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1772                           
  1773                           ;main.c: 614: ser_putch(65);
  1774  027B  3041               	movlw	65
  1775  027C  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1776                           
  1777                           ;main.c: 615: ser_putch(16);
  1778  0281  3010               	movlw	16
  1779  0282  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1780                           
  1781                           ;main.c: 618: ser_putch(140);
  1782  0287  308C               	movlw	140
  1783  0288  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1784                           
  1785                           ;main.c: 619: ser_putch(4);
  1786  028D  3004               	movlw	4
  1787  028E  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1788                           
  1789                           ;main.c: 620: ser_putch(3);
  1790  0293  3003               	movlw	3
  1791  0294  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1792                           
  1793                           ;main.c: 621: ser_putch(60);
  1794  0299  303C               	movlw	60
  1795  029A  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1796                           
  1797                           ;main.c: 622: ser_putch(12);
  1798  029F  300C               	movlw	12
  1799  02A0  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1800                           
  1801                           ;main.c: 623: ser_putch(65);
  1802  02A5  3041               	movlw	65
  1803  02A6  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1804                           
  1805                           ;main.c: 624: ser_putch(12);
  1806  02AB  300C               	movlw	12
  1807  02AC  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1808                           
  1809                           ;main.c: 625: ser_putch(69);
  1810  02B1  3045               	movlw	69
  1811  02B2  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1812                           
  1813                           ;main.c: 626: ser_putch(96);
  1814  02B7  3060               	movlw	96
  1815  02B8  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1816                           
  1817                           ;main.c: 630: ser_putch(140);
  1818  02BD  308C               	movlw	140
  1819  02BE  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1820                           
  1821                           ;main.c: 631: ser_putch(5);
  1822  02C3  3005               	movlw	5
  1823  02C4  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1824                           
  1825                           ;main.c: 632: ser_putch(11);
  1826  02C9  300B               	movlw	11
  1827  02CA  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1828                           
  1829                           ;main.c: 633: ser_putch(70);
  1830  02CF  3046               	movlw	70
  1831  02D0  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1832                           
  1833                           ;main.c: 634: ser_putch(12);
  1834  02D5  300C               	movlw	12
  1835  02D6  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1836                           
  1837                           ;main.c: 635: ser_putch(67);
  1838  02DB  3043               	movlw	67
  1839  02DC  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1840                           
  1841                           ;main.c: 636: ser_putch(12);
  1842  02E1  300C               	movlw	12
  1843  02E2  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1844                           
  1845                           ;main.c: 637: ser_putch(62);
  1846  02E7  303E               	movlw	62
  1847  02E8  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1848                           
  1849                           ;main.c: 638: ser_putch(96);
  1850  02ED  3060               	movlw	96
  1851  02EE  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1852                           
  1853                           ;main.c: 639: ser_putch(70);
  1854  02F3  3046               	movlw	70
  1855  02F4  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1856                           
  1857                           ;main.c: 640: ser_putch(12);
  1858  02F9  300C               	movlw	12
  1859  02FA  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1860                           
  1861                           ;main.c: 641: ser_putch(67);
  1862  02FF  3043               	movlw	67
  1863  0300  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1864                           
  1865                           ;main.c: 642: ser_putch(12);
  1866  0305  300C               	movlw	12
  1867  0306  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1868                           
  1869                           ;main.c: 643: ser_putch(61);
  1870  030B  303D               	movlw	61
  1871  030C  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1872                           
  1873                           ;main.c: 644: ser_putch(96);
  1874  0311  3060               	movlw	96
  1875  0312  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1876                           
  1877                           ;main.c: 645: ser_putch(70);
  1878  0317  3046               	movlw	70
  1879  0318  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1880                           
  1881                           ;main.c: 646: ser_putch(12);
  1882  031D  300C               	movlw	12
  1883  031E  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1884                           
  1885                           ;main.c: 647: ser_putch(67);
  1886  0323  3043               	movlw	67
  1887  0324  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1888                           
  1889                           ;main.c: 648: ser_putch(12);
  1890  0329  300C               	movlw	12
  1891  032A  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1892                           
  1893                           ;main.c: 649: ser_putch(60);
  1894  032F  303C               	movlw	60
  1895  0330  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1896                           
  1897                           ;main.c: 650: ser_putch(96);
  1898  0335  3060               	movlw	96
  1899  0336  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1900                           
  1901                           ;main.c: 651: ser_putch(70);
  1902  033B  3046               	movlw	70
  1903  033C  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1904                           
  1905                           ;main.c: 652: ser_putch(12);
  1906  0341  300C               	movlw	12
  1907  0342  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1908                           
  1909                           ;main.c: 653: ser_putch(60);
  1910  0347  303C               	movlw	60
  1911  0348  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1912                           
  1913                           ;main.c: 654: ser_putch(20);
  1914  034D  3014               	movlw	20
  1915  034E  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1916                           
  1917                           ;main.c: 657: ser_putch(140);
  1918  0353  308C               	movlw	140
  1919  0354  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1920                           
  1921                           ;main.c: 658: ser_putch(6);
  1922  0359  3006               	movlw	6
  1923  035A  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1924                           
  1925                           ;main.c: 659: ser_putch(11);
  1926  035F  300B               	movlw	11
  1927  0360  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1928                           
  1929                           ;main.c: 660: ser_putch(55);
  1930  0365  3037               	movlw	55
  1931  0366  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1932                           
  1933                           ;main.c: 661: ser_putch(22);
  1934  036B  3016               	movlw	22
  1935  036C  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1936                           
  1937                           ;main.c: 662: ser_putch(55);
  1938  0371  3037               	movlw	55
  1939  0372  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1940                           
  1941                           ;main.c: 663: ser_putch(22);
  1942  0377  3016               	movlw	22
  1943  0378  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1944                           
  1945                           ;main.c: 664: ser_putch(0);
  1946  037D  3000               	movlw	0
  1947  037E  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1948                           
  1949                           ;main.c: 665: ser_putch(2);
  1950  0383  3002               	movlw	2
  1951  0384  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1952                           
  1953                           ;main.c: 666: ser_putch(58);
  1954  0389  303A               	movlw	58
  1955  038A  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1956                           
  1957                           ;main.c: 667: ser_putch(18);
  1958  038F  3012               	movlw	18
  1959  0390  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1960                           
  1961                           ;main.c: 668: ser_putch(48);
  1962  0395  3030               	movlw	48
  1963  0396  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1964                           
  1965                           ;main.c: 669: ser_putch(24);
  1966  039B  3018               	movlw	24
  1967  039C  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1968                           
  1969                           ;main.c: 670: ser_putch(0);
  1970  03A1  3000               	movlw	0
  1971  03A2  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1972                           
  1973                           ;main.c: 671: ser_putch(10);
  1974  03A7  300A               	movlw	10
  1975  03A8  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1976                           
  1977                           ;main.c: 672: ser_putch(55);
  1978  03AD  3037               	movlw	55
  1979  03AE  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1980                           
  1981                           ;main.c: 673: ser_putch(22);
  1982  03B3  3016               	movlw	22
  1983  03B4  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1984                           
  1985                           ;main.c: 674: ser_putch(55);
  1986  03B9  3037               	movlw	55
  1987  03BA  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1988                           
  1989                           ;main.c: 675: ser_putch(22);
  1990  03BF  3016               	movlw	22
  1991  03C0  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1992                           
  1993                           ;main.c: 676: ser_putch(0);
  1994  03C5  3000               	movlw	0
  1995  03C6  160A  118A  260D  120A  118A  	fcall	_ser_putch
  1996                           
  1997                           ;main.c: 677: ser_putch(2);
  1998  03CB  3002               	movlw	2
  1999  03CC  160A  118A  260D  120A  118A  	fcall	_ser_putch
  2000                           
  2001                           ;main.c: 678: ser_putch(53);
  2002  03D1  3035               	movlw	53
  2003  03D2  160A  118A  260D  120A  118A  	fcall	_ser_putch
  2004                           
  2005                           ;main.c: 679: ser_putch(18);
  2006  03D7  3012               	movlw	18
  2007  03D8  160A  118A  260D  120A  118A  	fcall	_ser_putch
  2008                           
  2009                           ;main.c: 680: ser_putch(54);
  2010  03DD  3036               	movlw	54
  2011  03DE  160A  118A  260D  120A  118A  	fcall	_ser_putch
  2012                           
  2013                           ;main.c: 681: ser_putch(24);
  2014  03E3  3018               	movlw	24
  2015  03E4  160A  118A  260D  120A  118A  	fcall	_ser_putch
  2016  03E9                     l4929:	
  2017                           ;main.c: 684: while(1){
  2018                           
  2019                           
  2020                           ;main.c: 686: if(PB7Counter >= 10 && !RB1== 0){
  2021  03E9  300A               	movlw	10
  2022  03EA  1283               	bcf	3,5	;RP0=0, select bank0
  2023  03EB  1303               	bcf	3,6	;RP1=0, select bank0
  2024  03EC  0255               	subwf	_PB7Counter,w
  2025  03ED  1803               	btfsc	3,0
  2026  03EE  1C86               	btfss	6,1	;volatile
  2027  03EF  2C35               	goto	l4945
  2028                           
  2029                           ;main.c: 689: ser_putch(141);
  2030  03F0  308D               	movlw	141
  2031  03F1  160A  118A  260D  120A  118A  	fcall	_ser_putch
  2032                           
  2033                           ;main.c: 690: ser_putch(6);
  2034  03F6  3006               	movlw	6
  2035  03F7  160A  118A  260D  120A  118A  	fcall	_ser_putch
  2036                           
  2037                           ;main.c: 691: _delay((unsigned long)((3000)*(20000000/4000.0)));
  2038  03FC  304D               	movlw	77
  2039  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  2040  03FE  1303               	bcf	3,6	;RP1=0, select bank0
  2041  03FF  00CC               	movwf	??_main+2
  2042  0400  3019               	movlw	25
  2043  0401  00CB               	movwf	??_main+1
  2044  0402  309A               	movlw	154
  2045  0403  00CA               	movwf	??_main
  2046  0404                     u3807:	
  2047  0404  0BCA               	decfsz	??_main,f
  2048  0405  2C04               	goto	u3807
  2049  0406  0BCB               	decfsz	??_main+1,f
  2050  0407  2C04               	goto	u3807
  2051  0408  0BCC               	decfsz	??_main+2,f
  2052  0409  2C04               	goto	u3807
  2053  040A  2C0B               	nop2
  2054                           
  2055                           ;main.c: 692: ser_putch(141);
  2056  040B  308D               	movlw	141
  2057  040C  160A  118A  260D  120A  118A  	fcall	_ser_putch
  2058                           
  2059                           ;main.c: 693: ser_putch(6);
  2060  0411  3006               	movlw	6
  2061  0412  160A  118A  260D  120A  118A  	fcall	_ser_putch
  2062                           
  2063                           ;main.c: 694: _delay((unsigned long)((3000)*(20000000/4000.0)));
  2064  0417  304D               	movlw	77
  2065  0418  1283               	bcf	3,5	;RP0=0, select bank0
  2066  0419  1303               	bcf	3,6	;RP1=0, select bank0
  2067  041A  00CC               	movwf	??_main+2
  2068  041B  3019               	movlw	25
  2069  041C  00CB               	movwf	??_main+1
  2070  041D  309A               	movlw	154
  2071  041E  00CA               	movwf	??_main
  2072  041F                     u3817:	
  2073  041F  0BCA               	decfsz	??_main,f
  2074  0420  2C1F               	goto	u3817
  2075  0421  0BCB               	decfsz	??_main+1,f
  2076  0422  2C1F               	goto	u3817
  2077  0423  0BCC               	decfsz	??_main+2,f
  2078  0424  2C1F               	goto	u3817
  2079  0425  2C26               	nop2
  2080                           
  2081                           ;main.c: 695: ser_putch(141);
  2082  0426  308D               	movlw	141
  2083  0427  160A  118A  260D  120A  118A  	fcall	_ser_putch
  2084                           
  2085                           ;main.c: 696: ser_putch(5);
  2086  042C  3005               	movlw	5
  2087  042D  160A  118A  260D  120A  118A  	fcall	_ser_putch
  2088                           
  2089                           ;main.c: 701: PB7Counter=0;
  2090  0432  1283               	bcf	3,5	;RP0=0, select bank0
  2091  0433  1303               	bcf	3,6	;RP1=0, select bank0
  2092  0434  01D5               	clrf	_PB7Counter
  2093  0435                     l4945:	
  2094                           
  2095                           ;main.c: 705: }
  2096                           ;main.c: 709: if(PB8Counter >= 10 && !RB0 == 0){
  2097  0435  300A               	movlw	10
  2098  0436  0256               	subwf	_PB8Counter,w
  2099  0437  1803               	btfsc	3,0
  2100  0438  1C06               	btfss	6,0	;volatile
  2101  0439  2BE9               	goto	l4929
  2102                           
  2103                           ;main.c: 713: PathTo(2,0);
  2104  043A  01A5               	clrf	PathTo@y_target
  2105  043B  3002               	movlw	2
  2106  043C  120A  158A  249C  120A  118A  	fcall	_PathTo
  2107                           
  2108                           ;main.c: 714: TravelPath();
  2109  0441  120A  118A  25F1  120A  118A  	fcall	_TravelPath
  2110                           
  2111                           ;main.c: 716: if (IR_Wall == 1)
  2112  0446  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2113  0447  2C55               	goto	l4955
  2114                           
  2115                           ;main.c: 717: DriveDirect(0,0);
  2116  0448  3000               	movlw	0
  2117  0449  1283               	bcf	3,5	;RP0=0, select bank0
  2118  044A  1303               	bcf	3,6	;RP1=0, select bank0
  2119  044B  00A1               	movwf	DriveDirect@VelocityRight
  2120  044C  00A2               	movwf	DriveDirect@VelocityRight+1
  2121  044D  3000               	movlw	0
  2122  044E  00A3               	movwf	DriveDirect@VelocityLeft
  2123  044F  00A4               	movwf	DriveDirect@VelocityLeft+1
  2124  0450  120A  158A  20BD  120A  118A  	fcall	_DriveDirect
  2125  0455                     l4955:	
  2126                           
  2127                           ;main.c: 718: _delay((unsigned long)((2000)*(20000000/4000.0)));
  2128  0455  3033               	movlw	51
  2129  0456  1283               	bcf	3,5	;RP0=0, select bank0
  2130  0457  1303               	bcf	3,6	;RP1=0, select bank0
  2131  0458  00CC               	movwf	??_main+2
  2132  0459  30BC               	movlw	188
  2133  045A  00CB               	movwf	??_main+1
  2134  045B  3010               	movlw	16
  2135  045C  00CA               	movwf	??_main
  2136  045D                     u3827:	
  2137  045D  0BCA               	decfsz	??_main,f
  2138  045E  2C5D               	goto	u3827
  2139  045F  0BCB               	decfsz	??_main+1,f
  2140  0460  2C5D               	goto	u3827
  2141  0461  0BCC               	decfsz	??_main+2,f
  2142  0462  2C5D               	goto	u3827
  2143                           
  2144                           ;main.c: 719: re_route();
  2145  0463  120A  118A  2706  120A  118A  	fcall	_re_route
  2146                           
  2147                           ;main.c: 720: if (targets_found == 1){
  2148  0468  1C71               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2149  0469  2C93               	goto	l4969
  2150                           
  2151                           ;main.c: 721: DriveDirect(0,0);
  2152  046A  3000               	movlw	0
  2153  046B  1283               	bcf	3,5	;RP0=0, select bank0
  2154  046C  1303               	bcf	3,6	;RP1=0, select bank0
  2155  046D  00A1               	movwf	DriveDirect@VelocityRight
  2156  046E  00A2               	movwf	DriveDirect@VelocityRight+1
  2157  046F  3000               	movlw	0
  2158  0470  00A3               	movwf	DriveDirect@VelocityLeft
  2159  0471  00A4               	movwf	DriveDirect@VelocityLeft+1
  2160  0472  120A  158A  20BD  120A  118A  	fcall	_DriveDirect
  2161                           
  2162                           ;main.c: 722: _delay((unsigned long)((2000)*(20000000/4000.0)));
  2163  0477  3033               	movlw	51
  2164  0478  1283               	bcf	3,5	;RP0=0, select bank0
  2165  0479  1303               	bcf	3,6	;RP1=0, select bank0
  2166  047A  00CC               	movwf	??_main+2
  2167  047B  30BC               	movlw	188
  2168  047C  00CB               	movwf	??_main+1
  2169  047D  3010               	movlw	16
  2170  047E  00CA               	movwf	??_main
  2171  047F                     u3837:	
  2172  047F  0BCA               	decfsz	??_main,f
  2173  0480  2C7F               	goto	u3837
  2174  0481  0BCB               	decfsz	??_main+1,f
  2175  0482  2C7F               	goto	u3837
  2176  0483  0BCC               	decfsz	??_main+2,f
  2177  0484  2C7F               	goto	u3837
  2178                           
  2179                           ;main.c: 723: PathTo(1,0);
  2180  0485  1283               	bcf	3,5	;RP0=0, select bank0
  2181  0486  1303               	bcf	3,6	;RP1=0, select bank0
  2182  0487  01A5               	clrf	PathTo@y_target
  2183  0488  3001               	movlw	1
  2184  0489  120A  158A  249C  120A  118A  	fcall	_PathTo
  2185                           
  2186                           ;main.c: 724: TravelPath();
  2187  048E  120A  118A  25F1  120A  118A  	fcall	_TravelPath
  2188  0493                     l4969:	
  2189                           
  2190                           ;main.c: 725: }
  2191                           ;main.c: 728: PathTo(3,0);
  2192  0493  1283               	bcf	3,5	;RP0=0, select bank0
  2193  0494  1303               	bcf	3,6	;RP1=0, select bank0
  2194  0495  01A5               	clrf	PathTo@y_target
  2195  0496  3003               	movlw	3
  2196  0497  120A  158A  249C  120A  118A  	fcall	_PathTo
  2197                           
  2198                           ;main.c: 729: TravelPath();
  2199  049C  120A  118A  25F1  120A  118A  	fcall	_TravelPath
  2200                           
  2201                           ;main.c: 730: if (IR_Wall == 1)
  2202  04A1  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2203  04A2  2CB0               	goto	l4977
  2204                           
  2205                           ;main.c: 731: DriveDirect(0,0);
  2206  04A3  3000               	movlw	0
  2207  04A4  1283               	bcf	3,5	;RP0=0, select bank0
  2208  04A5  1303               	bcf	3,6	;RP1=0, select bank0
  2209  04A6  00A1               	movwf	DriveDirect@VelocityRight
  2210  04A7  00A2               	movwf	DriveDirect@VelocityRight+1
  2211  04A8  3000               	movlw	0
  2212  04A9  00A3               	movwf	DriveDirect@VelocityLeft
  2213  04AA  00A4               	movwf	DriveDirect@VelocityLeft+1
  2214  04AB  120A  158A  20BD  120A  118A  	fcall	_DriveDirect
  2215  04B0                     l4977:	
  2216                           
  2217                           ;main.c: 732: _delay((unsigned long)((2000)*(20000000/4000.0)));
  2218  04B0  3033               	movlw	51
  2219  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  2220  04B2  1303               	bcf	3,6	;RP1=0, select bank0
  2221  04B3  00CC               	movwf	??_main+2
  2222  04B4  30BC               	movlw	188
  2223  04B5  00CB               	movwf	??_main+1
  2224  04B6  3010               	movlw	16
  2225  04B7  00CA               	movwf	??_main
  2226  04B8                     u3847:	
  2227  04B8  0BCA               	decfsz	??_main,f
  2228  04B9  2CB8               	goto	u3847
  2229  04BA  0BCB               	decfsz	??_main+1,f
  2230  04BB  2CB8               	goto	u3847
  2231  04BC  0BCC               	decfsz	??_main+2,f
  2232  04BD  2CB8               	goto	u3847
  2233                           
  2234                           ;main.c: 733: re_route();
  2235  04BE  120A  118A  2706  120A  118A  	fcall	_re_route
  2236                           
  2237                           ;main.c: 734: if (targets_found == 1){
  2238  04C3  1C71               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2239  04C4  2CEE               	goto	l4991
  2240                           
  2241                           ;main.c: 735: DriveDirect(0,0);
  2242  04C5  3000               	movlw	0
  2243  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  2244  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  2245  04C8  00A1               	movwf	DriveDirect@VelocityRight
  2246  04C9  00A2               	movwf	DriveDirect@VelocityRight+1
  2247  04CA  3000               	movlw	0
  2248  04CB  00A3               	movwf	DriveDirect@VelocityLeft
  2249  04CC  00A4               	movwf	DriveDirect@VelocityLeft+1
  2250  04CD  120A  158A  20BD  120A  118A  	fcall	_DriveDirect
  2251                           
  2252                           ;main.c: 736: _delay((unsigned long)((2000)*(20000000/4000.0)));
  2253  04D2  3033               	movlw	51
  2254  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  2255  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  2256  04D5  00CC               	movwf	??_main+2
  2257  04D6  30BC               	movlw	188
  2258  04D7  00CB               	movwf	??_main+1
  2259  04D8  3010               	movlw	16
  2260  04D9  00CA               	movwf	??_main
  2261  04DA                     u3857:	
  2262  04DA  0BCA               	decfsz	??_main,f
  2263  04DB  2CDA               	goto	u3857
  2264  04DC  0BCB               	decfsz	??_main+1,f
  2265  04DD  2CDA               	goto	u3857
  2266  04DE  0BCC               	decfsz	??_main+2,f
  2267  04DF  2CDA               	goto	u3857
  2268                           
  2269                           ;main.c: 737: PathTo(1,0);
  2270  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  2271  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  2272  04E2  01A5               	clrf	PathTo@y_target
  2273  04E3  3001               	movlw	1
  2274  04E4  120A  158A  249C  120A  118A  	fcall	_PathTo
  2275                           
  2276                           ;main.c: 738: TravelPath();
  2277  04E9  120A  118A  25F1  120A  118A  	fcall	_TravelPath
  2278  04EE                     l4991:	
  2279                           
  2280                           ;main.c: 739: }
  2281                           ;main.c: 742: PathTo(4,3);
  2282  04EE  3003               	movlw	3
  2283  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  2284  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  2285  04F1  00CA               	movwf	??_main
  2286  04F2  084A               	movf	??_main,w
  2287  04F3  00A5               	movwf	PathTo@y_target
  2288  04F4  3004               	movlw	4
  2289  04F5  120A  158A  249C  120A  118A  	fcall	_PathTo
  2290                           
  2291                           ;main.c: 743: TravelPath();
  2292  04FA  120A  118A  25F1  120A  118A  	fcall	_TravelPath
  2293                           
  2294                           ;main.c: 744: if (IR_Wall == 1)
  2295  04FF  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2296  0500  2D06               	goto	l4999
  2297                           
  2298                           ;main.c: 745: re_route();
  2299  0501  120A  118A  2706  120A  118A  	fcall	_re_route
  2300  0506                     l4999:	
  2301                           
  2302                           ;main.c: 746: if (targets_found == 1){
  2303  0506  1C71               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2304  0507  2D31               	goto	l5009
  2305                           
  2306                           ;main.c: 747: DriveDirect(0,0);
  2307  0508  3000               	movlw	0
  2308  0509  1283               	bcf	3,5	;RP0=0, select bank0
  2309  050A  1303               	bcf	3,6	;RP1=0, select bank0
  2310  050B  00A1               	movwf	DriveDirect@VelocityRight
  2311  050C  00A2               	movwf	DriveDirect@VelocityRight+1
  2312  050D  3000               	movlw	0
  2313  050E  00A3               	movwf	DriveDirect@VelocityLeft
  2314  050F  00A4               	movwf	DriveDirect@VelocityLeft+1
  2315  0510  120A  158A  20BD  120A  118A  	fcall	_DriveDirect
  2316                           
  2317                           ;main.c: 748: _delay((unsigned long)((2000)*(20000000/4000.0)));
  2318  0515  3033               	movlw	51
  2319  0516  1283               	bcf	3,5	;RP0=0, select bank0
  2320  0517  1303               	bcf	3,6	;RP1=0, select bank0
  2321  0518  00CC               	movwf	??_main+2
  2322  0519  30BC               	movlw	188
  2323  051A  00CB               	movwf	??_main+1
  2324  051B  3010               	movlw	16
  2325  051C  00CA               	movwf	??_main
  2326  051D                     u3867:	
  2327  051D  0BCA               	decfsz	??_main,f
  2328  051E  2D1D               	goto	u3867
  2329  051F  0BCB               	decfsz	??_main+1,f
  2330  0520  2D1D               	goto	u3867
  2331  0521  0BCC               	decfsz	??_main+2,f
  2332  0522  2D1D               	goto	u3867
  2333                           
  2334                           ;main.c: 749: PathTo(1,0);
  2335  0523  1283               	bcf	3,5	;RP0=0, select bank0
  2336  0524  1303               	bcf	3,6	;RP1=0, select bank0
  2337  0525  01A5               	clrf	PathTo@y_target
  2338  0526  3001               	movlw	1
  2339  0527  120A  158A  249C  120A  118A  	fcall	_PathTo
  2340                           
  2341                           ;main.c: 750: TravelPath();
  2342  052C  120A  118A  25F1  120A  118A  	fcall	_TravelPath
  2343  0531                     l5009:	
  2344                           
  2345                           ;main.c: 751: }
  2346                           ;main.c: 754: PathTo(3,2);
  2347  0531  3002               	movlw	2
  2348  0532  1283               	bcf	3,5	;RP0=0, select bank0
  2349  0533  1303               	bcf	3,6	;RP1=0, select bank0
  2350  0534  00CA               	movwf	??_main
  2351  0535  084A               	movf	??_main,w
  2352  0536  00A5               	movwf	PathTo@y_target
  2353  0537  3003               	movlw	3
  2354  0538  120A  158A  249C  120A  118A  	fcall	_PathTo
  2355                           
  2356                           ;main.c: 755: TravelPath();
  2357  053D  120A  118A  25F1  120A  118A  	fcall	_TravelPath
  2358                           
  2359                           ;main.c: 756: if (IR_Wall == 1)
  2360  0542  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2361  0543  2D51               	goto	l5017
  2362                           
  2363                           ;main.c: 757: DriveDirect(0,0);
  2364  0544  3000               	movlw	0
  2365  0545  1283               	bcf	3,5	;RP0=0, select bank0
  2366  0546  1303               	bcf	3,6	;RP1=0, select bank0
  2367  0547  00A1               	movwf	DriveDirect@VelocityRight
  2368  0548  00A2               	movwf	DriveDirect@VelocityRight+1
  2369  0549  3000               	movlw	0
  2370  054A  00A3               	movwf	DriveDirect@VelocityLeft
  2371  054B  00A4               	movwf	DriveDirect@VelocityLeft+1
  2372  054C  120A  158A  20BD  120A  118A  	fcall	_DriveDirect
  2373  0551                     l5017:	
  2374                           
  2375                           ;main.c: 758: _delay((unsigned long)((2000)*(20000000/4000.0)));
  2376  0551  3033               	movlw	51
  2377  0552  1283               	bcf	3,5	;RP0=0, select bank0
  2378  0553  1303               	bcf	3,6	;RP1=0, select bank0
  2379  0554  00CC               	movwf	??_main+2
  2380  0555  30BC               	movlw	188
  2381  0556  00CB               	movwf	??_main+1
  2382  0557  3010               	movlw	16
  2383  0558  00CA               	movwf	??_main
  2384  0559                     u3877:	
  2385  0559  0BCA               	decfsz	??_main,f
  2386  055A  2D59               	goto	u3877
  2387  055B  0BCB               	decfsz	??_main+1,f
  2388  055C  2D59               	goto	u3877
  2389  055D  0BCC               	decfsz	??_main+2,f
  2390  055E  2D59               	goto	u3877
  2391                           
  2392                           ;main.c: 761: re_route();
  2393  055F  120A  118A  2706  120A  118A  	fcall	_re_route
  2394                           
  2395                           ;main.c: 762: if (targets_found == 1){
  2396  0564  1C71               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2397  0565  2D8F               	goto	l5031
  2398                           
  2399                           ;main.c: 763: DriveDirect(0,0);
  2400  0566  3000               	movlw	0
  2401  0567  1283               	bcf	3,5	;RP0=0, select bank0
  2402  0568  1303               	bcf	3,6	;RP1=0, select bank0
  2403  0569  00A1               	movwf	DriveDirect@VelocityRight
  2404  056A  00A2               	movwf	DriveDirect@VelocityRight+1
  2405  056B  3000               	movlw	0
  2406  056C  00A3               	movwf	DriveDirect@VelocityLeft
  2407  056D  00A4               	movwf	DriveDirect@VelocityLeft+1
  2408  056E  120A  158A  20BD  120A  118A  	fcall	_DriveDirect
  2409                           
  2410                           ;main.c: 764: _delay((unsigned long)((2000)*(20000000/4000.0)));
  2411  0573  3033               	movlw	51
  2412  0574  1283               	bcf	3,5	;RP0=0, select bank0
  2413  0575  1303               	bcf	3,6	;RP1=0, select bank0
  2414  0576  00CC               	movwf	??_main+2
  2415  0577  30BC               	movlw	188
  2416  0578  00CB               	movwf	??_main+1
  2417  0579  3010               	movlw	16
  2418  057A  00CA               	movwf	??_main
  2419  057B                     u3887:	
  2420  057B  0BCA               	decfsz	??_main,f
  2421  057C  2D7B               	goto	u3887
  2422  057D  0BCB               	decfsz	??_main+1,f
  2423  057E  2D7B               	goto	u3887
  2424  057F  0BCC               	decfsz	??_main+2,f
  2425  0580  2D7B               	goto	u3887
  2426                           
  2427                           ;main.c: 765: PathTo(1,0);
  2428  0581  1283               	bcf	3,5	;RP0=0, select bank0
  2429  0582  1303               	bcf	3,6	;RP1=0, select bank0
  2430  0583  01A5               	clrf	PathTo@y_target
  2431  0584  3001               	movlw	1
  2432  0585  120A  158A  249C  120A  118A  	fcall	_PathTo
  2433                           
  2434                           ;main.c: 766: TravelPath();
  2435  058A  120A  118A  25F1  120A  118A  	fcall	_TravelPath
  2436  058F                     l5031:	
  2437                           
  2438                           ;main.c: 767: }
  2439                           ;main.c: 782: PathTo(0,3);
  2440  058F  3003               	movlw	3
  2441  0590  1283               	bcf	3,5	;RP0=0, select bank0
  2442  0591  1303               	bcf	3,6	;RP1=0, select bank0
  2443  0592  00CA               	movwf	??_main
  2444  0593  084A               	movf	??_main,w
  2445  0594  00A5               	movwf	PathTo@y_target
  2446  0595  3000               	movlw	0
  2447  0596  120A  158A  249C  120A  118A  	fcall	_PathTo
  2448                           
  2449                           ;main.c: 783: TravelPath();
  2450  059B  120A  118A  25F1  120A  118A  	fcall	_TravelPath
  2451                           
  2452                           ;main.c: 784: if (IR_Wall == 1)
  2453  05A0  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  2454  05A1  2DAF               	goto	l5039
  2455                           
  2456                           ;main.c: 785: DriveDirect(0,0);
  2457  05A2  3000               	movlw	0
  2458  05A3  1283               	bcf	3,5	;RP0=0, select bank0
  2459  05A4  1303               	bcf	3,6	;RP1=0, select bank0
  2460  05A5  00A1               	movwf	DriveDirect@VelocityRight
  2461  05A6  00A2               	movwf	DriveDirect@VelocityRight+1
  2462  05A7  3000               	movlw	0
  2463  05A8  00A3               	movwf	DriveDirect@VelocityLeft
  2464  05A9  00A4               	movwf	DriveDirect@VelocityLeft+1
  2465  05AA  120A  158A  20BD  120A  118A  	fcall	_DriveDirect
  2466  05AF                     l5039:	
  2467                           
  2468                           ;main.c: 786: _delay((unsigned long)((2000)*(20000000/4000.0)));
  2469  05AF  3033               	movlw	51
  2470  05B0  1283               	bcf	3,5	;RP0=0, select bank0
  2471  05B1  1303               	bcf	3,6	;RP1=0, select bank0
  2472  05B2  00CC               	movwf	??_main+2
  2473  05B3  30BC               	movlw	188
  2474  05B4  00CB               	movwf	??_main+1
  2475  05B5  3010               	movlw	16
  2476  05B6  00CA               	movwf	??_main
  2477  05B7                     u3897:	
  2478  05B7  0BCA               	decfsz	??_main,f
  2479  05B8  2DB7               	goto	u3897
  2480  05B9  0BCB               	decfsz	??_main+1,f
  2481  05BA  2DB7               	goto	u3897
  2482  05BB  0BCC               	decfsz	??_main+2,f
  2483  05BC  2DB7               	goto	u3897
  2484                           
  2485                           ;main.c: 789: re_route();
  2486  05BD  120A  118A  2706  120A  118A  	fcall	_re_route
  2487                           
  2488                           ;main.c: 790: if (targets_found == 1){
  2489  05C2  1C71               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  2490  05C3  2DED               	goto	l5053
  2491                           
  2492                           ;main.c: 791: DriveDirect(0,0);
  2493  05C4  3000               	movlw	0
  2494  05C5  1283               	bcf	3,5	;RP0=0, select bank0
  2495  05C6  1303               	bcf	3,6	;RP1=0, select bank0
  2496  05C7  00A1               	movwf	DriveDirect@VelocityRight
  2497  05C8  00A2               	movwf	DriveDirect@VelocityRight+1
  2498  05C9  3000               	movlw	0
  2499  05CA  00A3               	movwf	DriveDirect@VelocityLeft
  2500  05CB  00A4               	movwf	DriveDirect@VelocityLeft+1
  2501  05CC  120A  158A  20BD  120A  118A  	fcall	_DriveDirect
  2502                           
  2503                           ;main.c: 792: _delay((unsigned long)((2000)*(20000000/4000.0)));
  2504  05D1  3033               	movlw	51
  2505  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  2506  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  2507  05D4  00CC               	movwf	??_main+2
  2508  05D5  30BC               	movlw	188
  2509  05D6  00CB               	movwf	??_main+1
  2510  05D7  3010               	movlw	16
  2511  05D8  00CA               	movwf	??_main
  2512  05D9                     u3907:	
  2513  05D9  0BCA               	decfsz	??_main,f
  2514  05DA  2DD9               	goto	u3907
  2515  05DB  0BCB               	decfsz	??_main+1,f
  2516  05DC  2DD9               	goto	u3907
  2517  05DD  0BCC               	decfsz	??_main+2,f
  2518  05DE  2DD9               	goto	u3907
  2519                           
  2520                           ;main.c: 793: PathTo(1,0);
  2521  05DF  1283               	bcf	3,5	;RP0=0, select bank0
  2522  05E0  1303               	bcf	3,6	;RP1=0, select bank0
  2523  05E1  01A5               	clrf	PathTo@y_target
  2524  05E2  3001               	movlw	1
  2525  05E3  120A  158A  249C  120A  118A  	fcall	_PathTo
  2526                           
  2527                           ;main.c: 794: TravelPath();
  2528  05E8  120A  118A  25F1  120A  118A  	fcall	_TravelPath
  2529  05ED                     l5053:	
  2530                           
  2531                           ;main.c: 795: }
  2532                           ;main.c: 798: PB8Counter = 0;
  2533  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  2534  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  2535  05EF  01D6               	clrf	_PB8Counter
  2536  05F0  2BE9               	goto	l4929
  2537  05F1                     __end_of_main:	
  2538                           
  2539                           	psect	text1
  2540  0800                     __ptext1:	
  2541 ;; *************** function _spi_transfer *****************
  2542 ;; Defined at:
  2543 ;;		line 22 in file "SPI.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;  data            1    wreg     unsigned char 
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;  data            1    2[BANK0 ] unsigned char 
  2548 ;;  temp            1    1[BANK0 ] unsigned char 
  2549 ;; Return value:  Size  Location     Type
  2550 ;;                  1    wreg      unsigned char 
  2551 ;; Registers used:
  2552 ;;		wreg, status,2
  2553 ;; Tracked objects:
  2554 ;;		On entry : 0/0
  2555 ;;		On exit  : 0/0
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2558 ;;      Params:         0       0       0       0       0
  2559 ;;      Locals:         0       2       0       0       0
  2560 ;;      Temps:          0       1       0       0       0
  2561 ;;      Totals:         0       3       0       0       0
  2562 ;;Total ram usage:        3 bytes
  2563 ;; Hardware stack levels used:    1
  2564 ;; Hardware stack levels required when called:    1
  2565 ;; This function calls:
  2566 ;;		Nothing
  2567 ;; This function is called by:
  2568 ;;		_main
  2569 ;;		_stepCCW
  2570 ;;		_stepCW
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           
  2575                           ;psect for function _spi_transfer
  2576  0800                     _spi_transfer:	
  2577                           
  2578                           ;incstack = 0
  2579                           ; Regs used in _spi_transfer: [wreg+status,2]
  2580                           ;spi_transfer@data stored from wreg
  2581  0800  1283               	bcf	3,5	;RP0=0, select bank0
  2582  0801  1303               	bcf	3,6	;RP1=0, select bank0
  2583  0802  00A2               	movwf	spi_transfer@data
  2584                           
  2585                           ;SPI.c: 23: unsigned char temp = 0;
  2586  0803  01A1               	clrf	spi_transfer@temp
  2587                           
  2588                           ;SPI.c: 25: SSPIF = 0;
  2589  0804  118C               	bcf	12,3	;volatile
  2590                           
  2591                           ;SPI.c: 26: SSPBUF = data;
  2592  0805  0822               	movf	spi_transfer@data,w
  2593  0806  0093               	movwf	19	;volatile
  2594  0807                     l1022:	
  2595                           ;SPI.c: 28: while (SSPIF == 0);
  2596                           
  2597  0807  1D8C               	btfss	12,3	;volatile
  2598  0808  2807               	goto	l1022
  2599                           
  2600                           ;SPI.c: 29: temp = SSPBUF;
  2601  0809  0813               	movf	19,w	;volatile
  2602  080A  00A0               	movwf	??_spi_transfer
  2603  080B  0820               	movf	??_spi_transfer,w
  2604  080C  00A1               	movwf	spi_transfer@temp
  2605                           
  2606                           ;SPI.c: 30: SSPIF = 0;
  2607  080D  118C               	bcf	12,3	;volatile
  2608  080E  0008               	return
  2609  080F                     __end_of_spi_transfer:	
  2610                           ;SPI.c: 32: return temp;
  2611                           ;	Return value of _spi_transfer is never used
  2612                           
  2613                           
  2614                           	psect	text2
  2615  16B2                     __ptext2:	
  2616 ;; *************** function _setupSPI *****************
  2617 ;; Defined at:
  2618 ;;		line 4 in file "SPI.c"
  2619 ;; Parameters:    Size  Location     Type
  2620 ;;		None
  2621 ;; Auto vars:     Size  Location     Type
  2622 ;;		None
  2623 ;; Return value:  Size  Location     Type
  2624 ;;                  1    wreg      void 
  2625 ;; Registers used:
  2626 ;;		wreg
  2627 ;; Tracked objects:
  2628 ;;		On entry : 0/0
  2629 ;;		On exit  : 0/0
  2630 ;;		Unchanged: 0/0
  2631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2632 ;;      Params:         0       0       0       0       0
  2633 ;;      Locals:         0       0       0       0       0
  2634 ;;      Temps:          0       0       0       0       0
  2635 ;;      Totals:         0       0       0       0       0
  2636 ;;Total ram usage:        0 bytes
  2637 ;; Hardware stack levels used:    1
  2638 ;; Hardware stack levels required when called:    1
  2639 ;; This function calls:
  2640 ;;		Nothing
  2641 ;; This function is called by:
  2642 ;;		_main
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           
  2647                           ;psect for function _setupSPI
  2648  16B2                     _setupSPI:	
  2649                           
  2650                           ;SPI.c: 6: TRISB = 0b00000011;
  2651                           
  2652                           ;incstack = 0
  2653                           ; Regs used in _setupSPI: [wreg]
  2654  16B2  3003               	movlw	3
  2655  16B3  1683               	bsf	3,5	;RP0=1, select bank1
  2656  16B4  1303               	bcf	3,6	;RP1=0, select bank1
  2657  16B5  0086               	movwf	6	;volatile
  2658                           
  2659                           ;SPI.c: 8: SSPSTAT = 0b01000000;
  2660  16B6  3040               	movlw	64
  2661  16B7  0094               	movwf	20	;volatile
  2662                           
  2663                           ;SPI.c: 9: SSPCON = 0b00100000;
  2664  16B8  3020               	movlw	32
  2665  16B9  1283               	bcf	3,5	;RP0=0, select bank0
  2666  16BA  1303               	bcf	3,6	;RP1=0, select bank0
  2667  16BB  0094               	movwf	20	;volatile
  2668                           
  2669                           ;SPI.c: 10: TRISC = 0b10000000;
  2670  16BC  3080               	movlw	128
  2671  16BD  1683               	bsf	3,5	;RP0=1, select bank1
  2672  16BE  1303               	bcf	3,6	;RP1=0, select bank1
  2673  16BF  0087               	movwf	7	;volatile
  2674                           
  2675                           ;SPI.c: 11: PORTC = 0b00000011;
  2676  16C0  3003               	movlw	3
  2677  16C1  1283               	bcf	3,5	;RP0=0, select bank0
  2678  16C2  1303               	bcf	3,6	;RP1=0, select bank0
  2679  16C3  0087               	movwf	7	;volatile
  2680                           
  2681                           ;SPI.c: 14: OPTION_REG = 0b00000100;
  2682  16C4  3004               	movlw	4
  2683  16C5  1683               	bsf	3,5	;RP0=1, select bank1
  2684  16C6  1303               	bcf	3,6	;RP1=0, select bank1
  2685  16C7  0081               	movwf	1	;volatile
  2686                           
  2687                           ;SPI.c: 16: TMR0IE = 1;
  2688  16C8  168B               	bsf	11,5	;volatile
  2689                           
  2690                           ;SPI.c: 18: (GIE = 1);
  2691  16C9  178B               	bsf	11,7	;volatile
  2692  16CA  0008               	return
  2693  16CB                     __end_of_setupSPI:	
  2694                           
  2695                           	psect	text3
  2696  080F                     __ptext3:	
  2697 ;; *************** function _setupLCD *****************
  2698 ;; Defined at:
  2699 ;;		line 86 in file "LCD.c"
  2700 ;; Parameters:    Size  Location     Type
  2701 ;;		None
  2702 ;; Auto vars:     Size  Location     Type
  2703 ;;		None
  2704 ;; Return value:  Size  Location     Type
  2705 ;;                  1    wreg      void 
  2706 ;; Registers used:
  2707 ;;		wreg, status,2, status,0, pclath, cstack
  2708 ;; Tracked objects:
  2709 ;;		On entry : 0/0
  2710 ;;		On exit  : 0/0
  2711 ;;		Unchanged: 0/0
  2712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2713 ;;      Params:         0       0       0       0       0
  2714 ;;      Locals:         0       0       0       0       0
  2715 ;;      Temps:          0       0       0       0       0
  2716 ;;      Totals:         0       0       0       0       0
  2717 ;;Total ram usage:        0 bytes
  2718 ;; Hardware stack levels used:    1
  2719 ;; Hardware stack levels required when called:    2
  2720 ;; This function calls:
  2721 ;;		_lcdWriteControl
  2722 ;; This function is called by:
  2723 ;;		_main
  2724 ;; This function uses a non-reentrant model
  2725 ;;
  2726                           
  2727                           
  2728                           ;psect for function _setupLCD
  2729  080F                     _setupLCD:	
  2730                           
  2731                           ;LCD.c: 88: ADCON1 = 0b00000010;
  2732                           
  2733                           ;incstack = 0
  2734                           ; Regs used in _setupLCD: [wreg+status,2+status,0+pclath+cstack]
  2735  080F  3002               	movlw	2
  2736  0810  1683               	bsf	3,5	;RP0=1, select bank1
  2737  0811  1303               	bcf	3,6	;RP1=0, select bank1
  2738  0812  009F               	movwf	31	;volatile
  2739                           
  2740                           ;LCD.c: 90: PORTD = 0;
  2741  0813  1283               	bcf	3,5	;RP0=0, select bank0
  2742  0814  1303               	bcf	3,6	;RP1=0, select bank0
  2743  0815  0188               	clrf	8	;volatile
  2744                           
  2745                           ;LCD.c: 91: PORTE = 0;
  2746  0816  0189               	clrf	9	;volatile
  2747                           
  2748                           ;LCD.c: 93: TRISD = 0b00000000;
  2749  0817  1683               	bsf	3,5	;RP0=1, select bank1
  2750  0818  1303               	bcf	3,6	;RP1=0, select bank1
  2751  0819  0188               	clrf	8	;volatile
  2752                           
  2753                           ;LCD.c: 94: TRISE = 0b00000000;
  2754  081A  0189               	clrf	9	;volatile
  2755                           
  2756                           ;LCD.c: 97: lcdWriteControl(0b00000001);
  2757  081B  3001               	movlw	1
  2758  081C  160A  118A  265F  120A  158A  	fcall	_lcdWriteControl
  2759                           
  2760                           ;LCD.c: 98: lcdWriteControl(0b00111000);
  2761  0821  3038               	movlw	56
  2762  0822  160A  118A  265F  120A  158A  	fcall	_lcdWriteControl
  2763                           
  2764                           ;LCD.c: 99: lcdWriteControl(0b00001100);
  2765  0827  300C               	movlw	12
  2766  0828  160A  118A  265F  120A  158A  	fcall	_lcdWriteControl
  2767                           
  2768                           ;LCD.c: 100: lcdWriteControl(0b00000110);
  2769  082D  3006               	movlw	6
  2770  082E  160A  118A  265F  120A  158A  	fcall	_lcdWriteControl
  2771                           
  2772                           ;LCD.c: 101: lcdWriteControl(0b00000010);
  2773  0833  3002               	movlw	2
  2774  0834  160A  118A  265F   	fcall	_lcdWriteControl
  2775  0837  0008               	return
  2776  0838                     __end_of_setupLCD:	
  2777                           
  2778                           	psect	text4
  2779  169C                     __ptext4:	
  2780 ;; *************** function _setupADC *****************
  2781 ;; Defined at:
  2782 ;;		line 5 in file "ADC.c"
  2783 ;; Parameters:    Size  Location     Type
  2784 ;;		None
  2785 ;; Auto vars:     Size  Location     Type
  2786 ;;		None
  2787 ;; Return value:  Size  Location     Type
  2788 ;;                  1    wreg      void 
  2789 ;; Registers used:
  2790 ;;		wreg, status,2
  2791 ;; Tracked objects:
  2792 ;;		On entry : 0/0
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2796 ;;      Params:         0       0       0       0       0
  2797 ;;      Locals:         0       0       0       0       0
  2798 ;;      Temps:          0       1       0       0       0
  2799 ;;      Totals:         0       1       0       0       0
  2800 ;;Total ram usage:        1 bytes
  2801 ;; Hardware stack levels used:    1
  2802 ;; Hardware stack levels required when called:    1
  2803 ;; This function calls:
  2804 ;;		Nothing
  2805 ;; This function is called by:
  2806 ;;		_main
  2807 ;; This function uses a non-reentrant model
  2808 ;;
  2809                           
  2810                           
  2811                           ;psect for function _setupADC
  2812  169C                     _setupADC:	
  2813                           
  2814                           ;ADC.c: 6: PORTA = 0;
  2815                           
  2816                           ;incstack = 0
  2817                           ; Regs used in _setupADC: [wreg+status,2]
  2818  169C  1283               	bcf	3,5	;RP0=0, select bank0
  2819  169D  1303               	bcf	3,6	;RP1=0, select bank0
  2820  169E  0185               	clrf	5	;volatile
  2821                           
  2822                           ;ADC.c: 7: TRISA = 0b11111111;
  2823  169F  30FF               	movlw	255
  2824  16A0  1683               	bsf	3,5	;RP0=1, select bank1
  2825  16A1  1303               	bcf	3,6	;RP1=0, select bank1
  2826  16A2  0085               	movwf	5	;volatile
  2827                           
  2828                           ;ADC.c: 10: ADCON0 = 0b10001001;
  2829  16A3  3089               	movlw	137
  2830  16A4  1283               	bcf	3,5	;RP0=0, select bank0
  2831  16A5  1303               	bcf	3,6	;RP1=0, select bank0
  2832  16A6  009F               	movwf	31	;volatile
  2833                           
  2834                           ;ADC.c: 11: ADCON1 = 0b00000010;
  2835  16A7  3002               	movlw	2
  2836  16A8  1683               	bsf	3,5	;RP0=1, select bank1
  2837  16A9  1303               	bcf	3,6	;RP1=0, select bank1
  2838  16AA  009F               	movwf	31	;volatile
  2839                           
  2840                           ;ADC.c: 13: _delay((unsigned long)((50)*(20000000/4000000.0)));
  2841  16AB  3053               	movlw	83
  2842  16AC  1283               	bcf	3,5	;RP0=0, select bank0
  2843  16AD  1303               	bcf	3,6	;RP1=0, select bank0
  2844  16AE  00A0               	movwf	??_setupADC
  2845  16AF                     u3917:	
  2846  16AF  0BA0               	decfsz	??_setupADC,f
  2847  16B0  2EAF               	goto	u3917
  2848  16B1  0008               	return
  2849  16B2                     __end_of_setupADC:	
  2850                           
  2851                           	psect	text5
  2852  1619                     __ptext5:	
  2853 ;; *************** function _ser_init *****************
  2854 ;; Defined at:
  2855 ;;		line 5 in file "ser.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;		None
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;		None
  2860 ;; Return value:  Size  Location     Type
  2861 ;;                  1    wreg      void 
  2862 ;; Registers used:
  2863 ;;		wreg
  2864 ;; Tracked objects:
  2865 ;;		On entry : 0/0
  2866 ;;		On exit  : 0/0
  2867 ;;		Unchanged: 0/0
  2868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2869 ;;      Params:         0       0       0       0       0
  2870 ;;      Locals:         0       0       0       0       0
  2871 ;;      Temps:          0       0       0       0       0
  2872 ;;      Totals:         0       0       0       0       0
  2873 ;;Total ram usage:        0 bytes
  2874 ;; Hardware stack levels used:    1
  2875 ;; Hardware stack levels required when called:    1
  2876 ;; This function calls:
  2877 ;;		Nothing
  2878 ;; This function is called by:
  2879 ;;		_main
  2880 ;; This function uses a non-reentrant model
  2881 ;;
  2882                           
  2883                           
  2884                           ;psect for function _ser_init
  2885  1619                     _ser_init:	
  2886                           
  2887                           ;ser.c: 7: TXSTA = 0b00100100;
  2888                           
  2889                           ;incstack = 0
  2890                           ; Regs used in _ser_init: [wreg]
  2891  1619  3024               	movlw	36
  2892  161A  1683               	bsf	3,5	;RP0=1, select bank1
  2893  161B  1303               	bcf	3,6	;RP1=0, select bank1
  2894  161C  0098               	movwf	24	;volatile
  2895                           
  2896                           ;ser.c: 8: RCSTA = 0b10011000;
  2897  161D  3098               	movlw	152
  2898  161E  1283               	bcf	3,5	;RP0=0, select bank0
  2899  161F  1303               	bcf	3,6	;RP1=0, select bank0
  2900  1620  0098               	movwf	24	;volatile
  2901                           
  2902                           ;ser.c: 24: SPBRG = 20;
  2903  1621  3014               	movlw	20
  2904  1622  1683               	bsf	3,5	;RP0=1, select bank1
  2905  1623  1303               	bcf	3,6	;RP1=0, select bank1
  2906  1624  0099               	movwf	25	;volatile
  2907                           
  2908                           ;ser.c: 26: PEIE = 1;
  2909  1625  170B               	bsf	11,6	;volatile
  2910                           
  2911                           ;ser.c: 27: (GIE = 1);
  2912  1626  178B               	bsf	11,7	;volatile
  2913  1627  0008               	return
  2914  1628                     __end_of_ser_init:	
  2915                           
  2916                           	psect	text6
  2917  0706                     __ptext6:	
  2918 ;; *************** function _re_route *****************
  2919 ;; Defined at:
  2920 ;;		line 469 in file "main.c"
  2921 ;; Parameters:    Size  Location     Type
  2922 ;;		None
  2923 ;; Auto vars:     Size  Location     Type
  2924 ;;		None
  2925 ;; Return value:  Size  Location     Type
  2926 ;;                  1    wreg      void 
  2927 ;; Registers used:
  2928 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2929 ;; Tracked objects:
  2930 ;;		On entry : 0/0
  2931 ;;		On exit  : 0/0
  2932 ;;		Unchanged: 0/0
  2933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2934 ;;      Params:         0       0       0       0       0
  2935 ;;      Locals:         0       0       0       0       0
  2936 ;;      Temps:          0       5       0       0       0
  2937 ;;      Totals:         0       5       0       0       0
  2938 ;;Total ram usage:        5 bytes
  2939 ;; Hardware stack levels used:    1
  2940 ;; Hardware stack levels required when called:    7
  2941 ;; This function calls:
  2942 ;;		_DriveDirect
  2943 ;;		_PathTo
  2944 ;;		_TravelPath
  2945 ;;		_Turn90
  2946 ;;		___bmul
  2947 ;;		_getSensorData
  2948 ;; This function is called by:
  2949 ;;		_main
  2950 ;; This function uses a non-reentrant model
  2951 ;;
  2952                           
  2953                           
  2954                           ;psect for function _re_route
  2955  0706                     _re_route:	
  2956                           
  2957                           ;main.c: 471: routing = 1;
  2958                           
  2959                           ;incstack = 0
  2960                           ; Regs used in _re_route: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2961  0706  17F0               	bsf	_routing/(0+8),_routing& (0+7)
  2962                           
  2963                           ;main.c: 472: switch(orientation){
  2964  0707  2F73               	goto	l4581
  2965  0708                     l4571:	
  2966                           ;main.c: 473: case 0: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 4);
  2967                           
  2968  0708  3005               	movlw	5
  2969  0709  1283               	bcf	3,5	;RP0=0, select bank0
  2970  070A  1303               	bcf	3,6	;RP1=0, select bank0
  2971  070B  00C5               	movwf	??_re_route
  2972  070C  0845               	movf	??_re_route,w
  2973  070D  00A0               	movwf	___bmul@multiplicand
  2974  070E  0863               	movf	_y,w
  2975  070F  160A  118A  2639  120A  118A  	fcall	___bmul
  2976  0714  3ED6               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2977  0715  1283               	bcf	3,5	;RP0=0, select bank0
  2978  0716  1303               	bcf	3,6	;RP1=0, select bank0
  2979  0717  0769               	addwf	_x,w
  2980  0718  00C6               	movwf	??_re_route+1
  2981  0719  0846               	movf	??_re_route+1,w
  2982  071A  0084               	movwf	4
  2983  071B  1383               	bcf	3,7	;select IRP bank1
  2984  071C  0800               	movf	0,w
  2985  071D  3E04               	addlw	4
  2986  071E  2F5D               	goto	L4
  2987  071F                     l4573:	
  2988                           ;main.c: 475: case 1: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 2);
  2989                           
  2990                           ;main.c: 474: break;
  2991                           
  2992  071F  3005               	movlw	5
  2993  0720  00C5               	movwf	??_re_route
  2994  0721  0845               	movf	??_re_route,w
  2995  0722  00A0               	movwf	___bmul@multiplicand
  2996  0723  0863               	movf	_y,w
  2997  0724  160A  118A  2639  120A  118A  	fcall	___bmul
  2998  0729  3ED6               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  2999  072A  1283               	bcf	3,5	;RP0=0, select bank0
  3000  072B  1303               	bcf	3,6	;RP1=0, select bank0
  3001  072C  0769               	addwf	_x,w
  3002  072D  00C6               	movwf	??_re_route+1
  3003  072E  0846               	movf	??_re_route+1,w
  3004  072F  0084               	movwf	4
  3005  0730  1383               	bcf	3,7	;select IRP bank1
  3006  0731  0800               	movf	0,w
  3007  0732  3E02               	addlw	2
  3008  0733  2F5D               	goto	L4
  3009  0734                     l4575:	
  3010                           ;main.c: 477: case 2: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 1);
  3011                           
  3012                           ;main.c: 476: break;
  3013                           
  3014  0734  3005               	movlw	5
  3015  0735  00C5               	movwf	??_re_route
  3016  0736  0845               	movf	??_re_route,w
  3017  0737  00A0               	movwf	___bmul@multiplicand
  3018  0738  0863               	movf	_y,w
  3019  0739  160A  118A  2639  120A  118A  	fcall	___bmul
  3020  073E  3ED6               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  3021  073F  1283               	bcf	3,5	;RP0=0, select bank0
  3022  0740  1303               	bcf	3,6	;RP1=0, select bank0
  3023  0741  0769               	addwf	_x,w
  3024  0742  00C6               	movwf	??_re_route+1
  3025  0743  0846               	movf	??_re_route+1,w
  3026  0744  0084               	movwf	4
  3027  0745  1383               	bcf	3,7	;select IRP bank1
  3028  0746  0800               	movf	0,w
  3029  0747  3E01               	addlw	1
  3030  0748  2F5D               	goto	L4
  3031  0749                     l4577:	
  3032                           ;main.c: 479: case 3: (mazeGridDefault[y][x]) = ((mazeGridDefault[y][x]) + 8);
  3033                           
  3034                           ;main.c: 478: break;
  3035                           
  3036  0749  3005               	movlw	5
  3037  074A  00C5               	movwf	??_re_route
  3038  074B  0845               	movf	??_re_route,w
  3039  074C  00A0               	movwf	___bmul@multiplicand
  3040  074D  0863               	movf	_y,w
  3041  074E  160A  118A  2639  120A  118A  	fcall	___bmul
  3042  0753  3ED6               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  3043  0754  1283               	bcf	3,5	;RP0=0, select bank0
  3044  0755  1303               	bcf	3,6	;RP1=0, select bank0
  3045  0756  0769               	addwf	_x,w
  3046  0757  00C6               	movwf	??_re_route+1
  3047  0758  0846               	movf	??_re_route+1,w
  3048  0759  0084               	movwf	4
  3049  075A  1383               	bcf	3,7	;select IRP bank1
  3050  075B  0800               	movf	0,w
  3051  075C  3E08               	addlw	8
  3052  075D                     L4:	
  3053  075D  00C7               	movwf	??_re_route+2
  3054  075E  3005               	movlw	5
  3055  075F  00C8               	movwf	??_re_route+3
  3056  0760  0848               	movf	??_re_route+3,w
  3057  0761  00A0               	movwf	___bmul@multiplicand
  3058  0762  0863               	movf	_y,w
  3059  0763  160A  118A  2639  120A  118A  	fcall	___bmul
  3060  0768  3ED6               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  3061  0769  1283               	bcf	3,5	;RP0=0, select bank0
  3062  076A  1303               	bcf	3,6	;RP1=0, select bank0
  3063  076B  0769               	addwf	_x,w
  3064  076C  00C9               	movwf	??_re_route+4
  3065  076D  0849               	movf	??_re_route+4,w
  3066  076E  0084               	movwf	4
  3067  076F  0847               	movf	??_re_route+2,w
  3068  0770  1383               	bcf	3,7	;select IRP bank1
  3069  0771  0080               	movwf	0
  3070                           
  3071                           ;main.c: 481: }
  3072                           
  3073                           ;main.c: 480: break;
  3074  0772  2F83               	goto	l4583
  3075  0773                     l4581:	
  3076  0773  1283               	bcf	3,5	;RP0=0, select bank0
  3077  0774  1303               	bcf	3,6	;RP1=0, select bank0
  3078  0775  0867               	movf	_orientation,w
  3079                           
  3080                           ; Switch size 1, requested type "space"
  3081                           ; Number of cases is 4, Range of values is 0 to 3
  3082                           ; switch strategies available:
  3083                           ; Name         Instructions Cycles
  3084                           ; simple_byte           13     7 (average)
  3085                           ; direct_byte           20     8 (fixed)
  3086                           ; jumptable            260     6 (fixed)
  3087                           ;	Chosen strategy is simple_byte
  3088  0776  3A00               	xorlw	0	; case 0
  3089  0777  1903               	skipnz
  3090  0778  2F08               	goto	l4571
  3091  0779  3A01               	xorlw	1	; case 1
  3092  077A  1903               	skipnz
  3093  077B  2F1F               	goto	l4573
  3094  077C  3A03               	xorlw	3	; case 2
  3095  077D  1903               	skipnz
  3096  077E  2F34               	goto	l4575
  3097  077F  3A01               	xorlw	1	; case 3
  3098  0780  1903               	skipnz
  3099  0781  2F49               	goto	l4577
  3100  0782  2F83               	goto	l4583
  3101  0783                     l4583:	
  3102                           
  3103                           ;main.c: 483: Turn90(0);
  3104  0783  3000               	movlw	0
  3105  0784  120A  158A  21E5  120A  118A  	fcall	_Turn90
  3106                           
  3107                           ;main.c: 484: Turn90(0);
  3108  0789  3000               	movlw	0
  3109  078A  120A  158A  21E5  120A  118A  	fcall	_Turn90
  3110                           
  3111                           ;main.c: 485: distance = 0;
  3112  078F  1283               	bcf	3,5	;RP0=0, select bank0
  3113  0790  1303               	bcf	3,6	;RP1=0, select bank0
  3114  0791  01D1               	clrf	_distance
  3115  0792  01D2               	clrf	_distance+1
  3116                           
  3117                           ;main.c: 486: DriveDirect(250,250);
  3118  0793  30FA               	movlw	250
  3119  0794  00A1               	movwf	DriveDirect@VelocityRight
  3120  0795  3000               	movlw	0
  3121  0796  00A2               	movwf	DriveDirect@VelocityRight+1
  3122  0797  30FA               	movlw	250
  3123  0798  00A3               	movwf	DriveDirect@VelocityLeft
  3124  0799  3000               	movlw	0
  3125  079A  00A4               	movwf	DriveDirect@VelocityLeft+1
  3126  079B  120A  158A  20BD  120A  118A  	fcall	_DriveDirect
  3127  07A0                     l4591:	
  3128                           ;main.c: 487: while (distance < 500){
  3129                           
  3130  07A0  1283               	bcf	3,5	;RP0=0, select bank0
  3131  07A1  1303               	bcf	3,6	;RP1=0, select bank0
  3132  07A2  0852               	movf	_distance+1,w
  3133  07A3  3A80               	xorlw	128
  3134  07A4  00FF               	movwf	127
  3135  07A5  3081               	movlw	129
  3136  07A6  027F               	subwf	127,w
  3137  07A7  1D03               	skipz
  3138  07A8  2FAB               	goto	u3575
  3139  07A9  30F4               	movlw	244
  3140  07AA  0251               	subwf	_distance,w
  3141  07AB                     u3575:	
  3142  07AB  1803               	btfsc	3,0
  3143  07AC  2FC4               	goto	l4593
  3144                           
  3145                           ;main.c: 488: distance = distance + getSensorData(19,2);
  3146  07AD  3002               	movlw	2
  3147  07AE  1283               	bcf	3,5	;RP0=0, select bank0
  3148  07AF  1303               	bcf	3,6	;RP1=0, select bank0
  3149  07B0  00C5               	movwf	??_re_route
  3150  07B1  0845               	movf	??_re_route,w
  3151  07B2  00A2               	movwf	getSensorData@bytes
  3152  07B3  3013               	movlw	19
  3153  07B4  160A  118A  2784  120A  118A  	fcall	_getSensorData
  3154  07B9  1283               	bcf	3,5	;RP0=0, select bank0
  3155  07BA  1303               	bcf	3,6	;RP1=0, select bank0
  3156  07BB  0851               	movf	_distance,w
  3157  07BC  0722               	addwf	?_getSensorData,w
  3158  07BD  00D1               	movwf	_distance
  3159  07BE  0852               	movf	_distance+1,w
  3160  07BF  1803               	skipnc
  3161  07C0  0A52               	incf	_distance+1,w
  3162  07C1  0723               	addwf	?_getSensorData+1,w
  3163  07C2  00D2               	movwf	_distance+1
  3164  07C3  2FA0               	goto	l4591
  3165  07C4                     l4593:	
  3166                           
  3167                           ;main.c: 489: }
  3168                           ;main.c: 490: DriveDirect(0,0);
  3169  07C4  3000               	movlw	0
  3170  07C5  1283               	bcf	3,5	;RP0=0, select bank0
  3171  07C6  1303               	bcf	3,6	;RP1=0, select bank0
  3172  07C7  00A1               	movwf	DriveDirect@VelocityRight
  3173  07C8  00A2               	movwf	DriveDirect@VelocityRight+1
  3174  07C9  3000               	movlw	0
  3175  07CA  00A3               	movwf	DriveDirect@VelocityLeft
  3176  07CB  00A4               	movwf	DriveDirect@VelocityLeft+1
  3177  07CC  120A  158A  20BD  120A  118A  	fcall	_DriveDirect
  3178                           
  3179                           ;main.c: 491: IR_Wall = 0;
  3180  07D1  1070               	bcf	_IR_Wall/(0+8),_IR_Wall& (0+7)
  3181                           
  3182                           ;main.c: 493: _delay((unsigned long)((1000)*(20000000/4000.0)));
  3183  07D2  301A               	movlw	26
  3184  07D3  1283               	bcf	3,5	;RP0=0, select bank0
  3185  07D4  1303               	bcf	3,6	;RP1=0, select bank0
  3186  07D5  00C7               	movwf	??_re_route+2
  3187  07D6  305E               	movlw	94
  3188  07D7  00C6               	movwf	??_re_route+1
  3189  07D8  3086               	movlw	134
  3190  07D9  00C5               	movwf	??_re_route
  3191  07DA                     u3927:	
  3192  07DA  0BC5               	decfsz	??_re_route,f
  3193  07DB  2FDA               	goto	u3927
  3194  07DC  0BC6               	decfsz	??_re_route+1,f
  3195  07DD  2FDA               	goto	u3927
  3196  07DE  0BC7               	decfsz	??_re_route+2,f
  3197  07DF  2FDA               	goto	u3927
  3198  07E0  0000               	nop
  3199                           
  3200                           ;main.c: 494: PathTo(x_goto,y_goto);
  3201  07E1  1283               	bcf	3,5	;RP0=0, select bank0
  3202  07E2  1303               	bcf	3,6	;RP1=0, select bank0
  3203  07E3  0864               	movf	_y_goto,w
  3204  07E4  00C5               	movwf	??_re_route
  3205  07E5  0845               	movf	??_re_route,w
  3206  07E6  00A5               	movwf	PathTo@y_target
  3207  07E7  0860               	movf	_x_goto,w
  3208  07E8  120A  158A  249C  120A  118A  	fcall	_PathTo
  3209                           
  3210                           ;main.c: 496: if (pathCountShortest != 15)
  3211  07ED  300F               	movlw	15
  3212  07EE  1283               	bcf	3,5	;RP0=0, select bank0
  3213  07EF  1303               	bcf	3,6	;RP1=0, select bank0
  3214  07F0  0668               	xorwf	_pathCountShortest,w
  3215  07F1  1903               	btfsc	3,2
  3216  07F2  2FF6               	goto	l4605
  3217                           
  3218                           ;main.c: 497: TravelPath();
  3219  07F3  120A  118A  25F1   	fcall	_TravelPath
  3220  07F6                     l4605:	
  3221                           
  3222                           ;main.c: 499: routing = 0;
  3223  07F6  13F0               	bcf	_routing/(0+8),_routing& (0+7)
  3224  07F7  0008               	return
  3225  07F8                     __end_of_re_route:	
  3226                           
  3227                           	psect	text7
  3228  05F1                     __ptext7:	
  3229 ;; *************** function _TravelPath *****************
  3230 ;; Defined at:
  3231 ;;		line 402 in file "main.c"
  3232 ;; Parameters:    Size  Location     Type
  3233 ;;		None
  3234 ;; Auto vars:     Size  Location     Type
  3235 ;;  n               1   28[BANK0 ] unsigned char 
  3236 ;; Return value:  Size  Location     Type
  3237 ;;                  1    wreg      void 
  3238 ;; Registers used:
  3239 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3240 ;; Tracked objects:
  3241 ;;		On entry : 0/0
  3242 ;;		On exit  : 0/0
  3243 ;;		Unchanged: 0/0
  3244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3245 ;;      Params:         0       0       0       0       0
  3246 ;;      Locals:         0       1       0       0       0
  3247 ;;      Temps:          0       2       0       0       0
  3248 ;;      Totals:         0       3       0       0       0
  3249 ;;Total ram usage:        3 bytes
  3250 ;; Hardware stack levels used:    1
  3251 ;; Hardware stack levels required when called:    6
  3252 ;; This function calls:
  3253 ;;		_Drive1m
  3254 ;;		_Turn90
  3255 ;; This function is called by:
  3256 ;;		_re_route
  3257 ;;		_main
  3258 ;; This function uses a non-reentrant model
  3259 ;;
  3260                           
  3261                           
  3262                           ;psect for function _TravelPath
  3263  05F1                     _TravelPath:	
  3264                           
  3265                           ;main.c: 404: for (char n = 1; n <= (pathCountShortest); n++){
  3266                           
  3267                           ;incstack = 0
  3268                           ; Regs used in _TravelPath: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3269  05F1  1283               	bcf	3,5	;RP0=0, select bank0
  3270  05F2  1303               	bcf	3,6	;RP1=0, select bank0
  3271  05F3  01BC               	clrf	TravelPath@n
  3272  05F4  0ABC               	incf	TravelPath@n,f
  3273  05F5                     l4567:	
  3274  05F5  083C               	movf	TravelPath@n,w
  3275  05F6  0268               	subwf	_pathCountShortest,w
  3276  05F7  1C03               	btfss	3,0
  3277  05F8  0008               	return
  3278                           
  3279                           ;main.c: 406: if (pathShortest[0][n] > x){
  3280  05F9  083C               	movf	TravelPath@n,w
  3281  05FA  3EA0               	addlw	(low (_pathShortest| 0))& (0+255)
  3282  05FB  0084               	movwf	4
  3283  05FC  1383               	bcf	3,7	;select IRP bank1
  3284  05FD  0800               	movf	0,w
  3285  05FE  0269               	subwf	_x,w
  3286  05FF  1C03               	btfss	3,0
  3287  0600  2E28               	goto	l4497
  3288  0601  2E36               	goto	l4501
  3289  0602                     l4485:	
  3290                           ;main.c: 408: case 0: Turn90(0);
  3291                           
  3292                           ;main.c: 407: switch (orientation){
  3293                           
  3294  0602  3000               	movlw	0
  3295  0603  120A  158A  21E5  120A  118A  	fcall	_Turn90
  3296                           
  3297                           ;main.c: 409: break;
  3298  0608  2EF2               	goto	l4559
  3299  0609                     l4487:	
  3300                           ;main.c: 410: case 2: Turn90(1);
  3301                           
  3302  0609  3001               	movlw	1
  3303  060A  120A  158A  21E5  120A  118A  	fcall	_Turn90
  3304                           
  3305                           ;main.c: 411: break;
  3306  060F  2EF2               	goto	l4559
  3307  0610                     l4489:	
  3308                           ;main.c: 412: case 3: Turn90(1);
  3309                           
  3310  0610  3001               	movlw	1
  3311  0611  120A  158A  21E5  120A  118A  	fcall	_Turn90
  3312                           
  3313                           ;main.c: 413: _delay((unsigned long)((5)*(20000000/4000.0)));
  3314  0616  3021               	movlw	33
  3315  0617  1283               	bcf	3,5	;RP0=0, select bank0
  3316  0618  1303               	bcf	3,6	;RP1=0, select bank0
  3317  0619  00BB               	movwf	??_TravelPath+1
  3318  061A  3076               	movlw	118
  3319  061B  00BA               	movwf	??_TravelPath
  3320  061C                     u3937:	
  3321  061C  0BBA               	decfsz	??_TravelPath,f
  3322  061D  2E1C               	goto	u3937
  3323  061E  0BBB               	decfsz	??_TravelPath+1,f
  3324  061F  2E1C               	goto	u3937
  3325  0620  0000               	nop
  3326                           
  3327                           ;main.c: 414: Turn90(1);
  3328  0621  3001               	movlw	1
  3329  0622  120A  158A  21E5  120A  118A  	fcall	_Turn90
  3330                           
  3331                           ;main.c: 416: }
  3332                           
  3333                           ;main.c: 415: break;
  3334  0627  2EF2               	goto	l4559
  3335  0628                     l4497:	
  3336  0628  1283               	bcf	3,5	;RP0=0, select bank0
  3337  0629  1303               	bcf	3,6	;RP1=0, select bank0
  3338  062A  0867               	movf	_orientation,w
  3339                           
  3340                           ; Switch size 1, requested type "space"
  3341                           ; Number of cases is 3, Range of values is 0 to 3
  3342                           ; switch strategies available:
  3343                           ; Name         Instructions Cycles
  3344                           ; simple_byte           10     6 (average)
  3345                           ; direct_byte           20     8 (fixed)
  3346                           ; jumptable            260     6 (fixed)
  3347                           ;	Chosen strategy is simple_byte
  3348  062B  3A00               	xorlw	0	; case 0
  3349  062C  1903               	skipnz
  3350  062D  2E02               	goto	l4485
  3351  062E  3A02               	xorlw	2	; case 2
  3352  062F  1903               	skipnz
  3353  0630  2E09               	goto	l4487
  3354  0631  3A01               	xorlw	1	; case 3
  3355  0632  1903               	skipnz
  3356  0633  2E10               	goto	l4489
  3357  0634  2E35               	goto	l4499
  3358  0635                     l4499:	
  3359  0635  2EF2               	goto	l4559
  3360  0636                     l4501:	
  3361                           ;main.c: 418: }
  3362                           
  3363                           ;main.c: 417: Drive1m();
  3364                           
  3365                           
  3366                           ;main.c: 420: else if (pathShortest[0][n] < x){
  3367  0636  1283               	bcf	3,5	;RP0=0, select bank0
  3368  0637  1303               	bcf	3,6	;RP1=0, select bank0
  3369  0638  083C               	movf	TravelPath@n,w
  3370  0639  3EA0               	addlw	(low (_pathShortest| 0))& (0+255)
  3371  063A  0084               	movwf	4
  3372  063B  0869               	movf	_x,w
  3373  063C  1383               	bcf	3,7	;select IRP bank1
  3374  063D  0200               	subwf	0,w
  3375  063E  1C03               	btfss	3,0
  3376  063F  2E67               	goto	l4517
  3377  0640  2E75               	goto	l4521
  3378  0641                     l4505:	
  3379                           ;main.c: 422: case 0: Turn90(1);
  3380                           
  3381                           ;main.c: 421: switch (orientation){
  3382                           
  3383  0641  3001               	movlw	1
  3384  0642  120A  158A  21E5  120A  118A  	fcall	_Turn90
  3385                           
  3386                           ;main.c: 423: break;
  3387  0647  2EF2               	goto	l4559
  3388  0648                     l4507:	
  3389                           ;main.c: 424: case 2: Turn90(0);
  3390                           
  3391  0648  3000               	movlw	0
  3392  0649  120A  158A  21E5  120A  118A  	fcall	_Turn90
  3393                           
  3394                           ;main.c: 425: break;
  3395  064E  2EF2               	goto	l4559
  3396  064F                     l4509:	
  3397                           ;main.c: 426: case 1: Turn90(1);
  3398                           
  3399  064F  3001               	movlw	1
  3400  0650  120A  158A  21E5  120A  118A  	fcall	_Turn90
  3401                           
  3402                           ;main.c: 427: _delay((unsigned long)((5)*(20000000/4000.0)));
  3403  0655  3021               	movlw	33
  3404  0656  1283               	bcf	3,5	;RP0=0, select bank0
  3405  0657  1303               	bcf	3,6	;RP1=0, select bank0
  3406  0658  00BB               	movwf	??_TravelPath+1
  3407  0659  3076               	movlw	118
  3408  065A  00BA               	movwf	??_TravelPath
  3409  065B                     u3947:	
  3410  065B  0BBA               	decfsz	??_TravelPath,f
  3411  065C  2E5B               	goto	u3947
  3412  065D  0BBB               	decfsz	??_TravelPath+1,f
  3413  065E  2E5B               	goto	u3947
  3414  065F  0000               	nop
  3415                           
  3416                           ;main.c: 428: Turn90(1);
  3417  0660  3001               	movlw	1
  3418  0661  120A  158A  21E5  120A  118A  	fcall	_Turn90
  3419                           
  3420                           ;main.c: 430: }
  3421                           
  3422                           ;main.c: 429: break;
  3423  0666  2EF2               	goto	l4559
  3424  0667                     l4517:	
  3425  0667  1283               	bcf	3,5	;RP0=0, select bank0
  3426  0668  1303               	bcf	3,6	;RP1=0, select bank0
  3427  0669  0867               	movf	_orientation,w
  3428                           
  3429                           ; Switch size 1, requested type "space"
  3430                           ; Number of cases is 3, Range of values is 0 to 2
  3431                           ; switch strategies available:
  3432                           ; Name         Instructions Cycles
  3433                           ; simple_byte           10     6 (average)
  3434                           ; direct_byte           17     8 (fixed)
  3435                           ; jumptable            260     6 (fixed)
  3436                           ;	Chosen strategy is simple_byte
  3437  066A  3A00               	xorlw	0	; case 0
  3438  066B  1903               	skipnz
  3439  066C  2E41               	goto	l4505
  3440  066D  3A01               	xorlw	1	; case 1
  3441  066E  1903               	skipnz
  3442  066F  2E4F               	goto	l4509
  3443  0670  3A03               	xorlw	3	; case 2
  3444  0671  1903               	skipnz
  3445  0672  2E48               	goto	l4507
  3446  0673  2E74               	goto	l4519
  3447  0674                     l4519:	
  3448  0674  2EF2               	goto	l4559
  3449  0675                     l4521:	
  3450                           ;main.c: 432: }
  3451                           
  3452                           ;main.c: 431: Drive1m();
  3453                           
  3454                           
  3455                           ;main.c: 434: else if(pathShortest[1][n] > y){
  3456  0675  1283               	bcf	3,5	;RP0=0, select bank0
  3457  0676  1303               	bcf	3,6	;RP1=0, select bank0
  3458  0677  083C               	movf	TravelPath@n,w
  3459  0678  3EB0               	addlw	(low ((_pathShortest| 0+16)))& (0+255)
  3460  0679  0084               	movwf	4
  3461  067A  1383               	bcf	3,7	;select IRP bank1
  3462  067B  0800               	movf	0,w
  3463  067C  0263               	subwf	_y,w
  3464  067D  1C03               	btfss	3,0
  3465  067E  2EA6               	goto	l4537
  3466  067F  2EB4               	goto	l4541
  3467  0680                     l4525:	
  3468                           ;main.c: 436: case 1: Turn90(0);
  3469                           
  3470                           ;main.c: 435: switch(orientation){
  3471                           
  3472  0680  3000               	movlw	0
  3473  0681  120A  158A  21E5  120A  118A  	fcall	_Turn90
  3474                           
  3475                           ;main.c: 437: break;
  3476  0686  2EF2               	goto	l4559
  3477  0687                     l4527:	
  3478                           ;main.c: 438: case 3: Turn90(1);
  3479                           
  3480  0687  3001               	movlw	1
  3481  0688  120A  158A  21E5  120A  118A  	fcall	_Turn90
  3482                           
  3483                           ;main.c: 439: break;
  3484  068D  2EF2               	goto	l4559
  3485  068E                     l4529:	
  3486                           ;main.c: 440: case 0: Turn90(1);
  3487                           
  3488  068E  3001               	movlw	1
  3489  068F  120A  158A  21E5  120A  118A  	fcall	_Turn90
  3490                           
  3491                           ;main.c: 441: _delay((unsigned long)((5)*(20000000/4000.0)));
  3492  0694  3021               	movlw	33
  3493  0695  1283               	bcf	3,5	;RP0=0, select bank0
  3494  0696  1303               	bcf	3,6	;RP1=0, select bank0
  3495  0697  00BB               	movwf	??_TravelPath+1
  3496  0698  3076               	movlw	118
  3497  0699  00BA               	movwf	??_TravelPath
  3498  069A                     u3957:	
  3499  069A  0BBA               	decfsz	??_TravelPath,f
  3500  069B  2E9A               	goto	u3957
  3501  069C  0BBB               	decfsz	??_TravelPath+1,f
  3502  069D  2E9A               	goto	u3957
  3503  069E  0000               	nop
  3504                           
  3505                           ;main.c: 442: Turn90(1);
  3506  069F  3001               	movlw	1
  3507  06A0  120A  158A  21E5  120A  118A  	fcall	_Turn90
  3508                           
  3509                           ;main.c: 444: }
  3510                           
  3511                           ;main.c: 443: break;
  3512  06A5  2EF2               	goto	l4559
  3513  06A6                     l4537:	
  3514  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  3515  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  3516  06A8  0867               	movf	_orientation,w
  3517                           
  3518                           ; Switch size 1, requested type "space"
  3519                           ; Number of cases is 3, Range of values is 0 to 3
  3520                           ; switch strategies available:
  3521                           ; Name         Instructions Cycles
  3522                           ; simple_byte           10     6 (average)
  3523                           ; direct_byte           20     8 (fixed)
  3524                           ; jumptable            260     6 (fixed)
  3525                           ;	Chosen strategy is simple_byte
  3526  06A9  3A00               	xorlw	0	; case 0
  3527  06AA  1903               	skipnz
  3528  06AB  2E8E               	goto	l4529
  3529  06AC  3A01               	xorlw	1	; case 1
  3530  06AD  1903               	skipnz
  3531  06AE  2E80               	goto	l4525
  3532  06AF  3A02               	xorlw	2	; case 3
  3533  06B0  1903               	skipnz
  3534  06B1  2E87               	goto	l4527
  3535  06B2  2EB3               	goto	l4539
  3536  06B3                     l4539:	
  3537  06B3  2EF2               	goto	l4559
  3538  06B4                     l4541:	
  3539                           ;main.c: 446: }
  3540                           
  3541                           ;main.c: 445: Drive1m();
  3542                           
  3543                           
  3544                           ;main.c: 448: else if (pathShortest[1][n] < y){
  3545  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  3546  06B5  1303               	bcf	3,6	;RP1=0, select bank0
  3547  06B6  083C               	movf	TravelPath@n,w
  3548  06B7  3EB0               	addlw	(low ((_pathShortest| 0+16)))& (0+255)
  3549  06B8  0084               	movwf	4
  3550  06B9  0863               	movf	_y,w
  3551  06BA  1383               	bcf	3,7	;select IRP bank1
  3552  06BB  0200               	subwf	0,w
  3553  06BC  1C03               	btfss	3,0
  3554  06BD  2EE5               	goto	l4557
  3555  06BE  2EF7               	goto	l4561
  3556  06BF                     l4545:	
  3557                           ;main.c: 450: case 1: Turn90(1);
  3558                           
  3559                           ;main.c: 449: switch (orientation){
  3560                           
  3561  06BF  3001               	movlw	1
  3562  06C0  120A  158A  21E5  120A  118A  	fcall	_Turn90
  3563                           
  3564                           ;main.c: 451: break;
  3565  06C5  2EF2               	goto	l4559
  3566  06C6                     l4547:	
  3567                           ;main.c: 452: case 3: Turn90(0);
  3568                           
  3569  06C6  3000               	movlw	0
  3570  06C7  120A  158A  21E5  120A  118A  	fcall	_Turn90
  3571                           
  3572                           ;main.c: 453: break;
  3573  06CC  2EF2               	goto	l4559
  3574  06CD                     l4549:	
  3575                           ;main.c: 454: case 2: Turn90(1);
  3576                           
  3577  06CD  3001               	movlw	1
  3578  06CE  120A  158A  21E5  120A  118A  	fcall	_Turn90
  3579                           
  3580                           ;main.c: 455: _delay((unsigned long)((5)*(20000000/4000.0)));
  3581  06D3  3021               	movlw	33
  3582  06D4  1283               	bcf	3,5	;RP0=0, select bank0
  3583  06D5  1303               	bcf	3,6	;RP1=0, select bank0
  3584  06D6  00BB               	movwf	??_TravelPath+1
  3585  06D7  3076               	movlw	118
  3586  06D8  00BA               	movwf	??_TravelPath
  3587  06D9                     u3967:	
  3588  06D9  0BBA               	decfsz	??_TravelPath,f
  3589  06DA  2ED9               	goto	u3967
  3590  06DB  0BBB               	decfsz	??_TravelPath+1,f
  3591  06DC  2ED9               	goto	u3967
  3592  06DD  0000               	nop
  3593                           
  3594                           ;main.c: 456: Turn90(1);
  3595  06DE  3001               	movlw	1
  3596  06DF  120A  158A  21E5  120A  118A  	fcall	_Turn90
  3597                           
  3598                           ;main.c: 458: }
  3599                           
  3600                           ;main.c: 457: break;
  3601  06E4  2EF2               	goto	l4559
  3602  06E5                     l4557:	
  3603  06E5  1283               	bcf	3,5	;RP0=0, select bank0
  3604  06E6  1303               	bcf	3,6	;RP1=0, select bank0
  3605  06E7  0867               	movf	_orientation,w
  3606                           
  3607                           ; Switch size 1, requested type "space"
  3608                           ; Number of cases is 3, Range of values is 1 to 3
  3609                           ; switch strategies available:
  3610                           ; Name         Instructions Cycles
  3611                           ; simple_byte           10     6 (average)
  3612                           ; direct_byte           20    11 (fixed)
  3613                           ; jumptable            263     9 (fixed)
  3614                           ;	Chosen strategy is simple_byte
  3615  06E8  3A01               	xorlw	1	; case 1
  3616  06E9  1903               	skipnz
  3617  06EA  2EBF               	goto	l4545
  3618  06EB  3A03               	xorlw	3	; case 2
  3619  06EC  1903               	skipnz
  3620  06ED  2ECD               	goto	l4549
  3621  06EE  3A01               	xorlw	1	; case 3
  3622  06EF  1903               	skipnz
  3623  06F0  2EC6               	goto	l4547
  3624  06F1  2EF2               	goto	l4559
  3625  06F2                     l4559:	
  3626                           
  3627                           ;main.c: 459: Drive1m();
  3628  06F2  120A  158A  238A  120A  118A  	fcall	_Drive1m
  3629  06F7                     l4561:	
  3630                           
  3631                           ;main.c: 460: }
  3632                           ;main.c: 463: if (IR_Wall == 1){
  3633  06F7  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  3634  06F8  2EFF               	goto	l4565
  3635                           
  3636                           ;main.c: 464: n = 20;
  3637  06F9  3014               	movlw	20
  3638  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  3639  06FB  1303               	bcf	3,6	;RP1=0, select bank0
  3640  06FC  00BA               	movwf	??_TravelPath
  3641  06FD  083A               	movf	??_TravelPath,w
  3642  06FE  00BC               	movwf	TravelPath@n
  3643  06FF                     l4565:	
  3644  06FF  3001               	movlw	1
  3645  0700  1283               	bcf	3,5	;RP0=0, select bank0
  3646  0701  1303               	bcf	3,6	;RP1=0, select bank0
  3647  0702  00BA               	movwf	??_TravelPath
  3648  0703  083A               	movf	??_TravelPath,w
  3649  0704  07BC               	addwf	TravelPath@n,f
  3650  0705  2DF5               	goto	l4567
  3651  0706                     __end_of_TravelPath:	
  3652                           
  3653                           	psect	text8
  3654  09E5                     __ptext8:	
  3655 ;; *************** function _Turn90 *****************
  3656 ;; Defined at:
  3657 ;;		line 371 in file "main.c"
  3658 ;; Parameters:    Size  Location     Type
  3659 ;;  direction       1    wreg     unsigned char 
  3660 ;; Auto vars:     Size  Location     Type
  3661 ;;  direction       1   13[BANK0 ] unsigned char 
  3662 ;; Return value:  Size  Location     Type
  3663 ;;                  1    wreg      void 
  3664 ;; Registers used:
  3665 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3666 ;; Tracked objects:
  3667 ;;		On entry : 0/0
  3668 ;;		On exit  : 0/0
  3669 ;;		Unchanged: 0/0
  3670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3671 ;;      Params:         0       0       0       0       0
  3672 ;;      Locals:         0       1       0       0       0
  3673 ;;      Temps:          0       3       0       0       0
  3674 ;;      Totals:         0       4       0       0       0
  3675 ;;Total ram usage:        4 bytes
  3676 ;; Hardware stack levels used:    1
  3677 ;; Hardware stack levels required when called:    3
  3678 ;; This function calls:
  3679 ;;		_Drive
  3680 ;;		_DriveDirect
  3681 ;;		_getSensorData
  3682 ;; This function is called by:
  3683 ;;		_TravelPath
  3684 ;;		_re_route
  3685 ;; This function uses a non-reentrant model
  3686 ;;
  3687                           
  3688                           
  3689                           ;psect for function _Turn90
  3690  09E5                     _Turn90:	
  3691                           
  3692                           ;incstack = 0
  3693                           ; Regs used in _Turn90: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3694                           ;Turn90@direction stored from wreg
  3695  09E5  1283               	bcf	3,5	;RP0=0, select bank0
  3696  09E6  1303               	bcf	3,6	;RP1=0, select bank0
  3697  09E7  00AD               	movwf	Turn90@direction
  3698                           
  3699                           ;main.c: 373: angle = 0;
  3700  09E8  01F7               	clrf	_angle
  3701  09E9  01F8               	clrf	_angle+1
  3702                           
  3703                           ;main.c: 375: if (direction == 1){
  3704  09EA  032D               	decf	Turn90@direction,w
  3705  09EB  1D03               	btfss	3,2
  3706  09EC  2A26               	goto	l4217
  3707                           
  3708                           ;main.c: 377: if (orientation == 0)
  3709  09ED  0867               	movf	_orientation,w
  3710  09EE  1D03               	btfss	3,2
  3711  09EF  29F5               	goto	l4209
  3712                           
  3713                           ;main.c: 378: orientation = 3;
  3714  09F0  3003               	movlw	3
  3715  09F1  00AA               	movwf	??_Turn90
  3716  09F2  082A               	movf	??_Turn90,w
  3717  09F3  00E7               	movwf	_orientation
  3718  09F4  29F7               	goto	l4211
  3719  09F5                     l4209:	
  3720                           
  3721                           ;main.c: 379: else orientation--;
  3722  09F5  3001               	movlw	1
  3723  09F6  02E7               	subwf	_orientation,f
  3724  09F7                     l4211:	
  3725                           
  3726                           ;main.c: 381: Drive(0,150,0x00,0x01);
  3727  09F7  3096               	movlw	150
  3728  09F8  00AA               	movwf	??_Turn90
  3729  09F9  082A               	movf	??_Turn90,w
  3730  09FA  00A1               	movwf	Drive@speedL
  3731  09FB  01A2               	clrf	Drive@radH
  3732  09FC  01A3               	clrf	Drive@radL
  3733  09FD  0AA3               	incf	Drive@radL,f
  3734  09FE  3000               	movlw	0
  3735  09FF  160A  118A  2734  120A  158A  	fcall	_Drive
  3736  0A04                     l4215:	
  3737                           ;main.c: 382: while (angle < 86){
  3738                           
  3739  0A04  0878               	movf	_angle+1,w
  3740  0A05  3A80               	xorlw	128
  3741  0A06  00FF               	movwf	127
  3742  0A07  3080               	movlw	128
  3743  0A08  027F               	subwf	127,w
  3744  0A09  1D03               	skipz
  3745  0A0A  2A0D               	goto	u2965
  3746  0A0B  3056               	movlw	86
  3747  0A0C  0277               	subwf	_angle,w
  3748  0A0D                     u2965:	
  3749  0A0D  1803               	btfsc	3,0
  3750  0A0E  2A26               	goto	l4217
  3751                           
  3752                           ;main.c: 383: angle = angle + getSensorData(20,2);
  3753  0A0F  3002               	movlw	2
  3754  0A10  1283               	bcf	3,5	;RP0=0, select bank0
  3755  0A11  1303               	bcf	3,6	;RP1=0, select bank0
  3756  0A12  00AA               	movwf	??_Turn90
  3757  0A13  082A               	movf	??_Turn90,w
  3758  0A14  00A2               	movwf	getSensorData@bytes
  3759  0A15  3014               	movlw	20
  3760  0A16  160A  118A  2784  120A  158A  	fcall	_getSensorData
  3761  0A1B  0877               	movf	_angle,w
  3762  0A1C  1283               	bcf	3,5	;RP0=0, select bank0
  3763  0A1D  1303               	bcf	3,6	;RP1=0, select bank0
  3764  0A1E  0722               	addwf	?_getSensorData,w
  3765  0A1F  00F7               	movwf	_angle
  3766  0A20  0878               	movf	_angle+1,w
  3767  0A21  1803               	skipnc
  3768  0A22  0A78               	incf	_angle+1,w
  3769  0A23  0723               	addwf	?_getSensorData+1,w
  3770  0A24  00F8               	movwf	_angle+1
  3771  0A25  2A04               	goto	l4215
  3772  0A26                     l4217:	
  3773                           
  3774                           ;main.c: 384: }
  3775                           ;main.c: 385: }
  3776                           ;main.c: 387: if (direction == 0){
  3777  0A26  1283               	bcf	3,5	;RP0=0, select bank0
  3778  0A27  1303               	bcf	3,6	;RP1=0, select bank0
  3779  0A28  082D               	movf	Turn90@direction,w
  3780  0A29  1D03               	btfss	3,2
  3781  0A2A  2A69               	goto	l4231
  3782                           
  3783                           ;main.c: 389: if (orientation == 3)
  3784  0A2B  3003               	movlw	3
  3785  0A2C  0667               	xorwf	_orientation,w
  3786  0A2D  1D03               	btfss	3,2
  3787  0A2E  2A31               	goto	l4223
  3788                           
  3789                           ;main.c: 390: orientation = 0;
  3790  0A2F  01E7               	clrf	_orientation
  3791  0A30  2A35               	goto	l4225
  3792  0A31                     l4223:	
  3793                           
  3794                           ;main.c: 391: else orientation++;
  3795  0A31  3001               	movlw	1
  3796  0A32  00AA               	movwf	??_Turn90
  3797  0A33  082A               	movf	??_Turn90,w
  3798  0A34  07E7               	addwf	_orientation,f
  3799  0A35                     l4225:	
  3800                           
  3801                           ;main.c: 393: Drive(0,150,0xFF,0xFF);
  3802  0A35  3096               	movlw	150
  3803  0A36  00AA               	movwf	??_Turn90
  3804  0A37  082A               	movf	??_Turn90,w
  3805  0A38  00A1               	movwf	Drive@speedL
  3806  0A39  30FF               	movlw	255
  3807  0A3A  00AB               	movwf	??_Turn90+1
  3808  0A3B  082B               	movf	??_Turn90+1,w
  3809  0A3C  00A2               	movwf	Drive@radH
  3810  0A3D  30FF               	movlw	255
  3811  0A3E  00AC               	movwf	??_Turn90+2
  3812  0A3F  082C               	movf	??_Turn90+2,w
  3813  0A40  00A3               	movwf	Drive@radL
  3814  0A41  3000               	movlw	0
  3815  0A42  160A  118A  2734  120A  158A  	fcall	_Drive
  3816  0A47                     l4229:	
  3817                           ;main.c: 394: while (angle > -86){
  3818                           
  3819  0A47  0878               	movf	_angle+1,w
  3820  0A48  3A80               	xorlw	128
  3821  0A49  00FF               	movwf	127
  3822  0A4A  307F               	movlw	127
  3823  0A4B  027F               	subwf	127,w
  3824  0A4C  1D03               	skipz
  3825  0A4D  2A50               	goto	u2995
  3826  0A4E  30AB               	movlw	171
  3827  0A4F  0277               	subwf	_angle,w
  3828  0A50                     u2995:	
  3829  0A50  1C03               	btfss	3,0
  3830  0A51  2A69               	goto	l4231
  3831                           
  3832                           ;main.c: 395: angle = angle + getSensorData(20,2);
  3833  0A52  3002               	movlw	2
  3834  0A53  1283               	bcf	3,5	;RP0=0, select bank0
  3835  0A54  1303               	bcf	3,6	;RP1=0, select bank0
  3836  0A55  00AA               	movwf	??_Turn90
  3837  0A56  082A               	movf	??_Turn90,w
  3838  0A57  00A2               	movwf	getSensorData@bytes
  3839  0A58  3014               	movlw	20
  3840  0A59  160A  118A  2784  120A  158A  	fcall	_getSensorData
  3841  0A5E  0877               	movf	_angle,w
  3842  0A5F  1283               	bcf	3,5	;RP0=0, select bank0
  3843  0A60  1303               	bcf	3,6	;RP1=0, select bank0
  3844  0A61  0722               	addwf	?_getSensorData,w
  3845  0A62  00F7               	movwf	_angle
  3846  0A63  0878               	movf	_angle+1,w
  3847  0A64  1803               	skipnc
  3848  0A65  0A78               	incf	_angle+1,w
  3849  0A66  0723               	addwf	?_getSensorData+1,w
  3850  0A67  00F8               	movwf	_angle+1
  3851  0A68  2A47               	goto	l4229
  3852  0A69                     l4231:	
  3853                           
  3854                           ;main.c: 396: }
  3855                           ;main.c: 397: }
  3856                           ;main.c: 398: DriveDirect(0,0);
  3857  0A69  3000               	movlw	0
  3858  0A6A  1283               	bcf	3,5	;RP0=0, select bank0
  3859  0A6B  1303               	bcf	3,6	;RP1=0, select bank0
  3860  0A6C  00A1               	movwf	DriveDirect@VelocityRight
  3861  0A6D  00A2               	movwf	DriveDirect@VelocityRight+1
  3862  0A6E  3000               	movlw	0
  3863  0A6F  00A3               	movwf	DriveDirect@VelocityLeft
  3864  0A70  00A4               	movwf	DriveDirect@VelocityLeft+1
  3865  0A71  120A  158A  20BD  120A  158A  	fcall	_DriveDirect
  3866                           
  3867                           ;main.c: 399: _delay((unsigned long)((100)*(20000000/4000.0)));
  3868  0A76  3003               	movlw	3
  3869  0A77  1283               	bcf	3,5	;RP0=0, select bank0
  3870  0A78  1303               	bcf	3,6	;RP1=0, select bank0
  3871  0A79  00AC               	movwf	??_Turn90+2
  3872  0A7A  308A               	movlw	138
  3873  0A7B  00AB               	movwf	??_Turn90+1
  3874  0A7C  3056               	movlw	86
  3875  0A7D  00AA               	movwf	??_Turn90
  3876  0A7E                     u3977:	
  3877  0A7E  0BAA               	decfsz	??_Turn90,f
  3878  0A7F  2A7E               	goto	u3977
  3879  0A80  0BAB               	decfsz	??_Turn90+1,f
  3880  0A81  2A7E               	goto	u3977
  3881  0A82  0BAC               	decfsz	??_Turn90+2,f
  3882  0A83  2A7E               	goto	u3977
  3883  0A84  2A85               	nop2
  3884  0A85  0008               	return
  3885  0A86                     __end_of_Turn90:	
  3886                           
  3887                           	psect	text9
  3888  1734                     __ptext9:	
  3889 ;; *************** function _Drive *****************
  3890 ;; Defined at:
  3891 ;;		line 45 in file "ser.c"
  3892 ;; Parameters:    Size  Location     Type
  3893 ;;  speedH          1    wreg     unsigned char 
  3894 ;;  speedL          1    1[BANK0 ] unsigned char 
  3895 ;;  radH            1    2[BANK0 ] unsigned char 
  3896 ;;  radL            1    3[BANK0 ] unsigned char 
  3897 ;; Auto vars:     Size  Location     Type
  3898 ;;  speedH          1    4[BANK0 ] unsigned char 
  3899 ;; Return value:  Size  Location     Type
  3900 ;;                  1    wreg      void 
  3901 ;; Registers used:
  3902 ;;		wreg, status,2, status,0, pclath, cstack
  3903 ;; Tracked objects:
  3904 ;;		On entry : 0/0
  3905 ;;		On exit  : 0/0
  3906 ;;		Unchanged: 0/0
  3907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3908 ;;      Params:         0       3       0       0       0
  3909 ;;      Locals:         0       1       0       0       0
  3910 ;;      Temps:          0       0       0       0       0
  3911 ;;      Totals:         0       4       0       0       0
  3912 ;;Total ram usage:        4 bytes
  3913 ;; Hardware stack levels used:    1
  3914 ;; Hardware stack levels required when called:    2
  3915 ;; This function calls:
  3916 ;;		_ser_putch
  3917 ;; This function is called by:
  3918 ;;		_Turn90
  3919 ;; This function uses a non-reentrant model
  3920 ;;
  3921                           
  3922                           
  3923                           ;psect for function _Drive
  3924  1734                     _Drive:	
  3925                           
  3926                           ;incstack = 0
  3927                           ; Regs used in _Drive: [wreg+status,2+status,0+pclath+cstack]
  3928                           ;Drive@speedH stored from wreg
  3929  1734  1283               	bcf	3,5	;RP0=0, select bank0
  3930  1735  1303               	bcf	3,6	;RP1=0, select bank0
  3931  1736  00A4               	movwf	Drive@speedH
  3932                           
  3933                           ;ser.c: 46: ser_putch(137);
  3934  1737  3089               	movlw	137
  3935  1738  160A  118A  260D  160A  118A  	fcall	_ser_putch
  3936                           
  3937                           ;ser.c: 47: ser_putch(speedH);
  3938  173D  1283               	bcf	3,5	;RP0=0, select bank0
  3939  173E  1303               	bcf	3,6	;RP1=0, select bank0
  3940  173F  0824               	movf	Drive@speedH,w
  3941  1740  160A  118A  260D  160A  118A  	fcall	_ser_putch
  3942                           
  3943                           ;ser.c: 48: ser_putch(speedL);
  3944  1745  1283               	bcf	3,5	;RP0=0, select bank0
  3945  1746  1303               	bcf	3,6	;RP1=0, select bank0
  3946  1747  0821               	movf	Drive@speedL,w
  3947  1748  160A  118A  260D  160A  118A  	fcall	_ser_putch
  3948                           
  3949                           ;ser.c: 49: ser_putch(radH);
  3950  174D  1283               	bcf	3,5	;RP0=0, select bank0
  3951  174E  1303               	bcf	3,6	;RP1=0, select bank0
  3952  174F  0822               	movf	Drive@radH,w
  3953  1750  160A  118A  260D  160A  118A  	fcall	_ser_putch
  3954                           
  3955                           ;ser.c: 50: ser_putch(radL);
  3956  1755  1283               	bcf	3,5	;RP0=0, select bank0
  3957  1756  1303               	bcf	3,6	;RP1=0, select bank0
  3958  1757  0823               	movf	Drive@radL,w
  3959  1758  160A  118A  260D   	fcall	_ser_putch
  3960  175B  0008               	return
  3961  175C                     __end_of_Drive:	
  3962                           
  3963                           	psect	text10
  3964  0B8A                     __ptext10:	
  3965 ;; *************** function _Drive1m *****************
  3966 ;; Defined at:
  3967 ;;		line 275 in file "main.c"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;		None
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;  n               1   24[BANK0 ] unsigned char 
  3972 ;;  omni_IR         1   25[BANK0 ] unsigned char 
  3973 ;; Return value:  Size  Location     Type
  3974 ;;                  1    wreg      void 
  3975 ;; Registers used:
  3976 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3977 ;; Tracked objects:
  3978 ;;		On entry : 0/0
  3979 ;;		On exit  : 0/0
  3980 ;;		Unchanged: 0/0
  3981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3982 ;;      Params:         0       0       0       0       0
  3983 ;;      Locals:         0       2       0       0       0
  3984 ;;      Temps:          0       3       0       0       0
  3985 ;;      Totals:         0       5       0       0       0
  3986 ;;Total ram usage:        5 bytes
  3987 ;; Hardware stack levels used:    1
  3988 ;; Hardware stack levels required when called:    5
  3989 ;; This function calls:
  3990 ;;		_DriveDirect
  3991 ;;		_getSensorData
  3992 ;;		_ser_putch
  3993 ;;		_wallFollow
  3994 ;; This function is called by:
  3995 ;;		_TravelPath
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           
  4000                           ;psect for function _Drive1m
  4001  0B8A                     _Drive1m:	
  4002                           
  4003                           ;main.c: 283: distance = 0;
  4004                           
  4005                           ;incstack = 0
  4006                           ; Regs used in _Drive1m: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4007  0B8A  1283               	bcf	3,5	;RP0=0, select bank0
  4008  0B8B  1303               	bcf	3,6	;RP1=0, select bank0
  4009  0B8C  01D1               	clrf	_distance
  4010  0B8D  01D2               	clrf	_distance+1
  4011                           
  4012                           ;main.c: 285: RB2 = 1;
  4013  0B8E  1506               	bsf	6,2	;volatile
  4014                           
  4015                           ;main.c: 286: RB3 = 1;
  4016  0B8F  1586               	bsf	6,3	;volatile
  4017  0B90                     l4179:	
  4018                           ;main.c: 289: while (distance < 1000){
  4019                           
  4020  0B90  1283               	bcf	3,5	;RP0=0, select bank0
  4021  0B91  1303               	bcf	3,6	;RP1=0, select bank0
  4022  0B92  0852               	movf	_distance+1,w
  4023  0B93  3A80               	xorlw	128
  4024  0B94  00FF               	movwf	127
  4025  0B95  3083               	movlw	131
  4026  0B96  027F               	subwf	127,w
  4027  0B97  1D03               	skipz
  4028  0B98  2B9B               	goto	u2915
  4029  0B99  30E8               	movlw	232
  4030  0B9A  0251               	subwf	_distance,w
  4031  0B9B                     u2915:	
  4032  0B9B  1803               	btfsc	3,0
  4033  0B9C  2C61               	goto	l263
  4034                           
  4035                           ;main.c: 291: wallFollow();
  4036  0B9D  120A  158A  2286  120A  158A  	fcall	_wallFollow
  4037                           
  4038                           ;main.c: 293: distance = distance + getSensorData(19,2);
  4039  0BA2  3002               	movlw	2
  4040  0BA3  1283               	bcf	3,5	;RP0=0, select bank0
  4041  0BA4  1303               	bcf	3,6	;RP1=0, select bank0
  4042  0BA5  00B5               	movwf	??_Drive1m
  4043  0BA6  0835               	movf	??_Drive1m,w
  4044  0BA7  00A2               	movwf	getSensorData@bytes
  4045  0BA8  3013               	movlw	19
  4046  0BA9  160A  118A  2784  120A  158A  	fcall	_getSensorData
  4047  0BAE  1283               	bcf	3,5	;RP0=0, select bank0
  4048  0BAF  1303               	bcf	3,6	;RP1=0, select bank0
  4049  0BB0  0851               	movf	_distance,w
  4050  0BB1  0722               	addwf	?_getSensorData,w
  4051  0BB2  00D1               	movwf	_distance
  4052  0BB3  0852               	movf	_distance+1,w
  4053  0BB4  1803               	skipnc
  4054  0BB5  0A52               	incf	_distance+1,w
  4055  0BB6  0723               	addwf	?_getSensorData+1,w
  4056  0BB7  00D2               	movwf	_distance+1
  4057                           
  4058                           ;main.c: 294: unsigned char omni_IR = (getSensorData(17,1));
  4059  0BB8  01A2               	clrf	getSensorData@bytes
  4060  0BB9  0AA2               	incf	getSensorData@bytes,f
  4061  0BBA  3011               	movlw	17
  4062  0BBB  160A  118A  2784  120A  158A  	fcall	_getSensorData
  4063  0BC0  1283               	bcf	3,5	;RP0=0, select bank0
  4064  0BC1  1303               	bcf	3,6	;RP1=0, select bank0
  4065  0BC2  0822               	movf	?_getSensorData,w
  4066  0BC3  00B5               	movwf	??_Drive1m
  4067  0BC4  0835               	movf	??_Drive1m,w
  4068  0BC5  00B9               	movwf	Drive1m@omni_IR
  4069                           
  4070                           ;main.c: 296: if(getSensorData(13,1) == 1){
  4071  0BC6  01A2               	clrf	getSensorData@bytes
  4072  0BC7  0AA2               	incf	getSensorData@bytes,f
  4073  0BC8  300D               	movlw	13
  4074  0BC9  160A  118A  2784  120A  158A  	fcall	_getSensorData
  4075  0BCE  1283               	bcf	3,5	;RP0=0, select bank0
  4076  0BCF  1303               	bcf	3,6	;RP1=0, select bank0
  4077  0BD0  0322               	decf	?_getSensorData,w
  4078  0BD1  0423               	iorwf	?_getSensorData+1,w
  4079  0BD2  1D03               	btfss	3,2
  4080  0BD3  2C00               	goto	l242
  4081                           
  4082                           ;main.c: 299: if ((omni_IR == 246) || (omni_IR == 250)){
  4083  0BD4  30F6               	movlw	246
  4084  0BD5  0639               	xorwf	Drive1m@omni_IR,w
  4085  0BD6  1903               	btfsc	3,2
  4086  0BD7  2BDC               	goto	l245
  4087  0BD8  30FA               	movlw	250
  4088  0BD9  0639               	xorwf	Drive1m@omni_IR,w
  4089  0BDA  1D03               	btfss	3,2
  4090  0BDB  2BE6               	goto	l4149
  4091  0BDC                     l245:	
  4092                           
  4093                           ;main.c: 300: homeBase = 1;
  4094  0BDC  1570               	bsf	_homeBase/(0+8),_homeBase& (0+7)
  4095                           
  4096                           ;main.c: 301: }
  4097                           ;main.c: 302: switch(omni_IR){
  4098  0BDD  2BE6               	goto	l4149
  4099  0BDE                     l247:	
  4100                           ;main.c: 303: case 250: homeBase = 1;
  4101                           
  4102  0BDE                     l249:	
  4103                           ;main.c: 305: case 246: homeBase = 1;
  4104                           
  4105                           ;main.c: 304: break;
  4106                           
  4107  0BDE  1570               	bsf	_homeBase/(0+8),_homeBase& (0+7)
  4108                           
  4109                           ;main.c: 312: case 254: break;
  4110                           
  4111                           ;main.c: 311: case 252: break;
  4112                           
  4113                           ;main.c: 310: case 242: break;
  4114                           
  4115                           ;main.c: 309: case 244: break;
  4116                           
  4117                           ;main.c: 308: case 248: break;
  4118                           
  4119                           ;main.c: 307: case 240: break;
  4120                           
  4121                           ;main.c: 306: break;
  4122  0BDF  2C00               	goto	l242
  4123  0BE0                     l256:	
  4124                           ;main.c: 313: default: IR_Wall = 1;
  4125                           
  4126  0BE0  1470               	bsf	_IR_Wall/(0+8),_IR_Wall& (0+7)
  4127                           
  4128                           ;main.c: 314: distance = 1001;
  4129  0BE1  30E9               	movlw	233
  4130  0BE2  00D1               	movwf	_distance
  4131  0BE3  3003               	movlw	3
  4132  0BE4  00D2               	movwf	_distance+1
  4133                           
  4134                           ;main.c: 316: }
  4135                           
  4136                           ;main.c: 315: break;
  4137  0BE5  2C00               	goto	l242
  4138  0BE6                     l4149:	
  4139  0BE6  0839               	movf	Drive1m@omni_IR,w
  4140                           
  4141                           ; Switch size 1, requested type "space"
  4142                           ; Number of cases is 8, Range of values is 240 to 254
  4143                           ; switch strategies available:
  4144                           ; Name         Instructions Cycles
  4145                           ; simple_byte           25    13 (average)
  4146                           ; direct_byte           56    11 (fixed)
  4147                           ; jumptable            263     9 (fixed)
  4148                           ;	Chosen strategy is simple_byte
  4149  0BE7  3AF0               	xorlw	240	; case 240
  4150  0BE8  1903               	skipnz
  4151  0BE9  2C00               	goto	l242
  4152  0BEA  3A02               	xorlw	2	; case 242
  4153  0BEB  1903               	skipnz
  4154  0BEC  2C00               	goto	l242
  4155  0BED  3A06               	xorlw	6	; case 244
  4156  0BEE  1903               	skipnz
  4157  0BEF  2C00               	goto	l242
  4158  0BF0  3A02               	xorlw	2	; case 246
  4159  0BF1  1903               	skipnz
  4160  0BF2  2BDE               	goto	l249
  4161  0BF3  3A0E               	xorlw	14	; case 248
  4162  0BF4  1903               	skipnz
  4163  0BF5  2C00               	goto	l242
  4164  0BF6  3A02               	xorlw	2	; case 250
  4165  0BF7  1903               	skipnz
  4166  0BF8  2BDE               	goto	l247
  4167  0BF9  3A06               	xorlw	6	; case 252
  4168  0BFA  1903               	skipnz
  4169  0BFB  2C00               	goto	l242
  4170  0BFC  3A02               	xorlw	2	; case 254
  4171  0BFD  1903               	skipnz
  4172  0BFE  2C00               	goto	l242
  4173  0BFF  2BE0               	goto	l256
  4174  0C00                     l242:	
  4175                           
  4176                           ;main.c: 317: }
  4177                           ;main.c: 319: if (homeBase == 1){
  4178  0C00  1D70               	btfss	_homeBase/(0+8),_homeBase& (0+7)
  4179  0C01  2B90               	goto	l4179
  4180                           
  4181                           ;main.c: 320: if ((time_count >=10000) && (targets != 2)){
  4182  0C02  3027               	movlw	39
  4183  0C03  1683               	bsf	3,5	;RP0=1, select bank1
  4184  0C04  1303               	bcf	3,6	;RP1=0, select bank1
  4185  0C05  024D               	subwf	(_time_count+1)^(0+128),w	;volatile
  4186  0C06  3010               	movlw	16
  4187  0C07  1903               	skipnz
  4188  0C08  024C               	subwf	_time_count^(0+128),w	;volatile
  4189  0C09  1C03               	skipc
  4190  0C0A  2C44               	goto	l4175
  4191  0C0B  3002               	movlw	2
  4192  0C0C  1283               	bcf	3,5	;RP0=0, select bank0
  4193  0C0D  1303               	bcf	3,6	;RP1=0, select bank0
  4194  0C0E  065F               	xorwf	_targets,w
  4195  0C0F  1903               	btfsc	3,2
  4196  0C10  2C44               	goto	l4175
  4197                           
  4198                           ;main.c: 321: targets++;
  4199  0C11  3001               	movlw	1
  4200  0C12  00B5               	movwf	??_Drive1m
  4201  0C13  0835               	movf	??_Drive1m,w
  4202  0C14  07DF               	addwf	_targets,f
  4203                           
  4204                           ;main.c: 322: switch(targets){
  4205  0C15  2C39               	goto	l4173
  4206  0C16                     l4157:	
  4207                           ;main.c: 323: case 1: time_count = 0;
  4208                           
  4209  0C16  1683               	bsf	3,5	;RP0=1, select bank1
  4210  0C17  1303               	bcf	3,6	;RP1=0, select bank1
  4211  0C18  01CC               	clrf	_time_count^(0+128)	;volatile
  4212  0C19  01CD               	clrf	(_time_count+1)^(0+128)	;volatile
  4213                           
  4214                           ;main.c: 324: ser_putch(141);
  4215  0C1A  308D               	movlw	141
  4216  0C1B  160A  118A  260D  120A  158A  	fcall	_ser_putch
  4217                           
  4218                           ;main.c: 326: ser_putch(5);
  4219  0C20  3005               	movlw	5
  4220  0C21  160A  118A  260D  120A  158A  	fcall	_ser_putch
  4221                           
  4222                           ;main.c: 327: break;
  4223  0C26  2C43               	goto	l261
  4224  0C27                     l4163:	
  4225                           ;main.c: 328: case 2: time_count = 0;
  4226                           
  4227  0C27  1683               	bsf	3,5	;RP0=1, select bank1
  4228  0C28  1303               	bcf	3,6	;RP1=0, select bank1
  4229  0C29  01CC               	clrf	_time_count^(0+128)	;volatile
  4230  0C2A  01CD               	clrf	(_time_count+1)^(0+128)	;volatile
  4231                           
  4232                           ;main.c: 329: ser_putch(141);
  4233  0C2B  308D               	movlw	141
  4234  0C2C  160A  118A  260D  120A  158A  	fcall	_ser_putch
  4235                           
  4236                           ;main.c: 330: ser_putch(3);
  4237  0C31  3003               	movlw	3
  4238  0C32  160A  118A  260D  120A  158A  	fcall	_ser_putch
  4239                           
  4240                           ;main.c: 331: targets_found = 1;
  4241  0C37  1471               	bsf	_targets_found/(0+8),_targets_found& (0+7)
  4242                           
  4243                           ;main.c: 333: }
  4244                           
  4245                           ;main.c: 332: break;
  4246  0C38  2C43               	goto	l261
  4247  0C39                     l4173:	
  4248  0C39  1283               	bcf	3,5	;RP0=0, select bank0
  4249  0C3A  1303               	bcf	3,6	;RP1=0, select bank0
  4250  0C3B  085F               	movf	_targets,w
  4251                           
  4252                           ; Switch size 1, requested type "space"
  4253                           ; Number of cases is 2, Range of values is 1 to 2
  4254                           ; switch strategies available:
  4255                           ; Name         Instructions Cycles
  4256                           ; simple_byte            7     4 (average)
  4257                           ; direct_byte           17    11 (fixed)
  4258                           ; jumptable            263     9 (fixed)
  4259                           ;	Chosen strategy is simple_byte
  4260  0C3C  3A01               	xorlw	1	; case 1
  4261  0C3D  1903               	skipnz
  4262  0C3E  2C16               	goto	l4157
  4263  0C3F  3A03               	xorlw	3	; case 2
  4264  0C40  1903               	skipnz
  4265  0C41  2C27               	goto	l4163
  4266  0C42  2C43               	goto	l261
  4267  0C43                     l261:	
  4268                           
  4269                           ;main.c: 334: homeBase = 0;
  4270  0C43  1170               	bcf	_homeBase/(0+8),_homeBase& (0+7)
  4271  0C44                     l4175:	
  4272                           
  4273                           ;main.c: 335: }
  4274                           ;main.c: 337: DriveDirect(0,0);
  4275  0C44  3000               	movlw	0
  4276  0C45  1283               	bcf	3,5	;RP0=0, select bank0
  4277  0C46  1303               	bcf	3,6	;RP1=0, select bank0
  4278  0C47  00A1               	movwf	DriveDirect@VelocityRight
  4279  0C48  00A2               	movwf	DriveDirect@VelocityRight+1
  4280  0C49  3000               	movlw	0
  4281  0C4A  00A3               	movwf	DriveDirect@VelocityLeft
  4282  0C4B  00A4               	movwf	DriveDirect@VelocityLeft+1
  4283  0C4C  120A  158A  20BD  120A  158A  	fcall	_DriveDirect
  4284                           
  4285                           ;main.c: 338: _delay((unsigned long)((2500)*(20000000/4000.0)));
  4286  0C51  3040               	movlw	64
  4287  0C52  1283               	bcf	3,5	;RP0=0, select bank0
  4288  0C53  1303               	bcf	3,6	;RP1=0, select bank0
  4289  0C54  00B7               	movwf	??_Drive1m+2
  4290  0C55  306A               	movlw	106
  4291  0C56  00B6               	movwf	??_Drive1m+1
  4292  0C57  30D5               	movlw	213
  4293  0C58  00B5               	movwf	??_Drive1m
  4294  0C59                     u3987:	
  4295  0C59  0BB5               	decfsz	??_Drive1m,f
  4296  0C5A  2C59               	goto	u3987
  4297  0C5B  0BB6               	decfsz	??_Drive1m+1,f
  4298  0C5C  2C59               	goto	u3987
  4299  0C5D  0BB7               	decfsz	??_Drive1m+2,f
  4300  0C5E  2C59               	goto	u3987
  4301  0C5F  2C60               	nop2
  4302  0C60  2B90               	goto	l4179
  4303  0C61                     l263:	
  4304                           
  4305                           ;main.c: 340: }
  4306                           ;main.c: 342: }
  4307                           ;main.c: 346: if(IR_Wall == 0){
  4308  0C61  1C70               	btfss	_IR_Wall/(0+8),_IR_Wall& (0+7)
  4309  0C62  2C76               	goto	l4193
  4310  0C63  2C93               	goto	l4197
  4311  0C64                     l4183:	
  4312                           ;main.c: 348: case 0: y--;
  4313                           
  4314                           ;main.c: 347: switch(orientation){
  4315                           
  4316  0C64  3001               	movlw	1
  4317  0C65  1283               	bcf	3,5	;RP0=0, select bank0
  4318  0C66  1303               	bcf	3,6	;RP1=0, select bank0
  4319  0C67  02E3               	subwf	_y,f
  4320                           
  4321                           ;main.c: 349: break;
  4322  0C68  2C86               	goto	l4195
  4323  0C69                     l4185:	
  4324                           ;main.c: 350: case 1: x++;
  4325                           
  4326  0C69  3001               	movlw	1
  4327  0C6A  00B5               	movwf	??_Drive1m
  4328  0C6B  0835               	movf	??_Drive1m,w
  4329  0C6C  07E9               	addwf	_x,f
  4330                           
  4331                           ;main.c: 351: break;
  4332  0C6D  2C86               	goto	l4195
  4333  0C6E                     l4187:	
  4334                           ;main.c: 352: case 2: y++;
  4335                           
  4336  0C6E  3001               	movlw	1
  4337  0C6F  00B5               	movwf	??_Drive1m
  4338  0C70  0835               	movf	??_Drive1m,w
  4339  0C71  07E3               	addwf	_y,f
  4340                           
  4341                           ;main.c: 353: break;
  4342  0C72  2C86               	goto	l4195
  4343  0C73                     l4189:	
  4344                           ;main.c: 354: case 3: x--;
  4345                           
  4346  0C73  3001               	movlw	1
  4347  0C74  02E9               	subwf	_x,f
  4348                           
  4349                           ;main.c: 356: }
  4350                           
  4351                           ;main.c: 355: break;
  4352  0C75  2C86               	goto	l4195
  4353  0C76                     l4193:	
  4354  0C76  1283               	bcf	3,5	;RP0=0, select bank0
  4355  0C77  1303               	bcf	3,6	;RP1=0, select bank0
  4356  0C78  0867               	movf	_orientation,w
  4357                           
  4358                           ; Switch size 1, requested type "space"
  4359                           ; Number of cases is 4, Range of values is 0 to 3
  4360                           ; switch strategies available:
  4361                           ; Name         Instructions Cycles
  4362                           ; simple_byte           13     7 (average)
  4363                           ; direct_byte           20     8 (fixed)
  4364                           ; jumptable            260     6 (fixed)
  4365                           ;	Chosen strategy is simple_byte
  4366  0C79  3A00               	xorlw	0	; case 0
  4367  0C7A  1903               	skipnz
  4368  0C7B  2C64               	goto	l4183
  4369  0C7C  3A01               	xorlw	1	; case 1
  4370  0C7D  1903               	skipnz
  4371  0C7E  2C69               	goto	l4185
  4372  0C7F  3A03               	xorlw	3	; case 2
  4373  0C80  1903               	skipnz
  4374  0C81  2C6E               	goto	l4187
  4375  0C82  3A01               	xorlw	1	; case 3
  4376  0C83  1903               	skipnz
  4377  0C84  2C73               	goto	l4189
  4378  0C85  2C86               	goto	l4195
  4379  0C86                     l4195:	
  4380                           
  4381                           ;main.c: 357: _delay((unsigned long)((100)*(20000000/4000.0)));
  4382  0C86  3003               	movlw	3
  4383  0C87  00B7               	movwf	??_Drive1m+2
  4384  0C88  308A               	movlw	138
  4385  0C89  00B6               	movwf	??_Drive1m+1
  4386  0C8A  3056               	movlw	86
  4387  0C8B  00B5               	movwf	??_Drive1m
  4388  0C8C                     u3997:	
  4389  0C8C  0BB5               	decfsz	??_Drive1m,f
  4390  0C8D  2C8C               	goto	u3997
  4391  0C8E  0BB6               	decfsz	??_Drive1m+1,f
  4392  0C8F  2C8C               	goto	u3997
  4393  0C90  0BB7               	decfsz	??_Drive1m+2,f
  4394  0C91  2C8C               	goto	u3997
  4395  0C92  2C93               	nop2
  4396  0C93                     l4197:	
  4397                           
  4398                           ;main.c: 358: }
  4399                           ;main.c: 363: if (targets_found == 1){
  4400  0C93  1C71               	btfss	_targets_found/(0+8),_targets_found& (0+7)
  4401  0C94  0008               	return
  4402                           
  4403                           ;main.c: 364: char n = 20;
  4404  0C95  3014               	movlw	20
  4405  0C96  1283               	bcf	3,5	;RP0=0, select bank0
  4406  0C97  1303               	bcf	3,6	;RP1=0, select bank0
  4407  0C98  00B5               	movwf	??_Drive1m
  4408  0C99  0835               	movf	??_Drive1m,w
  4409  0C9A  00B8               	movwf	Drive1m@n
  4410  0C9B  0008               	return
  4411  0C9C                     __end_of_Drive1m:	
  4412                           
  4413                           	psect	text11
  4414  0A86                     __ptext11:	
  4415 ;; *************** function _wallFollow *****************
  4416 ;; Defined at:
  4417 ;;		line 14 in file "main.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;		None
  4420 ;; Auto vars:     Size  Location     Type
  4421 ;;  setADCdist      2   19[BANK0 ] unsigned int 
  4422 ;; Return value:  Size  Location     Type
  4423 ;;                  1    wreg      void 
  4424 ;; Registers used:
  4425 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4431 ;;      Params:         0       0       0       0       0
  4432 ;;      Locals:         0       2       0       0       0
  4433 ;;      Temps:          0       4       0       0       0
  4434 ;;      Totals:         0       6       0       0       0
  4435 ;;Total ram usage:        6 bytes
  4436 ;; Hardware stack levels used:    1
  4437 ;; Hardware stack levels required when called:    4
  4438 ;; This function calls:
  4439 ;;		_ADCMain
  4440 ;;		_DriveDirect
  4441 ;;		___lwdiv
  4442 ;;		___wmul
  4443 ;; This function is called by:
  4444 ;;		_Drive1m
  4445 ;; This function uses a non-reentrant model
  4446 ;;
  4447                           
  4448                           
  4449                           ;psect for function _wallFollow
  4450  0A86                     _wallFollow:	
  4451                           
  4452                           ;main.c: 16: unsigned int setADCdist = 200;
  4453                           
  4454                           ;incstack = 0
  4455                           ; Regs used in _wallFollow: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4456  0A86  30C8               	movlw	200
  4457  0A87  1283               	bcf	3,5	;RP0=0, select bank0
  4458  0A88  1303               	bcf	3,6	;RP1=0, select bank0
  4459  0A89  00B3               	movwf	wallFollow@setADCdist
  4460  0A8A  3000               	movlw	0
  4461  0A8B  00B4               	movwf	wallFollow@setADCdist+1
  4462                           
  4463                           ;main.c: 17: leftWall = 1;
  4464  0A8C  1670               	bsf	_leftWall/(0+8),_leftWall& (0+7)
  4465                           
  4466                           ;main.c: 18: ADCMain();
  4467  0A8D  160A  118A  2687  120A  158A  	fcall	_ADCMain
  4468                           
  4469                           ;main.c: 21: if(adcRAW < (setADCdist - 90)) {
  4470  0A92  1283               	bcf	3,5	;RP0=0, select bank0
  4471  0A93  1303               	bcf	3,6	;RP1=0, select bank0
  4472  0A94  0833               	movf	wallFollow@setADCdist,w
  4473  0A95  3EA6               	addlw	166
  4474  0A96  00AF               	movwf	??_wallFollow
  4475  0A97  0834               	movf	wallFollow@setADCdist+1,w
  4476  0A98  1803               	skipnc
  4477  0A99  3E01               	addlw	1
  4478  0A9A  3EFF               	addlw	255
  4479  0A9B  00B0               	movwf	??_wallFollow+1
  4480  0A9C  0830               	movf	??_wallFollow+1,w
  4481  0A9D  0250               	subwf	_adcRAW+1,w	;volatile
  4482  0A9E  1D03               	skipz
  4483  0A9F  2AA2               	goto	u2805
  4484  0AA0  082F               	movf	??_wallFollow,w
  4485  0AA1  024F               	subwf	_adcRAW,w	;volatile
  4486  0AA2                     u2805:	
  4487  0AA2  1803               	skipnc
  4488  0AA3  2AAF               	goto	l4083
  4489                           
  4490                           ;main.c: 23: ADJUSTED_SPEED_L = CURRENT_SPEED_L;
  4491  0AA4  086B               	movf	_CURRENT_SPEED_L+1,w
  4492  0AA5  1683               	bsf	3,5	;RP0=1, select bank1
  4493  0AA6  1303               	bcf	3,6	;RP1=0, select bank1
  4494  0AA7  00C1               	movwf	(_ADJUSTED_SPEED_L+1)^(0+128)
  4495  0AA8  1283               	bcf	3,5	;RP0=0, select bank0
  4496  0AA9  1303               	bcf	3,6	;RP1=0, select bank0
  4497  0AAA  086A               	movf	_CURRENT_SPEED_L,w
  4498  0AAB  1683               	bsf	3,5	;RP0=1, select bank1
  4499  0AAC  1303               	bcf	3,6	;RP1=0, select bank1
  4500  0AAD  00C0               	movwf	_ADJUSTED_SPEED_L^(0+128)
  4501  0AAE  2B02               	goto	l4089
  4502  0AAF                     l4083:	
  4503                           ;main.c: 26: }
  4504                           
  4505                           ;main.c: 24: ADJUSTED_SPEED_R = CURRENT_SPEED_R;
  4506                           
  4507                           
  4508                           ;main.c: 27: else if((adcRAW > setADCdist)){
  4509  0AAF  1283               	bcf	3,5	;RP0=0, select bank0
  4510  0AB0  0850               	movf	_adcRAW+1,w	;volatile
  4511  0AB1  0234               	subwf	wallFollow@setADCdist+1,w
  4512  0AB2  1D03               	skipz
  4513  0AB3  2AB6               	goto	u2815
  4514  0AB4  084F               	movf	_adcRAW,w	;volatile
  4515  0AB5  0233               	subwf	wallFollow@setADCdist,w
  4516  0AB6                     u2815:	
  4517  0AB6  1803               	skipnc
  4518  0AB7  2B0F               	goto	l4091
  4519                           
  4520                           ;main.c: 28: ADC_ADJUST = adcRAW - setADCdist;
  4521  0AB8  0933               	comf	wallFollow@setADCdist,w
  4522  0AB9  00AF               	movwf	??_wallFollow
  4523  0ABA  0934               	comf	wallFollow@setADCdist+1,w
  4524  0ABB  00B0               	movwf	??_wallFollow+1
  4525  0ABC  0AAF               	incf	??_wallFollow,f
  4526  0ABD  1903               	skipnz
  4527  0ABE  0AB0               	incf	??_wallFollow+1,f
  4528  0ABF  084F               	movf	_adcRAW,w	;volatile
  4529  0AC0  072F               	addwf	??_wallFollow,w
  4530  0AC1  00CD               	movwf	_ADC_ADJUST
  4531  0AC2  0850               	movf	_adcRAW+1,w	;volatile
  4532  0AC3  1803               	skipnc
  4533  0AC4  0A50               	incf	_adcRAW+1,w	;volatile
  4534  0AC5  0730               	addwf	??_wallFollow+1,w
  4535  0AC6  00CE               	movwf	_ADC_ADJUST+1
  4536                           
  4537                           ;main.c: 30: ADJUSTED_SPEED_L = (14/10)*CURRENT_SPEED_L + (4/10)*ADC_ADJUST + ((CURRENT_
      +                          SPEED_L))/(ADC_ADJUST+10);
  4538  0AC7  084E               	movf	_ADC_ADJUST+1,w
  4539  0AC8  00A1               	movwf	___wmul@multiplier+1
  4540  0AC9  084D               	movf	_ADC_ADJUST,w
  4541  0ACA  00A0               	movwf	___wmul@multiplier
  4542  0ACB  3000               	movlw	0
  4543  0ACC  00A2               	movwf	___wmul@multiplicand
  4544  0ACD  00A3               	movwf	___wmul@multiplicand+1
  4545  0ACE  160A  118A  26EB  120A  158A  	fcall	___wmul
  4546  0AD3  1283               	bcf	3,5	;RP0=0, select bank0
  4547  0AD4  1303               	bcf	3,6	;RP1=0, select bank0
  4548  0AD5  0820               	movf	?___wmul,w
  4549  0AD6  00AF               	movwf	??_wallFollow
  4550  0AD7  0821               	movf	?___wmul+1,w
  4551  0AD8  00B0               	movwf	??_wallFollow+1
  4552  0AD9  084D               	movf	_ADC_ADJUST,w
  4553  0ADA  3E0A               	addlw	10
  4554  0ADB  00A0               	movwf	___lwdiv@divisor
  4555  0ADC  084E               	movf	_ADC_ADJUST+1,w
  4556  0ADD  1803               	skipnc
  4557  0ADE  3E01               	addlw	1
  4558  0ADF  3E00               	addlw	0
  4559  0AE0  00A1               	movwf	___lwdiv@divisor+1
  4560  0AE1  086B               	movf	_CURRENT_SPEED_L+1,w
  4561  0AE2  00A3               	movwf	___lwdiv@dividend+1
  4562  0AE3  086A               	movf	_CURRENT_SPEED_L,w
  4563  0AE4  00A2               	movwf	___lwdiv@dividend
  4564  0AE5  160A  118A  27C2  120A  158A  	fcall	___lwdiv
  4565  0AEA  1283               	bcf	3,5	;RP0=0, select bank0
  4566  0AEB  1303               	bcf	3,6	;RP1=0, select bank0
  4567  0AEC  0820               	movf	?___lwdiv,w
  4568  0AED  072F               	addwf	??_wallFollow,w
  4569  0AEE  00B1               	movwf	??_wallFollow+2
  4570  0AEF  0821               	movf	?___lwdiv+1,w
  4571  0AF0  1803               	skipnc
  4572  0AF1  0A21               	incf	?___lwdiv+1,w
  4573  0AF2  0730               	addwf	??_wallFollow+1,w
  4574  0AF3  00B2               	movwf	??_wallFollow+3
  4575  0AF4  086A               	movf	_CURRENT_SPEED_L,w
  4576  0AF5  0731               	addwf	??_wallFollow+2,w
  4577  0AF6  1683               	bsf	3,5	;RP0=1, select bank1
  4578  0AF7  1303               	bcf	3,6	;RP1=0, select bank1
  4579  0AF8  00C0               	movwf	_ADJUSTED_SPEED_L^(0+128)
  4580  0AF9  1283               	bcf	3,5	;RP0=0, select bank0
  4581  0AFA  1303               	bcf	3,6	;RP1=0, select bank0
  4582  0AFB  086B               	movf	_CURRENT_SPEED_L+1,w
  4583  0AFC  1803               	skipnc
  4584  0AFD  0A6B               	incf	_CURRENT_SPEED_L+1,w
  4585  0AFE  0732               	addwf	??_wallFollow+3,w
  4586  0AFF  1683               	bsf	3,5	;RP0=1, select bank1
  4587  0B00  1303               	bcf	3,6	;RP1=0, select bank1
  4588  0B01  00C1               	movwf	(_ADJUSTED_SPEED_L+1)^(0+128)
  4589  0B02                     l4089:	
  4590                           
  4591                           ;main.c: 31: ADJUSTED_SPEED_R = CURRENT_SPEED_R;
  4592  0B02  1283               	bcf	3,5	;RP0=0, select bank0
  4593  0B03  1303               	bcf	3,6	;RP1=0, select bank0
  4594  0B04  086D               	movf	_CURRENT_SPEED_R+1,w
  4595  0B05  1683               	bsf	3,5	;RP0=1, select bank1
  4596  0B06  1303               	bcf	3,6	;RP1=0, select bank1
  4597  0B07  00C3               	movwf	(_ADJUSTED_SPEED_R+1)^(0+128)
  4598  0B08  1283               	bcf	3,5	;RP0=0, select bank0
  4599  0B09  1303               	bcf	3,6	;RP1=0, select bank0
  4600  0B0A  086C               	movf	_CURRENT_SPEED_R,w
  4601  0B0B  1683               	bsf	3,5	;RP0=1, select bank1
  4602  0B0C  1303               	bcf	3,6	;RP1=0, select bank1
  4603  0B0D  00C2               	movwf	_ADJUSTED_SPEED_R^(0+128)
  4604                           
  4605                           ;main.c: 33: }
  4606  0B0E  2B6E               	goto	l4099
  4607  0B0F                     l4091:	
  4608                           
  4609                           ;main.c: 35: else if ((adcRAW < setADCdist)){
  4610  0B0F  1283               	bcf	3,5	;RP0=0, select bank0
  4611  0B10  0834               	movf	wallFollow@setADCdist+1,w
  4612  0B11  0250               	subwf	_adcRAW+1,w	;volatile
  4613  0B12  1D03               	skipz
  4614  0B13  2B16               	goto	u2825
  4615  0B14  0833               	movf	wallFollow@setADCdist,w
  4616  0B15  024F               	subwf	_adcRAW,w	;volatile
  4617  0B16                     u2825:	
  4618  0B16  1803               	skipnc
  4619  0B17  2B6E               	goto	l4099
  4620                           
  4621                           ;main.c: 37: ADC_ADJUST = setADCdist - adcRAW;
  4622  0B18  094F               	comf	_adcRAW,w	;volatile
  4623  0B19  00AF               	movwf	??_wallFollow
  4624  0B1A  0950               	comf	_adcRAW+1,w	;volatile
  4625  0B1B  00B0               	movwf	??_wallFollow+1
  4626  0B1C  0AAF               	incf	??_wallFollow,f
  4627  0B1D  1903               	skipnz
  4628  0B1E  0AB0               	incf	??_wallFollow+1,f
  4629  0B1F  0833               	movf	wallFollow@setADCdist,w
  4630  0B20  072F               	addwf	??_wallFollow,w
  4631  0B21  00CD               	movwf	_ADC_ADJUST
  4632  0B22  0834               	movf	wallFollow@setADCdist+1,w
  4633  0B23  1803               	skipnc
  4634  0B24  0A34               	incf	wallFollow@setADCdist+1,w
  4635  0B25  0730               	addwf	??_wallFollow+1,w
  4636  0B26  00CE               	movwf	_ADC_ADJUST+1
  4637                           
  4638                           ;main.c: 39: ADJUSTED_SPEED_R = (14/10)*CURRENT_SPEED_R + (4/10)*ADC_ADJUST + ((CURRENT_
      +                          SPEED_R))/(ADC_ADJUST+10);
  4639  0B27  084E               	movf	_ADC_ADJUST+1,w
  4640  0B28  00A1               	movwf	___wmul@multiplier+1
  4641  0B29  084D               	movf	_ADC_ADJUST,w
  4642  0B2A  00A0               	movwf	___wmul@multiplier
  4643  0B2B  3000               	movlw	0
  4644  0B2C  00A2               	movwf	___wmul@multiplicand
  4645  0B2D  00A3               	movwf	___wmul@multiplicand+1
  4646  0B2E  160A  118A  26EB  120A  158A  	fcall	___wmul
  4647  0B33  1283               	bcf	3,5	;RP0=0, select bank0
  4648  0B34  1303               	bcf	3,6	;RP1=0, select bank0
  4649  0B35  0820               	movf	?___wmul,w
  4650  0B36  00AF               	movwf	??_wallFollow
  4651  0B37  0821               	movf	?___wmul+1,w
  4652  0B38  00B0               	movwf	??_wallFollow+1
  4653  0B39  084D               	movf	_ADC_ADJUST,w
  4654  0B3A  3E0A               	addlw	10
  4655  0B3B  00A0               	movwf	___lwdiv@divisor
  4656  0B3C  084E               	movf	_ADC_ADJUST+1,w
  4657  0B3D  1803               	skipnc
  4658  0B3E  3E01               	addlw	1
  4659  0B3F  3E00               	addlw	0
  4660  0B40  00A1               	movwf	___lwdiv@divisor+1
  4661  0B41  086D               	movf	_CURRENT_SPEED_R+1,w
  4662  0B42  00A3               	movwf	___lwdiv@dividend+1
  4663  0B43  086C               	movf	_CURRENT_SPEED_R,w
  4664  0B44  00A2               	movwf	___lwdiv@dividend
  4665  0B45  160A  118A  27C2  120A  158A  	fcall	___lwdiv
  4666  0B4A  1283               	bcf	3,5	;RP0=0, select bank0
  4667  0B4B  1303               	bcf	3,6	;RP1=0, select bank0
  4668  0B4C  0820               	movf	?___lwdiv,w
  4669  0B4D  072F               	addwf	??_wallFollow,w
  4670  0B4E  00B1               	movwf	??_wallFollow+2
  4671  0B4F  0821               	movf	?___lwdiv+1,w
  4672  0B50  1803               	skipnc
  4673  0B51  0A21               	incf	?___lwdiv+1,w
  4674  0B52  0730               	addwf	??_wallFollow+1,w
  4675  0B53  00B2               	movwf	??_wallFollow+3
  4676  0B54  086C               	movf	_CURRENT_SPEED_R,w
  4677  0B55  0731               	addwf	??_wallFollow+2,w
  4678  0B56  1683               	bsf	3,5	;RP0=1, select bank1
  4679  0B57  1303               	bcf	3,6	;RP1=0, select bank1
  4680  0B58  00C2               	movwf	_ADJUSTED_SPEED_R^(0+128)
  4681  0B59  1283               	bcf	3,5	;RP0=0, select bank0
  4682  0B5A  1303               	bcf	3,6	;RP1=0, select bank0
  4683  0B5B  086D               	movf	_CURRENT_SPEED_R+1,w
  4684  0B5C  1803               	skipnc
  4685  0B5D  0A6D               	incf	_CURRENT_SPEED_R+1,w
  4686  0B5E  0732               	addwf	??_wallFollow+3,w
  4687  0B5F  1683               	bsf	3,5	;RP0=1, select bank1
  4688  0B60  1303               	bcf	3,6	;RP1=0, select bank1
  4689  0B61  00C3               	movwf	(_ADJUSTED_SPEED_R+1)^(0+128)
  4690                           
  4691                           ;main.c: 40: ADJUSTED_SPEED_L = CURRENT_SPEED_L;
  4692  0B62  1283               	bcf	3,5	;RP0=0, select bank0
  4693  0B63  1303               	bcf	3,6	;RP1=0, select bank0
  4694  0B64  086B               	movf	_CURRENT_SPEED_L+1,w
  4695  0B65  1683               	bsf	3,5	;RP0=1, select bank1
  4696  0B66  1303               	bcf	3,6	;RP1=0, select bank1
  4697  0B67  00C1               	movwf	(_ADJUSTED_SPEED_L+1)^(0+128)
  4698  0B68  1283               	bcf	3,5	;RP0=0, select bank0
  4699  0B69  1303               	bcf	3,6	;RP1=0, select bank0
  4700  0B6A  086A               	movf	_CURRENT_SPEED_L,w
  4701  0B6B  1683               	bsf	3,5	;RP0=1, select bank1
  4702  0B6C  1303               	bcf	3,6	;RP1=0, select bank1
  4703  0B6D  00C0               	movwf	_ADJUSTED_SPEED_L^(0+128)
  4704  0B6E                     l4099:	
  4705                           
  4706                           ;main.c: 42: }
  4707                           ;main.c: 44: DriveDirect(ADJUSTED_SPEED_R,ADJUSTED_SPEED_L);
  4708  0B6E  1683               	bsf	3,5	;RP0=1, select bank1
  4709  0B6F  1303               	bcf	3,6	;RP1=0, select bank1
  4710  0B70  0843               	movf	(_ADJUSTED_SPEED_R+1)^(0+128),w
  4711  0B71  1283               	bcf	3,5	;RP0=0, select bank0
  4712  0B72  1303               	bcf	3,6	;RP1=0, select bank0
  4713  0B73  00A2               	movwf	DriveDirect@VelocityRight+1
  4714  0B74  1683               	bsf	3,5	;RP0=1, select bank1
  4715  0B75  1303               	bcf	3,6	;RP1=0, select bank1
  4716  0B76  0842               	movf	_ADJUSTED_SPEED_R^(0+128),w
  4717  0B77  1283               	bcf	3,5	;RP0=0, select bank0
  4718  0B78  1303               	bcf	3,6	;RP1=0, select bank0
  4719  0B79  00A1               	movwf	DriveDirect@VelocityRight
  4720  0B7A  1683               	bsf	3,5	;RP0=1, select bank1
  4721  0B7B  1303               	bcf	3,6	;RP1=0, select bank1
  4722  0B7C  0841               	movf	(_ADJUSTED_SPEED_L+1)^(0+128),w
  4723  0B7D  1283               	bcf	3,5	;RP0=0, select bank0
  4724  0B7E  1303               	bcf	3,6	;RP1=0, select bank0
  4725  0B7F  00A4               	movwf	DriveDirect@VelocityLeft+1
  4726  0B80  1683               	bsf	3,5	;RP0=1, select bank1
  4727  0B81  1303               	bcf	3,6	;RP1=0, select bank1
  4728  0B82  0840               	movf	_ADJUSTED_SPEED_L^(0+128),w
  4729  0B83  1283               	bcf	3,5	;RP0=0, select bank0
  4730  0B84  1303               	bcf	3,6	;RP1=0, select bank0
  4731  0B85  00A3               	movwf	DriveDirect@VelocityLeft
  4732  0B86  120A  158A  20BD   	fcall	_DriveDirect
  4733  0B89  0008               	return
  4734  0B8A                     __end_of_wallFollow:	
  4735                           
  4736                           	psect	text12
  4737  16EB                     __ptext12:	
  4738 ;; *************** function ___wmul *****************
  4739 ;; Defined at:
  4740 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  4741 ;; Parameters:    Size  Location     Type
  4742 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4743 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4744 ;; Auto vars:     Size  Location     Type
  4745 ;;  product         2    4[BANK0 ] unsigned int 
  4746 ;; Return value:  Size  Location     Type
  4747 ;;                  2    0[BANK0 ] unsigned int 
  4748 ;; Registers used:
  4749 ;;		wreg, status,2, status,0
  4750 ;; Tracked objects:
  4751 ;;		On entry : 0/0
  4752 ;;		On exit  : 0/0
  4753 ;;		Unchanged: 0/0
  4754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4755 ;;      Params:         0       4       0       0       0
  4756 ;;      Locals:         0       2       0       0       0
  4757 ;;      Temps:          0       0       0       0       0
  4758 ;;      Totals:         0       6       0       0       0
  4759 ;;Total ram usage:        6 bytes
  4760 ;; Hardware stack levels used:    1
  4761 ;; Hardware stack levels required when called:    1
  4762 ;; This function calls:
  4763 ;;		Nothing
  4764 ;; This function is called by:
  4765 ;;		_wallFollow
  4766 ;; This function uses a non-reentrant model
  4767 ;;
  4768                           
  4769                           
  4770                           ;psect for function ___wmul
  4771  16EB                     ___wmul:	
  4772                           
  4773                           ;incstack = 0
  4774                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4775  16EB  1283               	bcf	3,5	;RP0=0, select bank0
  4776  16EC  1303               	bcf	3,6	;RP1=0, select bank0
  4777  16ED  01A4               	clrf	___wmul@product
  4778  16EE  01A5               	clrf	___wmul@product+1
  4779  16EF                     l4035:	
  4780  16EF  1C20               	btfss	___wmul@multiplier,0
  4781  16F0  2EF7               	goto	l1109
  4782  16F1  0822               	movf	___wmul@multiplicand,w
  4783  16F2  07A4               	addwf	___wmul@product,f
  4784  16F3  1803               	skipnc
  4785  16F4  0AA5               	incf	___wmul@product+1,f
  4786  16F5  0823               	movf	___wmul@multiplicand+1,w
  4787  16F6  07A5               	addwf	___wmul@product+1,f
  4788  16F7                     l1109:	
  4789  16F7  3001               	movlw	1
  4790  16F8                     u2705:	
  4791  16F8  1003               	clrc
  4792  16F9  0DA2               	rlf	___wmul@multiplicand,f
  4793  16FA  0DA3               	rlf	___wmul@multiplicand+1,f
  4794  16FB  3EFF               	addlw	-1
  4795  16FC  1D03               	skipz
  4796  16FD  2EF8               	goto	u2705
  4797  16FE  3001               	movlw	1
  4798  16FF                     u2715:	
  4799  16FF  1003               	clrc
  4800  1700  0CA1               	rrf	___wmul@multiplier+1,f
  4801  1701  0CA0               	rrf	___wmul@multiplier,f
  4802  1702  3EFF               	addlw	-1
  4803  1703  1D03               	skipz
  4804  1704  2EFF               	goto	u2715
  4805  1705  0820               	movf	___wmul@multiplier,w
  4806  1706  0421               	iorwf	___wmul@multiplier+1,w
  4807  1707  1D03               	btfss	3,2
  4808  1708  2EEF               	goto	l4035
  4809  1709  0825               	movf	___wmul@product+1,w
  4810  170A  00A1               	movwf	?___wmul+1
  4811  170B  0824               	movf	___wmul@product,w
  4812  170C  00A0               	movwf	?___wmul
  4813  170D  0008               	return
  4814  170E                     __end_of___wmul:	
  4815                           
  4816                           	psect	text13
  4817  17C2                     __ptext13:	
  4818 ;; *************** function ___lwdiv *****************
  4819 ;; Defined at:
  4820 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;  divisor         2    0[BANK0 ] unsigned int 
  4823 ;;  dividend        2    2[BANK0 ] unsigned int 
  4824 ;; Auto vars:     Size  Location     Type
  4825 ;;  quotient        2    6[BANK0 ] unsigned int 
  4826 ;;  counter         1    5[BANK0 ] unsigned char 
  4827 ;; Return value:  Size  Location     Type
  4828 ;;                  2    0[BANK0 ] unsigned int 
  4829 ;; Registers used:
  4830 ;;		wreg, status,2, status,0
  4831 ;; Tracked objects:
  4832 ;;		On entry : 0/0
  4833 ;;		On exit  : 0/0
  4834 ;;		Unchanged: 0/0
  4835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4836 ;;      Params:         0       4       0       0       0
  4837 ;;      Locals:         0       3       0       0       0
  4838 ;;      Temps:          0       1       0       0       0
  4839 ;;      Totals:         0       8       0       0       0
  4840 ;;Total ram usage:        8 bytes
  4841 ;; Hardware stack levels used:    1
  4842 ;; Hardware stack levels required when called:    1
  4843 ;; This function calls:
  4844 ;;		Nothing
  4845 ;; This function is called by:
  4846 ;;		_wallFollow
  4847 ;; This function uses a non-reentrant model
  4848 ;;
  4849                           
  4850                           
  4851                           ;psect for function ___lwdiv
  4852  17C2                     ___lwdiv:	
  4853                           
  4854                           ;incstack = 0
  4855                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4856  17C2  1283               	bcf	3,5	;RP0=0, select bank0
  4857  17C3  1303               	bcf	3,6	;RP1=0, select bank0
  4858  17C4  01A6               	clrf	___lwdiv@quotient
  4859  17C5  01A7               	clrf	___lwdiv@quotient+1
  4860  17C6  0820               	movf	___lwdiv@divisor,w
  4861  17C7  0421               	iorwf	___lwdiv@divisor+1,w
  4862  17C8  1903               	btfsc	3,2
  4863  17C9  2FFB               	goto	l4069
  4864  17CA  01A5               	clrf	___lwdiv@counter
  4865  17CB  0AA5               	incf	___lwdiv@counter,f
  4866  17CC                     l4057:	
  4867  17CC  1BA1               	btfsc	___lwdiv@divisor+1,7
  4868  17CD  2FDA               	goto	l4059
  4869  17CE  3001               	movlw	1
  4870  17CF                     u2745:	
  4871  17CF  1003               	clrc
  4872  17D0  0DA0               	rlf	___lwdiv@divisor,f
  4873  17D1  0DA1               	rlf	___lwdiv@divisor+1,f
  4874  17D2  3EFF               	addlw	-1
  4875  17D3  1D03               	skipz
  4876  17D4  2FCF               	goto	u2745
  4877  17D5  3001               	movlw	1
  4878  17D6  00A4               	movwf	??___lwdiv
  4879  17D7  0824               	movf	??___lwdiv,w
  4880  17D8  07A5               	addwf	___lwdiv@counter,f
  4881  17D9  2FCC               	goto	l4057
  4882  17DA                     l4059:	
  4883  17DA  3001               	movlw	1
  4884  17DB                     u2765:	
  4885  17DB  1003               	clrc
  4886  17DC  0DA6               	rlf	___lwdiv@quotient,f
  4887  17DD  0DA7               	rlf	___lwdiv@quotient+1,f
  4888  17DE  3EFF               	addlw	-1
  4889  17DF  1D03               	skipz
  4890  17E0  2FDB               	goto	u2765
  4891  17E1  0821               	movf	___lwdiv@divisor+1,w
  4892  17E2  0223               	subwf	___lwdiv@dividend+1,w
  4893  17E3  1D03               	skipz
  4894  17E4  2FE7               	goto	u2775
  4895  17E5  0820               	movf	___lwdiv@divisor,w
  4896  17E6  0222               	subwf	___lwdiv@dividend,w
  4897  17E7                     u2775:	
  4898  17E7  1C03               	skipc
  4899  17E8  2FF0               	goto	l4065
  4900  17E9  0820               	movf	___lwdiv@divisor,w
  4901  17EA  02A2               	subwf	___lwdiv@dividend,f
  4902  17EB  0821               	movf	___lwdiv@divisor+1,w
  4903  17EC  1C03               	skipc
  4904  17ED  03A3               	decf	___lwdiv@dividend+1,f
  4905  17EE  02A3               	subwf	___lwdiv@dividend+1,f
  4906  17EF  1426               	bsf	___lwdiv@quotient,0
  4907  17F0                     l4065:	
  4908  17F0  3001               	movlw	1
  4909  17F1                     u2785:	
  4910  17F1  1003               	clrc
  4911  17F2  0CA1               	rrf	___lwdiv@divisor+1,f
  4912  17F3  0CA0               	rrf	___lwdiv@divisor,f
  4913  17F4  3EFF               	addlw	-1
  4914  17F5  1D03               	skipz
  4915  17F6  2FF1               	goto	u2785
  4916  17F7  3001               	movlw	1
  4917  17F8  02A5               	subwf	___lwdiv@counter,f
  4918  17F9  1D03               	btfss	3,2
  4919  17FA  2FDA               	goto	l4059
  4920  17FB                     l4069:	
  4921  17FB  0827               	movf	___lwdiv@quotient+1,w
  4922  17FC  00A1               	movwf	?___lwdiv+1
  4923  17FD  0826               	movf	___lwdiv@quotient,w
  4924  17FE  00A0               	movwf	?___lwdiv
  4925  17FF  0008               	return
  4926  1800                     __end_of___lwdiv:	
  4927                           
  4928                           	psect	text14
  4929  08BD                     __ptext14:	
  4930 ;; *************** function _DriveDirect *****************
  4931 ;; Defined at:
  4932 ;;		line 54 in file "ser.c"
  4933 ;; Parameters:    Size  Location     Type
  4934 ;;  VelocityRigh    2    1[BANK0 ] int 
  4935 ;;  VelocityLeft    2    3[BANK0 ] int 
  4936 ;; Auto vars:     Size  Location     Type
  4937 ;;  data            2    8[BANK0 ] unsigned int 
  4938 ;;  data            2    6[BANK0 ] unsigned int 
  4939 ;; Return value:  Size  Location     Type
  4940 ;;                  1    wreg      void 
  4941 ;; Registers used:
  4942 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4943 ;; Tracked objects:
  4944 ;;		On entry : 0/0
  4945 ;;		On exit  : 0/0
  4946 ;;		Unchanged: 0/0
  4947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4948 ;;      Params:         0       4       0       0       0
  4949 ;;      Locals:         0       4       0       0       0
  4950 ;;      Temps:          0       1       0       0       0
  4951 ;;      Totals:         0       9       0       0       0
  4952 ;;Total ram usage:        9 bytes
  4953 ;; Hardware stack levels used:    1
  4954 ;; Hardware stack levels required when called:    2
  4955 ;; This function calls:
  4956 ;;		_ser_putch
  4957 ;; This function is called by:
  4958 ;;		_wallFollow
  4959 ;;		_Drive1m
  4960 ;;		_Turn90
  4961 ;;		_re_route
  4962 ;;		_main
  4963 ;; This function uses a non-reentrant model
  4964 ;;
  4965                           
  4966                           
  4967                           ;psect for function _DriveDirect
  4968  08BD                     _DriveDirect:	
  4969                           
  4970                           ;ser.c: 55: RightSpeedH = 0;
  4971                           
  4972                           ;incstack = 0
  4973                           ; Regs used in _DriveDirect: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4974  08BD  1283               	bcf	3,5	;RP0=0, select bank0
  4975  08BE  1303               	bcf	3,6	;RP1=0, select bank0
  4976  08BF  01D7               	clrf	_RightSpeedH
  4977                           
  4978                           ;ser.c: 56: LeftSpeedH = 0;
  4979  08C0  01D3               	clrf	_LeftSpeedH
  4980                           
  4981                           ;ser.c: 58: if(VelocityRight > 255){
  4982  08C1  0822               	movf	DriveDirect@VelocityRight+1,w
  4983  08C2  3A80               	xorlw	128
  4984  08C3  00FF               	movwf	127
  4985  08C4  3081               	movlw	129
  4986  08C5  027F               	subwf	127,w
  4987  08C6  1D03               	skipz
  4988  08C7  28CA               	goto	u2625
  4989  08C8  3000               	movlw	0
  4990  08C9  0221               	subwf	DriveDirect@VelocityRight,w
  4991  08CA                     u2625:	
  4992  08CA  1C03               	skipc
  4993  08CB  28ED               	goto	l3999
  4994                           
  4995                           ;ser.c: 59: unsigned int data = VelocityRight;
  4996  08CC  1283               	bcf	3,5	;RP0=0, select bank0
  4997  08CD  1303               	bcf	3,6	;RP1=0, select bank0
  4998  08CE  0822               	movf	DriveDirect@VelocityRight+1,w
  4999  08CF  00A7               	movwf	DriveDirect@data+1
  5000  08D0  0821               	movf	DriveDirect@VelocityRight,w
  5001  08D1  00A6               	movwf	DriveDirect@data
  5002                           
  5003                           ;ser.c: 60: for (RightSpeedH = 0; data > 255; RightSpeedH++){
  5004  08D2  01D7               	clrf	_RightSpeedH
  5005  08D3  3001               	movlw	1
  5006  08D4  0227               	subwf	DriveDirect@data+1,w
  5007  08D5  3000               	movlw	0
  5008  08D6  1903               	skipnz
  5009  08D7  0226               	subwf	DriveDirect@data,w
  5010  08D8  1C03               	btfss	3,0
  5011  08D9  28ED               	goto	l3999
  5012  08DA                     l3995:	
  5013                           
  5014                           ;ser.c: 61: data = data - 256;
  5015  08DA  0826               	movf	DriveDirect@data,w
  5016  08DB  3E00               	addlw	0
  5017  08DC  00A6               	movwf	DriveDirect@data
  5018  08DD  0827               	movf	DriveDirect@data+1,w
  5019  08DE  1803               	skipnc
  5020  08DF  3E01               	addlw	1
  5021  08E0  3EFF               	addlw	255
  5022  08E1  00A7               	movwf	DriveDirect@data+1
  5023  08E2  3001               	movlw	1
  5024  08E3  00A5               	movwf	??_DriveDirect
  5025  08E4  0825               	movf	??_DriveDirect,w
  5026  08E5  07D7               	addwf	_RightSpeedH,f
  5027  08E6  3001               	movlw	1
  5028  08E7  0227               	subwf	DriveDirect@data+1,w
  5029  08E8  3000               	movlw	0
  5030  08E9  1903               	skipnz
  5031  08EA  0226               	subwf	DriveDirect@data,w
  5032  08EB  1803               	skipnc
  5033  08EC  28DA               	goto	l3995
  5034  08ED                     l3999:	
  5035                           
  5036                           ;ser.c: 62: }
  5037                           ;ser.c: 63: }
  5038                           ;ser.c: 64: RightSpeedL = VelocityRight;
  5039  08ED  1283               	bcf	3,5	;RP0=0, select bank0
  5040  08EE  1303               	bcf	3,6	;RP1=0, select bank0
  5041  08EF  0821               	movf	DriveDirect@VelocityRight,w
  5042  08F0  00A5               	movwf	??_DriveDirect
  5043  08F1  0825               	movf	??_DriveDirect,w
  5044  08F2  00D8               	movwf	_RightSpeedL
  5045                           
  5046                           ;ser.c: 67: if(VelocityLeft > 255){
  5047  08F3  0824               	movf	DriveDirect@VelocityLeft+1,w
  5048  08F4  3A80               	xorlw	128
  5049  08F5  00FF               	movwf	127
  5050  08F6  3081               	movlw	129
  5051  08F7  027F               	subwf	127,w
  5052  08F8  1D03               	skipz
  5053  08F9  28FC               	goto	u2655
  5054  08FA  3000               	movlw	0
  5055  08FB  0223               	subwf	DriveDirect@VelocityLeft,w
  5056  08FC                     u2655:	
  5057  08FC  1C03               	skipc
  5058  08FD  291F               	goto	l4015
  5059                           
  5060                           ;ser.c: 68: unsigned int data = VelocityLeft;
  5061  08FE  1283               	bcf	3,5	;RP0=0, select bank0
  5062  08FF  1303               	bcf	3,6	;RP1=0, select bank0
  5063  0900  0824               	movf	DriveDirect@VelocityLeft+1,w
  5064  0901  00A9               	movwf	DriveDirect@data_485+1
  5065  0902  0823               	movf	DriveDirect@VelocityLeft,w
  5066  0903  00A8               	movwf	DriveDirect@data_485
  5067                           
  5068                           ;ser.c: 69: for (LeftSpeedH = 0; data > 255; LeftSpeedH++){
  5069  0904  01D3               	clrf	_LeftSpeedH
  5070  0905  3001               	movlw	1
  5071  0906  0229               	subwf	DriveDirect@data_485+1,w
  5072  0907  3000               	movlw	0
  5073  0908  1903               	skipnz
  5074  0909  0228               	subwf	DriveDirect@data_485,w
  5075  090A  1C03               	btfss	3,0
  5076  090B  291F               	goto	l4015
  5077  090C                     l4011:	
  5078                           
  5079                           ;ser.c: 70: data = data - 256;
  5080  090C  0828               	movf	DriveDirect@data_485,w
  5081  090D  3E00               	addlw	0
  5082  090E  00A8               	movwf	DriveDirect@data_485
  5083  090F  0829               	movf	DriveDirect@data_485+1,w
  5084  0910  1803               	skipnc
  5085  0911  3E01               	addlw	1
  5086  0912  3EFF               	addlw	255
  5087  0913  00A9               	movwf	DriveDirect@data_485+1
  5088  0914  3001               	movlw	1
  5089  0915  00A5               	movwf	??_DriveDirect
  5090  0916  0825               	movf	??_DriveDirect,w
  5091  0917  07D3               	addwf	_LeftSpeedH,f
  5092  0918  3001               	movlw	1
  5093  0919  0229               	subwf	DriveDirect@data_485+1,w
  5094  091A  3000               	movlw	0
  5095  091B  1903               	skipnz
  5096  091C  0228               	subwf	DriveDirect@data_485,w
  5097  091D  1803               	skipnc
  5098  091E  290C               	goto	l4011
  5099  091F                     l4015:	
  5100                           
  5101                           ;ser.c: 71: }
  5102                           ;ser.c: 72: }
  5103                           ;ser.c: 73: LeftSpeedL = VelocityLeft;
  5104  091F  1283               	bcf	3,5	;RP0=0, select bank0
  5105  0920  1303               	bcf	3,6	;RP1=0, select bank0
  5106  0921  0823               	movf	DriveDirect@VelocityLeft,w
  5107  0922  00A5               	movwf	??_DriveDirect
  5108  0923  0825               	movf	??_DriveDirect,w
  5109  0924  00D4               	movwf	_LeftSpeedL
  5110                           
  5111                           ;ser.c: 76: ser_putch(145);
  5112  0925  3091               	movlw	145
  5113  0926  160A  118A  260D  120A  158A  	fcall	_ser_putch
  5114                           
  5115                           ;ser.c: 77: ser_putch(RightSpeedH);
  5116  092B  1283               	bcf	3,5	;RP0=0, select bank0
  5117  092C  1303               	bcf	3,6	;RP1=0, select bank0
  5118  092D  0857               	movf	_RightSpeedH,w
  5119  092E  160A  118A  260D  120A  158A  	fcall	_ser_putch
  5120                           
  5121                           ;ser.c: 78: ser_putch(RightSpeedL);
  5122  0933  1283               	bcf	3,5	;RP0=0, select bank0
  5123  0934  1303               	bcf	3,6	;RP1=0, select bank0
  5124  0935  0858               	movf	_RightSpeedL,w
  5125  0936  160A  118A  260D  120A  158A  	fcall	_ser_putch
  5126                           
  5127                           ;ser.c: 79: ser_putch(LeftSpeedH);
  5128  093B  1283               	bcf	3,5	;RP0=0, select bank0
  5129  093C  1303               	bcf	3,6	;RP1=0, select bank0
  5130  093D  0853               	movf	_LeftSpeedH,w
  5131  093E  160A  118A  260D  120A  158A  	fcall	_ser_putch
  5132                           
  5133                           ;ser.c: 80: ser_putch(LeftSpeedL);
  5134  0943  1283               	bcf	3,5	;RP0=0, select bank0
  5135  0944  1303               	bcf	3,6	;RP1=0, select bank0
  5136  0945  0854               	movf	_LeftSpeedL,w
  5137  0946  160A  118A  260D   	fcall	_ser_putch
  5138  0949  0008               	return
  5139  094A                     __end_of_DriveDirect:	
  5140                           
  5141                           	psect	text15
  5142  1687                     __ptext15:	
  5143 ;; *************** function _ADCMain *****************
  5144 ;; Defined at:
  5145 ;;		line 16 in file "ADC.c"
  5146 ;; Parameters:    Size  Location     Type
  5147 ;;		None
  5148 ;; Auto vars:     Size  Location     Type
  5149 ;;		None
  5150 ;; Return value:  Size  Location     Type
  5151 ;;                  1    wreg      void 
  5152 ;; Registers used:
  5153 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5154 ;; Tracked objects:
  5155 ;;		On entry : 0/0
  5156 ;;		On exit  : 0/0
  5157 ;;		Unchanged: 0/0
  5158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5159 ;;      Params:         0       0       0       0       0
  5160 ;;      Locals:         0       0       0       0       0
  5161 ;;      Temps:          0       0       0       0       0
  5162 ;;      Totals:         0       0       0       0       0
  5163 ;;Total ram usage:        0 bytes
  5164 ;; Hardware stack levels used:    1
  5165 ;; Hardware stack levels required when called:    3
  5166 ;; This function calls:
  5167 ;;		_getADC
  5168 ;;		_lcdSetCursor
  5169 ;;		_lcdWriteToDigitBCD
  5170 ;; This function is called by:
  5171 ;;		_wallFollow
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           
  5176                           ;psect for function _ADCMain
  5177  1687                     _ADCMain:	
  5178                           
  5179                           ;ADC.c: 18: getADC();
  5180                           
  5181                           ;incstack = 0
  5182                           ; Regs used in _ADCMain: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5183  1687  120A  158A  2078  160A  118A  	fcall	_getADC
  5184                           
  5185                           ;ADC.c: 19: lcdSetCursor(0b10000000);
  5186  168C  3080               	movlw	128
  5187  168D  160A  118A  25FA  160A  118A  	fcall	_lcdSetCursor
  5188                           
  5189                           ;ADC.c: 20: lcdWriteToDigitBCD(adcRAW);
  5190  1692  1283               	bcf	3,5	;RP0=0, select bank0
  5191  1693  1303               	bcf	3,6	;RP1=0, select bank0
  5192  1694  0850               	movf	_adcRAW+1,w	;volatile
  5193  1695  00A4               	movwf	lcdWriteToDigitBCD@data+1
  5194  1696  084F               	movf	_adcRAW,w	;volatile
  5195  1697  00A3               	movwf	lcdWriteToDigitBCD@data
  5196  1698  120A  158A  214A   	fcall	_lcdWriteToDigitBCD
  5197  169B  0008               	return
  5198  169C                     __end_of_ADCMain:	
  5199                           
  5200                           	psect	text16
  5201  094A                     __ptext16:	
  5202 ;; *************** function _lcdWriteToDigitBCD *****************
  5203 ;; Defined at:
  5204 ;;		line 38 in file "LCD.c"
  5205 ;; Parameters:    Size  Location     Type
  5206 ;;  data            2    3[BANK0 ] unsigned int 
  5207 ;; Auto vars:     Size  Location     Type
  5208 ;;  OnesDigit       2   13[BANK0 ] unsigned int 
  5209 ;;  TenThouDigit    2   11[BANK0 ] unsigned int 
  5210 ;;  ThouDigit       2    9[BANK0 ] unsigned int 
  5211 ;;  HunsDigit       2    7[BANK0 ] unsigned int 
  5212 ;;  TensDigit       2    5[BANK0 ] unsigned int 
  5213 ;; Return value:  Size  Location     Type
  5214 ;;                  1    wreg      void 
  5215 ;; Registers used:
  5216 ;;		wreg, status,2, status,0, pclath, cstack
  5217 ;; Tracked objects:
  5218 ;;		On entry : 0/0
  5219 ;;		On exit  : 0/0
  5220 ;;		Unchanged: 0/0
  5221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5222 ;;      Params:         0       2       0       0       0
  5223 ;;      Locals:         0      10       0       0       0
  5224 ;;      Temps:          0       0       0       0       0
  5225 ;;      Totals:         0      12       0       0       0
  5226 ;;Total ram usage:       12 bytes
  5227 ;; Hardware stack levels used:    1
  5228 ;; Hardware stack levels required when called:    2
  5229 ;; This function calls:
  5230 ;;		_lcdWriteData
  5231 ;; This function is called by:
  5232 ;;		_ADCMain
  5233 ;; This function uses a non-reentrant model
  5234 ;;
  5235                           
  5236                           
  5237                           ;psect for function _lcdWriteToDigitBCD
  5238  094A                     _lcdWriteToDigitBCD:	
  5239                           
  5240                           ;LCD.c: 39: unsigned int OnesDigit, TensDigit, HunsDigit, ThouDigit, TenThouDigit;
  5241                           ;LCD.c: 42: OnesDigit = data;
  5242                           
  5243                           ;incstack = 0
  5244                           ; Regs used in _lcdWriteToDigitBCD: [wreg+status,2+status,0+pclath+cstack]
  5245  094A  1283               	bcf	3,5	;RP0=0, select bank0
  5246  094B  1303               	bcf	3,6	;RP1=0, select bank0
  5247  094C  0824               	movf	lcdWriteToDigitBCD@data+1,w
  5248  094D  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  5249  094E  0823               	movf	lcdWriteToDigitBCD@data,w
  5250  094F  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  5251                           
  5252                           ;LCD.c: 43: TensDigit = 0;
  5253  0950  01A5               	clrf	lcdWriteToDigitBCD@TensDigit
  5254  0951  01A6               	clrf	lcdWriteToDigitBCD@TensDigit+1
  5255                           
  5256                           ;LCD.c: 44: HunsDigit = 0;
  5257  0952  01A7               	clrf	lcdWriteToDigitBCD@HunsDigit
  5258  0953  01A8               	clrf	lcdWriteToDigitBCD@HunsDigit+1
  5259                           
  5260                           ;LCD.c: 45: ThouDigit = 0;
  5261  0954  01A9               	clrf	lcdWriteToDigitBCD@ThouDigit
  5262  0955  01AA               	clrf	lcdWriteToDigitBCD@ThouDigit+1
  5263                           
  5264                           ;LCD.c: 46: TenThouDigit = 0;
  5265  0956  01AB               	clrf	lcdWriteToDigitBCD@TenThouDigit
  5266  0957  01AC               	clrf	lcdWriteToDigitBCD@TenThouDigit+1
  5267  0958                     l3931:	
  5268                           ;LCD.c: 49: while (OnesDigit >= 10000){
  5269                           
  5270  0958  3027               	movlw	39
  5271  0959  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  5272  095A  3010               	movlw	16
  5273  095B  1903               	skipnz
  5274  095C  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  5275  095D  1C03               	btfss	3,0
  5276  095E  297C               	goto	l3937
  5277                           
  5278                           ;LCD.c: 50: OnesDigit = OnesDigit - 10000;
  5279  095F  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  5280  0960  3EF0               	addlw	240
  5281  0961  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  5282  0962  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  5283  0963  1803               	skipnc
  5284  0964  3E01               	addlw	1
  5285  0965  3ED8               	addlw	216
  5286  0966  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  5287                           
  5288                           ;LCD.c: 51: TenThouDigit++;
  5289  0967  3001               	movlw	1
  5290  0968  07AB               	addwf	lcdWriteToDigitBCD@TenThouDigit,f
  5291  0969  1803               	skipnc
  5292  096A  0AAC               	incf	lcdWriteToDigitBCD@TenThouDigit+1,f
  5293  096B  3000               	movlw	0
  5294  096C  07AC               	addwf	lcdWriteToDigitBCD@TenThouDigit+1,f
  5295  096D  2958               	goto	l3931
  5296  096E                     l3933:	
  5297                           ;LCD.c: 52: }
  5298                           ;LCD.c: 54: while (OnesDigit >= 1000){
  5299                           
  5300                           
  5301                           ;LCD.c: 55: OnesDigit = OnesDigit - 1000;
  5302  096E  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  5303  096F  3E18               	addlw	24
  5304  0970  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  5305  0971  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  5306  0972  1803               	skipnc
  5307  0973  3E01               	addlw	1
  5308  0974  3EFC               	addlw	252
  5309  0975  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  5310                           
  5311                           ;LCD.c: 56: ThouDigit++;
  5312  0976  3001               	movlw	1
  5313  0977  07A9               	addwf	lcdWriteToDigitBCD@ThouDigit,f
  5314  0978  1803               	skipnc
  5315  0979  0AAA               	incf	lcdWriteToDigitBCD@ThouDigit+1,f
  5316  097A  3000               	movlw	0
  5317  097B  07AA               	addwf	lcdWriteToDigitBCD@ThouDigit+1,f
  5318  097C                     l3937:	
  5319  097C  3003               	movlw	3
  5320  097D  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  5321  097E  30E8               	movlw	232
  5322  097F  1903               	skipnz
  5323  0980  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  5324  0981  1C03               	btfss	3,0
  5325  0982  2992               	goto	l3943
  5326  0983  296E               	goto	l3933
  5327  0984                     l3939:	
  5328                           ;LCD.c: 57: }
  5329                           ;LCD.c: 59: while (OnesDigit >= 100){
  5330                           
  5331                           
  5332                           ;LCD.c: 60: OnesDigit = OnesDigit - 100;
  5333  0984  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  5334  0985  3E9C               	addlw	156
  5335  0986  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  5336  0987  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  5337  0988  1803               	skipnc
  5338  0989  3E01               	addlw	1
  5339  098A  3EFF               	addlw	255
  5340  098B  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  5341                           
  5342                           ;LCD.c: 61: HunsDigit++;
  5343  098C  3001               	movlw	1
  5344  098D  07A7               	addwf	lcdWriteToDigitBCD@HunsDigit,f
  5345  098E  1803               	skipnc
  5346  098F  0AA8               	incf	lcdWriteToDigitBCD@HunsDigit+1,f
  5347  0990  3000               	movlw	0
  5348  0991  07A8               	addwf	lcdWriteToDigitBCD@HunsDigit+1,f
  5349  0992                     l3943:	
  5350  0992  3000               	movlw	0
  5351  0993  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  5352  0994  3064               	movlw	100
  5353  0995  1903               	skipnz
  5354  0996  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  5355  0997  1C03               	btfss	3,0
  5356  0998  29A8               	goto	l3949
  5357  0999  2984               	goto	l3939
  5358  099A                     l3945:	
  5359                           ;LCD.c: 62: }
  5360                           ;LCD.c: 64: while (OnesDigit >= 10){
  5361                           
  5362                           
  5363                           ;LCD.c: 65: OnesDigit = OnesDigit - 10;
  5364  099A  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  5365  099B  3EF6               	addlw	246
  5366  099C  00AD               	movwf	lcdWriteToDigitBCD@OnesDigit
  5367  099D  082E               	movf	lcdWriteToDigitBCD@OnesDigit+1,w
  5368  099E  1803               	skipnc
  5369  099F  3E01               	addlw	1
  5370  09A0  3EFF               	addlw	255
  5371  09A1  00AE               	movwf	lcdWriteToDigitBCD@OnesDigit+1
  5372                           
  5373                           ;LCD.c: 66: TensDigit++;
  5374  09A2  3001               	movlw	1
  5375  09A3  07A5               	addwf	lcdWriteToDigitBCD@TensDigit,f
  5376  09A4  1803               	skipnc
  5377  09A5  0AA6               	incf	lcdWriteToDigitBCD@TensDigit+1,f
  5378  09A6  3000               	movlw	0
  5379  09A7  07A6               	addwf	lcdWriteToDigitBCD@TensDigit+1,f
  5380  09A8                     l3949:	
  5381  09A8  3000               	movlw	0
  5382  09A9  022E               	subwf	lcdWriteToDigitBCD@OnesDigit+1,w
  5383  09AA  300A               	movlw	10
  5384  09AB  1903               	skipnz
  5385  09AC  022D               	subwf	lcdWriteToDigitBCD@OnesDigit,w
  5386  09AD  1803               	skipnc
  5387  09AE  299A               	goto	l3945
  5388                           
  5389                           ;LCD.c: 67: }
  5390                           ;LCD.c: 69: if (TenThouDigit > 0)
  5391  09AF  082B               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  5392  09B0  042C               	iorwf	lcdWriteToDigitBCD@TenThouDigit+1,w
  5393  09B1  1903               	btfsc	3,2
  5394  09B2  29BA               	goto	l3955
  5395                           
  5396                           ;LCD.c: 70: lcdWriteData((unsigned int)TenThouDigit + 48);
  5397  09B3  082B               	movf	lcdWriteToDigitBCD@TenThouDigit,w
  5398  09B4  3E30               	addlw	48
  5399  09B5  160A  118A  264C  120A  158A  	fcall	_lcdWriteData
  5400  09BA                     l3955:	
  5401                           
  5402                           ;LCD.c: 72: if (ThouDigit > 0)
  5403  09BA  1283               	bcf	3,5	;RP0=0, select bank0
  5404  09BB  1303               	bcf	3,6	;RP1=0, select bank0
  5405  09BC  0829               	movf	lcdWriteToDigitBCD@ThouDigit,w
  5406  09BD  042A               	iorwf	lcdWriteToDigitBCD@ThouDigit+1,w
  5407  09BE  1903               	btfsc	3,2
  5408  09BF  29C7               	goto	l3959
  5409                           
  5410                           ;LCD.c: 73: lcdWriteData((unsigned int)ThouDigit + 48);
  5411  09C0  0829               	movf	lcdWriteToDigitBCD@ThouDigit,w
  5412  09C1  3E30               	addlw	48
  5413  09C2  160A  118A  264C  120A  158A  	fcall	_lcdWriteData
  5414  09C7                     l3959:	
  5415                           
  5416                           ;LCD.c: 75: if (HunsDigit > 0)
  5417  09C7  1283               	bcf	3,5	;RP0=0, select bank0
  5418  09C8  1303               	bcf	3,6	;RP1=0, select bank0
  5419  09C9  0827               	movf	lcdWriteToDigitBCD@HunsDigit,w
  5420  09CA  0428               	iorwf	lcdWriteToDigitBCD@HunsDigit+1,w
  5421  09CB  1903               	btfsc	3,2
  5422  09CC  29D4               	goto	l610
  5423                           
  5424                           ;LCD.c: 76: lcdWriteData((unsigned int)HunsDigit + 48);
  5425  09CD  0827               	movf	lcdWriteToDigitBCD@HunsDigit,w
  5426  09CE  3E30               	addlw	48
  5427  09CF  160A  118A  264C  120A  158A  	fcall	_lcdWriteData
  5428  09D4                     l610:	
  5429                           
  5430                           ;LCD.c: 79: lcdWriteData((unsigned int)TensDigit + 48);
  5431  09D4  1283               	bcf	3,5	;RP0=0, select bank0
  5432  09D5  1303               	bcf	3,6	;RP1=0, select bank0
  5433  09D6  0825               	movf	lcdWriteToDigitBCD@TensDigit,w
  5434  09D7  3E30               	addlw	48
  5435  09D8  160A  118A  264C  120A  158A  	fcall	_lcdWriteData
  5436                           
  5437                           ;LCD.c: 81: lcdWriteData((unsigned int)OnesDigit + 48);
  5438  09DD  1283               	bcf	3,5	;RP0=0, select bank0
  5439  09DE  1303               	bcf	3,6	;RP1=0, select bank0
  5440  09DF  082D               	movf	lcdWriteToDigitBCD@OnesDigit,w
  5441  09E0  3E30               	addlw	48
  5442  09E1  160A  118A  264C   	fcall	_lcdWriteData
  5443  09E4  0008               	return
  5444  09E5                     __end_of_lcdWriteToDigitBCD:	
  5445                           
  5446                           	psect	text17
  5447  0878                     __ptext17:	
  5448 ;; *************** function _getADC *****************
  5449 ;; Defined at:
  5450 ;;		line 25 in file "ADC.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;		None
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;		None
  5455 ;; Return value:  Size  Location     Type
  5456 ;;                  2  626[None  ] unsigned int 
  5457 ;; Registers used:
  5458 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5459 ;; Tracked objects:
  5460 ;;		On entry : 0/0
  5461 ;;		On exit  : 0/0
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5464 ;;      Params:         0       0       0       0       0
  5465 ;;      Locals:         0       0       0       0       0
  5466 ;;      Temps:          0       2       0       0       0
  5467 ;;      Totals:         0       2       0       0       0
  5468 ;;Total ram usage:        2 bytes
  5469 ;; Hardware stack levels used:    1
  5470 ;; Hardware stack levels required when called:    1
  5471 ;; This function calls:
  5472 ;;		Nothing
  5473 ;; This function is called by:
  5474 ;;		_ADCMain
  5475 ;; This function uses a non-reentrant model
  5476 ;;
  5477                           
  5478                           
  5479                           ;psect for function _getADC
  5480  0878                     _getADC:	
  5481                           
  5482                           ;ADC.c: 27: ADRESH = 0;
  5483                           
  5484                           ;incstack = 0
  5485                           ; Regs used in _getADC: [wreg-fsr0h+status,2+status,0]
  5486  0878  1283               	bcf	3,5	;RP0=0, select bank0
  5487  0879  1303               	bcf	3,6	;RP1=0, select bank0
  5488  087A  019E               	clrf	30	;volatile
  5489                           
  5490                           ;ADC.c: 28: ADRESL = 0;
  5491  087B  1683               	bsf	3,5	;RP0=1, select bank1
  5492  087C  1303               	bcf	3,6	;RP1=0, select bank1
  5493  087D  019E               	clrf	30	;volatile
  5494                           
  5495                           ;ADC.c: 30: GO = 1;
  5496  087E  1283               	bcf	3,5	;RP0=0, select bank0
  5497  087F  1303               	bcf	3,6	;RP1=0, select bank0
  5498  0880  151F               	bsf	31,2	;volatile
  5499  0881                     l737:	
  5500                           ;ADC.c: 31: while(GO) continue;
  5501                           
  5502  0881  191F               	btfsc	31,2	;volatile
  5503  0882  2881               	goto	l737
  5504                           
  5505                           ;ADC.c: 35: adcRAW = (4*ADRESH);
  5506  0883  081E               	movf	30,w	;volatile
  5507  0884  00A0               	movwf	??_getADC
  5508  0885  01A1               	clrf	??_getADC+1
  5509  0886  1003               	clrc
  5510  0887  0DA0               	rlf	??_getADC,f
  5511  0888  0DA1               	rlf	??_getADC+1,f
  5512  0889  1003               	clrc
  5513  088A  0DA0               	rlf	??_getADC,f
  5514  088B  0DA1               	rlf	??_getADC+1,f
  5515  088C  0820               	movf	??_getADC,w
  5516  088D  00CF               	movwf	_adcRAW	;volatile
  5517  088E  0821               	movf	??_getADC+1,w
  5518  088F  00D0               	movwf	_adcRAW+1	;volatile
  5519                           
  5520                           ;ADC.c: 37: switch(ADRESL){
  5521  0890  28AF               	goto	l3975
  5522  0891                     l3969:	
  5523                           ;ADC.c: 38: case 0b01000000: adcRAW = adcRAW + 1;
  5524                           
  5525  0891  1283               	bcf	3,5	;RP0=0, select bank0
  5526  0892  084F               	movf	_adcRAW,w	;volatile
  5527  0893  3E01               	addlw	1
  5528  0894  00CF               	movwf	_adcRAW	;volatile
  5529  0895  0850               	movf	_adcRAW+1,w	;volatile
  5530  0896  1803               	skipnc
  5531  0897  3E01               	addlw	1
  5532  0898  3E00               	addlw	0
  5533  0899  00D0               	movwf	_adcRAW+1	;volatile
  5534                           
  5535                           ;ADC.c: 39: break;
  5536  089A  0008               	return
  5537  089B                     l3971:	
  5538                           ;ADC.c: 40: case 0b10000000: adcRAW = adcRAW + 2;
  5539                           
  5540  089B  1283               	bcf	3,5	;RP0=0, select bank0
  5541  089C  084F               	movf	_adcRAW,w	;volatile
  5542  089D  3E02               	addlw	2
  5543  089E  00CF               	movwf	_adcRAW	;volatile
  5544  089F  0850               	movf	_adcRAW+1,w	;volatile
  5545  08A0  1803               	skipnc
  5546  08A1  3E01               	addlw	1
  5547  08A2  3E00               	addlw	0
  5548  08A3  00D0               	movwf	_adcRAW+1	;volatile
  5549                           
  5550                           ;ADC.c: 41: break;
  5551  08A4  0008               	return
  5552  08A5                     l3973:	
  5553                           ;ADC.c: 42: case 0b11000000: adcRAW = adcRAW + 3;
  5554                           
  5555  08A5  1283               	bcf	3,5	;RP0=0, select bank0
  5556  08A6  084F               	movf	_adcRAW,w	;volatile
  5557  08A7  3E03               	addlw	3
  5558  08A8  00CF               	movwf	_adcRAW	;volatile
  5559  08A9  0850               	movf	_adcRAW+1,w	;volatile
  5560  08AA  1803               	skipnc
  5561  08AB  3E01               	addlw	1
  5562  08AC  3E00               	addlw	0
  5563  08AD  00D0               	movwf	_adcRAW+1	;volatile
  5564                           
  5565                           ;ADC.c: 45: }
  5566                           
  5567                           ;ADC.c: 44: default: adcRAW = adcRAW;
  5568                           
  5569                           ;ADC.c: 43: break;
  5570  08AE  0008               	return
  5571  08AF                     l3975:	
  5572  08AF  1683               	bsf	3,5	;RP0=1, select bank1
  5573  08B0  1303               	bcf	3,6	;RP1=0, select bank1
  5574  08B1  081E               	movf	30,w	;volatile
  5575                           
  5576                           ; Switch size 1, requested type "space"
  5577                           ; Number of cases is 3, Range of values is 64 to 192
  5578                           ; switch strategies available:
  5579                           ; Name         Instructions Cycles
  5580                           ; simple_byte           10     6 (average)
  5581                           ; jumptable            263     9 (fixed)
  5582                           ;	Chosen strategy is simple_byte
  5583  08B2  3A40               	xorlw	64	; case 64
  5584  08B3  1903               	skipnz
  5585  08B4  2891               	goto	l3969
  5586  08B5  3AC0               	xorlw	192	; case 128
  5587  08B6  1903               	skipnz
  5588  08B7  289B               	goto	l3971
  5589  08B8  3A40               	xorlw	64	; case 192
  5590  08B9  1903               	skipnz
  5591  08BA  28A5               	goto	l3973
  5592  08BB  28BC               	goto	l746
  5593  08BC                     l746:	
  5594                           ;ADC.c: 47: return(adcRAW);
  5595                           ;	Return value of _getADC is never used
  5596                           
  5597  08BC  0008               	return
  5598  08BD                     __end_of_getADC:	
  5599                           
  5600                           	psect	text18
  5601  1784                     __ptext18:	
  5602 ;; *************** function _getSensorData *****************
  5603 ;; Defined at:
  5604 ;;		line 85 in file "ser.c"
  5605 ;; Parameters:    Size  Location     Type
  5606 ;;  packetID        1    wreg     unsigned char 
  5607 ;;  bytes           1    2[BANK0 ] unsigned char 
  5608 ;; Auto vars:     Size  Location     Type
  5609 ;;  packetID        1    6[BANK0 ] unsigned char 
  5610 ;;  sensor          2    7[BANK0 ] int 
  5611 ;; Return value:  Size  Location     Type
  5612 ;;                  2    2[BANK0 ] int 
  5613 ;; Registers used:
  5614 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5615 ;; Tracked objects:
  5616 ;;		On entry : 0/0
  5617 ;;		On exit  : 0/0
  5618 ;;		Unchanged: 0/0
  5619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5620 ;;      Params:         0       2       0       0       0
  5621 ;;      Locals:         0       3       0       0       0
  5622 ;;      Temps:          0       2       0       0       0
  5623 ;;      Totals:         0       7       0       0       0
  5624 ;;Total ram usage:        7 bytes
  5625 ;; Hardware stack levels used:    1
  5626 ;; Hardware stack levels required when called:    2
  5627 ;; This function calls:
  5628 ;;		_ser_getch
  5629 ;;		_ser_putch
  5630 ;; This function is called by:
  5631 ;;		_Drive1m
  5632 ;;		_Turn90
  5633 ;;		_re_route
  5634 ;; This function uses a non-reentrant model
  5635 ;;
  5636                           
  5637                           
  5638                           ;psect for function _getSensorData
  5639  1784                     _getSensorData:	
  5640                           
  5641                           ;incstack = 0
  5642                           ; Regs used in _getSensorData: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5643                           ;getSensorData@packetID stored from wreg
  5644  1784  1283               	bcf	3,5	;RP0=0, select bank0
  5645  1785  1303               	bcf	3,6	;RP1=0, select bank0
  5646  1786  00A6               	movwf	getSensorData@packetID
  5647                           
  5648                           ;ser.c: 86: ser_putch(142);
  5649  1787  308E               	movlw	142
  5650  1788  160A  118A  260D  160A  118A  	fcall	_ser_putch
  5651                           
  5652                           ;ser.c: 87: ser_putch(packetID);
  5653  178D  1283               	bcf	3,5	;RP0=0, select bank0
  5654  178E  1303               	bcf	3,6	;RP1=0, select bank0
  5655  178F  0826               	movf	getSensorData@packetID,w
  5656  1790  160A  118A  260D  160A  118A  	fcall	_ser_putch
  5657                           
  5658                           ;ser.c: 89: if (bytes == 2)
  5659  1795  3002               	movlw	2
  5660  1796  1283               	bcf	3,5	;RP0=0, select bank0
  5661  1797  1303               	bcf	3,6	;RP1=0, select bank0
  5662  1798  0622               	xorwf	getSensorData@bytes,w
  5663  1799  1D03               	btfss	3,2
  5664  179A  2FA6               	goto	l4107
  5665                           
  5666                           ;ser.c: 90: highByte = ser_getch();
  5667  179B  160A  118A  2603  160A  118A  	fcall	_ser_getch
  5668  17A0  1283               	bcf	3,5	;RP0=0, select bank0
  5669  17A1  1303               	bcf	3,6	;RP1=0, select bank0
  5670  17A2  00A4               	movwf	??_getSensorData
  5671  17A3  0824               	movf	??_getSensorData,w
  5672  17A4  00F9               	movwf	_highByte
  5673  17A5  2FA7               	goto	l4109
  5674  17A6                     l4107:	
  5675                           
  5676                           ;ser.c: 91: else
  5677                           ;ser.c: 92: highByte = 0;
  5678  17A6  01F9               	clrf	_highByte
  5679  17A7                     l4109:	
  5680                           
  5681                           ;ser.c: 94: lowByte = ser_getch();
  5682  17A7  160A  118A  2603   	fcall	_ser_getch
  5683  17AA  1283               	bcf	3,5	;RP0=0, select bank0
  5684  17AB  1303               	bcf	3,6	;RP1=0, select bank0
  5685  17AC  00A4               	movwf	??_getSensorData
  5686  17AD  0824               	movf	??_getSensorData,w
  5687  17AE  00DB               	movwf	_lowByte
  5688                           
  5689                           ;ser.c: 96: signed int sensor = (256*highByte + lowByte);
  5690  17AF  0879               	movf	_highByte,w
  5691  17B0  00A4               	movwf	??_getSensorData
  5692  17B1  01A5               	clrf	??_getSensorData+1
  5693  17B2  0824               	movf	??_getSensorData,w
  5694  17B3  00A5               	movwf	??_getSensorData+1
  5695  17B4  01A4               	clrf	??_getSensorData
  5696  17B5  085B               	movf	_lowByte,w
  5697  17B6  0724               	addwf	??_getSensorData,w
  5698  17B7  00A7               	movwf	getSensorData@sensor
  5699  17B8  3000               	movlw	0
  5700  17B9  1803               	skipnc
  5701  17BA  3001               	movlw	1
  5702  17BB  0725               	addwf	??_getSensorData+1,w
  5703  17BC  00A8               	movwf	getSensorData@sensor+1
  5704                           
  5705                           ;ser.c: 98: return sensor;
  5706  17BD  0828               	movf	getSensorData@sensor+1,w
  5707  17BE  00A3               	movwf	?_getSensorData+1
  5708  17BF  0827               	movf	getSensorData@sensor,w
  5709  17C0  00A2               	movwf	?_getSensorData
  5710  17C1  0008               	return
  5711  17C2                     __end_of_getSensorData:	
  5712                           
  5713                           	psect	text19
  5714  160D                     __ptext19:	
  5715 ;; *************** function _ser_putch *****************
  5716 ;; Defined at:
  5717 ;;		line 30 in file "ser.c"
  5718 ;; Parameters:    Size  Location     Type
  5719 ;;  c               1    wreg     unsigned char 
  5720 ;; Auto vars:     Size  Location     Type
  5721 ;;  c               1    0[BANK0 ] unsigned char 
  5722 ;; Return value:  Size  Location     Type
  5723 ;;                  1    wreg      void 
  5724 ;; Registers used:
  5725 ;;		wreg
  5726 ;; Tracked objects:
  5727 ;;		On entry : 0/0
  5728 ;;		On exit  : 0/0
  5729 ;;		Unchanged: 0/0
  5730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5731 ;;      Params:         0       0       0       0       0
  5732 ;;      Locals:         0       1       0       0       0
  5733 ;;      Temps:          0       0       0       0       0
  5734 ;;      Totals:         0       1       0       0       0
  5735 ;;Total ram usage:        1 bytes
  5736 ;; Hardware stack levels used:    1
  5737 ;; Hardware stack levels required when called:    1
  5738 ;; This function calls:
  5739 ;;		Nothing
  5740 ;; This function is called by:
  5741 ;;		_Drive1m
  5742 ;;		_main
  5743 ;;		_Drive
  5744 ;;		_DriveDirect
  5745 ;;		_getSensorData
  5746 ;; This function uses a non-reentrant model
  5747 ;;
  5748                           
  5749                           
  5750                           ;psect for function _ser_putch
  5751  160D                     _ser_putch:	
  5752                           
  5753                           ;incstack = 0
  5754                           ; Regs used in _ser_putch: [wreg]
  5755                           ;ser_putch@c stored from wreg
  5756  160D  1283               	bcf	3,5	;RP0=0, select bank0
  5757  160E  1303               	bcf	3,6	;RP1=0, select bank0
  5758  160F  00A0               	movwf	ser_putch@c
  5759  1610                     l880:	
  5760                           ;ser.c: 31: while(!TRMT);
  5761                           
  5762  1610  1683               	bsf	3,5	;RP0=1, select bank1
  5763  1611  1303               	bcf	3,6	;RP1=0, select bank1
  5764  1612  1C98               	btfss	24,1	;volatile
  5765  1613  2E10               	goto	l880
  5766                           
  5767                           ;ser.c: 32: TXREG=c;
  5768  1614  1283               	bcf	3,5	;RP0=0, select bank0
  5769  1615  1303               	bcf	3,6	;RP1=0, select bank0
  5770  1616  0820               	movf	ser_putch@c,w
  5771  1617  0099               	movwf	25	;volatile
  5772  1618  0008               	return
  5773  1619                     __end_of_ser_putch:	
  5774                           
  5775                           	psect	text20
  5776  1603                     __ptext20:	
  5777 ;; *************** function _ser_getch *****************
  5778 ;; Defined at:
  5779 ;;		line 35 in file "ser.c"
  5780 ;; Parameters:    Size  Location     Type
  5781 ;;		None
  5782 ;; Auto vars:     Size  Location     Type
  5783 ;;  rxbyte          1    1[BANK0 ] unsigned char 
  5784 ;; Return value:  Size  Location     Type
  5785 ;;                  1    wreg      unsigned char 
  5786 ;; Registers used:
  5787 ;;		wreg
  5788 ;; Tracked objects:
  5789 ;;		On entry : 0/0
  5790 ;;		On exit  : 0/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5793 ;;      Params:         0       0       0       0       0
  5794 ;;      Locals:         0       1       0       0       0
  5795 ;;      Temps:          0       1       0       0       0
  5796 ;;      Totals:         0       2       0       0       0
  5797 ;;Total ram usage:        2 bytes
  5798 ;; Hardware stack levels used:    1
  5799 ;; Hardware stack levels required when called:    1
  5800 ;; This function calls:
  5801 ;;		Nothing
  5802 ;; This function is called by:
  5803 ;;		_getSensorData
  5804 ;; This function uses a non-reentrant model
  5805 ;;
  5806                           
  5807                           
  5808                           ;psect for function _ser_getch
  5809  1603                     _ser_getch:	
  5810  1603                     l886:	
  5811                           ;ser.c: 36: while(!RCIF);
  5812                           
  5813                           ;incstack = 0
  5814                           ; Regs used in _ser_getch: [wreg]
  5815                           
  5816  1603  1283               	bcf	3,5	;RP0=0, select bank0
  5817  1604  1303               	bcf	3,6	;RP1=0, select bank0
  5818  1605  1E8C               	btfss	12,5	;volatile
  5819  1606  2E03               	goto	l886
  5820                           
  5821                           ;ser.c: 37: unsigned char rxbyte = RCREG;
  5822  1607  081A               	movf	26,w	;volatile
  5823  1608  00A0               	movwf	??_ser_getch
  5824  1609  0820               	movf	??_ser_getch,w
  5825  160A  00A1               	movwf	ser_getch@rxbyte
  5826                           
  5827                           ;ser.c: 38: return rxbyte;
  5828  160B  0821               	movf	ser_getch@rxbyte,w
  5829  160C  0008               	return
  5830  160D                     __end_of_ser_getch:	
  5831                           
  5832                           	psect	text21
  5833  0C9C                     __ptext21:	
  5834 ;; *************** function _PathTo *****************
  5835 ;; Defined at:
  5836 ;;		line 49 in file "main.c"
  5837 ;; Parameters:    Size  Location     Type
  5838 ;;  x_target        1    wreg     unsigned char 
  5839 ;;  y_target        1    5[BANK0 ] unsigned char 
  5840 ;; Auto vars:     Size  Location     Type
  5841 ;;  x_target        1   33[BANK0 ] unsigned char 
  5842 ;;  sum             1   34[BANK0 ] unsigned char 
  5843 ;;  loop            2   35[BANK0 ] int 
  5844 ;;  mazeGrid       20   13[BANK0 ] unsigned char [5][4]
  5845 ;; Return value:  Size  Location     Type
  5846 ;;                  1    wreg      void 
  5847 ;; Registers used:
  5848 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5849 ;; Tracked objects:
  5850 ;;		On entry : 0/0
  5851 ;;		On exit  : 0/0
  5852 ;;		Unchanged: 0/0
  5853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5854 ;;      Params:         0       1       0       0       0
  5855 ;;      Locals:         0      24       0       0       0
  5856 ;;      Temps:          0       7       0       0       0
  5857 ;;      Totals:         0      32       0       0       0
  5858 ;;Total ram usage:       32 bytes
  5859 ;; Hardware stack levels used:    1
  5860 ;; Hardware stack levels required when called:    3
  5861 ;; This function calls:
  5862 ;;		___bmul
  5863 ;;		_lcdSetCursor
  5864 ;;		_lcdWriteString
  5865 ;; This function is called by:
  5866 ;;		_re_route
  5867 ;;		_main
  5868 ;; This function uses a non-reentrant model
  5869 ;;
  5870                           
  5871                           
  5872                           ;psect for function _PathTo
  5873  0C9C                     _PathTo:	
  5874                           
  5875                           ;incstack = 0
  5876                           ; Regs used in _PathTo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5877                           ;PathTo@x_target stored from wreg
  5878  0C9C  1283               	bcf	3,5	;RP0=0, select bank0
  5879  0C9D  1303               	bcf	3,6	;RP1=0, select bank0
  5880  0C9E  00C1               	movwf	PathTo@x_target
  5881                           
  5882                           ;main.c: 52: char mazeGrid[4][5] = {
  5883                           ;main.c: 53: {12,7,14,13,6},
  5884                           ;main.c: 54: {9,5,0,5,2},
  5885                           ;main.c: 55: {12,6,10,14,10},
  5886                           ;main.c: 56: {11,9,1,1,3}
  5887                           ;main.c: 57: };
  5888  0C9F  302D               	movlw	PathTo@mazeGrid& (0+255)
  5889  0CA0  0084               	movwf	4
  5890  0CA1  3090               	movlw	low PathTo@F1222
  5891  0CA2  00A6               	movwf	??_PathTo
  5892  0CA3  0804               	movf	4,w
  5893  0CA4  00A7               	movwf	??_PathTo+1
  5894  0CA5  3014               	movlw	20
  5895  0CA6  00A8               	movwf	??_PathTo+2
  5896  0CA7                     u3020:	
  5897  0CA7  0826               	movf	??_PathTo,w
  5898  0CA8  0084               	movwf	4
  5899  0CA9  1783               	bsf	3,7	;select IRP bank3
  5900  0CAA  0800               	movf	0,w
  5901  0CAB  00A9               	movwf	??_PathTo+3
  5902  0CAC  0AA6               	incf	??_PathTo,f
  5903  0CAD  0827               	movf	??_PathTo+1,w
  5904  0CAE  0084               	movwf	4
  5905  0CAF  1383               	bcf	3,7	;select IRP bank0
  5906  0CB0  0829               	movf	??_PathTo+3,w
  5907  0CB1  0080               	movwf	0
  5908  0CB2  0AA7               	incf	??_PathTo+1,f
  5909  0CB3  0BA8               	decfsz	??_PathTo+2,f
  5910  0CB4  2CA7               	goto	u3020
  5911                           
  5912                           ;main.c: 59: if(routing == 1){
  5913  0CB5  1FF0               	btfss	_routing/(0+8),_routing& (0+7)
  5914  0CB6  2CF9               	goto	l4275
  5915                           
  5916                           ;main.c: 60: for (r = 0; r <= 3; r++){
  5917  0CB7  01DE               	clrf	_r
  5918  0CB8  3004               	movlw	4
  5919  0CB9  025E               	subwf	_r,w
  5920  0CBA  1803               	btfsc	3,0
  5921  0CBB  2CF9               	goto	l4275
  5922  0CBC                     l4259:	
  5923                           
  5924                           ;main.c: 61: for (c = 0; c <= 4; c++){
  5925  0CBC  01D9               	clrf	_c
  5926  0CBD  3005               	movlw	5
  5927  0CBE  0259               	subwf	_c,w
  5928  0CBF  1803               	btfsc	3,0
  5929  0CC0  2CF1               	goto	l4271
  5930  0CC1                     l4265:	
  5931                           
  5932                           ;main.c: 62: mazeGrid[r][c] = mazeGridDefault[r][c];
  5933  0CC1  3005               	movlw	5
  5934  0CC2  00A6               	movwf	??_PathTo
  5935  0CC3  0826               	movf	??_PathTo,w
  5936  0CC4  00A0               	movwf	___bmul@multiplicand
  5937  0CC5  085E               	movf	_r,w
  5938  0CC6  160A  118A  2639  120A  158A  	fcall	___bmul
  5939  0CCB  3ED6               	addlw	(low (_mazeGridDefault| 0))& (0+255)
  5940  0CCC  1283               	bcf	3,5	;RP0=0, select bank0
  5941  0CCD  1303               	bcf	3,6	;RP1=0, select bank0
  5942  0CCE  0759               	addwf	_c,w
  5943  0CCF  00A7               	movwf	??_PathTo+1
  5944  0CD0  0827               	movf	??_PathTo+1,w
  5945  0CD1  0084               	movwf	4
  5946  0CD2  1383               	bcf	3,7	;select IRP bank1
  5947  0CD3  0800               	movf	0,w
  5948  0CD4  00A8               	movwf	??_PathTo+2
  5949  0CD5  3005               	movlw	5
  5950  0CD6  00A9               	movwf	??_PathTo+3
  5951  0CD7  0829               	movf	??_PathTo+3,w
  5952  0CD8  00A0               	movwf	___bmul@multiplicand
  5953  0CD9  085E               	movf	_r,w
  5954  0CDA  160A  118A  2639  120A  158A  	fcall	___bmul
  5955  0CDF  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  5956  0CE0  1283               	bcf	3,5	;RP0=0, select bank0
  5957  0CE1  1303               	bcf	3,6	;RP1=0, select bank0
  5958  0CE2  0759               	addwf	_c,w
  5959  0CE3  00AA               	movwf	??_PathTo+4
  5960  0CE4  082A               	movf	??_PathTo+4,w
  5961  0CE5  0084               	movwf	4
  5962  0CE6  0828               	movf	??_PathTo+2,w
  5963  0CE7  1383               	bcf	3,7	;select IRP bank0
  5964  0CE8  0080               	movwf	0
  5965  0CE9  3001               	movlw	1
  5966  0CEA  00A6               	movwf	??_PathTo
  5967  0CEB  0826               	movf	??_PathTo,w
  5968  0CEC  07D9               	addwf	_c,f
  5969  0CED  3005               	movlw	5
  5970  0CEE  0259               	subwf	_c,w
  5971  0CEF  1C03               	skipc
  5972  0CF0  2CC1               	goto	l4265
  5973  0CF1                     l4271:	
  5974  0CF1  3001               	movlw	1
  5975  0CF2  00A6               	movwf	??_PathTo
  5976  0CF3  0826               	movf	??_PathTo,w
  5977  0CF4  07DE               	addwf	_r,f
  5978  0CF5  3004               	movlw	4
  5979  0CF6  025E               	subwf	_r,w
  5980  0CF7  1C03               	skipc
  5981  0CF8  2CBC               	goto	l4259
  5982  0CF9                     l4275:	
  5983                           
  5984                           ;main.c: 64: }
  5985                           ;main.c: 65: }
  5986                           ;main.c: 66: }
  5987                           ;main.c: 76: pathCountShortest = 15;
  5988  0CF9  300F               	movlw	15
  5989  0CFA  00A6               	movwf	??_PathTo
  5990  0CFB  0826               	movf	??_PathTo,w
  5991  0CFC  00E8               	movwf	_pathCountShortest
  5992                           
  5993                           ;main.c: 77: for (r = 0; r <= 1; r++){
  5994  0CFD  01DE               	clrf	_r
  5995  0CFE  3002               	movlw	2
  5996  0CFF  025E               	subwf	_r,w
  5997  0D00  1803               	btfsc	3,0
  5998  0D01  2D29               	goto	l4299
  5999  0D02                     l4283:	
  6000                           
  6001                           ;main.c: 78: for (c = 0; c <= 15; c++){
  6002  0D02  01D9               	clrf	_c
  6003  0D03  3010               	movlw	16
  6004  0D04  0259               	subwf	_c,w
  6005  0D05  1803               	btfsc	3,0
  6006  0D06  2D21               	goto	l4295
  6007  0D07                     l4289:	
  6008                           
  6009                           ;main.c: 79: pathShortest[r][c] = 0;
  6010  0D07  085E               	movf	_r,w
  6011  0D08  00A6               	movwf	??_PathTo
  6012  0D09  3004               	movlw	4
  6013  0D0A                     u3105:	
  6014  0D0A  1003               	clrc
  6015  0D0B  0DA6               	rlf	??_PathTo,f
  6016  0D0C  3EFF               	addlw	-1
  6017  0D0D  1D03               	skipz
  6018  0D0E  2D0A               	goto	u3105
  6019  0D0F  30A0               	movlw	(low (_pathShortest| 0))& (0+255)
  6020  0D10  0726               	addwf	??_PathTo,w
  6021  0D11  00A7               	movwf	??_PathTo+1
  6022  0D12  0859               	movf	_c,w
  6023  0D13  0727               	addwf	??_PathTo+1,w
  6024  0D14  00A8               	movwf	??_PathTo+2
  6025  0D15  0828               	movf	??_PathTo+2,w
  6026  0D16  0084               	movwf	4
  6027  0D17  1383               	bcf	3,7	;select IRP bank1
  6028  0D18  0180               	clrf	0
  6029  0D19  3001               	movlw	1
  6030  0D1A  00A6               	movwf	??_PathTo
  6031  0D1B  0826               	movf	??_PathTo,w
  6032  0D1C  07D9               	addwf	_c,f
  6033  0D1D  3010               	movlw	16
  6034  0D1E  0259               	subwf	_c,w
  6035  0D1F  1C03               	skipc
  6036  0D20  2D07               	goto	l4289
  6037  0D21                     l4295:	
  6038  0D21  3001               	movlw	1
  6039  0D22  00A6               	movwf	??_PathTo
  6040  0D23  0826               	movf	??_PathTo,w
  6041  0D24  07DE               	addwf	_r,f
  6042  0D25  3002               	movlw	2
  6043  0D26  025E               	subwf	_r,w
  6044  0D27  1C03               	skipc
  6045  0D28  2D02               	goto	l4283
  6046  0D29                     l4299:	
  6047                           
  6048                           ;main.c: 80: }
  6049                           ;main.c: 81: }
  6050                           ;main.c: 84: x_goto = x_target;
  6051  0D29  0841               	movf	PathTo@x_target,w
  6052  0D2A  00A6               	movwf	??_PathTo
  6053  0D2B  0826               	movf	??_PathTo,w
  6054  0D2C  00E0               	movwf	_x_goto
  6055                           
  6056                           ;main.c: 85: y_goto = y_target;
  6057  0D2D  0825               	movf	PathTo@y_target,w
  6058  0D2E  00A6               	movwf	??_PathTo
  6059  0D2F  0826               	movf	??_PathTo,w
  6060  0D30  00E4               	movwf	_y_goto
  6061                           
  6062                           ;main.c: 87: x_path = x;
  6063  0D31  0869               	movf	_x,w
  6064  0D32  00A6               	movwf	??_PathTo
  6065  0D33  0826               	movf	??_PathTo,w
  6066  0D34  00E2               	movwf	_x_path
  6067                           
  6068                           ;main.c: 88: y_path = y;
  6069  0D35  0863               	movf	_y,w
  6070  0D36  00A6               	movwf	??_PathTo
  6071  0D37  0826               	movf	??_PathTo,w
  6072  0D38  00E6               	movwf	_y_path
  6073                           
  6074                           ;main.c: 89: orientation_path = orientation;
  6075  0D39  0867               	movf	_orientation,w
  6076  0D3A  00A6               	movwf	??_PathTo
  6077  0D3B  0826               	movf	??_PathTo,w
  6078  0D3C  00DC               	movwf	_orientation_path
  6079                           
  6080                           ;main.c: 91: pathCount = 0;
  6081  0D3D  01DD               	clrf	_pathCount
  6082                           
  6083                           ;main.c: 94: lcdSetCursor(0b10000000);
  6084  0D3E  3080               	movlw	128
  6085  0D3F  160A  118A  25FA  120A  158A  	fcall	_lcdSetCursor
  6086                           
  6087                           ;main.c: 95: lcdWriteString("Working...");
  6088  0D44  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  6089  0D45  160A  118A  26CB  120A  158A  	fcall	_lcdWriteString
  6090                           
  6091                           ;main.c: 96: for (int loop = 0; loop <= 2000; loop++){
  6092  0D4A  1283               	bcf	3,5	;RP0=0, select bank0
  6093  0D4B  1303               	bcf	3,6	;RP1=0, select bank0
  6094  0D4C  01C3               	clrf	PathTo@loop
  6095  0D4D  01C4               	clrf	PathTo@loop+1
  6096  0D4E                     L16:	
  6097  0D4E  0844               	movf	PathTo@loop+1,w
  6098  0D4F  3A80               	xorlw	128
  6099  0D50  00FF               	movwf	127
  6100  0D51  3087               	movlw	135
  6101  0D52  027F               	subwf	127,w
  6102  0D53  1D03               	skipz
  6103  0D54  2D57               	goto	u3135
  6104  0D55  30D1               	movlw	209
  6105  0D56  0243               	subwf	PathTo@loop,w
  6106  0D57                     u3135:	
  6107  0D57  1803               	btfsc	3,0
  6108  0D58  0008               	return
  6109                           
  6110                           ;main.c: 98: reset_flag = 0;
  6111  0D59  12F0               	bcf	_reset_flag/(0+8),_reset_flag& (0+7)
  6112                           
  6113                           ;main.c: 100: path[0][pathCount] = x_path;
  6114  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
  6115  0D5B  1303               	bcf	3,6	;RP1=0, select bank0
  6116  0D5C  0862               	movf	_x_path,w
  6117  0D5D  00A6               	movwf	??_PathTo
  6118  0D5E  085D               	movf	_pathCount,w
  6119  0D5F  3EB8               	addlw	(low (_path| (0+256)))& (0+255)
  6120  0D60  0084               	movwf	4
  6121  0D61  0826               	movf	??_PathTo,w
  6122  0D62  1783               	bsf	3,7	;select IRP bank3
  6123  0D63  0080               	movwf	0
  6124                           
  6125                           ;main.c: 101: path[1][pathCount] = y_path;
  6126  0D64  0866               	movf	_y_path,w
  6127  0D65  00A6               	movwf	??_PathTo
  6128  0D66  085D               	movf	_pathCount,w
  6129  0D67  3EC8               	addlw	(low ((_path| (0+256)+16)))& (0+255)
  6130  0D68  0084               	movwf	4
  6131  0D69  0826               	movf	??_PathTo,w
  6132  0D6A  0080               	movwf	0
  6133                           
  6134                           ;main.c: 106: left = gridWalls[0][(mazeGrid[y_path][x_path])];
  6135  0D6B  3005               	movlw	5
  6136  0D6C  00A6               	movwf	??_PathTo
  6137  0D6D  0826               	movf	??_PathTo,w
  6138  0D6E  00A0               	movwf	___bmul@multiplicand
  6139  0D6F  0866               	movf	_y_path,w
  6140  0D70  160A  118A  2639  120A  158A  	fcall	___bmul
  6141  0D75  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6142  0D76  1283               	bcf	3,5	;RP0=0, select bank0
  6143  0D77  1303               	bcf	3,6	;RP1=0, select bank0
  6144  0D78  0762               	addwf	_x_path,w
  6145  0D79  00A7               	movwf	??_PathTo+1
  6146  0D7A  0827               	movf	??_PathTo+1,w
  6147  0D7B  0084               	movwf	4
  6148  0D7C  1383               	bcf	3,7	;select IRP bank0
  6149  0D7D  0800               	movf	0,w
  6150  0D7E  3E10               	addlw	(low (_gridWalls| (0+256)))& (0+255)
  6151  0D7F  0084               	movwf	4
  6152  0D80  11F0               	bcf	_left/(0+8),_left& (0+7)
  6153  0D81  1783               	bsf	3,7	;select IRP bank2
  6154  0D82  1800               	btfsc	0,0
  6155  0D83  15F0               	bsf	_left/(0+8),_left& (0+7)
  6156                           
  6157                           ;main.c: 107: up = gridWalls[1][(mazeGrid[y_path][x_path])];
  6158  0D84  3005               	movlw	5
  6159  0D85  1283               	bcf	3,5	;RP0=0, select bank0
  6160  0D86  1303               	bcf	3,6	;RP1=0, select bank0
  6161  0D87  00A6               	movwf	??_PathTo
  6162  0D88  0826               	movf	??_PathTo,w
  6163  0D89  00A0               	movwf	___bmul@multiplicand
  6164  0D8A  0866               	movf	_y_path,w
  6165  0D8B  160A  118A  2639  120A  158A  	fcall	___bmul
  6166  0D90  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6167  0D91  1283               	bcf	3,5	;RP0=0, select bank0
  6168  0D92  1303               	bcf	3,6	;RP1=0, select bank0
  6169  0D93  0762               	addwf	_x_path,w
  6170  0D94  00A7               	movwf	??_PathTo+1
  6171  0D95  0827               	movf	??_PathTo+1,w
  6172  0D96  0084               	movwf	4
  6173  0D97  1383               	bcf	3,7	;select IRP bank0
  6174  0D98  0800               	movf	0,w
  6175  0D99  3E20               	addlw	(low ((_gridWalls| (0+256)+16)))& (0+255)
  6176  0D9A  0084               	movwf	4
  6177  0D9B  10F1               	bcf	_up/(0+8),_up& (0+7)
  6178  0D9C  1783               	bsf	3,7	;select IRP bank2
  6179  0D9D  1800               	btfsc	0,0
  6180  0D9E  14F1               	bsf	_up/(0+8),_up& (0+7)
  6181                           
  6182                           ;main.c: 108: right = gridWalls[2][(mazeGrid[y_path][x_path])];
  6183  0D9F  3005               	movlw	5
  6184  0DA0  1283               	bcf	3,5	;RP0=0, select bank0
  6185  0DA1  1303               	bcf	3,6	;RP1=0, select bank0
  6186  0DA2  00A6               	movwf	??_PathTo
  6187  0DA3  0826               	movf	??_PathTo,w
  6188  0DA4  00A0               	movwf	___bmul@multiplicand
  6189  0DA5  0866               	movf	_y_path,w
  6190  0DA6  160A  118A  2639  120A  158A  	fcall	___bmul
  6191  0DAB  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6192  0DAC  1283               	bcf	3,5	;RP0=0, select bank0
  6193  0DAD  1303               	bcf	3,6	;RP1=0, select bank0
  6194  0DAE  0762               	addwf	_x_path,w
  6195  0DAF  00A7               	movwf	??_PathTo+1
  6196  0DB0  0827               	movf	??_PathTo+1,w
  6197  0DB1  0084               	movwf	4
  6198  0DB2  1383               	bcf	3,7	;select IRP bank0
  6199  0DB3  0800               	movf	0,w
  6200  0DB4  3E30               	addlw	(low ((_gridWalls| (0+256)+32)))& (0+255)
  6201  0DB5  0084               	movwf	4
  6202  0DB6  1370               	bcf	_right/(0+8),_right& (0+7)
  6203  0DB7  1783               	bsf	3,7	;select IRP bank2
  6204  0DB8  1800               	btfsc	0,0
  6205  0DB9  1770               	bsf	_right/(0+8),_right& (0+7)
  6206                           
  6207                           ;main.c: 109: down = gridWalls[3][(mazeGrid[y_path][x_path])];
  6208  0DBA  3005               	movlw	5
  6209  0DBB  1283               	bcf	3,5	;RP0=0, select bank0
  6210  0DBC  1303               	bcf	3,6	;RP1=0, select bank0
  6211  0DBD  00A6               	movwf	??_PathTo
  6212  0DBE  0826               	movf	??_PathTo,w
  6213  0DBF  00A0               	movwf	___bmul@multiplicand
  6214  0DC0  0866               	movf	_y_path,w
  6215  0DC1  160A  118A  2639  120A  158A  	fcall	___bmul
  6216  0DC6  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6217  0DC7  1283               	bcf	3,5	;RP0=0, select bank0
  6218  0DC8  1303               	bcf	3,6	;RP1=0, select bank0
  6219  0DC9  0762               	addwf	_x_path,w
  6220  0DCA  00A7               	movwf	??_PathTo+1
  6221  0DCB  0827               	movf	??_PathTo+1,w
  6222  0DCC  0084               	movwf	4
  6223  0DCD  1383               	bcf	3,7	;select IRP bank0
  6224  0DCE  0800               	movf	0,w
  6225  0DCF  3E40               	addlw	(low ((_gridWalls| (0+256)+48)))& (0+255)
  6226  0DD0  0084               	movwf	4
  6227  0DD1  10F0               	bcf	_down/(0+8),_down& (0+7)
  6228  0DD2  1783               	bsf	3,7	;select IRP bank2
  6229  0DD3  1800               	btfsc	0,0
  6230  0DD4  14F0               	bsf	_down/(0+8),_down& (0+7)
  6231                           
  6232                           ;main.c: 113: if (pathCount != 0){
  6233  0DD5  1283               	bcf	3,5	;RP0=0, select bank0
  6234  0DD6  1303               	bcf	3,6	;RP1=0, select bank0
  6235  0DD7  085D               	movf	_pathCount,w
  6236  0DD8  1D03               	btfss	3,2
  6237  0DD9  2DE3               	goto	l4329
  6238  0DDA  2DF1               	goto	l4331
  6239  0DDB                     l186:	
  6240                           ;main.c: 115: case 0: down = 1;
  6241                           
  6242                           ;main.c: 114: switch(orientation_path){
  6243                           
  6244  0DDB  14F0               	bsf	_down/(0+8),_down& (0+7)
  6245                           
  6246                           ;main.c: 116: break;
  6247  0DDC  2DF1               	goto	l4331
  6248  0DDD                     l188:	
  6249                           ;main.c: 117: case 1: left = 1;
  6250                           
  6251  0DDD  15F0               	bsf	_left/(0+8),_left& (0+7)
  6252                           
  6253                           ;main.c: 118: break;
  6254  0DDE  2DF1               	goto	l4331
  6255  0DDF                     l189:	
  6256                           ;main.c: 119: case 2: up = 1;
  6257                           
  6258  0DDF  14F1               	bsf	_up/(0+8),_up& (0+7)
  6259                           
  6260                           ;main.c: 120: break;
  6261  0DE0  2DF1               	goto	l4331
  6262  0DE1                     l190:	
  6263                           ;main.c: 121: case 3: right = 1;
  6264                           
  6265  0DE1  1770               	bsf	_right/(0+8),_right& (0+7)
  6266                           
  6267                           ;main.c: 123: }
  6268                           
  6269                           ;main.c: 122: break;
  6270  0DE2  2DF1               	goto	l4331
  6271  0DE3                     l4329:	
  6272  0DE3  085C               	movf	_orientation_path,w
  6273                           
  6274                           ; Switch size 1, requested type "space"
  6275                           ; Number of cases is 4, Range of values is 0 to 3
  6276                           ; switch strategies available:
  6277                           ; Name         Instructions Cycles
  6278                           ; simple_byte           13     7 (average)
  6279                           ; direct_byte           20     8 (fixed)
  6280                           ; jumptable            260     6 (fixed)
  6281                           ;	Chosen strategy is simple_byte
  6282  0DE4  3A00               	xorlw	0	; case 0
  6283  0DE5  1903               	skipnz
  6284  0DE6  2DDB               	goto	l186
  6285  0DE7  3A01               	xorlw	1	; case 1
  6286  0DE8  1903               	skipnz
  6287  0DE9  2DDD               	goto	l188
  6288  0DEA  3A03               	xorlw	3	; case 2
  6289  0DEB  1903               	skipnz
  6290  0DEC  2DDF               	goto	l189
  6291  0DED  3A01               	xorlw	1	; case 3
  6292  0DEE  1903               	skipnz
  6293  0DEF  2DE1               	goto	l190
  6294  0DF0  2DF1               	goto	l4331
  6295  0DF1                     l4331:	
  6296                           
  6297                           ;main.c: 124: }
  6298                           ;main.c: 128: char sum = (left + up + down + right);
  6299  0DF1  3000               	movlw	0
  6300  0DF2  19F0               	btfsc	_left/(0+8),_left& (0+7)
  6301  0DF3  3001               	movlw	1
  6302  0DF4  18F1               	btfsc	_up/(0+8),_up& (0+7)
  6303  0DF5  3E01               	addlw	1
  6304  0DF6  18F0               	btfsc	_down/(0+8),_down& (0+7)
  6305  0DF7  3E01               	addlw	1
  6306  0DF8  1B70               	btfsc	_right/(0+8),_right& (0+7)
  6307  0DF9  3E01               	addlw	1
  6308  0DFA  00A6               	movwf	??_PathTo
  6309  0DFB  0826               	movf	??_PathTo,w
  6310  0DFC  00C2               	movwf	PathTo@sum
  6311                           
  6312                           ;main.c: 129: if(sum <= 2){
  6313  0DFD  3003               	movlw	3
  6314  0DFE  0242               	subwf	PathTo@sum,w
  6315  0DFF  1803               	skipnc
  6316  0E00  2E1C               	goto	l191
  6317                           
  6318                           ;main.c: 130: x_int = x_path;
  6319  0E01  0862               	movf	_x_path,w
  6320  0E02  00A6               	movwf	??_PathTo
  6321  0E03  0826               	movf	??_PathTo,w
  6322  0E04  00E1               	movwf	_x_int
  6323                           
  6324                           ;main.c: 131: y_int = y_path;
  6325  0E05  0866               	movf	_y_path,w
  6326  0E06  00A6               	movwf	??_PathTo
  6327  0E07  0826               	movf	??_PathTo,w
  6328  0E08  00E5               	movwf	_y_int
  6329                           
  6330                           ;main.c: 137: if (left == 0)
  6331  0E09  19F0               	btfsc	_left/(0+8),_left& (0+7)
  6332  0E0A  2E0D               	goto	l192
  6333                           
  6334                           ;main.c: 138: intersection_orientation = 3;
  6335  0E0B  3003               	movlw	3
  6336  0E0C  2E19               	goto	L5
  6337  0E0D                     l192:	
  6338                           
  6339                           ;main.c: 139: else if (up == 0)
  6340  0E0D  18F1               	btfsc	_up/(0+8),_up& (0+7)
  6341  0E0E  2E11               	goto	l194
  6342                           
  6343                           ;main.c: 140: intersection_orientation = 0;
  6344  0E0F  01DA               	clrf	_intersection_orientation
  6345  0E10  2E1C               	goto	l191
  6346  0E11                     l194:	
  6347                           
  6348                           ;main.c: 141: else if (right == 0)
  6349  0E11  1B70               	btfsc	_right/(0+8),_right& (0+7)
  6350  0E12  2E16               	goto	l196
  6351                           
  6352                           ;main.c: 142: intersection_orientation = 1;
  6353  0E13  01DA               	clrf	_intersection_orientation
  6354  0E14  0ADA               	incf	_intersection_orientation,f
  6355  0E15  2E1C               	goto	l191
  6356  0E16                     l196:	
  6357                           
  6358                           ;main.c: 143: else if (down == 0)
  6359  0E16  18F0               	btfsc	_down/(0+8),_down& (0+7)
  6360  0E17  2E1C               	goto	l191
  6361                           
  6362                           ;main.c: 144: intersection_orientation = 2;
  6363  0E18  3002               	movlw	2
  6364  0E19                     L5:	
  6365  0E19  00A6               	movwf	??_PathTo
  6366  0E1A  0826               	movf	??_PathTo,w
  6367  0E1B  00DA               	movwf	_intersection_orientation
  6368  0E1C                     l191:	
  6369                           
  6370                           ;main.c: 145: }
  6371                           ;main.c: 152: if ((x_path == x_target)){
  6372  0E1C  0862               	movf	_x_path,w
  6373  0E1D  0641               	xorwf	PathTo@x_target,w
  6374  0E1E  1D03               	skipz
  6375  0E1F  2F1A               	goto	l4411
  6376                           
  6377                           ;main.c: 153: if (y_path == y_target){
  6378  0E20  0866               	movf	_y_path,w
  6379  0E21  0625               	xorwf	PathTo@y_target,w
  6380  0E22  1D03               	skipz
  6381  0E23  2F1A               	goto	l4411
  6382                           
  6383                           ;main.c: 157: if(pathCount < pathCountShortest){
  6384  0E24  0868               	movf	_pathCountShortest,w
  6385  0E25  025D               	subwf	_pathCount,w
  6386  0E26  1803               	skipnc
  6387  0E27  2ED2               	goto	l4383
  6388                           
  6389                           ;main.c: 158: pathCountShortest = pathCount;
  6390  0E28  085D               	movf	_pathCount,w
  6391  0E29  00A6               	movwf	??_PathTo
  6392  0E2A  0826               	movf	??_PathTo,w
  6393  0E2B  00E8               	movwf	_pathCountShortest
  6394                           
  6395                           ;main.c: 159: for (r = 0; r <= 1; r++){
  6396  0E2C  01DE               	clrf	_r
  6397  0E2D                     L13:	
  6398  0E2D  3002               	movlw	2
  6399  0E2E  025E               	subwf	_r,w
  6400  0E2F  1803               	btfsc	3,0
  6401  0E30  2ED2               	goto	l4383
  6402                           
  6403                           ;main.c: 160: for (c = 0; c <= 15; c++){
  6404  0E31  01D9               	clrf	_c
  6405  0E32  3010               	movlw	16
  6406  0E33  0259               	subwf	_c,w
  6407  0E34  1803               	btfsc	3,0
  6408  0E35  2E64               	goto	l4369
  6409  0E36                     l4363:	
  6410                           
  6411                           ;main.c: 161: pathShortest[r][c] = path[r][c];
  6412  0E36  085E               	movf	_r,w
  6413  0E37  00A6               	movwf	??_PathTo
  6414  0E38  3004               	movlw	4
  6415  0E39                     u3295:	
  6416  0E39  1003               	clrc
  6417  0E3A  0DA6               	rlf	??_PathTo,f
  6418  0E3B  3EFF               	addlw	-1
  6419  0E3C  1D03               	skipz
  6420  0E3D  2E39               	goto	u3295
  6421  0E3E  30B8               	movlw	(low (_path| (0+256)))& (0+255)
  6422  0E3F  0726               	addwf	??_PathTo,w
  6423  0E40  00A7               	movwf	??_PathTo+1
  6424  0E41  0859               	movf	_c,w
  6425  0E42  0727               	addwf	??_PathTo+1,w
  6426  0E43  00A8               	movwf	??_PathTo+2
  6427  0E44  0828               	movf	??_PathTo+2,w
  6428  0E45  0084               	movwf	4
  6429  0E46  1783               	bsf	3,7	;select IRP bank3
  6430  0E47  0800               	movf	0,w
  6431  0E48  00A9               	movwf	??_PathTo+3
  6432  0E49  085E               	movf	_r,w
  6433  0E4A  00AA               	movwf	??_PathTo+4
  6434  0E4B  3004               	movlw	4
  6435  0E4C                     u3305:	
  6436  0E4C  1003               	clrc
  6437  0E4D  0DAA               	rlf	??_PathTo+4,f
  6438  0E4E  3EFF               	addlw	-1
  6439  0E4F  1D03               	skipz
  6440  0E50  2E4C               	goto	u3305
  6441  0E51  30A0               	movlw	(low (_pathShortest| 0))& (0+255)
  6442  0E52  072A               	addwf	??_PathTo+4,w
  6443  0E53  00AB               	movwf	??_PathTo+5
  6444  0E54  0859               	movf	_c,w
  6445  0E55  072B               	addwf	??_PathTo+5,w
  6446  0E56  00AC               	movwf	??_PathTo+6
  6447  0E57  082C               	movf	??_PathTo+6,w
  6448  0E58  0084               	movwf	4
  6449  0E59  0829               	movf	??_PathTo+3,w
  6450  0E5A  1383               	bcf	3,7	;select IRP bank1
  6451  0E5B  0080               	movwf	0
  6452  0E5C  3001               	movlw	1
  6453  0E5D  00A6               	movwf	??_PathTo
  6454  0E5E  0826               	movf	??_PathTo,w
  6455  0E5F  07D9               	addwf	_c,f
  6456  0E60  3010               	movlw	16
  6457  0E61  0259               	subwf	_c,w
  6458  0E62  1C03               	skipc
  6459  0E63  2E36               	goto	l4363
  6460  0E64                     l4369:	
  6461  0E64  3001               	movlw	1
  6462  0E65  00A6               	movwf	??_PathTo
  6463  0E66  0826               	movf	??_PathTo,w
  6464  0E67  07DE               	addwf	_r,f
  6465  0E68  2E2D               	goto	L13
  6466  0E69                     l4373:	
  6467                           ;main.c: 171: case 0: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 4);
  6468                           
  6469                           ;main.c: 162: }
  6470                           ;main.c: 163: }
  6471                           ;main.c: 164: }
  6472                           ;main.c: 170: switch(intersection_orientation){
  6473                           
  6474  0E69  3005               	movlw	5
  6475  0E6A  00A6               	movwf	??_PathTo
  6476  0E6B  0826               	movf	??_PathTo,w
  6477  0E6C  00A0               	movwf	___bmul@multiplicand
  6478  0E6D  0865               	movf	_y_int,w
  6479  0E6E  160A  118A  2639  120A  158A  	fcall	___bmul
  6480  0E73  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6481  0E74  1283               	bcf	3,5	;RP0=0, select bank0
  6482  0E75  1303               	bcf	3,6	;RP1=0, select bank0
  6483  0E76  0761               	addwf	_x_int,w
  6484  0E77  00A7               	movwf	??_PathTo+1
  6485  0E78  0827               	movf	??_PathTo+1,w
  6486  0E79  0084               	movwf	4
  6487  0E7A  1383               	bcf	3,7	;select IRP bank0
  6488  0E7B  0800               	movf	0,w
  6489  0E7C  3E04               	addlw	4
  6490  0E7D  2EBC               	goto	L14
  6491  0E7E                     l4375:	
  6492                           ;main.c: 173: case 1: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 2);
  6493                           
  6494                           ;main.c: 172: break;
  6495                           
  6496  0E7E  3005               	movlw	5
  6497  0E7F  00A6               	movwf	??_PathTo
  6498  0E80  0826               	movf	??_PathTo,w
  6499  0E81  00A0               	movwf	___bmul@multiplicand
  6500  0E82  0865               	movf	_y_int,w
  6501  0E83  160A  118A  2639  120A  158A  	fcall	___bmul
  6502  0E88  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6503  0E89  1283               	bcf	3,5	;RP0=0, select bank0
  6504  0E8A  1303               	bcf	3,6	;RP1=0, select bank0
  6505  0E8B  0761               	addwf	_x_int,w
  6506  0E8C  00A7               	movwf	??_PathTo+1
  6507  0E8D  0827               	movf	??_PathTo+1,w
  6508  0E8E  0084               	movwf	4
  6509  0E8F  1383               	bcf	3,7	;select IRP bank0
  6510  0E90  0800               	movf	0,w
  6511  0E91  3E02               	addlw	2
  6512  0E92  2EBC               	goto	L14
  6513  0E93                     l4377:	
  6514                           ;main.c: 175: case 2: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 1);
  6515                           
  6516                           ;main.c: 174: break;
  6517                           
  6518  0E93  3005               	movlw	5
  6519  0E94  00A6               	movwf	??_PathTo
  6520  0E95  0826               	movf	??_PathTo,w
  6521  0E96  00A0               	movwf	___bmul@multiplicand
  6522  0E97  0865               	movf	_y_int,w
  6523  0E98  160A  118A  2639  120A  158A  	fcall	___bmul
  6524  0E9D  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6525  0E9E  1283               	bcf	3,5	;RP0=0, select bank0
  6526  0E9F  1303               	bcf	3,6	;RP1=0, select bank0
  6527  0EA0  0761               	addwf	_x_int,w
  6528  0EA1  00A7               	movwf	??_PathTo+1
  6529  0EA2  0827               	movf	??_PathTo+1,w
  6530  0EA3  0084               	movwf	4
  6531  0EA4  1383               	bcf	3,7	;select IRP bank0
  6532  0EA5  0800               	movf	0,w
  6533  0EA6  3E01               	addlw	1
  6534  0EA7  2EBC               	goto	L14
  6535  0EA8                     l4379:	
  6536                           ;main.c: 177: case 3: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 8);
  6537                           
  6538                           ;main.c: 176: break;
  6539                           
  6540  0EA8  3005               	movlw	5
  6541  0EA9  00A6               	movwf	??_PathTo
  6542  0EAA  0826               	movf	??_PathTo,w
  6543  0EAB  00A0               	movwf	___bmul@multiplicand
  6544  0EAC  0865               	movf	_y_int,w
  6545  0EAD  160A  118A  2639  120A  158A  	fcall	___bmul
  6546  0EB2  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6547  0EB3  1283               	bcf	3,5	;RP0=0, select bank0
  6548  0EB4  1303               	bcf	3,6	;RP1=0, select bank0
  6549  0EB5  0761               	addwf	_x_int,w
  6550  0EB6  00A7               	movwf	??_PathTo+1
  6551  0EB7  0827               	movf	??_PathTo+1,w
  6552  0EB8  0084               	movwf	4
  6553  0EB9  1383               	bcf	3,7	;select IRP bank0
  6554  0EBA  0800               	movf	0,w
  6555  0EBB  3E08               	addlw	8
  6556  0EBC                     L14:	
  6557  0EBC  00A8               	movwf	??_PathTo+2
  6558  0EBD  3005               	movlw	5
  6559  0EBE  00A9               	movwf	??_PathTo+3
  6560  0EBF  0829               	movf	??_PathTo+3,w
  6561  0EC0  00A0               	movwf	___bmul@multiplicand
  6562  0EC1  0865               	movf	_y_int,w
  6563  0EC2  160A  118A  2639  120A  158A  	fcall	___bmul
  6564  0EC7  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6565  0EC8  1283               	bcf	3,5	;RP0=0, select bank0
  6566  0EC9  1303               	bcf	3,6	;RP1=0, select bank0
  6567  0ECA  0761               	addwf	_x_int,w
  6568  0ECB  00AA               	movwf	??_PathTo+4
  6569  0ECC  082A               	movf	??_PathTo+4,w
  6570  0ECD  0084               	movwf	4
  6571  0ECE  0828               	movf	??_PathTo+2,w
  6572  0ECF  1383               	bcf	3,7	;select IRP bank0
  6573  0ED0  0080               	movwf	0
  6574                           
  6575                           ;main.c: 179: }
  6576                           
  6577                           ;main.c: 178: break;
  6578  0ED1  2EE0               	goto	l4385
  6579  0ED2                     l4383:	
  6580  0ED2  085A               	movf	_intersection_orientation,w
  6581                           
  6582                           ; Switch size 1, requested type "space"
  6583                           ; Number of cases is 4, Range of values is 0 to 3
  6584                           ; switch strategies available:
  6585                           ; Name         Instructions Cycles
  6586                           ; simple_byte           13     7 (average)
  6587                           ; direct_byte           20     8 (fixed)
  6588                           ; jumptable            260     6 (fixed)
  6589                           ;	Chosen strategy is simple_byte
  6590  0ED3  3A00               	xorlw	0	; case 0
  6591  0ED4  1903               	skipnz
  6592  0ED5  2E69               	goto	l4373
  6593  0ED6  3A01               	xorlw	1	; case 1
  6594  0ED7  1903               	skipnz
  6595  0ED8  2E7E               	goto	l4375
  6596  0ED9  3A03               	xorlw	3	; case 2
  6597  0EDA  1903               	skipnz
  6598  0EDB  2E93               	goto	l4377
  6599  0EDC  3A01               	xorlw	1	; case 3
  6600  0EDD  1903               	skipnz
  6601  0EDE  2EA8               	goto	l4379
  6602  0EDF  2EE0               	goto	l4385
  6603  0EE0                     l4385:	
  6604                           
  6605                           ;main.c: 182: x_path = x;
  6606  0EE0  0869               	movf	_x,w
  6607  0EE1  00A6               	movwf	??_PathTo
  6608  0EE2  0826               	movf	??_PathTo,w
  6609  0EE3  00E2               	movwf	_x_path
  6610                           
  6611                           ;main.c: 183: y_path = y;
  6612  0EE4  0863               	movf	_y,w
  6613  0EE5  00A6               	movwf	??_PathTo
  6614  0EE6  0826               	movf	??_PathTo,w
  6615  0EE7  00E6               	movwf	_y_path
  6616                           
  6617                           ;main.c: 184: orientation_path = orientation;
  6618  0EE8  0867               	movf	_orientation,w
  6619  0EE9  00A6               	movwf	??_PathTo
  6620  0EEA  0826               	movf	??_PathTo,w
  6621  0EEB  00DC               	movwf	_orientation_path
  6622                           
  6623                           ;main.c: 185: pathCount = 0;
  6624  0EEC  01DD               	clrf	_pathCount
  6625                           
  6626                           ;main.c: 186: reset_flag = 1;
  6627  0EED  16F0               	bsf	_reset_flag/(0+8),_reset_flag& (0+7)
  6628                           
  6629                           ;main.c: 189: for (r = 0; r <= 1; r++){
  6630  0EEE  01DE               	clrf	_r
  6631  0EEF  3002               	movlw	2
  6632  0EF0  025E               	subwf	_r,w
  6633  0EF1  1803               	btfsc	3,0
  6634  0EF2  2F1A               	goto	l4411
  6635  0EF3                     l4395:	
  6636                           
  6637                           ;main.c: 190: for (c = 0; c <= 15; c++){
  6638  0EF3  01D9               	clrf	_c
  6639  0EF4  3010               	movlw	16
  6640  0EF5  0259               	subwf	_c,w
  6641  0EF6  1803               	btfsc	3,0
  6642  0EF7  2F12               	goto	l4407
  6643  0EF8                     l4401:	
  6644                           
  6645                           ;main.c: 191: path[r][c] = 0;
  6646  0EF8  085E               	movf	_r,w
  6647  0EF9  00A6               	movwf	??_PathTo
  6648  0EFA  3004               	movlw	4
  6649  0EFB                     u3355:	
  6650  0EFB  1003               	clrc
  6651  0EFC  0DA6               	rlf	??_PathTo,f
  6652  0EFD  3EFF               	addlw	-1
  6653  0EFE  1D03               	skipz
  6654  0EFF  2EFB               	goto	u3355
  6655  0F00  30B8               	movlw	(low (_path| (0+256)))& (0+255)
  6656  0F01  0726               	addwf	??_PathTo,w
  6657  0F02  00A7               	movwf	??_PathTo+1
  6658  0F03  0859               	movf	_c,w
  6659  0F04  0727               	addwf	??_PathTo+1,w
  6660  0F05  00A8               	movwf	??_PathTo+2
  6661  0F06  0828               	movf	??_PathTo+2,w
  6662  0F07  0084               	movwf	4
  6663  0F08  1783               	bsf	3,7	;select IRP bank3
  6664  0F09  0180               	clrf	0
  6665  0F0A  3001               	movlw	1
  6666  0F0B  00A6               	movwf	??_PathTo
  6667  0F0C  0826               	movf	??_PathTo,w
  6668  0F0D  07D9               	addwf	_c,f
  6669  0F0E  3010               	movlw	16
  6670  0F0F  0259               	subwf	_c,w
  6671  0F10  1C03               	skipc
  6672  0F11  2EF8               	goto	l4401
  6673  0F12                     l4407:	
  6674  0F12  3001               	movlw	1
  6675  0F13  00A6               	movwf	??_PathTo
  6676  0F14  0826               	movf	??_PathTo,w
  6677  0F15  07DE               	addwf	_r,f
  6678  0F16  3002               	movlw	2
  6679  0F17  025E               	subwf	_r,w
  6680  0F18  1C03               	skipc
  6681  0F19  2EF3               	goto	l4395
  6682  0F1A                     l4411:	
  6683                           
  6684                           ;main.c: 192: }
  6685                           ;main.c: 193: }
  6686                           ;main.c: 194: }
  6687                           ;main.c: 195: }
  6688                           ;main.c: 201: if((sum == 4) || (pathCount >= 15)){
  6689  0F1A  3004               	movlw	4
  6690  0F1B  0642               	xorwf	PathTo@sum,w
  6691  0F1C  1903               	btfsc	3,2
  6692  0F1D  2F8C               	goto	l4425
  6693  0F1E  300F               	movlw	15
  6694  0F1F  025D               	subwf	_pathCount,w
  6695  0F20  1803               	btfsc	3,0
  6696  0F21  2F8C               	goto	l4425
  6697  0F22  2FD4               	goto	l216
  6698  0F23                     l4415:	
  6699                           ;main.c: 205: case 0: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 4);
  6700                           
  6701                           ;main.c: 204: switch(intersection_orientation){
  6702                           
  6703  0F23  3005               	movlw	5
  6704  0F24  00A6               	movwf	??_PathTo
  6705  0F25  0826               	movf	??_PathTo,w
  6706  0F26  00A0               	movwf	___bmul@multiplicand
  6707  0F27  0865               	movf	_y_int,w
  6708  0F28  160A  118A  2639  120A  158A  	fcall	___bmul
  6709  0F2D  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6710  0F2E  1283               	bcf	3,5	;RP0=0, select bank0
  6711  0F2F  1303               	bcf	3,6	;RP1=0, select bank0
  6712  0F30  0761               	addwf	_x_int,w
  6713  0F31  00A7               	movwf	??_PathTo+1
  6714  0F32  0827               	movf	??_PathTo+1,w
  6715  0F33  0084               	movwf	4
  6716  0F34  1383               	bcf	3,7	;select IRP bank0
  6717  0F35  0800               	movf	0,w
  6718  0F36  3E04               	addlw	4
  6719  0F37  2F76               	goto	L15
  6720  0F38                     l4417:	
  6721                           ;main.c: 207: case 1: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 2);
  6722                           
  6723                           ;main.c: 206: break;
  6724                           
  6725  0F38  3005               	movlw	5
  6726  0F39  00A6               	movwf	??_PathTo
  6727  0F3A  0826               	movf	??_PathTo,w
  6728  0F3B  00A0               	movwf	___bmul@multiplicand
  6729  0F3C  0865               	movf	_y_int,w
  6730  0F3D  160A  118A  2639  120A  158A  	fcall	___bmul
  6731  0F42  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6732  0F43  1283               	bcf	3,5	;RP0=0, select bank0
  6733  0F44  1303               	bcf	3,6	;RP1=0, select bank0
  6734  0F45  0761               	addwf	_x_int,w
  6735  0F46  00A7               	movwf	??_PathTo+1
  6736  0F47  0827               	movf	??_PathTo+1,w
  6737  0F48  0084               	movwf	4
  6738  0F49  1383               	bcf	3,7	;select IRP bank0
  6739  0F4A  0800               	movf	0,w
  6740  0F4B  3E02               	addlw	2
  6741  0F4C  2F76               	goto	L15
  6742  0F4D                     l4419:	
  6743                           ;main.c: 209: case 2: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 1);
  6744                           
  6745                           ;main.c: 208: break;
  6746                           
  6747  0F4D  3005               	movlw	5
  6748  0F4E  00A6               	movwf	??_PathTo
  6749  0F4F  0826               	movf	??_PathTo,w
  6750  0F50  00A0               	movwf	___bmul@multiplicand
  6751  0F51  0865               	movf	_y_int,w
  6752  0F52  160A  118A  2639  120A  158A  	fcall	___bmul
  6753  0F57  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6754  0F58  1283               	bcf	3,5	;RP0=0, select bank0
  6755  0F59  1303               	bcf	3,6	;RP1=0, select bank0
  6756  0F5A  0761               	addwf	_x_int,w
  6757  0F5B  00A7               	movwf	??_PathTo+1
  6758  0F5C  0827               	movf	??_PathTo+1,w
  6759  0F5D  0084               	movwf	4
  6760  0F5E  1383               	bcf	3,7	;select IRP bank0
  6761  0F5F  0800               	movf	0,w
  6762  0F60  3E01               	addlw	1
  6763  0F61  2F76               	goto	L15
  6764  0F62                     l4421:	
  6765                           ;main.c: 211: case 3: (mazeGrid[y_int][x_int]) = ((mazeGrid[y_int][x_int]) + 8);
  6766                           
  6767                           ;main.c: 210: break;
  6768                           
  6769  0F62  3005               	movlw	5
  6770  0F63  00A6               	movwf	??_PathTo
  6771  0F64  0826               	movf	??_PathTo,w
  6772  0F65  00A0               	movwf	___bmul@multiplicand
  6773  0F66  0865               	movf	_y_int,w
  6774  0F67  160A  118A  2639  120A  158A  	fcall	___bmul
  6775  0F6C  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6776  0F6D  1283               	bcf	3,5	;RP0=0, select bank0
  6777  0F6E  1303               	bcf	3,6	;RP1=0, select bank0
  6778  0F6F  0761               	addwf	_x_int,w
  6779  0F70  00A7               	movwf	??_PathTo+1
  6780  0F71  0827               	movf	??_PathTo+1,w
  6781  0F72  0084               	movwf	4
  6782  0F73  1383               	bcf	3,7	;select IRP bank0
  6783  0F74  0800               	movf	0,w
  6784  0F75  3E08               	addlw	8
  6785  0F76                     L15:	
  6786  0F76  00A8               	movwf	??_PathTo+2
  6787  0F77  3005               	movlw	5
  6788  0F78  00A9               	movwf	??_PathTo+3
  6789  0F79  0829               	movf	??_PathTo+3,w
  6790  0F7A  00A0               	movwf	___bmul@multiplicand
  6791  0F7B  0865               	movf	_y_int,w
  6792  0F7C  160A  118A  2639  120A  158A  	fcall	___bmul
  6793  0F81  3E2D               	addlw	(low (PathTo@mazeGrid| 0))& (0+255)
  6794  0F82  1283               	bcf	3,5	;RP0=0, select bank0
  6795  0F83  1303               	bcf	3,6	;RP1=0, select bank0
  6796  0F84  0761               	addwf	_x_int,w
  6797  0F85  00AA               	movwf	??_PathTo+4
  6798  0F86  082A               	movf	??_PathTo+4,w
  6799  0F87  0084               	movwf	4
  6800  0F88  0828               	movf	??_PathTo+2,w
  6801  0F89  1383               	bcf	3,7	;select IRP bank0
  6802  0F8A  0080               	movwf	0
  6803                           
  6804                           ;main.c: 213: }
  6805                           
  6806                           ;main.c: 212: break;
  6807  0F8B  2F9A               	goto	l4427
  6808  0F8C                     l4425:	
  6809  0F8C  085A               	movf	_intersection_orientation,w
  6810                           
  6811                           ; Switch size 1, requested type "space"
  6812                           ; Number of cases is 4, Range of values is 0 to 3
  6813                           ; switch strategies available:
  6814                           ; Name         Instructions Cycles
  6815                           ; simple_byte           13     7 (average)
  6816                           ; direct_byte           20     8 (fixed)
  6817                           ; jumptable            260     6 (fixed)
  6818                           ;	Chosen strategy is simple_byte
  6819  0F8D  3A00               	xorlw	0	; case 0
  6820  0F8E  1903               	skipnz
  6821  0F8F  2F23               	goto	l4415
  6822  0F90  3A01               	xorlw	1	; case 1
  6823  0F91  1903               	skipnz
  6824  0F92  2F38               	goto	l4417
  6825  0F93  3A03               	xorlw	3	; case 2
  6826  0F94  1903               	skipnz
  6827  0F95  2F4D               	goto	l4419
  6828  0F96  3A01               	xorlw	1	; case 3
  6829  0F97  1903               	skipnz
  6830  0F98  2F62               	goto	l4421
  6831  0F99  2F9A               	goto	l4427
  6832  0F9A                     l4427:	
  6833                           
  6834                           ;main.c: 216: x_path = x;
  6835  0F9A  0869               	movf	_x,w
  6836  0F9B  00A6               	movwf	??_PathTo
  6837  0F9C  0826               	movf	??_PathTo,w
  6838  0F9D  00E2               	movwf	_x_path
  6839                           
  6840                           ;main.c: 217: y_path = y;
  6841  0F9E  0863               	movf	_y,w
  6842  0F9F  00A6               	movwf	??_PathTo
  6843  0FA0  0826               	movf	??_PathTo,w
  6844  0FA1  00E6               	movwf	_y_path
  6845                           
  6846                           ;main.c: 218: orientation_path = orientation;
  6847  0FA2  0867               	movf	_orientation,w
  6848  0FA3  00A6               	movwf	??_PathTo
  6849  0FA4  0826               	movf	??_PathTo,w
  6850  0FA5  00DC               	movwf	_orientation_path
  6851                           
  6852                           ;main.c: 219: pathCount = 0;
  6853  0FA6  01DD               	clrf	_pathCount
  6854                           
  6855                           ;main.c: 220: reset_flag = 1;
  6856  0FA7  16F0               	bsf	_reset_flag/(0+8),_reset_flag& (0+7)
  6857                           
  6858                           ;main.c: 222: for (r = 0; r <= 1; r++){
  6859  0FA8  01DE               	clrf	_r
  6860  0FA9  3002               	movlw	2
  6861  0FAA  025E               	subwf	_r,w
  6862  0FAB  1803               	btfsc	3,0
  6863  0FAC  2FD4               	goto	l216
  6864  0FAD                     l4437:	
  6865                           
  6866                           ;main.c: 223: for (c = 0; c <= 15; c++){
  6867  0FAD  01D9               	clrf	_c
  6868  0FAE  3010               	movlw	16
  6869  0FAF  0259               	subwf	_c,w
  6870  0FB0  1803               	btfsc	3,0
  6871  0FB1  2FCC               	goto	l4449
  6872  0FB2                     l4443:	
  6873                           
  6874                           ;main.c: 224: path[r][c] = 0;
  6875  0FB2  085E               	movf	_r,w
  6876  0FB3  00A6               	movwf	??_PathTo
  6877  0FB4  3004               	movlw	4
  6878  0FB5                     u3425:	
  6879  0FB5  1003               	clrc
  6880  0FB6  0DA6               	rlf	??_PathTo,f
  6881  0FB7  3EFF               	addlw	-1
  6882  0FB8  1D03               	skipz
  6883  0FB9  2FB5               	goto	u3425
  6884  0FBA  30B8               	movlw	(low (_path| (0+256)))& (0+255)
  6885  0FBB  0726               	addwf	??_PathTo,w
  6886  0FBC  00A7               	movwf	??_PathTo+1
  6887  0FBD  0859               	movf	_c,w
  6888  0FBE  0727               	addwf	??_PathTo+1,w
  6889  0FBF  00A8               	movwf	??_PathTo+2
  6890  0FC0  0828               	movf	??_PathTo+2,w
  6891  0FC1  0084               	movwf	4
  6892  0FC2  1783               	bsf	3,7	;select IRP bank3
  6893  0FC3  0180               	clrf	0
  6894  0FC4  3001               	movlw	1
  6895  0FC5  00A6               	movwf	??_PathTo
  6896  0FC6  0826               	movf	??_PathTo,w
  6897  0FC7  07D9               	addwf	_c,f
  6898  0FC8  3010               	movlw	16
  6899  0FC9  0259               	subwf	_c,w
  6900  0FCA  1C03               	skipc
  6901  0FCB  2FB2               	goto	l4443
  6902  0FCC                     l4449:	
  6903  0FCC  3001               	movlw	1
  6904  0FCD  00A6               	movwf	??_PathTo
  6905  0FCE  0826               	movf	??_PathTo,w
  6906  0FCF  07DE               	addwf	_r,f
  6907  0FD0  3002               	movlw	2
  6908  0FD1  025E               	subwf	_r,w
  6909  0FD2  1C03               	skipc
  6910  0FD3  2FAD               	goto	l4437
  6911  0FD4                     l216:	
  6912                           
  6913                           ;main.c: 225: }
  6914                           ;main.c: 226: }
  6915                           ;main.c: 227: }
  6916                           ;main.c: 236: if (reset_flag != 1){
  6917  0FD4  1AF0               	btfsc	_reset_flag/(0+8),_reset_flag& (0+7)
  6918  0FD5  2FF9               	goto	l229
  6919                           
  6920                           ;main.c: 239: if(left == 0){
  6921  0FD6  19F0               	btfsc	_left/(0+8),_left& (0+7)
  6922  0FD7  2FDC               	goto	l230
  6923                           
  6924                           ;main.c: 240: x_path--;
  6925  0FD8  3001               	movlw	1
  6926  0FD9  02E2               	subwf	_x_path,f
  6927                           
  6928                           ;main.c: 241: orientation_path = 3;
  6929  0FDA  3003               	movlw	3
  6930  0FDB  2FF2               	goto	L17
  6931  0FDC                     l230:	
  6932                           ;main.c: 243: }
  6933                           
  6934                           ;main.c: 242: pathCount++;
  6935                           
  6936                           
  6937                           ;main.c: 244: else if(up == 0){
  6938  0FDC  18F1               	btfsc	_up/(0+8),_up& (0+7)
  6939  0FDD  2FE2               	goto	l232
  6940                           
  6941                           ;main.c: 245: y_path--;
  6942  0FDE  3001               	movlw	1
  6943  0FDF  02E6               	subwf	_y_path,f
  6944                           
  6945                           ;main.c: 246: orientation_path = 0;
  6946  0FE0  01DC               	clrf	_orientation_path
  6947  0FE1  2FF5               	goto	l4475
  6948  0FE2                     l232:	
  6949                           ;main.c: 248: }
  6950                           
  6951                           ;main.c: 247: pathCount++;
  6952                           
  6953                           
  6954                           ;main.c: 249: else if(right == 0){
  6955  0FE2  1B70               	btfsc	_right/(0+8),_right& (0+7)
  6956  0FE3  2FEB               	goto	l234
  6957                           
  6958                           ;main.c: 250: x_path++;
  6959  0FE4  3001               	movlw	1
  6960  0FE5  00A6               	movwf	??_PathTo
  6961  0FE6  0826               	movf	??_PathTo,w
  6962  0FE7  07E2               	addwf	_x_path,f
  6963                           
  6964                           ;main.c: 251: orientation_path = 1;
  6965  0FE8  01DC               	clrf	_orientation_path
  6966  0FE9  0ADC               	incf	_orientation_path,f
  6967  0FEA  2FF5               	goto	l4475
  6968  0FEB                     l234:	
  6969                           ;main.c: 253: }
  6970                           
  6971                           ;main.c: 252: pathCount++;
  6972                           
  6973                           
  6974                           ;main.c: 254: else if(down == 0){
  6975  0FEB  18F0               	btfsc	_down/(0+8),_down& (0+7)
  6976  0FEC  2FF9               	goto	l229
  6977                           
  6978                           ;main.c: 255: y_path++;
  6979  0FED  3001               	movlw	1
  6980  0FEE  00A6               	movwf	??_PathTo
  6981  0FEF  0826               	movf	??_PathTo,w
  6982  0FF0  07E6               	addwf	_y_path,f
  6983                           
  6984                           ;main.c: 256: orientation_path = 2;
  6985  0FF1  3002               	movlw	2
  6986  0FF2                     L17:	
  6987  0FF2  00A6               	movwf	??_PathTo
  6988  0FF3  0826               	movf	??_PathTo,w
  6989  0FF4  00DC               	movwf	_orientation_path
  6990  0FF5                     l4475:	
  6991                           
  6992                           ;main.c: 257: pathCount++;
  6993  0FF5  3001               	movlw	1
  6994  0FF6  00A6               	movwf	??_PathTo
  6995  0FF7  0826               	movf	??_PathTo,w
  6996  0FF8  07DD               	addwf	_pathCount,f
  6997  0FF9                     l229:	
  6998  0FF9  3001               	movlw	1
  6999  0FFA  07C3               	addwf	PathTo@loop,f
  7000  0FFB  1803               	skipnc
  7001  0FFC  0AC4               	incf	PathTo@loop+1,f
  7002  0FFD  3000               	movlw	0
  7003  0FFE  07C4               	addwf	PathTo@loop+1,f
  7004  0FFF  2D4E               	goto	L16
  7005  1000                     __end_of_PathTo:	
  7006                           
  7007                           	psect	text22
  7008  16CB                     __ptext22:	
  7009 ;; *************** function _lcdWriteString *****************
  7010 ;; Defined at:
  7011 ;;		line 32 in file "LCD.c"
  7012 ;; Parameters:    Size  Location     Type
  7013 ;;  s               1    wreg     PTR unsigned char 
  7014 ;;		 -> STR_1(11), 
  7015 ;; Auto vars:     Size  Location     Type
  7016 ;;  s               1    4[BANK0 ] PTR unsigned char 
  7017 ;;		 -> STR_1(11), 
  7018 ;; Return value:  Size  Location     Type
  7019 ;;                  1    wreg      void 
  7020 ;; Registers used:
  7021 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7022 ;; Tracked objects:
  7023 ;;		On entry : 0/0
  7024 ;;		On exit  : 0/0
  7025 ;;		Unchanged: 0/0
  7026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7027 ;;      Params:         0       0       0       0       0
  7028 ;;      Locals:         0       1       0       0       0
  7029 ;;      Temps:          0       1       0       0       0
  7030 ;;      Totals:         0       2       0       0       0
  7031 ;;Total ram usage:        2 bytes
  7032 ;; Hardware stack levels used:    1
  7033 ;; Hardware stack levels required when called:    2
  7034 ;; This function calls:
  7035 ;;		_lcdWriteData
  7036 ;; This function is called by:
  7037 ;;		_PathTo
  7038 ;; This function uses a non-reentrant model
  7039 ;;
  7040                           
  7041                           
  7042                           ;psect for function _lcdWriteString
  7043  16CB                     _lcdWriteString:	
  7044                           
  7045                           ;incstack = 0
  7046                           ; Regs used in _lcdWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7047                           ;lcdWriteString@s stored from wreg
  7048  16CB  1283               	bcf	3,5	;RP0=0, select bank0
  7049  16CC  1303               	bcf	3,6	;RP1=0, select bank0
  7050  16CD  00A4               	movwf	lcdWriteString@s
  7051  16CE                     l4125:	
  7052                           ;LCD.c: 34: while(*s) lcdWriteData(*s++);
  7053                           
  7054  16CE  0824               	movf	lcdWriteString@s,w
  7055  16CF  0084               	movwf	4
  7056  16D0  160A  118A  2000  160A  118A  	fcall	stringdir
  7057  16D5  3A00               	xorlw	0
  7058  16D6  1903               	btfsc	3,2
  7059  16D7  0008               	return
  7060  16D8  0824               	movf	lcdWriteString@s,w
  7061  16D9  0084               	movwf	4
  7062  16DA  160A  118A  2000  160A  118A  	fcall	stringdir
  7063  16DF  160A  118A  264C  160A  118A  	fcall	_lcdWriteData
  7064  16E4  3001               	movlw	1
  7065  16E5  1283               	bcf	3,5	;RP0=0, select bank0
  7066  16E6  1303               	bcf	3,6	;RP1=0, select bank0
  7067  16E7  00A3               	movwf	??_lcdWriteString
  7068  16E8  0823               	movf	??_lcdWriteString,w
  7069  16E9  07A4               	addwf	lcdWriteString@s,f
  7070  16EA  2ECE               	goto	l4125
  7071  16EB                     __end_of_lcdWriteString:	
  7072                           
  7073                           	psect	text23
  7074  164C                     __ptext23:	
  7075 ;; *************** function _lcdWriteData *****************
  7076 ;; Defined at:
  7077 ;;		line 16 in file "LCD.c"
  7078 ;; Parameters:    Size  Location     Type
  7079 ;;  databyte        1    wreg     unsigned char 
  7080 ;; Auto vars:     Size  Location     Type
  7081 ;;  databyte        1    2[BANK0 ] unsigned char 
  7082 ;; Return value:  Size  Location     Type
  7083 ;;                  1    wreg      void 
  7084 ;; Registers used:
  7085 ;;		wreg
  7086 ;; Tracked objects:
  7087 ;;		On entry : 0/0
  7088 ;;		On exit  : 0/0
  7089 ;;		Unchanged: 0/0
  7090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7091 ;;      Params:         0       0       0       0       0
  7092 ;;      Locals:         0       1       0       0       0
  7093 ;;      Temps:          0       2       0       0       0
  7094 ;;      Totals:         0       3       0       0       0
  7095 ;;Total ram usage:        3 bytes
  7096 ;; Hardware stack levels used:    1
  7097 ;; Hardware stack levels required when called:    1
  7098 ;; This function calls:
  7099 ;;		Nothing
  7100 ;; This function is called by:
  7101 ;;		_lcdWriteString
  7102 ;;		_lcdWriteToDigitBCD
  7103 ;; This function uses a non-reentrant model
  7104 ;;
  7105                           
  7106                           
  7107                           ;psect for function _lcdWriteData
  7108  164C                     _lcdWriteData:	
  7109                           
  7110                           ;incstack = 0
  7111                           ; Regs used in _lcdWriteData: [wreg]
  7112                           ;lcdWriteData@databyte stored from wreg
  7113  164C  1283               	bcf	3,5	;RP0=0, select bank0
  7114  164D  1303               	bcf	3,6	;RP1=0, select bank0
  7115  164E  00A2               	movwf	lcdWriteData@databyte
  7116                           
  7117                           ;LCD.c: 17: RE2 = 0;
  7118  164F  1109               	bcf	9,2	;volatile
  7119                           
  7120                           ;LCD.c: 18: RE1 = 0;
  7121  1650  1089               	bcf	9,1	;volatile
  7122                           
  7123                           ;LCD.c: 19: RE0 = 1;
  7124  1651  1409               	bsf	9,0	;volatile
  7125                           
  7126                           ;LCD.c: 20: PORTD = databyte;
  7127  1652  0822               	movf	lcdWriteData@databyte,w
  7128  1653  0088               	movwf	8	;volatile
  7129                           
  7130                           ;LCD.c: 21: RE2 = 1;
  7131  1654  1509               	bsf	9,2	;volatile
  7132                           
  7133                           ;LCD.c: 22: RE2 = 0;
  7134  1655  1109               	bcf	9,2	;volatile
  7135                           
  7136                           ;LCD.c: 23: _delay((unsigned long)((1)*(20000000/4000.0)));
  7137  1656  3007               	movlw	7
  7138  1657  00A1               	movwf	??_lcdWriteData+1
  7139  1658  307D               	movlw	125
  7140  1659  00A0               	movwf	??_lcdWriteData
  7141  165A                     u4007:	
  7142  165A  0BA0               	decfsz	??_lcdWriteData,f
  7143  165B  2E5A               	goto	u4007
  7144  165C  0BA1               	decfsz	??_lcdWriteData+1,f
  7145  165D  2E5A               	goto	u4007
  7146  165E  0008               	return
  7147  165F                     __end_of_lcdWriteData:	
  7148                           
  7149                           	psect	text24
  7150  15FA                     __ptext24:	
  7151 ;; *************** function _lcdSetCursor *****************
  7152 ;; Defined at:
  7153 ;;		line 27 in file "LCD.c"
  7154 ;; Parameters:    Size  Location     Type
  7155 ;;  address         1    wreg     unsigned char 
  7156 ;; Auto vars:     Size  Location     Type
  7157 ;;  address         1    3[BANK0 ] unsigned char 
  7158 ;; Return value:  Size  Location     Type
  7159 ;;                  1    wreg      void 
  7160 ;; Registers used:
  7161 ;;		wreg, status,2, status,0, pclath, cstack
  7162 ;; Tracked objects:
  7163 ;;		On entry : 0/0
  7164 ;;		On exit  : 0/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7167 ;;      Params:         0       0       0       0       0
  7168 ;;      Locals:         0       1       0       0       0
  7169 ;;      Temps:          0       0       0       0       0
  7170 ;;      Totals:         0       1       0       0       0
  7171 ;;Total ram usage:        1 bytes
  7172 ;; Hardware stack levels used:    1
  7173 ;; Hardware stack levels required when called:    2
  7174 ;; This function calls:
  7175 ;;		_lcdWriteControl
  7176 ;; This function is called by:
  7177 ;;		_PathTo
  7178 ;;		_ADCMain
  7179 ;; This function uses a non-reentrant model
  7180 ;;
  7181                           
  7182                           
  7183                           ;psect for function _lcdSetCursor
  7184  15FA                     _lcdSetCursor:	
  7185                           
  7186                           ;incstack = 0
  7187                           ; Regs used in _lcdSetCursor: [wreg+status,2+status,0+pclath+cstack]
  7188                           ;lcdSetCursor@address stored from wreg
  7189  15FA  1283               	bcf	3,5	;RP0=0, select bank0
  7190  15FB  1303               	bcf	3,6	;RP1=0, select bank0
  7191  15FC  00A3               	movwf	lcdSetCursor@address
  7192                           
  7193                           ;LCD.c: 28: address |= 0b10000000;
  7194  15FD  17A3               	bsf	lcdSetCursor@address,7
  7195                           
  7196                           ;LCD.c: 29: lcdWriteControl(address);
  7197  15FE  0823               	movf	lcdSetCursor@address,w
  7198  15FF  160A  118A  265F   	fcall	_lcdWriteControl
  7199  1602  0008               	return
  7200  1603                     __end_of_lcdSetCursor:	
  7201                           
  7202                           	psect	text25
  7203  165F                     __ptext25:	
  7204 ;; *************** function _lcdWriteControl *****************
  7205 ;; Defined at:
  7206 ;;		line 5 in file "LCD.c"
  7207 ;; Parameters:    Size  Location     Type
  7208 ;;  databyte        1    wreg     unsigned char 
  7209 ;; Auto vars:     Size  Location     Type
  7210 ;;  databyte        1    2[BANK0 ] unsigned char 
  7211 ;; Return value:  Size  Location     Type
  7212 ;;                  1    wreg      void 
  7213 ;; Registers used:
  7214 ;;		wreg
  7215 ;; Tracked objects:
  7216 ;;		On entry : 0/0
  7217 ;;		On exit  : 0/0
  7218 ;;		Unchanged: 0/0
  7219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7220 ;;      Params:         0       0       0       0       0
  7221 ;;      Locals:         0       1       0       0       0
  7222 ;;      Temps:          0       2       0       0       0
  7223 ;;      Totals:         0       3       0       0       0
  7224 ;;Total ram usage:        3 bytes
  7225 ;; Hardware stack levels used:    1
  7226 ;; Hardware stack levels required when called:    1
  7227 ;; This function calls:
  7228 ;;		Nothing
  7229 ;; This function is called by:
  7230 ;;		_lcdSetCursor
  7231 ;;		_setupLCD
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234                           
  7235                           
  7236                           ;psect for function _lcdWriteControl
  7237  165F                     _lcdWriteControl:	
  7238                           
  7239                           ;incstack = 0
  7240                           ; Regs used in _lcdWriteControl: [wreg]
  7241                           ;lcdWriteControl@databyte stored from wreg
  7242  165F  1283               	bcf	3,5	;RP0=0, select bank0
  7243  1660  1303               	bcf	3,6	;RP1=0, select bank0
  7244  1661  00A2               	movwf	lcdWriteControl@databyte
  7245                           
  7246                           ;LCD.c: 6: RE2 = 0;
  7247  1662  1109               	bcf	9,2	;volatile
  7248                           
  7249                           ;LCD.c: 7: RE1 = 0;
  7250  1663  1089               	bcf	9,1	;volatile
  7251                           
  7252                           ;LCD.c: 8: RE0 = 0;
  7253  1664  1009               	bcf	9,0	;volatile
  7254                           
  7255                           ;LCD.c: 9: PORTD = databyte;
  7256  1665  0822               	movf	lcdWriteControl@databyte,w
  7257  1666  0088               	movwf	8	;volatile
  7258                           
  7259                           ;LCD.c: 10: RE2 = 1;
  7260  1667  1509               	bsf	9,2	;volatile
  7261                           
  7262                           ;LCD.c: 11: RE2 = 0;
  7263  1668  1109               	bcf	9,2	;volatile
  7264                           
  7265                           ;LCD.c: 12: _delay((unsigned long)((2)*(20000000/4000.0)));
  7266  1669  300D               	movlw	13
  7267  166A  00A1               	movwf	??_lcdWriteControl+1
  7268  166B  30FB               	movlw	251
  7269  166C  00A0               	movwf	??_lcdWriteControl
  7270  166D                     u4017:	
  7271  166D  0BA0               	decfsz	??_lcdWriteControl,f
  7272  166E  2E6D               	goto	u4017
  7273  166F  0BA1               	decfsz	??_lcdWriteControl+1,f
  7274  1670  2E6D               	goto	u4017
  7275  1671  2E72               	nop2
  7276  1672  0008               	return
  7277  1673                     __end_of_lcdWriteControl:	
  7278                           
  7279                           	psect	text26
  7280  1639                     __ptext26:	
  7281 ;; *************** function ___bmul *****************
  7282 ;; Defined at:
  7283 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  7284 ;; Parameters:    Size  Location     Type
  7285 ;;  multiplier      1    wreg     unsigned char 
  7286 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7287 ;; Auto vars:     Size  Location     Type
  7288 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7289 ;;  product         1    2[BANK0 ] unsigned char 
  7290 ;; Return value:  Size  Location     Type
  7291 ;;                  1    wreg      unsigned char 
  7292 ;; Registers used:
  7293 ;;		wreg, status,2, status,0
  7294 ;; Tracked objects:
  7295 ;;		On entry : 0/0
  7296 ;;		On exit  : 0/0
  7297 ;;		Unchanged: 0/0
  7298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7299 ;;      Params:         0       1       0       0       0
  7300 ;;      Locals:         0       2       0       0       0
  7301 ;;      Temps:          0       1       0       0       0
  7302 ;;      Totals:         0       4       0       0       0
  7303 ;;Total ram usage:        4 bytes
  7304 ;; Hardware stack levels used:    1
  7305 ;; Hardware stack levels required when called:    1
  7306 ;; This function calls:
  7307 ;;		Nothing
  7308 ;; This function is called by:
  7309 ;;		_PathTo
  7310 ;;		_re_route
  7311 ;; This function uses a non-reentrant model
  7312 ;;
  7313                           
  7314                           
  7315                           ;psect for function ___bmul
  7316  1639                     ___bmul:	
  7317                           
  7318                           ;incstack = 0
  7319                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7320                           ;___bmul@multiplier stored from wreg
  7321  1639  1283               	bcf	3,5	;RP0=0, select bank0
  7322  163A  1303               	bcf	3,6	;RP1=0, select bank0
  7323  163B  00A3               	movwf	___bmul@multiplier
  7324  163C  01A2               	clrf	___bmul@product
  7325  163D                     l4237:	
  7326  163D  1C23               	btfss	___bmul@multiplier,0
  7327  163E  2E43               	goto	l4241
  7328  163F  0820               	movf	___bmul@multiplicand,w
  7329  1640  00A1               	movwf	??___bmul
  7330  1641  0821               	movf	??___bmul,w
  7331  1642  07A2               	addwf	___bmul@product,f
  7332  1643                     l4241:	
  7333  1643  1003               	clrc
  7334  1644  0DA0               	rlf	___bmul@multiplicand,f
  7335  1645  1003               	clrc
  7336  1646  0CA3               	rrf	___bmul@multiplier,f
  7337  1647  0823               	movf	___bmul@multiplier,w
  7338  1648  1D03               	btfss	3,2
  7339  1649  2E3D               	goto	l4237
  7340  164A  0822               	movf	___bmul@product,w
  7341  164B  0008               	return
  7342  164C                     __end_of___bmul:	
  7343                           
  7344                           	psect	text27
  7345  170E                     __ptext27:	
  7346 ;; *************** function _isr *****************
  7347 ;; Defined at:
  7348 ;;		line 504 in file "main.c"
  7349 ;; Parameters:    Size  Location     Type
  7350 ;;		None
  7351 ;; Auto vars:     Size  Location     Type
  7352 ;;		None
  7353 ;; Return value:  Size  Location     Type
  7354 ;;                  1    wreg      void 
  7355 ;; Registers used:
  7356 ;;		wreg, status,2, status,0
  7357 ;; Tracked objects:
  7358 ;;		On entry : 0/0
  7359 ;;		On exit  : 0/0
  7360 ;;		Unchanged: 0/0
  7361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7362 ;;      Params:         0       0       0       0       0
  7363 ;;      Locals:         0       0       0       0       0
  7364 ;;      Temps:          5       0       0       0       0
  7365 ;;      Totals:         5       0       0       0       0
  7366 ;;Total ram usage:        5 bytes
  7367 ;; Hardware stack levels used:    1
  7368 ;; This function calls:
  7369 ;;		Nothing
  7370 ;; This function is called by:
  7371 ;;		Interrupt level 1
  7372 ;; This function uses a non-reentrant model
  7373 ;;
  7374                           
  7375                           
  7376                           ;psect for function _isr
  7377  170E                     _isr:	
  7378                           
  7379                           ;main.c: 505: if(TMR0IF){
  7380  170E  1D0B               	btfss	11,2	;volatile
  7381  170F  2F29               	goto	i1l340
  7382                           
  7383                           ;main.c: 506: TMR0IF = 0;
  7384  1710  110B               	bcf	11,2	;volatile
  7385                           
  7386                           ;main.c: 507: TMR0 = 100;
  7387  1711  3064               	movlw	100
  7388  1712  0081               	movwf	1	;volatile
  7389                           
  7390                           ;main.c: 508: time_count++;
  7391  1713  3001               	movlw	1
  7392  1714  1683               	bsf	3,5	;RP0=1, select bank1
  7393  1715  1303               	bcf	3,6	;RP1=0, select bank1
  7394  1716  07CC               	addwf	_time_count^(0+128),f	;volatile
  7395  1717  1803               	skipnc
  7396  1718  0ACD               	incf	(_time_count+1)^(0+128),f	;volatile
  7397  1719  3000               	movlw	0
  7398  171A  07CD               	addwf	(_time_count+1)^(0+128),f	;volatile
  7399                           
  7400                           ;main.c: 510: if(!RB0)
  7401  171B  1283               	bcf	3,5	;RP0=0, select bank0
  7402  171C  1303               	bcf	3,6	;RP1=0, select bank0
  7403  171D  1806               	btfsc	6,0	;volatile
  7404  171E  2F23               	goto	i1l3467
  7405                           
  7406                           ;main.c: 511: PB8Counter++;
  7407  171F  3001               	movlw	1
  7408  1720  00F2               	movwf	??_isr
  7409  1721  0872               	movf	??_isr,w
  7410  1722  07D6               	addwf	_PB8Counter,f
  7411  1723                     i1l3467:	
  7412                           
  7413                           ;main.c: 512: if(!RB1)
  7414  1723  1886               	btfsc	6,1	;volatile
  7415  1724  2F29               	goto	i1l340
  7416                           
  7417                           ;main.c: 513: PB7Counter++;
  7418  1725  3001               	movlw	1
  7419  1726  00F2               	movwf	??_isr
  7420  1727  0872               	movf	??_isr,w
  7421  1728  07D5               	addwf	_PB7Counter,f
  7422  1729                     i1l340:	
  7423  1729  0876               	movf	??_isr+4,w
  7424  172A  00FF               	movwf	127
  7425  172B  0875               	movf	??_isr+3,w
  7426  172C  008A               	movwf	10
  7427  172D  0874               	movf	??_isr+2,w
  7428  172E  0084               	movwf	4
  7429  172F  0E73               	swapf	(??_isr+1)^(0+-128),w
  7430  1730  0083               	movwf	3
  7431  1731  0EFE               	swapf	126,f
  7432  1732  0E7E               	swapf	126,w
  7433  1733  0009               	retfie
  7434  1734                     __end_of_isr:	
  7435  007E                     btemp	set	126	;btemp
  7436  007E                     wtemp	set	126
  7437  007E                     wtemp0	set	126
  7438  0080                     wtemp1	set	128
  7439  0082                     wtemp2	set	130
  7440  0084                     wtemp3	set	132
  7441  0086                     wtemp4	set	134
  7442  0088                     wtemp5	set	136
  7443  007F                     wtemp6	set	127
  7444  007E                     ttemp	set	126
  7445  007E                     ttemp0	set	126
  7446  0081                     ttemp1	set	129
  7447  0084                     ttemp2	set	132
  7448  0087                     ttemp3	set	135
  7449  007F                     ttemp4	set	127
  7450  007E                     ltemp	set	126
  7451  007E                     ltemp0	set	126
  7452  0082                     ltemp1	set	130
  7453  0086                     ltemp2	set	134
  7454  0080                     ltemp3	set	128
  7455                           
  7456                           	psect	intentry
  7457  0004                     __pintentry:	
  7458                           ;incstack = 0
  7459                           ; Regs used in _isr: [wreg+status,2+status,0]
  7460                           
  7461  0004                     interrupt_function:	
  7462  007E                     saved_w	set	btemp
  7463  0004  00FE               	movwf	btemp
  7464  0005  0E03               	swapf	3,w
  7465  0006  00F3               	movwf	??_isr+1
  7466  0007  0804               	movf	4,w
  7467  0008  00F4               	movwf	??_isr+2
  7468  0009  080A               	movf	10,w
  7469  000A  00F5               	movwf	??_isr+3
  7470  000B  1283               	bcf	3,5	;RP0=0, select bank0
  7471  000C  1303               	bcf	3,6	;RP1=0, select bank0
  7472  000D  087F               	movf	btemp+1,w
  7473  000E  00F6               	movwf	??_isr+4
  7474  000F  160A  118A  2F0E   	ljmp	_isr


Data Sizes:
    Strings     11
    Constant    0
    Data        131
    BSS         115
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     45      78
    BANK1            80      6      80
    BANK3            96      0      72
    BANK2            96      0      64

Pointer List with Targets:

    lcdWriteString@s	PTR unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_re_route
    _setupLCD->_lcdWriteControl
    _re_route->_PathTo
    _TravelPath->_Drive1m
    _Turn90->_DriveDirect
    _Drive->_ser_putch
    _Drive1m->_wallFollow
    _DriveDirect->_ser_putch
    _ADCMain->_lcdWriteToDigitBCD
    _lcdWriteToDigitBCD->_lcdWriteData
    _getSensorData->_ser_getch
    _PathTo->_lcdWriteString
    _lcdWriteString->_lcdWriteData
    _lcdSetCursor->_lcdWriteControl

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   40986
                                             42 BANK0      3     3      0
                                              0 BANK1      6     6      0
                        _DriveDirect
                             _PathTo
                         _TravelPath
                           _re_route
                           _ser_init
                          _ser_putch
                           _setupADC
                           _setupLCD
                           _setupSPI
                       _spi_transfer
 ---------------------------------------------------------------------------------
 (1) _spi_transfer                                         3     3      0      44
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setupSPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupLCD                                             0     0      0      31
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _re_route                                             5     5      0   22748
                                             37 BANK0      5     5      0
                        _DriveDirect
                             _PathTo
                         _TravelPath
                             _Turn90
                             ___bmul
                      _getSensorData
 ---------------------------------------------------------------------------------
 (2) _TravelPath                                           3     3      0   12290
                                             26 BANK0      3     3      0
                            _Drive1m
                             _Turn90
 ---------------------------------------------------------------------------------
 (2) _Turn90                                               4     4      0    3393
                                             10 BANK0      4     4      0
                              _Drive
                        _DriveDirect
                      _getSensorData
 ---------------------------------------------------------------------------------
 (3) _Drive                                                4     1      3     545
                                              1 BANK0      4     1      3
                          _ser_putch
 ---------------------------------------------------------------------------------
 (3) _Drive1m                                              5     5      0    8733
                                             21 BANK0      5     5      0
                        _DriveDirect
                      _getSensorData
                          _ser_putch
                         _wallFollow
 ---------------------------------------------------------------------------------
 (4) _wallFollow                                           6     6      0    5817
                                             15 BANK0      6     6      0
                            _ADCMain
                        _DriveDirect
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2196
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     501
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _DriveDirect                                          9     5      4    2235
                                              1 BANK0      9     5      4
                          _ser_putch
 ---------------------------------------------------------------------------------
 (5) _ADCMain                                              0     0      0     727
                             _getADC
                       _lcdSetCursor
                 _lcdWriteToDigitBCD
 ---------------------------------------------------------------------------------
 (6) _lcdWriteToDigitBCD                                  12    10      2     662
                                              3 BANK0     12    10      2
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (6) _getADC                                               2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getSensorData                                        7     5      2     551
                                              2 BANK0      7     5      2
                          _ser_getch
                          _ser_putch
 ---------------------------------------------------------------------------------
 (1) _ser_putch                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ser_getch                                            2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PathTo                                              32    31      1    3093
                                              5 BANK0     32    31      1
                             ___bmul
                       _lcdSetCursor
                     _lcdWriteString
 ---------------------------------------------------------------------------------
 (3) _lcdWriteString                                       2     2      0     126
                                              3 BANK0      2     2      0
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (7) _lcdWriteData                                         3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (6) _lcdSetCursor                                         1     1      0      65
                                              3 BANK0      1     1      0
                    _lcdWriteControl
 ---------------------------------------------------------------------------------
 (2) _lcdWriteControl                                      3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1    1186
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DriveDirect
     _ser_putch
   _PathTo
     ___bmul
     _lcdSetCursor
       _lcdWriteControl
     _lcdWriteString
       _lcdWriteData
   _TravelPath
     _Drive1m
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
       _ser_putch
       _wallFollow
         _ADCMain
           _getADC
           _lcdSetCursor
             _lcdWriteControl
           _lcdWriteToDigitBCD
             _lcdWriteData
         _DriveDirect
           _ser_putch
         ___lwdiv
         ___wmul
     _Turn90
       _Drive
         _ser_putch
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
   _re_route
     _DriveDirect
       _ser_putch
     _PathTo
       ___bmul
       _lcdSetCursor
         _lcdWriteControl
       _lcdWriteString
         _lcdWriteData
     _TravelPath
       _Drive1m
         _DriveDirect
           _ser_putch
         _getSensorData
           _ser_getch
           _ser_putch
         _ser_putch
         _wallFollow
           _ADCMain
             _getADC
             _lcdSetCursor
               _lcdWriteControl
             _lcdWriteToDigitBCD
               _lcdWriteData
           _DriveDirect
             _ser_putch
           ___lwdiv
           ___wmul
       _Turn90
         _Drive
           _ser_putch
         _DriveDirect
           _ser_putch
         _getSensorData
           _ser_getch
           _ser_putch
     _Turn90
       _Drive
         _ser_putch
       _DriveDirect
         _ser_putch
       _getSensorData
         _ser_getch
         _ser_putch
     ___bmul
     _getSensorData
       _ser_getch
       _ser_putch
   _ser_init
   _ser_putch
   _setupADC
   _setupLCD
     _lcdWriteControl
   _setupSPI
   _spi_transfer

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      48       9       75.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      40      11       66.7%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      6      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2D      4E       5       97.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       A       1       71.4%
BITCOMMON            E      0       2       0       14.3%
CODE                 0      0       0       0        0.0%
DATA                 0      0     130      12        0.0%
ABS                  0      0     130       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Oct 09 20:11:43 2016

                             _c 0059                               _r 005E                               _x 0069  
               ??_getSensorData 0024                               _y 0063                               pc 0002  
                ___bmul@product 0022                     __CFG_CP$OFF 0000                              _GO 00FA  
                            _up 0389                              fsr 0004             ___wmul@multiplicand 0022  
                   Drive@speedH 0024                     Drive@speedL 0021                             l230 0FDC  
                           l232 0FE2                             l216 0FD4                             l234 0FEB  
                           l242 0C00                             l229 0FF9                             l261 0C43  
                           l245 0BDC                             l190 0DE1                             l191 0E1C  
                           l263 0C61                             l247 0BDE                             l192 0E0D  
                           l256 0BE0                             l249 0BDE                             l194 0E11  
                           l186 0DDB                             l610 09D4                             l196 0E16  
                           l188 0DDD                             l189 0DDF                             l737 0881  
                           l746 08BC                             l880 1610                             l886 1603  
                           _GIE 005F                             _RB0 0030                             _RB1 0031  
                           _RB2 0032                   ??_DriveDirect 0025                             _RB3 0033  
                           _RC2 003A                             _RE0 0048                             _RE1 0049  
                           _RE2 004A                    __CFG_CPD$OFF 0000                             _isr 170E  
               __end_of_ADCMain 169C                             fsr0 0004                             indf 0000  
                  __CFG_FOSC$HS 0000                  ??_lcdWriteData 0020                    __CFG_LVP$OFF 0000  
                          l1022 0807                            l1109 16F7                            l4011 090C  
                          l4015 091F                            l4107 17A6                            l4035 16EF  
                          l4211 09F7                            l4125 16CE                            l4109 17A7  
                          l4223 0A31                            l4231 0A69                            l4215 0A04  
                          l5031 058F                            l4241 1643                            l4401 0EF8  
                          l4065 17F0                            l4057 17CC                            l4225 0A35  
                          l4209 09F5                            l4217 0A26                            l5017 0551  
                          l5009 0531                            l4411 0F1A                            l4331 0DF1  
                          l4059 17DA                            l4091 0B0F                            l4083 0AAF  
                          l4163 0C27                            l4237 163D                            l4421 0F62  
                          l4069 17FB                            l4157 0C16                            l4173 0C39  
                          l4149 0BE6                            l4229 0A47                            l4501 0636  
                          l5053 05ED                            l4415 0F23                            l4407 0F12  
                          l4271 0CF1                            l4183 0C64                            l4175 0C44  
                          l5039 05AF                            l4417 0F38                            l4425 0F8C  
                          l4329 0DE3                            l4265 0CC1                            l4089 0B02  
                          l4185 0C69                            l4193 0C76                            l4505 0641  
                          l4521 0675                            l4443 0FB2                            l4419 0F4D  
                          l4427 0F9A                            l4363 0E36                            l4283 0D02  
                          l4259 0CBC                            l4275 0CF9                            l4099 0B6E  
                          l4187 0C6E                            l4195 0C86                            l4179 0B90  
                          l4507 0648                            l4437 0FAD                            l4373 0E69  
                          l4189 0C73                            l4197 0C93                            l4525 0680  
                          l4541 06B4                            l4509 064F                            l4517 0667  
                          l4605 07F6                            l4375 0E7E                            l4383 0ED2  
                          l4295 0D21                            l4527 0687                            l4519 0674  
                          l4449 0FCC                            l4377 0E93                            l4385 0EE0  
                          l4369 0E64                            l4289 0D07                            l4545 06BF  
                          l4529 068E                            l4537 06A6                            l4561 06F7  
                          l4475 0FF5                            l4395 0EF3                            l4379 0EA8  
                          l4299 0D29                            l3931 0958                            l4547 06C6  
                          l4539 06B3                            l4571 0708                            l3933 096E  
                          l4565 06FF                            l4549 06CD                            l4557 06E5  
                          l4485 0602                            l4573 071F                            l4581 0773  
                          l3943 0992                            l4559 06F2                            l4487 0609  
                          l4567 05F5                            l4591 07A0                            l4575 0734  
                          l4583 0783                            l3945 099A                            l3937 097C  
                          l4489 0610                            l4497 0628                            l4593 07C4  
                          l4577 0749                            l3971 089B                            l3955 09BA  
                          l3939 0984                            l4499 0635                            l3973 08A5  
                          l3949 09A8                            l3975 08AF                            l3959 09C7  
                          l3969 0891                            l4945 0435                            l4929 03E9  
                          l3995 08DA                            l4955 0455                            ?_isr 0072  
                          l3999 08ED                            l4991 04EE                            l4977 04B0  
                          l4969 0493                            l4999 0506                            STR_1 1006  
                          u3020 0CA7                            u3105 0D0A                            u4007 165A  
                          u3135 0D57                            u4017 166D                            u3305 0E4C  
                          u3425 0FB5                            u2625 08CA                            u2705 16F8  
                          u3355 0EFB                            u2715 16FF                            u2805 0AA2  
                          u3295 0E39                            u2655 08FC                            u2815 0AB6  
                          u2745 17CF                            u2825 0B16                            u2915 0B9B  
                          _PEIE 005E                            u2765 17DB                            u2775 17E7  
                          u3575 07AB                            u3807 0404                            u2785 17F1  
                          u3817 041F                            u3907 05D9                            u3827 045D  
                          _RCIF 0065                            u2965 0A0D                            u3917 16AF  
                          u3837 047F                            u3927 07DA                            u3847 04B8  
                          u3767 0074                            u3937 061C                            u3857 04DA  
                          u3777 00AB                            u2995 0A50                            u3947 065B  
                          u3867 051D                            u3787 00C0                            u3957 069A  
                          u3877 0559                            u3797 00D5                            u3967 06D9  
                          u3887 057B                            u3977 0A7E                            u3897 05B7  
                          u3987 0C59                            u3997 0C8C                            _TMR0 0001  
                          _TRMT 04C1                    __CFG_WRT$OFF 0000                            _radH 00D0  
                          _radL 00D1                            _main 006C                            _left 0383  
                          _down 0381                            _path 01B8                            _loop 00CA  
                          btemp 007E                            ltemp 007E                            start 0012  
                          ttemp 007E                            wtemp 007E               ___bmul@multiplier 0023  
               __end_of_Drive1m 0C9C                           ??_isr 0072                      PathTo@loop 0043  
                         ?_main 0072                   __CFG_WDTE$OFF 0000                 __end_of___lwdiv 1800  
                         i1l340 1729                           _RCREG 001A                           _RCSTA 0018  
                         _SPBRG 0099                           _PORTA 0005                           _PORTB 0006  
                         _PORTC 0007                           _PORTD 0008                           _PORTE 0009  
                         _TRISA 0085                           _TRISB 0086                           _TRISC 0087  
                         _TRISD 0088                           _TRISE 0089                           _SSPIF 0063  
                         _TXREG 0019                           _TXSTA 0098        _intersection_orientation 005A  
                         _Drive 1734                           _angle 0077      __end_of_lcdWriteToDigitBCD 09E5  
           __end_of_DriveDirect 094A                           _right 0386                           _x_int 0061  
                         _y_int 0065                  __pbitbssCOMMON 0380                  __CFG_BOREN$OFF 0000  
                         pclath 000A                           ltemp0 007E                           ltemp1 0082  
                         ltemp2 0086                           ltemp3 0080                      _LeftSpeedH 0053  
                    _LeftSpeedL 0054                           ttemp0 007E                           ttemp1 0081  
                         ttemp2 0084                           ttemp3 0087                           ttemp4 007F  
                         status 0003                           wtemp0 007E                           wtemp1 0080  
                         wtemp2 0082                           wtemp3 0084                           wtemp4 0086  
                         wtemp5 0088                           wtemp6 007F                     PathTo@F1222 0190  
               __initialization 0015                    __end_of_main 05F1                       ??_ADCMain 002F  
      __size_of_lcdWriteControl 0014                          ??_main 004A            __end_of_lcdSetCursor 1603  
              ??_lcdWriteString 0023                          ?_Drive 0021                          _ADCON0 001F  
                        _ADCON1 009F                          _ADRESH 001E                          _ADRESL 009E  
                        i1l3467 1723                          _TMR0IE 005D                          _TMR0IF 005A  
                        _SSPCON 0014                          _SSPBUF 0013                       ??_Drive1m 0035  
                __CFG_PWRTE$OFF 0000                          _PathTo 0C9C                          _adcRAW 004F  
                        _Turn90 09E5                          ___bmul 1639                          ___wmul 16EB  
                        _getADC 0878            __end_of_lcdWriteData 165F                 lcdWriteString@s 0024  
                     ??___lwdiv 0024                          _speedH 00D2                          _speedL 00D3  
                        _x_goto 0060                          _x_path 0062                          _y_goto 0064  
                        _y_path 0066                __end_of_re_route 07F8                     _DriveDirect 08BD  
              __end_of_ser_init 1628                __end_of_setupADC 16B2                __end_of_setupLCD 0838  
              __end_of_setupSPI 16CB                          saved_w 007E                 Turn90@direction 002D  
                    _TravelPath 05F1         __end_of__initialization 0068                  PathTo@mazeGrid 002D  
           ___bmul@multiplicand 0020                   __end_of_Drive 175C                  __pcstackCOMMON 0072  
                  __pidataBANK0 15F3                    __pidataBANK1 1673                    __pidataBANK2 0838  
                  __pidataBANK3 175C                  PathTo@x_target 0041                  PathTo@y_target 0025  
               DriveDirect@data 0026                         ??_Drive 0024               ??_lcdWriteControl 0020  
                    __pbssBANK0 004D                      __pbssBANK1 00A0                      __pbssBANK3 01B8  
             _pathCountShortest 0068             lcdSetCursor@address 0023                         ?_PathTo 0025  
                    __pmaintext 006C                         ?_Turn90 0072                         ?___bmul 0020  
                       ?___wmul 0020                         ?_getADC 0072                      __pintentry 0004  
         __size_of_lcdSetCursor 0009                         _ADCMain 1687           __end_of_getSensorData 17C2  
            __size_of_ser_getch 000A              __size_of_ser_putch 000C                     ?_TravelPath 0072  
                   _RightSpeedH 0057                     _RightSpeedL 0058                         _IR_Wall 0380  
                       _SSPSTAT 0094                      __stringtab 1000                         _Drive1m 0B8A  
       DriveDirect@VelocityLeft 0023           __size_of_lcdWriteData 0013                       ?_re_route 0072  
                  _lcdSetCursor 15FA              _lcdWriteToDigitBCD 094A                       ?_ser_init 0072  
               __size_of_PathTo 0364                       ?_setupADC 0072                       ?_setupLCD 0072  
                     ?_setupSPI 0072                 __size_of_Turn90 00A1                 __size_of___bmul 0013  
               __size_of___wmul 0023                 __size_of_getADC 0045                         ___lwdiv 17C2  
           ?_lcdWriteToDigitBCD 0023                         __ptext1 0800                         __ptext2 16B2  
                       __ptext3 080F                         __ptext4 169C                         __ptext5 1619  
                       __ptext6 0706                         __ptext7 05F1                         __ptext8 09E5  
                       __ptext9 1734                    __size_of_isr 0026                         _lowByte 005B  
              _orientation_path 005C                         _targets 005F                         _routing 0387  
                       clrloop0 07F9                    _lcdWriteData 164C            end_of_initialization 0068  
          ??_lcdWriteToDigitBCD 0025               __end_of_ser_getch 160D               __end_of_ser_putch 1619  
                    ??_re_route 0045                      _wallFollow 0A86                      _reset_flag 0385  
                    ??_ser_init 0020                      ??_setupADC 0020                      ??_setupLCD 0023  
                    ??_setupSPI 0020             __size_of_TravelPath 0115                      _time_count 00CC  
                  ?_DriveDirect 0021                       Drive@radH 0022                       Drive@radL 0023  
                   TravelPath@n 003C                   ?_spi_transfer 0072                 ser_getch@rxbyte 0021  
                    main@fourth 00EE                      main@second 00EC                  __end_of_PathTo 1000  
                     PathTo@sum 0042                  __end_of_Turn90 0A86                  __end_of___bmul 164C  
           DriveDirect@data_485 0028                 _lcdWriteControl 165F                  __end_of___wmul 170E  
                __end_of_getADC 08BD             start_initialization 0015                     __end_of_isr 1734  
                ??_spi_transfer 0020         __size_of_lcdWriteString 0020                     ?_wallFollow 0072  
                      ??_PathTo 0026                        ??_Turn90 002A                        ??___bmul 0021  
                      ??___wmul 0024                        ??_getADC 0020                      init_fetch0 1628  
                   __pdataBANK0 0067                     __pdataBANK1 00D6                     __pdataBANK2 0110  
                   __pdataBANK3 0190                        ?_ADCMain 0072                     __pbssCOMMON 0077  
                     ___latbits 0002                   __pcstackBANK0 0020                   __pcstackBANK1 00EA  
                  ??_TravelPath 003A                        ?_Drive1m 0072         __end_of_lcdWriteControl 1673  
              ___lwdiv@dividend 0022               __size_of_re_route 00F2               __size_of_ser_init 000F  
                      ?___lwdiv 0020               __size_of_setupADC 0016               __size_of_setupLCD 0029  
            __end_of_TravelPath 0706               __size_of_setupSPI 0019                       __pstrings 1000  
                  _pathShortest 00A0                       _gridWalls 0110                  __size_of_Drive 0028  
          __size_of_DriveDirect 008D             __size_of_wallFollow 0104            wallFollow@setADCdist 0033  
              ___lwdiv@quotient 0026                   _targets_found 0388                 main@controlByte 00EA  
                     _pathCount 005D         lcdWriteControl@databyte 0022               interrupt_function 0004  
        __size_of_getSensorData 003E                  ___wmul@product 0024                      ser_putch@c 0020  
         getSensorData@packetID 0026                       clear_ram0 07F8                       _ser_getch 1603  
                     _ser_putch 160D                       _timerLoop 00CE                        Drive1m@n 0038  
              __size_of_ADCMain 0015                   _VelocityRight 00C8            __end_of_spi_transfer 080F  
                   __stringbase 1005               ___wmul@multiplier 0020                spi_transfer@data 0022  
                     main@fifth 00EF                       main@first 00EB                spi_transfer@temp 0021  
                    _ADC_ADJUST 004D                       main@third 00ED                        _Distance 00C4  
          lcdWriteData@databyte 0022     __size_of_lcdWriteToDigitBCD 009B                  _lcdWriteString 16CB  
      DriveDirect@VelocityRight 0021                __size_of_Drive1m 0112                _ADJUSTED_SPEED_L 00C0  
              _ADJUSTED_SPEED_R 00C2                      ?_ser_getch 0072                ?_lcdWriteControl 0072  
               _mazeGridDefault 00D6                      ?_ser_putch 0072                __size_of___lwdiv 003E  
                 _getSensorData 1784              __end_of__stringtab 1006  lcdWriteToDigitBCD@TenThouDigit 002B  
               ___lwdiv@divisor 0020                 ___lwdiv@counter 0025                        __ptext10 0B8A  
                      __ptext11 0A86                        __ptext20 1603                        __ptext12 16EB  
                      __ptext21 0C9C                        __ptext13 17C2                        __ptext22 16CB  
                      __ptext14 08BD                        __ptext23 164C                        __ptext15 1687  
                      __ptext24 15FA                        __ptext16 094A                        __ptext25 165F  
                      __ptext17 0878                        __ptext26 1639                        __ptext18 1784  
                      __ptext27 170E                        __ptext19 160D                        _highByte 0079  
        __end_of_lcdWriteString 16EB                        _distance 0051                        _homeBase 0382  
                      _leftWall 0384                        _mazeGrid 01A4                   __size_of_main 0585  
                      _re_route 0706                    ??_wallFollow 002F                        _ser_init 1619  
                      _setupADC 169C                        _setupLCD 080F                        _setupSPI 16B2  
                    _PB7Counter 0055     lcdWriteToDigitBCD@HunsDigit 0027                        _x_target 00D4  
                    _PB8Counter 0056                        _y_target 00D5                    _VelocityLeft 00C6  
   lcdWriteToDigitBCD@OnesDigit 002D                  ?_getSensorData 0022     lcdWriteToDigitBCD@TensDigit 0025  
   lcdWriteToDigitBCD@ThouDigit 0029                        init_ram0 162C              __end_of_wallFollow 0B8A  
               ?_lcdWriteString 0072                  Drive1m@omni_IR 0039                        intlevel1 0000  
                 ?_lcdSetCursor 0072                       stringcode 1000                     ??_ser_getch 0020  
                   ??_ser_putch 0020             getSensorData@sensor 0027           __size_of_spi_transfer 000F  
                   _orientation 0067                      _OPTION_REG 0081                        stringdir 1000  
                      stringtab 1000              getSensorData@bytes 0022                   ?_lcdWriteData 0072  
        lcdWriteToDigitBCD@data 0023                    _spi_transfer 0800                  ??_lcdSetCursor 0023  
               _CURRENT_SPEED_L 006A                 _CURRENT_SPEED_R 006C  
